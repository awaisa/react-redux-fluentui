(()=>{var e,t,n={679:(e,t,n)=>{"use strict";var o=n(864),r={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(e){return o.isMemo(e)?a:s[e.$$typeof]||r}s[o.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[o.Memo]=a;var u=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,o){if("string"!=typeof n){if(h){var r=f(n);r&&r!==h&&e(t,r,o)}var a=c(n);d&&(a=a.concat(d(n)));for(var s=l(t),m=l(n),g=0;g<a.length;++g){var v=a[g];if(!(i[v]||o&&o[v]||m&&m[v]||s&&s[v])){var y=p(n,v);try{u(t,v,y)}catch(e){}}}}return t}},826:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},418:e=>{"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function r(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var o={};return"abcdefghijklmnopqrst".split("").forEach((function(e){o[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},o)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var a,s,l=r(e),u=1;u<arguments.length;u++){for(var c in a=Object(arguments[u]))n.call(a,c)&&(l[c]=a[c]);if(t){s=t(a);for(var d=0;d<s.length;d++)o.call(a,s[d])&&(l[s[d]]=a[s[d]])}}return l}},779:(e,t,n)=>{var o=n(826);e.exports=f,e.exports.parse=i,e.exports.compile=function(e,t){return s(i(e,t),t)},e.exports.tokensToFunction=s,e.exports.tokensToRegExp=p;var r=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,o=[],i=0,a=0,s="",c=t&&t.delimiter||"/";null!=(n=r.exec(e));){var d=n[0],p=n[1],f=n.index;if(s+=e.slice(a,f),a=f+d.length,p)s+=p[1];else{var h=e[a],m=n[2],g=n[3],v=n[4],y=n[5],b=n[6],_=n[7];s&&(o.push(s),s="");var C=null!=m&&null!=h&&h!==m,S="+"===b||"*"===b,k="?"===b||"*"===b,x=n[2]||c,w=v||y;o.push({name:g||i++,prefix:m||"",delimiter:x,optional:k,repeat:S,partial:C,asterisk:!!_,pattern:w?u(w):_?".*":"[^"+l(x)+"]+?"})}}return a<e.length&&(s+=e.substr(a)),s&&o.push(s),o}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function s(e,t){for(var n=new Array(e.length),r=0;r<e.length;r++)"object"==typeof e[r]&&(n[r]=new RegExp("^(?:"+e[r].pattern+")$",d(t)));return function(t,r){for(var i="",s=t||{},l=(r||{}).pretty?a:encodeURIComponent,u=0;u<e.length;u++){var c=e[u];if("string"!=typeof c){var d,p=s[c.name];if(null==p){if(c.optional){c.partial&&(i+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(o(p)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var f=0;f<p.length;f++){if(d=l(p[f]),!n[u].test(d))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(d)+"`");i+=(0===f?c.prefix:c.delimiter)+d}}else{if(d=c.asterisk?encodeURI(p).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):l(p),!n[u].test(d))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+d+'"');i+=c.prefix+d}}else i+=c}return i}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function u(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function d(e){return e&&e.sensitive?"":"i"}function p(e,t,n){o(t)||(n=t||n,t=[]);for(var r=(n=n||{}).strict,i=!1!==n.end,a="",s=0;s<e.length;s++){var u=e[s];if("string"==typeof u)a+=l(u);else{var p=l(u.prefix),f="(?:"+u.pattern+")";t.push(u),u.repeat&&(f+="(?:"+p+f+")*"),a+=f=u.optional?u.partial?p+"("+f+")?":"(?:"+p+"("+f+"))?":p+"("+f+")"}}var h=l(n.delimiter||"/"),m=a.slice(-h.length)===h;return r||(a=(m?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":r&&m?"":"(?="+h+"|$)",c(new RegExp("^"+a,d(n)),t)}function f(e,t,n){return o(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var o=0;o<n.length;o++)t.push({name:o,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(e,t):o(e)?function(e,t,n){for(var o=[],r=0;r<e.length;r++)o.push(f(e[r],t,n).source);return c(new RegExp("(?:"+o.join("|")+")",d(n)),t)}(e,t,n):function(e,t,n){return p(i(e,n),t,n)}(e,t,n)}},703:(e,t,n)=>{"use strict";var o=n(414);function r(){}function i(){}i.resetWarningCache=r,e.exports=function(){function e(e,t,n,r,i,a){if(a!==o){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:r};return n.PropTypes=n,n}},697:(e,t,n)=>{e.exports=n(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},448:(e,t,n)=>{"use strict";var o=n(294),r=n(418),i=n(840);
/** @license React v16.14.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!o)throw Error(a(227));function s(e,t,n,o,r,i,a,s,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var l=!1,u=null,c=!1,d=null,p={onError:function(e){l=!0,u=e}};function f(e,t,n,o,r,i,a,c,d){l=!1,u=null,s.apply(p,arguments)}var h=null,m=null,g=null;function v(e,t,n){var o=e.type||"unknown-event";e.currentTarget=g(n),function(e,t,n,o,r,i,s,p,h){if(f.apply(this,arguments),l){if(!l)throw Error(a(198));var m=u;l=!1,u=null,c||(c=!0,d=m)}}(o,t,void 0,e),e.currentTarget=null}var y=null,b={};function _(){if(y)for(var e in b){var t=b[e],n=y.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!S[n]){if(!t.extractEvents)throw Error(a(97,e));for(var o in S[n]=t,n=t.eventTypes){var r=void 0,i=n[o],s=t,l=o;if(k.hasOwnProperty(l))throw Error(a(99,l));k[l]=i;var u=i.phasedRegistrationNames;if(u){for(r in u)u.hasOwnProperty(r)&&C(u[r],s,l);r=!0}else i.registrationName?(C(i.registrationName,s,l),r=!0):r=!1;if(!r)throw Error(a(98,o,e))}}}}function C(e,t,n){if(x[e])throw Error(a(100,e));x[e]=t,w[e]=t.eventTypes[n].dependencies}var S=[],k={},x={},w={};function E(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var o=e[t];if(!b.hasOwnProperty(t)||b[t]!==o){if(b[t])throw Error(a(102,t));b[t]=o,n=!0}}n&&_()}var I=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),T=null,D=null,P=null;function M(e){if(e=m(e)){if("function"!=typeof T)throw Error(a(280));var t=e.stateNode;t&&(t=h(t),T(e.stateNode,e.type,t))}}function R(e){D?P?P.push(e):P=[e]:D=e}function F(){if(D){var e=D,t=P;if(P=D=null,M(e),t)for(e=0;e<t.length;e++)M(t[e])}}function N(e,t){return e(t)}function A(e,t,n,o,r){return e(t,n,o,r)}function L(){}var B=N,O=!1,H=!1;function z(){null===D&&null===P||(L(),F())}function W(e,t,n){if(H)return e(t,n);H=!0;try{return B(e,t,n)}finally{H=!1,z()}}var U=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,V=Object.prototype.hasOwnProperty,K={},G={};function j(e,t,n,o,r,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=o,this.attributeNamespace=r,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var q={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){q[e]=new j(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];q[t]=new j(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){q[e]=new j(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){q[e]=new j(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){q[e]=new j(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){q[e]=new j(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){q[e]=new j(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){q[e]=new j(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){q[e]=new j(e,5,!1,e.toLowerCase(),null,!1)}));var Q=/[\-:]([a-z])/g;function $(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(Q,$);q[t]=new j(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(Q,$);q[t]=new j(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(Q,$);q[t]=new j(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){q[e]=new j(e,1,!1,e.toLowerCase(),null,!1)})),q.xlinkHref=new j("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){q[e]=new j(e,1,!1,e.toLowerCase(),null,!0)}));var Z=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function X(e,t,n,o){var r=q.hasOwnProperty(t)?q[t]:null;(null!==r?0===r.type:!o&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,o){if(null==t||function(e,t,n,o){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!o&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,o))return!0;if(o)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,r,o)&&(n=null),o||null===r?function(e){return!!V.call(G,e)||!V.call(K,e)&&(U.test(e)?G[e]=!0:(K[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):r.mustUseProperty?e[r.propertyName]=null===n?3!==r.type&&"":n:(t=r.attributeName,o=r.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(r=r.type)||4===r&&!0===n?"":""+n,o?e.setAttributeNS(o,t,n):e.setAttribute(t,n))))}Z.hasOwnProperty("ReactCurrentDispatcher")||(Z.ReactCurrentDispatcher={current:null}),Z.hasOwnProperty("ReactCurrentBatchConfig")||(Z.ReactCurrentBatchConfig={suspense:null});var Y=/^(.*)[\\\/]/,J="function"==typeof Symbol&&Symbol.for,ee=J?Symbol.for("react.element"):60103,te=J?Symbol.for("react.portal"):60106,ne=J?Symbol.for("react.fragment"):60107,oe=J?Symbol.for("react.strict_mode"):60108,re=J?Symbol.for("react.profiler"):60114,ie=J?Symbol.for("react.provider"):60109,ae=J?Symbol.for("react.context"):60110,se=J?Symbol.for("react.concurrent_mode"):60111,le=J?Symbol.for("react.forward_ref"):60112,ue=J?Symbol.for("react.suspense"):60113,ce=J?Symbol.for("react.suspense_list"):60120,de=J?Symbol.for("react.memo"):60115,pe=J?Symbol.for("react.lazy"):60116,fe=J?Symbol.for("react.block"):60121,he="function"==typeof Symbol&&Symbol.iterator;function me(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=he&&e[he]||e["@@iterator"])?e:null}function ge(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case re:return"Profiler";case oe:return"StrictMode";case ue:return"Suspense";case ce:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ae:return"Context.Consumer";case ie:return"Context.Provider";case le:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case de:return ge(e.type);case fe:return ge(e.render);case pe:if(e=1===e._status?e._result:null)return ge(e)}return null}function ve(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var o=e._debugOwner,r=e._debugSource,i=ge(e.type);n=null,o&&(n=ge(o.type)),o=i,i="",r?i=" (at "+r.fileName.replace(Y,"")+":"+r.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(o||"Unknown")+i}t+=n,e=e.return}while(e);return t}function ye(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function _e(e){e._valueTracker||(e._valueTracker=function(e){var t=be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),o=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var r=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return r.call(this)},set:function(e){o=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return o},setValue:function(e){o=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Ce(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),o="";return e&&(o=be(e)?e.checked?"true":"false":e.value),(e=o)!==n&&(t.setValue(e),!0)}function Se(e,t){var n=t.checked;return r({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ke(e,t){var n=null==t.defaultValue?"":t.defaultValue,o=null!=t.checked?t.checked:t.defaultChecked;n=ye(null!=t.value?t.value:n),e._wrapperState={initialChecked:o,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function xe(e,t){null!=(t=t.checked)&&X(e,"checked",t,!1)}function we(e,t){xe(e,t);var n=ye(t.value),o=t.type;if(null!=n)"number"===o?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===o||"reset"===o)return void e.removeAttribute("value");t.hasOwnProperty("value")?Ie(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ie(e,t.type,ye(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ee(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var o=t.type;if(!("submit"!==o&&"reset"!==o||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Ie(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Te(e,t){return e=r({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function De(e,t,n,o){if(e=e.options,t){t={};for(var r=0;r<n.length;r++)t["$"+n[r]]=!0;for(n=0;n<e.length;n++)r=t.hasOwnProperty("$"+e[n].value),e[n].selected!==r&&(e[n].selected=r),r&&o&&(e[n].defaultSelected=!0)}else{for(n=""+ye(n),t=null,r=0;r<e.length;r++){if(e[r].value===n)return e[r].selected=!0,void(o&&(e[r].defaultSelected=!0));null!==t||e[r].disabled||(t=e[r])}null!==t&&(t.selected=!0)}}function Pe(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return r({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Me(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ye(n)}}function Re(e,t){var n=ye(t.value),o=ye(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=o&&(e.defaultValue=""+o)}function Fe(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Ne="http://www.w3.org/1999/xhtml",Ae="http://www.w3.org/2000/svg";function Le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Be(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Oe,He,ze=(He=function(e,t){if(e.namespaceURI!==Ae||"innerHTML"in e)e.innerHTML=t;else{for((Oe=Oe||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Oe.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,o){MSApp.execUnsafeLocalFunction((function(){return He(e,t)}))}:He);function We(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Ue(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Ve={animationend:Ue("Animation","AnimationEnd"),animationiteration:Ue("Animation","AnimationIteration"),animationstart:Ue("Animation","AnimationStart"),transitionend:Ue("Transition","TransitionEnd")},Ke={},Ge={};function je(e){if(Ke[e])return Ke[e];if(!Ve[e])return e;var t,n=Ve[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ge)return Ke[e]=n[t];return e}I&&(Ge=document.createElement("div").style,"AnimationEvent"in window||(delete Ve.animationend.animation,delete Ve.animationiteration.animation,delete Ve.animationstart.animation),"TransitionEvent"in window||delete Ve.transitionend.transition);var qe=je("animationend"),Qe=je("animationiteration"),$e=je("animationstart"),Ze=je("transitionend"),Xe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ye=new("function"==typeof WeakMap?WeakMap:Map);function Je(e){var t=Ye.get(e);return void 0===t&&(t=new Map,Ye.set(e,t)),t}function et(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function tt(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function nt(e){if(et(e)!==e)throw Error(a(188))}function ot(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=et(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,o=t;;){var r=n.return;if(null===r)break;var i=r.alternate;if(null===i){if(null!==(o=r.return)){n=o;continue}break}if(r.child===i.child){for(i=r.child;i;){if(i===n)return nt(r),e;if(i===o)return nt(r),t;i=i.sibling}throw Error(a(188))}if(n.return!==o.return)n=r,o=i;else{for(var s=!1,l=r.child;l;){if(l===n){s=!0,n=r,o=i;break}if(l===o){s=!0,o=r,n=i;break}l=l.sibling}if(!s){for(l=i.child;l;){if(l===n){s=!0,n=i,o=r;break}if(l===o){s=!0,o=i,n=r;break}l=l.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==o)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function it(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var at=null;function st(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var o=0;o<t.length&&!e.isPropagationStopped();o++)v(e,t[o],n[o]);else t&&v(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function lt(e){if(null!==e&&(at=rt(at,e)),e=at,at=null,e){if(it(e,st),at)throw Error(a(95));if(c)throw e=d,c=!1,d=null,e}}function ut(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ct(e){if(!I)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var dt=[];function pt(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>dt.length&&dt.push(e)}function ft(e,t,n,o){if(dt.length){var r=dt.pop();return r.topLevelType=e,r.eventSystemFlags=o,r.nativeEvent=t,r.targetInst=n,r}return{topLevelType:e,eventSystemFlags:o,nativeEvent:t,targetInst:n,ancestors:[]}}function ht(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var o=n;if(3===o.tag)o=o.stateNode.containerInfo;else{for(;o.return;)o=o.return;o=3!==o.tag?null:o.stateNode.containerInfo}if(!o)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Mn(o)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var r=ut(e.nativeEvent);o=e.topLevelType;var i=e.nativeEvent,a=e.eventSystemFlags;0===n&&(a|=64);for(var s=null,l=0;l<S.length;l++){var u=S[l];u&&(u=u.extractEvents(o,t,i,r,a))&&(s=rt(s,u))}lt(s)}}function mt(e,t,n){if(!n.has(e)){switch(e){case"scroll":$t(t,"scroll",!0);break;case"focus":case"blur":$t(t,"focus",!0),$t(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":ct(e)&&$t(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Xe.indexOf(e)&&Qt(e,t)}n.set(e,null)}}var gt,vt,yt,bt=!1,_t=[],Ct=null,St=null,kt=null,xt=new Map,wt=new Map,Et=[],It="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Tt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Dt(e,t,n,o,r){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:r,container:o}}function Pt(e,t){switch(e){case"focus":case"blur":Ct=null;break;case"dragenter":case"dragleave":St=null;break;case"mouseover":case"mouseout":kt=null;break;case"pointerover":case"pointerout":xt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":wt.delete(t.pointerId)}}function Mt(e,t,n,o,r,i){return null===e||e.nativeEvent!==i?(e=Dt(t,n,o,r,i),null!==t&&(null!==(t=Rn(t))&&vt(t)),e):(e.eventSystemFlags|=o,e)}function Rt(e){var t=Mn(e.target);if(null!==t){var n=et(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=tt(n)))return e.blockedOn=t,void i.unstable_runWithPriority(e.priority,(function(){yt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Ft(e){if(null!==e.blockedOn)return!1;var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=Rn(t);return null!==n&&vt(n),e.blockedOn=t,!1}return!0}function Nt(e,t,n){Ft(e)&&n.delete(t)}function At(){for(bt=!1;0<_t.length;){var e=_t[0];if(null!==e.blockedOn){null!==(e=Rn(e.blockedOn))&&gt(e);break}var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:_t.shift()}null!==Ct&&Ft(Ct)&&(Ct=null),null!==St&&Ft(St)&&(St=null),null!==kt&&Ft(kt)&&(kt=null),xt.forEach(Nt),wt.forEach(Nt)}function Lt(e,t){e.blockedOn===t&&(e.blockedOn=null,bt||(bt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,At)))}function Bt(e){function t(t){return Lt(t,e)}if(0<_t.length){Lt(_t[0],e);for(var n=1;n<_t.length;n++){var o=_t[n];o.blockedOn===e&&(o.blockedOn=null)}}for(null!==Ct&&Lt(Ct,e),null!==St&&Lt(St,e),null!==kt&&Lt(kt,e),xt.forEach(t),wt.forEach(t),n=0;n<Et.length;n++)(o=Et[n]).blockedOn===e&&(o.blockedOn=null);for(;0<Et.length&&null===(n=Et[0]).blockedOn;)Rt(n),null===n.blockedOn&&Et.shift()}var Ot={},Ht=new Map,zt=new Map,Wt=["abort","abort",qe,"animationEnd",Qe,"animationIteration",$e,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ze,"transitionEnd","waiting","waiting"];function Ut(e,t){for(var n=0;n<e.length;n+=2){var o=e[n],r=e[n+1],i="on"+(r[0].toUpperCase()+r.slice(1));i={phasedRegistrationNames:{bubbled:i,captured:i+"Capture"},dependencies:[o],eventPriority:t},zt.set(o,t),Ht.set(o,i),Ot[r]=i}}Ut("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Ut("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Ut(Wt,2);for(var Vt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Kt=0;Kt<Vt.length;Kt++)zt.set(Vt[Kt],0);var Gt=i.unstable_UserBlockingPriority,jt=i.unstable_runWithPriority,qt=!0;function Qt(e,t){$t(t,e,!1)}function $t(e,t,n){var o=zt.get(t);switch(void 0===o?2:o){case 0:o=Zt.bind(null,t,1,e);break;case 1:o=Xt.bind(null,t,1,e);break;default:o=Yt.bind(null,t,1,e)}n?e.addEventListener(t,o,!0):e.addEventListener(t,o,!1)}function Zt(e,t,n,o){O||L();var r=Yt,i=O;O=!0;try{A(r,e,t,n,o)}finally{(O=i)||z()}}function Xt(e,t,n,o){jt(Gt,Yt.bind(null,e,t,n,o))}function Yt(e,t,n,o){if(qt)if(0<_t.length&&-1<It.indexOf(e))e=Dt(null,e,t,n,o),_t.push(e);else{var r=Jt(e,t,n,o);if(null===r)Pt(e,o);else if(-1<It.indexOf(e))e=Dt(r,e,t,n,o),_t.push(e);else if(!function(e,t,n,o,r){switch(t){case"focus":return Ct=Mt(Ct,e,t,n,o,r),!0;case"dragenter":return St=Mt(St,e,t,n,o,r),!0;case"mouseover":return kt=Mt(kt,e,t,n,o,r),!0;case"pointerover":var i=r.pointerId;return xt.set(i,Mt(xt.get(i)||null,e,t,n,o,r)),!0;case"gotpointercapture":return i=r.pointerId,wt.set(i,Mt(wt.get(i)||null,e,t,n,o,r)),!0}return!1}(r,e,t,n,o)){Pt(e,o),e=ft(e,o,null,t);try{W(ht,e)}finally{pt(e)}}}}function Jt(e,t,n,o){if(null!==(n=Mn(n=ut(o)))){var r=et(n);if(null===r)n=null;else{var i=r.tag;if(13===i){if(null!==(n=tt(r)))return n;n=null}else if(3===i){if(r.stateNode.hydrate)return 3===r.tag?r.stateNode.containerInfo:null;n=null}else r!==n&&(n=null)}}e=ft(e,o,n,t);try{W(ht,e)}finally{pt(e)}return null}var en={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},tn=["Webkit","ms","Moz","O"];function nn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||en.hasOwnProperty(e)&&en[e]?(""+t).trim():t+"px"}function on(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var o=0===n.indexOf("--"),r=nn(n,t[n],o);"float"===n&&(n="cssFloat"),o?e.setProperty(n,r):e[n]=r}}Object.keys(en).forEach((function(e){tn.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),en[t]=en[e]}))}));var rn=r({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function an(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function sn(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ln=Ne;function un(e,t){var n=Je(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=w[t];for(var o=0;o<t.length;o++)mt(t[o],e,n)}function cn(){}function dn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function pn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fn(e,t){var n,o=pn(e);for(e=0;o;){if(3===o.nodeType){if(n=e+o.textContent.length,e<=t&&n>=t)return{node:o,offset:t-e};e=n}e:{for(;o;){if(o.nextSibling){o=o.nextSibling;break e}o=o.parentNode}o=void 0}o=pn(o)}}function hn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?hn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function mn(){for(var e=window,t=dn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=dn((e=t.contentWindow).document)}return t}function gn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var vn="$?",yn="$!",bn=null,_n=null;function Cn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Sn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var kn="function"==typeof setTimeout?setTimeout:void 0,xn="function"==typeof clearTimeout?clearTimeout:void 0;function wn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function En(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||n===yn||n===vn){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var In=Math.random().toString(36).slice(2),Tn="__reactInternalInstance$"+In,Dn="__reactEventHandlers$"+In,Pn="__reactContainere$"+In;function Mn(e){var t=e[Tn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Pn]||n[Tn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=En(e);null!==e;){if(n=e[Tn])return n;e=En(e)}return t}n=(e=n).parentNode}return null}function Rn(e){return!(e=e[Tn]||e[Pn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Fn(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function Nn(e){return e[Dn]||null}function An(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Ln(e,t){var n=e.stateNode;if(!n)return null;var o=h(n);if(!o)return null;n=o[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(o=!o.disabled)||(o=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!o;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}function Bn(e,t,n){(t=Ln(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function On(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=An(t);for(t=n.length;0<t--;)Bn(n[t],"captured",e);for(t=0;t<n.length;t++)Bn(n[t],"bubbled",e)}}function Hn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=Ln(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function zn(e){e&&e.dispatchConfig.registrationName&&Hn(e._targetInst,null,e)}function Wn(e){it(e,On)}var Un=null,Vn=null,Kn=null;function Gn(){if(Kn)return Kn;var e,t,n=Vn,o=n.length,r="value"in Un?Un.value:Un.textContent,i=r.length;for(e=0;e<o&&n[e]===r[e];e++);var a=o-e;for(t=1;t<=a&&n[o-t]===r[i-t];t++);return Kn=r.slice(e,1<t?1-t:void 0)}function jn(){return!0}function qn(){return!1}function Qn(e,t,n,o){for(var r in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(r)&&((t=e[r])?this[r]=t(n):"target"===r?this.target=o:this[r]=n[r]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?jn:qn,this.isPropagationStopped=qn,this}function $n(e,t,n,o){if(this.eventPool.length){var r=this.eventPool.pop();return this.call(r,e,t,n,o),r}return new this(e,t,n,o)}function Zn(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Xn(e){e.eventPool=[],e.getPooled=$n,e.release=Zn}r(Qn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=jn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=jn)},persist:function(){this.isPersistent=jn},isPersistent:qn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=qn,this._dispatchInstances=this._dispatchListeners=null}}),Qn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Qn.extend=function(e){function t(){}function n(){return o.apply(this,arguments)}var o=this;t.prototype=o.prototype;var i=new t;return r(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=r({},o.Interface,e),n.extend=o.extend,Xn(n),n},Xn(Qn);var Yn=Qn.extend({data:null}),Jn=Qn.extend({data:null}),eo=[9,13,27,32],to=I&&"CompositionEvent"in window,no=null;I&&"documentMode"in document&&(no=document.documentMode);var oo=I&&"TextEvent"in window&&!no,ro=I&&(!to||no&&8<no&&11>=no),io=String.fromCharCode(32),ao={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},so=!1;function lo(e,t){switch(e){case"keyup":return-1!==eo.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function uo(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var co=!1;var po={eventTypes:ao,extractEvents:function(e,t,n,o){var r;if(to)e:{switch(e){case"compositionstart":var i=ao.compositionStart;break e;case"compositionend":i=ao.compositionEnd;break e;case"compositionupdate":i=ao.compositionUpdate;break e}i=void 0}else co?lo(e,n)&&(i=ao.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=ao.compositionStart);return i?(ro&&"ko"!==n.locale&&(co||i!==ao.compositionStart?i===ao.compositionEnd&&co&&(r=Gn()):(Vn="value"in(Un=o)?Un.value:Un.textContent,co=!0)),i=Yn.getPooled(i,t,n,o),r?i.data=r:null!==(r=uo(n))&&(i.data=r),Wn(i),r=i):r=null,(e=oo?function(e,t){switch(e){case"compositionend":return uo(t);case"keypress":return 32!==t.which?null:(so=!0,io);case"textInput":return(e=t.data)===io&&so?null:e;default:return null}}(e,n):function(e,t){if(co)return"compositionend"===e||!to&&lo(e,t)?(e=Gn(),Kn=Vn=Un=null,co=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ro&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Jn.getPooled(ao.beforeInput,t,n,o)).data=e,Wn(t)):t=null,null===r?t:null===t?r:[r,t]}},fo={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ho(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!fo[e.type]:"textarea"===t}var mo={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function go(e,t,n){return(e=Qn.getPooled(mo.change,e,t,n)).type="change",R(n),Wn(e),e}var vo=null,yo=null;function bo(e){lt(e)}function _o(e){if(Ce(Fn(e)))return e}function Co(e,t){if("change"===e)return t}var So=!1;function ko(){vo&&(vo.detachEvent("onpropertychange",xo),yo=vo=null)}function xo(e){if("value"===e.propertyName&&_o(yo))if(e=go(yo,e,ut(e)),O)lt(e);else{O=!0;try{N(bo,e)}finally{O=!1,z()}}}function wo(e,t,n){"focus"===e?(ko(),yo=n,(vo=t).attachEvent("onpropertychange",xo)):"blur"===e&&ko()}function Eo(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return _o(yo)}function Io(e,t){if("click"===e)return _o(t)}function To(e,t){if("input"===e||"change"===e)return _o(t)}I&&(So=ct("input")&&(!document.documentMode||9<document.documentMode));var Do={eventTypes:mo,_isInputEventSupported:So,extractEvents:function(e,t,n,o){var r=t?Fn(t):window,i=r.nodeName&&r.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===r.type)var a=Co;else if(ho(r))if(So)a=To;else{a=Eo;var s=wo}else(i=r.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===r.type||"radio"===r.type)&&(a=Io);if(a&&(a=a(e,t)))return go(a,n,o);s&&s(e,r,t),"blur"===e&&(e=r._wrapperState)&&e.controlled&&"number"===r.type&&Ie(r,"number",r.value)}},Po=Qn.extend({view:null,detail:null}),Mo={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ro(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Mo[e])&&!!t[e]}function Fo(){return Ro}var No=0,Ao=0,Lo=!1,Bo=!1,Oo=Po.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Fo,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=No;return No=e.screenX,Lo?"mousemove"===e.type?e.screenX-t:0:(Lo=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Ao;return Ao=e.screenY,Bo?"mousemove"===e.type?e.screenY-t:0:(Bo=!0,0)}}),Ho=Oo.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),zo={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Wo={eventTypes:zo,extractEvents:function(e,t,n,o,r){var i="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(i&&0==(32&r)&&(n.relatedTarget||n.fromElement)||!a&&!i)return null;(i=o.window===o?o:(i=o.ownerDocument)?i.defaultView||i.parentWindow:window,a)?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?Mn(t):null)&&(t!==et(t)||5!==t.tag&&6!==t.tag)&&(t=null)):a=null;if(a===t)return null;if("mouseout"===e||"mouseover"===e)var s=Oo,l=zo.mouseLeave,u=zo.mouseEnter,c="mouse";else"pointerout"!==e&&"pointerover"!==e||(s=Ho,l=zo.pointerLeave,u=zo.pointerEnter,c="pointer");if(e=null==a?i:Fn(a),i=null==t?i:Fn(t),(l=s.getPooled(l,a,n,o)).type=c+"leave",l.target=e,l.relatedTarget=i,(n=s.getPooled(u,t,n,o)).type=c+"enter",n.target=i,n.relatedTarget=e,c=t,(o=a)&&c)e:{for(u=c,a=0,e=s=o;e;e=An(e))a++;for(e=0,t=u;t;t=An(t))e++;for(;0<a-e;)s=An(s),a--;for(;0<e-a;)u=An(u),e--;for(;a--;){if(s===u||s===u.alternate)break e;s=An(s),u=An(u)}s=null}else s=null;for(u=s,s=[];o&&o!==u&&(null===(a=o.alternate)||a!==u);)s.push(o),o=An(o);for(o=[];c&&c!==u&&(null===(a=c.alternate)||a!==u);)o.push(c),c=An(c);for(c=0;c<s.length;c++)Hn(s[c],"bubbled",l);for(c=o.length;0<c--;)Hn(o[c],"captured",n);return 0==(64&r)?[l]:[l,n]}};var Uo="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Vo=Object.prototype.hasOwnProperty;function Ko(e,t){if(Uo(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),o=Object.keys(t);if(n.length!==o.length)return!1;for(o=0;o<n.length;o++)if(!Vo.call(t,n[o])||!Uo(e[n[o]],t[n[o]]))return!1;return!0}var Go=I&&"documentMode"in document&&11>=document.documentMode,jo={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},qo=null,Qo=null,$o=null,Zo=!1;function Xo(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Zo||null==qo||qo!==dn(n)?null:("selectionStart"in(n=qo)&&gn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},$o&&Ko($o,n)?null:($o=n,(e=Qn.getPooled(jo.select,Qo,e,t)).type="select",e.target=qo,Wn(e),e))}var Yo={eventTypes:jo,extractEvents:function(e,t,n,o,r,i){if(!(i=!(r=i||(o.window===o?o.document:9===o.nodeType?o:o.ownerDocument)))){e:{r=Je(r),i=w.onSelect;for(var a=0;a<i.length;a++)if(!r.has(i[a])){r=!1;break e}r=!0}i=!r}if(i)return null;switch(r=t?Fn(t):window,e){case"focus":(ho(r)||"true"===r.contentEditable)&&(qo=r,Qo=t,$o=null);break;case"blur":$o=Qo=qo=null;break;case"mousedown":Zo=!0;break;case"contextmenu":case"mouseup":case"dragend":return Zo=!1,Xo(n,o);case"selectionchange":if(Go)break;case"keydown":case"keyup":return Xo(n,o)}return null}},Jo=Qn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),er=Qn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),tr=Po.extend({relatedTarget:null});function nr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var or={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},rr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ir=Po.extend({key:function(e){if(e.key){var t=or[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?rr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Fo,charCode:function(e){return"keypress"===e.type?nr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ar=Oo.extend({dataTransfer:null}),sr=Po.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Fo}),lr=Qn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ur=Oo.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),cr={eventTypes:Ot,extractEvents:function(e,t,n,o){var r=Ht.get(e);if(!r)return null;switch(e){case"keypress":if(0===nr(n))return null;case"keydown":case"keyup":e=ir;break;case"blur":case"focus":e=tr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Oo;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=ar;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=sr;break;case qe:case Qe:case $e:e=Jo;break;case Ze:e=lr;break;case"scroll":e=Po;break;case"wheel":e=ur;break;case"copy":case"cut":case"paste":e=er;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Ho;break;default:e=Qn}return Wn(t=e.getPooled(r,t,n,o)),t}};if(y)throw Error(a(101));y=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),_(),h=Nn,m=Rn,g=Fn,E({SimpleEventPlugin:cr,EnterLeaveEventPlugin:Wo,ChangeEventPlugin:Do,SelectEventPlugin:Yo,BeforeInputEventPlugin:po});var dr=[],pr=-1;function fr(e){0>pr||(e.current=dr[pr],dr[pr]=null,pr--)}function hr(e,t){pr++,dr[pr]=e.current,e.current=t}var mr={},gr={current:mr},vr={current:!1},yr=mr;function br(e,t){var n=e.type.contextTypes;if(!n)return mr;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===t)return o.__reactInternalMemoizedMaskedChildContext;var r,i={};for(r in n)i[r]=t[r];return o&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function _r(e){return null!=(e=e.childContextTypes)}function Cr(){fr(vr),fr(gr)}function Sr(e,t,n){if(gr.current!==mr)throw Error(a(168));hr(gr,t),hr(vr,n)}function kr(e,t,n){var o=e.stateNode;if(e=t.childContextTypes,"function"!=typeof o.getChildContext)return n;for(var i in o=o.getChildContext())if(!(i in e))throw Error(a(108,ge(t)||"Unknown",i));return r({},n,{},o)}function xr(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||mr,yr=gr.current,hr(gr,e),hr(vr,vr.current),!0}function wr(e,t,n){var o=e.stateNode;if(!o)throw Error(a(169));n?(e=kr(e,t,yr),o.__reactInternalMemoizedMergedChildContext=e,fr(vr),fr(gr),hr(gr,e)):fr(vr),hr(vr,n)}var Er=i.unstable_runWithPriority,Ir=i.unstable_scheduleCallback,Tr=i.unstable_cancelCallback,Dr=i.unstable_requestPaint,Pr=i.unstable_now,Mr=i.unstable_getCurrentPriorityLevel,Rr=i.unstable_ImmediatePriority,Fr=i.unstable_UserBlockingPriority,Nr=i.unstable_NormalPriority,Ar=i.unstable_LowPriority,Lr=i.unstable_IdlePriority,Br={},Or=i.unstable_shouldYield,Hr=void 0!==Dr?Dr:function(){},zr=null,Wr=null,Ur=!1,Vr=Pr(),Kr=1e4>Vr?Pr:function(){return Pr()-Vr};function Gr(){switch(Mr()){case Rr:return 99;case Fr:return 98;case Nr:return 97;case Ar:return 96;case Lr:return 95;default:throw Error(a(332))}}function jr(e){switch(e){case 99:return Rr;case 98:return Fr;case 97:return Nr;case 96:return Ar;case 95:return Lr;default:throw Error(a(332))}}function qr(e,t){return e=jr(e),Er(e,t)}function Qr(e,t,n){return e=jr(e),Ir(e,t,n)}function $r(e){return null===zr?(zr=[e],Wr=Ir(Rr,Xr)):zr.push(e),Br}function Zr(){if(null!==Wr){var e=Wr;Wr=null,Tr(e)}Xr()}function Xr(){if(!Ur&&null!==zr){Ur=!0;var e=0;try{var t=zr;qr(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),zr=null}catch(t){throw null!==zr&&(zr=zr.slice(e+1)),Ir(Rr,Zr),t}finally{Ur=!1}}}function Yr(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Jr(e,t){if(e&&e.defaultProps)for(var n in t=r({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var ei={current:null},ti=null,ni=null,oi=null;function ri(){oi=ni=ti=null}function ii(e){var t=ei.current;fr(ei),e.type._context._currentValue=t}function ai(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function si(e,t){ti=e,oi=ni=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Na=!0),e.firstContext=null)}function li(e,t){if(oi!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(oi=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ni){if(null===ti)throw Error(a(308));ni=t,ti.dependencies={expirationTime:0,firstContext:t,responders:null}}else ni=ni.next=t;return e._currentValue}var ui=!1;function ci(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function di(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function pi(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function fi(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function hi(e,t){var n=e.alternate;null!==n&&di(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function mi(e,t,n,o){var i=e.updateQueue;ui=!1;var a=i.baseQueue,s=i.shared.pending;if(null!==s){if(null!==a){var l=a.next;a.next=s.next,s.next=l}a=s,i.shared.pending=null,null!==(l=e.alternate)&&(null!==(l=l.updateQueue)&&(l.baseQueue=s))}if(null!==a){l=a.next;var u=i.baseState,c=0,d=null,p=null,f=null;if(null!==l)for(var h=l;;){if((s=h.expirationTime)<o){var m={expirationTime:h.expirationTime,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null};null===f?(p=f=m,d=u):f=f.next=m,s>c&&(c=s)}else{null!==f&&(f=f.next={expirationTime:1073741823,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null}),fl(s,h.suspenseConfig);e:{var g=e,v=h;switch(s=t,m=n,v.tag){case 1:if("function"==typeof(g=v.payload)){u=g.call(m,u,s);break e}u=g;break e;case 3:g.effectTag=-4097&g.effectTag|64;case 0:if(null==(s="function"==typeof(g=v.payload)?g.call(m,u,s):g))break e;u=r({},u,s);break e;case 2:ui=!0}}null!==h.callback&&(e.effectTag|=32,null===(s=i.effects)?i.effects=[h]:s.push(h))}if(null===(h=h.next)||h===l){if(null===(s=i.shared.pending))break;h=a.next=s.next,s.next=l,i.baseQueue=a=s,i.shared.pending=null}}null===f?d=u:f.next=p,i.baseState=d,i.baseQueue=f,hl(c),e.expirationTime=c,e.memoizedState=u}}function gi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var o=e[t],r=o.callback;if(null!==r){if(o.callback=null,o=r,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var vi=Z.ReactCurrentBatchConfig,yi=(new o.Component).refs;function bi(e,t,n,o){n=null==(n=n(o,t=e.memoizedState))?t:r({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var _i={isMounted:function(e){return!!(e=e._reactInternalFiber)&&et(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var o=el(),r=vi.suspense;(r=pi(o=tl(o,e,r),r)).payload=t,null!=n&&(r.callback=n),fi(e,r),nl(e,o)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var o=el(),r=vi.suspense;(r=pi(o=tl(o,e,r),r)).tag=1,r.payload=t,null!=n&&(r.callback=n),fi(e,r),nl(e,o)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=el(),o=vi.suspense;(o=pi(n=tl(n,e,o),o)).tag=2,null!=t&&(o.callback=t),fi(e,o),nl(e,n)}};function Ci(e,t,n,o,r,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(o,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!Ko(n,o)||!Ko(r,i))}function Si(e,t,n){var o=!1,r=mr,i=t.contextType;return"object"==typeof i&&null!==i?i=li(i):(r=_r(t)?yr:gr.current,i=(o=null!=(o=t.contextTypes))?br(e,r):mr),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=_i,e.stateNode=t,t._reactInternalFiber=e,o&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,e.__reactInternalMemoizedMaskedChildContext=i),t}function ki(e,t,n,o){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,o),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,o),t.state!==e&&_i.enqueueReplaceState(t,t.state,null)}function xi(e,t,n,o){var r=e.stateNode;r.props=n,r.state=e.memoizedState,r.refs=yi,ci(e);var i=t.contextType;"object"==typeof i&&null!==i?r.context=li(i):(i=_r(t)?yr:gr.current,r.context=br(e,i)),mi(e,n,r,o),r.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(bi(e,t,i,n),r.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(t=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),t!==r.state&&_i.enqueueReplaceState(r,r.state,null),mi(e,n,r,o),r.state=e.memoizedState),"function"==typeof r.componentDidMount&&(e.effectTag|=4)}var wi=Array.isArray;function Ei(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var o=n.stateNode}if(!o)throw Error(a(147,e));var r=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===r?t.ref:((t=function(e){var t=o.refs;t===yi&&(t=o.refs={}),null===e?delete t[r]:t[r]=e})._stringRef=r,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Ii(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Ti(e){function t(t,n){if(e){var o=t.lastEffect;null!==o?(o.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,o){if(!e)return null;for(;null!==o;)t(n,o),o=o.sibling;return null}function o(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function r(e,t){return(e=Nl(e,t)).index=0,e.sibling=null,e}function i(t,n,o){return t.index=o,e?null!==(o=t.alternate)?(o=o.index)<n?(t.effectTag=2,n):o:(t.effectTag=2,n):n}function s(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,o){return null===t||6!==t.tag?((t=Bl(n,e.mode,o)).return=e,t):((t=r(t,n)).return=e,t)}function u(e,t,n,o){return null!==t&&t.elementType===n.type?((o=r(t,n.props)).ref=Ei(e,t,n),o.return=e,o):((o=Al(n.type,n.key,n.props,null,e.mode,o)).ref=Ei(e,t,n),o.return=e,o)}function c(e,t,n,o){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ol(n,e.mode,o)).return=e,t):((t=r(t,n.children||[])).return=e,t)}function d(e,t,n,o,i){return null===t||7!==t.tag?((t=Ll(n,e.mode,o,i)).return=e,t):((t=r(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Bl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Al(t.type,t.key,t.props,null,e.mode,n)).ref=Ei(e,null,t),n.return=e,n;case te:return(t=Ol(t,e.mode,n)).return=e,t}if(wi(t)||me(t))return(t=Ll(t,e.mode,n,null)).return=e,t;Ii(e,t)}return null}function f(e,t,n,o){var r=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==r?null:l(e,t,""+n,o);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===r?n.type===ne?d(e,t,n.props.children,o,r):u(e,t,n,o):null;case te:return n.key===r?c(e,t,n,o):null}if(wi(n)||me(n))return null!==r?null:d(e,t,n,o,null);Ii(e,n)}return null}function h(e,t,n,o,r){if("string"==typeof o||"number"==typeof o)return l(t,e=e.get(n)||null,""+o,r);if("object"==typeof o&&null!==o){switch(o.$$typeof){case ee:return e=e.get(null===o.key?n:o.key)||null,o.type===ne?d(t,e,o.props.children,r,o.key):u(t,e,o,r);case te:return c(t,e=e.get(null===o.key?n:o.key)||null,o,r)}if(wi(o)||me(o))return d(t,e=e.get(n)||null,o,r,null);Ii(t,o)}return null}function m(r,a,s,l){for(var u=null,c=null,d=a,m=a=0,g=null;null!==d&&m<s.length;m++){d.index>m?(g=d,d=null):g=d.sibling;var v=f(r,d,s[m],l);if(null===v){null===d&&(d=g);break}e&&d&&null===v.alternate&&t(r,d),a=i(v,a,m),null===c?u=v:c.sibling=v,c=v,d=g}if(m===s.length)return n(r,d),u;if(null===d){for(;m<s.length;m++)null!==(d=p(r,s[m],l))&&(a=i(d,a,m),null===c?u=d:c.sibling=d,c=d);return u}for(d=o(r,d);m<s.length;m++)null!==(g=h(d,r,m,s[m],l))&&(e&&null!==g.alternate&&d.delete(null===g.key?m:g.key),a=i(g,a,m),null===c?u=g:c.sibling=g,c=g);return e&&d.forEach((function(e){return t(r,e)})),u}function g(r,s,l,u){var c=me(l);if("function"!=typeof c)throw Error(a(150));if(null==(l=c.call(l)))throw Error(a(151));for(var d=c=null,m=s,g=s=0,v=null,y=l.next();null!==m&&!y.done;g++,y=l.next()){m.index>g?(v=m,m=null):v=m.sibling;var b=f(r,m,y.value,u);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(r,m),s=i(b,s,g),null===d?c=b:d.sibling=b,d=b,m=v}if(y.done)return n(r,m),c;if(null===m){for(;!y.done;g++,y=l.next())null!==(y=p(r,y.value,u))&&(s=i(y,s,g),null===d?c=y:d.sibling=y,d=y);return c}for(m=o(r,m);!y.done;g++,y=l.next())null!==(y=h(m,r,g,y.value,u))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),s=i(y,s,g),null===d?c=y:d.sibling=y,d=y);return e&&m.forEach((function(e){return t(r,e)})),c}return function(e,o,i,l){var u="object"==typeof i&&null!==i&&i.type===ne&&null===i.key;u&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case ee:e:{for(c=i.key,u=o;null!==u;){if(u.key===c){switch(u.tag){case 7:if(i.type===ne){n(e,u.sibling),(o=r(u,i.props.children)).return=e,e=o;break e}break;default:if(u.elementType===i.type){n(e,u.sibling),(o=r(u,i.props)).ref=Ei(e,u,i),o.return=e,e=o;break e}}n(e,u);break}t(e,u),u=u.sibling}i.type===ne?((o=Ll(i.props.children,e.mode,l,i.key)).return=e,e=o):((l=Al(i.type,i.key,i.props,null,e.mode,l)).ref=Ei(e,o,i),l.return=e,e=l)}return s(e);case te:e:{for(u=i.key;null!==o;){if(o.key===u){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){n(e,o.sibling),(o=r(o,i.children||[])).return=e,e=o;break e}n(e,o);break}t(e,o),o=o.sibling}(o=Ol(i,e.mode,l)).return=e,e=o}return s(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==o&&6===o.tag?(n(e,o.sibling),(o=r(o,i)).return=e,e=o):(n(e,o),(o=Bl(i,e.mode,l)).return=e,e=o),s(e);if(wi(i))return m(e,o,i,l);if(me(i))return g(e,o,i,l);if(c&&Ii(e,i),void 0===i&&!u)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,o)}}var Di=Ti(!0),Pi=Ti(!1),Mi={},Ri={current:Mi},Fi={current:Mi},Ni={current:Mi};function Ai(e){if(e===Mi)throw Error(a(174));return e}function Li(e,t){switch(hr(Ni,t),hr(Fi,e),hr(Ri,Mi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Be(null,"");break;default:t=Be(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}fr(Ri),hr(Ri,t)}function Bi(){fr(Ri),fr(Fi),fr(Ni)}function Oi(e){Ai(Ni.current);var t=Ai(Ri.current),n=Be(t,e.type);t!==n&&(hr(Fi,e),hr(Ri,n))}function Hi(e){Fi.current===e&&(fr(Ri),fr(Fi))}var zi={current:0};function Wi(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||n.data===vn||n.data===yn))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Ui(e,t){return{responder:e,props:t}}var Vi=Z.ReactCurrentDispatcher,Ki=Z.ReactCurrentBatchConfig,Gi=0,ji=null,qi=null,Qi=null,$i=!1;function Zi(){throw Error(a(321))}function Xi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Uo(e[n],t[n]))return!1;return!0}function Yi(e,t,n,o,r,i){if(Gi=i,ji=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Vi.current=null===e||null===e.memoizedState?Ca:Sa,e=n(o,r),t.expirationTime===Gi){i=0;do{if(t.expirationTime=0,!(25>i))throw Error(a(301));i+=1,Qi=qi=null,t.updateQueue=null,Vi.current=ka,e=n(o,r)}while(t.expirationTime===Gi)}if(Vi.current=_a,t=null!==qi&&null!==qi.next,Gi=0,Qi=qi=ji=null,$i=!1,t)throw Error(a(300));return e}function Ji(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Qi?ji.memoizedState=Qi=e:Qi=Qi.next=e,Qi}function ea(){if(null===qi){var e=ji.alternate;e=null!==e?e.memoizedState:null}else e=qi.next;var t=null===Qi?ji.memoizedState:Qi.next;if(null!==t)Qi=t,qi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(qi=e).memoizedState,baseState:qi.baseState,baseQueue:qi.baseQueue,queue:qi.queue,next:null},null===Qi?ji.memoizedState=Qi=e:Qi=Qi.next=e}return Qi}function ta(e,t){return"function"==typeof t?t(e):t}function na(e){var t=ea(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var o=qi,r=o.baseQueue,i=n.pending;if(null!==i){if(null!==r){var s=r.next;r.next=i.next,i.next=s}o.baseQueue=r=i,n.pending=null}if(null!==r){r=r.next,o=o.baseState;var l=s=i=null,u=r;do{var c=u.expirationTime;if(c<Gi){var d={expirationTime:u.expirationTime,suspenseConfig:u.suspenseConfig,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===l?(s=l=d,i=o):l=l.next=d,c>ji.expirationTime&&(ji.expirationTime=c,hl(c))}else null!==l&&(l=l.next={expirationTime:1073741823,suspenseConfig:u.suspenseConfig,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),fl(c,u.suspenseConfig),o=u.eagerReducer===e?u.eagerState:e(o,u.action);u=u.next}while(null!==u&&u!==r);null===l?i=o:l.next=s,Uo(o,t.memoizedState)||(Na=!0),t.memoizedState=o,t.baseState=i,t.baseQueue=l,n.lastRenderedState=o}return[t.memoizedState,n.dispatch]}function oa(e){var t=ea(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var o=n.dispatch,r=n.pending,i=t.memoizedState;if(null!==r){n.pending=null;var s=r=r.next;do{i=e(i,s.action),s=s.next}while(s!==r);Uo(i,t.memoizedState)||(Na=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,o]}function ra(e){var t=Ji();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ta,lastRenderedState:e}).dispatch=ba.bind(null,ji,e),[t.memoizedState,e]}function ia(e,t,n,o){return e={tag:e,create:t,destroy:n,deps:o,next:null},null===(t=ji.updateQueue)?(t={lastEffect:null},ji.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(o=n.next,n.next=e,e.next=o,t.lastEffect=e),e}function aa(){return ea().memoizedState}function sa(e,t,n,o){var r=Ji();ji.effectTag|=e,r.memoizedState=ia(1|t,n,void 0,void 0===o?null:o)}function la(e,t,n,o){var r=ea();o=void 0===o?null:o;var i=void 0;if(null!==qi){var a=qi.memoizedState;if(i=a.destroy,null!==o&&Xi(o,a.deps))return void ia(t,n,i,o)}ji.effectTag|=e,r.memoizedState=ia(1|t,n,i,o)}function ua(e,t){return sa(516,4,e,t)}function ca(e,t){return la(516,4,e,t)}function da(e,t){return la(4,2,e,t)}function pa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function fa(e,t,n){return n=null!=n?n.concat([e]):null,la(4,2,pa.bind(null,t,e),n)}function ha(){}function ma(e,t){return Ji().memoizedState=[e,void 0===t?null:t],e}function ga(e,t){var n=ea();t=void 0===t?null:t;var o=n.memoizedState;return null!==o&&null!==t&&Xi(t,o[1])?o[0]:(n.memoizedState=[e,t],e)}function va(e,t){var n=ea();t=void 0===t?null:t;var o=n.memoizedState;return null!==o&&null!==t&&Xi(t,o[1])?o[0]:(e=e(),n.memoizedState=[e,t],e)}function ya(e,t,n){var o=Gr();qr(98>o?98:o,(function(){e(!0)})),qr(97<o?97:o,(function(){var o=Ki.suspense;Ki.suspense=void 0===t?null:t;try{e(!1),n()}finally{Ki.suspense=o}}))}function ba(e,t,n){var o=el(),r=vi.suspense;r={expirationTime:o=tl(o,e,r),suspenseConfig:r,action:n,eagerReducer:null,eagerState:null,next:null};var i=t.pending;if(null===i?r.next=r:(r.next=i.next,i.next=r),t.pending=r,i=e.alternate,e===ji||null!==i&&i===ji)$i=!0,r.expirationTime=Gi,ji.expirationTime=Gi;else{if(0===e.expirationTime&&(null===i||0===i.expirationTime)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,s=i(a,n);if(r.eagerReducer=i,r.eagerState=s,Uo(s,a))return}catch(e){}nl(e,o)}}var _a={readContext:li,useCallback:Zi,useContext:Zi,useEffect:Zi,useImperativeHandle:Zi,useLayoutEffect:Zi,useMemo:Zi,useReducer:Zi,useRef:Zi,useState:Zi,useDebugValue:Zi,useResponder:Zi,useDeferredValue:Zi,useTransition:Zi},Ca={readContext:li,useCallback:ma,useContext:li,useEffect:ua,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,sa(4,2,pa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return sa(4,2,e,t)},useMemo:function(e,t){var n=Ji();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var o=Ji();return t=void 0!==n?n(t):t,o.memoizedState=o.baseState=t,e=(e=o.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ba.bind(null,ji,e),[o.memoizedState,e]},useRef:function(e){return e={current:e},Ji().memoizedState=e},useState:ra,useDebugValue:ha,useResponder:Ui,useDeferredValue:function(e,t){var n=ra(e),o=n[0],r=n[1];return ua((function(){var n=Ki.suspense;Ki.suspense=void 0===t?null:t;try{r(e)}finally{Ki.suspense=n}}),[e,t]),o},useTransition:function(e){var t=ra(!1),n=t[0];return t=t[1],[ma(ya.bind(null,t,e),[t,e]),n]}},Sa={readContext:li,useCallback:ga,useContext:li,useEffect:ca,useImperativeHandle:fa,useLayoutEffect:da,useMemo:va,useReducer:na,useRef:aa,useState:function(){return na(ta)},useDebugValue:ha,useResponder:Ui,useDeferredValue:function(e,t){var n=na(ta),o=n[0],r=n[1];return ca((function(){var n=Ki.suspense;Ki.suspense=void 0===t?null:t;try{r(e)}finally{Ki.suspense=n}}),[e,t]),o},useTransition:function(e){var t=na(ta),n=t[0];return t=t[1],[ga(ya.bind(null,t,e),[t,e]),n]}},ka={readContext:li,useCallback:ga,useContext:li,useEffect:ca,useImperativeHandle:fa,useLayoutEffect:da,useMemo:va,useReducer:oa,useRef:aa,useState:function(){return oa(ta)},useDebugValue:ha,useResponder:Ui,useDeferredValue:function(e,t){var n=oa(ta),o=n[0],r=n[1];return ca((function(){var n=Ki.suspense;Ki.suspense=void 0===t?null:t;try{r(e)}finally{Ki.suspense=n}}),[e,t]),o},useTransition:function(e){var t=oa(ta),n=t[0];return t=t[1],[ga(ya.bind(null,t,e),[t,e]),n]}},xa=null,wa=null,Ea=!1;function Ia(e,t){var n=Rl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ta(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Da(e){if(Ea){var t=wa;if(t){var n=t;if(!Ta(e,t)){if(!(t=wn(n.nextSibling))||!Ta(e,t))return e.effectTag=-1025&e.effectTag|2,Ea=!1,void(xa=e);Ia(xa,n)}xa=e,wa=wn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Ea=!1,xa=e}}function Pa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;xa=e}function Ma(e){if(e!==xa)return!1;if(!Ea)return Pa(e),Ea=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Sn(t,e.memoizedProps))for(t=wa;t;)Ia(e,t),t=wn(t.nextSibling);if(Pa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){wa=wn(e.nextSibling);break e}t--}else"$"!==n&&n!==yn&&n!==vn||t++}e=e.nextSibling}wa=null}}else wa=xa?wn(e.stateNode.nextSibling):null;return!0}function Ra(){wa=xa=null,Ea=!1}var Fa=Z.ReactCurrentOwner,Na=!1;function Aa(e,t,n,o){t.child=null===e?Pi(t,null,n,o):Di(t,e.child,n,o)}function La(e,t,n,o,r){n=n.render;var i=t.ref;return si(t,r),o=Yi(e,t,n,o,i,r),null===e||Na?(t.effectTag|=1,Aa(e,t,o,r),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=r&&(e.expirationTime=0),Ya(e,t,r))}function Ba(e,t,n,o,r,i){if(null===e){var a=n.type;return"function"!=typeof a||Fl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Al(n.type,null,o,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Oa(e,t,a,o,r,i))}return a=e.child,r<i&&(r=a.memoizedProps,(n=null!==(n=n.compare)?n:Ko)(r,o)&&e.ref===t.ref)?Ya(e,t,i):(t.effectTag|=1,(e=Nl(a,o)).ref=t.ref,e.return=t,t.child=e)}function Oa(e,t,n,o,r,i){return null!==e&&Ko(e.memoizedProps,o)&&e.ref===t.ref&&(Na=!1,r<i)?(t.expirationTime=e.expirationTime,Ya(e,t,i)):za(e,t,n,o,i)}function Ha(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function za(e,t,n,o,r){var i=_r(n)?yr:gr.current;return i=br(t,i),si(t,r),n=Yi(e,t,n,o,i,r),null===e||Na?(t.effectTag|=1,Aa(e,t,n,r),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=r&&(e.expirationTime=0),Ya(e,t,r))}function Wa(e,t,n,o,r){if(_r(n)){var i=!0;xr(t)}else i=!1;if(si(t,r),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),Si(t,n,o),xi(t,n,o,r),o=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,u=n.contextType;"object"==typeof u&&null!==u?u=li(u):u=br(t,u=_r(n)?yr:gr.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==o||l!==u)&&ki(t,a,o,u),ui=!1;var p=t.memoizedState;a.state=p,mi(t,o,a,r),l=t.memoizedState,s!==o||p!==l||vr.current||ui?("function"==typeof c&&(bi(t,n,c,o),l=t.memoizedState),(s=ui||Ci(t,n,s,o,p,l,u))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=o,t.memoizedState=l),a.props=o,a.state=l,a.context=u,o=s):("function"==typeof a.componentDidMount&&(t.effectTag|=4),o=!1)}else a=t.stateNode,di(e,t),s=t.memoizedProps,a.props=t.type===t.elementType?s:Jr(t.type,s),l=a.context,"object"==typeof(u=n.contextType)&&null!==u?u=li(u):u=br(t,u=_r(n)?yr:gr.current),(d="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==o||l!==u)&&ki(t,a,o,u),ui=!1,l=t.memoizedState,a.state=l,mi(t,o,a,r),p=t.memoizedState,s!==o||l!==p||vr.current||ui?("function"==typeof c&&(bi(t,n,c,o),p=t.memoizedState),(c=ui||Ci(t,n,s,o,l,p,u))?(d||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(o,p,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(o,p,u)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=o,t.memoizedState=p),a.props=o,a.state=p,a.context=u,o=c):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),o=!1);return Ua(e,t,n,o,i,r)}function Ua(e,t,n,o,r,i){Ha(e,t);var a=0!=(64&t.effectTag);if(!o&&!a)return r&&wr(t,n,!1),Ya(e,t,i);o=t.stateNode,Fa.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:o.render();return t.effectTag|=1,null!==e&&a?(t.child=Di(t,e.child,null,i),t.child=Di(t,null,s,i)):Aa(e,t,s,i),t.memoizedState=o.state,r&&wr(t,n,!0),t.child}function Va(e){var t=e.stateNode;t.pendingContext?Sr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Sr(0,t.context,!1),Li(e,t.containerInfo)}var Ka,Ga,ja,qa={dehydrated:null,retryTime:0};function Qa(e,t,n){var o,r=t.mode,i=t.pendingProps,a=zi.current,s=!1;if((o=0!=(64&t.effectTag))||(o=0!=(2&a)&&(null===e||null!==e.memoizedState)),o?(s=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=1),hr(zi,1&a),null===e){if(void 0!==i.fallback&&Da(t),s){if(s=i.fallback,(i=Ll(null,r,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Ll(s,r,n,null)).return=t,i.sibling=n,t.memoizedState=qa,t.child=i,n}return r=i.children,t.memoizedState=null,t.child=Pi(t,null,r,n)}if(null!==e.memoizedState){if(r=(e=e.child).sibling,s){if(i=i.fallback,(n=Nl(e,e.pendingProps)).return=t,0==(2&t.mode)&&(s=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=s;null!==s;)s.return=n,s=s.sibling;return(r=Nl(r,i)).return=t,n.sibling=r,n.childExpirationTime=0,t.memoizedState=qa,t.child=n,r}return n=Di(t,e.child,i.children,n),t.memoizedState=null,t.child=n}if(e=e.child,s){if(s=i.fallback,(i=Ll(null,r,0,null)).return=t,i.child=e,null!==e&&(e.return=i),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Ll(s,r,n,null)).return=t,i.sibling=n,n.effectTag|=2,i.childExpirationTime=0,t.memoizedState=qa,t.child=i,n}return t.memoizedState=null,t.child=Di(t,e,i.children,n)}function $a(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ai(e.return,t)}function Za(e,t,n,o,r,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:o,tail:n,tailExpiration:0,tailMode:r,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=o,a.tail=n,a.tailExpiration=0,a.tailMode=r,a.lastEffect=i)}function Xa(e,t,n){var o=t.pendingProps,r=o.revealOrder,i=o.tail;if(Aa(e,t,o.children,n),0!=(2&(o=zi.current)))o=1&o|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&$a(e,n);else if(19===e.tag)$a(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}o&=1}if(hr(zi,o),0==(2&t.mode))t.memoizedState=null;else switch(r){case"forwards":for(n=t.child,r=null;null!==n;)null!==(e=n.alternate)&&null===Wi(e)&&(r=n),n=n.sibling;null===(n=r)?(r=t.child,t.child=null):(r=n.sibling,n.sibling=null),Za(t,!1,r,n,i,t.lastEffect);break;case"backwards":for(n=null,r=t.child,t.child=null;null!==r;){if(null!==(e=r.alternate)&&null===Wi(e)){t.child=r;break}e=r.sibling,r.sibling=n,n=r,r=e}Za(t,!0,n,null,i,t.lastEffect);break;case"together":Za(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ya(e,t,n){null!==e&&(t.dependencies=e.dependencies);var o=t.expirationTime;if(0!==o&&hl(o),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Nl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Nl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ja(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var o=null;null!==n;)null!==n.alternate&&(o=n),n=n.sibling;null===o?t||null===e.tail?e.tail=null:e.tail.sibling=null:o.sibling=null}}function es(e,t,n){var o=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return _r(t.type)&&Cr(),null;case 3:return Bi(),fr(vr),fr(gr),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Ma(t)||(t.effectTag|=4),null;case 5:Hi(t),n=Ai(Ni.current);var i=t.type;if(null!==e&&null!=t.stateNode)Ga(e,t,i,o,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!o){if(null===t.stateNode)throw Error(a(166));return null}if(e=Ai(Ri.current),Ma(t)){o=t.stateNode,i=t.type;var s=t.memoizedProps;switch(o[Tn]=t,o[Dn]=s,i){case"iframe":case"object":case"embed":Qt("load",o);break;case"video":case"audio":for(e=0;e<Xe.length;e++)Qt(Xe[e],o);break;case"source":Qt("error",o);break;case"img":case"image":case"link":Qt("error",o),Qt("load",o);break;case"form":Qt("reset",o),Qt("submit",o);break;case"details":Qt("toggle",o);break;case"input":ke(o,s),Qt("invalid",o),un(n,"onChange");break;case"select":o._wrapperState={wasMultiple:!!s.multiple},Qt("invalid",o),un(n,"onChange");break;case"textarea":Me(o,s),Qt("invalid",o),un(n,"onChange")}for(var l in an(i,s),e=null,s)if(s.hasOwnProperty(l)){var u=s[l];"children"===l?"string"==typeof u?o.textContent!==u&&(e=["children",u]):"number"==typeof u&&o.textContent!==""+u&&(e=["children",""+u]):x.hasOwnProperty(l)&&null!=u&&un(n,l)}switch(i){case"input":_e(o),Ee(o,s,!0);break;case"textarea":_e(o),Fe(o);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(o.onclick=cn)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(l=9===n.nodeType?n:n.ownerDocument,e===ln&&(e=Le(i)),e===ln?"script"===i?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof o.is?e=l.createElement(i,{is:o.is}):(e=l.createElement(i),"select"===i&&(l=e,o.multiple?l.multiple=!0:o.size&&(l.size=o.size))):e=l.createElementNS(e,i),e[Tn]=t,e[Dn]=o,Ka(e,t),t.stateNode=e,l=sn(i,o),i){case"iframe":case"object":case"embed":Qt("load",e),u=o;break;case"video":case"audio":for(u=0;u<Xe.length;u++)Qt(Xe[u],e);u=o;break;case"source":Qt("error",e),u=o;break;case"img":case"image":case"link":Qt("error",e),Qt("load",e),u=o;break;case"form":Qt("reset",e),Qt("submit",e),u=o;break;case"details":Qt("toggle",e),u=o;break;case"input":ke(e,o),u=Se(e,o),Qt("invalid",e),un(n,"onChange");break;case"option":u=Te(e,o);break;case"select":e._wrapperState={wasMultiple:!!o.multiple},u=r({},o,{value:void 0}),Qt("invalid",e),un(n,"onChange");break;case"textarea":Me(e,o),u=Pe(e,o),Qt("invalid",e),un(n,"onChange");break;default:u=o}an(i,u);var c=u;for(s in c)if(c.hasOwnProperty(s)){var d=c[s];"style"===s?on(e,d):"dangerouslySetInnerHTML"===s?null!=(d=d?d.__html:void 0)&&ze(e,d):"children"===s?"string"==typeof d?("textarea"!==i||""!==d)&&We(e,d):"number"==typeof d&&We(e,""+d):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(x.hasOwnProperty(s)?null!=d&&un(n,s):null!=d&&X(e,s,d,l))}switch(i){case"input":_e(e),Ee(e,o,!1);break;case"textarea":_e(e),Fe(e);break;case"option":null!=o.value&&e.setAttribute("value",""+ye(o.value));break;case"select":e.multiple=!!o.multiple,null!=(n=o.value)?De(e,!!o.multiple,n,!1):null!=o.defaultValue&&De(e,!!o.multiple,o.defaultValue,!0);break;default:"function"==typeof u.onClick&&(e.onclick=cn)}Cn(i,o)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)ja(0,t,e.memoizedProps,o);else{if("string"!=typeof o&&null===t.stateNode)throw Error(a(166));n=Ai(Ni.current),Ai(Ri.current),Ma(t)?(n=t.stateNode,o=t.memoizedProps,n[Tn]=t,n.nodeValue!==o&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(o))[Tn]=t,t.stateNode=n)}return null;case 13:return fr(zi),o=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==o,o=!1,null===e?void 0!==t.memoizedProps.fallback&&Ma(t):(o=null!==(i=e.memoizedState),n||null===i||null!==(i=e.child.sibling)&&(null!==(s=t.firstEffect)?(t.firstEffect=i,i.nextEffect=s):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),n&&!o&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&zi.current)?As===Ts&&(As=Ds):(As!==Ts&&As!==Ds||(As=Ps),0!==zs&&null!==Rs&&(Wl(Rs,Ns),Ul(Rs,zs)))),(n||o)&&(t.effectTag|=4),null);case 4:return Bi(),null;case 10:return ii(t),null;case 17:return _r(t.type)&&Cr(),null;case 19:if(fr(zi),null===(o=t.memoizedState))return null;if(i=0!=(64&t.effectTag),null===(s=o.rendering)){if(i)Ja(o,!1);else if(As!==Ts||null!==e&&0!=(64&e.effectTag))for(s=t.child;null!==s;){if(null!==(e=Wi(s))){for(t.effectTag|=64,Ja(o,!1),null!==(i=e.updateQueue)&&(t.updateQueue=i,t.effectTag|=4),null===o.lastEffect&&(t.firstEffect=null),t.lastEffect=o.lastEffect,o=t.child;null!==o;)s=n,(i=o).effectTag&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(e=i.alternate)?(i.childExpirationTime=0,i.expirationTime=s,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null):(i.childExpirationTime=e.childExpirationTime,i.expirationTime=e.expirationTime,i.child=e.child,i.memoizedProps=e.memoizedProps,i.memoizedState=e.memoizedState,i.updateQueue=e.updateQueue,s=e.dependencies,i.dependencies=null===s?null:{expirationTime:s.expirationTime,firstContext:s.firstContext,responders:s.responders}),o=o.sibling;return hr(zi,1&zi.current|2),t.child}s=s.sibling}}else{if(!i)if(null!==(e=Wi(s))){if(t.effectTag|=64,i=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Ja(o,!0),null===o.tail&&"hidden"===o.tailMode&&!s.alternate)return null!==(t=t.lastEffect=o.lastEffect)&&(t.nextEffect=null),null}else 2*Kr()-o.renderingStartTime>o.tailExpiration&&1<n&&(t.effectTag|=64,i=!0,Ja(o,!1),t.expirationTime=t.childExpirationTime=n-1);o.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=o.last)?n.sibling=s:t.child=s,o.last=s)}return null!==o.tail?(0===o.tailExpiration&&(o.tailExpiration=Kr()+500),n=o.tail,o.rendering=n,o.tail=n.sibling,o.lastEffect=t.lastEffect,o.renderingStartTime=Kr(),n.sibling=null,t=zi.current,hr(zi,i?1&t|2:1&t),n):null}throw Error(a(156,t.tag))}function ts(e){switch(e.tag){case 1:_r(e.type)&&Cr();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Bi(),fr(vr),fr(gr),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return Hi(e),null;case 13:return fr(zi),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return fr(zi),null;case 4:return Bi(),null;case 10:return ii(e),null;default:return null}}function ns(e,t){return{value:e,source:t,stack:ve(t)}}Ka=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ga=function(e,t,n,o,i){var a=e.memoizedProps;if(a!==o){var s,l,u=t.stateNode;switch(Ai(Ri.current),e=null,n){case"input":a=Se(u,a),o=Se(u,o),e=[];break;case"option":a=Te(u,a),o=Te(u,o),e=[];break;case"select":a=r({},a,{value:void 0}),o=r({},o,{value:void 0}),e=[];break;case"textarea":a=Pe(u,a),o=Pe(u,o),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof o.onClick&&(u.onclick=cn)}for(s in an(n,o),n=null,a)if(!o.hasOwnProperty(s)&&a.hasOwnProperty(s)&&null!=a[s])if("style"===s)for(l in u=a[s])u.hasOwnProperty(l)&&(n||(n={}),n[l]="");else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(x.hasOwnProperty(s)?e||(e=[]):(e=e||[]).push(s,null));for(s in o){var c=o[s];if(u=null!=a?a[s]:void 0,o.hasOwnProperty(s)&&c!==u&&(null!=c||null!=u))if("style"===s)if(u){for(l in u)!u.hasOwnProperty(l)||c&&c.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in c)c.hasOwnProperty(l)&&u[l]!==c[l]&&(n||(n={}),n[l]=c[l])}else n||(e||(e=[]),e.push(s,n)),n=c;else"dangerouslySetInnerHTML"===s?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(e=e||[]).push(s,c)):"children"===s?u===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(s,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(x.hasOwnProperty(s)?(null!=c&&un(i,s),e||u===c||(e=[])):(e=e||[]).push(s,c))}n&&(e=e||[]).push("style",n),i=e,(t.updateQueue=i)&&(t.effectTag|=4)}},ja=function(e,t,n,o){n!==o&&(t.effectTag|=4)};var os="function"==typeof WeakSet?WeakSet:Set;function rs(e,t){var n=t.source,o=t.stack;null===o&&null!==n&&(o=ve(n)),null!==n&&ge(n.type),t=t.value,null!==e&&1===e.tag&&ge(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function is(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){El(e,t)}else t.current=null}function as(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,o=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Jr(t.type,n),o),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(a(163))}function ss(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var o=n.destroy;n.destroy=void 0,void 0!==o&&o()}n=n.next}while(n!==t)}}function ls(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var o=n.create;n.destroy=o()}n=n.next}while(n!==t)}}function us(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void ls(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var o=n.elementType===n.type?t.memoizedProps:Jr(n.type,t.memoizedProps);e.componentDidUpdate(o,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&gi(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}gi(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&Cn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Bt(n)))));case 19:case 17:case 20:case 21:return}throw Error(a(163))}function cs(e,t,n){switch("function"==typeof Pl&&Pl(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var o=e.next;qr(97<n?97:n,(function(){var e=o;do{var n=e.destroy;if(void 0!==n){var r=t;try{n()}catch(e){El(r,e)}}e=e.next}while(e!==o)}))}break;case 1:is(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){El(e,t)}}(t,n);break;case 5:is(t);break;case 4:gs(e,t,n)}}function ds(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ds(t)}function ps(e){return 5===e.tag||3===e.tag||4===e.tag}function fs(e){e:{for(var t=e.return;null!==t;){if(ps(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var o=!1;break;case 3:case 4:t=t.containerInfo,o=!0;break;default:throw Error(a(161))}16&n.effectTag&&(We(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ps(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}o?hs(e,n,t):ms(e,n,t)}function hs(e,t,n){var o=e.tag,r=5===o||6===o;if(r)e=r?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=cn));else if(4!==o&&null!==(e=e.child))for(hs(e,t,n),e=e.sibling;null!==e;)hs(e,t,n),e=e.sibling}function ms(e,t,n){var o=e.tag,r=5===o||6===o;if(r)e=r?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==o&&null!==(e=e.child))for(ms(e,t,n),e=e.sibling;null!==e;)ms(e,t,n),e=e.sibling}function gs(e,t,n){for(var o,r,i=t,s=!1;;){if(!s){s=i.return;e:for(;;){if(null===s)throw Error(a(160));switch(o=s.stateNode,s.tag){case 5:r=!1;break e;case 3:case 4:o=o.containerInfo,r=!0;break e}s=s.return}s=!0}if(5===i.tag||6===i.tag){e:for(var l=e,u=i,c=n,d=u;;)if(cs(l,d,c),null!==d.child&&4!==d.tag)d.child.return=d,d=d.child;else{if(d===u)break e;for(;null===d.sibling;){if(null===d.return||d.return===u)break e;d=d.return}d.sibling.return=d.return,d=d.sibling}r?(l=o,u=i.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):o.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){o=i.stateNode.containerInfo,r=!0,i.child.return=i,i=i.child;continue}}else if(cs(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(s=!1)}i.sibling.return=i.return,i=i.sibling}}function vs(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void ss(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var o=t.memoizedProps,r=null!==e?e.memoizedProps:o;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Dn]=o,"input"===e&&"radio"===o.type&&null!=o.name&&xe(n,o),sn(e,r),t=sn(e,o),r=0;r<i.length;r+=2){var s=i[r],l=i[r+1];"style"===s?on(n,l):"dangerouslySetInnerHTML"===s?ze(n,l):"children"===s?We(n,l):X(n,s,l,t)}switch(e){case"input":we(n,o);break;case"textarea":Re(n,o);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!o.multiple,null!=(e=o.value)?De(n,!!o.multiple,e,!1):t!==!!o.multiple&&(null!=o.defaultValue?De(n,!!o.multiple,o.defaultValue,!0):De(n,!!o.multiple,o.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Bt(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?o=!1:(o=!0,n=t.child,Us=Kr()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,o?"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,r=null!=(r=e.memoizedProps.style)&&r.hasOwnProperty("display")?r.display:null,i.style.display=nn("display",r));else if(6===e.tag)e.stateNode.nodeValue=o?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void ys(t);case 19:return void ys(t);case 17:return}throw Error(a(163))}function ys(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new os),t.forEach((function(t){var o=Tl.bind(null,e,t);n.has(t)||(n.add(t),t.then(o,o))}))}}var bs="function"==typeof WeakMap?WeakMap:Map;function _s(e,t,n){(n=pi(n,null)).tag=3,n.payload={element:null};var o=t.value;return n.callback=function(){Ks||(Ks=!0,Gs=o),rs(e,t)},n}function Cs(e,t,n){(n=pi(n,null)).tag=3;var o=e.type.getDerivedStateFromError;if("function"==typeof o){var r=t.value;n.payload=function(){return rs(e,t),o(r)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof o&&(null===js?js=new Set([this]):js.add(this),rs(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var Ss,ks=Math.ceil,xs=Z.ReactCurrentDispatcher,ws=Z.ReactCurrentOwner,Es=16,Is=32,Ts=0,Ds=3,Ps=4,Ms=0,Rs=null,Fs=null,Ns=0,As=Ts,Ls=null,Bs=1073741823,Os=1073741823,Hs=null,zs=0,Ws=!1,Us=0,Vs=null,Ks=!1,Gs=null,js=null,qs=!1,Qs=null,$s=90,Zs=null,Xs=0,Ys=null,Js=0;function el(){return 0!=(48&Ms)?1073741821-(Kr()/10|0):0!==Js?Js:Js=1073741821-(Kr()/10|0)}function tl(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var o=Gr();if(0==(4&t))return 99===o?1073741823:1073741822;if(0!=(Ms&Es))return Ns;if(null!==n)e=Yr(e,0|n.timeoutMs||5e3,250);else switch(o){case 99:e=1073741823;break;case 98:e=Yr(e,150,100);break;case 97:case 96:e=Yr(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==Rs&&e===Ns&&--e,e}function nl(e,t){if(50<Xs)throw Xs=0,Ys=null,Error(a(185));if(null!==(e=ol(e,t))){var n=Gr();1073741823===t?0!=(8&Ms)&&0==(48&Ms)?sl(e):(il(e),0===Ms&&Zr()):il(e),0==(4&Ms)||98!==n&&99!==n||(null===Zs?Zs=new Map([[e,t]]):(void 0===(n=Zs.get(e))||n>t)&&Zs.set(e,t))}}function ol(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var o=e.return,r=null;if(null===o&&3===e.tag)r=e.stateNode;else for(;null!==o;){if(n=o.alternate,o.childExpirationTime<t&&(o.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===o.return&&3===o.tag){r=o.stateNode;break}o=o.return}return null!==r&&(Rs===r&&(hl(t),As===Ps&&Wl(r,Ns)),Ul(r,t)),r}function rl(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!zl(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function il(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=$r(sl.bind(null,e));else{var t=rl(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var o=el();if(1073741823===t?o=99:1===t||2===t?o=95:o=0>=(o=10*(1073741821-t)-10*(1073741821-o))?99:250>=o?98:5250>=o?97:95,null!==n){var r=e.callbackPriority;if(e.callbackExpirationTime===t&&r>=o)return;n!==Br&&Tr(n)}e.callbackExpirationTime=t,e.callbackPriority=o,t=1073741823===t?$r(sl.bind(null,e)):Qr(o,al.bind(null,e),{timeout:10*(1073741821-t)-Kr()}),e.callbackNode=t}}}function al(e,t){if(Js=0,t)return Vl(e,t=el()),il(e),null;var n=rl(e);if(0!==n){if(t=e.callbackNode,0!=(48&Ms))throw Error(a(327));if(kl(),e===Rs&&n===Ns||cl(e,n),null!==Fs){var o=Ms;Ms|=Es;for(var r=pl();;)try{gl();break}catch(t){dl(e,t)}if(ri(),Ms=o,xs.current=r,1===As)throw t=Ls,cl(e,n),Wl(e,n),il(e),t;if(null===Fs)switch(r=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,o=As,Rs=null,o){case Ts:case 1:throw Error(a(345));case 2:Vl(e,2<n?2:n);break;case Ds:if(Wl(e,n),n===(o=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=bl(r)),1073741823===Bs&&10<(r=Us+500-Kr())){if(Ws){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,cl(e,n);break}}if(0!==(i=rl(e))&&i!==n)break;if(0!==o&&o!==n){e.lastPingedTime=o;break}e.timeoutHandle=kn(_l.bind(null,e),r);break}_l(e);break;case Ps:if(Wl(e,n),n===(o=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=bl(r)),Ws&&(0===(r=e.lastPingedTime)||r>=n)){e.lastPingedTime=n,cl(e,n);break}if(0!==(r=rl(e))&&r!==n)break;if(0!==o&&o!==n){e.lastPingedTime=o;break}if(1073741823!==Os?o=10*(1073741821-Os)-Kr():1073741823===Bs?o=0:(o=10*(1073741821-Bs)-5e3,0>(o=(r=Kr())-o)&&(o=0),(n=10*(1073741821-n)-r)<(o=(120>o?120:480>o?480:1080>o?1080:1920>o?1920:3e3>o?3e3:4320>o?4320:1960*ks(o/1960))-o)&&(o=n)),10<o){e.timeoutHandle=kn(_l.bind(null,e),o);break}_l(e);break;case 5:if(1073741823!==Bs&&null!==Hs){i=Bs;var s=Hs;if(0>=(o=0|s.busyMinDurationMs)?o=0:(r=0|s.busyDelayMs,o=(i=Kr()-(10*(1073741821-i)-(0|s.timeoutMs||5e3)))<=r?0:r+o-i),10<o){Wl(e,n),e.timeoutHandle=kn(_l.bind(null,e),o);break}}_l(e);break;default:throw Error(a(329))}if(il(e),e.callbackNode===t)return al.bind(null,e)}}return null}function sl(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&Ms))throw Error(a(327));if(kl(),e===Rs&&t===Ns||cl(e,t),null!==Fs){var n=Ms;Ms|=Es;for(var o=pl();;)try{ml();break}catch(t){dl(e,t)}if(ri(),Ms=n,xs.current=o,1===As)throw n=Ls,cl(e,t),Wl(e,t),il(e),n;if(null!==Fs)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Rs=null,_l(e),il(e)}return null}function ll(e,t){var n=Ms;Ms|=1;try{return e(t)}finally{0===(Ms=n)&&Zr()}}function ul(e,t){var n=Ms;Ms&=-2,Ms|=8;try{return e(t)}finally{0===(Ms=n)&&Zr()}}function cl(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,xn(n)),null!==Fs)for(n=Fs.return;null!==n;){var o=n;switch(o.tag){case 1:null!=(o=o.type.childContextTypes)&&Cr();break;case 3:Bi(),fr(vr),fr(gr);break;case 5:Hi(o);break;case 4:Bi();break;case 13:case 19:fr(zi);break;case 10:ii(o)}n=n.return}Rs=e,Fs=Nl(e.current,null),Ns=t,As=Ts,Ls=null,Os=Bs=1073741823,Hs=null,zs=0,Ws=!1}function dl(e,t){for(;;){try{if(ri(),Vi.current=_a,$i)for(var n=ji.memoizedState;null!==n;){var o=n.queue;null!==o&&(o.pending=null),n=n.next}if(Gi=0,Qi=qi=ji=null,$i=!1,null===Fs||null===Fs.return)return As=1,Ls=t,Fs=null;e:{var r=e,i=Fs.return,a=Fs,s=t;if(t=Ns,a.effectTag|=2048,a.firstEffect=a.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var l=s;if(0==(2&a.mode)){var u=a.alternate;u?(a.updateQueue=u.updateQueue,a.memoizedState=u.memoizedState,a.expirationTime=u.expirationTime):(a.updateQueue=null,a.memoizedState=null)}var c=0!=(1&zi.current),d=i;do{var p;if(p=13===d.tag){var f=d.memoizedState;if(null!==f)p=null!==f.dehydrated;else{var h=d.memoizedProps;p=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!c)}}if(p){var m=d.updateQueue;if(null===m){var g=new Set;g.add(l),d.updateQueue=g}else m.add(l);if(0==(2&d.mode)){if(d.effectTag|=64,a.effectTag&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var v=pi(1073741823,null);v.tag=2,fi(a,v)}a.expirationTime=1073741823;break e}s=void 0,a=t;var y=r.pingCache;if(null===y?(y=r.pingCache=new bs,s=new Set,y.set(l,s)):void 0===(s=y.get(l))&&(s=new Set,y.set(l,s)),!s.has(a)){s.add(a);var b=Il.bind(null,r,l,a);l.then(b,b)}d.effectTag|=4096,d.expirationTime=t;break e}d=d.return}while(null!==d);s=Error((ge(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ve(a))}5!==As&&(As=2),s=ns(s,a),d=i;do{switch(d.tag){case 3:l=s,d.effectTag|=4096,d.expirationTime=t,hi(d,_s(d,l,t));break e;case 1:l=s;var _=d.type,C=d.stateNode;if(0==(64&d.effectTag)&&("function"==typeof _.getDerivedStateFromError||null!==C&&"function"==typeof C.componentDidCatch&&(null===js||!js.has(C)))){d.effectTag|=4096,d.expirationTime=t,hi(d,Cs(d,l,t));break e}}d=d.return}while(null!==d)}Fs=yl(Fs)}catch(e){t=e;continue}break}}function pl(){var e=xs.current;return xs.current=_a,null===e?_a:e}function fl(e,t){e<Bs&&2<e&&(Bs=e),null!==t&&e<Os&&2<e&&(Os=e,Hs=t)}function hl(e){e>zs&&(zs=e)}function ml(){for(;null!==Fs;)Fs=vl(Fs)}function gl(){for(;null!==Fs&&!Or();)Fs=vl(Fs)}function vl(e){var t=Ss(e.alternate,e,Ns);return e.memoizedProps=e.pendingProps,null===t&&(t=yl(e)),ws.current=null,t}function yl(e){Fs=e;do{var t=Fs.alternate;if(e=Fs.return,0==(2048&Fs.effectTag)){if(t=es(t,Fs,Ns),1===Ns||1!==Fs.childExpirationTime){for(var n=0,o=Fs.child;null!==o;){var r=o.expirationTime,i=o.childExpirationTime;r>n&&(n=r),i>n&&(n=i),o=o.sibling}Fs.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Fs.firstEffect),null!==Fs.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Fs.firstEffect),e.lastEffect=Fs.lastEffect),1<Fs.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Fs:e.firstEffect=Fs,e.lastEffect=Fs))}else{if(null!==(t=ts(Fs)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Fs.sibling))return t;Fs=e}while(null!==Fs);return As===Ts&&(As=5),null}function bl(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function _l(e){var t=Gr();return qr(99,Cl.bind(null,e,t)),null}function Cl(e,t){do{kl()}while(null!==Qs);if(0!=(48&Ms))throw Error(a(327));var n=e.finishedWork,o=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var r=bl(n);if(e.firstPendingTime=r,o<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:o<=e.firstSuspendedTime&&(e.firstSuspendedTime=o-1),o<=e.lastPingedTime&&(e.lastPingedTime=0),o<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Rs&&(Fs=Rs=null,Ns=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){var i=Ms;Ms|=Is,ws.current=null,bn=qt;var s=mn();if(gn(s)){if("selectionStart"in s)var l={start:s.selectionStart,end:s.selectionEnd};else e:{var u=(l=(l=s.ownerDocument)&&l.defaultView||window).getSelection&&l.getSelection();if(u&&0!==u.rangeCount){l=u.anchorNode;var c=u.anchorOffset,d=u.focusNode;u=u.focusOffset;try{l.nodeType,d.nodeType}catch(e){l=null;break e}var p=0,f=-1,h=-1,m=0,g=0,v=s,y=null;t:for(;;){for(var b;v!==l||0!==c&&3!==v.nodeType||(f=p+c),v!==d||0!==u&&3!==v.nodeType||(h=p+u),3===v.nodeType&&(p+=v.nodeValue.length),null!==(b=v.firstChild);)y=v,v=b;for(;;){if(v===s)break t;if(y===l&&++m===c&&(f=p),y===d&&++g===u&&(h=p),null!==(b=v.nextSibling))break;y=(v=y).parentNode}v=b}l=-1===f||-1===h?null:{start:f,end:h}}else l=null}l=l||{start:0,end:0}}else l=null;_n={activeElementDetached:null,focusedElem:s,selectionRange:l},qt=!1,Vs=r;do{try{Sl()}catch(e){if(null===Vs)throw Error(a(330));El(Vs,e),Vs=Vs.nextEffect}}while(null!==Vs);Vs=r;do{try{for(s=e,l=t;null!==Vs;){var _=Vs.effectTag;if(16&_&&We(Vs.stateNode,""),128&_){var C=Vs.alternate;if(null!==C){var S=C.ref;null!==S&&("function"==typeof S?S(null):S.current=null)}}switch(1038&_){case 2:fs(Vs),Vs.effectTag&=-3;break;case 6:fs(Vs),Vs.effectTag&=-3,vs(Vs.alternate,Vs);break;case 1024:Vs.effectTag&=-1025;break;case 1028:Vs.effectTag&=-1025,vs(Vs.alternate,Vs);break;case 4:vs(Vs.alternate,Vs);break;case 8:gs(s,c=Vs,l),ds(c)}Vs=Vs.nextEffect}}catch(e){if(null===Vs)throw Error(a(330));El(Vs,e),Vs=Vs.nextEffect}}while(null!==Vs);if(S=_n,C=mn(),_=S.focusedElem,l=S.selectionRange,C!==_&&_&&_.ownerDocument&&hn(_.ownerDocument.documentElement,_)){null!==l&&gn(_)&&(C=l.start,void 0===(S=l.end)&&(S=C),"selectionStart"in _?(_.selectionStart=C,_.selectionEnd=Math.min(S,_.value.length)):(S=(C=_.ownerDocument||document)&&C.defaultView||window).getSelection&&(S=S.getSelection(),c=_.textContent.length,s=Math.min(l.start,c),l=void 0===l.end?s:Math.min(l.end,c),!S.extend&&s>l&&(c=l,l=s,s=c),c=fn(_,s),d=fn(_,l),c&&d&&(1!==S.rangeCount||S.anchorNode!==c.node||S.anchorOffset!==c.offset||S.focusNode!==d.node||S.focusOffset!==d.offset)&&((C=C.createRange()).setStart(c.node,c.offset),S.removeAllRanges(),s>l?(S.addRange(C),S.extend(d.node,d.offset)):(C.setEnd(d.node,d.offset),S.addRange(C))))),C=[];for(S=_;S=S.parentNode;)1===S.nodeType&&C.push({element:S,left:S.scrollLeft,top:S.scrollTop});for("function"==typeof _.focus&&_.focus(),_=0;_<C.length;_++)(S=C[_]).element.scrollLeft=S.left,S.element.scrollTop=S.top}qt=!!bn,_n=bn=null,e.current=n,Vs=r;do{try{for(_=e;null!==Vs;){var k=Vs.effectTag;if(36&k&&us(_,Vs.alternate,Vs),128&k){C=void 0;var x=Vs.ref;if(null!==x){var w=Vs.stateNode;switch(Vs.tag){case 5:C=w;break;default:C=w}"function"==typeof x?x(C):x.current=C}}Vs=Vs.nextEffect}}catch(e){if(null===Vs)throw Error(a(330));El(Vs,e),Vs=Vs.nextEffect}}while(null!==Vs);Vs=null,Hr(),Ms=i}else e.current=n;if(qs)qs=!1,Qs=e,$s=t;else for(Vs=r;null!==Vs;)t=Vs.nextEffect,Vs.nextEffect=null,Vs=t;if(0===(t=e.firstPendingTime)&&(js=null),1073741823===t?e===Ys?Xs++:(Xs=0,Ys=e):Xs=0,"function"==typeof Dl&&Dl(n.stateNode,o),il(e),Ks)throw Ks=!1,e=Gs,Gs=null,e;return 0!=(8&Ms)||Zr(),null}function Sl(){for(;null!==Vs;){var e=Vs.effectTag;0!=(256&e)&&as(Vs.alternate,Vs),0==(512&e)||qs||(qs=!0,Qr(97,(function(){return kl(),null}))),Vs=Vs.nextEffect}}function kl(){if(90!==$s){var e=97<$s?97:$s;return $s=90,qr(e,xl)}}function xl(){if(null===Qs)return!1;var e=Qs;if(Qs=null,0!=(48&Ms))throw Error(a(331));var t=Ms;for(Ms|=Is,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:ss(5,n),ls(5,n)}}catch(t){if(null===e)throw Error(a(330));El(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Ms=t,Zr(),!0}function wl(e,t,n){fi(e,t=_s(e,t=ns(n,t),1073741823)),null!==(e=ol(e,1073741823))&&il(e)}function El(e,t){if(3===e.tag)wl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){wl(n,e,t);break}if(1===n.tag){var o=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof o.componentDidCatch&&(null===js||!js.has(o))){fi(n,e=Cs(n,e=ns(t,e),1073741823)),null!==(n=ol(n,1073741823))&&il(n);break}}n=n.return}}function Il(e,t,n){var o=e.pingCache;null!==o&&o.delete(t),Rs===e&&Ns===n?As===Ps||As===Ds&&1073741823===Bs&&Kr()-Us<500?cl(e,Ns):Ws=!0:zl(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,il(e)))}function Tl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=tl(t=el(),e,null)),null!==(e=ol(e,t))&&il(e)}Ss=function(e,t,n){var o=t.expirationTime;if(null!==e){var r=t.pendingProps;if(e.memoizedProps!==r||vr.current)Na=!0;else{if(o<n){switch(Na=!1,t.tag){case 3:Va(t),Ra();break;case 5:if(Oi(t),4&t.mode&&1!==n&&r.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:_r(t.type)&&xr(t);break;case 4:Li(t,t.stateNode.containerInfo);break;case 10:o=t.memoizedProps.value,r=t.type._context,hr(ei,r._currentValue),r._currentValue=o;break;case 13:if(null!==t.memoizedState)return 0!==(o=t.child.childExpirationTime)&&o>=n?Qa(e,t,n):(hr(zi,1&zi.current),null!==(t=Ya(e,t,n))?t.sibling:null);hr(zi,1&zi.current);break;case 19:if(o=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(o)return Xa(e,t,n);t.effectTag|=64}if(null!==(r=t.memoizedState)&&(r.rendering=null,r.tail=null),hr(zi,zi.current),!o)return null}return Ya(e,t,n)}Na=!1}}else Na=!1;switch(t.expirationTime=0,t.tag){case 2:if(o=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,r=br(t,gr.current),si(t,n),r=Yi(null,t,o,e,r,n),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,_r(o)){var i=!0;xr(t)}else i=!1;t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,ci(t);var s=o.getDerivedStateFromProps;"function"==typeof s&&bi(t,o,s,e),r.updater=_i,t.stateNode=r,r._reactInternalFiber=t,xi(t,o,e,n),t=Ua(null,t,o,!0,i,n)}else t.tag=0,Aa(null,t,r,n),t=t.child;return t;case 16:e:{if(r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(r),1!==r._status)throw r._result;switch(r=r._result,t.type=r,i=t.tag=function(e){if("function"==typeof e)return Fl(e)?1:0;if(null!=e){if((e=e.$$typeof)===le)return 11;if(e===de)return 14}return 2}(r),e=Jr(r,e),i){case 0:t=za(null,t,r,e,n);break e;case 1:t=Wa(null,t,r,e,n);break e;case 11:t=La(null,t,r,e,n);break e;case 14:t=Ba(null,t,r,Jr(r.type,e),o,n);break e}throw Error(a(306,r,""))}return t;case 0:return o=t.type,r=t.pendingProps,za(e,t,o,r=t.elementType===o?r:Jr(o,r),n);case 1:return o=t.type,r=t.pendingProps,Wa(e,t,o,r=t.elementType===o?r:Jr(o,r),n);case 3:if(Va(t),o=t.updateQueue,null===e||null===o)throw Error(a(282));if(o=t.pendingProps,r=null!==(r=t.memoizedState)?r.element:null,di(e,t),mi(t,o,null,n),(o=t.memoizedState.element)===r)Ra(),t=Ya(e,t,n);else{if((r=t.stateNode.hydrate)&&(wa=wn(t.stateNode.containerInfo.firstChild),xa=t,r=Ea=!0),r)for(n=Pi(t,null,o,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Aa(e,t,o,n),Ra();t=t.child}return t;case 5:return Oi(t),null===e&&Da(t),o=t.type,r=t.pendingProps,i=null!==e?e.memoizedProps:null,s=r.children,Sn(o,r)?s=null:null!==i&&Sn(o,i)&&(t.effectTag|=16),Ha(e,t),4&t.mode&&1!==n&&r.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Aa(e,t,s,n),t=t.child),t;case 6:return null===e&&Da(t),null;case 13:return Qa(e,t,n);case 4:return Li(t,t.stateNode.containerInfo),o=t.pendingProps,null===e?t.child=Di(t,null,o,n):Aa(e,t,o,n),t.child;case 11:return o=t.type,r=t.pendingProps,La(e,t,o,r=t.elementType===o?r:Jr(o,r),n);case 7:return Aa(e,t,t.pendingProps,n),t.child;case 8:case 12:return Aa(e,t,t.pendingProps.children,n),t.child;case 10:e:{o=t.type._context,r=t.pendingProps,s=t.memoizedProps,i=r.value;var l=t.type._context;if(hr(ei,l._currentValue),l._currentValue=i,null!==s)if(l=s.value,0===(i=Uo(l,i)?0:0|("function"==typeof o._calculateChangedBits?o._calculateChangedBits(l,i):1073741823))){if(s.children===r.children&&!vr.current){t=Ya(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var u=l.dependencies;if(null!==u){s=l.child;for(var c=u.firstContext;null!==c;){if(c.context===o&&0!=(c.observedBits&i)){1===l.tag&&((c=pi(n,null)).tag=2,fi(l,c)),l.expirationTime<n&&(l.expirationTime=n),null!==(c=l.alternate)&&c.expirationTime<n&&(c.expirationTime=n),ai(l.return,n),u.expirationTime<n&&(u.expirationTime=n);break}c=c.next}}else s=10===l.tag&&l.type===t.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===t){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}Aa(e,t,r.children,n),t=t.child}return t;case 9:return r=t.type,o=(i=t.pendingProps).children,si(t,n),o=o(r=li(r,i.unstable_observedBits)),t.effectTag|=1,Aa(e,t,o,n),t.child;case 14:return i=Jr(r=t.type,t.pendingProps),Ba(e,t,r,i=Jr(r.type,i),o,n);case 15:return Oa(e,t,t.type,t.pendingProps,o,n);case 17:return o=t.type,r=t.pendingProps,r=t.elementType===o?r:Jr(o,r),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,_r(o)?(e=!0,xr(t)):e=!1,si(t,n),Si(t,o,r),xi(t,o,r,n),Ua(null,t,o,!0,e,n);case 19:return Xa(e,t,n)}throw Error(a(156,t.tag))};var Dl=null,Pl=null;function Ml(e,t,n,o){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=o,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Rl(e,t,n,o){return new Ml(e,t,n,o)}function Fl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Nl(e,t){var n=e.alternate;return null===n?((n=Rl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Al(e,t,n,o,r,i){var s=2;if(o=e,"function"==typeof e)Fl(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case ne:return Ll(n.children,r,i,t);case se:s=8,r|=7;break;case oe:s=8,r|=1;break;case re:return(e=Rl(12,n,t,8|r)).elementType=re,e.type=re,e.expirationTime=i,e;case ue:return(e=Rl(13,n,t,r)).type=ue,e.elementType=ue,e.expirationTime=i,e;case ce:return(e=Rl(19,n,t,r)).elementType=ce,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ie:s=10;break e;case ae:s=9;break e;case le:s=11;break e;case de:s=14;break e;case pe:s=16,o=null;break e;case fe:s=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Rl(s,n,t,r)).elementType=e,t.type=o,t.expirationTime=i,t}function Ll(e,t,n,o){return(e=Rl(7,e,o,t)).expirationTime=n,e}function Bl(e,t,n){return(e=Rl(6,e,null,t)).expirationTime=n,e}function Ol(e,t,n){return(t=Rl(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Hl(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function zl(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Wl(e,t){var n=e.firstSuspendedTime,o=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(o>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Ul(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Vl(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Kl(e,t,n,o){var r=t.current,i=el(),s=vi.suspense;i=tl(i,r,s);e:if(n){t:{if(et(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(_r(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var u=n.type;if(_r(u)){n=kr(n,u,l);break e}}n=l}else n=mr;return null===t.context?t.context=n:t.pendingContext=n,(t=pi(i,s)).payload={element:e},null!==(o=void 0===o?null:o)&&(t.callback=o),fi(r,t),nl(r,i),i}function Gl(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function jl(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function ql(e,t){jl(e,t),(e=e.alternate)&&jl(e,t)}function Ql(e,t,n){var o=new Hl(e,t,n=null!=n&&!0===n.hydrate),r=Rl(3,null,null,2===t?7:1===t?3:0);o.current=r,r.stateNode=o,ci(r),e[Pn]=o.current,n&&0!==t&&function(e,t){var n=Je(t);It.forEach((function(e){mt(e,t,n)})),Tt.forEach((function(e){mt(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=o}function $l(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zl(e,t,n,o,r){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof r){var s=r;r=function(){var e=Gl(a);s.call(e)}}Kl(t,a,e,r)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Ql(e,0,t?{hydrate:!0}:void 0)}(n,o),a=i._internalRoot,"function"==typeof r){var l=r;r=function(){var e=Gl(a);l.call(e)}}ul((function(){Kl(t,a,e,r)}))}return Gl(a)}function Xl(e,t,n){var o=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==o?null:""+o,children:e,containerInfo:t,implementation:n}}function Yl(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!$l(t))throw Error(a(200));return Xl(e,t,null,n)}Ql.prototype.render=function(e){Kl(e,this._internalRoot,null,null)},Ql.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Kl(null,e,null,(function(){t[Pn]=null}))},gt=function(e){if(13===e.tag){var t=Yr(el(),150,100);nl(e,t),ql(e,t)}},vt=function(e){13===e.tag&&(nl(e,3),ql(e,3))},yt=function(e){if(13===e.tag){var t=el();nl(e,t=tl(t,e,null)),ql(e,t)}},T=function(e,t,n){switch(t){case"input":if(we(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var o=n[t];if(o!==e&&o.form===e.form){var r=Nn(o);if(!r)throw Error(a(90));Ce(o),we(o,r)}}}break;case"textarea":Re(e,n);break;case"select":null!=(t=n.value)&&De(e,!!n.multiple,t,!1)}},N=ll,A=function(e,t,n,o,r){var i=Ms;Ms|=4;try{return qr(98,e.bind(null,t,n,o,r))}finally{0===(Ms=i)&&Zr()}},L=function(){0==(49&Ms)&&(function(){if(null!==Zs){var e=Zs;Zs=null,e.forEach((function(e,t){Vl(t,e),il(t)})),Zr()}}(),kl())},B=function(e,t){var n=Ms;Ms|=2;try{return e(t)}finally{0===(Ms=n)&&Zr()}};var Jl={Events:[Rn,Fn,Nn,E,k,Wn,function(e){it(e,zn)},R,F,Yt,lt,kl,{current:!1}]};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Dl=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Pl=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}})(r({},e,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Z.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=ot(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}))}({findFiberByHostInstance:Mn,bundleType:0,version:"16.14.0",rendererPackageName:"react-dom"}),t.createPortal=Yl,t.render=function(e,t,n){if(!$l(t))throw Error(a(200));return Zl(null,e,t,!1,n)},t.unstable_batchedUpdates=ll},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:(e,t)=>{"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var n="function"==typeof Symbol&&Symbol.for,o=n?Symbol.for("react.element"):60103,r=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,s=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,p=n?Symbol.for("react.forward_ref"):60112,f=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,_=n?Symbol.for("react.scope"):60119;function C(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case c:case d:case i:case s:case a:case f:return e;default:switch(e=e&&e.$$typeof){case u:case p:case g:case m:case l:return e;default:return t}}case r:return t}}}function S(e){return C(e)===d}t.AsyncMode=c,t.ConcurrentMode=d,t.ContextConsumer=u,t.ContextProvider=l,t.Element=o,t.ForwardRef=p,t.Fragment=i,t.Lazy=g,t.Memo=m,t.Portal=r,t.Profiler=s,t.StrictMode=a,t.Suspense=f,t.isAsyncMode=function(e){return S(e)||C(e)===c},t.isConcurrentMode=S,t.isContextConsumer=function(e){return C(e)===u},t.isContextProvider=function(e){return C(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return C(e)===p},t.isFragment=function(e){return C(e)===i},t.isLazy=function(e){return C(e)===g},t.isMemo=function(e){return C(e)===m},t.isPortal=function(e){return C(e)===r},t.isProfiler=function(e){return C(e)===s},t.isStrictMode=function(e){return C(e)===a},t.isSuspense=function(e){return C(e)===f},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===d||e===s||e===a||e===f||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===m||e.$$typeof===l||e.$$typeof===u||e.$$typeof===p||e.$$typeof===y||e.$$typeof===b||e.$$typeof===_||e.$$typeof===v)},t.typeOf=C},864:(e,t,n)=>{"use strict";e.exports=n(921)},408:(e,t,n)=>{"use strict";
/** @license React v16.14.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var o=n(418),r="function"==typeof Symbol&&Symbol.for,i=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,s=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,d=r?Symbol.for("react.context"):60110,p=r?Symbol.for("react.forward_ref"):60112,f=r?Symbol.for("react.suspense"):60113,h=r?Symbol.for("react.memo"):60115,m=r?Symbol.for("react.lazy"):60116,g="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function _(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||y}function C(){}function S(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||y}_.prototype.isReactComponent={},_.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(v(85));this.updater.enqueueSetState(this,e,t,"setState")},_.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},C.prototype=_.prototype;var k=S.prototype=new C;k.constructor=S,o(k,_.prototype),k.isPureReactComponent=!0;var x={current:null},w=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function I(e,t,n){var o,r={},a=null,s=null;if(null!=t)for(o in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)w.call(t,o)&&!E.hasOwnProperty(o)&&(r[o]=t[o]);var l=arguments.length-2;if(1===l)r.children=n;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];r.children=u}if(e&&e.defaultProps)for(o in l=e.defaultProps)void 0===r[o]&&(r[o]=l[o]);return{$$typeof:i,type:e,key:a,ref:s,props:r,_owner:x.current}}function T(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var D=/\/+/g,P=[];function M(e,t,n,o){if(P.length){var r=P.pop();return r.result=e,r.keyPrefix=t,r.func=n,r.context=o,r.count=0,r}return{result:e,keyPrefix:t,func:n,context:o,count:0}}function R(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>P.length&&P.push(e)}function F(e,t,n,o){var r=typeof e;"undefined"!==r&&"boolean"!==r||(e=null);var s=!1;if(null===e)s=!0;else switch(r){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case i:case a:s=!0}}if(s)return n(o,e,""===t?"."+A(e,0):t),1;if(s=0,t=""===t?".":t+":",Array.isArray(e))for(var l=0;l<e.length;l++){var u=t+A(r=e[l],l);s+=F(r,u,n,o)}else if(null===e||"object"!=typeof e?u=null:u="function"==typeof(u=g&&e[g]||e["@@iterator"])?u:null,"function"==typeof u)for(e=u.call(e),l=0;!(r=e.next()).done;)s+=F(r=r.value,u=t+A(r,l++),n,o);else if("object"===r)throw n=""+e,Error(v(31,"[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n,""));return s}function N(e,t,n){return null==e?0:F(e,"",t,n)}function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function L(e,t){e.func.call(e.context,t,e.count++)}function B(e,t,n){var o=e.result,r=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?O(e,o,n,(function(e){return e})):null!=e&&(T(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,r+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(D,"$&/")+"/")+n)),o.push(e))}function O(e,t,n,o,r){var i="";null!=n&&(i=(""+n).replace(D,"$&/")+"/"),N(e,B,t=M(t,i,o,r)),R(t)}var H={current:null};function z(){var e=H.current;if(null===e)throw Error(v(321));return e}var W={ReactCurrentDispatcher:H,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:x,IsSomeRendererActing:{current:!1},assign:o};t.Children={map:function(e,t,n){if(null==e)return e;var o=[];return O(e,o,null,t,n),o},forEach:function(e,t,n){if(null==e)return e;N(e,L,t=M(null,null,t,n)),R(t)},count:function(e){return N(e,(function(){return null}),null)},toArray:function(e){var t=[];return O(e,t,null,(function(e){return e})),t},only:function(e){if(!T(e))throw Error(v(143));return e}},t.Component=_,t.Fragment=s,t.Profiler=u,t.PureComponent=S,t.StrictMode=l,t.Suspense=f,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W,t.cloneElement=function(e,t,n){if(null==e)throw Error(v(267,e));var r=o({},e.props),a=e.key,s=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,l=x.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)w.call(t,c)&&!E.hasOwnProperty(c)&&(r[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)r.children=n;else if(1<c){u=Array(c);for(var d=0;d<c;d++)u[d]=arguments[d+2];r.children=u}return{$$typeof:i,type:e.type,key:a,ref:s,props:r,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:d,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},t.createElement=I,t.createFactory=function(e){var t=I.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:p,render:e}},t.isValidElement=T,t.lazy=function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return z().useCallback(e,t)},t.useContext=function(e,t){return z().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return z().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return z().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return z().useLayoutEffect(e,t)},t.useMemo=function(e,t){return z().useMemo(e,t)},t.useReducer=function(e,t,n){return z().useReducer(e,t,n)},t.useRef=function(e){return z().useRef(e)},t.useState=function(e){return z().useState(e)},t.version="16.14.0"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var n,o,r,i,a;if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,l=null,u=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(u,0),e}},c=Date.now();t.unstable_now=function(){return Date.now()-c},n=function(e){null!==s?setTimeout(n,0,e):(s=e,setTimeout(u,0))},o=function(e,t){l=setTimeout(e,t)},r=function(){clearTimeout(l)},i=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,f=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var g=p.now();t.unstable_now=function(){return p.now()-g}}var v=!1,y=null,b=-1,_=5,C=0;i=function(){return t.unstable_now()>=C},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):_=0<e?Math.floor(1e3/e):5};var S=new MessageChannel,k=S.port2;S.port1.onmessage=function(){if(null!==y){var e=t.unstable_now();C=e+_;try{y(!0,e)?k.postMessage(null):(v=!1,y=null)}catch(e){throw k.postMessage(null),e}}else v=!1},n=function(e){y=e,v||(v=!0,k.postMessage(null))},o=function(e,n){b=f((function(){e(t.unstable_now())}),n)},r=function(){h(b),b=-1}}function x(e,t){var n=e.length;e.push(t);e:for(;;){var o=n-1>>>1,r=e[o];if(!(void 0!==r&&0<I(r,t)))break e;e[o]=t,e[n]=r,n=o}}function w(e){return void 0===(e=e[0])?null:e}function E(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var o=0,r=e.length;o<r;){var i=2*(o+1)-1,a=e[i],s=i+1,l=e[s];if(void 0!==a&&0>I(a,n))void 0!==l&&0>I(l,a)?(e[o]=l,e[s]=n,o=s):(e[o]=a,e[i]=n,o=i);else{if(!(void 0!==l&&0>I(l,n)))break e;e[o]=l,e[s]=n,o=s}}}return t}return null}function I(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var T=[],D=[],P=1,M=null,R=3,F=!1,N=!1,A=!1;function L(e){for(var t=w(D);null!==t;){if(null===t.callback)E(D);else{if(!(t.startTime<=e))break;E(D),t.sortIndex=t.expirationTime,x(T,t)}t=w(D)}}function B(e){if(A=!1,L(e),!N)if(null!==w(T))N=!0,n(O);else{var t=w(D);null!==t&&o(B,t.startTime-e)}}function O(e,n){N=!1,A&&(A=!1,r()),F=!0;var a=R;try{for(L(n),M=w(T);null!==M&&(!(M.expirationTime>n)||e&&!i());){var s=M.callback;if(null!==s){M.callback=null,R=M.priorityLevel;var l=s(M.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?M.callback=l:M===w(T)&&E(T),L(n)}else E(T);M=w(T)}if(null!==M)var u=!0;else{var c=w(D);null!==c&&o(B,c.startTime-n),u=!1}return u}finally{M=null,R=a,F=!1}}function H(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var z=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){N||F||(N=!0,n(O))},t.unstable_getCurrentPriorityLevel=function(){return R},t.unstable_getFirstCallbackNode=function(){return w(T)},t.unstable_next=function(e){switch(R){case 1:case 2:case 3:var t=3;break;default:t=R}var n=R;R=t;try{return e()}finally{R=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=z,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=R;R=e;try{return t()}finally{R=n}},t.unstable_scheduleCallback=function(e,i,a){var s=t.unstable_now();if("object"==typeof a&&null!==a){var l=a.delay;l="number"==typeof l&&0<l?s+l:s,a="number"==typeof a.timeout?a.timeout:H(e)}else a=H(e),l=s;return e={id:P++,callback:i,priorityLevel:e,startTime:l,expirationTime:a=l+a,sortIndex:-1},l>s?(e.sortIndex=l,x(D,e),null===w(T)&&e===w(D)&&(A?r():A=!0,o(B,l-s))):(e.sortIndex=a,x(T,e),N||F||(N=!0,n(O))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();L(e);var n=w(T);return n!==M&&null!==M&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<M.expirationTime||i()},t.unstable_wrapCallback=function(e){var t=R;return function(){var n=R;R=t;try{return e.apply(this,arguments)}finally{R=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},121:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o}),e=n.hmd(e);const o=function(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}("undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:e)}},o={};function r(e){if(o[e])return o[e].exports;var t=o[e]={id:e,loaded:!1,exports:{}};return n[e](t,t.exports,r),t.loaded=!0,t.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,r.t=function(n,o){if(1&o&&(n=this(n)),8&o)return n;if("object"==typeof n&&n){if(4&o&&n.__esModule)return n;if(16&o&&"function"==typeof n.then)return n}var i=Object.create(null);r.r(i);var a={};e=e||[null,t({}),t([]),t(t)];for(var s=2&o&&n;"object"==typeof s&&!~e.indexOf(s);s=t(s))Object.getOwnPropertyNames(s).forEach((e=>a[e]=()=>n[e]));return a.default=()=>n,r.d(i,a),i},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=r(294),t=r.t(e,2),n=r(935);function o(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}var i=r(697),a=r.n(i);function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}function l(e){return"/"===e.charAt(0)}function u(e,t){for(var n=t,o=n+1,r=e.length;o<r;n+=1,o+=1)e[n]=e[o];e.pop()}const c=function(e,t){void 0===t&&(t="");var n,o=e&&e.split("/")||[],r=t&&t.split("/")||[],i=e&&l(e),a=t&&l(t),s=i||a;if(e&&l(e)?r=o:o.length&&(r.pop(),r=r.concat(o)),!r.length)return"/";if(r.length){var c=r[r.length-1];n="."===c||".."===c||""===c}else n=!1;for(var d=0,p=r.length;p>=0;p--){var f=r[p];"."===f?u(r,p):".."===f?(u(r,p),d++):d&&(u(r,p),d--)}if(!s)for(;d--;d)r.unshift("..");!s||""===r[0]||r[0]&&l(r[0])||r.unshift("");var h=r.join("/");return n&&"/"!==h.substr(-1)&&(h+="/"),h};var d="Invariant failed";const p=function(e,t){if(!e)throw new Error(d)};function f(e){return"/"===e.charAt(0)?e:"/"+e}function h(e){return"/"===e.charAt(0)?e.substr(1):e}function m(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function g(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function v(e){var t=e.pathname,n=e.search,o=e.hash,r=t||"/";return n&&"?"!==n&&(r+="?"===n.charAt(0)?n:"?"+n),o&&"#"!==o&&(r+="#"===o.charAt(0)?o:"#"+o),r}function y(e,t,n,o){var r;"string"==typeof e?(r=function(e){var t=e||"/",n="",o="",r=t.indexOf("#");-1!==r&&(o=t.substr(r),t=t.substr(0,r));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===o?"":o}}(e)).state=t:(void 0===(r=s({},e)).pathname&&(r.pathname=""),r.search?"?"!==r.search.charAt(0)&&(r.search="?"+r.search):r.search="",r.hash?"#"!==r.hash.charAt(0)&&(r.hash="#"+r.hash):r.hash="",void 0!==t&&void 0===r.state&&(r.state=t));try{r.pathname=decodeURI(r.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+r.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(r.key=n),o?r.pathname?"/"!==r.pathname.charAt(0)&&(r.pathname=c(r.pathname,o.pathname)):r.pathname=o.pathname:r.pathname||(r.pathname="/"),r}function b(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,o,r){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof o?o(i,r):r(!0):r(!1!==i)}else r(!0)},appendListener:function(e){var n=!0;function o(){n&&e.apply(void 0,arguments)}return t.push(o),function(){n=!1,t=t.filter((function(e){return e!==o}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];t.forEach((function(e){return e.apply(void 0,n)}))}}}var _=!("undefined"==typeof window||!window.document||!window.document.createElement);function C(e,t){t(window.confirm(e))}var S="popstate",k="hashchange";function x(){try{return window.history.state||{}}catch(e){return{}}}function w(e){void 0===e&&(e={}),_||p(!1);var t,n=window.history,o=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,r=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,a=i.forceRefresh,l=void 0!==a&&a,u=i.getUserConfirmation,c=void 0===u?C:u,d=i.keyLength,h=void 0===d?6:d,w=e.basename?g(f(e.basename)):"";function E(e){var t=e||{},n=t.key,o=t.state,r=window.location,i=r.pathname+r.search+r.hash;return w&&(i=m(i,w)),y(i,o,n)}function I(){return Math.random().toString(36).substr(2,h)}var T=b();function D(e){s(W,e),W.length=n.length,T.notifyListeners(W.location,W.action)}function P(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||F(E(e.state))}function M(){F(E(x()))}var R=!1;function F(e){if(R)R=!1,D();else{T.confirmTransitionTo(e,"POP",c,(function(t){t?D({action:"POP",location:e}):function(e){var t=W.location,n=A.indexOf(t.key);-1===n&&(n=0);var o=A.indexOf(e.key);-1===o&&(o=0);var r=n-o;r&&(R=!0,B(r))}(e)}))}}var N=E(x()),A=[N.key];function L(e){return w+v(e)}function B(e){n.go(e)}var O=0;function H(e){1===(O+=e)&&1===e?(window.addEventListener(S,P),r&&window.addEventListener(k,M)):0===O&&(window.removeEventListener(S,P),r&&window.removeEventListener(k,M))}var z=!1;var W={length:n.length,action:"POP",location:N,createHref:L,push:function(e,t){var r="PUSH",i=y(e,t,I(),W.location);T.confirmTransitionTo(i,r,c,(function(e){if(e){var t=L(i),a=i.key,s=i.state;if(o)if(n.pushState({key:a,state:s},null,t),l)window.location.href=t;else{var u=A.indexOf(W.location.key),c=A.slice(0,u+1);c.push(i.key),A=c,D({action:r,location:i})}else window.location.href=t}}))},replace:function(e,t){var r="REPLACE",i=y(e,t,I(),W.location);T.confirmTransitionTo(i,r,c,(function(e){if(e){var t=L(i),a=i.key,s=i.state;if(o)if(n.replaceState({key:a,state:s},null,t),l)window.location.replace(t);else{var u=A.indexOf(W.location.key);-1!==u&&(A[u]=i.key),D({action:r,location:i})}else window.location.replace(t)}}))},go:B,goBack:function(){B(-1)},goForward:function(){B(1)},block:function(e){void 0===e&&(e=!1);var t=T.setPrompt(e);return z||(H(1),z=!0),function(){return z&&(z=!1,H(-1)),t()}},listen:function(e){var t=T.appendListener(e);return H(1),function(){H(-1),t()}}};return W}var E="hashchange",I={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+h(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:h,decodePath:f},slash:{encodePath:f,decodePath:f}};function T(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function D(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function P(e){window.location.replace(T(window.location.href)+"#"+e)}function M(e){void 0===e&&{},_||p(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),o=n.getUserConfirmation,r=void 0===o?C:o,i=n.hashType,a=void 0===i?"slash":i,l=e.basename?g(f(e.basename)):"",u=I[a],c=u.encodePath,d=u.decodePath;function h(){var e=d(D());return l&&m(e,l),y(e)}var S=b();function k(e){s(z,e),z.length=t.length,S.notifyListeners(z.location,z.action)}var x=!1,w=null;function M(){var e,t,n=D(),o=c(n);if(n!==o)P(o);else{var i=h(),a=z.location;if(!x&&(i,a.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(w===v(i))return;null,function(e){if(x)!1,k();else{var t="POP";S.confirmTransitionTo(e,t,r,(function(n){n?k({action:t,location:e}):function(e){var t=z.location,n=A.lastIndexOf(v(t));-1===n&&0;var o=A.lastIndexOf(v(e));-1===o&&0;var r=n-o;r&&(!0,L(r))}(e)}))}}(i)}}var R=D(),F=c(R);R!==F&&P(F);var N=h(),A=[v(N)];function L(e){t.go(e)}var B=0;function O(e){1===(B+=e)&&1===e?window.addEventListener(E,M):0===B&&window.removeEventListener(E,M)}var H=!1;var z={length:t.length,action:"POP",location:N,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&T(window.location.href),n+"#"+c(l+v(e))},push:function(e,t){var n="PUSH",o=y(e,void 0,void 0,z.location);S.confirmTransitionTo(o,n,r,(function(e){if(e){var t=v(o),r=c(l+t);if(D()!==r){t,function(e){window.location.hash=e}(r);var i=A.lastIndexOf(v(z.location)),a=A.slice(0,i+1);a.push(t),a,k({action:n,location:o})}else k()}}))},replace:function(e,t){var n="REPLACE",o=y(e,void 0,void 0,z.location);S.confirmTransitionTo(o,n,r,(function(e){if(e){var t=v(o),r=c(l+t);D()!==r&&(t,P(r));var i=A.indexOf(v(z.location));-1!==i&&(A[i]=t),k({action:n,location:o})}}))},go:L,goBack:function(){L(-1)},goForward:function(){L(1)},block:function(e){void 0===e&&!1;var t=S.setPrompt(e);return H||(O(1),!0),function(){return H&&(!1,O(-1)),t()}},listen:function(e){var t=S.appendListener(e);return O(1),function(){O(-1),t()}}};return z}function R(e,t,n){return Math.min(Math.max(e,t),n)}function F(e){void 0===e&&{};var t=e,n=t.getUserConfirmation,o=t.initialEntries,r=void 0===o?["/"]:o,i=t.initialIndex,a=void 0===i?0:i,l=t.keyLength,u=void 0===l?6:l,c=b();function d(e){s(_,e),_.length=_.entries.length,c.notifyListeners(_.location,_.action)}function p(){return Math.random().toString(36).substr(2,u)}var f=R(a,0,r.length-1),h=r.map((function(e){return y(e,void 0,"string"==typeof e?p():e.key||p())})),m=v;function g(e){var t=R(_.index+e,0,_.entries.length-1),o=_.entries[t];c.confirmTransitionTo(o,"POP",n,(function(e){e?d({action:"POP",location:o,index:t}):d()}))}var _={length:h.length,action:"POP",location:h[f],index:f,entries:h,createHref:m,push:function(e,t){var o="PUSH",r=y(e,t,p(),_.location);c.confirmTransitionTo(r,o,n,(function(e){if(e){var t=_.index+1,n=_.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),d({action:o,location:r,index:t,entries:n})}}))},replace:function(e,t){var o="REPLACE",r=y(e,t,p(),_.location);c.confirmTransitionTo(r,o,n,(function(e){e&&(_.entries[_.index]=r,d({action:o,location:r}))}))},go:g,goBack:function(){g(-1)},goForward:function(){g(1)},canGo:function(e){var t=_.index+e;return t>=0&&t<_.entries.length},block:function(e){return void 0===e&&!1,c.setPrompt(e)},listen:function(e){return c.appendListener(e)}};return _}var N=1073741823,A="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==r.g?r.g:{};function L(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,o){e=n,t.forEach((function(t){return t(e,o)}))}}}const B=e.createContext||function(t,n){var r,i,s="__create-react-context-"+function(){var e="__global_unique_id__";return A[e]=(A[e]||0)+1}()+"__",l=function(e){function t(){var t;return(t=e.apply(this,arguments)||this).emitter=L(t.props.value),t}o(t,e);var r=t.prototype;return r.getChildContext=function(){var e;return(e={})[s]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t,o=this.props.value,r=e.value;((i=o)===(a=r)?0!==i||1/i==1/a:i!=i&&a!=a)?t=0:(t="function"==typeof n?n(o,r):N,0!==(t|=0)&&this.emitter.set(e.value,t))}var i,a},r.render=function(){return this.props.children},t}(e.Component);l.childContextTypes=((r={})[s]=a().object.isRequired,r);var u=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).state={value:t.getValue()},t.onUpdate=function(e,n){0!=((0|t.observedBits)&n)&&t.setState({value:t.getValue()})},t}o(n,e);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?N:t},r.componentDidMount=function(){this.context[s]&&this.context[s].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?N:e},r.componentWillUnmount=function(){this.context[s]&&this.context[s].off(this.onUpdate)},r.getValue=function(){return this.context[s]?this.context[s].get():t},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(e.Component);return u.contextTypes=((i={})[s]=a().object,i),{Provider:l,Consumer:u}};var O=r(779),H=r.n(O);r(864);function z(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}r(679);var W=function(e){var t=B();return t.displayName=e,t}("Router-History"),U=function(e){var t=B();return t.displayName=e,t}("Router"),V=function(t){function n(e){var n;return(n=t.call(this,e)||this).state={location:e.history.location},n._isMounted=!1,n._pendingLocation=null,e.staticContext||(n.unlisten=e.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}o(n,t),n.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var r=n.prototype;return r.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},r.componentWillUnmount=function(){this.unlisten&&this.unlisten()},r.render=function(){return e.createElement(U.Provider,{value:{history:this.props.history,location:this.state.location,match:n.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},e.createElement(W.Provider,{children:this.props.children||null,value:this.props.history}))},n}(e.Component);e.Component;e.Component;var K={},G=0;function j(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,o=n.path,r=n.exact,i=void 0!==r&&r,a=n.strict,s=void 0!==a&&a,l=n.sensitive,u=void 0!==l&&l;return[].concat(o).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var o=function(e,t){var n=""+t.end+t.strict+t.sensitive,o=K[n]||(K[n]={});if(o[e])return o[e];var r=[],i={regexp:H()(e,r,t),keys:r};return G<1e4&&(o[e]=i,G++),i}(n,{end:i,strict:s,sensitive:u}),r=o.regexp,a=o.keys,l=r.exec(e);if(!l)return null;var c=l[0],d=l.slice(1),p=e===c;return i&&!p?null:{path:n,url:"/"===n&&""===c?"/":c,isExact:p,params:a.reduce((function(e,t,n){return e[t.name]=d[n],e}),{})}}),null)}var q=function(t){function n(){return t.apply(this,arguments)||this}return o(n,t),n.prototype.render=function(){var t=this;return e.createElement(U.Consumer,null,(function(n){n||p(!1);var o=t.props.location||n.location,r=s({},n,{location:o,match:t.props.computedMatch?t.props.computedMatch:t.props.path?j(o.pathname,t.props):n.match}),i=t.props,a=i.children,l=i.component,u=i.render;return Array.isArray(a)&&0===a.length&&(a=null),e.createElement(U.Provider,{value:r},r.match?a?"function"==typeof a?a(r):a:l?e.createElement(l,r):u?u(r):null:"function"==typeof a?a(r):null)}))},n}(e.Component);function Q(e){return"/"===e.charAt(0)?e:"/"+e}function $(e,t){if(!e)return t;var n=Q(e);return 0!==t.pathname.indexOf(n)?t:s({},t,{pathname:t.pathname.substr(n.length)})}function Z(e){return"string"==typeof e?e:v(e)}function X(e){return function(){p(!1)}}function Y(){}e.Component;var J=function(t){function n(){return t.apply(this,arguments)||this}return o(n,t),n.prototype.render=function(){var t=this;return e.createElement(U.Consumer,null,(function(n){n||p(!1);var o,r,i=t.props.location||n.location;return e.Children.forEach(t.props.children,(function(t){if(null==r&&e.isValidElement(t)){o=t;var a=t.props.path||t.props.from;r=a?j(i.pathname,s({},t.props,{path:a})):n.match}})),r?e.cloneElement(o,{location:i,computedMatch:r}):null}))},n}(e.Component);var ee=e.useContext;function te(){return ee(W)}function ne(){return ee(U).location}var oe=function(t){function n(){for(var e,n=arguments.length,o=new Array(n),r=0;r<n;r++)o[r]=arguments[r];return(e=t.call.apply(t,[this].concat(o))||this).history=w(e.props),e}return o(n,t),n.prototype.render=function(){return e.createElement(V,{history:this.history,children:this.props.children})},n}(e.Component);e.Component;var re=function(e,t){return"function"==typeof e?e(t):e},ie=function(e,t){return"string"==typeof e?y(e,null,null,t):e},ae=function(e){return e},se=e.forwardRef;void 0===se&&(se=ae);var le=se((function(t,n){var o=t.innerRef,r=t.navigate,i=t.onClick,a=z(t,["innerRef","navigate","onClick"]),l=a.target,u=s({},a,{onClick:function(e){try{i&&i(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||l&&"_self"!==l||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return u.ref=ae!==se&&n||o,e.createElement("a",u)}));var ue=se((function(t,n){var o=t.component,r=void 0===o?le:o,i=t.replace,a=t.to,l=t.innerRef,u=z(t,["component","replace","to","innerRef"]);return e.createElement(U.Consumer,null,(function(t){t||p(!1);var o=t.history,c=ie(re(a,t.location),t.location),d=c?o.createHref(c):"",f=s({},u,{href:d,navigate:function(){var e=re(a,t.location);(i?o.replace:o.push)(e)}});return ae!==se?f.ref=n||l:f.innerRef=l,e.createElement(r,f)}))})),ce=function(e){return e},de=e.forwardRef;void 0===de&&(de=ce);de((function(t,n){var o=t["aria-current"],r=void 0===o?"page":o,i=t.activeClassName,a=void 0===i?"active":i,l=t.activeStyle,u=t.className,c=t.exact,d=t.isActive,f=t.location,h=t.sensitive,m=t.strict,g=t.style,v=t.to,y=t.innerRef,b=z(t,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return e.createElement(U.Consumer,null,(function(t){t||p(!1);var o=f||t.location,i=ie(re(v,o),o),_=i.pathname,C=_&&_.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),S=C?j(o.pathname,{path:C,exact:c,sensitive:h,strict:m}):null,k=!!(d?d(S,o):S),x=k?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(u,a):u,w=k?s({},g,{},l):g,E=s({"aria-current":k&&r||null,className:x,style:w,to:i},b);return ce!==de?E.ref=n||y:E.innerRef=y,e.createElement(ue,E)}))}));var pe=e.createContext(null);var fe=function(e){e()},he=function(){return fe},me={notify:function(){}};var ge=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=me,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=function(){var e=he(),t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var o=!0,r=n={callback:e,next:null,prev:n};return r.prev?r.prev.next=r:t=r,function(){o&&null!==t&&(o=!1,r.next?r.next.prev=r.prev:n=r.prev,r.prev?r.prev.next=r.next:t=r.next)}}}}())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=me)},e}();const ve=function(t){var n=t.store,o=t.context,r=t.children,i=(0,e.useMemo)((function(){var e=new ge(n);return e.onStateChange=e.notifyNestedSubs,{store:n,subscription:e}}),[n]),a=(0,e.useMemo)((function(){return n.getState()}),[n]);(0,e.useEffect)((function(){var e=i.subscription;return e.trySubscribe(),a!==n.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[i,a]);var s=o||pe;return e.createElement(s.Provider,{value:i},r)};var ye="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?e.useLayoutEffect:e.useEffect;var be=r(121),_e=function(){return Math.random().toString(36).substring(7).split("").join(".")},Ce={INIT:"@@redux/INIT"+_e(),REPLACE:"@@redux/REPLACE"+_e(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+_e()}};function Se(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function ke(e,t,n){var o;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(ke)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var r=e,i=t,a=[],s=a,l=!1;function u(){s===a&&(s=a.slice())}function c(){if(l)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return i}function d(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(l)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return u(),s.push(e),function(){if(t){if(l)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,u();var n=s.indexOf(e);s.splice(n,1),a=null}}}function p(e){if(!Se(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(l)throw new Error("Reducers may not dispatch actions.");try{l=!0,i=r(i,e)}finally{l=!1}for(var t=a=s,n=0;n<t.length;n++){(0,t[n])()}return e}function f(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");r=e,p({type:Ce.REPLACE})}function h(){var e,t=d;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(c())}return n(),{unsubscribe:t(n)}}})[be.Z]=function(){return this},e}return p({type:Ce.INIT}),(o={dispatch:p,subscribe:d,getState:c,replaceReducer:f})[be.Z]=h,o}function xe(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function we(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ee(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function Ie(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ee(n,!0).forEach((function(t){we(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ee(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Te(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function De(){return(0,e.useContext)(pe)}function Pe(t){void 0===t&&(t=pe);var n=t===pe?De:function(){return(0,e.useContext)(t)};return function(){return n().store}}var Me=Pe();function Re(e){void 0===e&&(e=pe);var t=e===pe?Me:Pe(e);return function(){return t().dispatch}}var Fe=Re(),Ne=function(e,t){return e===t};function Ae(t){void 0===t&&(t=pe);var n=t===pe?De:function(){return(0,e.useContext)(t)};return function(t,o){void 0===o&&(o=Ne);var r=n();return function(t,n,o,r){var i,a=(0,e.useReducer)((function(e){return e+1}),0)[1],s=(0,e.useMemo)((function(){return new ge(o,r)}),[o,r]),l=(0,e.useRef)(),u=(0,e.useRef)(),c=(0,e.useRef)();try{i=t!==u.current||l.current?t(o.getState()):c.current}catch(e){throw l.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+l.current.stack+"\n\n"),e}return ye((function(){u.current=t,c.current=i,l.current=void 0})),ye((function(){function e(){try{var e=u.current(o.getState());if(n(e,c.current))return;c.current=e}catch(e){l.current=e}a({})}return s.onStateChange=e,s.trySubscribe(),e(),function(){return s.tryUnsubscribe()}}),[o,s]),i}(t,o,r.store,r.subscription)}}var Le,Be=Ae();function Oe(e){return function(t){var n=t.dispatch,o=t.getState;return function(t){return function(r){return"function"==typeof r?r(n,o,e):t(r)}}}}Le=n.unstable_batchedUpdates,fe=Le;var He=Oe();He.withExtraArgument=Oe;const ze=He;var We=function(){return(We=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},Ue=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var o=Array(e),r=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,s=i.length;a<s;a++,r++)o[r]=i[a];return o},Ve=[{id:1,name:"Awais",phoneNo:"033456098"},{id:2,name:"Ahmed",phoneNo:"033456098"},{id:3,name:"Saad",phoneNo:"033456098"},{id:4,name:"Haad",phoneNo:"033456098"},{id:5,name:"Zaid",phoneNo:"033456098"},{id:6,name:"Ashir",phoneNo:"033456098"},{id:7,name:"Furqan",phoneNo:"033456098"}];var Ke=function(){return(Ke=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},Ge=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var o=Array(e),r=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,s=i.length;a<s;a++,r++)o[r]=i[a];return o},je={list:[{id:1,name:"Awais",phoneNo:"033456098",address:"WhatsApp Inc. 1601 Willow Road Menlo Park, California 94025. United States of America. WhatsApp Inc"},{id:2,name:"Ahmed",phoneNo:"033456098",address:"WhatsApp Inc. 1601 Willow Road Menlo Park, California 94025. United States of America. WhatsApp Inc"},{id:3,name:"Saad",phoneNo:"033456098",address:"WhatsApp Inc. 1601 Willow Road Menlo Park, California 94025. United States of America. WhatsApp Inc"},{id:4,name:"Haad",phoneNo:"033456098",address:"WhatsApp Inc. 1601 Willow Road Menlo Park, California 94025. United States of America. WhatsApp Inc"},{id:5,name:"Zaid",phoneNo:"033456098",address:"WhatsApp Inc. 1601 Willow Road Menlo Park, California 94025. United States of America. WhatsApp Inc"},{id:6,name:"Ashir",phoneNo:"033456098",address:"WhatsApp Inc. 1601 Willow Road Menlo Park, California 94025. United States of America. WhatsApp Inc"},{id:7,name:"Furqan",phoneNo:"033456098",address:"WhatsApp Inc. 1601 Willow Road Menlo Park, California 94025. United States of America. WhatsApp Inc"}],search:""};var qe=ke(function(e){for(var t=Object.keys(e),n={},o=0;o<t.length;o++){var r=t[o];0,"function"==typeof e[r]&&(n[r]=e[r])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:Ce.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:Ce.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+Ce.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var o=!1,r={},s=0;s<a.length;s++){var l=a[s],u=n[l],c=e[l],d=u(c,t);if(void 0===d){var p=xe(l,t);throw new Error(p)}r[l]=d,o=o||d!==c}return(o=o||a.length!==Object.keys(e).length)?r:e}}({vehicle:function(e,t){switch(void 0===e&&(e=Ve),t.type){case"AddVehicle":var n=e.length+1;return Ue(e,[We(We({},t.payload),{id:n})]);case"RemoveVehicle":return e.filter((function(e){return e.id!==t.payload}))}return e},clientView:function(e,t){switch(void 0===e&&(e=je),t.type){case"SearchClient":var n=t.payload.search;return Ke(Ke({},e),{list:je.list.filter((function(e){return e.name.toLowerCase().indexOf(n)>-1}))});case"AddClient":var o=e.list.length+1;return t.payload.id=o,e.list.push(t.payload),Ke(Ke({},e),{list:Ge(e.list)});case"RemoveClient":return Ke(Ke({},e),{list:e.list.filter((function(e){return e.id!==t.payload}))})}return e}}),void 0,function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),o=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},r={getState:n.getState,dispatch:function(){return o.apply(void 0,arguments)}},i=t.map((function(e){return e(r)}));return Ie({},n,{dispatch:o=Te.apply(void 0,i)(n.dispatch)})}}}(ze)),Qe=function(e,t){return(Qe=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function $e(e,t){function n(){this.constructor=e}Qe(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var Ze=function(){return(Ze=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};function Xe(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(o=Object.getOwnPropertySymbols(e);r<o.length;r++)t.indexOf(o[r])<0&&Object.prototype.propertyIsEnumerable.call(e,o[r])&&(n[o[r]]=e[o[r]])}return n}function Ye(e,t,n,o){var r,i=arguments.length,a=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,o);else for(var s=e.length-1;s>=0;s--)(r=e[s])&&(a=(i<3?r(a):i>3?r(t,n,a):r(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a}function Je(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var o=Array(e),r=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,s=i.length;a<s;a++,r++)o[r]=i[a];return o}var et,tt=0,nt=1,ot=2,rt="undefined"!=typeof navigator&&/rv:11.0/.test(navigator.userAgent),it={};try{it=window}catch(vt){}var at,st=function(){function e(e){this._rules=[],this._preservedRules=[],this._rulesToInsert=[],this._counter=0,this._keyToClassName={},this._onResetCallbacks=[],this._classNameToArgs={},this._config=Ze({injectionMode:nt,defaultPrefix:"css",namespace:void 0,cspSettings:void 0},e),this._keyToClassName=this._config.classNameCache||{}}return e.getInstance=function(){var t;if(!(et=it.__stylesheet__)||et._lastStyleElement&&et._lastStyleElement.ownerDocument!==document){var n=(null===(t=it)||void 0===t?void 0:t.FabricConfig)||{};et=it.__stylesheet__=new e(n.mergeStyles)}return et},e.prototype.setConfig=function(e){this._config=Ze(Ze({},this._config),e)},e.prototype.onReset=function(e){this._onResetCallbacks.push(e)},e.prototype.getClassName=function(e){var t=this._config.namespace;return(t?t+"-":"")+(e||this._config.defaultPrefix)+"-"+this._counter++},e.prototype.cacheClassName=function(e,t,n,o){this._keyToClassName[t]=e,this._classNameToArgs[e]={args:n,rules:o}},e.prototype.classNameFromKey=function(e){return this._keyToClassName[e]},e.prototype.getClassNameCache=function(){return this._keyToClassName},e.prototype.argsFromClassName=function(e){var t=this._classNameToArgs[e];return t&&t.args},e.prototype.insertedRulesFromClassName=function(e){var t=this._classNameToArgs[e];return t&&t.rules},e.prototype.insertRule=function(e,t){var n=this._config.injectionMode!==tt?this._getStyleElement():void 0;if(t&&this._preservedRules.push(e),n)switch(this._config.injectionMode){case nt:var o=n.sheet;try{o.insertRule(e,o.cssRules.length)}catch(e){}break;case ot:n.appendChild(document.createTextNode(e))}else this._rules.push(e);this._config.onInsertRule&&this._config.onInsertRule(e)},e.prototype.getRules=function(e){return(e?this._preservedRules.join(""):"")+this._rules.join("")+this._rulesToInsert.join("")},e.prototype.reset=function(){this._rules=[],this._rulesToInsert=[],this._counter=0,this._classNameToArgs={},this._keyToClassName={},this._onResetCallbacks.forEach((function(e){return e()}))},e.prototype.resetKeys=function(){this._keyToClassName={}},e.prototype._getStyleElement=function(){var e=this;return this._styleElement||"undefined"==typeof document||(this._styleElement=this._createStyleElement(),rt||window.requestAnimationFrame((function(){e._styleElement=void 0}))),this._styleElement},e.prototype._createStyleElement=function(){var e=document.head,t=document.createElement("style");t.setAttribute("data-merge-styles","true");var n=this._config.cspSettings;if(n&&n.nonce&&t.setAttribute("nonce",n.nonce),this._lastStyleElement)e.insertBefore(t,this._lastStyleElement.nextElementSibling);else{var o=this._findPlaceholderStyleTag();o?e.insertBefore(t,o.nextElementSibling):e.insertBefore(t,e.childNodes[0])}return this._lastStyleElement=t,t},e.prototype._findPlaceholderStyleTag=function(){var e=document.head;return e?e.querySelector("style[data-merge-styles]"):null},e}();function lt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=[],o=[],r=st.getInstance();function i(e){for(var t=0,a=e;t<a.length;t++){var s=a[t];if(s)if("string"==typeof s)if(s.indexOf(" ")>=0)i(s.split(" "));else{var l=r.argsFromClassName(s);l?i(l):-1===n.indexOf(s)&&n.push(s)}else Array.isArray(s)?i(s):"object"==typeof s&&o.push(s)}}return i(e),{classes:n,objects:o}}function ut(e){at!==e&&(at=e)}function ct(){return void 0===at&&(at="undefined"!=typeof document&&!!document.documentElement&&"rtl"===document.documentElement.getAttribute("dir")),at}function dt(){return{rtl:ct()}}at=ct();var pt,ft={};function ht(e,t){var n=e[t];"-"!==n.charAt(0)&&(e[t]=ft[n]=ft[n]||n.replace(/([A-Z])/g,"-$1").toLowerCase())}var mt={"user-select":1};function gt(e,t){var n=function(){if(!pt){var e="undefined"!=typeof document?document:void 0,t="undefined"!=typeof navigator?navigator:void 0,n=t?t.userAgent.toLowerCase():void 0;pt=e?{isWebkit:!(!e||!("WebkitAppearance"in e.documentElement.style)),isMoz:!!(n&&n.indexOf("firefox")>-1),isOpera:!!(n&&n.indexOf("opera")>-1),isMs:!(!t||!/rv:11.0/i.test(t.userAgent)&&!/Edge\/\d./i.test(navigator.userAgent))}:{isWebkit:!0,isMoz:!0,isOpera:!0,isMs:!0}}return pt}(),o=e[t];if(mt[o]){var r=e[t+1];mt[o]&&(n.isWebkit&&e.push("-webkit-"+o,r),n.isMoz&&e.push("-moz-"+o,r),n.isMs&&e.push("-ms-"+o,r),n.isOpera&&e.push("-o-"+o,r))}}var vt,yt=["column-count","font-weight","flex","flex-grow","flex-shrink","fill-opacity","opacity","order","z-index","zoom"];function bt(e,t){var n=e[t],o=e[t+1];if("number"==typeof o){var r=yt.indexOf(n)>-1,i=n.indexOf("--")>-1,a=r||i?"":"px";e[t+1]=""+o+a}}var _t="left",Ct="right",St=((vt={}).left=Ct,vt.right=_t,vt),kt={"w-resize":"e-resize","sw-resize":"se-resize","nw-resize":"ne-resize"};function xt(e,t,n){if(e.rtl){var o=t[n];if(!o)return;var r=t[n+1];if("string"==typeof r&&r.indexOf("@noflip")>=0)t[n+1]=r.replace(/\s*(?:\/\*\s*)?\@noflip\b(?:\s*\*\/)?\s*?/g,"");else if(o.indexOf(_t)>=0)t[n]=o.replace(_t,Ct);else if(o.indexOf(Ct)>=0)t[n]=o.replace(Ct,_t);else if(String(r).indexOf(_t)>=0)t[n+1]=r.replace(_t,Ct);else if(String(r).indexOf(Ct)>=0)t[n+1]=r.replace(Ct,_t);else if(St[o])t[n]=St[o];else if(kt[r])t[n+1]=kt[r];else switch(o){case"margin":case"padding":t[n+1]=function(e){if("string"==typeof e){var t=e.split(" ");if(4===t.length)return t[0]+" "+t[3]+" "+t[2]+" "+t[1]}return e}(r);break;case"box-shadow":t[n+1]=function(e,t){var n=e.split(" "),o=parseInt(n[t],10);return n[0]=n[0].replace(String(o),String(-1*o)),n.join(" ")}(r,0)}}}function wt(e){var t=e&&e["&"];return t?t.displayName:void 0}var Et=/\:global\((.+?)\)/g;function It(e,t){return e.indexOf(":global(")>=0?e.replace(Et,"$1"):0===e.indexOf(":")?t+e:e.indexOf("&")<0?t+" "+e:e}function Tt(e,t,n,o){void 0===t&&(t={__order:[]}),0===n.indexOf("@")?Dt([o],t,n=n+"{"+e):n.indexOf(",")>-1?function(e){if(!Et.test(e))return e;for(var t=[],n=/\:global\((.+?)\)/g,o=null;o=n.exec(e);)o[1].indexOf(",")>-1&&t.push([o.index,o.index+o[0].length,o[1].split(",").map((function(e){return":global("+e.trim()+")"})).join(", ")]);return t.reverse().reduce((function(e,t){var n=t[0],o=t[1],r=t[2];return e.slice(0,n)+r+e.slice(o)}),e)}(n).split(",").map((function(e){return e.trim()})).forEach((function(n){return Dt([o],t,It(n,e))})):Dt([o],t,It(n,e))}function Dt(e,t,n){void 0===t&&(t={__order:[]}),void 0===n&&(n="&");var o=st.getInstance(),r=t[n];r||(r={},t[n]=r,t.__order.push(n));for(var i=0,a=e;i<a.length;i++){var s=a[i];if("string"==typeof s){var l=o.argsFromClassName(s);l&&Dt(l,t,n)}else if(Array.isArray(s))Dt(s,t,n);else for(var u in s)if(s.hasOwnProperty(u)){var c=s[u];if("selectors"===u){var d=s.selectors;for(var p in d)d.hasOwnProperty(p)&&Tt(n,t,p,d[p])}else"object"==typeof c?null!==c&&Tt(n,t,u,c):void 0!==c&&("margin"===u||"padding"===u?Pt(r,u,c):r[u]=c)}}return t}function Pt(e,t,n){var o="string"==typeof n?n.split(" "):[n];e[t+"Top"]=o[0],e[t+"Right"]=o[1]||o[0],e[t+"Bottom"]=o[2]||o[0],e[t+"Left"]=o[3]||o[1]||o[0]}function Mt(e,t){for(var n=[e.rtl?"rtl":"ltr"],o=!1,r=0,i=t.__order;r<i.length;r++){var a=i[r];n.push(a);var s=t[a];for(var l in s)s.hasOwnProperty(l)&&void 0!==s[l]&&(o=!0,n.push(l,s[l]))}return o?n.join(""):void 0}function Rt(e,t){return t<=0?"":1===t?e:e+Rt(e,t-1)}function Ft(e,t){if(!t)return"";var n=[];for(var o in t)t.hasOwnProperty(o)&&"displayName"!==o&&void 0!==t[o]&&n.push(o,t[o]);for(var r=0;r<n.length;r+=2)ht(n,r),bt(n,r),xt(e,n,r),gt(n,r);for(r=1;r<n.length;r+=4)n.splice(r,1,":",n[r],";");return n.join("")}function Nt(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var o=Dt(t),r=Mt(e,o);if(r){var i=st.getInstance(),a={className:i.classNameFromKey(r),key:r,args:t};if(!a.className){a.className=i.getClassName(wt(o));for(var s=[],l=0,u=o.__order;l<u.length;l++){var c=u[l];s.push(c,Ft(e,o[c]))}a.rulesToInsert=s}return a}}function At(e,t){void 0===t&&(t=1);var n=st.getInstance(),o=e.className,r=e.key,i=e.args,a=e.rulesToInsert;if(a){for(var s=0;s<a.length;s+=2){var l=a[s+1];if(l){var u=a[s],c=(u=u.replace(/&/g,Rt("."+e.className,t)))+"{"+l+"}"+(0===u.indexOf("@")?"}":"");n.insertRule(c)}}n.cacheClassName(o,r,i,a)}}function Lt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Bt(e,dt())}function Bt(e,t){var n=lt(e instanceof Array?e:[e]),o=n.classes,r=n.objects;return r.length&&o.push(function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var o=Nt.apply(void 0,Je([e],t));return o?(At(o,e.specificityMultiplier),o.className):""}(t||{},r)),o.join(" ")}var Ot=!1,Ht=0,zt={empty:!0},Wt={},Ut="undefined"==typeof WeakMap?null:WeakMap;function Vt(){Ht++}function Kt(e,t,n){if(void 0===t&&(t=100),void 0===n&&(n=!1),!Ut)return e;if(!Ot){var o=st.getInstance();o&&o.onReset&&st.getInstance().onReset(Vt),Ot=!0}var r,i=0,a=Ht;return function(){for(var o=[],s=0;s<arguments.length;s++)o[s]=arguments[s];var l=r;(void 0===r||a!==Ht||t>0&&i>t)&&(r=qt(),i=0,a=Ht),l=r;for(var u=0;u<o.length;u++){var c=jt(o[u]);l.map.has(c)||l.map.set(c,qt()),l=l.map.get(c)}return l.hasOwnProperty("value")||(l.value=e.apply(void 0,o),i++),!n||null!==l.value&&void 0!==l.value||(l.value=e.apply(void 0,o)),l.value}}function Gt(e){if(!Ut)return e;var t=new Ut;return function(n){if(!n||"function"!=typeof n&&"object"!=typeof n)return e(n);if(t.has(n))return t.get(n);var o=e(n);return t.set(n,o),o}}function jt(e){return e?"object"==typeof e||"function"==typeof e?e:(Wt[e]||(Wt[e]={val:e}),Wt[e]):zt}function qt(){return{map:Ut?new Ut:null}}var Qt=9,$t=13,Zt=18,Xt=27,Yt=32,Jt=33,en=34,tn=35,nn=36,on=37,rn=38,an=39,sn=40,ln=65,un=!1;function cn(e){if(!un&&"undefined"!=typeof document){var t=e;return t&&t.ownerDocument?t.ownerDocument:document}}var dn=void 0;try{dn=window}catch(e){}function pn(e){if(!un&&void 0!==dn){var t=e;return t&&t.ownerDocument&&t.ownerDocument.defaultView?t.ownerDocument.defaultView:dn}}function fn(e){var t=null;try{var n=pn();t=n?n.sessionStorage.getItem(e):null}catch(e){}return t}var hn,mn="isRTL";function gn(e){if(void 0===e&&(e={}),void 0!==e.rtl)return e.rtl;if(void 0===hn){var t=fn(mn);null!==t&&function(e,t){void 0===t&&(t=!1);var n=cn();n&&n.documentElement.setAttribute("dir",e?"rtl":"ltr");t&&function(e,t){var n;try{null===(n=pn())||void 0===n||n.sessionStorage.setItem(e,t)}catch(e){}}(mn,e?"1":"0");ut(hn=e)}(hn="1"===t);var n=cn();void 0===hn&&n&&ut(hn="rtl"===(n.body&&n.body.getAttribute("dir")||n.documentElement.getAttribute("dir")))}return!!hn}function vn(e,t){return void 0===t&&(t={}),gn(t)&&(e===on?e=an:e===an&&(e=on)),e}var yn=Ze;function bn(n,o){for(var r=[],i=2;i<arguments.length;i++)r[i-2]=arguments[i];var a=n;return a.isSlot?0===(r=e.Children.toArray(r)).length?a(o):a(Ze(Ze({},o),{children:r})):e.createElement.apply(t,Je([n,o],r))}function _n(t,n){void 0===n&&(n={});var o=n.defaultProp,r=void 0===o?"children":o;return function(n,o,i,a,s){if(e.isValidElement(o))return o;var l=function(e,t){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];for(var r={},i=[],a=0,s=n;a<s.length;a++){var l=s[a];i.push(l&&l.className),yn(r,l)}return r.className=Bt([e,i],{rtl:gn(t)}),r}(a,s,n,function(e,t){var n,o;"string"==typeof t||"number"==typeof t||"boolean"==typeof t?((n={})[e]=t,o=n):o=t;return o}(r,o));if(i){if(i.component){var u=i.component;return e.createElement(u,Ze({},l))}if(i.render)return i.render(l,t)}return e.createElement(t,Ze({},l))}}var Cn=Kt((function(e){return _n(e)}));function Sn(e,t){var n={},o=e,r=function(e){if(t.hasOwnProperty(e)){var r=function(n){for(var r=[],i=1;i<arguments.length;i++)r[i-1]=arguments[i];if(r.length>0)throw new Error("Any module using getSlots must use withSlots. Please see withSlots javadoc for more info.");return kn(t[e],n,o[e],o.slots&&o.slots[e],o._defaultStyles&&o._defaultStyles[e],o.theme)};r.isSlot=!0,n[e]=r}};for(var i in t)r(i);return n}function kn(e,t,n,o,r,i){return void 0!==e.create?e.create(t,n,o,r):Cn(e)(t,n,o,r,i)}function xn(e){var t=st.getInstance(),n=t.getClassName(),o=[];for(var r in e)e.hasOwnProperty(r)&&o.push(r,"{",Ft(dt(),e[r]),"}");var i=o.join("");return t.insertRule("@keyframes "+n+"{"+i+"}",!0),t.cacheClassName(n,i,[],["keyframes",i]),n}var wn="cubic-bezier(.1,.9,.2,1)",En="cubic-bezier(.1,.25,.75,.9)",In="0.167s",Tn="0.267s",Dn="0.367s",Pn="0.467s",Mn=xn({from:{opacity:0},to:{opacity:1}}),Rn=xn({from:{opacity:1},to:{opacity:0,visibility:"hidden"}}),Fn=go(-10),Nn=go(-20),An=go(-40),Ln=go(-400),Bn=go(10),On=go(20),Hn=go(40),zn=go(400),Wn=vo(10),Un=vo(20),Vn=vo(-10),Kn=vo(-20),Gn=yo(10),jn=yo(20),qn=yo(40),Qn=yo(400),$n=yo(-10),Zn=yo(-20),Xn=yo(-40),Yn=yo(-400),Jn=bo(-10),eo=bo(-20),to=bo(10),no=bo(20),oo=xn({from:{transform:"scale3d(.98,.98,1)"},to:{transform:"scale3d(1,1,1)"}}),ro=xn({from:{transform:"scale3d(1,1,1)"},to:{transform:"scale3d(.98,.98,1)"}}),io=xn({from:{transform:"scale3d(1.03,1.03,1)"},to:{transform:"scale3d(1,1,1)"}}),ao=xn({from:{transform:"scale3d(1,1,1)"},to:{transform:"scale3d(1.03,1.03,1)"}}),so=xn({from:{transform:"rotateZ(0deg)"},to:{transform:"rotateZ(90deg)"}}),lo=xn({from:{transform:"rotateZ(0deg)"},to:{transform:"rotateZ(-90deg)"}}),uo=In,co=Tn,po=Dn,fo=Pn,ho={slideRightIn10:mo(Mn+","+Fn,Dn,wn),slideRightIn20:mo(Mn+","+Nn,Dn,wn),slideRightIn40:mo(Mn+","+An,Dn,wn),slideRightIn400:mo(Mn+","+Ln,Dn,wn),slideLeftIn10:mo(Mn+","+Bn,Dn,wn),slideLeftIn20:mo(Mn+","+On,Dn,wn),slideLeftIn40:mo(Mn+","+Hn,Dn,wn),slideLeftIn400:mo(Mn+","+zn,Dn,wn),slideUpIn10:mo(Mn+","+Wn,Dn,wn),slideUpIn20:mo(Mn+","+Un,Dn,wn),slideDownIn10:mo(Mn+","+Vn,Dn,wn),slideDownIn20:mo(Mn+","+Kn,Dn,wn),slideRightOut10:mo(Rn+","+Gn,Dn,wn),slideRightOut20:mo(Rn+","+jn,Dn,wn),slideRightOut40:mo(Rn+","+qn,Dn,wn),slideRightOut400:mo(Rn+","+Qn,Dn,wn),slideLeftOut10:mo(Rn+","+$n,Dn,wn),slideLeftOut20:mo(Rn+","+Zn,Dn,wn),slideLeftOut40:mo(Rn+","+Xn,Dn,wn),slideLeftOut400:mo(Rn+","+Yn,Dn,wn),slideUpOut10:mo(Rn+","+Jn,Dn,wn),slideUpOut20:mo(Rn+","+eo,Dn,wn),slideDownOut10:mo(Rn+","+to,Dn,wn),slideDownOut20:mo(Rn+","+no,Dn,wn),scaleUpIn100:mo(Mn+","+oo,Dn,wn),scaleDownIn100:mo(Mn+","+io,Dn,wn),scaleUpOut103:mo(Rn+","+ao,In,En),scaleDownOut98:mo(Rn+","+ro,In,En),fadeIn100:mo(Mn,In,En),fadeIn200:mo(Mn,Tn,En),fadeIn400:mo(Mn,Dn,En),fadeIn500:mo(Mn,Pn,En),fadeOut100:mo(Rn,In,En),fadeOut200:mo(Rn,Tn,En),fadeOut400:mo(Rn,Dn,En),fadeOut500:mo(Rn,Pn,En),rotate90deg:mo(so,"0.1s",En),rotateN90deg:mo(lo,"0.1s",En)};function mo(e,t,n){return{animationName:e,animationDuration:t,animationTimingFunction:n,animationFillMode:"both"}}function go(e){return xn({from:{transform:"translate3d("+e+"px,0,0)",pointerEvents:"none"},to:{transform:"translate3d(0,0,0)",pointerEvents:"auto"}})}function vo(e){return xn({from:{transform:"translate3d(0,"+e+"px,0)",pointerEvents:"none"},to:{transform:"translate3d(0,0,0)",pointerEvents:"auto"}})}function yo(e){return xn({from:{transform:"translate3d(0,0,0)"},to:{transform:"translate3d("+e+"px,0,0)"}})}function bo(e){return xn({from:{transform:"translate3d(0,0,0)"},to:{transform:"translate3d(0,"+e+"px,0)"}})}var _o,Co,So,ko,xo,wo=function(e){var t={},n=function(n){var o;e.hasOwnProperty(n)&&Object.defineProperty(t,n,{get:function(){return void 0===o&&(o=Lt(e[n]).toString()),o},enumerable:!0,configurable:!0})};for(var o in e)n(o);return t}(ho);!function(e){e.Arabic="Segoe UI Web (Arabic)",e.Cyrillic="Segoe UI Web (Cyrillic)",e.EastEuropean="Segoe UI Web (East European)",e.Greek="Segoe UI Web (Greek)",e.Hebrew="Segoe UI Web (Hebrew)",e.Thai="Leelawadee UI Web",e.Vietnamese="Segoe UI Web (Vietnamese)",e.WestEuropean="Segoe UI Web (West European)",e.Selawik="Selawik Web",e.Armenian="Segoe UI Web (Armenian)",e.Georgian="Segoe UI Web (Georgian)"}(_o||(_o={})),function(e){e.Arabic="'"+_o.Arabic+"'",e.ChineseSimplified="'Microsoft Yahei UI', Verdana, Simsun",e.ChineseTraditional="'Microsoft Jhenghei UI', Pmingliu",e.Cyrillic="'"+_o.Cyrillic+"'",e.EastEuropean="'"+_o.EastEuropean+"'",e.Greek="'"+_o.Greek+"'",e.Hebrew="'"+_o.Hebrew+"'",e.Hindi="'Nirmala UI'",e.Japanese="'Yu Gothic UI', 'Meiryo UI', Meiryo, 'MS Pgothic', Osaka",e.Korean="'Malgun Gothic', Gulim",e.Selawik="'"+_o.Selawik+"'",e.Thai="'Leelawadee UI Web', 'Kmer UI'",e.Vietnamese="'"+_o.Vietnamese+"'",e.WestEuropean="'"+_o.WestEuropean+"'",e.Armenian="'"+_o.Armenian+"'",e.Georgian="'"+_o.Georgian+"'"}(Co||(Co={})),function(e){e.size10="10px",e.size12="12px",e.size14="14px",e.size16="16px",e.size18="18px",e.size20="20px",e.size24="24px",e.size28="28px",e.size32="32px",e.size42="42px",e.size68="68px",e.mini="10px",e.xSmall="10px",e.small="12px",e.smallPlus="12px",e.medium="14px",e.mediumPlus="16px",e.icon="16px",e.large="18px",e.xLarge="20px",e.xLargePlus="24px",e.xxLarge="28px",e.xxLargePlus="32px",e.superLarge="42px",e.mega="68px"}(So||(So={})),function(e){e.light=100,e.semilight=300,e.regular=400,e.semibold=600,e.bold=700}(ko||(ko={})),function(e){e.xSmall="10px",e.small="12px",e.medium="16px",e.large="20px"}(xo||(xo={}));var Eo="@media screen and (-ms-high-contrast: active)";function Io(e,t){return"@media only screen and (min-width: "+e+"px) and (max-width: "+t+"px)"}function To(){var e;return(e={})["@media screen and (forced-colors: active)"]={forcedColorAdjust:"none"},e}var Do,Po="ms-Fabric--isFocusVisible",Mo="ms-Fabric--isFocusHidden";function Ro(e,t){var n=t?pn(t):pn();if(n){var o=n.document.body.classList;o.add(e?Po:Mo),o.remove(e?Mo:Po)}}function Fo(e,t,n,o,r,i,a){return No(e,"number"!=typeof t&&t?t:{inset:t,position:n,highContrastStyle:o,borderColor:r,outlineColor:i,isFocusedOnly:a})}function No(e,t){var n,o;void 0===t&&(t={});var r=t.inset,i=void 0===r?0:r,a=t.width,s=void 0===a?1:a,l=t.position,u=void 0===l?"relative":l,c=t.highContrastStyle,d=t.borderColor,p=void 0===d?e.palette.white:d,f=t.outlineColor,h=void 0===f?e.palette.neutralSecondary:f,m=t.isFocusedOnly;return{outline:"transparent",position:u,selectors:(n={"::-moz-focus-inner":{border:"0"}},n[".ms-Fabric--isFocusVisible &"+(void 0===m||m?":focus":"")+":after"]={content:'""',position:"absolute",left:i+1,top:i+1,bottom:i+1,right:i+1,border:s+"px solid "+p,outline:s+"px solid "+h,zIndex:Do.FocusStyle,selectors:(o={},o[Eo]=c,o)},n)}}!function(e){e.Nav=1,e.ScrollablePane=1,e.FocusStyle=1,e.Coachmark=1e3,e.Layer=1e6,e.KeytipLayer=1000001}(Do||(Do={}));var Ao=function(e,t,n,o){var r,i,a;void 0===n&&(n="border"),void 0===o&&(o=-1);var s="borderBottom"===n;return{borderColor:e,selectors:{":after":(r={pointerEvents:"none",content:"''",position:"absolute",left:s?0:o,top:o,bottom:o,right:s?0:o},r[n]="2px solid "+e,r.borderRadius=t,r.width="borderBottom"===n?"100%":void 0,r.selectors=(i={},i[Eo]=(a={},a["border"===n?"borderColor":"borderBottomColor"]="Highlight",a),i),r)}}},Lo={position:"absolute",width:1,height:1,margin:-1,padding:0,border:0,overflow:"hidden"},Bo=Kt((function(e,t){var n=st.getInstance();return t?Object.keys(e).reduce((function(t,o){return t[o]=n.getClassName(e[o]),t}),{}):e}));function Oo(e,t,n){return Bo(e,void 0!==n?n:t.disableGlobalClassNames)}var Ho=0,zo=function(){function e(){}return e.getValue=function(e,t){var n=Wo();return void 0===n[e]&&(n[e]="function"==typeof t?t():t),n[e]},e.setValue=function(e,t){var n=Wo(),o=n.__callbacks__,r=n[e];if(t!==r){n[e]=t;var i={oldValue:r,value:t,key:e};for(var a in o)o.hasOwnProperty(a)&&o[a](i)}return t},e.addChangeListener=function(e){var t=e.__id__,n=Uo();t||(t=e.__id__=String(Ho++)),n[t]=e},e.removeChangeListener=function(e){delete Uo()[e.__id__]},e}();function Wo(){var e,t=pn()||{};return t.__globalSettings__||(t.__globalSettings__=((e={}).__callbacks__={},e)),t.__globalSettings__}function Uo(){return Wo().__callbacks__}var Vo={settings:{},scopedSettings:{},inCustomizerContext:!1},Ko=zo.getValue("customizations",{settings:{},scopedSettings:{},inCustomizerContext:!1}),Go=[],jo=function(){function e(){}return e.reset=function(){Ko.settings={},Ko.scopedSettings={}},e.applySettings=function(t){Ko.settings=Ze(Ze({},Ko.settings),t),e._raiseChange()},e.applyScopedSettings=function(t,n){Ko.scopedSettings[t]=Ze(Ze({},Ko.scopedSettings[t]),n),e._raiseChange()},e.getSettings=function(e,t,n){void 0===n&&(n=Vo);for(var o={},r=t&&n.scopedSettings[t]||{},i=t&&Ko.scopedSettings[t]||{},a=0,s=e;a<s.length;a++){var l=s[a];o[l]=r[l]||n.settings[l]||i[l]||Ko.settings[l]}return o},e.applyBatchedUpdates=function(t,n){e._suppressUpdates=!0;try{t()}catch(e){}e._suppressUpdates=!1,n||e._raiseChange()},e.observe=function(e){Go.push(e)},e.unobserve=function(e){Go=Go.filter((function(t){return t!==e}))},e._raiseChange=function(){e._suppressUpdates||Go.forEach((function(e){return e()}))},e}(),qo=function(){return(qo=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},Qo="undefined"==typeof window?r.g:window;Qo&&Qo.CSPSettings&&Qo.CSPSettings.nonce,function(){var e=Qo.__themeState__||{theme:void 0,lastStyleElement:void 0,registeredStyles:[]};e.runState||(e=qo(qo({},e),{perf:{count:0,duration:0},runState:{flushTimer:0,mode:0,buffer:[]}}));e.registeredThemableStyles||(e=qo(qo({},e),{registeredThemableStyles:[]}));Qo.__themeState__=e}();var $o,Zo={themeDarker:"#004578",themeDark:"#005a9e",themeDarkAlt:"#106ebe",themePrimary:"#0078d4",themeSecondary:"#2b88d8",themeTertiary:"#71afe5",themeLight:"#c7e0f4",themeLighter:"#deecf9",themeLighterAlt:"#eff6fc",black:"#000000",blackTranslucent40:"rgba(0,0,0,.4)",neutralDark:"#201f1e",neutralPrimary:"#323130",neutralPrimaryAlt:"#3b3a39",neutralSecondary:"#605e5c",neutralSecondaryAlt:"#8a8886",neutralTertiary:"#a19f9d",neutralTertiaryAlt:"#c8c6c4",neutralQuaternary:"#d2d0ce",neutralQuaternaryAlt:"#e1dfdd",neutralLight:"#edebe9",neutralLighter:"#f3f2f1",neutralLighterAlt:"#faf9f8",accent:"#0078d4",white:"#ffffff",whiteTranslucent40:"rgba(255,255,255,.4)",yellowDark:"#d29200",yellow:"#ffb900",yellowLight:"#fff100",orange:"#d83b01",orangeLight:"#ea4300",orangeLighter:"#ff8c00",redDark:"#a4262c",red:"#e81123",magentaDark:"#5c005c",magenta:"#b4009e",magentaLight:"#e3008c",purpleDark:"#32145a",purple:"#5c2d91",purpleLight:"#b4a0ff",blueDark:"#002050",blueMid:"#00188f",blue:"#0078d4",blueLight:"#00bcf2",tealDark:"#004b50",teal:"#008272",tealLight:"#00b294",greenDark:"#004b1c",green:"#107c10",greenLight:"#bad80a"};!function(e){e.depth0="0 0 0 0 transparent",e.depth4="0 1.6px 3.6px 0 rgba(0, 0, 0, 0.132), 0 0.3px 0.9px 0 rgba(0, 0, 0, 0.108)",e.depth8="0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132), 0 0.6px 1.8px 0 rgba(0, 0, 0, 0.108)",e.depth16="0 6.4px 14.4px 0 rgba(0, 0, 0, 0.132), 0 1.2px 3.6px 0 rgba(0, 0, 0, 0.108)",e.depth64="0 25.6px 57.6px 0 rgba(0, 0, 0, 0.22), 0 4.8px 14.4px 0 rgba(0, 0, 0, 0.18)"}($o||($o={}));var Xo={elevation4:$o.depth4,elevation8:$o.depth8,elevation16:$o.depth16,elevation64:$o.depth64,roundedCorner2:"2px",roundedCorner4:"4px",roundedCorner6:"6px"};function Yo(e){st.getInstance().insertRule("@font-face{"+Ft(dt(),e)+"}",!0)}var Jo,er="'Segoe UI', '"+_o.WestEuropean+"'",tr={ar:Co.Arabic,bg:Co.Cyrillic,cs:Co.EastEuropean,el:Co.Greek,et:Co.EastEuropean,he:Co.Hebrew,hi:Co.Hindi,hr:Co.EastEuropean,hu:Co.EastEuropean,ja:Co.Japanese,kk:Co.EastEuropean,ko:Co.Korean,lt:Co.EastEuropean,lv:Co.EastEuropean,pl:Co.EastEuropean,ru:Co.Cyrillic,sk:Co.EastEuropean,"sr-latn":Co.EastEuropean,th:Co.Thai,tr:Co.EastEuropean,uk:Co.Cyrillic,vi:Co.Vietnamese,"zh-hans":Co.ChineseSimplified,"zh-hant":Co.ChineseTraditional,hy:Co.Armenian,ka:Co.Georgian};function nr(e,t,n){return{fontFamily:n,MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontSize:e,fontWeight:t}}var or="language";var rr,ir,ar=(rr=function(e){if(void 0===e&&(e="localStorage"),void 0===Jo){var t=cn(),n="localStorage"===e?function(e){var t=null;try{var n=pn();t=n?n.localStorage.getItem(e):null}catch(e){}return t}(or):"sessionStorage"===e?fn(or):void 0;n&&(Jo=n),void 0===Jo&&t&&(Jo=t.documentElement.getAttribute("lang")),void 0===Jo&&(Jo="en")}return Jo}("sessionStorage"),ir=function(e){for(var t in tr)if(tr.hasOwnProperty(t)&&e&&0===t.indexOf(e))return tr[t];return er}(rr)+", 'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif",{tiny:nr(So.mini,ko.regular,ir),xSmall:nr(So.xSmall,ko.regular,ir),small:nr(So.small,ko.regular,ir),smallPlus:nr(So.smallPlus,ko.regular,ir),medium:nr(So.medium,ko.regular,ir),mediumPlus:nr(So.mediumPlus,ko.regular,ir),large:nr(So.large,ko.regular,ir),xLarge:nr(So.xLarge,ko.semibold,ir),xLargePlus:nr(So.xLargePlus,ko.semibold,ir),xxLarge:nr(So.xxLarge,ko.semibold,ir),xxLargePlus:nr(So.xxLargePlus,ko.semibold,ir),superLarge:nr(So.superLarge,ko.semibold,ir),mega:nr(So.mega,ko.semibold,ir)});function sr(e,t,n,o){Yo({fontFamily:e="'"+e+"'",src:(void 0!==o?"local('"+o+"'),":"")+"url('"+t+".woff2') format('woff2'),url('"+t+".woff') format('woff')",fontWeight:n,fontStyle:"normal",fontDisplay:"swap"})}function lr(e,t,n,o,r){void 0===o&&(o="segoeui");var i=e+"/"+n+"/"+o;sr(t,i+"-light",ko.light,r&&r+" Light"),sr(t,i+"-semilight",ko.semilight,r&&r+" SemiLight"),sr(t,i+"-regular",ko.regular,r),sr(t,i+"-semibold",ko.semibold,r&&r+" SemiBold"),sr(t,i+"-bold",ko.bold,r&&r+" Bold")}function ur(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var o=0,r=t;o<r.length;o++){var i=r[o];cr(e||{},i)}return e}function cr(e,t,n){for(var o in void 0===n&&(n=[]),n.push(t),t)if(t.hasOwnProperty(o)&&"__proto__"!==o&&"constructor"!==o&&"prototype"!==o){var r=t[o];if("object"==typeof r&&null!==r){var i=n.indexOf(r)>-1;e[o]=i?r:cr(e[o]||{},r,n)}else e[o]=r}return n.pop(),e}function dr(e,t,n,o,r){return void 0===r&&(r=!1),function(e,t){var n="";!0===t&&(n=" /* @deprecated */");return e.listTextColor=e.listText+n,e.menuItemBackgroundChecked+=n,e.warningHighlight+=n,e.warningText=e.messageText+n,e.successText+=n,e}(pr(e,t,Ze({primaryButtonBorder:"transparent",errorText:o?"#F1707B":"#a4262c",messageText:o?"#F3F2F1":"#323130",messageLink:o?"#6CB8F6":"#005A9E",messageLinkHovered:o?"#82C7FF":"#004578",infoIcon:o?"#C8C6C4":"#605e5c",errorIcon:o?"#F1707B":"#A80000",blockingIcon:o?"#442726":"#FDE7E9",warningIcon:o?"#C8C6C4":"#797775",severeWarningIcon:o?"#FCE100":"#D83B01",successIcon:o?"#92C353":"#107C10",infoBackground:o?"#323130":"#f3f2f1",errorBackground:o?"#442726":"#FDE7E9",blockingBackground:o?"#442726":"#FDE7E9",warningBackground:o?"#433519":"#FFF4CE",severeWarningBackground:o?"#4F2A0F":"#FED9CC",successBackground:o?"#393D1B":"#DFF6DD",warningHighlight:o?"#fff100":"#ffb900",successText:o?"#92c353":"#107C10"},n),o),r)}function pr(e,t,n,o,r){var i,a,s;void 0===r&&(r=!1);var l={},u=e||{},c=u.white,d=u.black,p=u.themePrimary,f=u.themeDark,h=u.themeDarker,m=u.themeDarkAlt,g=u.themeLighter,v=u.neutralLight,y=u.neutralLighter,b=u.neutralDark,_=u.neutralQuaternary,C=u.neutralQuaternaryAlt,S=u.neutralPrimary,k=u.neutralSecondary,x=u.neutralSecondaryAlt,w=u.neutralTertiary,E=u.neutralTertiaryAlt,I=u.neutralLighterAlt,T=u.accent;return c&&(l.bodyBackground=c,l.bodyFrameBackground=c,l.accentButtonText=c,l.buttonBackground=c,l.primaryButtonText=c,l.primaryButtonTextHovered=c,l.primaryButtonTextPressed=c,l.inputBackground=c,l.inputForegroundChecked=c,l.listBackground=c,l.menuBackground=c,l.cardStandoutBackground=c),d&&(l.bodyTextChecked=d,l.buttonTextCheckedHovered=d),p&&(l.link=p,l.primaryButtonBackground=p,l.inputBackgroundChecked=p,l.inputIcon=p,l.inputFocusBorderAlt=p,l.menuIcon=p,l.menuHeader=p,l.accentButtonBackground=p),f&&(l.primaryButtonBackgroundPressed=f,l.inputBackgroundCheckedHovered=f,l.inputIconHovered=f),h&&(l.linkHovered=h),m&&(l.primaryButtonBackgroundHovered=m),g&&(l.inputPlaceholderBackgroundChecked=g),v&&(l.bodyBackgroundChecked=v,l.bodyFrameDivider=v,l.bodyDivider=v,l.variantBorder=v,l.buttonBackgroundCheckedHovered=v,l.buttonBackgroundPressed=v,l.listItemBackgroundChecked=v,l.listHeaderBackgroundPressed=v,l.menuItemBackgroundPressed=v,l.menuItemBackgroundChecked=v),y&&(l.bodyBackgroundHovered=y,l.buttonBackgroundHovered=y,l.buttonBackgroundDisabled=y,l.buttonBorderDisabled=y,l.primaryButtonBackgroundDisabled=y,l.disabledBackground=y,l.listItemBackgroundHovered=y,l.listHeaderBackgroundHovered=y,l.menuItemBackgroundHovered=y),_&&(l.primaryButtonTextDisabled=_,l.disabledSubtext=_),C&&(l.listItemBackgroundCheckedHovered=C),w&&(l.disabledBodyText=w,l.variantBorderHovered=(null===(i=n)||void 0===i?void 0:i.variantBorderHovered)||w,l.buttonTextDisabled=w,l.inputIconDisabled=w,l.disabledText=w),S&&(l.bodyText=S,l.actionLink=S,l.buttonText=S,l.inputBorderHovered=S,l.inputText=S,l.listText=S,l.menuItemText=S),I&&(l.bodyStandoutBackground=I,l.defaultStateBackground=I),b&&(l.actionLinkHovered=b,l.buttonTextHovered=b,l.buttonTextChecked=b,l.buttonTextPressed=b,l.inputTextHovered=b,l.menuItemTextHovered=b),k&&(l.bodySubtext=k,l.focusBorder=k,l.inputBorder=k,l.smallInputBorder=k,l.inputPlaceholderText=k),x&&(l.buttonBorder=x),E&&(l.disabledBodySubtext=E,l.disabledBorder=E,l.buttonBackgroundChecked=E,l.menuDivider=E),T&&(l.accentButtonBackground=T),(null===(a=t)||void 0===a?void 0:a.elevation4)&&(l.cardShadow=t.elevation4),!o&&(null===(s=t)||void 0===s?void 0:s.elevation8)?l.cardShadowHovered=t.elevation8:l.variantBorderHovered&&(l.cardShadowHovered="0 0 1px "+l.variantBorderHovered),l=Ze(Ze({},l),n)}!function(e){if(e){var t=e+"/fonts";lr(t,_o.Thai,"leelawadeeui-thai","leelawadeeui"),lr(t,_o.Arabic,"segoeui-arabic"),lr(t,_o.Cyrillic,"segoeui-cyrillic"),lr(t,_o.EastEuropean,"segoeui-easteuropean"),lr(t,_o.Greek,"segoeui-greek"),lr(t,_o.Hebrew,"segoeui-hebrew"),lr(t,_o.Vietnamese,"segoeui-vietnamese"),lr(t,_o.WestEuropean,"segoeui-westeuropean","segoeui","Segoe UI"),lr(t,Co.Selawik,"selawik","selawik"),lr(t,_o.Armenian,"segoeui-armenian"),lr(t,_o.Georgian,"segoeui-georgian"),sr("Leelawadee UI Web",t+"/leelawadeeui-thai/leelawadeeui-semilight",ko.light),sr("Leelawadee UI Web",t+"/leelawadeeui-thai/leelawadeeui-bold",ko.semibold)}}(function(){var e,t,n;return null!=(n=null===(t=null===(e=pn())||void 0===e?void 0:e.FabricConfig)||void 0===t?void 0:t.fontBaseUrl)?n:"https://static2.sharepointonline.com/files/fabric/assets"}());var fr={s2:"4px",s1:"8px",m:"16px",l1:"20px",l2:"32px"};function hr(e,t){return void 0===e&&(e={}),void 0===t&&(t=!1),function(e,t){var n,o,r,i;void 0===t&&(t={});var a=ur({},e,t,{semanticColors:pr(t.palette,t.effects,t.semanticColors,void 0===t.isInverted?e.isInverted:t.isInverted)});if((null===(n=t.palette)||void 0===n?void 0:n.themePrimary)&&!(null===(o=t.palette)||void 0===o?void 0:o.accent)&&(a.palette.accent=t.palette.themePrimary),t.defaultFontStyle)for(var s=0,l=Object.keys(a.fonts);s<l.length;s++){var u=l[s];a.fonts[u]=ur(a.fonts[u],t.defaultFontStyle,null===(i=null===(r=t)||void 0===r?void 0:r.fonts)||void 0===i?void 0:i[u])}return t.stylesheets&&(a.stylesheets=(e.stylesheets||[]).concat(t.stylesheets)),a}({palette:Zo,effects:Xo,fonts:ar,spacing:fr,isInverted:!1,disableGlobalClassNames:!1,semanticColors:dr(Zo,Xo,void 0,!1,t),rtl:void 0},e)}var mr=hr({}),gr="theme";function vr(){var e,t,n;if(!jo.getSettings([gr]).theme){var o=pn();(null===(n=null===(t=o)||void 0===t?void 0:t.FabricConfig)||void 0===n?void 0:n.theme)&&(mr=hr(o.FabricConfig.theme)),jo.applySettings(((e={}).theme=mr,e))}}vr();var yr={boxShadow:"none",margin:0,padding:0,boxSizing:"border-box"};function br(e){return{selectors:{"::placeholder":e,":-ms-input-placeholder":e,"::-ms-input-placeholder":e}}}function _r(e){console&&console.warn&&console.warn(e)}var Cr=zo.getValue("icons",{__options:{disableWarnings:!1,warnOnMissingIcons:!0},__remapped:{}}),Sr=st.getInstance();Sr&&Sr.onReset&&Sr.onReset((function(){for(var e in Cr)Cr.hasOwnProperty(e)&&Cr[e].subset&&(Cr[e].subset.className=void 0)}));var kr=function(e){return e.toLowerCase()};function xr(e,t){var n=Ze(Ze({},e),{isRegistered:!1,className:void 0}),o=e.icons;for(var r in t=t?Ze(Ze({},Cr.__options),t):Cr.__options,o)if(o.hasOwnProperty(r)){var i=o[r],a=kr(r);Cr[a]?Tr(r):Cr[a]={code:i,subset:n}}}function wr(e,t){Cr.__remapped[kr(e)]=kr(t)}var Er=[],Ir=void 0;function Tr(e){var t=Cr.__options;t.disableWarnings||(Er.push(e),void 0===Ir&&(Ir=setTimeout((function(){_r("Some icons were re-registered. Applications should only call registerIcons for any given icon once. Redefining what an icon is may have unintended consequences. Duplicates include: \n"+Er.slice(0,10).join(", ")+(Er.length>10?" (+ "+(Er.length-10)+" more)":"")),Ir=void 0,Er=[]}),2e3)))}function Dr(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(e&&1===e.length&&e[0]&&!e[0].subComponentStyles)return e[0];for(var n={},o={},r=0,i=e;r<i.length;r++){var a=i[r];if(a)for(var s in a)if(a.hasOwnProperty(s)){if("subComponentStyles"===s&&void 0!==a.subComponentStyles){var l=a.subComponentStyles;for(var u in l)l.hasOwnProperty(u)&&(o.hasOwnProperty(u)?o[u].push(l[u]):o[u]=[l[u]]);continue}var c=n[s],d=a[s];n[s]=void 0===c?d:Je(Array.isArray(c)?c:[c],Array.isArray(d)?d:[d])}}if(Object.keys(o).length>0){n.subComponentStyles={};var p=n.subComponentStyles,f=function(e){if(o.hasOwnProperty(e)){var t=o[e];p[e]=function(e){return Dr.apply(void 0,t.map((function(t){return"function"==typeof t?t(e):t})))}}};for(var u in o)f(u)}return n}function Pr(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var o=[],r=0,i=t;r<i.length;r++){var a=i[r];a&&o.push("function"==typeof a?a(e):a)}return 1===o.length?o[0]:o.length?Dr.apply(void 0,o):{}}function Mr(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Rr(e,dt())}function Rr(e,t){var n,o,r={subComponentStyles:{}};if(!e[0]&&e.length<=1)return{subComponentStyles:{}};var i=Dr.apply(void 0,e),a=[];for(var s in i)if(i.hasOwnProperty(s)){if("subComponentStyles"===s){r.subComponentStyles=i.subComponentStyles||{};continue}var l=lt(i[s]),u=l.classes,c=l.objects;if(null===(n=c)||void 0===n?void 0:n.length)(f=Nt(t||{},{displayName:s},c))&&(a.push(f),r[s]=u.concat([f.className]).join(" "));else r[s]=u.join(" ")}for(var d=0,p=a;d<p.length;d++){var f;(f=p[d])&&At(f,null===(o=t)||void 0===o?void 0:o.specificityMultiplier)}return r}var Fr={},Nr=void 0;try{Nr=window}catch(e){}function Ar(e,t){if(void 0!==Nr){var n=Nr.__packages__=Nr.__packages__||{};if(!n[e]||!Fr[e])Fr[e]=t,(n[e]=n[e]||[]).push(t)}}Ar("@uifabric/set-version","6.0.0"),Ar("@uifabric/styling","7.16.17"),vr();var Lr=e.createContext({customizations:{inCustomizerContext:!1,settings:{},scopedSettings:{}}});function Br(t,n){void 0===n&&(n={});var o=n.factoryOptions,r=(void 0===o?{}:o).defaultProp,i=function(o){var r=function(e,t,n){var o=["theme","styles","tokens"];return jo.getSettings(n||o,e,t.customizations)}(n.displayName,e.useContext(Lr),n.fields),i=n.state;i&&(o=Ze(Ze({},o),i(o)));var a=o.theme||r.theme,s=Or(o,a,n.tokens,r.tokens,o.tokens),l=function(e,t,n){for(var o=[],r=3;r<arguments.length;r++)o[r-3]=arguments[r];return Dr.apply(void 0,o.map((function(o){return"function"==typeof o?o(e,t,n):o})))}(o,a,s,n.styles,r.styles,o.styles),u=Ze(Ze({},o),{styles:l,tokens:s,_defaultStyles:l,theme:a});return t(u)};return i.displayName=n.displayName||t.name,r&&(i.create=_n(i,{defaultProp:r})),yn(i,n.statics),i}function Or(e,t){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];for(var r={},i=0,a=n;i<a.length;i++){var s=a[i];s&&(s="function"==typeof s?s(e,t):s,Array.isArray(s)&&(s=Or.apply(void 0,Je([e,t],s))),yn(r,s))}return r}var Hr=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n={},o=0,r=e;o<r.length;o++)for(var i=r[o],a=Array.isArray(i)?i:Object.keys(i),s=0,l=a;s<l.length;s++){var u=l[s];n[u]=1}return n},zr=Hr(["onCopy","onCut","onPaste","onCompositionEnd","onCompositionStart","onCompositionUpdate","onFocus","onFocusCapture","onBlur","onBlurCapture","onChange","onInput","onSubmit","onLoad","onError","onKeyDown","onKeyDownCapture","onKeyPress","onKeyUp","onAbort","onCanPlay","onCanPlayThrough","onDurationChange","onEmptied","onEncrypted","onEnded","onLoadedData","onLoadedMetadata","onLoadStart","onPause","onPlay","onPlaying","onProgress","onRateChange","onSeeked","onSeeking","onStalled","onSuspend","onTimeUpdate","onVolumeChange","onWaiting","onClick","onClickCapture","onContextMenu","onDoubleClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onMouseDown","onMouseDownCapture","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onMouseUpCapture","onSelect","onTouchCancel","onTouchEnd","onTouchMove","onTouchStart","onScroll","onWheel","onPointerCancel","onPointerDown","onPointerEnter","onPointerLeave","onPointerMove","onPointerOut","onPointerOver","onPointerUp","onGotPointerCapture","onLostPointerCapture"]),Wr=Hr(["accessKey","children","className","contentEditable","dir","draggable","hidden","htmlFor","id","lang","ref","role","style","tabIndex","title","translate","spellCheck","name"]),Ur=Hr(Wr,zr),Vr=(Hr(Ur,["form"]),Hr(Ur,["height","loop","muted","preload","src","width"])),Kr=(Hr(Vr,["poster"]),Hr(Ur,["start"]),Hr(Ur,["value"]),Hr(Ur,["download","href","hrefLang","media","rel","target","type"])),Gr=Hr(Ur,["autoFocus","disabled","form","formAction","formEncType","formMethod","formNoValidate","formTarget","type","value"]),jr=Hr(Gr,["accept","alt","autoCapitalize","autoComplete","checked","dirname","form","height","inputMode","list","max","maxLength","min","multiple","pattern","placeholder","readOnly","required","src","step","size","type","value","width"]),qr=Hr(Gr,["autoCapitalize","cols","dirname","form","maxLength","placeholder","readOnly","required","rows","wrap"]),Qr=(Hr(Gr,["form","multiple","required"]),Hr(Ur,["selected","value"]),Hr(Ur,["cellPadding","cellSpacing"]),Hr(Ur,["rowSpan","scope"]),Hr(Ur,["colSpan","headers","rowSpan","scope"]),Hr(Ur,["span"]),Hr(Ur,["span"]),Hr(Ur,["acceptCharset","action","encType","encType","method","noValidate","target"]),Hr(Ur,["allow","allowFullScreen","allowPaymentRequest","allowTransparency","csp","height","importance","referrerPolicy","sandbox","src","srcDoc","width"]),Hr(Ur,["alt","crossOrigin","height","src","srcSet","useMap","width"])),$r=Ur;function Zr(e,t,n){for(var o,r=Array.isArray(t),i={},a=0,s=Object.keys(e);a<s.length;a++){var l=s[a];!(!r&&t[l]||r&&t.indexOf(l)>=0||0===l.indexOf("data-")||0===l.indexOf("aria-"))||n&&-1!==(null===(o=n)||void 0===o?void 0:o.indexOf(l))||(i[l]=e[l])}return i}var Xr=function(e,t){return t.spacing.hasOwnProperty(e)?t.spacing[e]:e},Yr=function(e){var t=parseFloat(e),n=isNaN(t)?0:t,o=isNaN(t)?"":t.toString();return{value:n,unit:e.substring(o.toString().length)||"px"}},Jr=function(e,t){if(void 0===e||"number"==typeof e||""===e)return e;var n=e.split(" ");return n.length<2?Xr(e,t):n.reduce((function(e,n){return Xr(e,t)+" "+Xr(n,t)}))},ei={start:"flex-start",end:"flex-end"},ti={root:"ms-Stack",inner:"ms-Stack-inner"},ni={root:"ms-StackItem"},oi={start:"flex-start",end:"flex-end"},ri=Br((function(t){var n=t.children;return e.Children.count(n)<1?null:bn(Sn(t,{root:"div"}).root,null,n)}),{displayName:"StackItem",styles:function(e,t,n){var o=e.grow,r=e.shrink,i=e.disableShrink,a=e.align,s=e.verticalFill,l=e.order,u=e.className,c=Oo(ni,t);return{root:[t.fonts.medium,c.root,{margin:n.margin,padding:n.padding,height:s?"100%":"auto",width:"auto"},o&&{flexGrow:!0===o?1:o},(i||!o&&!r)&&{flexShrink:0},r&&!i&&{flexShrink:1},a&&{alignSelf:oi[a]||a},l&&{order:l},u]}}});var ii=Br((function(t){var n=t.as,o=void 0===n?"div":n,r=t.disableShrink,i=t.wrap,a=Xe(t,["as","disableShrink","wrap"]),s=e.Children.map(t.children,(function(t,n){if(!t)return null;if((i=t)&&"object"==typeof i&&i.type&&i.type.displayName===ri.displayName){var o={shrink:!r};return e.cloneElement(t,Ze(Ze({},o),t.props))}var i;return t})),l=Zr(a,Ur),u=Sn(t,{root:o,inner:"div"});return bn(u.root,Ze({},l),i?bn(u.inner,null,s):s)}),{displayName:"Stack",styles:function(e,t,n){var o,r,i,a,s,l,u,c=e.verticalFill,d=e.horizontal,p=e.reversed,f=e.grow,h=e.wrap,m=e.horizontalAlign,g=e.verticalAlign,v=e.disableShrink,y=e.className,b=Oo(ti,t),_=n&&n.childrenGap?n.childrenGap:e.gap,C=n&&n.maxHeight?n.maxHeight:e.maxHeight,S=n&&n.maxWidth?n.maxWidth:e.maxWidth,k=n&&n.padding?n.padding:e.padding,x=function(e,t){if(void 0===e||""===e)return{rowGap:{value:0,unit:"px"},columnGap:{value:0,unit:"px"}};if("number"==typeof e)return{rowGap:{value:e,unit:"px"},columnGap:{value:e,unit:"px"}};var n=e.split(" ");if(n.length>2)return{rowGap:{value:0,unit:"px"},columnGap:{value:0,unit:"px"}};if(2===n.length)return{rowGap:Yr(Xr(n[0],t)),columnGap:Yr(Xr(n[1],t))};var o=Yr(Xr(e,t));return{rowGap:o,columnGap:o}}(_,t),w=x.rowGap,E=x.columnGap,I=""+-.5*E.value+E.unit,T=""+-.5*w.value+w.unit,D={textOverflow:"ellipsis"},P={"> *:not(.ms-StackItem)":{flexShrink:v?0:1}};return h?{root:[b.root,{flexWrap:"wrap",maxWidth:S,maxHeight:C,width:"auto",overflow:"visible",height:"100%"},m&&(o={},o[d?"justifyContent":"alignItems"]=ei[m]||m,o),g&&(r={},r[d?"alignItems":"justifyContent"]=ei[g]||g,r),y,{display:"flex"},d&&{height:c?"100%":"auto"}],inner:[b.inner,{display:"flex",flexWrap:"wrap",marginLeft:I,marginRight:I,marginTop:T,marginBottom:T,overflow:"visible",boxSizing:"border-box",padding:Jr(k,t),width:0===E.value?"100%":"calc(100% + "+E.value+E.unit+")",maxWidth:"100vw",selectors:Ze({"> *":Ze({margin:""+.5*w.value+w.unit+" "+.5*E.value+E.unit},D)},P)},m&&(i={},i[d?"justifyContent":"alignItems"]=ei[m]||m,i),g&&(a={},a[d?"alignItems":"justifyContent"]=ei[g]||g,a),d&&{flexDirection:p?"row-reverse":"row",height:0===w.value?"100%":"calc(100% + "+w.value+w.unit+")",selectors:{"> *":{maxWidth:0===E.value?"100%":"calc(100% - "+E.value+E.unit+")"}}},!d&&{flexDirection:p?"column-reverse":"column",height:"calc(100% + "+w.value+w.unit+")",selectors:{"> *":{maxHeight:0===w.value?"100%":"calc(100% - "+w.value+w.unit+")"}}}]}:{root:[b.root,{display:"flex",flexDirection:d?p?"row-reverse":"row":p?"column-reverse":"column",flexWrap:"nowrap",width:"auto",height:c?"100%":"auto",maxWidth:S,maxHeight:C,padding:Jr(k,t),boxSizing:"border-box",selectors:Ze((s={"> *":D},s[p?"> *:not(:last-child)":"> *:not(:first-child)"]=[d&&{marginLeft:""+E.value+E.unit},!d&&{marginTop:""+w.value+w.unit}],s),P)},f&&{flexGrow:!0===f?1:f},m&&(l={},l[d?"justifyContent":"alignItems"]=ei[m]||m,l),g&&(u={},u[d?"alignItems":"justifyContent"]=ei[g]||g,u),y]}},statics:{Item:ri}});function ai(t,n){var o,r=(o=e.useState(0)[1],function(){return o((function(e){return++e}))}),i=e.useContext(Lr).customizations,a=i.inCustomizerContext;return e.useEffect((function(){return a||jo.observe(r),function(){a||jo.unobserve(r)}}),[a]),jo.getSettings(t,n,i)}var si=["theme","styles"];function li(t,n,o,r,i){var a=(r=r||{scope:"",fields:void 0}).scope,s=r.fields,l=void 0===s?si:s,u=e.forwardRef((function(r,i){var s=e.useRef(),u=ai(l,a),c=u.styles,d=(u.dir,Xe(u,["styles","dir"])),p=o?o(r):void 0,f=s.current&&s.current.__cachedInputs__||[];if(!s.current||c!==f[1]||r.styles!==f[2]){var h=function(e){return Pr(e,n,c,r.styles)};h.__cachedInputs__=[n,c,r.styles],h.__noStyleOverride__=!c&&!r.styles,s.current=h}return e.createElement(t,Ze({ref:i},d,p,r,{styles:s.current}))}));u.displayName="Styled"+(t.displayName||t.name);var c=i?e.memo(u):u;return u.displayName&&(c.displayName=u.displayName),c}var ui=0,ci=st.getInstance();ci&&ci.onReset&&ci.onReset((function(){return ui++}));var di="__retval__";function pi(e){void 0===e&&(e={});var t=new Map,n=0,o=0,r=ui;return function(i,a){var s,l;if(void 0===a&&(a={}),e.useStaticStyles&&"function"==typeof i&&i.__noStyleOverride__)return i(a);o++;var u=t,c=a.theme,d=c&&void 0!==c.rtl?c.rtl:gn(),p=e.disableCaching;(r!==ui&&(r=ui,t=new Map,n=0),e.disableCaching||(u=hi(t,i),u=hi(u,a)),!p&&u[di]||(u[di]=void 0===i?{}:Rr(["function"==typeof i?i(a):i],{rtl:!!d,specificityMultiplier:e.useStaticStyles?5:void 0}),p||n++),n>(e.cacheSize||50))&&((null===(l=null===(s=pn())||void 0===s?void 0:s.FabricConfig)||void 0===l?void 0:l.enableClassNameCacheFullWarning)&&(console.warn("Styles are being recalculated too frequently. Cache miss rate is "+n+"/"+o+"."),console.trace()),t.clear(),n=0,e.disableCaching=!0);return u[di]}}function fi(e,t){return t=function(e){switch(e){case void 0:return"__undefined__";case null:return"__null__";default:return e}}(t),e.has(t)||e.set(t,new Map),e.get(t)}function hi(e,t){if("function"==typeof t)if(t.__cachedInputs__)for(var n=0,o=t.__cachedInputs__;n<o.length;n++){e=fi(e,o[n])}else e=fi(e,t);else if("object"==typeof t)for(var r in t)t.hasOwnProperty(r)&&(e=fi(e,t[r]));return e}function mi(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.length<2?t[0]:function(){for(var n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];t.forEach((function(t){return t&&t.apply(e,n)}))}}function gi(e){!function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=mi(e,e[n],t[n]))}(e,{componentDidMount:vi,componentDidUpdate:yi,componentWillUnmount:bi})}function vi(){_i(this.props.componentRef,this)}function yi(e){e.componentRef!==this.props.componentRef&&(_i(e.componentRef,null),_i(this.props.componentRef,this))}function bi(){_i(this.props.componentRef,null)}function _i(e,t){e&&("object"==typeof e?e.current=t:"function"==typeof e&&e(t))}var Ci;function Si(t){var n=e.useRef();return void 0===n.current&&(n.current={value:"function"==typeof t?t():t}),n.current.value}function ki(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e.filter((function(e){return e})).join(" ").trim();return""===n?void 0:n}function xi(e,t){for(var n in e)if(e.hasOwnProperty(n)&&(!t.hasOwnProperty(n)||t[n]!==e[n]))return!1;for(var n in t)if(t.hasOwnProperty(n)&&!e.hasOwnProperty(n))return!1;return!0}function wi(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return Ei.apply(this,[null,e].concat(t))}function Ei(e,t){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];t=t||{};for(var r=0,i=n;r<i.length;r++){var a=i[r];if(a)for(var s in a)!a.hasOwnProperty(s)||e&&!e(s)||(t[s]=a[s])}return t}!function(e){e.KEYTIP_ADDED="keytipAdded",e.KEYTIP_REMOVED="keytipRemoved",e.KEYTIP_UPDATED="keytipUpdated",e.PERSISTED_KEYTIP_ADDED="persistedKeytipAdded",e.PERSISTED_KEYTIP_REMOVED="persistedKeytipRemoved",e.PERSISTED_KEYTIP_EXECUTE="persistedKeytipExecute",e.ENTER_KEYTIP_MODE="enterKeytipMode",e.EXIT_KEYTIP_MODE="exitKeytipMode"}(Ci||(Ci={}));var Ii=function(){function e(t){this._id=e._uniqueId++,this._parent=t,this._eventRecords=[]}return e.raise=function(t,n,o,r){var i;if(e._isElement(t)){if("undefined"!=typeof document&&document.createEvent){var a=document.createEvent("HTMLEvents");a.initEvent(n,r||!1,!0),wi(a,o),i=t.dispatchEvent(a)}else if("undefined"!=typeof document&&document.createEventObject){var s=document.createEventObject(o);t.fireEvent("on"+n,s)}}else for(;t&&!1!==i;){var l=t.__events__,u=l?l[n]:null;if(u)for(var c in u)if(u.hasOwnProperty(c))for(var d=u[c],p=0;!1!==i&&p<d.length;p++){var f=d[p];f.objectCallback&&(i=f.objectCallback.call(f.parent,o))}t=r?t.parent:null}return i},e.isObserved=function(e,t){var n=e&&e.__events__;return!!n&&!!n[t]},e.isDeclared=function(e,t){var n=e&&e.__declaredEvents;return!!n&&!!n[t]},e.stopPropagation=function(e){e.stopPropagation?e.stopPropagation():e.cancelBubble=!0},e._isElement=function(e){return!!e&&(!!e.addEventListener||"undefined"!=typeof HTMLElement&&e instanceof HTMLElement)},e.prototype.dispose=function(){this._isDisposed||(this._isDisposed=!0,this.off(),this._parent=null)},e.prototype.onAll=function(e,t,n){for(var o in t)t.hasOwnProperty(o)&&this.on(e,o,t[o],n)},e.prototype.on=function(t,n,o,r){var i=this;if(n.indexOf(",")>-1)for(var a=n.split(/[ ,]+/),s=0;s<a.length;s++)this.on(t,a[s],o,r);else{var l=this._parent,u={target:t,eventName:n,parent:l,callback:o,options:r};if((a=t.__events__=t.__events__||{})[n]=a[n]||{count:0},a[n][this._id]=a[n][this._id]||[],a[n][this._id].push(u),a[n].count++,e._isElement(t)){var c=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(!i._isDisposed){var n;try{if(!1===(n=o.apply(l,e))&&e[0]){var r=e[0];r.preventDefault&&r.preventDefault(),r.stopPropagation&&r.stopPropagation(),r.cancelBubble=!0}}catch(r){}return n}};u.elementCallback=c,t.addEventListener?t.addEventListener(n,c,r):t.attachEvent&&t.attachEvent("on"+n,c)}else{u.objectCallback=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(!i._isDisposed)return o.apply(l,e)}}this._eventRecords.push(u)}},e.prototype.off=function(e,t,n,o){for(var r=0;r<this._eventRecords.length;r++){var i=this._eventRecords[r];if(!(e&&e!==i.target||t&&t!==i.eventName||n&&n!==i.callback||"boolean"==typeof o&&o!==i.options)){var a=i.target.__events__,s=a[i.eventName],l=s?s[this._id]:null;l&&(1!==l.length&&n?(s.count--,l.splice(l.indexOf(i),1)):(s.count-=l.length,delete a[i.eventName][this._id]),s.count||delete a[i.eventName]),i.elementCallback&&(i.target.removeEventListener?i.target.removeEventListener(i.eventName,i.elementCallback,i.options):i.target.detachEvent&&i.target.detachEvent("on"+i.eventName,i.elementCallback)),this._eventRecords.splice(r--,1)}}},e.prototype.raise=function(t,n,o){return e.raise(this._parent,t,n,o)},e.prototype.declare=function(e){var t=this._parent.__declaredEvents=this._parent.__declaredEvents||{};if("string"==typeof e)t[e]=!0;else for(var n=0;n<e.length;n++)t[e[n]]=!0},e._uniqueId=0,e}(),Ti=pn()||{};void 0===Ti.__currentId__&&(Ti.__currentId__=0);var Di=!1;function Pi(e){if(!Di){var t=st.getInstance();t&&t.onReset&&t.onReset(Mi),Di=!0}return(void 0===e?"id__":e)+Ti.__currentId__++}function Mi(e){void 0===e&&(e=0),Ti.__currentId__=e}var Ri=function(){function e(){this.keytips={},this.persistedKeytips={},this.sequenceMapping={},this.inKeytipMode=!1,this.shouldEnterKeytipMode=!0,this.delayUpdatingKeytipChange=!1}return e.getInstance=function(){return this._instance},e.prototype.init=function(e){this.delayUpdatingKeytipChange=e},e.prototype.register=function(e,t){void 0===t&&(t=!1);var n=e;t||(n=this.addParentOverflow(e),this.sequenceMapping[n.keySequences.toString()]=n);var o=this._getUniqueKtp(n);if(t?this.persistedKeytips[o.uniqueID]=o:this.keytips[o.uniqueID]=o,this.inKeytipMode||!this.delayUpdatingKeytipChange){var r=t?Ci.PERSISTED_KEYTIP_ADDED:Ci.KEYTIP_ADDED;Ii.raise(this,r,{keytip:n,uniqueID:o.uniqueID})}return o.uniqueID},e.prototype.update=function(e,t){var n=this.addParentOverflow(e),o=this._getUniqueKtp(n,t),r=this.keytips[t];r&&(o.keytip.visible=r.keytip.visible,this.keytips[t]=o,delete this.sequenceMapping[r.keytip.keySequences.toString()],this.sequenceMapping[o.keytip.keySequences.toString()]=o.keytip,!this.inKeytipMode&&this.delayUpdatingKeytipChange||Ii.raise(this,Ci.KEYTIP_UPDATED,{keytip:o.keytip,uniqueID:o.uniqueID}))},e.prototype.unregister=function(e,t,n){void 0===n&&(n=!1),n?delete this.persistedKeytips[t]:delete this.keytips[t],!n&&delete this.sequenceMapping[e.keySequences.toString()];var o=n?Ci.PERSISTED_KEYTIP_REMOVED:Ci.KEYTIP_REMOVED;!this.inKeytipMode&&this.delayUpdatingKeytipChange||Ii.raise(this,o,{keytip:e,uniqueID:t})},e.prototype.enterKeytipMode=function(){Ii.raise(this,Ci.ENTER_KEYTIP_MODE)},e.prototype.exitKeytipMode=function(){Ii.raise(this,Ci.EXIT_KEYTIP_MODE)},e.prototype.getKeytips=function(){var e=this;return Object.keys(this.keytips).map((function(t){return e.keytips[t].keytip}))},e.prototype.addParentOverflow=function(e){var t=Je(e.keySequences);if(t.pop(),0!==t.length){var n=this.sequenceMapping[t.toString()];if(n&&n.overflowSetSequence)return Ze(Ze({},e),{overflowSetSequence:n.overflowSetSequence})}return e},e.prototype.menuExecute=function(e,t){Ii.raise(this,Ci.PERSISTED_KEYTIP_EXECUTE,{overflowButtonSequences:e,keytipSequences:t})},e.prototype._getUniqueKtp=function(e,t){return void 0===t&&(t=Pi()),{keytip:Ze({},e),uniqueID:t}},e._instance=new e,e}();function Fi(e,t,n){void 0===n&&(n=0);for(var o=-1,r=n;e&&r<e.length;r++)if(t(e[r],r)){o=r;break}return o}function Ni(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function Ai(e){return e.reduce((function(e,t){return e+"-"+t.split("").join("-")}),"ktp")}function Li(t){var n,o,r=e.useRef(),i=t.keytipProps?Ze({disabled:t.disabled},t.keytipProps):void 0,a=Si(Ri.getInstance());e.useEffect((function(){return i&&(r.current=a.register(i)),function(){i&&a.unregister(i,r.current)}}),[]);var s,l,u=(s=t,l=(0,e.useRef)(),(0,e.useEffect)((function(){l.current=s})),l.current);r.current&&i&&((null===(n=u)||void 0===n?void 0:n.keytipProps)!==t.keytipProps||(null===(o=u)||void 0===o?void 0:o.disabled)!==t.disabled)&&a.update(i,r.current);var c={ariaDescribedBy:void 0,keytipId:void 0};return i&&(c=function(e,t,n){var o=e.addParentOverflow(t),r=ki(n,function(e){var t=" ktp-layer-id";return e.length?t+" "+Ai(e):t}(o.keySequences)),i=Je(o.keySequences);o.overflowSetSequence&&(i=function(e,t){var n=t.length,o=Je(t).pop();return function(e,t,n){var o=e.slice();return o.splice(t,0,n),o}(Je(e),n-1,o)}(i,o.overflowSetSequence));var a=Ai(i);return{ariaDescribedBy:r,keytipId:a}}(a,i,t.ariaDescribedBy)),c}var Bi,Oi=function(e){var t,n=e.children,o=Li(Xe(e,["children"])),r=o.keytipId,i=o.ariaDescribedBy;return n(((t={})["data-ktp-target"]=r,t["data-ktp-execute-target"]=r,t["aria-describedby"]=i,t))},Hi=pi(),zi=function(t){function n(n){var o=t.call(this,n)||this;return o._link=e.createRef(),o._renderContent=function(t){void 0===t&&(t={});var n=o.props,r=n.disabled,i=n.children,a=n.className,s=n.href,l=n.theme,u=n.styles,c=Hi(u,{className:a,isButton:!s,isDisabled:r,theme:l}),d=o._getRootType(o.props);return e.createElement(d,Ze({},t,o._adjustPropsForRootType(d,o.props),{className:c.root,onClick:o._onClick,ref:o._link,"aria-disabled":r}),i)},o._onClick=function(e){var t=o.props,n=t.onClick;t.disabled?e.preventDefault():n&&n(e)},gi(o),o}return $e(n,t),n.prototype.render=function(){var t=this,n=this.props,o=n.disabled,r=n.keytipProps;return r?e.createElement(Oi,{keytipProps:r,ariaDescribedBy:this.props["aria-describedby"],disabled:o},(function(e){return t._renderContent(e)})):this._renderContent()},n.prototype.focus=function(){var e=this._link.current;e&&e.focus&&e.focus()},n.prototype._adjustPropsForRootType=function(e,t){t.children,t.as;var n=t.disabled,o=t.target,r=t.href,i=(t.theme,t.getStyles,t.styles,t.componentRef,t.keytipProps,Xe(t,["children","as","disabled","target","href","theme","getStyles","styles","componentRef","keytipProps"]));return"string"==typeof e?"a"===e?Ze({target:o,href:n?void 0:r},i):"button"===e?Ze({type:"button",disabled:n},i):Ze(Ze({},i),{disabled:n}):Ze({target:o,href:r,disabled:n},i)},n.prototype._getRootType=function(e){return e.as?e.as:e.href?"a":"button"},n}(e.Component),Wi={root:"ms-Link"},Ui=li(zi,(function(e){var t,n,o,r,i,a,s=e.className,l=e.isButton,u=e.isDisabled,c=e.theme,d=c.semanticColors,p=d.link,f=d.linkHovered,h=d.disabledText,m=d.focusBorder,g=Oo(Wi,c);return{root:[g.root,c.fonts.medium,{color:p,outline:"none",fontSize:"inherit",fontWeight:"inherit",textDecoration:"none",selectors:(t={".ms-Fabric--isFocusVisible &:focus":{boxShadow:"0 0 0 1px "+m+" inset",outline:"1px auto "+m,selectors:(n={},n[Eo]={outline:"1px solid WindowText"},n)}},t[Eo]={borderBottom:"none"},t)},l&&{background:"none",backgroundColor:"transparent",border:"none",cursor:"pointer",display:"inline",margin:0,overflow:"inherit",padding:0,textAlign:"left",textOverflow:"inherit",userSelect:"text",borderBottom:"1px solid transparent",selectors:Ze((o={},o[Eo]={color:"LinkText"},o),To())},!l&&{selectors:(r={},r[Eo]={MsHighContrastAdjust:"auto"},r)},u&&["is-disabled",{color:h,cursor:"default"},{selectors:{"&:link, &:visited":{pointerEvents:"none"}}}],!u&&{selectors:{"&:active, &:hover, &:active:hover":{color:f,textDecoration:"underline",selectors:(i={},i[Eo]={color:"LinkText"},i)},"&:focus":{color:p,selectors:(a={},a[Eo]={color:"LinkText"},a)}}},g.root,s]}}),void 0,{scope:"Link"}),Vi=((Bi={})[rn]=1,Bi[sn]=1,Bi[on]=1,Bi[an]=1,Bi[nn]=1,Bi[tn]=1,Bi[Qt]=1,Bi[Jt]=1,Bi[en]=1,Bi);var Ki=new WeakMap;function Gi(e,t){var n,o=Ki.get(e);return n=o?o+t:1,Ki.set(e,n),n}var ji=function(t){var n;return n=t.rootRef,e.useEffect((function(){var e,t,o=pn(null===(e=n)||void 0===e?void 0:e.current);if(o&&!0!==(null===(t=o.FabricConfig)||void 0===t?void 0:t.disableFocusRects)){var r=Gi(o,1);return r<=1&&(o.addEventListener("mousedown",qi,!0),o.addEventListener("pointerdown",Qi,!0),o.addEventListener("keydown",$i,!0)),function(){var e;o&&!0!==(null===(e=o.FabricConfig)||void 0===e?void 0:e.disableFocusRects)&&0===(r=Gi(o,-1))&&(o.removeEventListener("mousedown",qi,!0),o.removeEventListener("pointerdown",Qi,!0),o.removeEventListener("keydown",$i,!0))}}}),[n]),null};function qi(e){Ro(!1,e.target)}function Qi(e){"mouse"!==e.pointerType&&Ro(!1,e.target)}function $i(e){var t;t=e.which,Vi[t]&&Ro(!0,e.target)}var Zi,Xi,Yi,Ji,ea,ta=function(){function e(e,t){this._timeoutIds=null,this._immediateIds=null,this._intervalIds=null,this._animationFrameIds=null,this._isDisposed=!1,this._parent=e||null,this._onErrorHandler=t,this._noop=function(){}}return e.prototype.dispose=function(){var e;if(this._isDisposed=!0,this._parent=null,this._timeoutIds){for(e in this._timeoutIds)this._timeoutIds.hasOwnProperty(e)&&this.clearTimeout(parseInt(e,10));this._timeoutIds=null}if(this._immediateIds){for(e in this._immediateIds)this._immediateIds.hasOwnProperty(e)&&this.clearImmediate(parseInt(e,10));this._immediateIds=null}if(this._intervalIds){for(e in this._intervalIds)this._intervalIds.hasOwnProperty(e)&&this.clearInterval(parseInt(e,10));this._intervalIds=null}if(this._animationFrameIds){for(e in this._animationFrameIds)this._animationFrameIds.hasOwnProperty(e)&&this.cancelAnimationFrame(parseInt(e,10));this._animationFrameIds=null}},e.prototype.setTimeout=function(e,t){var n=this,o=0;return this._isDisposed||(this._timeoutIds||(this._timeoutIds={}),o=setTimeout((function(){try{n._timeoutIds&&delete n._timeoutIds[o],e.apply(n._parent)}catch(e){n._onErrorHandler&&n._onErrorHandler(e)}}),t),this._timeoutIds[o]=!0),o},e.prototype.clearTimeout=function(e){this._timeoutIds&&this._timeoutIds[e]&&(clearTimeout(e),delete this._timeoutIds[e])},e.prototype.setImmediate=function(e,t){var n=this,o=0,r=pn(t);if(!this._isDisposed){this._immediateIds||(this._immediateIds={});o=r.setTimeout((function(){try{n._immediateIds&&delete n._immediateIds[o],e.apply(n._parent)}catch(e){n._logError(e)}}),0),this._immediateIds[o]=!0}return o},e.prototype.clearImmediate=function(e,t){var n=pn(t);this._immediateIds&&this._immediateIds[e]&&(n.clearTimeout(e),delete this._immediateIds[e])},e.prototype.setInterval=function(e,t){var n=this,o=0;return this._isDisposed||(this._intervalIds||(this._intervalIds={}),o=setInterval((function(){try{e.apply(n._parent)}catch(e){n._logError(e)}}),t),this._intervalIds[o]=!0),o},e.prototype.clearInterval=function(e){this._intervalIds&&this._intervalIds[e]&&(clearInterval(e),delete this._intervalIds[e])},e.prototype.throttle=function(e,t,n){var o=this;if(this._isDisposed)return this._noop;var r,i,a=t||0,s=!0,l=!0,u=0,c=null;n&&"boolean"==typeof n.leading&&(s=n.leading),n&&"boolean"==typeof n.trailing&&(l=n.trailing);var d=function(t){var n=Date.now(),p=n-u,f=s?a-p:a;return p>=a&&(!t||s)?(u=n,c&&(o.clearTimeout(c),c=null),r=e.apply(o._parent,i)):null===c&&l&&(c=o.setTimeout(d,f)),r};return function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i=e,d(!0)}},e.prototype.debounce=function(e,t,n){var o=this;if(this._isDisposed){var r=function(){};return r.cancel=function(){},r.flush=function(){return null},r.pending=function(){return!1},r}var i,a,s=t||0,l=!1,u=!0,c=null,d=0,p=Date.now(),f=null;n&&"boolean"==typeof n.leading&&(l=n.leading),n&&"boolean"==typeof n.trailing&&(u=n.trailing),n&&"number"==typeof n.maxWait&&!isNaN(n.maxWait)&&(c=n.maxWait);var h=function(e){f&&(o.clearTimeout(f),f=null),p=e},m=function(t){h(t),i=e.apply(o._parent,a)},g=function(e){var t=Date.now(),n=!1;e&&(l&&t-d>=s&&(n=!0),d=t);var r=t-d,a=s-r,h=t-p,v=!1;return null!==c&&(h>=c&&f?v=!0:a=Math.min(a,c-h)),r>=s||v||n?m(t):null!==f&&e||!u||(f=o.setTimeout(g,a)),i},v=function(){return!!f},y=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return a=e,g(!0)};return y.cancel=function(){v()&&h(Date.now())},y.flush=function(){return v()&&m(Date.now()),i},y.pending=v,y},e.prototype.requestAnimationFrame=function(e,t){var n=this,o=0,r=pn(t);if(!this._isDisposed){this._animationFrameIds||(this._animationFrameIds={});var i=function(){try{n._animationFrameIds&&delete n._animationFrameIds[o],e.apply(n._parent)}catch(e){n._logError(e)}};o=r.requestAnimationFrame?r.requestAnimationFrame(i):r.setTimeout(i,0),this._animationFrameIds[o]=!0}return o},e.prototype.cancelAnimationFrame=function(e,t){var n=pn(t);this._animationFrameIds&&this._animationFrameIds[e]&&(n.cancelAnimationFrame?n.cancelAnimationFrame(e):n.clearTimeout(e),delete this._animationFrameIds[e])},e.prototype._logError=function(e){this._onErrorHandler&&this._onErrorHandler(e)},e}();function na(e,t){return void 0===t&&(t=!0),e&&(t&&function(e){var t,n;return e&&(n=e)&&n._virtual&&(t=e._virtual.parent),t}(e)||e.parentNode&&e.parentNode)}function oa(e,t,n){void 0===n&&(n=!0);var o=!1;if(e&&t)if(n)if(e===t)o=!0;else for(o=!1;t;){var r=na(t);if(r===e){o=!0;break}t=r}else e.contains&&(o=e.contains(t));return o}function ra(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=[],o=0,r=e;o<r.length;o++){var i=r[o];if(i)if("string"==typeof i)n.push(i);else if(i.hasOwnProperty("toString")&&"function"==typeof i.toString)n.push(i.toString());else for(var a in i)i[a]&&n.push(a)}return n.join(" ")}!function(e){e[e.disabled=0]="disabled",e[e.clickable=1]="clickable",e[e.hasDropdown=2]="hasDropdown"}(Zi||(Zi={})),function(e){e[e.unconstrained=0]="unconstrained",e[e.horizontalConstrained=1]="horizontalConstrained"}(Xi||(Xi={})),function(e){e[e.outside=0]="outside",e[e.surface=1]="surface",e[e.header=2]="header"}(Yi||(Yi={})),function(e){e[e.fixedColumns=0]="fixedColumns",e[e.justified=1]="justified"}(Ji||(Ji={})),function(e){e[e.onHover=0]="onHover",e[e.always=1]="always",e[e.hidden=2]="hidden"}(ea||(ea={}));var ia=function(e){return function(t){for(var n=0,o=e.refs;n<o.length;n++){var r=o[n];"function"==typeof r?r(t):r&&(r.current=t)}}},aa=function(e){var t={refs:[]};return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.resolver&&Ni(t.refs,e)||(t.resolver=ia(t)),t.refs=e,t.resolver}};function sa(e,t){return e&&e!==document.body?t(e)?e:sa(na(e),t):null}var la="data-is-focusable";function ua(e){var t=da(e,e,!0,!1,!1,!0);return!!t&&(function(e){if(e){if(ya)return void(ya=e);ya=e;var t=pn(e);t&&t.requestAnimationFrame((function(){var e=ya;ya=void 0,e&&(e.getAttribute&&"true"===e.getAttribute(la)&&(e.getAttribute("tabindex")||e.setAttribute("tabindex","0")),e.focus())}))}}(t),!0)}function ca(e,t,n,o,r,i,a,s){if(!t||!a&&t===e)return null;var l=pa(t);if(r&&l&&(i||!ha(t)&&!ma(t))){var u=ca(e,t.lastElementChild,!0,!0,!0,i,a,s);if(u){if(s&&fa(u,!0)||!s)return u;var c=ca(e,u.previousElementSibling,!0,!0,!0,i,a,s);if(c)return c;for(var d=u.parentElement;d&&d!==t;){var p=ca(e,d.previousElementSibling,!0,!0,!0,i,a,s);if(p)return p;d=d.parentElement}}}if(n&&l&&fa(t,s))return t;var f=ca(e,t.previousElementSibling,!0,!0,!0,i,a,s);return f||(o?null:ca(e,t.parentElement,!0,!1,!1,i,a,s))}function da(e,t,n,o,r,i,a,s){if(!t||t===e&&r&&!a)return null;var l=pa(t);if(n&&l&&fa(t,s))return t;if(!r&&l&&(i||!ha(t)&&!ma(t))){var u=da(e,t.firstElementChild,!0,!0,!1,i,a,s);if(u)return u}if(t===e)return null;var c=da(e,t.nextElementSibling,!0,!0,!1,i,a,s);return c||(o?null:da(e,t.parentElement,!1,!1,!0,i,a,s))}function pa(e){if(!e||!e.getAttribute)return!1;var t=e.getAttribute("data-is-visible");return null!=t?"true"===t:0!==e.offsetHeight||null!==e.offsetParent||!0===e.isVisible}function fa(e,t){if(!e||e.disabled)return!1;var n=0,o=null;e&&e.getAttribute&&(o=e.getAttribute("tabIndex"))&&(n=parseInt(o,10));var r=e.getAttribute?e.getAttribute(la):null,i=null!==o&&n>=0,a=!!e&&"false"!==r&&("A"===e.tagName||"BUTTON"===e.tagName||"INPUT"===e.tagName||"TEXTAREA"===e.tagName||"SELECT"===e.tagName||"true"===r||i);return t?-1!==n&&a:a}function ha(e){return!!(e&&e.getAttribute&&e.getAttribute("data-focuszone-id"))}function ma(e){return!(!e||!e.getAttribute||"true"!==e.getAttribute("data-is-sub-focuszone"))}function ga(e,t){return"true"!==function(e,t){var n=sa(e,(function(e){return e.hasAttribute(t)}));return n&&n.getAttribute(t)}(e,t)}var va,ya=void 0;function ba(e){var t=function(e){var t;"function"==typeof Event?t=new Event(e):(t=document.createEvent("Event")).initEvent(e,!0,!0);return t}("MouseEvents");t.initEvent("click",!0,!0),e.dispatchEvent(t)}Lt({overflow:"hidden !important"});var _a="data-is-scrollable";function Ca(){if(void 0===va){var e=document.createElement("div");e.style.setProperty("width","100px"),e.style.setProperty("height","100px"),e.style.setProperty("overflow","scroll"),e.style.setProperty("position","absolute"),e.style.setProperty("top","-9999px"),document.body.appendChild(e),va=e.offsetWidth-e.clientWidth,document.body.removeChild(e)}return va}function Sa(e){for(var t=e,n=cn(e);t&&t!==n.body;){if("true"===t.getAttribute(_a))return t;t=t.parentElement}for(t=e;t&&t!==n.body;){if("false"!==t.getAttribute(_a)){var o=getComputedStyle(t),r=o?o.getPropertyValue("overflow-y"):"";if(r&&("scroll"===r||"auto"===r))return t}t=t.parentElement}return t&&t!==n.body||(t=pn(e)),t}var ka="data-portal-element";function xa(e,t){var n=sa(e,(function(e){return t===e||e.hasAttribute(ka)}));return null!==n&&n.hasAttribute(ka)}var wa,Ea=1,Ia=2;!function(e){e[e.vertical=0]="vertical",e[e.horizontal=1]="horizontal",e[e.bidirectional=2]="bidirectional",e[e.domOrder=3]="domOrder"}(wa||(wa={}));var Ta,Da="data-is-focusable",Pa="data-focuszone-id",Ma="tabindex",Ra="data-no-vertical-wrap",Fa="data-no-horizontal-wrap",Na=999999999,Aa=-999999999;var La,Ba,Oa,Ha,za={},Wa=new Set,Ua=["text","number","password","email","tel","url","search"],Va=!1,Ka=function(t){function n(n){var o=t.call(this,n)||this;return o._root=e.createRef(),o._mergedRef=aa(),o._onFocus=function(e){if(!o._portalContainsElement(e.target)){var t,n=o.props,r=n.onActiveElementChanged,i=n.doNotAllowFocusEventToPropagate,a=n.stopFocusPropagation,s=n.onFocusNotification,l=n.onFocus,u=n.shouldFocusInnerElementWhenReceivedFocus,c=n.defaultTabbableElement,d=o._isImmediateDescendantOfZone(e.target);if(d)t=e.target;else for(var p=e.target;p&&p!==o._root.current;){if(fa(p)&&o._isImmediateDescendantOfZone(p)){t=p;break}p=na(p,Va)}if(u&&e.target===o._root.current){var f=c&&"function"==typeof c&&c(o._root.current);f&&fa(f)?(t=f,f.focus()):(o.focus(!0),o._activeElement&&(t=null))}var h=!o._activeElement;t&&t!==o._activeElement&&((d||h)&&o._setFocusAlignment(t,!0,!0),o._activeElement=t,h&&o._updateTabIndexes()),r&&r(o._activeElement,e),(a||i)&&e.stopPropagation(),l?l(e):s&&s()}},o._onBlur=function(){o._setParkedFocus(!1)},o._onMouseDown=function(e){if(!o._portalContainsElement(e.target)&&!o.props.disabled){for(var t=e.target,n=[];t&&t!==o._root.current;)n.push(t),t=na(t,Va);for(;n.length&&((t=n.pop())&&fa(t)&&o._setActiveElement(t,!0),!ha(t)););}},o._onKeyDown=function(e,t){if(!o._portalContainsElement(e.target)){var n=o.props,r=n.direction,i=n.disabled,a=n.isInnerZoneKeystroke,s=n.pagingSupportDisabled,l=n.shouldEnterInnerZone;if(!(i||(o.props.onKeyDown&&o.props.onKeyDown(e),e.isDefaultPrevented()||o._getDocument().activeElement===o._root.current&&o._isInnerZone))){if((l&&l(e)||a&&a(e))&&o._isImmediateDescendantOfZone(e.target)){var u=o._getFirstInnerZone();if(u){if(!u.focus(!0))return}else{if(!ma(e.target))return;if(!o.focusElement(da(e.target,e.target.firstChild,!0)))return}}else{if(e.altKey)return;switch(e.which){case Yt:if(o._tryInvokeClickForFocusable(e.target))break;return;case on:if(r!==wa.vertical&&(o._preventDefaultWhenHandled(e),o._moveFocusLeft(t)))break;return;case an:if(r!==wa.vertical&&(o._preventDefaultWhenHandled(e),o._moveFocusRight(t)))break;return;case rn:if(r!==wa.horizontal&&(o._preventDefaultWhenHandled(e),o._moveFocusUp()))break;return;case sn:if(r!==wa.horizontal&&(o._preventDefaultWhenHandled(e),o._moveFocusDown()))break;return;case en:if(!s&&o._moveFocusPaging(!0))break;return;case Jt:if(!s&&o._moveFocusPaging(!1))break;return;case Qt:if(o.props.allowTabKey||o.props.handleTabKey===Ea||o.props.handleTabKey===Ia&&o._isElementInput(e.target)){var c=!1;if(o._processingTabKey=!0,r!==wa.vertical&&o._shouldWrapFocus(o._activeElement,Fa))c=(gn(t)?!e.shiftKey:e.shiftKey)?o._moveFocusLeft(t):o._moveFocusRight(t);else c=e.shiftKey?o._moveFocusUp():o._moveFocusDown();if(o._processingTabKey=!1,c)break;o.props.shouldResetActiveElementWhenTabFromZone&&(o._activeElement=null)}return;case nn:if(o._isContentEditableElement(e.target)||o._isElementInput(e.target)&&!o._shouldInputLoseFocus(e.target,!1))return!1;var d=o._root.current&&o._root.current.firstChild;if(o._root.current&&d&&o.focusElement(da(o._root.current,d,!0)))break;return;case tn:if(o._isContentEditableElement(e.target)||o._isElementInput(e.target)&&!o._shouldInputLoseFocus(e.target,!0))return!1;var p=o._root.current&&o._root.current.lastChild;if(o._root.current&&o.focusElement(ca(o._root.current,p,!0,!0,!0)))break;return;case $t:if(o._tryInvokeClickForFocusable(e.target))break;return;default:return}}e.preventDefault(),e.stopPropagation()}}},o._getHorizontalDistanceFromCenter=function(e,t,n){var r=o._focusAlignment.left||o._focusAlignment.x||0,i=Math.floor(n.top),a=Math.floor(t.bottom),s=Math.floor(n.bottom),l=Math.floor(t.top);return e&&i>a||!e&&s<l?r>=n.left&&r<=n.left+n.width?0:Math.abs(n.left+n.width/2-r):o._shouldWrapFocus(o._activeElement,Ra)?Na:Aa},gi(o),o._id=Pi("FocusZone"),o._focusAlignment={left:0,top:0},o._processingTabKey=!1,o}return $e(n,t),n.getOuterZones=function(){return Wa.size},n._onKeyDownCapture=function(e){e.which===Qt&&Wa.forEach((function(e){return e._updateTabIndexes()}))},n.prototype.componentDidMount=function(){var e=this._root.current;if(za[this._id]=this,e){this._windowElement=pn(e);for(var t=na(e,Va);t&&t!==this._getDocument().body&&1===t.nodeType;){if(ha(t)){this._isInnerZone=!0;break}t=na(t,Va)}this._isInnerZone||(Wa.add(this),this._windowElement&&1===Wa.size&&this._windowElement.addEventListener("keydown",n._onKeyDownCapture,!0)),this._root.current&&this._root.current.addEventListener("blur",this._onBlur,!0),this._updateTabIndexes(),this.props.defaultTabbableElement&&"string"==typeof this.props.defaultTabbableElement?this._activeElement=this._getDocument().querySelector(this.props.defaultTabbableElement):this.props.defaultActiveElement&&(this._activeElement=this._getDocument().querySelector(this.props.defaultActiveElement)),this.props.shouldFocusOnMount&&this.focus()}},n.prototype.componentDidUpdate=function(){var e=this._root.current,t=this._getDocument();if(t&&this._lastIndexPath&&(t.activeElement===t.body||null===t.activeElement||!this.props.preventFocusRestoration&&t.activeElement===e)){var n=function(e,t){for(var n=e,o=0,r=t;o<r.length;o++){var i=r[o],a=n.children[Math.min(i,n.children.length-1)];if(!a)break;n=a}return fa(n)&&pa(n)?n:da(e,n,!0)||ca(e,n)}(e,this._lastIndexPath);n?(this._setActiveElement(n,!0),n.focus(),this._setParkedFocus(!1)):this._setParkedFocus(!0)}},n.prototype.componentWillUnmount=function(){delete za[this._id],this._isInnerZone||(Wa.delete(this),this._windowElement&&0===Wa.size&&this._windowElement.removeEventListener("keydown",n._onKeyDownCapture,!0)),this._root.current&&this._root.current.removeEventListener("blur",this._onBlur,!0),this._activeElement=null,this._defaultFocusElement=null},n.prototype.render=function(){var t=this,n=this.props,o=n.as,r=n.elementType,i=n.rootProps,a=n.ariaDescribedBy,s=n.ariaLabelledBy,l=n.className,u=Zr(this.props,Ur),c=o||r||"div";this._evaluateFocusBeforeRender();var d,p=(void 0===d&&(d=!1),!0===d&&(mr=hr({},d)),mr);return e.createElement(c,Ze({"aria-labelledby":s,"aria-describedby":a},u,i,{className:ra((Ta||(Ta=Lt({selectors:{":focus":{outline:"none"}}},"ms-FocusZone")),Ta),l),ref:this._mergedRef(this.props.elementRef,this._root),"data-focuszone-id":this._id,onKeyDown:function(e){return t._onKeyDown(e,p)},onFocus:this._onFocus,onMouseDownCapture:this._onMouseDown}),this.props.children)},n.prototype.focus=function(e){if(void 0===e&&(e=!1),this._root.current){if(!e&&"true"===this._root.current.getAttribute(Da)&&this._isInnerZone){var t=this._getOwnerZone(this._root.current);if(t!==this._root.current){var n=za[t.getAttribute(Pa)];return!!n&&n.focusElement(this._root.current)}return!1}if(!e&&this._activeElement&&oa(this._root.current,this._activeElement)&&fa(this._activeElement))return this._activeElement.focus(),!0;var o=this._root.current.firstChild;return this.focusElement(da(this._root.current,o,!0))}return!1},n.prototype.focusLast=function(){if(this._root.current){var e=this._root.current&&this._root.current.lastChild;return this.focusElement(ca(this._root.current,e,!0,!0,!0))}return!1},n.prototype.focusElement=function(e,t){var n=this.props,o=n.onBeforeFocus,r=n.shouldReceiveFocus;return!(r&&!r(e)||o&&!o(e))&&(!!e&&(this._setActiveElement(e,t),this._activeElement&&this._activeElement.focus(),!0))},n.prototype.setFocusAlignment=function(e){this._focusAlignment=e},n.prototype._evaluateFocusBeforeRender=function(){var e=this._root.current,t=this._getDocument();if(t){var n=t.activeElement;if(n!==e){var o=oa(e,n,!1);this._lastIndexPath=o?function(e,t){for(var n=[];t&&e&&t!==e;){var o=na(t,!0);if(null===o)return[];n.unshift(Array.prototype.indexOf.call(o.children,t)),t=o}return n}(e,n):void 0}}},n.prototype._setParkedFocus=function(e){var t=this._root.current;t&&this._isParked!==e&&(this._isParked=e,e?(this.props.allowFocusRoot||(this._parkedTabIndex=t.getAttribute("tabindex"),t.setAttribute("tabindex","-1")),t.focus()):this.props.allowFocusRoot||(this._parkedTabIndex?(t.setAttribute("tabindex",this._parkedTabIndex),this._parkedTabIndex=void 0):t.removeAttribute("tabindex")))},n.prototype._setActiveElement=function(e,t){var n=this._activeElement;this._activeElement=e,n&&(ha(n)&&this._updateTabIndexes(n),n.tabIndex=-1),this._activeElement&&(this._focusAlignment&&!t||this._setFocusAlignment(e,!0,!0),this._activeElement.tabIndex=0)},n.prototype._preventDefaultWhenHandled=function(e){this.props.preventDefaultWhenHandled&&e.preventDefault()},n.prototype._tryInvokeClickForFocusable=function(e){if(e===this._root.current||!this.props.shouldRaiseClicks)return!1;do{if("BUTTON"===e.tagName||"A"===e.tagName||"INPUT"===e.tagName||"TEXTAREA"===e.tagName)return!1;if(this._isImmediateDescendantOfZone(e)&&"true"===e.getAttribute(Da)&&"true"!==e.getAttribute("data-disable-click-on-enter"))return ba(e),!0;e=na(e,Va)}while(e!==this._root.current);return!1},n.prototype._getFirstInnerZone=function(e){if(!(e=e||this._activeElement||this._root.current))return null;if(ha(e))return za[e.getAttribute(Pa)];for(var t=e.firstElementChild;t;){if(ha(t))return za[t.getAttribute(Pa)];var n=this._getFirstInnerZone(t);if(n)return n;t=t.nextElementSibling}return null},n.prototype._moveFocus=function(e,t,n,o){void 0===o&&(o=!0);var r=this._activeElement,i=-1,a=void 0,s=!1,l=this.props.direction===wa.bidirectional;if(!r||!this._root.current)return!1;if(this._isElementInput(r)&&!this._shouldInputLoseFocus(r,e))return!1;var u=l?r.getBoundingClientRect():null;do{if(r=e?da(this._root.current,r):ca(this._root.current,r),!l){a=r;break}if(r){var c=t(u,r.getBoundingClientRect());if(-1===c&&-1===i){a=r;break}if(c>-1&&(-1===i||c<i)&&(i=c,a=r),i>=0&&c<0)break}}while(r);if(a&&a!==this._activeElement)s=!0,this.focusElement(a);else if(this.props.isCircularNavigation&&o)return e?this.focusElement(da(this._root.current,this._root.current.firstElementChild,!0)):this.focusElement(ca(this._root.current,this._root.current.lastElementChild,!0,!0,!0));return s},n.prototype._moveFocusDown=function(){var e=this,t=-1,n=this._focusAlignment.left||this._focusAlignment.x||0;return!!this._moveFocus(!0,(function(o,r){var i=-1,a=Math.floor(r.top),s=Math.floor(o.bottom);return a<s?e._shouldWrapFocus(e._activeElement,Ra)?Na:Aa:((-1===t&&a>=s||a===t)&&(t=a,i=n>=r.left&&n<=r.left+r.width?0:Math.abs(r.left+r.width/2-n)),i)}))&&(this._setFocusAlignment(this._activeElement,!1,!0),!0)},n.prototype._moveFocusUp=function(){var e=this,t=-1,n=this._focusAlignment.left||this._focusAlignment.x||0;return!!this._moveFocus(!1,(function(o,r){var i=-1,a=Math.floor(r.bottom),s=Math.floor(r.top),l=Math.floor(o.top);return a>l?e._shouldWrapFocus(e._activeElement,Ra)?Na:Aa:((-1===t&&a<=l||s===t)&&(t=s,i=n>=r.left&&n<=r.left+r.width?0:Math.abs(r.left+r.width/2-n)),i)}))&&(this._setFocusAlignment(this._activeElement,!1,!0),!0)},n.prototype._moveFocusLeft=function(e){var t=this,n=this._shouldWrapFocus(this._activeElement,Fa);return!!this._moveFocus(gn(e),(function(o,r){var i=-1;return(gn(e)?parseFloat(r.top.toFixed(3))<parseFloat(o.bottom.toFixed(3)):parseFloat(r.bottom.toFixed(3))>parseFloat(o.top.toFixed(3)))&&r.right<=o.right&&t.props.direction!==wa.vertical?i=o.right-r.right:n||(i=Aa),i}),void 0,n)&&(this._setFocusAlignment(this._activeElement,!0,!1),!0)},n.prototype._moveFocusRight=function(e){var t=this,n=this._shouldWrapFocus(this._activeElement,Fa);return!!this._moveFocus(!gn(e),(function(o,r){var i=-1;return(gn(e)?parseFloat(r.bottom.toFixed(3))>parseFloat(o.top.toFixed(3)):parseFloat(r.top.toFixed(3))<parseFloat(o.bottom.toFixed(3)))&&r.left>=o.left&&t.props.direction!==wa.vertical?i=r.left-o.left:n||(i=Aa),i}),void 0,n)&&(this._setFocusAlignment(this._activeElement,!0,!1),!0)},n.prototype._moveFocusPaging=function(e,t){void 0===t&&(t=!0);var n=this._activeElement;if(!n||!this._root.current)return!1;if(this._isElementInput(n)&&!this._shouldInputLoseFocus(n,e))return!1;var o=Sa(n);if(!o)return!1;var r=-1,i=void 0,a=-1,s=-1,l=o.clientHeight,u=n.getBoundingClientRect();do{if(n=e?da(this._root.current,n):ca(this._root.current,n)){var c=n.getBoundingClientRect(),d=Math.floor(c.top),p=Math.floor(u.bottom),f=Math.floor(c.bottom),h=Math.floor(u.top),m=this._getHorizontalDistanceFromCenter(e,u,c);if(e&&d>p+l||!e&&f<h-l)break;m>-1&&(e&&d>a?(a=d,r=m,i=n):!e&&f<s?(s=f,r=m,i=n):(-1===r||m<=r)&&(r=m,i=n))}}while(n);var g=!1;if(i&&i!==this._activeElement)g=!0,this.focusElement(i),this._setFocusAlignment(i,!1,!0);else if(this.props.isCircularNavigation&&t)return e?this.focusElement(da(this._root.current,this._root.current.firstElementChild,!0)):this.focusElement(ca(this._root.current,this._root.current.lastElementChild,!0,!0,!0));return g},n.prototype._setFocusAlignment=function(e,t,n){if(this.props.direction===wa.bidirectional&&(!this._focusAlignment||t||n)){var o=e.getBoundingClientRect(),r=o.left+o.width/2,i=o.top+o.height/2;this._focusAlignment||(this._focusAlignment={left:r,top:i}),t&&(this._focusAlignment.left=r),n&&(this._focusAlignment.top=i)}},n.prototype._isImmediateDescendantOfZone=function(e){return this._getOwnerZone(e)===this._root.current},n.prototype._getOwnerZone=function(e){for(var t=na(e,Va);t&&t!==this._root.current&&t!==this._getDocument().body;){if(ha(t))return t;t=na(t,Va)}return t},n.prototype._updateTabIndexes=function(e){!this._activeElement&&this.props.defaultTabbableElement&&"function"==typeof this.props.defaultTabbableElement&&(this._activeElement=this.props.defaultTabbableElement(this._root.current)),!e&&this._root.current&&(this._defaultFocusElement=null,e=this._root.current,this._activeElement&&!oa(e,this._activeElement)&&(this._activeElement=null)),this._activeElement&&!fa(this._activeElement)&&(this._activeElement=null);for(var t=e&&e.children,n=0;t&&n<t.length;n++){var o=t[n];ha(o)?"true"===o.getAttribute(Da)&&(this._isInnerZone||(this._activeElement||this._defaultFocusElement)&&this._activeElement!==o?"-1"!==o.getAttribute(Ma)&&o.setAttribute(Ma,"-1"):(this._defaultFocusElement=o,"0"!==o.getAttribute(Ma)&&o.setAttribute(Ma,"0"))):(o.getAttribute&&"false"===o.getAttribute(Da)&&o.setAttribute(Ma,"-1"),fa(o)?this.props.disabled?o.setAttribute(Ma,"-1"):this._isInnerZone||(this._activeElement||this._defaultFocusElement)&&this._activeElement!==o?"-1"!==o.getAttribute(Ma)&&o.setAttribute(Ma,"-1"):(this._defaultFocusElement=o,"0"!==o.getAttribute(Ma)&&o.setAttribute(Ma,"0")):"svg"===o.tagName&&"false"!==o.getAttribute("focusable")&&o.setAttribute("focusable","false")),this._updateTabIndexes(o)}},n.prototype._isContentEditableElement=function(e){return e&&"true"===e.getAttribute("contenteditable")},n.prototype._isElementInput=function(e){return!(!e||!e.tagName||"input"!==e.tagName.toLowerCase()&&"textarea"!==e.tagName.toLowerCase())},n.prototype._shouldInputLoseFocus=function(e,t){if(!this._processingTabKey&&e&&e.type&&Ua.indexOf(e.type.toLowerCase())>-1){var n=e.selectionStart,o=n!==e.selectionEnd,r=e.value,i=e.readOnly;if(o||n>0&&!t&&!i||n!==r.length&&t&&!i||this.props.handleTabKey&&(!this.props.shouldInputLoseFocusOnArrowKey||!this.props.shouldInputLoseFocusOnArrowKey(e)))return!1}return!0},n.prototype._shouldWrapFocus=function(e,t){return!this.props.checkForNoWrap||ga(e,t)},n.prototype._portalContainsElement=function(e){return e&&!!this._root.current&&xa(e,this._root.current)},n.prototype._getDocument=function(){return cn(this._root.current)},n.defaultProps={isCircularNavigation:!1,direction:wa.bidirectional,shouldRaiseClicks:!0},n}(e.Component),Ga=Mr({root:{display:"inline-block"},placeholder:["ms-Icon-placeHolder",{width:"1em"}],image:["ms-Icon-imageContainer",{overflow:"hidden"}]}),ja="ms-Icon",qa=Kt((function(e){var t=function(e){var t=void 0,n=Cr.__options;if(e=e?kr(e):"",e=Cr.__remapped[e]||e)if(t=Cr[e]){var o=t.subset;o&&o.fontFace&&(o.isRegistered||(Yo(o.fontFace),o.isRegistered=!0),o.className||(o.className=Lt(o.style,{fontFamily:o.fontFace.fontFamily,fontWeight:o.fontFace.fontWeight||"normal",fontStyle:o.fontFace.fontStyle||"normal"})))}else!n.disableWarnings&&n.warnOnMissingIcons&&_r('The icon "'+e+'" was used but not registered. See https://github.com/microsoft/fluentui/wiki/Using-icons for more information.');return t}(e)||{subset:{},code:void 0},n=t.code,o=t.subset;return n?{children:n,iconClassName:o.className,fontFamily:o.fontFace&&o.fontFace.fontFamily}:null}),void 0,!0),Qa=function(t){var n=t.iconName,o=t.className,r=t.style,i=void 0===r?{}:r,a=qa(n)||{},s=a.iconClassName,l=a.children,u=a.fontFamily,c=Zr(t,Ur),d=t["aria-label"]?{}:{role:"presentation","aria-hidden":!0};return e.createElement("i",Ze({"data-icon-name":n},d,c,{className:ra(ja,Ga.root,s,!n&&Ga.placeholder,o),style:Ze({fontFamily:u},i)}),l)};Kt((function(e,t,n){return Qa({iconName:e,className:t,"aria-label":n})}));!function(e){e[e.default=0]="default",e[e.image=1]="image",e[e.Default=1e5]="Default",e[e.Image=100001]="Image"}(La||(La={})),function(e){e[e.center=0]="center",e[e.contain=1]="contain",e[e.cover=2]="cover",e[e.none=3]="none",e[e.centerCover=4]="centerCover",e[e.centerContain=5]="centerContain"}(Ba||(Ba={})),function(e){e[e.landscape=0]="landscape",e[e.portrait=1]="portrait"}(Oa||(Oa={})),function(e){e[e.notLoaded=0]="notLoaded",e[e.loaded=1]="loaded",e[e.error=2]="error",e[e.errorLoaded=3]="errorLoaded"}(Ha||(Ha={}));var $a=pi(),Za=function(t){function n(n){var o=t.call(this,n)||this;return o._coverStyle=Oa.portrait,o._imageElement=e.createRef(),o._frameElement=e.createRef(),o._onImageLoaded=function(e){var t=o.props,n=t.src,r=t.onLoad;r&&r(e),o._computeCoverStyle(o.props),n&&o.setState({loadState:Ha.loaded})},o._onImageError=function(e){o.props.onError&&o.props.onError(e),o.setState({loadState:Ha.error})},o.state={loadState:Ha.notLoaded},o}return $e(n,t),n.prototype.UNSAFE_componentWillReceiveProps=function(e){e.src!==this.props.src?this.setState({loadState:Ha.notLoaded}):this.state.loadState===Ha.loaded&&this._computeCoverStyle(e)},n.prototype.componentDidUpdate=function(e,t){this._checkImageLoaded(),this.props.onLoadingStateChange&&t.loadState!==this.state.loadState&&this.props.onLoadingStateChange(this.state.loadState)},n.prototype.render=function(){var t=Zr(this.props,Qr,["width","height"]),n=this.props,o=n.src,r=n.alt,i=n.width,a=n.height,s=n.shouldFadeIn,l=n.shouldStartVisible,u=n.className,c=n.imageFit,d=n.role,p=n.maximizeFrame,f=n.styles,h=n.theme,m=this.state.loadState,g=void 0!==this.props.coverStyle?this.props.coverStyle:this._coverStyle,v=$a(f,{theme:h,className:u,width:i,height:a,maximizeFrame:p,shouldFadeIn:s,shouldStartVisible:l,isLoaded:m===Ha.loaded||m===Ha.notLoaded&&this.props.shouldStartVisible,isLandscape:g===Oa.landscape,isCenter:c===Ba.center,isCenterContain:c===Ba.centerContain,isCenterCover:c===Ba.centerCover,isContain:c===Ba.contain,isCover:c===Ba.cover,isNone:c===Ba.none,isError:m===Ha.error,isNotImageFit:void 0===c});return e.createElement("div",{className:v.root,style:{width:i,height:a},ref:this._frameElement},e.createElement("img",Ze({},t,{onLoad:this._onImageLoaded,onError:this._onImageError,key:"fabricImage"+this.props.src||"",className:v.image,ref:this._imageElement,src:o,alt:r,role:d})))},n.prototype._checkImageLoaded=function(){var e=this.props.src;this.state.loadState===Ha.notLoaded&&(!!this._imageElement.current&&(e&&this._imageElement.current.naturalWidth>0&&this._imageElement.current.naturalHeight>0||this._imageElement.current.complete&&n._svgRegex.test(e))&&(this._computeCoverStyle(this.props),this.setState({loadState:Ha.loaded})))},n.prototype._computeCoverStyle=function(e){var t=e.imageFit,n=e.width,o=e.height;if((t===Ba.cover||t===Ba.contain||t===Ba.centerContain||t===Ba.centerCover)&&void 0===this.props.coverStyle&&this._imageElement.current&&this._frameElement.current){var r=void 0;r="number"==typeof n&&"number"==typeof o&&t!==Ba.centerContain&&t!==Ba.centerCover?n/o:this._frameElement.current.clientWidth/this._frameElement.current.clientHeight;var i=this._imageElement.current.naturalWidth/this._imageElement.current.naturalHeight;this._coverStyle=i>r?Oa.landscape:Oa.portrait}},n.defaultProps={shouldFadeIn:!0},n._svgRegex=/\.svg$/i,n}(e.Component),Xa={root:"ms-Image",rootMaximizeFrame:"ms-Image--maximizeFrame",image:"ms-Image-image",imageCenter:"ms-Image-image--center",imageContain:"ms-Image-image--contain",imageCover:"ms-Image-image--cover",imageCenterContain:"ms-Image-image--centerContain",imageCenterCover:"ms-Image-image--centerCover",imageNone:"ms-Image-image--none",imageLandscape:"ms-Image-image--landscape",imagePortrait:"ms-Image-image--portrait"},Ya=li(Za,(function(e){var t=e.className,n=e.width,o=e.height,r=e.maximizeFrame,i=e.isLoaded,a=e.shouldFadeIn,s=e.shouldStartVisible,l=e.isLandscape,u=e.isCenter,c=e.isContain,d=e.isCover,p=e.isCenterContain,f=e.isCenterCover,h=e.isNone,m=e.isError,g=e.isNotImageFit,v=e.theme,y=Oo(Xa,v),b={position:"absolute",left:"50% /* @noflip */",top:"50%",transform:"translate(-50%,-50%)"},_=pn(),C=void 0!==_&&void 0===_.navigator.msMaxTouchPoints,S=c&&l||d&&!l?{width:"100%",height:"auto"}:{width:"auto",height:"100%"};return{root:[y.root,v.fonts.medium,{overflow:"hidden"},r&&[y.rootMaximizeFrame,{height:"100%",width:"100%"}],i&&a&&!s&&wo.fadeIn400,(u||c||d||p||f)&&{position:"relative"},t],image:[y.image,{display:"block",opacity:0},i&&["is-loaded",{opacity:1}],u&&[y.imageCenter,b],c&&[y.imageContain,C&&{width:"100%",height:"100%",objectFit:"contain"},!C&&S,b],d&&[y.imageCover,C&&{width:"100%",height:"100%",objectFit:"cover"},!C&&S,b],p&&[y.imageCenterContain,l&&{maxWidth:"100%"},!l&&{maxHeight:"100%"},b],f&&[y.imageCenterCover,l&&{maxHeight:"100%"},!l&&{maxWidth:"100%"},b],h&&[y.imageNone,{width:"auto",height:"auto"}],g&&[!!n&&!o&&{height:"auto",width:"100%"},!n&&!!o&&{height:"100%",width:"auto"},!!n&&!!o&&{height:"100%",width:"100%"}],l&&y.imageLandscape,!l&&y.imagePortrait,!i&&"is-notLoaded",a&&"is-fadeIn",m&&"is-error"]}}),void 0,{scope:"Image"},!0),Ja=pi({cacheSize:100}),es=li(function(t){function n(e){var n=t.call(this,e)||this;return n._onImageLoadingStateChange=function(e){n.props.imageProps&&n.props.imageProps.onLoadingStateChange&&n.props.imageProps.onLoadingStateChange(e),e===Ha.error&&n.setState({imageLoadError:!0})},n.state={imageLoadError:!1},n}return $e(n,t),n.prototype.render=function(){var t=this.props,n=t.children,o=t.className,r=t.styles,i=t.iconName,a=t.imageErrorAs,s=t.theme,l="string"==typeof i&&0===i.length,u=!!this.props.imageProps||this.props.iconType===La.image||this.props.iconType===La.Image,c=qa(i)||{},d=c.iconClassName,p=c.children,f=Ja(r,{theme:s,className:o,iconClassName:d,isImage:u,isPlaceholder:l}),h=u?"span":"i",m=Zr(this.props,Ur,["aria-label"]),g=this.state.imageLoadError,v=Ze(Ze({},this.props.imageProps),{onLoadingStateChange:this._onImageLoadingStateChange}),y=g&&a||Ya,b=this.props["aria-label"]||this.props.ariaLabel,_=b?{"aria-label":b}:{"aria-hidden":!this.props["aria-labelledby"]&&!v["aria-labelledby"]};return e.createElement(h,Ze({"data-icon-name":i},_,m,{className:f.root}),u?e.createElement(y,Ze({},v)):n||p)},n}(e.Component),(function(e){var t=e.className,n=e.iconClassName,o=e.isPlaceholder,r=e.isImage,i=e.styles;return{root:[o&&Ga.placeholder,Ga.root,r&&Ga.image,n,t,i&&i.root,i&&i.imageContainer]}}),void 0,{scope:"Icon"},!0);function ts(e,t){return void 0===e&&(e={}),(os(t)?t:function(e){return function(t){return e?Ze(Ze({},t),e):t}}(t))(e)}function ns(e,t){return void 0===e&&(e={}),(os(t)?t:function(e){void 0===e&&(e={});return function(t){var n=Ze({},t);for(var o in e)e.hasOwnProperty(o)&&(n[o]=Ze(Ze({},t[o]),e[o]));return n}}(t))(e)}function os(e){return"function"==typeof e}es.displayName="Icon";var rs=function(t){function n(){var e=null!==t&&t.apply(this,arguments)||this;return e._onCustomizationChange=function(){return e.forceUpdate()},e}return $e(n,t),n.prototype.componentDidMount=function(){jo.observe(this._onCustomizationChange)},n.prototype.componentWillUnmount=function(){jo.unobserve(this._onCustomizationChange)},n.prototype.render=function(){var t=this,n=this.props.contextTransform;return e.createElement(Lr.Consumer,null,(function(o){var r=function(e,t){var n=(t||{}).customizations,o=void 0===n?{settings:{},scopedSettings:{}}:n;return{customizations:{settings:ts(o.settings,e.settings),scopedSettings:ns(o.scopedSettings,e.scopedSettings),inCustomizerContext:!0}}}(t.props,o);return n&&(r=n(r)),e.createElement(Lr.Provider,{value:r},t.props.children)}))},n}(e.Component),is=pi(),as=Kt((function(e,t){return hr(Ze(Ze({},e),{rtl:t}))})),ss=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n._rootElement=e.createRef(),n._removeClassNameFromBody=void 0,n}return $e(n,t),n.prototype.render=function(){var t=this.props,n=t.as,o=void 0===n?"div":n,r=t.theme,i=t.dir,a=this._getClassNames(),s=Zr(this.props,$r,["dir"]),l=function(e,t){var n=gn(e)?"rtl":"ltr",o=gn()?"rtl":"ltr",r=t||n;return{rootDir:r!==n||r!==o?r:t,needsTheme:r!==n}}(r,i),u=l.rootDir,c=l.needsTheme,d=e.createElement(o,Ze({dir:u},s,{className:a.root,ref:this._rootElement}));return c&&(d=e.createElement(rs,{settings:{theme:as(r,"rtl"===i)}},d)),e.createElement(e.Fragment,null,d,e.createElement(ji,{rootRef:this._rootElement}))},n.prototype.componentDidMount=function(){this._addClassNameToBody()},n.prototype.componentWillUnmount=function(){this._removeClassNameFromBody&&this._removeClassNameFromBody()},n.prototype._getClassNames=function(){var e=this.props,t=e.className,n=e.theme,o=e.applyTheme,r=e.styles;return is(r,{theme:n,applyTheme:o,className:t})},n.prototype._addClassNameToBody=function(){if(this.props.applyThemeToBody){var e=this._getClassNames(),t=cn(this._rootElement.current);t&&(t.body.classList.add(e.bodyThemed),this._removeClassNameFromBody=function(){t.body.classList.remove(e.bodyThemed)})}},n}(e.Component),ls={fontFamily:"inherit"},us={root:"ms-Fabric",bodyThemed:"ms-Fabric-bodyThemed"},cs=li(ss,(function(e){var t=e.theme,n=e.className,o=e.applyTheme;return{root:[Oo(us,t).root,t.fonts.medium,{color:t.palette.neutralPrimary,selectors:{"& button":ls,"& input":ls,"& textarea":ls}},o&&{color:t.semanticColors.bodyText,backgroundColor:t.semanticColors.bodyBackground},n],bodyThemed:[{backgroundColor:t.semanticColors.bodyBackground}]}}),void 0,{scope:"Fabric"});function ds(e,t){var n=e,o=t;n._virtual||(n._virtual={children:[]});var r=n._virtual.parent;if(r&&r!==t){var i=r._virtual.children.indexOf(n);i>-1&&r._virtual.children.splice(i,1)}n._virtual.parent=o||void 0,o&&(o._virtual||(o._virtual={children:[]}),o._virtual.children.push(n))}function ps(e,t){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}function fs(t,n,o){return function(r){var i,a=((i=function(i){function a(e){var t=i.call(this,e)||this;return t._styleCache={},t._onSettingChanged=t._onSettingChanged.bind(t),t}return $e(a,i),a.prototype.componentDidMount=function(){jo.observe(this._onSettingChanged)},a.prototype.componentWillUnmount=function(){jo.unobserve(this._onSettingChanged)},a.prototype.render=function(){var i=this;return e.createElement(Lr.Consumer,null,(function(a){var s=jo.getSettings(n,t,a.customizations),l=i.props;if(s.styles&&"function"==typeof s.styles&&(s.styles=s.styles(Ze(Ze({},s),l))),o&&s.styles){if(i._styleCache.default!==s.styles||i._styleCache.component!==l.styles){var u=Dr(s.styles,l.styles);i._styleCache.default=s.styles,i._styleCache.component=l.styles,i._styleCache.merged=u}return e.createElement(r,Ze({},s,l,{styles:i._styleCache.merged}))}return e.createElement(r,Ze({},s,l))}))},a.prototype._onSettingChanged=function(){this.forceUpdate()},a}(e.Component)).displayName="Customized"+t,i);return ps(r,a)}}var hs,ms={};var gs,vs=pi(),ys=function(t){function o(n){var o=t.call(this,n)||this;return o._rootRef=e.createRef(),o._createLayerElement=function(){var e=o.props.hostId,t=cn(o._rootRef.current),n=o._getHost();if(t&&n){o._removeLayerElement();var r=t.createElement("div"),i=o._getClassNames();r.className=i.root,r.setAttribute(ka,"true"),ds(r,o._rootRef.current),o.props.insertFirst?n.insertBefore(r,n.firstChild):n.appendChild(r),o.setState({hostId:e,layerElement:r},(function(){var e=o.props,t=e.onLayerDidMount,n=e.onLayerMounted;n&&n(),t&&t()}))}},o.state={},o}return $e(o,t),o.prototype.componentDidMount=function(){var e=this.props.hostId;this._createLayerElement(),e&&function(e,t){ms[e]||(ms[e]=[]),ms[e].push(t)}(e,this._createLayerElement)},o.prototype.render=function(){var t=this.state.layerElement,o=this._getClassNames(),r=this.props.eventBubblingEnabled;return e.createElement("span",{className:"ms-layer",ref:this._rootRef},t&&n.createPortal(e.createElement(cs,Ze({},!r&&function(){gs||(gs={},["onClick","onContextMenu","onDoubleClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOver","onMouseOut","onMouseUp","onTouchMove","onTouchStart","onTouchCancel","onTouchEnd","onKeyDown","onKeyPress","onKeyUp","onFocus","onBlur","onChange","onInput","onInvalid","onSubmit"].forEach((function(e){return gs[e]=bs})));return gs}(),{className:o.content}),this.props.children),t))},o.prototype.componentDidUpdate=function(){this.props.hostId!==this.state.hostId&&this._createLayerElement()},o.prototype.componentWillUnmount=function(){var e=this.props.hostId;this._removeLayerElement(),e&&function(e,t){if(ms[e]){var n=ms[e].indexOf(t);n>=0&&(ms[e].splice(n,1),0===ms[e].length&&delete ms[e])}}(e,this._createLayerElement)},o.prototype._removeLayerElement=function(){var e=this.props.onLayerWillUnmount,t=this.state.layerElement;if(t&&ds(t,null),e&&e(),t&&t.parentNode){var n=t.parentNode;n&&n.removeChild(t)}},o.prototype._getClassNames=function(){var e=this.props,t=e.className,n=e.styles,o=e.theme;return vs(n,{theme:o,className:t,isNotHost:!this.props.hostId})},o.prototype._getHost=function(){var e=this.props.hostId,t=cn(this._rootRef.current);if(t){if(e)return t.getElementById(e);var n=hs;return n?t.querySelector(n):t.body}},o.defaultProps={onLayerDidMount:function(){},onLayerWillUnmount:function(){}},o=Ye([fs("Layer",["theme","hostId"])],o)}(e.Component),bs=function(e){e.eventPhase===Event.BUBBLING_PHASE&&"mouseenter"!==e.type&&"mouseleave"!==e.type&&"touchstart"!==e.type&&"touchend"!==e.type&&e.stopPropagation()};var _s,Cs={root:"ms-Layer",rootNoHost:"ms-Layer--fixed",content:"ms-Layer-content"},Ss=li(ys,(function(e){var t=e.className,n=e.isNotHost,o=e.theme,r=Oo(Cs,o);return{root:[r.root,o.fonts.medium,n&&[r.rootNoHost,{position:"fixed",zIndex:Do.Layer,top:0,left:0,bottom:0,right:0,visibility:"hidden"}],t],content:[r.content,{visibility:"visible"}]}}),void 0,{scope:"Layer",fields:["hostId","theme","styles"]}),ks=function(t){var n=t.count,o=t.indentWidth,r=void 0===o?36:o,i=t.role,a=void 0===i?"presentation":i,s=n*r;return n>0?e.createElement("span",{className:"ms-GroupSpacer",style:{display:"inline-block",width:s},role:a}):null};!function(e){e[e.hidden=0]="hidden",e[e.visible=1]="visible"}(_s||(_s={}));var xs=pi(),ws=function(t){var n=t.checked,o=void 0!==n&&n,r=t.className,i=t.theme,a=t.styles,s=t.useFastIcons,l=void 0===s||s,u=xs(a,{theme:i,className:r,checked:o}),c=l?Qa:es;return e.createElement("div",{className:u.root},e.createElement(c,{iconName:"CircleRing",className:u.circle}),e.createElement(c,{iconName:"StatusCircleCheckmark",className:u.check}))};ws.displayName="CheckBase";var Es={root:"ms-Check",circle:"ms-Check-circle",check:"ms-Check-check",checkHost:"ms-Check-checkHost"},Is=li(ws,(function(e){var t,n,o,r,i,a=e.height,s=void 0===a?e.checkBoxHeight||"18px":a,l=e.checked,u=e.className,c=e.theme,d=c.palette,p=c.semanticColors,f=c.fonts,h=gn(c),m=Oo(Es,c),g={fontSize:s,position:"absolute",left:0,top:0,width:s,height:s,textAlign:"center",verticalAlign:"middle"};return{root:[m.root,f.medium,{lineHeight:"1",width:s,height:s,verticalAlign:"top",position:"relative",userSelect:"none",selectors:(t={":before":{content:'""',position:"absolute",top:"1px",right:"1px",bottom:"1px",left:"1px",borderRadius:"50%",opacity:1,background:p.bodyBackground}},t["."+m.checkHost+":hover &, ."+m.checkHost+":focus &, &:hover, &:focus"]={opacity:1},t)},l&&["is-checked",{selectors:{":before":{background:d.themePrimary,opacity:1,selectors:(n={},n[Eo]={background:"Window"},n)}}}],u],circle:[m.circle,g,{color:d.neutralSecondary,selectors:(o={},o[Eo]={color:"WindowText"},o)},l&&{color:d.white}],check:[m.check,g,{opacity:0,color:d.neutralSecondary,fontSize:xo.medium,left:h?"-0.5px":".5px",selectors:(r={":hover":{opacity:1}},r[Eo]={MsHighContrastAdjust:"none"},r)},l&&{opacity:1,color:d.white,fontWeight:900,selectors:(i={},i[Eo]={border:"none",color:"WindowText"},i)}],checkHost:m.checkHost}}),void 0,{scope:"Check"},!0),Ts={root:"ms-DetailsRow",compact:"ms-DetailsList--Compact",cell:"ms-DetailsRow-cell",cellAnimation:"ms-DetailsRow-cellAnimation",cellCheck:"ms-DetailsRow-cellCheck",check:"ms-DetailsRow-check",cellMeasurer:"ms-DetailsRow-cellMeasurer",listCellFirstChild:"ms-List-cell:first-child",isContentUnselectable:"is-contentUnselectable",isSelected:"is-selected",isCheckVisible:"is-check-visible",isRowHeader:"is-row-header",fields:"ms-DetailsRow-fields"},Ds={cellLeftPadding:12,cellRightPadding:8,cellExtraRightPadding:24},Ps={rowHeight:42,compactRowHeight:32},Ms=Ze(Ze({},Ps),{rowVerticalPadding:11,compactRowVerticalPadding:6}),Rs={tooltipHost:"ms-TooltipHost",root:"ms-DetailsHeader",cell:"ms-DetailsHeader-cell",cellIsCheck:"ms-DetailsHeader-cellIsCheck",collapseButton:"ms-DetailsHeader-collapseButton",isCollapsed:"is-collapsed",isAllSelected:"is-allSelected",isSelectAllHidden:"is-selectAllHidden",isResizingColumn:"is-resizingColumn",cellSizer:"ms-DetailsHeader-cellSizer",isResizing:"is-resizing",dropHintCircleStyle:"ms-DetailsHeader-dropHintCircleStyle",dropHintCaretStyle:"ms-DetailsHeader-dropHintCaretStyle",dropHintLineStyle:"ms-DetailsHeader-dropHintLineStyle",cellTitle:"ms-DetailsHeader-cellTitle",cellName:"ms-DetailsHeader-cellName",filterChevron:"ms-DetailsHeader-filterChevron",gripperBarVertical:"ms-DetailsColumn-gripperBarVertical",checkTooltip:"ms-DetailsHeader-checkTooltip",check:"ms-DetailsHeader-check"},Fs=function(e){var t=e.theme,n=e.cellStyleProps,o=void 0===n?Ds:n,r=t.semanticColors;return[Oo(Rs,t).cell,Fo(t),{color:r.bodyText,position:"relative",display:"inline-block",boxSizing:"border-box",padding:"0 "+o.cellRightPadding+"px 0 "+o.cellLeftPadding+"px",lineHeight:"inherit",margin:"0",height:42,verticalAlign:"top",whiteSpace:"nowrap",textOverflow:"ellipsis",textAlign:"left"}]},Ns={root:"ms-DetailsRow-check",isDisabled:"ms-DetailsRow-check--isDisabled",isHeader:"ms-DetailsRow-check--isHeader"};var As=Gt((function(e){return Gt((function(t){var n=Gt((function(e){return function(n){return t(n,e)}}));return function(o,r){return e(o,r?n(r):t)}}))}));function Ls(e,t){return As(e)(t)}var Bs=pi(),Os=e.memo((function(t){return e.createElement(Is,{theme:t.theme,checked:t.checked,className:t.className,useFastIcons:!0})}));function Hs(t){return e.createElement(Is,{checked:t.checked})}function zs(t){return e.createElement(Os,{theme:t.theme,checked:t.checked})}var Ws,Us,Vs=li((function(t){var n=t.isVisible,o=void 0!==n&&n,r=t.canSelect,i=void 0!==r&&r,a=t.anySelected,s=void 0!==a&&a,l=t.selected,u=void 0!==l&&l,c=t.isHeader,d=void 0!==c&&c,p=t.className,f=(t.checkClassName,t.styles),h=t.theme,m=t.compact,g=t.onRenderDetailsCheckbox,v=t.useFastIcons,y=void 0===v||v,b=Xe(t,["isVisible","canSelect","anySelected","selected","isHeader","className","checkClassName","styles","theme","compact","onRenderDetailsCheckbox","useFastIcons"]),_=y?zs:Hs,C=g?Ls(g,_):_,S=Bs(f,{theme:h,canSelect:i,selected:u,anySelected:s,className:p,isHeader:d,isVisible:o,compact:m}),k={checked:u,theme:h};return i?e.createElement("div",Ze({},b,{role:"checkbox",className:ra(S.root,S.check),"aria-checked":u,"data-selection-toggle":!0,"data-automationid":"DetailsRowCheck"}),C(k)):e.createElement("div",Ze({},b,{className:ra(S.root,S.check)}))}),(function(e){var t=e.theme,n=e.className,o=e.isHeader,r=e.selected,i=e.anySelected,a=e.canSelect,s=e.compact,l=e.isVisible,u=Oo(Ns,t),c=o?42:s?Ps.compactRowHeight:Ps.rowHeight,d=l||r||i;return{root:[u.root,n],check:[!a&&u.isDisabled,o&&u.isHeader,Fo(t),t.fonts.small,Es.checkHost,{display:"flex",alignItems:"center",justifyContent:"center",cursor:"default",boxSizing:"border-box",verticalAlign:"top",background:"none",backgroundColor:"transparent",border:"none",opacity:d?1:0,height:c,width:48,padding:0,margin:0}],isDisabled:[]}}),void 0,{scope:"DetailsRowCheck"},!0),Ks="change";!function(e){e[e.none=0]="none",e[e.single=1]="single",e[e.multiple=2]="multiple"}(Ws||(Ws={})),function(e){e[e.horizontal=0]="horizontal",e[e.vertical=1]="vertical"}(Us||(Us={}));var Gs,js=function(){function e(e){this._selection=e.selection,this._dragEnterCounts={},this._activeTargets={},this._lastId=0,this._initialized=!1}return e.prototype.dispose=function(){this._events&&this._events.dispose()},e.prototype.subscribe=function(e,t,n){var o=this;if(!this._initialized){this._events=new Ii(this);var r=cn();r&&(this._events.on(r.body,"mouseup",this._onMouseUp.bind(this),!0),this._events.on(r,"mouseup",this._onDocumentMouseUp.bind(this),!0)),this._initialized=!0}var i,a,s,l,u,c,d,p,f,h,m=n.key,g=void 0===m?""+ ++this._lastId:m,v=[];if(n&&e){var y=n.eventMap,b=n.context,_=n.updateDropState,C={root:e,options:n,key:g};if(p=this._isDraggable(C),f=this._isDroppable(C),(p||f)&&y)for(var S=0,k=y;S<k.length;S++){var x=k[S],w={callback:x.callback.bind(null,b),eventName:x.eventName};v.push(w),this._events.on(e,w.eventName,w.callback)}f&&(a=function(e){e.isHandled||(e.isHandled=!0,o._dragEnterCounts[g]--,0===o._dragEnterCounts[g]&&_(!1,e))},s=function(e){e.preventDefault(),e.isHandled||(e.isHandled=!0,o._dragEnterCounts[g]++,1===o._dragEnterCounts[g]&&_(!0,e))},l=function(e){o._dragEnterCounts[g]=0,_(!1,e)},u=function(e){o._dragEnterCounts[g]=0,_(!1,e),n.onDrop&&n.onDrop(n.context.data,e)},c=function(e){e.preventDefault(),n.onDragOver&&n.onDragOver(n.context.data,e)},this._dragEnterCounts[g]=0,t.on(e,"dragenter",s),t.on(e,"dragleave",a),t.on(e,"dragend",l),t.on(e,"drop",u),t.on(e,"dragover",c)),p&&(d=this._onMouseDown.bind(this,C),l=this._onDragEnd.bind(this,C),i=function(t){var r=n;r&&r.onDragStart&&r.onDragStart(r.context.data,r.context.index,o._selection.getSelection(),t),o._isDragging=!0,t.dataTransfer&&t.dataTransfer.setData("id",e.id)},t.on(e,"dragstart",i),t.on(e,"mousedown",d),t.on(e,"dragend",l)),h={target:C,dispose:function(){if(o._activeTargets[g]===h&&delete o._activeTargets[g],e){for(var n=0,r=v;n<r.length;n++){var m=r[n];o._events.off(e,m.eventName,m.callback)}f&&(t.off(e,"dragenter",s),t.off(e,"dragleave",a),t.off(e,"dragend",l),t.off(e,"dragover",c),t.off(e,"drop",u)),p&&(t.off(e,"dragstart",i),t.off(e,"mousedown",d),t.off(e,"dragend",l))}}},this._activeTargets[g]=h}return{key:g,dispose:function(){h&&h.dispose()}}},e.prototype.unsubscribe=function(e,t){var n=this._activeTargets[t];n&&n.dispose()},e.prototype._onDragEnd=function(e,t){var n=e.options;n.onDragEnd&&n.onDragEnd(n.context.data,t)},e.prototype._onMouseUp=function(e){if(this._isDragging=!1,this._dragData){for(var t=0,n=Object.keys(this._activeTargets);t<n.length;t++){var o=n[t],r=this._activeTargets[o];r.target.root&&(this._events.off(r.target.root,"mousemove"),this._events.off(r.target.root,"mouseleave"))}this._dragData.dropTarget&&(Ii.raise(this._dragData.dropTarget.root,"dragleave"),Ii.raise(this._dragData.dropTarget.root,"drop"))}this._dragData=null},e.prototype._onDocumentMouseUp=function(e){var t=cn();t&&e.target===t.documentElement&&this._onMouseUp(e)},e.prototype._onMouseMove=function(e,t){var n=t.buttons,o=void 0===n?1:n;if(this._dragData&&1!==o)this._onMouseUp(t);else{var r=e.root,i=e.key;this._isDragging&&this._isDroppable(e)&&this._dragData&&this._dragData.dropTarget&&this._dragData.dropTarget.key!==i&&!this._isChild(r,this._dragData.dropTarget.root)&&this._dragEnterCounts[this._dragData.dropTarget.key]>0&&(Ii.raise(this._dragData.dropTarget.root,"dragleave"),Ii.raise(r,"dragenter"),this._dragData.dropTarget=e)}},e.prototype._onMouseLeave=function(e,t){this._isDragging&&this._dragData&&this._dragData.dropTarget&&this._dragData.dropTarget.key===e.key&&(Ii.raise(e.root,"dragleave"),this._dragData.dropTarget=void 0)},e.prototype._onMouseDown=function(e,t){if(0===t.button)if(this._isDraggable(e)){this._dragData={clientX:t.clientX,clientY:t.clientY,eventTarget:t.target,dragTarget:e};for(var n=0,o=Object.keys(this._activeTargets);n<o.length;n++){var r=o[n],i=this._activeTargets[r];i.target.root&&(this._events.on(i.target.root,"mousemove",this._onMouseMove.bind(this,i.target)),this._events.on(i.target.root,"mouseleave",this._onMouseLeave.bind(this,i.target)))}}else this._dragData=null},e.prototype._isChild=function(e,t){for(;t&&t.parentElement;){if(t.parentElement===e)return!0;t=t.parentElement}return!1},e.prototype._isDraggable=function(e){var t=e.options;return!(!t.canDrag||!t.canDrag(t.context.data))},e.prototype._isDroppable=function(e){var t=e.options,n=this._dragData&&this._dragData.dragTarget?this._dragData.dragTarget.options.context:void 0;return!(!t.canDrop||!t.canDrop(t.context,n))},e}(),qs=pi(),Qs=function(t){function n(n){var o=t.call(this,n)||this;return o._root=e.createRef(),o._onRenderColumnHeaderTooltip=function(t){return e.createElement("span",{className:t.hostClassName},t.children)},o._onColumnClick=function(e){var t=o.props,n=t.onColumnClick,r=t.column;r.columnActionsMode!==Zi.disabled&&(r.onColumnClick&&r.onColumnClick(e,r),n&&n(e,r))},o._onDragStart=function(e,t,n,r){var i=o._classNames;t&&(o._updateHeaderDragInfo(t),o._root.current.classList.add(i.borderWhileDragging),o._async.setTimeout((function(){o._root.current&&o._root.current.classList.add(i.noBorderWhileDragging)}),20))},o._onDragEnd=function(e,t){var n=o._classNames;t&&o._updateHeaderDragInfo(-1,t),o._root.current.classList.remove(n.borderWhileDragging),o._root.current.classList.remove(n.noBorderWhileDragging)},o._updateHeaderDragInfo=function(e,t){o.props.setDraggedItemIndex&&o.props.setDraggedItemIndex(e),o.props.updateDragInfo&&o.props.updateDragInfo({itemIndex:e},t)},o._onColumnContextMenu=function(e){var t=o.props,n=t.onColumnContextMenu,r=t.column;r.onColumnContextMenu&&(r.onColumnContextMenu(r,e),e.preventDefault()),n&&(n(r,e),e.preventDefault())},o._onRootMouseDown=function(e){o.props.isDraggable&&0===e.button&&e.stopPropagation()},gi(o),o._async=new ta(o),o._events=new Ii(o),o}return $e(n,t),n.prototype.render=function(){var t=this.props,n=t.column,o=t.columnIndex,r=t.parentId,i=t.isDraggable,a=t.styles,s=t.theme,l=t.cellStyleProps,u=void 0===l?Ds:l,c=t.useFastIcons,d=void 0===c||c,p=this.props.onRenderColumnHeaderTooltip,f=void 0===p?this._onRenderColumnHeaderTooltip:p;this._classNames=qs(a,{theme:s,headerClassName:n.headerClassName,iconClassName:n.iconClassName,isActionable:n.columnActionsMode!==Zi.disabled,isEmpty:!n.name,isIconVisible:n.isSorted||n.isGrouped||n.isFiltered,isPadded:n.isPadded,isIconOnly:n.isIconOnly,cellStyleProps:u,transitionDurationDrag:200,transitionDurationDrop:1500});var h=this._classNames,m=d?Qa:es;return e.createElement(e.Fragment,null,e.createElement("div",{key:n.key,ref:this._root,role:"columnheader","aria-sort":n.isSorted?n.isSortedDescending?"descending":"ascending":"none","aria-colindex":o,className:h.root,"data-is-draggable":i,draggable:i,style:{width:n.calculatedWidth+u.cellLeftPadding+u.cellRightPadding+(n.isPadded?u.cellExtraRightPadding:0)},"data-automationid":"ColumnsHeaderColumn","data-item-key":n.key},i&&e.createElement(m,{iconName:"GripperBarVertical",className:h.gripperBarVerticalStyle}),f({hostClassName:h.cellTooltip,id:r+"-"+n.key+"-tooltip",setAriaDescribedBy:!1,column:n,content:n.columnActionsMode!==Zi.disabled?n.ariaLabel:"",children:e.createElement("span",{id:r+"-"+n.key,"aria-label":n.isIconOnly?n.name:void 0,"aria-labelledby":n.isIconOnly?void 0:r+"-"+n.key+"-name",className:h.cellTitle,"data-is-focusable":n.columnActionsMode!==Zi.disabled,role:n.columnActionsMode===Zi.disabled||void 0===n.onColumnClick&&void 0===this.props.onColumnClick?void 0:"button","aria-describedby":!this.props.onRenderColumnHeaderTooltip&&this._hasAccessibleLabel()?r+"-"+n.key+"-tooltip":void 0,onContextMenu:this._onColumnContextMenu,onClick:this._onColumnClick,"aria-haspopup":n.columnActionsMode===Zi.hasDropdown,"aria-expanded":n.columnActionsMode===Zi.hasDropdown?!!n.isMenuOpen:void 0},e.createElement("span",{id:r+"-"+n.key+"-name",className:h.cellName},(n.iconName||n.iconClassName)&&e.createElement(m,{className:h.iconClassName,iconName:n.iconName}),n.isIconOnly?e.createElement("span",{className:h.accessibleLabel},n.name):n.name),n.isFiltered&&e.createElement(m,{className:h.nearIcon,iconName:"Filter"}),n.isSorted&&e.createElement(m,{className:h.sortIcon,iconName:n.isSortedDescending?"SortDown":"SortUp"}),n.isGrouped&&e.createElement(m,{className:h.nearIcon,iconName:"GroupedDescending"}),n.columnActionsMode===Zi.hasDropdown&&!n.isIconOnly&&e.createElement(m,{"aria-hidden":!0,className:h.filterChevron,iconName:"ChevronDown"}))},this._onRenderColumnHeaderTooltip)),this.props.onRenderColumnHeaderTooltip?null:this._renderAccessibleLabel())},n.prototype.componentDidMount=function(){var e=this;this.props.dragDropHelper&&this.props.isDraggable&&this._addDragDropHandling();var t=this._classNames;this.props.isDropped&&(this._root.current&&(this._root.current.classList.add(t.borderAfterDropping),this._async.setTimeout((function(){e._root.current&&e._root.current.classList.add(t.noBorderAfterDropping)}),20)),this._async.setTimeout((function(){e._root.current&&(e._root.current.classList.remove(t.borderAfterDropping),e._root.current.classList.remove(t.noBorderAfterDropping))}),1520))},n.prototype.componentWillUnmount=function(){this._dragDropSubscription&&(this._dragDropSubscription.dispose(),delete this._dragDropSubscription),this._async.dispose(),this._events.dispose()},n.prototype.componentDidUpdate=function(){!this._dragDropSubscription&&this.props.dragDropHelper&&this.props.isDraggable&&this._addDragDropHandling(),this._dragDropSubscription&&!this.props.isDraggable&&(this._dragDropSubscription.dispose(),this._events.off(this._root.current,"mousedown"),delete this._dragDropSubscription)},n.prototype._getColumnDragDropOptions=function(){var e=this,t=this.props.columnIndex;return{selectionIndex:t,context:{data:t,index:t},canDrag:function(){return e.props.isDraggable},canDrop:function(){return!1},onDragStart:this._onDragStart,updateDropState:function(){},onDrop:function(){},onDragEnd:this._onDragEnd}},n.prototype._hasAccessibleLabel=function(){var e=this.props.column;return!!(e.ariaLabel||e.filterAriaLabel||e.sortAscendingAriaLabel||e.sortDescendingAriaLabel||e.groupAriaLabel)},n.prototype._renderAccessibleLabel=function(){var t=this.props,n=t.column,o=t.parentId,r=this._classNames;return this._hasAccessibleLabel()&&!this.props.onRenderColumnHeaderTooltip?e.createElement("label",{key:n.key+"_label",id:o+"-"+n.key+"-tooltip",className:r.accessibleLabel},n.ariaLabel,n.isFiltered&&n.filterAriaLabel||null,n.isSorted&&(n.isSortedDescending?n.sortDescendingAriaLabel:n.sortAscendingAriaLabel)||null,n.isGrouped&&n.groupAriaLabel||null):null},n.prototype._addDragDropHandling=function(){this._dragDropSubscription=this.props.dragDropHelper.subscribe(this._root.current,this._events,this._getColumnDragDropOptions()),this._events.on(this._root.current,"mousedown",this._onRootMouseDown)},n}(e.Component),$s={isActionable:"is-actionable",cellIsCheck:"ms-DetailsHeader-cellIsCheck",collapseButton:"ms-DetailsHeader-collapseButton",isCollapsed:"is-collapsed",isAllSelected:"is-allSelected",isSelectAllHidden:"is-selectAllHidden",isResizingColumn:"is-resizingColumn",isEmpty:"is-empty",isIconVisible:"is-icon-visible",cellSizer:"ms-DetailsHeader-cellSizer",isResizing:"is-resizing",dropHintCircleStyle:"ms-DetailsHeader-dropHintCircleStyle",dropHintLineStyle:"ms-DetailsHeader-dropHintLineStyle",cellTitle:"ms-DetailsHeader-cellTitle",cellName:"ms-DetailsHeader-cellName",filterChevron:"ms-DetailsHeader-filterChevron",gripperBarVerticalStyle:"ms-DetailsColumn-gripperBar",nearIcon:"ms-DetailsColumn-nearIcon"},Zs=li(Qs,(function(e){var t,n=e.theme,o=e.headerClassName,r=e.iconClassName,i=e.isActionable,a=e.isEmpty,s=e.isIconVisible,l=e.isPadded,u=e.isIconOnly,c=e.cellStyleProps,d=void 0===c?Ds:c,p=e.transitionDurationDrag,f=e.transitionDurationDrop,h=n.semanticColors,m=n.palette,g=n.fonts,v=Oo($s,n),y={iconForegroundColor:h.bodySubtext,headerForegroundColor:h.bodyText,headerBackgroundColor:h.bodyBackground,dropdownChevronForegroundColor:m.neutralTertiary,resizerColor:m.neutralTertiaryAlt},b={color:y.iconForegroundColor,opacity:1,paddingLeft:8},_={outline:"1px solid "+m.themePrimary},C={outlineColor:"transparent"};return{root:[Fs(e),g.small,i&&[v.isActionable,{selectors:{":hover":{color:h.bodyText,background:h.listHeaderBackgroundHovered},":active":{background:h.listHeaderBackgroundPressed}}}],a&&[v.isEmpty,{textOverflow:"clip"}],s&&v.isIconVisible,l&&{paddingRight:d.cellExtraRightPadding+d.cellRightPadding},{selectors:{':hover i[data-icon-name="GripperBarVertical"]':{display:"block"}}},o],gripperBarVerticalStyle:{display:"none",position:"absolute",textAlign:"left",color:m.neutralTertiary,left:1},nearIcon:[v.nearIcon,b],sortIcon:[b,{paddingLeft:4,position:"relative",top:1}],iconClassName:[{color:y.iconForegroundColor,opacity:1},r],filterChevron:[v.filterChevron,{color:y.dropdownChevronForegroundColor,paddingLeft:6,verticalAlign:"middle",fontSize:g.small.fontSize}],cellTitle:[v.cellTitle,Fo(n),Ze({display:"flex",flexDirection:"row",justifyContent:"flex-start",alignItems:"stretch",boxSizing:"border-box",overflow:"hidden",padding:"0 "+d.cellRightPadding+"px 0 "+d.cellLeftPadding+"px"},u?{alignContent:"flex-end",maxHeight:"100%",flexWrap:"wrap-reverse"}:{})],cellName:[v.cellName,{flex:"0 1 auto",overflow:"hidden",textOverflow:"ellipsis",fontWeight:ko.semibold,fontSize:g.medium.fontSize},u&&{selectors:(t={},t["."+v.nearIcon]={paddingLeft:0},t)}],cellTooltip:{display:"block",position:"absolute",top:0,left:0,bottom:0,right:0},accessibleLabel:Lo,borderWhileDragging:_,noBorderWhileDragging:[C,{transition:"outline "+p+"ms ease"}],borderAfterDropping:_,noBorderAfterDropping:[C,{transition:"outline  "+f+"ms ease"}]}}),void 0,{scope:"DetailsColumn"});!function(e){e[e.none=0]="none",e[e.hidden=1]="hidden",e[e.visible=2]="visible"}(Gs||(Gs={}));var Xs=pi(),Ys=[];function Js(e,t,n,o){return e?t<=n&&t>=o:t>=n&&t<=o}function el(e,t,n){return e?t>=n:t<=n}function tl(e,t,n){return e?t<=n:t>=n}function nl(e){e.stopPropagation()}var ol=li(function(t){function n(n){var o=t.call(this,n)||this;return o._rootElement=e.createRef(),o._rootComponent=e.createRef(),o._draggedColumnIndex=-1,o._dropHintDetails={},o._updateDroppingState=function(e,t){o._draggedColumnIndex>=0&&"drop"!==t.type&&!e&&o._resetDropHints()},o._onDragOver=function(e,t){o._draggedColumnIndex>=0&&(t.stopPropagation(),o._computeDropHintToBeShown(t.clientX))},o._onDrop=function(e,t){var n=o._getColumnReorderProps();if(o._draggedColumnIndex>=0&&t){var r=o._draggedColumnIndex>o._currentDropHintIndex?o._currentDropHintIndex:o._currentDropHintIndex-1,i=o._isValidCurrentDropHintIndex();if(t.stopPropagation(),i)if(o._onDropIndexInfo.sourceIndex=o._draggedColumnIndex,o._onDropIndexInfo.targetIndex=r,n.onColumnDrop){var a={draggedIndex:o._draggedColumnIndex,targetIndex:r};n.onColumnDrop(a)}else n.handleColumnReorder&&n.handleColumnReorder(o._draggedColumnIndex,r)}o._resetDropHints(),o._dropHintDetails={},o._draggedColumnIndex=-1},o._updateDragInfo=function(e,t){var n=o._getColumnReorderProps(),r=e.itemIndex;if(r>=0)o._draggedColumnIndex=o._isCheckboxColumnHidden()?r-1:r-2,o._getDropHintPositions(),n.onColumnDragStart&&n.onColumnDragStart(!0);else if(t&&o._draggedColumnIndex>=0&&(o._resetDropHints(),o._draggedColumnIndex=-1,o._dropHintDetails={},n.onColumnDragEnd)){var i=o._isEventOnHeader(t);n.onColumnDragEnd({dropLocation:i},t)}},o._getDropHintPositions=function(){for(var e,t=o.props.columns,n=void 0===t?Ys:t,r=o._getColumnReorderProps(),i=0,a=0,s=r.frozenColumnCountFromStart||0,l=r.frozenColumnCountFromEnd||0,u=s;u<n.length-l+1;u++)if(o._rootElement.current){var c=o._rootElement.current.querySelectorAll("#columnDropHint_"+u)[0];if(c)if(u===s)i=c.offsetLeft,a=c.offsetLeft,e=c;else{var d=(c.offsetLeft+i)/2;o._dropHintDetails[u-1]={originX:i,startX:a,endX:d,dropHintElementRef:e},a=d,e=c,i=c.offsetLeft,u===n.length-l&&(o._dropHintDetails[u]={originX:i,startX:a,endX:c.offsetLeft,dropHintElementRef:e})}}},o._computeDropHintToBeShown=function(e){var t=gn(o.props.theme);if(o._rootElement.current){var n=e-o._rootElement.current.getBoundingClientRect().left,r=o._currentDropHintIndex;if(o._isValidCurrentDropHintIndex()&&Js(t,n,o._dropHintDetails[r].startX,o._dropHintDetails[r].endX))return;var i=o.props.columns,a=void 0===i?Ys:i,s=o._getColumnReorderProps(),l=s.frozenColumnCountFromStart||0,u=s.frozenColumnCountFromEnd||0,c=l,d=a.length-u,p=-1;if(el(t,n,o._dropHintDetails[c].endX)?p=c:tl(t,n,o._dropHintDetails[d].startX)?p=d:o._isValidCurrentDropHintIndex()&&(o._dropHintDetails[r+1]&&Js(t,n,o._dropHintDetails[r+1].startX,o._dropHintDetails[r+1].endX)?p=r+1:o._dropHintDetails[r-1]&&Js(t,n,o._dropHintDetails[r-1].startX,o._dropHintDetails[r-1].endX)&&(p=r-1)),-1===p)for(var f=l,h=d;f<h;){var m=Math.ceil((h+f)/2);if(Js(t,n,o._dropHintDetails[m].startX,o._dropHintDetails[m].endX)){p=m;break}el(t,n,o._dropHintDetails[m].originX)?h=m:tl(t,n,o._dropHintDetails[m].originX)&&(f=m)}p===o._draggedColumnIndex||p===o._draggedColumnIndex+1?o._isValidCurrentDropHintIndex()&&o._resetDropHints():r!==p&&p>=0&&(o._resetDropHints(),o._updateDropHintElement(o._dropHintDetails[p].dropHintElementRef,"inline-block"),o._currentDropHintIndex=p)}},o._renderColumnSizer=function(t){var n,r=t.columnIndex,i=o.props.columns,a=void 0===i?Ys:i,s=a[r],l=o.state.columnResizeDetails,u=o._classNames;return s.isResizable?e.createElement("div",{key:s.key+"_sizer","aria-hidden":!0,role:"button","data-is-focusable":!1,onClick:nl,"data-sizer-index":r,onBlur:o._onSizerBlur,className:ra(u.cellSizer,r<a.length-1?u.cellSizerStart:u.cellSizerEnd,(n={},n[u.cellIsResizing]=l&&l.columnIndex===r,n)),onDoubleClick:o._onSizerDoubleClick.bind(o,r)}):null},o._onRenderColumnHeaderTooltip=function(t){return e.createElement("span",{className:t.hostClassName},t.children)},o._onSelectAllClicked=function(){var e=o.props.selection;e&&e.toggleAllSelected()},o._onRootMouseDown=function(e){var t=e.target.getAttribute("data-sizer-index"),n=Number(t),r=o.props.columns,i=void 0===r?Ys:r;null!==t&&0===e.button&&(o.setState({columnResizeDetails:{columnIndex:n,columnMinWidth:i[n].calculatedWidth,originX:e.clientX}}),e.preventDefault(),e.stopPropagation())},o._onRootMouseMove=function(e){var t=o.state,n=t.columnResizeDetails,r=t.isSizing;n&&!r&&e.clientX!==n.originX&&o.setState({isSizing:!0})},o._onRootKeyDown=function(e){var t=o.state,n=t.columnResizeDetails,r=t.isSizing,i=o.props,a=i.columns,s=void 0===a?Ys:a,l=i.onColumnResized,u=e.target.getAttribute("data-sizer-index");if(u&&!r){var c=Number(u);if(n){var d=void 0;e.which===$t?(o.setState({columnResizeDetails:void 0}),e.preventDefault(),e.stopPropagation()):e.which===on?d=gn(o.props.theme)?1:-1:e.which===an&&(d=gn(o.props.theme)?-1:1),d&&(e.shiftKey||(d*=10),o.setState({columnResizeDetails:Ze(Ze({},n),{columnMinWidth:n.columnMinWidth+d})}),l&&l(s[c],n.columnMinWidth+d,c),e.preventDefault(),e.stopPropagation())}else e.which===$t&&(o.setState({columnResizeDetails:{columnIndex:c,columnMinWidth:s[c].calculatedWidth}}),e.preventDefault(),e.stopPropagation())}},o._onSizerMouseMove=function(e){var t=e.buttons,n=o.props,r=n.onColumnIsSizingChanged,i=n.onColumnResized,a=n.columns,s=void 0===a?Ys:a,l=o.state.columnResizeDetails;if(void 0===t||1===t){if(e.clientX!==l.originX&&r&&r(s[l.columnIndex],!0),i){var u=e.clientX-l.originX;gn(o.props.theme)&&(u=-u),i(s[l.columnIndex],l.columnMinWidth+u,l.columnIndex)}}else o._onSizerMouseUp(e)},o._onSizerBlur=function(e){o.state.columnResizeDetails&&o.setState({columnResizeDetails:void 0,isSizing:!1})},o._onSizerMouseUp=function(e){var t=o.props,n=t.columns,r=void 0===n?Ys:n,i=t.onColumnIsSizingChanged,a=o.state.columnResizeDetails;o.setState({columnResizeDetails:void 0,isSizing:!1}),i&&i(r[a.columnIndex],!1)},o._onToggleCollapseAll=function(){var e=o.props.onToggleCollapseAll,t=!o.state.isAllCollapsed;o.setState({isAllCollapsed:t}),e&&e(t)},gi(o),o._events=new Ii(o),o.state={columnResizeDetails:void 0,isAllCollapsed:o.props.isAllCollapsed,isAllSelected:!!o.props.selection&&o.props.selection.isAllSelected()},o._onDropIndexInfo={sourceIndex:-1,targetIndex:-1},o._id=Pi("header"),o._currentDropHintIndex=-1,o._dragDropHelper=new js({selection:{getSelection:function(){}},minimumPixelsForDrag:o.props.minimumPixelsForDrag}),o}return $e(n,t),n.prototype.componentDidMount=function(){var e=this.props.selection;this._events.on(e,Ks,this._onSelectionChanged),this._rootElement.current&&(this._events.on(this._rootElement.current,"mousedown",this._onRootMouseDown),this._events.on(this._rootElement.current,"keydown",this._onRootKeyDown),this._getColumnReorderProps()&&(this._subscriptionObject=this._dragDropHelper.subscribe(this._rootElement.current,this._events,this._getHeaderDragDropOptions())))},n.prototype.componentDidUpdate=function(e){if(this._getColumnReorderProps()?!this._subscriptionObject&&this._rootElement.current&&(this._subscriptionObject=this._dragDropHelper.subscribe(this._rootElement.current,this._events,this._getHeaderDragDropOptions())):this._subscriptionObject&&(this._subscriptionObject.dispose(),delete this._subscriptionObject),this.props!==e&&this._onDropIndexInfo.sourceIndex>=0&&this._onDropIndexInfo.targetIndex>=0){var t=e.columns,n=void 0===t?Ys:t,o=this.props.columns,r=void 0===o?Ys:o;n[this._onDropIndexInfo.sourceIndex].key===r[this._onDropIndexInfo.targetIndex].key&&(this._onDropIndexInfo={sourceIndex:-1,targetIndex:-1})}this.props.isAllCollapsed!==e.isAllCollapsed&&this.setState({isAllCollapsed:this.props.isAllCollapsed})},n.prototype.componentWillUnmount=function(){this._subscriptionObject&&(this._subscriptionObject.dispose(),delete this._subscriptionObject),this._dragDropHelper.dispose(),this._events.dispose()},n.prototype.render=function(){var t=this,n=this.props,o=n.columns,r=void 0===o?Ys:o,i=n.ariaLabel,a=n.ariaLabelForToggleAllGroupsButton,s=n.ariaLabelForSelectAllCheckbox,l=n.selectAllVisibility,u=n.ariaLabelForSelectionColumn,c=n.indentWidth,d=n.onColumnClick,p=n.onColumnContextMenu,f=n.onRenderColumnHeaderTooltip,h=void 0===f?this._onRenderColumnHeaderTooltip:f,m=n.styles,g=n.selectionMode,v=n.theme,y=n.onRenderDetailsCheckbox,b=n.groupNestingDepth,_=n.useFastIcons,C=n.checkboxVisibility,S=n.className,k=this.state,x=k.isAllSelected,w=k.columnResizeDetails,E=k.isSizing,I=k.isAllCollapsed,T=l!==Gs.none,D=l===Gs.hidden,P=C===ea.always,M=this._getColumnReorderProps(),R=M&&M.frozenColumnCountFromStart?M.frozenColumnCountFromStart:0,F=M&&M.frozenColumnCountFromEnd?M.frozenColumnCountFromEnd:0;this._classNames=Xs(m,{theme:v,isAllSelected:x,isSelectAllHidden:l===Gs.hidden,isResizingColumn:!!w&&E,isSizing:E,isAllCollapsed:I,isCheckboxHidden:D,className:S});var N=this._classNames,A=_?Qa:es,L=gn(v);return e.createElement(Ka,{role:"row","aria-label":i,className:N.root,componentRef:this._rootComponent,elementRef:this._rootElement,onMouseMove:this._onRootMouseMove,"data-automationid":"DetailsHeader",direction:wa.horizontal},T?[e.createElement("div",{key:"__checkbox",className:N.cellIsCheck,"aria-labelledby":this._id+"-check",onClick:D?void 0:this._onSelectAllClicked,"aria-colindex":1,role:"columnheader"},h({hostClassName:N.checkTooltip,id:this._id+"-checkTooltip",setAriaDescribedBy:!1,content:s,children:e.createElement(Vs,{id:this._id+"-check","aria-label":g===Ws.multiple?s:u,"aria-describedby":D?u&&!this.props.onRenderColumnHeaderTooltip?this._id+"-checkTooltip":void 0:s&&!this.props.onRenderColumnHeaderTooltip?this._id+"-checkTooltip":void 0,"data-is-focusable":!D||void 0,isHeader:!0,selected:x,anySelected:!1,canSelect:!D,className:N.check,onRenderDetailsCheckbox:y,useFastIcons:_,isVisible:P})},this._onRenderColumnHeaderTooltip)),this.props.onRenderColumnHeaderTooltip?null:s&&!D?e.createElement("label",{key:"__checkboxLabel",id:this._id+"-checkTooltip",className:N.accessibleLabel,"aria-hidden":!0},s):u&&D?e.createElement("label",{key:"__checkboxLabel",id:this._id+"-checkTooltip",className:N.accessibleLabel,"aria-hidden":!0},u):null]:null,b>0&&this.props.collapseAllVisibility===_s.visible?e.createElement("div",{className:N.cellIsGroupExpander,onClick:this._onToggleCollapseAll,"data-is-focusable":!0,"aria-label":a,"aria-expanded":!I,role:"columnheader"},e.createElement(A,{className:N.collapseButton,iconName:L?"ChevronLeftMed":"ChevronRightMed"})):null,e.createElement(ks,{indentWidth:c,role:"gridcell",count:b-1}),r.map((function(n,o){var i=!!M&&(o>=R&&o<r.length-F);return[M&&(i||o===r.length-F)&&t._renderDropHint(o),e.createElement(Zs,{column:n,styles:n.styles,key:n.key,columnIndex:(T?2:1)+o,parentId:t._id,isDraggable:i,updateDragInfo:t._updateDragInfo,dragDropHelper:t._dragDropHelper,onColumnClick:d,onColumnContextMenu:p,onRenderColumnHeaderTooltip:t.props.onRenderColumnHeaderTooltip,isDropped:t._onDropIndexInfo.targetIndex===o,cellStyleProps:t.props.cellStyleProps,useFastIcons:_}),t._renderColumnDivider(o)]})),M&&0===F&&this._renderDropHint(r.length),E&&e.createElement(Ss,null,e.createElement("div",{className:N.sizingOverlay,onMouseMove:this._onSizerMouseMove,onMouseUp:this._onSizerMouseUp})))},n.prototype.focus=function(){var e;return!!(null===(e=this._rootComponent.current)||void 0===e?void 0:e.focus())},n.prototype._getColumnReorderProps=function(){var e=this.props,t=e.columnReorderOptions;return e.columnReorderProps||t&&Ze(Ze({},t),{onColumnDragEnd:void 0})},n.prototype._getHeaderDragDropOptions=function(){return{selectionIndex:1,context:{data:this,index:0},canDrag:function(){return!1},canDrop:function(){return!0},onDragStart:function(){},updateDropState:this._updateDroppingState,onDrop:this._onDrop,onDragEnd:function(){},onDragOver:this._onDragOver}},n.prototype._isValidCurrentDropHintIndex=function(){return this._currentDropHintIndex>=0},n.prototype._isCheckboxColumnHidden=function(){var e=this.props,t=e.selectionMode,n=e.checkboxVisibility;return t===Ws.none||n===ea.hidden},n.prototype._resetDropHints=function(){this._currentDropHintIndex>=0&&(this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef,"none"),this._currentDropHintIndex=-1)},n.prototype._updateDropHintElement=function(e,t){e.childNodes[1].style.display=t,e.childNodes[0].style.display=t},n.prototype._isEventOnHeader=function(e){if(this._rootElement.current){var t=this._rootElement.current.getBoundingClientRect();if(e.clientX>t.left&&e.clientX<t.right&&e.clientY>t.top&&e.clientY<t.bottom)return Yi.header}},n.prototype._renderColumnDivider=function(e){var t=this.props.columns,n=(void 0===t?Ys:t)[e],o=n.onRenderDivider;return o?o({column:n,columnIndex:e},this._renderColumnSizer):this._renderColumnSizer({column:n,columnIndex:e})},n.prototype._renderDropHint=function(t){var n=this._classNames,o=this.props.useFastIcons?Qa:es;return e.createElement("div",{key:"dropHintKey",className:n.dropHintStyle,id:"columnDropHint_"+t},e.createElement("div",{role:"presentation",key:"dropHintCircleKey",className:n.dropHintCaretStyle,"data-is-focusable":!1,"data-sizer-index":t,"aria-hidden":!0},e.createElement(o,{iconName:"CircleShapeSolid"})),e.createElement("div",{key:"dropHintLineKey","aria-hidden":!0,"data-is-focusable":!1,"data-sizer-index":t,className:n.dropHintLineStyle}))},n.prototype._onSizerDoubleClick=function(e,t){var n=this.props,o=n.onColumnAutoResized,r=n.columns;o&&o((void 0===r?Ys:r)[e],e)},n.prototype._onSelectionChanged=function(){var e=!!this.props.selection&&this.props.selection.isAllSelected();this.state.isAllSelected!==e&&this.setState({isAllSelected:e})},n.defaultProps={selectAllVisibility:Gs.visible,collapseAllVisibility:_s.visible,useFastIcons:!0},n}(e.Component),(function(e){var t,n,o,r,i=e.theme,a=e.className,s=e.isAllSelected,l=e.isResizingColumn,u=e.isSizing,c=e.isAllCollapsed,d=e.cellStyleProps,p=void 0===d?Ds:d,f=i.semanticColors,h=i.palette,m=i.fonts,g=Oo(Rs,i),v={iconForegroundColor:f.bodySubtext,headerForegroundColor:f.bodyText,headerBackgroundColor:f.bodyBackground,dropdownChevronForegroundColor:h.neutralTertiary,resizerColor:h.neutralTertiaryAlt},y={opacity:1,transition:"opacity 0.3s linear"},b=Fs(e);return{root:[g.root,m.small,{display:"inline-block",background:v.headerBackgroundColor,position:"relative",minWidth:"100%",verticalAlign:"top",height:42,lineHeight:42,whiteSpace:"nowrap",boxSizing:"content-box",paddingBottom:"1px",paddingTop:"16px",borderBottom:"1px solid "+f.bodyDivider,cursor:"default",userSelect:"none",selectors:(t={},t["&:hover ."+g.check]={opacity:1},t["& ."+g.tooltipHost+" ."+g.checkTooltip]={display:"block"},t)},s&&g.isAllSelected,l&&g.isResizingColumn,a],check:[g.check,{height:42},{selectors:(n={},n[".ms-Fabric--isFocusVisible &:focus"]={opacity:1},n)}],cellWrapperPadded:{paddingRight:p.cellExtraRightPadding+p.cellRightPadding},cellIsCheck:[b,g.cellIsCheck,{position:"relative",padding:0,margin:0,display:"inline-flex",alignItems:"center",border:"none"},s&&{opacity:1}],cellIsGroupExpander:[b,{display:"inline-flex",alignItems:"center",justifyContent:"center",fontSize:m.small.fontSize,padding:0,border:"none",width:36,color:h.neutralSecondary,selectors:{":hover":{backgroundColor:h.neutralLighter},":active":{backgroundColor:h.neutralLight}}}],cellIsActionable:{selectors:{":hover":{color:f.bodyText,background:f.listHeaderBackgroundHovered},":active":{background:f.listHeaderBackgroundPressed}}},cellIsEmpty:{textOverflow:"clip"},cellSizer:[g.cellSizer,{selectors:{"&::-moz-focus-inner":{border:0},"&":{outline:"transparent"}}},{display:"inline-block",position:"relative",cursor:"ew-resize",bottom:0,top:0,overflow:"hidden",height:"inherit",background:"transparent",zIndex:1,width:16,selectors:(o={":after":{content:'""',position:"absolute",top:0,bottom:0,width:1,background:v.resizerColor,opacity:0,left:"50%"},":focus:after":y,":hover:after":y},o["&."+g.isResizing+":after"]=[y,{boxShadow:"0 0 5px 0 rgba(0, 0, 0, 0.4)"}],o)}],cellIsResizing:g.isResizing,cellSizerStart:{margin:"0 -8px"},cellSizerEnd:{margin:0,marginLeft:-16},collapseButton:[g.collapseButton,{transformOrigin:"50% 50%",transition:"transform .1s linear"},c?[g.isCollapsed,{transform:"rotate(0deg)"}]:{transform:gn(i)?"rotate(-90deg)":"rotate(90deg)"}],checkTooltip:g.checkTooltip,sizingOverlay:u&&{position:"absolute",left:0,top:0,right:0,bottom:0,cursor:"ew-resize",background:"rgba(255, 255, 255, 0)",selectors:(r={},r[Eo]={background:"transparent",MsHighContrastAdjust:"none"},r)},accessibleLabel:Lo,dropHintCircleStyle:[g.dropHintCircleStyle,{display:"inline-block",visibility:"hidden",position:"absolute",bottom:0,height:9,width:9,borderRadius:"50%",marginLeft:-5,top:34,overflow:"visible",zIndex:10,border:"1px solid "+h.themePrimary,background:h.white}],dropHintCaretStyle:[g.dropHintCaretStyle,{display:"none",position:"absolute",top:-28,left:-6.5,fontSize:m.medium.fontSize,color:h.themePrimary,overflow:"visible",zIndex:10}],dropHintLineStyle:[g.dropHintLineStyle,{display:"none",position:"absolute",bottom:0,top:0,overflow:"hidden",height:42,width:1,background:h.themePrimary,zIndex:10}],dropHintStyle:{display:"inline-block",position:"absolute"}}}),void 0,{scope:"DetailsHeader"}),rl=function(t){var n=t.columns,o=t.columnStartIndex,r=t.rowClassNames,i=t.cellStyleProps,a=void 0===i?Ds:i,s=t.item,l=t.itemIndex,u=t.onRenderItemColumn,c=t.getCellValueKey,d=t.cellsByColumn,p=t.enableUpdateAnimations,f=e.useRef(),h=f.current||(f.current={});return e.createElement("div",{className:r.fields,"data-automationid":"DetailsRowFields",role:"presentation"},n.map((function(t,n){var i=void 0===t.calculatedWidth?"auto":t.calculatedWidth+a.cellLeftPadding+a.cellRightPadding+(t.isPadded?a.cellExtraRightPadding:0),f=t.onRender,m=void 0===f?u:f,g=t.getValueKey,v=void 0===g?c:g,y=d&&t.key in d?d[t.key]:m?m(s,l,t):function(e,t){var n=e&&t&&t.fieldName?e[t.fieldName]:"";return null==n&&(n=""),"boolean"==typeof n?n.toString():n}(s,t),b=h[t.key],_=p&&v?v(s,l,t):void 0,C=!1;void 0!==_&&void 0!==b&&_!==b&&(C=!0),h[t.key]=_;var S=t.key+(void 0!==_?"-"+_:"");return e.createElement("div",{key:S,role:t.isRowHeader?"rowheader":"gridcell","aria-readonly":!0,"aria-colindex":n+o+1,className:ra(t.className,t.isMultiline&&r.isMultiline,t.isRowHeader&&r.isRowHeader,r.cell,t.isPadded?r.cellPadded:r.cellUnpadded,C&&r.cellAnimation),style:{width:i},"data-automationid":"DetailsRowCell","data-automation-key":t.key},y)})))},il=pi(),al=[];function sl(e){var t,n,o,r,i=e.itemIndex,a=e.selection;return{isSelected:!!(null===(t=a)||void 0===t?void 0:t.isIndexSelected(i)),isSelectionModal:!!(null===(r=null===(n=a)||void 0===n?void 0:(o=n).isModal)||void 0===r?void 0:r.call(o))}}var ll=li(function(t){function n(n){var o=t.call(this,n)||this;return o._root=e.createRef(),o._cellMeasurer=e.createRef(),o._focusZone=e.createRef(),o._onSelectionChanged=function(){var e=sl(o.props);xi(e,o.state.selectionState)||o.setState({selectionState:e})},o._updateDroppingState=function(e,t){var n=o.state.isDropping,r=o.props,i=r.dragDropEvents,a=r.item;e?i.onDragEnter&&(o._droppingClassNames=i.onDragEnter(a,t)):i.onDragLeave&&i.onDragLeave(a,t),n!==e&&o.setState({isDropping:e})},gi(o),o._events=new Ii(o),o.state={selectionState:sl(n),columnMeasureInfo:void 0,isDropping:!1},o._droppingClassNames="",o}return $e(n,t),n.getDerivedStateFromProps=function(e,t){return Ze(Ze({},t),{selectionState:sl(e)})},n.prototype.componentDidMount=function(){var e=this.props,t=e.dragDropHelper,n=e.selection,o=e.item,r=e.onDidMount;t&&this._root.current&&(this._dragDropSubscription=t.subscribe(this._root.current,this._events,this._getRowDragDropOptions())),n&&this._events.on(n,Ks,this._onSelectionChanged),r&&o&&(this._onDidMountCalled=!0,r(this))},n.prototype.componentDidUpdate=function(e){var t=this.state,n=this.props,o=n.item,r=n.onDidMount,i=t.columnMeasureInfo;if(this.props.itemIndex===e.itemIndex&&this.props.item===e.item&&this.props.dragDropHelper===e.dragDropHelper||(this._dragDropSubscription&&(this._dragDropSubscription.dispose(),delete this._dragDropSubscription),this.props.dragDropHelper&&this._root.current&&(this._dragDropSubscription=this.props.dragDropHelper.subscribe(this._root.current,this._events,this._getRowDragDropOptions()))),i&&i.index>=0&&this._cellMeasurer.current){var a=this._cellMeasurer.current.getBoundingClientRect().width;i.onMeasureDone(a),this.setState({columnMeasureInfo:void 0})}o&&r&&!this._onDidMountCalled&&(this._onDidMountCalled=!0,r(this))},n.prototype.componentWillUnmount=function(){var e=this.props,t=e.item,n=e.onWillUnmount;n&&t&&n(this),this._dragDropSubscription&&(this._dragDropSubscription.dispose(),delete this._dragDropSubscription),this._events.dispose()},n.prototype.shouldComponentUpdate=function(e,t){if(this.props.useReducedRowRenderer){var n=sl(e);return this.state.selectionState.isSelected!==n.isSelected||!xi(this.props,e)}return!0},n.prototype.render=function(){var t=this.props,n=t.className,o=t.columns,r=void 0===o?al:o,i=t.dragDropEvents,a=t.item,s=t.itemIndex,l=t.onRenderCheck,u=void 0===l?this._onRenderCheck:l,c=t.onRenderDetailsCheckbox,d=t.onRenderItemColumn,p=t.getCellValueKey,f=t.selectionMode,h=t.rowWidth,m=void 0===h?0:h,g=t.checkboxVisibility,v=t.getRowAriaLabel,y=t.getRowAriaDescribedBy,b=t.checkButtonAriaLabel,_=t.checkboxCellClassName,C=t.rowFieldsAs,S=void 0===C?rl:C,k=t.selection,x=t.indentWidth,w=t.enableUpdateAnimations,E=t.compact,I=t.theme,T=t.styles,D=t.cellsByColumn,P=t.groupNestingDepth,M=t.useFastIcons,R=void 0===M||M,F=t.cellStyleProps,N=this.state,A=N.columnMeasureInfo,L=N.isDropping,B=this.state.selectionState,O=B.isSelected,H=void 0!==O&&O,z=B.isSelectionModal,W=void 0!==z&&z,U=i?!(!i.canDrag||!i.canDrag(a)):void 0,V=L?this._droppingClassNames||"is-dropping":"",K=v?v(a):void 0,G=y?y(a):void 0,j=!!k&&k.canSelectItem(a,s),q=f===Ws.multiple,Q=f!==Ws.none&&g!==ea.hidden,$=f===Ws.none?void 0:H;this._classNames=Ze(Ze({},this._classNames),il(T,{theme:I,isSelected:H,canSelect:!q,anySelected:W,checkboxCellClassName:_,droppingClassName:V,className:n,compact:E,enableUpdateAnimations:w,cellStyleProps:F}));var Z={isMultiline:this._classNames.isMultiline,isRowHeader:this._classNames.isRowHeader,cell:this._classNames.cell,cellAnimation:this._classNames.cellAnimation,cellPadded:this._classNames.cellPadded,cellUnpadded:this._classNames.cellUnpadded,fields:this._classNames.fields};xi(this._rowClassNames||{},Z)||(this._rowClassNames=Z);var X=e.createElement(S,{rowClassNames:this._rowClassNames,cellsByColumn:D,columns:r,item:a,itemIndex:s,columnStartIndex:(Q?1:0)+(P?1:0),onRenderItemColumn:d,getCellValueKey:p,enableUpdateAnimations:w,cellStyleProps:F});return e.createElement(Ka,Ze({"data-is-focusable":!0},Zr(this.props,$r),"boolean"==typeof U?{"data-is-draggable":U,draggable:U}:{},{direction:wa.horizontal,elementRef:this._root,componentRef:this._focusZone,role:"row","aria-label":K,"aria-describedby":G,className:this._classNames.root,"data-selection-index":s,"data-selection-touch-invoke":!0,"data-item-index":s,"aria-rowindex":s+1,"aria-level":P&&P+1||void 0,"data-automationid":"DetailsRow",style:{minWidth:m},"aria-selected":$,allowFocusRoot:!0}),Q&&e.createElement("div",{role:"gridcell","aria-colindex":1,"data-selection-toggle":!0,className:this._classNames.checkCell},u({selected:H,anySelected:W,"aria-label":b,canSelect:j,compact:E,className:this._classNames.check,theme:I,isVisible:g===ea.always,onRenderDetailsCheckbox:c,useFastIcons:R})),e.createElement(ks,{indentWidth:x,role:"gridcell",count:P-(this.props.collapseAllVisibility===_s.hidden?1:0)}),a&&X,A&&e.createElement("span",{role:"presentation",className:ra(this._classNames.cellMeasurer,this._classNames.cell),ref:this._cellMeasurer},e.createElement(S,{rowClassNames:this._rowClassNames,columns:[A.column],item:a,itemIndex:s,columnStartIndex:(Q?1:0)+(P?1:0)+r.length,onRenderItemColumn:d,getCellValueKey:p})),e.createElement("span",{role:"checkbox",className:this._classNames.checkCover,"aria-checked":H,"data-selection-toggle":!0}))},n.prototype.measureCell=function(e,t){var n=this.props.columns,o=Ze({},(void 0===n?al:n)[e]);o.minWidth=0,o.maxWidth=999999,delete o.calculatedWidth,this.setState({columnMeasureInfo:{index:e,column:o,onMeasureDone:t}})},n.prototype.focus=function(e){var t;return void 0===e&&(e=!1),!!(null===(t=this._focusZone.current)||void 0===t?void 0:t.focus(e))},n.prototype._onRenderCheck=function(t){return e.createElement(Vs,Ze({},t))},n.prototype._getRowDragDropOptions=function(){var e=this.props,t=e.item,n=e.itemIndex,o=e.dragDropEvents;return{eventMap:e.eventsToRegister,selectionIndex:n,context:{data:t,index:n},canDrag:o.canDrag,canDrop:o.canDrop,onDragStart:o.onDragStart,updateDropState:this._updateDroppingState,onDrop:o.onDrop,onDragEnd:o.onDragEnd,onDragOver:o.onDragOver}},n}(e.Component),(function(e){var t,n,o,r,i,a,s,l,u,c,d,p,f=e.theme,h=e.isSelected,m=e.canSelect,g=e.droppingClassName,v=e.anySelected,y=e.isCheckVisible,b=e.checkboxCellClassName,_=e.compact,C=e.className,S=e.cellStyleProps,k=void 0===S?Ds:S,x=e.enableUpdateAnimations,w=f.palette,E=f.fonts,I=w.neutralPrimary,T=w.white,D=w.neutralSecondary,P=w.neutralLighter,M=w.neutralLight,R=w.neutralDark,F=w.neutralQuaternaryAlt,N=f.semanticColors.focusBorder,A=Oo(Ts,f),L={defaultHeaderText:I,defaultMetaText:D,defaultBackground:T,defaultHoverHeaderText:R,defaultHoverMetaText:I,defaultHoverBackground:P,selectedHeaderText:R,selectedMetaText:I,selectedBackground:M,selectedHoverHeaderText:R,selectedHoverMetaText:I,selectedHoverBackground:F,focusHeaderText:R,focusMetaText:I,focusBackground:M,focusHoverBackground:F},B=[Fo(f,{inset:-1,borderColor:N,outlineColor:T}),A.isSelected,{color:L.selectedMetaText,background:L.selectedBackground,borderBottom:"1px solid "+T,selectors:(t={"&:before":{position:"absolute",display:"block",top:-1,height:1,bottom:0,left:0,right:0,content:"",borderTop:"1px solid "+T},"&:hover":{background:L.selectedHoverBackground,color:L.selectedHoverMetaText,selectors:(n={},n["."+A.cell+" "+Eo]={color:"HighlightText",selectors:{"> a":{color:"HighlightText"}}},n["."+A.isRowHeader]={color:L.selectedHoverHeaderText,selectors:(o={},o[Eo]={color:"HighlightText"},o)},n[Eo]={background:"Highlight"},n)},"&:focus":{background:L.focusBackground,selectors:(r={},r["."+A.cell]={color:L.focusMetaText,selectors:(i={},i[Eo]={color:"HighlightText",selectors:{"> a":{color:"HighlightText"}}},i)},r["."+A.isRowHeader]={color:L.focusHeaderText,selectors:(a={},a[Eo]={color:"HighlightText"},a)},r[Eo]={background:"Highlight"},r)}},t[Eo]={background:"Highlight",color:"HighlightText",MsHighContrastAdjust:"none",selectors:{a:{color:"HighlightText"}}},t["&:focus:hover"]={background:L.focusHoverBackground},t)}],O=[A.isContentUnselectable,{userSelect:"none",cursor:"default"}],H={minHeight:Ms.compactRowHeight,border:0},z={minHeight:Ms.compactRowHeight,paddingTop:Ms.compactRowVerticalPadding,paddingBottom:Ms.compactRowVerticalPadding,paddingLeft:k.cellLeftPadding+"px"},W=[Fo(f,{inset:-1}),A.cell,{display:"inline-block",position:"relative",boxSizing:"border-box",minHeight:Ms.rowHeight,verticalAlign:"top",whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",paddingTop:Ms.rowVerticalPadding,paddingBottom:Ms.rowVerticalPadding,paddingLeft:k.cellLeftPadding+"px",selectors:(s={"& > button":{maxWidth:"100%"}},s["[data-is-focusable='true']"]=Fo(f,{inset:-1,borderColor:D,outlineColor:T}),s)},h&&{selectors:(l={},l[Eo]={background:"Highlight",color:"HighlightText",MsHighContrastAdjust:"none",selectors:{a:{color:"HighlightText"}}},l)},_&&z];return{root:[A.root,wo.fadeIn400,g,f.fonts.small,y&&A.isCheckVisible,Fo(f,{borderColor:N,outlineColor:T}),{borderBottom:"1px solid "+P,background:L.defaultBackground,color:L.defaultMetaText,display:"inline-flex",minWidth:"100%",minHeight:Ms.rowHeight,whiteSpace:"nowrap",padding:0,boxSizing:"border-box",verticalAlign:"top",textAlign:"left",selectors:(u={},u["."+A.listCellFirstChild+" &:before"]={display:"none"},u["&:hover"]={background:L.defaultHoverBackground,color:L.defaultHoverMetaText,selectors:(c={},c["."+A.isRowHeader]={color:L.defaultHoverHeaderText},c)},u["&:hover ."+A.check]={opacity:1},u[".ms-Fabric--isFocusVisible &:focus ."+A.check]={opacity:1},u)},h&&B,!m&&O,_&&H,C],cellUnpadded:{paddingRight:k.cellRightPadding+"px"},cellPadded:{paddingRight:k.cellExtraRightPadding+k.cellRightPadding+"px",selectors:(d={},d["&."+A.cellCheck]={paddingRight:0},d)},cell:W,cellAnimation:x&&ho.slideLeftIn40,cellMeasurer:[A.cellMeasurer,{overflow:"visible",whiteSpace:"nowrap"}],checkCell:[W,A.cellCheck,b,{padding:0,paddingTop:1,marginTop:-1,flexShrink:0}],checkCover:{position:"absolute",top:-1,left:0,bottom:0,right:0,display:v?"block":"none"},fields:[A.fields,{display:"flex",alignItems:"stretch"}],isRowHeader:[A.isRowHeader,{color:L.defaultHeaderText,fontSize:E.medium.fontSize},h&&{color:L.selectedHeaderText,fontWeight:ko.semibold,selectors:(p={},p[Eo]={color:"HighlightText"},p)}],isMultiline:[W,{whiteSpace:"normal",wordBreak:"break-word",textOverflow:"clip"}],check:[A.check]}}),void 0,{scope:"DetailsRow"}),ul="data-selection-index",cl="data-selection-toggle",dl="data-selection-invoke",pl="data-selection-all-toggle",fl=function(t){function n(n){var o=t.call(this,n)||this;o._root=e.createRef(),o.ignoreNextFocus=function(){o._handleNextFocus(!1)},o._onSelectionChange=function(){var e=o.props.selection,t=e.isModal&&e.isModal();o.setState({isModal:t})},o._onMouseDownCapture=function(e){var t=e.target;if(document.activeElement===t||oa(document.activeElement,t)){if(oa(t,o._root.current))for(;t!==o._root.current;){if(o._hasAttribute(t,dl)){o.ignoreNextFocus();break}t=na(t)}}else o.ignoreNextFocus()},o._onFocus=function(e){var t=e.target,n=o.props.selection,r=o._isCtrlPressed||o._isMetaPressed,i=o._getSelectionMode();if(o._shouldHandleFocus&&i!==Ws.none){var a=o._hasAttribute(t,cl),s=o._findItemRoot(t);if(!a&&s){var l=o._getItemIndex(s);r?(n.setIndexSelected(l,n.isIndexSelected(l),!0),o.props.enterModalOnTouch&&o._isTouch&&n.setModal&&(n.setModal(!0),o._setIsTouch(!1))):o.props.isSelectedOnFocus&&o._onItemSurfaceClick(e,l)}}o._handleNextFocus(!1)},o._onMouseDown=function(e){o._updateModifiers(e);var t=e.target,n=o._findItemRoot(t);if(!o._isSelectionDisabled(t))for(;t!==o._root.current&&!o._hasAttribute(t,pl);){if(n){if(o._hasAttribute(t,cl))break;if(o._hasAttribute(t,dl))break;if(!(t!==n&&!o._shouldAutoSelect(t)||o._isShiftPressed||o._isCtrlPressed||o._isMetaPressed)){o._onInvokeMouseDown(e,o._getItemIndex(n));break}if(o.props.disableAutoSelectOnInputElements&&("A"===t.tagName||"BUTTON"===t.tagName||"INPUT"===t.tagName))return}t=na(t)}},o._onTouchStartCapture=function(e){o._setIsTouch(!0)},o._onClick=function(e){var t=o.props.enableTouchInvocationTarget,n=void 0!==t&&t;o._updateModifiers(e);for(var r=e.target,i=o._findItemRoot(r),a=o._isSelectionDisabled(r);r!==o._root.current;){if(o._hasAttribute(r,pl)){a||o._onToggleAllClick(e);break}if(i){var s=o._getItemIndex(i);if(o._hasAttribute(r,cl)){a||(o._isShiftPressed?o._onItemSurfaceClick(e,s):o._onToggleClick(e,s));break}if(o._isTouch&&n&&o._hasAttribute(r,"data-selection-touch-invoke")||o._hasAttribute(r,dl)){o._onInvokeClick(e,s);break}if(r===i){a||o._onItemSurfaceClick(e,s);break}if("A"===r.tagName||"BUTTON"===r.tagName||"INPUT"===r.tagName)return}r=na(r)}},o._onContextMenu=function(e){var t=e.target,n=o.props,r=n.onItemContextMenu,i=n.selection;if(r){var a=o._findItemRoot(t);if(a){var s=o._getItemIndex(a);o._onInvokeMouseDown(e,s),r(i.getItems()[s],s,e.nativeEvent)||e.preventDefault()}}},o._onDoubleClick=function(e){var t=e.target,n=o.props.onItemInvoked,r=o._findItemRoot(t);if(r&&n&&!o._isInputElement(t)){for(var i=o._getItemIndex(r);t!==o._root.current&&!o._hasAttribute(t,cl)&&!o._hasAttribute(t,dl);){if(t===r){o._onInvokeClick(e,i);break}t=na(t)}t=na(t)}},o._onKeyDownCapture=function(e){o._updateModifiers(e),o._handleNextFocus(!0)},o._onKeyDown=function(e){o._updateModifiers(e);var t=e.target,n=o._isSelectionDisabled(t),r=o.props.selection,i=e.which===ln&&(o._isCtrlPressed||o._isMetaPressed),a=e.which===Xt;if(!o._isInputElement(t)){var s=o._getSelectionMode();if(i&&s===Ws.multiple&&!r.isAllSelected())return n||r.setAllSelected(!0),e.stopPropagation(),void e.preventDefault();if(a&&r.getSelectedCount()>0)return n||r.setAllSelected(!1),e.stopPropagation(),void e.preventDefault();var l=o._findItemRoot(t);if(l)for(var u=o._getItemIndex(l);t!==o._root.current&&!o._hasAttribute(t,cl);){if(o._shouldAutoSelect(t)){n||o._onInvokeMouseDown(e,u);break}if(!(e.which!==$t&&e.which!==Yt||"BUTTON"!==t.tagName&&"A"!==t.tagName&&"INPUT"!==t.tagName))return!1;if(t===l){if(e.which===$t)return o._onInvokeClick(e,u),void e.preventDefault();if(e.which===Yt)return n||o._onToggleClick(e,u),void e.preventDefault();break}t=na(t)}}},o._events=new Ii(o),o._async=new ta(o),gi(o);var r=o.props.selection,i=r.isModal&&r.isModal();return o.state={isModal:i},o}return $e(n,t),n.getDerivedStateFromProps=function(e,t){var n=e.selection.isModal&&e.selection.isModal();return Ze(Ze({},t),{isModal:n})},n.prototype.componentDidMount=function(){var e=pn(this._root.current);this._events.on(e,"keydown, keyup",this._updateModifiers,!0),this._events.on(document,"click",this._findScrollParentAndTryClearOnEmptyClick),this._events.on(document.body,"touchstart",this._onTouchStartCapture,!0),this._events.on(document.body,"touchend",this._onTouchStartCapture,!0),this._events.on(this.props.selection,"change",this._onSelectionChange)},n.prototype.render=function(){var t=this.state.isModal;return e.createElement("div",{className:ra("ms-SelectionZone",this.props.className,{"ms-SelectionZone--modal":!!t}),ref:this._root,onKeyDown:this._onKeyDown,onMouseDown:this._onMouseDown,onKeyDownCapture:this._onKeyDownCapture,onClick:this._onClick,role:"presentation",onDoubleClick:this._onDoubleClick,onContextMenu:this._onContextMenu,onMouseDownCapture:this._onMouseDownCapture,onFocusCapture:this._onFocus,"data-selection-is-modal":!!t||void 0},this.props.children,e.createElement(ji,null))},n.prototype.componentDidUpdate=function(e){var t=this.props.selection;t!==e.selection&&(this._events.off(e.selection),this._events.on(t,"change",this._onSelectionChange))},n.prototype.componentWillUnmount=function(){this._events.dispose(),this._async.dispose()},n.prototype._isSelectionDisabled=function(e){if(this._getSelectionMode()===Ws.none)return!0;for(;e!==this._root.current;){if(this._hasAttribute(e,"data-selection-disabled"))return!0;e=na(e)}return!1},n.prototype._onToggleAllClick=function(e){var t=this.props.selection;this._getSelectionMode()===Ws.multiple&&(t.toggleAllSelected(),e.stopPropagation(),e.preventDefault())},n.prototype._onToggleClick=function(e,t){var n=this.props.selection,o=this._getSelectionMode();if(n.setChangeEvents(!1),this.props.enterModalOnTouch&&this._isTouch&&!n.isIndexSelected(t)&&n.setModal&&(n.setModal(!0),this._setIsTouch(!1)),o===Ws.multiple)n.toggleIndexSelected(t);else{if(o!==Ws.single)return void n.setChangeEvents(!0);var r=n.isIndexSelected(t),i=n.isModal&&n.isModal();n.setAllSelected(!1),n.setIndexSelected(t,!r,!0),i&&n.setModal&&n.setModal(!0)}n.setChangeEvents(!0),e.stopPropagation()},n.prototype._onInvokeClick=function(e,t){var n=this.props,o=n.selection,r=n.onItemInvoked;r&&(r(o.getItems()[t],t,e.nativeEvent),e.preventDefault(),e.stopPropagation())},n.prototype._onItemSurfaceClick=function(e,t){var n=this.props.selection,o=this._isCtrlPressed||this._isMetaPressed,r=this._getSelectionMode();r===Ws.multiple?this._isShiftPressed&&!this._isTabPressed?n.selectToIndex(t,!o):o?n.toggleIndexSelected(t):this._clearAndSelectIndex(t):r===Ws.single&&this._clearAndSelectIndex(t)},n.prototype._onInvokeMouseDown=function(e,t){this.props.selection.isIndexSelected(t)||this._clearAndSelectIndex(t)},n.prototype._findScrollParentAndTryClearOnEmptyClick=function(e){var t=Sa(this._root.current);this._events.off(document,"click",this._findScrollParentAndTryClearOnEmptyClick),this._events.on(t,"click",this._tryClearOnEmptyClick),(t&&e.target instanceof Node&&t.contains(e.target)||t===e.target)&&this._tryClearOnEmptyClick(e)},n.prototype._tryClearOnEmptyClick=function(e){!this.props.selectionPreservedOnEmptyClick&&this._isNonHandledClick(e.target)&&this.props.selection.setAllSelected(!1)},n.prototype._clearAndSelectIndex=function(e){var t=this.props.selection;if(!(1===t.getSelectedCount()&&t.isIndexSelected(e))){var n=t.isModal&&t.isModal();t.setChangeEvents(!1),t.setAllSelected(!1),t.setIndexSelected(e,!0,!0),(n||this.props.enterModalOnTouch&&this._isTouch)&&(t.setModal&&t.setModal(!0),this._isTouch&&this._setIsTouch(!1)),t.setChangeEvents(!0)}},n.prototype._updateModifiers=function(e){this._isShiftPressed=e.shiftKey,this._isCtrlPressed=e.ctrlKey,this._isMetaPressed=e.metaKey;var t=e.keyCode;this._isTabPressed=!!t&&t===Qt},n.prototype._findItemRoot=function(e){for(var t=this.props.selection;e!==this._root.current;){var n=e.getAttribute(ul),o=Number(n);if(null!==n&&o>=0&&o<t.getItems().length)break;e=na(e)}if(e!==this._root.current)return e},n.prototype._getItemIndex=function(e){return Number(e.getAttribute(ul))},n.prototype._shouldAutoSelect=function(e){return this._hasAttribute(e,"data-selection-select")},n.prototype._hasAttribute=function(e,t){for(var n=!1;!n&&e!==this._root.current;)n="true"===e.getAttribute(t),e=na(e);return n},n.prototype._isInputElement=function(e){return"INPUT"===e.tagName||"TEXTAREA"===e.tagName},n.prototype._isNonHandledClick=function(e){var t=cn();if(t&&e)for(;e&&e!==t.documentElement;){if(fa(e))return!1;e=na(e)}return!0},n.prototype._handleNextFocus=function(e){var t=this;this._shouldHandleFocusTimeoutId&&(this._async.clearTimeout(this._shouldHandleFocusTimeoutId),this._shouldHandleFocusTimeoutId=void 0),this._shouldHandleFocus=e,e&&this._async.setTimeout((function(){t._shouldHandleFocus=!1}),100)},n.prototype._setIsTouch=function(e){var t=this;this._isTouchTimeoutId&&(this._async.clearTimeout(this._isTouchTimeoutId),this._isTouchTimeoutId=void 0),this._isTouch=!0,e&&this._async.setTimeout((function(){t._isTouch=!1}),300)},n.prototype._getSelectionMode=function(){var e=this.props.selection,t=this.props.selectionMode;return void 0===t?e?e.mode:Ws.none:t},n.defaultProps={isSelectedOnFocus:!0,selectionMode:Ws.multiple},n}(e.Component),hl=function(){function e(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e[0]||{},o=n.onSelectionChanged,r=n.getKey,i=n.canSelectItem,a=void 0===i?function(){return!0}:i,s=n.items,l=n.selectionMode,u=void 0===l?Ws.multiple:l;this.mode=u,this._getKey=r||ml,this._changeEventSuppressionCount=0,this._exemptedCount=0,this._anchoredIndex=0,this._unselectableCount=0,this._onSelectionChanged=o,this._canSelectItem=a,this._isModal=!1,this.setItems(s||[],!0),this.count=this.getSelectedCount()}return e.prototype.canSelectItem=function(e,t){return!("number"==typeof t&&t<0)&&this._canSelectItem(e,t)},e.prototype.getKey=function(e,t){var n=this._getKey(e,t);return"number"==typeof n||n?""+n:""},e.prototype.setChangeEvents=function(e,t){this._changeEventSuppressionCount+=e?-1:1,0===this._changeEventSuppressionCount&&this._hasChanged&&(this._hasChanged=!1,t||this._change())},e.prototype.isModal=function(){return this._isModal},e.prototype.setModal=function(e){this._isModal!==e&&(this.setChangeEvents(!1),this._isModal=e,e||this.setAllSelected(!1),this._change(),this.setChangeEvents(!0))},e.prototype.setItems=function(e,t){void 0===t&&(t=!0);var n={},o={},r=!1;this.setChangeEvents(!1),this._unselectableCount=0;for(var i=0;i<e.length;i++){if(c=e[i]){var a=this.getKey(c,i);a&&(n[a]=i)}o[i]=c&&!this.canSelectItem(c),o[i]&&this._unselectableCount++}(t||0===e.length)&&this._setAllSelected(!1,!0);var s={},l=0;for(var u in this._exemptedIndices)if(this._exemptedIndices.hasOwnProperty(u)){var c,d=Number(u),p=(c=this._items[d])?this.getKey(c,Number(d)):void 0,f=p?n[p]:d;void 0===f?r=!0:(s[f]=!0,l++,r=r||f!==d)}this._items&&0===this._exemptedCount&&e.length!==this._items.length&&this._isAllSelected&&(r=!0),this._exemptedIndices=s,this._exemptedCount=l,this._keyToIndexMap=n,this._unselectableIndices=o,this._items=e,this._selectedItems=null,r&&(this._updateCount(),this._change()),this.setChangeEvents(!0)},e.prototype.getItems=function(){return this._items},e.prototype.getSelection=function(){if(!this._selectedItems){this._selectedItems=[];var e=this._items;if(e)for(var t=0;t<e.length;t++)this.isIndexSelected(t)&&this._selectedItems.push(e[t])}return this._selectedItems},e.prototype.getSelectedCount=function(){return this._isAllSelected?this._items.length-this._exemptedCount-this._unselectableCount:this._exemptedCount},e.prototype.getSelectedIndices=function(){if(!this._selectedIndices){this._selectedIndices=[];var e=this._items;if(e)for(var t=0;t<e.length;t++)this.isIndexSelected(t)&&this._selectedIndices.push(t)}return this._selectedIndices},e.prototype.isRangeSelected=function(e,t){if(0===t)return!1;for(var n=e+t,o=e;o<n;o++)if(!this.isIndexSelected(o))return!1;return!0},e.prototype.isAllSelected=function(){var e=this._items.length-this._unselectableCount;return this.mode===Ws.single&&(e=Math.min(e,1)),this.count>0&&this._isAllSelected&&0===this._exemptedCount||!this._isAllSelected&&this._exemptedCount===e&&e>0},e.prototype.isKeySelected=function(e){var t=this._keyToIndexMap[e];return this.isIndexSelected(t)},e.prototype.isIndexSelected=function(e){return!!(this.count>0&&this._isAllSelected&&!this._exemptedIndices[e]&&!this._unselectableIndices[e]||!this._isAllSelected&&this._exemptedIndices[e])},e.prototype.setAllSelected=function(e){if(!e||this.mode===Ws.multiple){var t=this._items?this._items.length-this._unselectableCount:0;this.setChangeEvents(!1),t>0&&(this._exemptedCount>0||e!==this._isAllSelected)&&(this._exemptedIndices={},(e!==this._isAllSelected||this._exemptedCount>0)&&(this._exemptedCount=0,this._isAllSelected=e,this._change()),this._updateCount()),this.setChangeEvents(!0)}},e.prototype.setKeySelected=function(e,t,n){var o=this._keyToIndexMap[e];o>=0&&this.setIndexSelected(o,t,n)},e.prototype.setIndexSelected=function(e,t,n){if(this.mode!==Ws.none&&!((e=Math.min(Math.max(0,e),this._items.length-1))<0||e>=this._items.length)){this.setChangeEvents(!1);var o=this._exemptedIndices[e];!this._unselectableIndices[e]&&(t&&this.mode===Ws.single&&this._setAllSelected(!1,!0),o&&(t&&this._isAllSelected||!t&&!this._isAllSelected)&&(delete this._exemptedIndices[e],this._exemptedCount--),!o&&(t&&!this._isAllSelected||!t&&this._isAllSelected)&&(this._exemptedIndices[e]=!0,this._exemptedCount++),n&&(this._anchoredIndex=e)),this._updateCount(),this.setChangeEvents(!0)}},e.prototype.selectToKey=function(e,t){this.selectToIndex(this._keyToIndexMap[e],t)},e.prototype.selectToIndex=function(e,t){if(this.mode!==Ws.none)if(this.mode!==Ws.single){var n=this._anchoredIndex||0,o=Math.min(e,n),r=Math.max(e,n);for(this.setChangeEvents(!1),t&&this._setAllSelected(!1,!0);o<=r;o++)this.setIndexSelected(o,!0,!1);this.setChangeEvents(!0)}else this.setIndexSelected(e,!0,!0)},e.prototype.toggleAllSelected=function(){this.setAllSelected(!this.isAllSelected())},e.prototype.toggleKeySelected=function(e){this.setKeySelected(e,!this.isKeySelected(e),!0)},e.prototype.toggleIndexSelected=function(e){this.setIndexSelected(e,!this.isIndexSelected(e),!0)},e.prototype.toggleRangeSelected=function(e,t){if(this.mode!==Ws.none){var n=this.isRangeSelected(e,t),o=e+t;if(!(this.mode===Ws.single&&t>1)){this.setChangeEvents(!1);for(var r=e;r<o;r++)this.setIndexSelected(r,!n,!1);this.setChangeEvents(!0)}}},e.prototype._updateCount=function(e){void 0===e&&(e=!1);var t=this.getSelectedCount();t!==this.count&&(this.count=t,this._change()),this.count||e||this.setModal(!1)},e.prototype._setAllSelected=function(e,t){if(void 0===t&&(t=!1),!e||this.mode===Ws.multiple){var n=this._items?this._items.length-this._unselectableCount:0;this.setChangeEvents(!1),n>0&&(this._exemptedCount>0||e!==this._isAllSelected)&&(this._exemptedIndices={},(e!==this._isAllSelected||this._exemptedCount>0)&&(this._exemptedCount=0,this._isAllSelected=e,this._change()),this._updateCount(t)),this.setChangeEvents(!0)}},e.prototype._change=function(){0===this._changeEventSuppressionCount?(this._selectedItems=null,this._selectedIndices=void 0,Ii.raise(this,Ks),this._onSelectionChanged&&this._onSelectionChanged()):this._hasChanged=!0},e}();function ml(e,t){var n=(e||{}).key;return void 0===n?""+t:n}var gl,vl,yl={root:"ms-GroupedList",compact:"ms-GroupedList--Compact",group:"ms-GroupedList-group",link:"ms-Link",listCell:"ms-List-cell"},bl="cubic-bezier(0.445, 0.050, 0.550, 0.950)",_l={root:"ms-GroupHeader",compact:"ms-GroupHeader--compact",check:"ms-GroupHeader-check",dropIcon:"ms-GroupHeader-dropIcon",expand:"ms-GroupHeader-expand",isCollapsed:"is-collapsed",title:"ms-GroupHeader-title",isSelected:"is-selected",iconTag:"ms-Icon--Tag",group:"ms-GroupedList-group",isDropping:"is-dropping"},Cl="cubic-bezier(0.075, 0.820, 0.165, 1.000)",Sl="cubic-bezier(0.390, 0.575, 0.565, 1.000)",kl="cubic-bezier(0.600, -0.280, 0.735, 0.045)";!function(e){e[e.xSmall=0]="xSmall",e[e.small=1]="small",e[e.medium=2]="medium",e[e.large=3]="large"}(gl||(gl={})),function(e){e[e.normal=0]="normal",e[e.large=1]="large"}(vl||(vl={}));var xl=function(t){function n(e){var n=t.call(this,e)||this;return n.state={isRendered:!1},n}return $e(n,t),n.prototype.componentDidMount=function(){var e=this,t=this.props.delay;this._timeoutId=window.setTimeout((function(){e.setState({isRendered:!0})}),t)},n.prototype.componentWillUnmount=function(){this._timeoutId&&clearTimeout(this._timeoutId)},n.prototype.render=function(){return this.state.isRendered?e.Children.only(this.props.children):null},n.defaultProps={delay:0},n}(e.Component),wl=pi(),El=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return $e(n,t),n.prototype.render=function(){var t=this.props,n=t.type,o=t.size,r=t.ariaLabel,i=t.ariaLive,a=t.styles,s=t.label,l=t.theme,u=t.className,c=t.labelPosition,d=r,p=Zr(this.props,$r,["size"]),f=o;void 0===f&&void 0!==n&&(f=n===vl.large?gl.large:gl.medium);var h=wl(a,{theme:l,size:f,className:u,labelPosition:c});return e.createElement("div",Ze({},p,{className:h.root}),e.createElement("div",{className:h.circle}),s&&e.createElement("div",{className:h.label},s),d&&e.createElement("div",{role:"status","aria-live":i},e.createElement(xl,null,e.createElement("div",{className:h.screenReaderText},d))))},n.defaultProps={size:gl.medium,ariaLive:"polite",labelPosition:"bottom"},n}(e.Component),Il={root:"ms-Spinner",circle:"ms-Spinner-circle",label:"ms-Spinner-label"},Tl=Kt((function(){return xn({"0%":{transform:"rotate(0deg)"},"100%":{transform:"rotate(360deg)"}})})),Dl=li(El,(function(e){var t,n=e.theme,o=e.size,r=e.className,i=e.labelPosition,a=n.palette,s=Oo(Il,n);return{root:[s.root,{display:"flex",flexDirection:"column",alignItems:"center",justifyContent:"center"},"top"===i&&{flexDirection:"column-reverse"},"right"===i&&{flexDirection:"row"},"left"===i&&{flexDirection:"row-reverse"},r],circle:[s.circle,{boxSizing:"border-box",borderRadius:"50%",border:"1.5px solid "+a.themeLight,borderTopColor:a.themePrimary,animationName:Tl(),animationDuration:"1.3s",animationIterationCount:"infinite",animationTimingFunction:"cubic-bezier(.53,.21,.29,.67)",selectors:Ze((t={},t[Eo]={borderTopColor:"Highlight"},t),To())},o===gl.xSmall&&["ms-Spinner--xSmall",{width:12,height:12}],o===gl.small&&["ms-Spinner--small",{width:16,height:16}],o===gl.medium&&["ms-Spinner--medium",{width:20,height:20}],o===gl.large&&["ms-Spinner--large",{width:28,height:28}]],label:[s.label,n.fonts.small,{color:a.themePrimary,margin:"8px 0 0",textAlign:"center"},"top"===i&&{margin:"0 0 8px"},"right"===i&&{margin:"0 0 0 8px"},"left"===i&&{margin:"0 8px 0 0"}],screenReaderText:Lo}}),void 0,{scope:"Spinner"}),Pl=pi(),Ml=function(t){function n(n){var o=t.call(this,n)||this;return o._toggleCollapse=function(){var e=o.props,t=e.group,n=e.onToggleCollapse,r=e.isGroupLoading,i=!o.state.isCollapsed,a=!i&&r&&r(t);o.setState({isCollapsed:i,isLoadingVisible:a}),n&&n(t)},o._onKeyUp=function(e){var t=o.props,n=t.group,r=t.onGroupHeaderKeyUp;if(r&&r(e,n),!e.defaultPrevented){var i=o.state.isCollapsed&&e.which===vn(an,o.props.theme);(!o.state.isCollapsed&&e.which===vn(on,o.props.theme)||i)&&(o._toggleCollapse(),e.stopPropagation(),e.preventDefault())}},o._onToggleClick=function(e){o._toggleCollapse(),e.stopPropagation(),e.preventDefault()},o._onToggleSelectGroupClick=function(e){var t=o.props,n=t.onToggleSelectGroup,r=t.group;n&&n(r),e.preventDefault(),e.stopPropagation()},o._onHeaderClick=function(){var e=o.props,t=e.group,n=e.onGroupHeaderClick,r=e.onToggleSelectGroup;n?n(t):r&&r(t)},o._onRenderTitle=function(t){var n=t.group,r=t.ariaColSpan;return n?e.createElement("div",{className:o._classNames.title,role:"gridcell","aria-colspan":r},e.createElement("span",null,n.name),e.createElement("span",{className:o._classNames.headerCount},"(",n.count,n.hasMoreData&&"+",")")):null},o.state={isCollapsed:o.props.group&&o.props.group.isCollapsed,isLoadingVisible:!1},o}return $e(n,t),n.getDerivedStateFromProps=function(e,t){if(e.group){var n=e.group.isCollapsed,o=e.isGroupLoading,r=!n&&o&&o(e.group);return Ze(Ze({},t),{isCollapsed:n||!1,isLoadingVisible:r||!1})}return t},n.prototype.render=function(){var t=this.props,n=t.group,o=t.groupLevel,r=void 0===o?0:o,i=t.viewport,a=t.selectionMode,s=t.loadingText,l=t.isSelected,u=void 0!==l&&l,c=t.selected,d=void 0!==c&&c,p=t.indentWidth,f=t.onRenderTitle,h=void 0===f?this._onRenderTitle:f,m=t.onRenderGroupHeaderCheckbox,g=t.isCollapsedGroupSelectVisible,v=void 0===g||g,y=t.expandButtonProps,b=t.expandButtonIcon,_=t.selectAllButtonProps,C=t.theme,S=t.styles,k=t.className,x=t.compact,w=t.ariaPosInSet,E=t.ariaSetSize,I=t.useFastIcons?this._fastDefaultCheckboxRender:this._defaultCheckboxRender,T=m?Ls(m,I):I,D=this.state,P=D.isCollapsed,M=D.isLoadingVisible,R=a===Ws.multiple&&(v||!(n&&n.isCollapsed)),F=d||u,N=gn(C);return this._classNames=Pl(S,{theme:C,className:k,selected:F,isCollapsed:P,compact:x}),n?e.createElement("div",{className:this._classNames.root,style:i?{minWidth:i.width}:{},onClick:this._onHeaderClick,role:"row","aria-setsize":E,"aria-posinset":w,"data-is-focusable":!0,onKeyUp:this._onKeyUp,"aria-label":n.ariaLabel||n.name,"aria-expanded":!this.state.isCollapsed,"aria-level":r+1},e.createElement("div",{className:this._classNames.groupHeaderContainer,role:"presentation"},R?e.createElement("div",{role:"gridcell"},e.createElement("button",Ze({"data-is-focusable":!1,type:"button",className:this._classNames.check,role:"checkbox","aria-checked":F,"data-selection-toggle":!0,onClick:this._onToggleSelectGroupClick},_),T({checked:F,theme:C},T))):a!==Ws.none&&e.createElement(ks,{indentWidth:p,count:1}),e.createElement(ks,{indentWidth:p,count:r}),e.createElement("div",{className:this._classNames.dropIcon,role:"presentation"},e.createElement(es,{iconName:"Tag"})),e.createElement("div",{role:"gridcell"},e.createElement("button",Ze({"data-is-focusable":!1,type:"button",className:this._classNames.expand,onClick:this._onToggleClick,"aria-expanded":!this.state.isCollapsed},y),e.createElement(es,{className:this._classNames.expandIsCollapsed,iconName:b||(N?"ChevronLeftMed":"ChevronRightMed")}))),h(this.props,this._onRenderTitle),M&&e.createElement(Dl,{label:s}))):null},n.prototype._defaultCheckboxRender=function(t){return e.createElement(Is,{checked:t.checked})},n.prototype._fastDefaultCheckboxRender=function(t){return e.createElement(Rl,{theme:t.theme,checked:t.checked})},n.defaultProps={expandButtonProps:{"aria-label":"expand collapse group"}},n}(e.Component),Rl=e.memo((function(t){return e.createElement(Is,{theme:t.theme,checked:t.checked,className:t.className,useFastIcons:!0})})),Fl=li(Ml,(function(e){var t,n,o,r,i,a=e.theme,s=e.className,l=e.selected,u=e.isCollapsed,c=e.compact,d=Ds.cellLeftPadding,p=c?40:48,f=a.semanticColors,h=a.palette,m=a.fonts,g=Oo(_l,a),v=[Fo(a),{cursor:"default",background:"none",backgroundColor:"transparent",border:"none",padding:0}];return{root:[g.root,Fo(a),a.fonts.medium,{borderBottom:"1px solid "+f.listBackground,cursor:"default",userSelect:"none",selectors:(t={":hover":{background:f.listItemBackgroundHovered,color:f.actionLinkHovered}},t["&:hover ."+g.check]={opacity:1},t[".ms-Fabric--isFocusVisible &:focus ."+g.check]={opacity:1},t[":global(."+g.group+"."+g.isDropping+")"]={selectors:(n={},n["& > ."+g.root+" ."+g.dropIcon]={transition:"transform "+fo+" "+Cl+" opacity "+uo+" "+Sl,transitionDelay:po,opacity:1,transform:"rotate(0.2deg) scale(1);"},n["."+g.check]={opacity:0},n)},t)},l&&[g.isSelected,{background:f.listItemBackgroundChecked,selectors:(o={":hover":{background:f.listItemBackgroundCheckedHovered}},o[""+g.check]={opacity:1},o)}],c&&[g.compact,{border:"none"}],s],groupHeaderContainer:[{display:"flex",alignItems:"center",height:p}],headerCount:[{padding:"0px 4px"}],check:[g.check,v,{display:"flex",alignItems:"center",justifyContent:"center",paddingTop:1,marginTop:-1,opacity:0,width:48,height:p,selectors:(r={},r[".ms-Fabric--isFocusVisible &:focus"]={opacity:1},r)}],expand:[g.expand,v,{display:"flex",alignItems:"center",justifyContent:"center",fontSize:m.small.fontSize,width:36,height:p,color:l?h.neutralPrimary:h.neutralSecondary,selectors:{":hover":{backgroundColor:l?h.neutralQuaternary:h.neutralLight},":active":{backgroundColor:l?h.neutralTertiaryAlt:h.neutralQuaternaryAlt}}}],expandIsCollapsed:[u?[g.isCollapsed,{transform:"rotate(0deg)",transformOrigin:"50% 50%",transition:"transform .1s linear"}]:{transform:gn(a)?"rotate(-90deg)":"rotate(90deg)",transformOrigin:"50% 50%",transition:"transform .1s linear"}],title:[g.title,{paddingLeft:d,fontSize:c?m.medium.fontSize:m.mediumPlus.fontSize,fontWeight:u?ko.regular:ko.semibold,cursor:"pointer",outline:0,whiteSpace:"nowrap",textOverflow:"ellipsis"}],dropIcon:[g.dropIcon,{position:"absolute",left:-26,fontSize:xo.large,color:h.neutralSecondary,transition:"transform "+co+" "+kl+", opacity "+fo+" "+Sl,opacity:0,transform:"rotate(0.2deg) scale(0.65)",transformOrigin:"10px 10px",selectors:(i={},i[":global(."+g.iconTag+")"]={position:"absolute"},i)}]}}),void 0,{scope:"GroupHeader"}),Nl={root:"ms-GroupShowAll",link:"ms-Link"},Al=pi(),Ll=li((function(t){var n=t.group,o=t.groupLevel,r=t.showAllLinkText,i=void 0===r?"Show All":r,a=t.styles,s=t.theme,l=t.onToggleSummarize,u=Al(a,{theme:s}),c=(0,e.useCallback)((function(e){l(n),e.stopPropagation(),e.preventDefault()}),[l,n]);return n?e.createElement("div",{className:u.root},e.createElement(ks,{count:o}),e.createElement(Ui,{onClick:c},i)):null}),(function(e){var t,n=e.theme,o=n.fonts,r=Oo(Nl,n);return{root:[r.root,{position:"relative",padding:"10px 84px",cursor:"pointer",selectors:(t={},t["."+r.link]={fontSize:o.small.fontSize},t)}]}}),void 0,{scope:"GroupShowAll"}),Bl={root:"ms-groupFooter"},Ol=pi(),Hl=li((function(t){var n=t.group,o=t.groupLevel,r=t.footerText,i=t.indentWidth,a=t.styles,s=t.theme,l=Ol(a,{theme:s});return n&&r?e.createElement("div",{className:l.root},e.createElement(ks,{indentWidth:i,count:o}),r):null}),(function(e){var t=e.theme,n=e.className,o=Oo(Bl,t);return{root:[t.fonts.medium,o.root,{position:"relative",padding:"5px 38px"},n]}}),void 0,{scope:"GroupFooter"}),zl=0,Wl=1,Ul=2,Vl=3,Kl="spacer-",Gl={top:-1,bottom:-1,left:-1,right:-1,width:0,height:0},jl=function(e){return e.getBoundingClientRect()},ql=jl,Ql=jl,$l=function(t){function n(n){var o=t.call(this,n)||this;return o._root=e.createRef(),o._surface=e.createRef(),o._pageRefs={},o._getDerivedStateFromProps=function(e,t){return e.items!==o.props.items||e.renderCount!==o.props.renderCount||e.startIndex!==o.props.startIndex||e.version!==o.props.version?(o._resetRequiredWindows(),o._requiredRect=null,o._measureVersion++,o._invalidatePageCache(),o._updatePages(e,t)):t},o._onRenderRoot=function(t){var n=t.rootRef,o=t.surfaceElement,r=t.divProps;return e.createElement("div",Ze({ref:n},r),o)},o._onRenderSurface=function(t){var n=t.surfaceRef,o=t.pageElements,r=t.divProps;return e.createElement("div",Ze({ref:n},r),o)},o._onRenderPage=function(t,n){for(var r=o.props,i=r.onRenderCell,a=r.role,s=t.page,l=s.items,u=void 0===l?[]:l,c=s.startIndex,d=Xe(t,["page"]),p=void 0===a?"listitem":"presentation",f=[],h=0;h<u.length;h++){var m=c+h,g=u[h],v=o.props.getKey?o.props.getKey(g,m):g&&g.key;null==v&&(v=m),f.push(e.createElement("div",{role:p,className:"ms-List-cell",key:v,"data-list-index":m,"data-automationid":"ListCell"},i&&i(g,m,o.props.ignoreScrollingState?void 0:o.state.isScrolling)))}return e.createElement("div",Ze({},d),f)},gi(o),o.state={pages:[],isScrolling:!1,getDerivedStateFromProps:o._getDerivedStateFromProps},o._async=new ta(o),o._events=new Ii(o),o._estimatedPageHeight=0,o._totalEstimates=0,o._requiredWindowsAhead=0,o._requiredWindowsBehind=0,o._measureVersion=0,o._onAsyncScroll=o._async.debounce(o._onAsyncScroll,100,{leading:!1,maxWait:500}),o._onAsyncIdle=o._async.debounce(o._onAsyncIdle,200,{leading:!1}),o._onAsyncResize=o._async.debounce(o._onAsyncResize,16,{leading:!1}),o._onScrollingDone=o._async.debounce(o._onScrollingDone,500,{leading:!1}),o._cachedPageHeights={},o._estimatedPageHeight=0,o._focusedIndex=-1,o._pageCache={},o}return $e(n,t),n.getDerivedStateFromProps=function(e,t){return t.getDerivedStateFromProps(e,t)},Object.defineProperty(n.prototype,"pageRefs",{get:function(){return this._pageRefs},enumerable:!0,configurable:!0}),n.prototype.scrollToIndex=function(e,t,n){void 0===n&&(n=zl);for(var o=this.props.startIndex,r=o+this._getRenderCount(),i=this._allowedRect,a=0,s=1,l=o;l<r;l+=s){var u=this._getPageSpecification(l,i),c=u.height;if(s=u.itemCount,l<=e&&l+s>e){if(t&&this._scrollElement){for(var d=Ql(this._scrollElement),p={top:this._scrollElement.scrollTop,bottom:this._scrollElement.scrollTop+d.height},f=e-l,h=0;h<f;++h)a+=t(l+h);var m=a+t(e);switch(n){case Wl:return void(this._scrollElement.scrollTop=a);case Ul:return void(this._scrollElement.scrollTop=m-d.height);case Vl:return void(this._scrollElement.scrollTop=(a+m-d.height)/2)}if(a>=p.top&&m<=p.bottom)return;a<p.top||m>p.bottom&&(a=m-d.height)}return void(this._scrollElement.scrollTop=a)}a+=c}},n.prototype.getStartItemIndexInView=function(e){for(var t=0,n=this.state.pages||[];t<n.length;t++){var o=n[t];if(!o.isSpacer&&(this._scrollTop||0)>=o.top&&(this._scrollTop||0)<=o.top+o.height){if(!e){var r=Math.floor(o.height/o.itemCount);return o.startIndex+Math.floor((this._scrollTop-o.top)/r)}for(var i=0,a=o.startIndex;a<o.startIndex+o.itemCount;a++){r=e(a);if(o.top+i<=this._scrollTop&&this._scrollTop<o.top+i+r)return a;i+=r}}}return 0},n.prototype.componentDidMount=function(){this.setState(this._updatePages(this.props,this.state)),this._measureVersion++,this._scrollElement=Sa(this._root.current),this._events.on(window,"resize",this._onAsyncResize),this._root.current&&this._events.on(this._root.current,"focus",this._onFocus,!0),this._scrollElement&&(this._events.on(this._scrollElement,"scroll",this._onScroll),this._events.on(this._scrollElement,"scroll",this._onAsyncScroll))},n.prototype.componentDidUpdate=function(e,t){var n=this.props,o=this.state;if(this.state.pagesVersion!==t.pagesVersion){if(n.getPageHeight)this._onAsyncIdle();else this._updatePageMeasurements(o.pages)?(this._materializedRect=null,this._hasCompletedFirstRender?this._onAsyncScroll():(this._hasCompletedFirstRender=!0,this.setState(this._updatePages(n,o)))):this._onAsyncIdle();n.onPagesUpdated&&n.onPagesUpdated(o.pages)}},n.prototype.componentWillUnmount=function(){this._async.dispose(),this._events.dispose(),delete this._scrollElement},n.prototype.shouldComponentUpdate=function(e,t){var n=this.state.pages,o=t.pages,r=!1;if(!t.isScrolling&&this.state.isScrolling)return!0;if(e.version!==this.props.version)return!0;if(e.items===this.props.items&&n.length===o.length)for(var i=0;i<n.length;i++){var a=n[i],s=o[i];if(a.key!==s.key||a.itemCount!==s.itemCount){r=!0;break}}else r=!0;return r},n.prototype.forceUpdate=function(){this._invalidatePageCache(),this._updateRenderRects(this.props,this.state,!0),this.setState(this._updatePages(this.props,this.state)),this._measureVersion++,t.prototype.forceUpdate.call(this)},n.prototype.getTotalListHeight=function(){return this._surfaceRect.height},n.prototype.render=function(){for(var e=this.props,t=e.className,n=e.role,o=void 0===n?"list":n,r=e.onRenderSurface,i=e.onRenderRoot,a=this.state.pages,s=void 0===a?[]:a,l=[],u=Zr(this.props,$r),c=0,d=s;c<d.length;c++){var p=d[c];l.push(this._renderPage(p))}var f=r?Ls(r,this._onRenderSurface):this._onRenderSurface;return(i?Ls(i,this._onRenderRoot):this._onRenderRoot)({rootRef:this._root,pages:s,surfaceElement:f({surfaceRef:this._surface,pages:s,pageElements:l,divProps:{role:"presentation",className:"ms-List-surface"}}),divProps:Ze(Ze({},u),{className:ra("ms-List",t),role:l.length>0?o:void 0})})},n.prototype._shouldVirtualize=function(e){void 0===e&&(e=this.props);var t=e.onShouldVirtualize;return!t||t(e)},n.prototype._invalidatePageCache=function(){this._pageCache={}},n.prototype._renderPage=function(e){var t,n=this,o=this.props.usePageCache;if(o&&(t=this._pageCache[e.key])&&t.pageElement)return t.pageElement;var r=this._getPageStyle(e),i=this.props.onRenderPage,a=(void 0===i?this._onRenderPage:i)({page:e,className:"ms-List-page",key:e.key,ref:function(t){n._pageRefs[e.key]=t},style:r,role:"presentation"},this._onRenderPage);return o&&0===e.startIndex&&(this._pageCache[e.key]={page:e,pageElement:a}),a},n.prototype._getPageStyle=function(e){var t=this.props.getPageStyle;return Ze(Ze({},t?t(e):{}),e.items?{}:{height:e.height})},n.prototype._onFocus=function(e){for(var t=e.target;t!==this._surface.current;){var n=t.getAttribute("data-list-index");if(n){this._focusedIndex=Number(n);break}t=na(t)}},n.prototype._onScroll=function(){this.state.isScrolling||this.props.ignoreScrollingState||this.setState({isScrolling:!0}),this._resetRequiredWindows(),this._onScrollingDone()},n.prototype._resetRequiredWindows=function(){this._requiredWindowsAhead=0,this._requiredWindowsBehind=0},n.prototype._onAsyncScroll=function(){var e,t;this._updateRenderRects(this.props,this.state),this._materializedRect&&(e=this._requiredRect,t=this._materializedRect,e.top>=t.top&&e.left>=t.left&&e.bottom<=t.bottom&&e.right<=t.right)||this.setState(this._updatePages(this.props,this.state))},n.prototype._onAsyncIdle=function(){var e=this.props,t=e.renderedWindowsAhead,n=e.renderedWindowsBehind,o=this._requiredWindowsAhead,r=this._requiredWindowsBehind,i=Math.min(t,o+1),a=Math.min(n,r+1);i===o&&a===r||(this._requiredWindowsAhead=i,this._requiredWindowsBehind=a,this._updateRenderRects(this.props,this.state),this.setState(this._updatePages(this.props,this.state))),(t>i||n>a)&&this._onAsyncIdle()},n.prototype._onScrollingDone=function(){this.props.ignoreScrollingState||this.setState({isScrolling:!1})},n.prototype._onAsyncResize=function(){this.forceUpdate()},n.prototype._updatePages=function(e,t){this._requiredRect||this._updateRenderRects(e,t);var n=this._buildPages(e,t),o=t.pages;return this._notifyPageChanges(o,n.pages,this.props),Ze(Ze(Ze({},t),n),{pagesVersion:{}})},n.prototype._notifyPageChanges=function(e,t,n){var o=n.onPageAdded,r=n.onPageRemoved;if(o||r){for(var i={},a=0,s=e;a<s.length;a++){(c=s[a]).items&&(i[c.startIndex]=c)}for(var l=0,u=t;l<u.length;l++){var c;(c=u[l]).items&&(i[c.startIndex]?delete i[c.startIndex]:this._onPageAdded(c))}for(var d in i)i.hasOwnProperty(d)&&this._onPageRemoved(i[d])}},n.prototype._updatePageMeasurements=function(e){var t=!1;if(!this._shouldVirtualize())return t;for(var n=0;n<e.length;n++){var o=e[n];o.items&&(t=this._measurePage(o)||t)}return t},n.prototype._measurePage=function(e){var t=!1,n=this._pageRefs[e.key],o=this._cachedPageHeights[e.startIndex];if(n&&this._shouldVirtualize()&&(!o||o.measureVersion!==this._measureVersion)){var r={width:n.clientWidth,height:n.clientHeight};(r.height||r.width)&&(t=e.height!==r.height,e.height=r.height,this._cachedPageHeights[e.startIndex]={height:r.height,measureVersion:this._measureVersion},this._estimatedPageHeight=Math.round((this._estimatedPageHeight*this._totalEstimates+r.height)/(this._totalEstimates+1)),this._totalEstimates++)}return t},n.prototype._onPageAdded=function(e){var t=this.props.onPageAdded;t&&t(e)},n.prototype._onPageRemoved=function(e){var t=this.props.onPageRemoved;t&&t(e)},n.prototype._buildPages=function(e,t){var n=e.renderCount,o=e.items,r=e.startIndex,i=e.getPageHeight;n=this._getRenderCount(e);for(var a=Ze({},Gl),s=[],l=1,u=0,c=null,d=this._focusedIndex,p=r+n,f=this._shouldVirtualize(e),h=0===this._estimatedPageHeight&&!i,m=this._allowedRect,g=function(e){var n=v._getPageSpecification(e,m),i=n.height,g=n.data,y=n.key;l=n.itemCount;var b,_,C=u+i-1,S=Fi(t.pages,(function(t){return!!t.items&&t.startIndex===e}))>-1,k=!m||C>=m.top&&u<=m.bottom,x=!v._requiredRect||C>=v._requiredRect.top&&u<=v._requiredRect.bottom;if(!h&&(x||k&&S)||!f||d>=e&&d<e+l||e===r){c&&(s.push(c),c=null);var w=Math.min(l,p-e),E=v._createPage(y,o.slice(e,e+w),e,void 0,void 0,g);E.top=u,E.height=i,v._visibleRect&&v._visibleRect.bottom&&(E.isVisible=C>=v._visibleRect.top&&u<=v._visibleRect.bottom),s.push(E),x&&v._allowedRect&&(b=a,_={top:u,bottom:C,height:i,left:m.left,right:m.right,width:m.width},b.top=_.top<b.top||-1===b.top?_.top:b.top,b.left=_.left<b.left||-1===b.left?_.left:b.left,b.bottom=_.bottom>b.bottom||-1===b.bottom?_.bottom:b.bottom,b.right=_.right>b.right||-1===b.right?_.right:b.right,b.width=b.right-b.left+1,b.height=b.bottom-b.top+1)}else c||(c=v._createPage(Kl+e,void 0,e,0,void 0,g,!0)),c.height=(c.height||0)+(C-u)+1,c.itemCount+=l;if(u+=C-u+1,h&&f)return"break"},v=this,y=r;y<p;y+=l){if("break"===g(y))break}return c&&(c.key="spacer-end",s.push(c)),this._materializedRect=a,Ze(Ze({},t),{pages:s,measureVersion:this._measureVersion})},n.prototype._getPageSpecification=function(e,t){var n=this.props.getPageSpecification;if(n){var o=n(e,t),r=o.itemCount,i=void 0===r?this._getItemCountForPage(e,t):r,a=o.height;return{itemCount:i,height:void 0===a?this._getPageHeight(e,t,i):a,data:o.data,key:o.key}}return{itemCount:i=this._getItemCountForPage(e,t),height:this._getPageHeight(e,t,i)}},n.prototype._getPageHeight=function(e,t,n){if(this.props.getPageHeight)return this.props.getPageHeight(e,t,n);var o=this._cachedPageHeights[e];return o?o.height:this._estimatedPageHeight||30},n.prototype._getItemCountForPage=function(e,t){var n=this.props.getItemCountForPage?this.props.getItemCountForPage(e,t):10;return n||10},n.prototype._createPage=function(e,t,n,o,r,i,a){void 0===n&&(n=-1),void 0===o&&(o=t?t.length:0),void 0===r&&(r={}),e=e||"page-"+n;var s=this._pageCache[e];return s&&s.page?s.page:{key:e,startIndex:n,itemCount:o,items:t,style:r,top:0,height:0,data:i,isSpacer:a||!1}},n.prototype._getRenderCount=function(e){var t=e||this.props,n=t.items,o=t.startIndex,r=t.renderCount;return void 0===r?n?n.length-o:0:r},n.prototype._updateRenderRects=function(e,t,n){var o=e.renderedWindowsAhead,r=e.renderedWindowsBehind,i=t.pages;if(this._shouldVirtualize(e)){var a=this._surfaceRect||Ze({},Gl),s=this._scrollElement&&this._scrollElement.scrollHeight,l=this._scrollElement?this._scrollElement.scrollTop:0;this._surface.current&&(n||!i||!this._surfaceRect||!s||s!==this._scrollHeight||Math.abs(this._scrollTop-l)>this._estimatedPageHeight/3)&&(a=this._surfaceRect=ql(this._surface.current),this._scrollTop=l),!n&&s&&s===this._scrollHeight||this._measureVersion++,this._scrollHeight=s;var u=Math.max(0,-a.top),c=pn(this._root.current),d={top:u,left:a.left,bottom:u+c.innerHeight,right:a.right,width:a.width,height:c.innerHeight};this._requiredRect=Zl(d,this._requiredWindowsBehind,this._requiredWindowsAhead),this._allowedRect=Zl(d,r,o),this._visibleRect=d}},n.defaultProps={startIndex:0,onRenderCell:function(t,n,o){return e.createElement(e.Fragment,null,t&&t.name||"")},renderedWindowsAhead:2,renderedWindowsBehind:2},n}(e.Component);function Zl(e,t,n){var o=e.top-t*e.height,r=e.height+(t+n)*e.height;return{top:o,bottom:o+r,height:r,left:e.left,right:e.right,width:e.width}}var Xl=function(t){function n(o){var r=t.call(this,o)||this;r._root=e.createRef(),r._list=e.createRef(),r._subGroupRefs={},r._droppingClassName="",r._onRenderGroupHeader=function(t){return e.createElement(Fl,Ze({},t))},r._onRenderGroupShowAll=function(t){return e.createElement(Ll,Ze({},t))},r._onRenderGroupFooter=function(t){return e.createElement(Hl,Ze({},t))},r._renderSubGroup=function(t,o){var i=r.props,a=i.dragDropEvents,s=i.dragDropHelper,l=i.eventsToRegister,u=i.getGroupItemLimit,c=i.groupNestingDepth,d=i.groupProps,p=i.items,f=i.headerProps,h=i.showAllProps,m=i.footerProps,g=i.listProps,v=i.onRenderCell,y=i.selection,b=i.selectionMode,_=i.viewport,C=i.onRenderGroupHeader,S=i.onRenderGroupShowAll,k=i.onRenderGroupFooter,x=i.onShouldVirtualize,w=i.group,E=i.compact,I=t.level?t.level+1:c;return!t||t.count>0||d&&d.showEmptyGroups?e.createElement(n,{ref:function(e){return r._subGroupRefs["subGroup_"+o]=e},key:r._getGroupKey(t,o),dragDropEvents:a,dragDropHelper:s,eventsToRegister:l,footerProps:m,getGroupItemLimit:u,group:t,groupIndex:o,groupNestingDepth:I,groupProps:d,headerProps:f,items:p,listProps:g,onRenderCell:v,selection:y,selectionMode:b,showAllProps:h,viewport:_,onRenderGroupHeader:C,onRenderGroupShowAll:S,onRenderGroupFooter:k,onShouldVirtualize:x,groups:w?w.children:[],compact:E}):null},r._getGroupDragDropOptions=function(){var e=r.props,t=e.group,n=e.groupIndex,o=e.dragDropEvents;return{eventMap:e.eventsToRegister,selectionIndex:-1,context:{data:t,index:n,isGroup:!0},updateDropState:r._updateDroppingState,canDrag:o.canDrag,canDrop:o.canDrop,onDrop:o.onDrop,onDragStart:o.onDragStart,onDragEnter:o.onDragEnter,onDragLeave:o.onDragLeave,onDragEnd:o.onDragEnd,onDragOver:o.onDragOver}},r._updateDroppingState=function(e,t){var n=r.state.isDropping,o=r.props,i=o.dragDropEvents,a=o.group;n!==e&&(n?i&&i.onDragLeave&&i.onDragLeave(a,t):i&&i.onDragEnter&&(r._droppingClassName=i.onDragEnter(a,t)),r.setState({isDropping:e}))};var i=o.selection,a=o.group;return gi(r),r._id=Pi("GroupedListSection"),r.state={isDropping:!1,isSelected:!(!i||!a)&&i.isRangeSelected(a.startIndex,a.count)},r._events=new Ii(r),r}return $e(n,t),n.prototype.componentDidMount=function(){var e=this.props,t=e.dragDropHelper,n=e.selection;t&&this._root.current&&(this._dragDropSubscription=t.subscribe(this._root.current,this._events,this._getGroupDragDropOptions())),n&&this._events.on(n,Ks,this._onSelectionChange)},n.prototype.componentWillUnmount=function(){this._events.dispose(),this._dragDropSubscription&&this._dragDropSubscription.dispose()},n.prototype.componentDidUpdate=function(e){this.props.group===e.group&&this.props.groupIndex===e.groupIndex&&this.props.dragDropHelper===e.dragDropHelper||(this._dragDropSubscription&&(this._dragDropSubscription.dispose(),delete this._dragDropSubscription),this.props.dragDropHelper&&this._root.current&&(this._dragDropSubscription=this.props.dragDropHelper.subscribe(this._root.current,this._events,this._getGroupDragDropOptions())))},n.prototype.render=function(){var t=this.props,n=t.getGroupItemLimit,o=t.group,r=t.groupIndex,i=t.headerProps,a=t.showAllProps,s=t.footerProps,l=t.viewport,u=t.selectionMode,c=t.onRenderGroupHeader,d=void 0===c?this._onRenderGroupHeader:c,p=t.onRenderGroupShowAll,f=void 0===p?this._onRenderGroupShowAll:p,h=t.onRenderGroupFooter,m=void 0===h?this._onRenderGroupFooter:h,g=t.onShouldVirtualize,v=t.groupedListClassNames,y=t.groups,b=t.compact,_=t.listProps,C=void 0===_?{}:_,S=this.state.isSelected,k=o&&n?n(o):1/0,x=o&&!o.children&&!o.isCollapsed&&!o.isShowingAll&&(o.count>k||o.hasMoreData),w=o&&o.children&&o.children.length>0,E=C.version,I={group:o,groupIndex:r,groupLevel:o?o.level:0,isSelected:S,selected:S,viewport:l,selectionMode:u,groups:y,compact:b},T={groupedListId:this._id,ariaSetSize:y?y.length:void 0,ariaPosInSet:void 0!==r?r+1:void 0},D=Ze(Ze(Ze({},i),I),T),P=Ze(Ze({},a),I),M=Ze(Ze({},s),I),R=!!this.props.dragDropHelper&&this._getGroupDragDropOptions().canDrag(o)&&!!this.props.dragDropEvents.canDragGroups;return e.createElement("div",Ze({ref:this._root},R&&{draggable:!0},{className:ra(v&&v.group,this._getDroppingClassName()),role:"presentation"}),d(D,this._onRenderGroupHeader),o&&o.isCollapsed?null:w?e.createElement($l,{role:"presentation",ref:this._list,items:o?o.children:[],onRenderCell:this._renderSubGroup,getItemCountForPage:this._returnOne,onShouldVirtualize:g,version:E,id:this._id}):this._onRenderGroup(k),o&&o.isCollapsed?null:x&&f(P,this._onRenderGroupShowAll),m(M,this._onRenderGroupFooter))},n.prototype.forceUpdate=function(){t.prototype.forceUpdate.call(this),this.forceListUpdate()},n.prototype.forceListUpdate=function(){var e=this.props.group;if(this._list.current){if(this._list.current.forceUpdate(),e&&e.children&&e.children.length>0)for(var t=e.children.length,n=0;n<t;n++){var o;(o=this._list.current.pageRefs["subGroup_"+String(n)])&&o.forceListUpdate()}}else(o=this._subGroupRefs["subGroup_"+String(0)])&&o.forceListUpdate()},n.prototype._onSelectionChange=function(){var e=this.props,t=e.group,n=e.selection;if(n&&t){var o=n.isRangeSelected(t.startIndex,t.count);o!==this.state.isSelected&&this.setState({isSelected:o})}},n.prototype._onRenderGroupCell=function(e,t){return function(n,o){return e(t,n,o)}},n.prototype._onRenderGroup=function(t){var n=this.props,o=n.group,r=n.items,i=n.onRenderCell,a=n.listProps,s=n.groupNestingDepth,l=n.onShouldVirtualize,u=n.groupProps,c=o&&!o.isShowingAll?o.count:r.length,d=o?o.startIndex:0;return e.createElement($l,Ze({role:u&&u.role?u.role:"presentation",items:r,onRenderCell:this._onRenderGroupCell(i,s),ref:this._list,renderCount:Math.min(c,t),startIndex:d,onShouldVirtualize:l,id:this._id},a))},n.prototype._returnOne=function(){return 1},n.prototype._getGroupKey=function(e,t){return"group-"+(e&&e.key?e.key:String(e.level)+String(t))},n.prototype._getDroppingClassName=function(){var e=this.state.isDropping,t=this.props,n=t.group,o=t.groupedListClassNames;return ra((e=!(!n||!e))&&this._droppingClassName,e&&"is-dropping",e&&o&&o.groupIsDropping)},n}(e.Component),Yl=pi(),Jl=Ps.rowHeight,eu=Ps.compactRowHeight,tu=li(function(t){function n(n){var o=t.call(this,n)||this;o._list=e.createRef(),o._renderGroup=function(t,n){var r=o.props,i=r.dragDropEvents,a=r.dragDropHelper,s=r.eventsToRegister,l=r.groupProps,u=r.items,c=r.listProps,d=r.onRenderCell,p=r.selectionMode,f=r.selection,h=r.viewport,m=r.onShouldVirtualize,g=r.groups,v=r.compact,y={onToggleSelectGroup:o._onToggleSelectGroup,onToggleCollapse:o._onToggleCollapse,onToggleSummarize:o._onToggleSummarize},b=Ze(Ze({},l.headerProps),y),_=Ze(Ze({},l.showAllProps),y),C=Ze(Ze({},l.footerProps),y),S=o._getGroupNestingDepth();if(!l.showEmptyGroups&&t&&0===t.count)return null;var k=Ze(Ze({},c||{}),{version:o.state.version});return e.createElement(Xl,{key:o._getGroupKey(t,n),dragDropEvents:i,dragDropHelper:a,eventsToRegister:s,footerProps:C,getGroupItemLimit:l&&l.getGroupItemLimit,group:t,groupIndex:n,groupNestingDepth:S,groupProps:l,headerProps:b,listProps:k,items:u,onRenderCell:d,onRenderGroupHeader:l.onRenderHeader,onRenderGroupShowAll:l.onRenderShowAll,onRenderGroupFooter:l.onRenderFooter,selectionMode:p,selection:f,showAllProps:_,viewport:h,onShouldVirtualize:m,groupedListClassNames:o._classNames,groups:g,compact:v})},o._getDefaultGroupItemLimit=function(e){return e.count},o._getGroupItemLimit=function(e){var t=o.props.groupProps;return(t&&t.getGroupItemLimit?t.getGroupItemLimit:o._getDefaultGroupItemLimit)(e)},o._getGroupHeight=function(e){var t=o.props.compact?eu:Jl;return t+(e.isCollapsed?0:t*o._getGroupItemLimit(e))},o._getPageHeight=function(e){var t=o.state.groups,n=o.props.getGroupHeight,r=void 0===n?o._getGroupHeight:n,i=t&&t[e];return i?r(i,e):0},o._onToggleCollapse=function(e){var t=o.props.groupProps,n=t&&t.headerProps&&t.headerProps.onToggleCollapse;e&&(n&&n(e),e.isCollapsed=!e.isCollapsed,o._updateIsSomeGroupExpanded(),o.forceUpdate())},o._onToggleSelectGroup=function(e){var t=o.props,n=t.selection,r=t.selectionMode;e&&n&&r===Ws.multiple&&n.toggleRangeSelected(e.startIndex,e.count)},o._isInnerZoneKeystroke=function(e){return e.which===vn(an)},o._onToggleSummarize=function(e){var t=o.props.groupProps,n=t&&t.showAllProps&&t.showAllProps.onToggleSummarize;n?n(e):(e&&(e.isShowingAll=!e.isShowingAll),o.forceUpdate())},o._getPageSpecification=function(e){var t=o.state.groups,n=t&&t[e];return{key:n&&n.key}},gi(o),o._isSomeGroupExpanded=o._computeIsSomeGroupExpanded(n.groups);var r=n.listProps,i=(void 0===r?{}:r).version,a=void 0===i?{}:i;return o.state={groups:n.groups,items:n.items,listProps:n.listProps,version:a},o}return $e(n,t),n.getDerivedStateFromProps=function(e,t){var n=e.groups,o=e.selectionMode,r=e.compact,i=e.items,a=e.listProps,s=a&&a.version,l=Ze(Ze({},t),{selectionMode:o,compact:r,groups:n,listProps:a}),u=!1;return s===(t.listProps&&t.listProps.version)&&i===t.items&&n===t.groups&&o===t.selectionMode&&r===t.compact||(u=!0),u&&(l=Ze(Ze({},l),{version:{}})),l},n.prototype.scrollToIndex=function(e,t,n){this._list.current&&this._list.current.scrollToIndex(e,t,n)},n.prototype.getStartItemIndexInView=function(){return this._list.current.getStartItemIndexInView()||0},n.prototype.componentDidMount=function(){var e=this.props,t=e.groupProps,n=e.groups,o=void 0===n?[]:n;t&&t.isAllGroupsCollapsed&&this._setGroupsCollapsedState(o,t.isAllGroupsCollapsed)},n.prototype.render=function(){var t=this.props,n=t.className,o=t.usePageCache,r=t.onShouldVirtualize,i=t.theme,a=t.role,s=void 0===a?"treegrid":a,l=t.styles,u=t.compact,c=t.focusZoneProps,d=void 0===c?{}:c,p=t.rootListProps,f=void 0===p?{}:p,h=this.state,m=h.groups,g=h.version;this._classNames=Yl(l,{theme:i,className:n,compact:u});var v=d.shouldEnterInnerZone,y=void 0===v?this._isInnerZoneKeystroke:v;return e.createElement(Ka,Ze({direction:wa.vertical,"data-automationid":"GroupedList","data-is-scrollable":"false",role:"presentation"},d,{shouldEnterInnerZone:y,className:ra(this._classNames.root,d.className)}),m?e.createElement($l,Ze({ref:this._list,role:s,items:m,onRenderCell:this._renderGroup,getItemCountForPage:this._returnOne,getPageHeight:this._getPageHeight,getPageSpecification:this._getPageSpecification,usePageCache:o,onShouldVirtualize:r,version:g},f)):this._renderGroup(void 0,0))},n.prototype.forceUpdate=function(){t.prototype.forceUpdate.call(this),this._forceListUpdates()},n.prototype.toggleCollapseAll=function(e){var t=this.state.groups,n=void 0===t?[]:t,o=this.props.groupProps,r=o&&o.onToggleCollapseAll;n.length>0&&(r&&r(e),this._setGroupsCollapsedState(n,e),this._updateIsSomeGroupExpanded(),this.forceUpdate())},n.prototype._setGroupsCollapsedState=function(e,t){for(var n=0;n<e.length;n++)e[n].isCollapsed=t},n.prototype._returnOne=function(){return 1},n.prototype._getGroupKey=function(e,t){return"group-"+(e&&e.key?e.key:String(t))},n.prototype._getGroupNestingDepth=function(){for(var e=0,t=this.state.groups;t&&t.length>0;)e++,t=t[0].children;return e},n.prototype._forceListUpdates=function(e){this.setState({version:{}})},n.prototype._computeIsSomeGroupExpanded=function(e){var t=this;return!(!e||!e.some((function(e){return e.children?t._computeIsSomeGroupExpanded(e.children):!e.isCollapsed})))},n.prototype._updateIsSomeGroupExpanded=function(){var e=this.state.groups,t=this.props.onGroupExpandStateChanged,n=this._computeIsSomeGroupExpanded(e);this._isSomeGroupExpanded!==n&&(t&&t(n),this._isSomeGroupExpanded=n)},n.defaultProps={selectionMode:Ws.multiple,isHeaderVisible:!0,groupProps:{},compact:!1},n}(e.Component),(function(e){var t,n,o=e.theme,r=e.className,i=e.compact,a=o.palette,s=Oo(yl,o);return{root:[s.root,o.fonts.small,{position:"relative",selectors:(t={},t["."+s.listCell]={minHeight:38},t)},i&&[s.compact,{selectors:(n={},n["."+s.listCell]={minHeight:32},n)}],r],group:[s.group,{transition:"background-color "+co+" "+bl}],groupIsDropping:{backgroundColor:a.neutralLight}}}),void 0,{scope:"GroupedList"}),nu=["setState","render","componentWillMount","UNSAFE_componentWillMount","componentDidMount","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","getSnapshotBeforeUpdate","UNSAFE_componentWillUpdate","componentDidUpdate","componentWillUnmount"];var ou=function(e){function t(t){var n=e.call(this,t)||this;return n._updateComposedComponentRef=n._updateComposedComponentRef.bind(n),n}return $e(t,e),t.prototype._updateComposedComponentRef=function(e){var t;this._composedComponentInstance=e,e?this._hoisted=function(e,t,n){void 0===n&&(n=nu);var o=[],r=function(r){"function"!=typeof t[r]||void 0!==e[r]||n&&-1!==n.indexOf(r)||(o.push(r),e[r]=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];t[r].apply(t,e)})};for(var i in t)r(i);return o}(this,e):this._hoisted&&(t=this,this._hoisted.forEach((function(e){return delete t[e]})))},t}(e.Component);function ru(e){var t;return e&&(e===window?t={left:0,top:0,width:window.innerWidth,height:window.innerHeight,right:window.innerWidth,bottom:window.innerHeight}:e.getBoundingClientRect&&(t=e.getBoundingClientRect())),t}function iu(t){return function(n){function o(t){var o=n.call(this,t)||this;return o._root=e.createRef(),o._registerResizeObserver=function(){var e=pn(o._root.current);o._viewportResizeObserver=new e.ResizeObserver(o._onAsyncResize),o._viewportResizeObserver.observe(o._root.current)},o._unregisterResizeObserver=function(){o._viewportResizeObserver&&(o._viewportResizeObserver.disconnect(),delete o._viewportResizeObserver)},o._updateViewport=function(e){var t=o.state.viewport,n=o._root.current,r=ru(Sa(n)),i=ru(n);((i&&i.width)!==t.width||(r&&r.height)!==t.height)&&o._resizeAttempts<3&&i&&r?(o._resizeAttempts++,o.setState({viewport:{width:i.width,height:r.height}},(function(){o._updateViewport(e)}))):(o._resizeAttempts=0,e&&o._composedComponentInstance&&o._composedComponentInstance.forceUpdate())},o._async=new ta(o),o._events=new Ii(o),o._resizeAttempts=0,o.state={viewport:{width:0,height:0}},o}return $e(o,n),o.prototype.componentDidMount=function(){var e=this.props,t=e.skipViewportMeasures,n=e.disableResizeObserver,o=pn(this._root.current);this._onAsyncResize=this._async.debounce(this._onAsyncResize,500,{leading:!1}),t||(!n&&this._isResizeObserverAvailable()?this._registerResizeObserver():this._events.on(o,"resize",this._onAsyncResize),this._updateViewport())},o.prototype.componentDidUpdate=function(e){var t=e.skipViewportMeasures,n=this.props,o=n.skipViewportMeasures,r=n.disableResizeObserver,i=pn(this._root.current);o!==t&&(o?(this._unregisterResizeObserver(),this._events.off(i,"resize",this._onAsyncResize)):(!r&&this._isResizeObserverAvailable()?this._viewportResizeObserver||this._registerResizeObserver():this._events.on(i,"resize",this._onAsyncResize),this._updateViewport()))},o.prototype.componentWillUnmount=function(){this._events.dispose(),this._async.dispose(),this._unregisterResizeObserver()},o.prototype.render=function(){var n=this.state.viewport,o=n.width>0&&n.height>0?n:void 0;return e.createElement("div",{className:"ms-Viewport",ref:this._root,style:{minWidth:1,minHeight:1}},e.createElement(t,Ze({ref:this._updateComposedComponentRef,viewport:o},this.props)))},o.prototype.forceUpdate=function(){this._updateViewport(!0)},o.prototype._onAsyncResize=function(){this._updateViewport()},o.prototype._isResizeObserverAvailable=function(){var e=pn(this._root.current);return e&&e.ResizeObserver},o}(ou)}var au=pi(),su=100,lu=function(t){var n=t.selection,o=t.ariaLabelForListHeader,r=t.ariaLabelForSelectAllCheckbox,i=t.ariaLabelForSelectionColumn,a=t.className,s=t.checkboxVisibility,l=t.compact,u=t.constrainMode,c=t.dragDropEvents,d=t.groups,p=t.groupProps,f=t.indentWidth,h=t.items,m=t.isPlaceholderData,g=t.isHeaderVisible,v=t.layoutMode,y=t.onItemInvoked,b=t.onItemContextMenu,_=t.onColumnHeaderClick,C=t.onColumnHeaderContextMenu,S=t.selectionMode,k=void 0===S?n.mode:S,x=t.selectionPreservedOnEmptyClick,w=t.selectionZoneProps,E=t.ariaLabel,I=t.ariaLabelForGrid,T=t.rowElementEventMap,D=t.shouldApplyApplicationRole,P=void 0!==D&&D,M=t.getKey,R=t.listProps,F=t.usePageCache,N=t.onShouldVirtualize,A=t.viewport,L=t.minimumPixelsForDrag,B=t.getGroupHeight,O=t.styles,H=t.theme,z=t.cellStyleProps,W=void 0===z?Ds:z,U=t.onRenderCheckbox,V=t.useFastIcons,K=t.dragDropHelper,G=t.adjustedColumns,j=t.isCollapsed,q=t.isSizing,Q=t.isSomeGroupExpanded,$=t.version,Z=t.rootRef,X=t.listRef,Y=t.focusZoneRef,J=t.columnReorderOptions,ee=t.groupedListRef,te=t.headerRef,ne=t.onGroupExpandStateChanged,oe=t.onColumnIsSizingChanged,re=t.onRowDidMount,ie=t.onRowWillUnmount,ae=t.disableSelectionZone,se=t.onColumnResized,le=t.onColumnAutoResized,ue=t.onToggleCollapse,ce=t.onActiveRowChanged,de=t.onBlur,pe=t.rowElementEventMap,fe=t.onRenderMissingItem,he=t.onRenderItemColumn,me=t.getCellValueKey,ge=t.getRowAriaLabel,ve=t.getRowAriaDescribedBy,ye=t.checkButtonAriaLabel,be=t.checkboxCellClassName,_e=t.useReducedRowRenderer,Ce=t.enableUpdateAnimations,Se=t.enterModalSelectionOnTouch,ke=t.onRenderDefaultRow,xe=t.selectionZoneRef,we=function(e){var t=0,n=e;for(;n&&n.length>0;)t++,n=n[0].children;return t}(d),Ee=e.useMemo((function(){return Ze({renderedWindowsAhead:q?0:2,renderedWindowsBehind:q?0:2,getKey:M,version:$},R)}),[q,M,$,R]),Ie=Gs.none;if(k===Ws.single&&(Ie=Gs.hidden),k===Ws.multiple){var Te=p&&p.headerProps&&p.headerProps.isCollapsedGroupSelectVisible;void 0===Te&&(Te=!0),Ie=Te||!d||Q?Gs.visible:Gs.hidden}s===ea.hidden&&(Ie=Gs.none);var De=e.useCallback((function(t){return e.createElement(ol,Ze({},t))}),[]),Pe=e.useCallback((function(){return null}),[]),Me=t.onRenderDetailsHeader,Re=e.useMemo((function(){return Me?Ls(Me,De):De}),[Me,De]),Fe=t.onRenderDetailsFooter,Ne=e.useMemo((function(){return Fe?Ls(Fe,Pe):Pe}),[Fe,Pe]),Ae=e.useMemo((function(){return{columns:G,groupNestingDepth:we,selection:n,selectionMode:k,viewport:A,checkboxVisibility:s,indentWidth:f,cellStyleProps:W}}),[G,we,n,k,A,s,f,W]),Le=J&&J.onDragEnd,Be=e.useCallback((function(e,t){var n=e.dropLocation,o=Yi.outside;if(Le){if(n&&n!==Yi.header)o=n;else if(Z.current){var r=Z.current.getBoundingClientRect();t.clientX>r.left&&t.clientX<r.right&&t.clientY>r.top&&t.clientY<r.bottom&&(o=Yi.surface)}Le(o)}}),[Le,Z]),Oe=e.useMemo((function(){if(J)return Ze(Ze({},J),{onColumnDragEnd:Be})}),[J,Be]),He=(g?1:0)+function(e){var t=0;if(e)for(var n=Je(e),o=void 0;n&&n.length>0;)++t,(o=n.pop())&&o.children&&n.push.apply(n,o.children);return t}(d)+(h?h.length:0),ze=(Ie!==Gs.none?1:0)+(G?G.length:0)+(d?1:0),We=e.useMemo((function(){return au(O,{theme:H,compact:l,isFixed:v===Ji.fixedColumns,isHorizontalConstrained:u===Xi.horizontalConstrained,className:a})}),[O,H,l,v,u,a]),Ue=p&&p.onRenderFooter,Ve=e.useMemo((function(){return Ue?function(e,t){return Ue(Ze(Ze({},e),{columns:G,groupNestingDepth:we,indentWidth:f,selection:n,selectionMode:k,viewport:A,checkboxVisibility:s,cellStyleProps:W}),t)}:void 0}),[Ue,G,we,f,n,k,A,s,W]),Ke=p&&p.onRenderHeader,Ge=e.useMemo((function(){return Ke?function(e,t){return Ke(Ze(Ze({},e),{columns:G,groupNestingDepth:we,indentWidth:f,selection:n,selectionMode:k,viewport:A,checkboxVisibility:s,cellStyleProps:W,ariaColSpan:G.length}),t)}:function(e,t){return t(Ze(Ze({},e),{ariaColSpan:G.length}))}}),[Ke,G,we,f,n,k,A,s,W]),je=e.useMemo((function(){return Ze(Ze({},p),{onRenderFooter:Ve,onRenderHeader:Ge})}),[p,Ve,Ge]),qe=Si((function(){return Kt((function(e){var t=0;return e.forEach((function(e){return t+=e.calculatedWidth||e.minWidth})),t}))})),Qe=p&&p.collapseAllVisibility,$e=e.useMemo((function(){return qe(G)}),[G,qe]),Xe=e.useCallback((function(e,o,r){var i=t.onRenderRow?Ls(t.onRenderRow,ke):ke,a={item:o,itemIndex:r,compact:l,columns:G,groupNestingDepth:e,selectionMode:k,selection:n,onDidMount:re,onWillUnmount:ie,onRenderItemColumn:he,getCellValueKey:me,eventsToRegister:pe,dragDropEvents:c,dragDropHelper:K,viewport:A,checkboxVisibility:s,collapseAllVisibility:Qe,getRowAriaLabel:ge,getRowAriaDescribedBy:ve,checkButtonAriaLabel:ye,checkboxCellClassName:be,useReducedRowRenderer:_e,indentWidth:f,cellStyleProps:W,onRenderDetailsCheckbox:U,enableUpdateAnimations:Ce,rowWidth:$e,useFastIcons:V};return o?i(a):fe?fe(r,a):null}),[l,G,k,n,re,ie,he,me,pe,c,K,A,s,Qe,ge,ve,ye,be,_e,f,W,U,Ce,V,ke,fe,t.onRenderRow,$e]),Ye=e.useCallback((function(e){return function(t,n){return Xe(e,t,n)}}),[Xe]),et=e.useCallback((function(e){return e.which===vn(an,H)}),[H]),tt={componentRef:Y,className:We.focusZone,direction:wa.vertical,shouldEnterInnerZone:et,onActiveElementChanged:ce,shouldRaiseClicks:!1,onBlur:de},nt=d?e.createElement(tu,{focusZoneProps:tt,componentRef:ee,groups:d,groupProps:je,items:h,onRenderCell:Xe,role:"presentation",selection:n,selectionMode:s!==ea.hidden?k:Ws.none,dragDropEvents:c,dragDropHelper:K,eventsToRegister:T,listProps:Ee,onGroupExpandStateChanged:ne,usePageCache:F,onShouldVirtualize:N,getGroupHeight:B,compact:l}):e.createElement(Ka,Ze({},tt),e.createElement($l,Ze({ref:X,role:"presentation",items:h,onRenderCell:Ye(0),usePageCache:F,onShouldVirtualize:N},Ee))),ot=e.useCallback((function(e){e.which===sn&&Y.current&&Y.current.focus()&&(0===n.getSelectedIndices().length&&n.setIndexSelected(0,!0,!1),e.preventDefault(),e.stopPropagation())}),[n,Y]),rt=e.useCallback((function(e){e.which!==rn||e.altKey||te.current&&te.current.focus()&&(e.preventDefault(),e.stopPropagation())}),[te]);return e.createElement("div",Ze({ref:Z,className:We.root,"data-automationid":"DetailsList","data-is-scrollable":"false","aria-label":E},P?{role:"application"}:{}),e.createElement(ji,null),e.createElement("div",{role:"grid","aria-label":I,"aria-rowcount":m?-1:He,"aria-colcount":ze,"aria-readonly":"true","aria-busy":m},e.createElement("div",{onKeyDown:ot,role:"presentation",className:We.headerWrapper},g&&Re({componentRef:te,selectionMode:k,layoutMode:v,selection:n,columns:G,onColumnClick:_,onColumnContextMenu:C,onColumnResized:se,onColumnIsSizingChanged:oe,onColumnAutoResized:le,groupNestingDepth:we,isAllCollapsed:j,onToggleCollapseAll:ue,ariaLabel:o,ariaLabelForSelectAllCheckbox:r,ariaLabelForSelectionColumn:i,selectAllVisibility:Ie,collapseAllVisibility:p&&p.collapseAllVisibility,viewport:A,columnReorderProps:Oe,minimumPixelsForDrag:L,cellStyleProps:W,checkboxVisibility:s,indentWidth:f,onRenderDetailsCheckbox:U,rowWidth:qe(G),useFastIcons:V},Re)),e.createElement("div",{onKeyDown:rt,role:"presentation",className:We.contentWrapper},ae?nt:e.createElement(fl,Ze({ref:xe,selection:n,selectionPreservedOnEmptyClick:x,selectionMode:k,onItemInvoked:y,onItemContextMenu:b,enterModalOnTouch:Se},w||{}),nt)),Ne(Ze({},Ae))))},uu=function(t){function n(n){var o=t.call(this,n)||this;return o._root=e.createRef(),o._header=e.createRef(),o._groupedList=e.createRef(),o._list=e.createRef(),o._focusZone=e.createRef(),o._selectionZone=e.createRef(),o._onRenderRow=function(t,n){return e.createElement(ll,Ze({},t))},o._getDerivedStateFromProps=function(e,t){var n=o.props,r=n.checkboxVisibility,i=n.items,a=n.setKey,s=n.selectionMode,l=void 0===s?o._selection.mode:s,u=n.columns,c=n.viewport,d=n.compact,p=n.dragDropEvents,f=(o.props.groupProps||{}).isAllGroupsCollapsed,h=void 0===f?void 0:f,m=e.viewport&&e.viewport.width||0,g=c&&c.width||0,v=e.setKey!==a||void 0===e.setKey,y=!1;e.layoutMode!==o.props.layoutMode&&(y=!0);var b=t;return v&&(o._initialFocusedIndex=e.initialFocusedIndex,b=Ze(Ze({},b),{focusedItemIndex:void 0!==o._initialFocusedIndex?o._initialFocusedIndex:-1})),o.props.disableSelectionZone||e.items===i||o._selection.setItems(e.items,v),e.checkboxVisibility===r&&e.columns===u&&m===g&&e.compact===d||(y=!0),b=Ze(Ze({},b),o._adjustColumns(e,b,!0)),e.selectionMode!==l&&(y=!0),void 0===h&&e.groupProps&&void 0!==e.groupProps.isAllGroupsCollapsed&&(b=Ze(Ze({},b),{isCollapsed:e.groupProps.isAllGroupsCollapsed,isSomeGroupExpanded:!e.groupProps.isAllGroupsCollapsed})),e.dragDropEvents!==p&&(o._dragDropHelper&&o._dragDropHelper.dispose(),o._dragDropHelper=e.dragDropEvents?new js({selection:o._selection,minimumPixelsForDrag:e.minimumPixelsForDrag}):void 0,y=!0),y&&(b=Ze(Ze({},b),{version:{}})),b},o._onGroupExpandStateChanged=function(e){o.setState({isSomeGroupExpanded:e})},o._onColumnIsSizingChanged=function(e,t){o.setState({isSizing:t})},o._onRowDidMount=function(e){var t=e.props,n=t.item,r=t.itemIndex,i=o._getItemKey(n,r);o._activeRows[i]=e,o._setFocusToRowIfPending(e);var a=o.props.onRowDidMount;a&&a(n,r)},o._onRowWillUnmount=function(e){var t=o.props.onRowWillUnmount,n=e.props,r=n.item,i=n.itemIndex,a=o._getItemKey(r,i);delete o._activeRows[a],t&&t(r,i)},o._onToggleCollapse=function(e){o.setState({isCollapsed:e}),o._groupedList.current&&o._groupedList.current.toggleCollapseAll(e)},o._onColumnResized=function(e,t,n){var r=Math.max(e.minWidth||su,t);o.props.onColumnResize&&o.props.onColumnResize(e,r,n),o._rememberCalculatedWidth(e,r),o.setState(Ze(Ze({},o._adjustColumns(o.props,o.state,!0,n)),{version:{}}))},o._onColumnAutoResized=function(e,t){var n=0,r=0,i=Object.keys(o._activeRows).length;for(var a in o._activeRows){if(o._activeRows.hasOwnProperty(a))o._activeRows[a].measureCell(t,(function(a){n=Math.max(n,a),++r===i&&o._onColumnResized(e,n,t)}))}},o._onActiveRowChanged=function(e,t){var n=o.props,r=n.items,i=n.onActiveItemChanged;if(e&&e.getAttribute("data-item-index")){var a=Number(e.getAttribute("data-item-index"));a>=0&&(i&&i(r[a],a,t),o.setState({focusedItemIndex:a}))}},o._onBlur=function(e){o.setState({focusedItemIndex:-1})},gi(o),o._async=new ta(o),o._activeRows={},o._columnOverrides={},o.state={focusedItemIndex:-1,lastWidth:0,adjustedColumns:o._getAdjustedColumns(n,void 0),isSizing:!1,isCollapsed:n.groupProps&&n.groupProps.isAllGroupsCollapsed,isSomeGroupExpanded:n.groupProps&&!n.groupProps.isAllGroupsCollapsed,version:{},getDerivedStateFromProps:o._getDerivedStateFromProps},o._selection=n.selection||new hl({onSelectionChanged:void 0,getKey:n.getKey,selectionMode:n.selectionMode}),o.props.disableSelectionZone||o._selection.setItems(n.items,!1),o._dragDropHelper=n.dragDropEvents?new js({selection:o._selection,minimumPixelsForDrag:n.minimumPixelsForDrag}):void 0,o._initialFocusedIndex=n.initialFocusedIndex,o}return $e(n,t),n.getDerivedStateFromProps=function(e,t){return t.getDerivedStateFromProps(e,t)},n.prototype.scrollToIndex=function(e,t,n){this._list.current&&this._list.current.scrollToIndex(e,t,n),this._groupedList.current&&this._groupedList.current.scrollToIndex(e,t,n)},n.prototype.focusIndex=function(e,t,n,o){void 0===t&&(t=!1);var r=this.props.items[e];if(r){this.scrollToIndex(e,n,o);var i=this._getItemKey(r,e),a=this._activeRows[i];a&&this._setFocusToRow(a,t)}},n.prototype.getStartItemIndexInView=function(){return this._list&&this._list.current?this._list.current.getStartItemIndexInView():this._groupedList&&this._groupedList.current?this._groupedList.current.getStartItemIndexInView():0},n.prototype.componentWillUnmount=function(){this._dragDropHelper&&this._dragDropHelper.dispose(),this._async.dispose()},n.prototype.componentDidUpdate=function(e,t){if((this._notifyColumnsResized(),void 0!==this._initialFocusedIndex)&&(i=this.props.items[this._initialFocusedIndex])){var n=this._getItemKey(i,this._initialFocusedIndex);(o=this._activeRows[n])&&this._setFocusToRowIfPending(o)}if(this.props.items!==e.items&&this.props.items.length>0&&-1!==this.state.focusedItemIndex&&!oa(this._root.current,document.activeElement,!1)){var o,r=this.state.focusedItemIndex<this.props.items.length?this.state.focusedItemIndex:this.props.items.length-1,i=this.props.items[r];n=this._getItemKey(i,this.state.focusedItemIndex);(o=this._activeRows[n])?this._setFocusToRow(o):this._initialFocusedIndex=r}this.props.onDidUpdate&&this.props.onDidUpdate(this)},n.prototype.render=function(){return e.createElement(lu,Ze({},this.props,this.state,{selection:this._selection,dragDropHelper:this._dragDropHelper,rootRef:this._root,listRef:this._list,groupedListRef:this._groupedList,focusZoneRef:this._focusZone,headerRef:this._header,selectionZoneRef:this._selectionZone,onGroupExpandStateChanged:this._onGroupExpandStateChanged,onColumnIsSizingChanged:this._onColumnIsSizingChanged,onRowDidMount:this._onRowDidMount,onRowWillUnmount:this._onRowWillUnmount,onColumnResized:this._onColumnResized,onColumnAutoResized:this._onColumnAutoResized,onToggleCollapse:this._onToggleCollapse,onActiveRowChanged:this._onActiveRowChanged,onBlur:this._onBlur,onRenderDefaultRow:this._onRenderRow}))},n.prototype.forceUpdate=function(){t.prototype.forceUpdate.call(this),this._forceListUpdates()},n.prototype._getGroupNestingDepth=function(){for(var e=0,t=this.props.groups;t&&t.length>0;)e++,t=t[0].children;return e},n.prototype._setFocusToRowIfPending=function(e){var t=e.props.itemIndex;void 0!==this._initialFocusedIndex&&t===this._initialFocusedIndex&&(this._setFocusToRow(e),delete this._initialFocusedIndex)},n.prototype._setFocusToRow=function(e,t){void 0===t&&(t=!1),this._selectionZone.current&&this._selectionZone.current.ignoreNextFocus(),this._async.setTimeout((function(){e.focus(t)}),0)},n.prototype._forceListUpdates=function(){this._groupedList.current&&this._groupedList.current.forceUpdate(),this._list.current&&this._list.current.forceUpdate()},n.prototype._notifyColumnsResized=function(){this.state.adjustedColumns.forEach((function(e){e.onColumnResize&&e.onColumnResize(e.currentWidth)}))},n.prototype._adjustColumns=function(e,t,n,o){var r=this._getAdjustedColumns(e,t,n,o),i=this.props.viewport,a=i&&i.width?i.width:0;return Ze(Ze({},t),{adjustedColumns:r,lastWidth:a})},n.prototype._getAdjustedColumns=function(e,t,n,o){var r,i=this,a=e.items,s=e.layoutMode,l=e.selectionMode,u=e.viewport,c=u&&u.width?u.width:0,d=e.columns,p=this.props?this.props.columns:[],f=t?t.lastWidth:-1,h=t?t.lastSelectionMode:void 0;return n||f!==c||h!==l||p&&d!==p?(d=d||function(e,t,n,o,r,i,a){var s=[];if(e&&e.length){var l=e[0];for(var u in l)l.hasOwnProperty(u)&&s.push({key:u,name:u,fieldName:u,minWidth:su,maxWidth:300,isCollapsable:!!s.length,isCollapsible:!!s.length,isMultiline:void 0!==a&&a,isSorted:o===u,isSortedDescending:!!r,isRowHeader:!1,columnActionsMode:Zi.clickable,isResizable:t,onColumnClick:n,isGrouped:i===u})}return s}(a,!0),s===Ji.fixedColumns?(r=this._getFixedColumns(d)).forEach((function(e){i._rememberCalculatedWidth(e,e.calculatedWidth)})):(r=void 0!==o?this._getJustifiedColumnsAfterResize(d,c,e,o):this._getJustifiedColumns(d,c,e,0)).forEach((function(e){i._getColumnOverride(e.key).currentWidth=e.calculatedWidth})),r):d||[]},n.prototype._getFixedColumns=function(e){var t=this;return e.map((function(e){var n=Ze(Ze({},e),t._columnOverrides[e.key]);return n.calculatedWidth||(n.calculatedWidth=n.maxWidth||n.minWidth||su),n}))},n.prototype._getJustifiedColumnsAfterResize=function(e,t,n,o){var r=this,i=e.slice(0,o);i.forEach((function(e){return e.calculatedWidth=r._getColumnOverride(e.key).currentWidth}));var a=i.reduce((function(e,t,o){return e+cu(t,0===o,n)}),0),s=e.slice(o),l=t-a;return Je(i,this._getJustifiedColumns(s,l,n,o))},n.prototype._getJustifiedColumns=function(e,t,n,o){for(var r=this,i=n.selectionMode,a=void 0===i?this._selection.mode:i,s=n.checkboxVisibility,l=a!==Ws.none&&s!==ea.hidden?48:0,u=36*this._getGroupNestingDepth(),c=0,d=t-(l+u),p=e.map((function(e,t){var i=Ze(Ze(Ze({},e),{calculatedWidth:e.minWidth||su}),r._columnOverrides[e.key]);return c+=cu(i,t+o===0,n),i})),f=p.length-1;f>0&&c>d;){var h=(y=p[f]).minWidth||su,m=c-d;if(y.calculatedWidth-h>=m||!y.isCollapsible&&!y.isCollapsable){var g=y.calculatedWidth;y.calculatedWidth=Math.max(y.calculatedWidth-m,h),c-=g-y.calculatedWidth}else c-=cu(y,!1,n),p.splice(f,1);f--}for(var v=0;v<p.length&&c<d;v++){var y=p[v],b=v===p.length-1,_=this._columnOverrides[y.key];if(!_||!_.calculatedWidth||b){var C=d-c,S=void 0;if(b)S=C;else{var k=y.maxWidth;h=y.minWidth||k||su;S=k?Math.min(C,k-h):C}y.calculatedWidth=y.calculatedWidth+S,c+=S}}return p},n.prototype._rememberCalculatedWidth=function(e,t){var n=this._getColumnOverride(e.key);n.calculatedWidth=t,n.currentWidth=t},n.prototype._getColumnOverride=function(e){return this._columnOverrides[e]=this._columnOverrides[e]||{}},n.prototype._getItemKey=function(e,t){var n=this.props.getKey,o=void 0;return e&&(o=e.key),n&&(o=n(e,t)),o||(o=t),o},n.defaultProps={layoutMode:Ji.justified,selectionMode:Ws.multiple,constrainMode:Xi.horizontalConstrained,checkboxVisibility:ea.onHover,isHeaderVisible:!0,compact:!1,useFastIcons:!0},n=Ye([iu],n)}(e.Component);function cu(e,t,n){var o=n.cellStyleProps,r=void 0===o?Ds:o;return e.calculatedWidth+r.cellLeftPadding+r.cellRightPadding+(e.isPadded?r.cellExtraRightPadding:0)}var du={root:"ms-DetailsList",compact:"ms-DetailsList--Compact",contentWrapper:"ms-DetailsList-contentWrapper",headerWrapper:"ms-DetailsList-headerWrapper",isFixed:"is-fixed",isHorizontalConstrained:"is-horizontalConstrained",listCell:"ms-List-cell"},pu=li(uu,(function(e){var t,n,o=e.theme,r=e.className,i=e.isHorizontalConstrained,a=e.compact,s=e.isFixed,l=o.semanticColors,u=Oo(du,o);return{root:[u.root,o.fonts.small,{position:"relative",color:l.listText,selectors:(t={},t["& ."+u.listCell]={minHeight:38,wordBreak:"break-word"},t)},s&&u.isFixed,a&&[u.compact,{selectors:(n={},n["."+u.listCell]={minHeight:32},n)}],i&&[u.isHorizontalConstrained,{overflowX:"auto",overflowY:"visible",WebkitOverflowScrolling:"touch"}],r],focusZone:[{display:"inline-block",minWidth:"100%",minHeight:1}],headerWrapper:u.headerWrapper,contentWrapper:u.contentWrapper}}),void 0,{scope:"DetailsList"}),fu=function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},hu=function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};function mu(e){return new Promise((function(t){return setTimeout(t,e)}))}var gu=function(e){return function(t){return fu(void 0,void 0,void 0,(function(){return hu(this,(function(n){switch(n.label){case 0:return[4,mu(100)];case 1:return n.sent(),t({type:"RemoveVehicle",payload:e}),[2]}}))}))}},vu=pi({cacheSize:100}),yu=li(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return $e(n,t),n.prototype.render=function(){var t=this.props,n=t.as,o=void 0===n?"label":n,r=t.children,i=t.className,a=t.disabled,s=t.styles,l=t.required,u=t.theme,c=vu(s,{className:i,disabled:a,required:l,theme:u});return e.createElement(o,Ze({},Zr(this.props,$r),{className:c.root}),r)},n}(e.Component),(function(e){var t,n=e.theme,o=e.className,r=e.disabled,i=e.required,a=n.semanticColors,s=ko.semibold,l=a.bodyText,u=a.disabledBodyText,c=a.errorText;return{root:["ms-Label",n.fonts.medium,{fontWeight:s,color:l,boxSizing:"border-box",boxShadow:"none",margin:0,display:"block",padding:"5px 0",wordWrap:"break-word",overflowWrap:"break-word"},r&&{color:u,selectors:Ze((t={},t[Eo]={color:"GrayText"},t),To())},i&&{selectors:{"::after":{content:"' *'",color:c,paddingRight:12}}},o]}}),void 0,{scope:"Label"});var bu,_u=pi(),Cu="TextField",Su=function(t){function n(n){var o=t.call(this,n)||this;o._textElement=e.createRef(),o._onFocus=function(e){o.props.onFocus&&o.props.onFocus(e),o.setState({isFocused:!0},(function(){o.props.validateOnFocusIn&&o._validate(o.value)}))},o._onBlur=function(e){o.props.onBlur&&o.props.onBlur(e),o.setState({isFocused:!1},(function(){o.props.validateOnFocusOut&&o._validate(o.value)}))},o._onRenderLabel=function(t){var n=t.label,r=t.required,i=o._classNames.subComponentStyles?o._classNames.subComponentStyles.label:void 0;return n?e.createElement(yu,{required:r,htmlFor:o._id,styles:i,disabled:t.disabled,id:o._labelId},t.label):null},o._onRenderDescription=function(t){return t.description?e.createElement("span",{className:o._classNames.description},t.description):null},o._onRevealButtonClick=function(e){o.setState((function(e){return{isRevealingPassword:!e.isRevealingPassword}}))},o._onInputChange=function(e){var t,n=e.target.value;void 0!==n&&n!==o._lastChangeValue&&(o._lastChangeValue=n,e.persist(),o.setState((function(e,r){var i=ku(r,e)||"";return(t=n===i)||o._isControlled?null:{uncontrolledValue:n}}),(function(){var r=o.props.onChange;!t&&r&&r(e,n)})))},gi(o),o._async=new ta(o),o._fallbackId=Pi(Cu),o._descriptionId=Pi("TextFieldDescription"),o._labelId=Pi("TextFieldLabel"),o._warnControlledUsage();var r=n.defaultValue,i=void 0===r?"":r;return"number"==typeof i&&(i=String(i)),o.state={uncontrolledValue:o._isControlled?void 0:i,isFocused:!1,errorMessage:""},o._delayedValidate=o._async.debounce(o._validate,o.props.deferredValidationTime),o._lastValidation=0,o}return $e(n,t),Object.defineProperty(n.prototype,"value",{get:function(){return ku(this.props,this.state)},enumerable:!0,configurable:!0}),n.prototype.componentDidMount=function(){this._adjustInputHeight(),this.props.validateOnLoad&&this._validate(this.value)},n.prototype.componentWillUnmount=function(){this._async.dispose()},n.prototype.getSnapshotBeforeUpdate=function(e,t){return{selection:[this.selectionStart,this.selectionEnd]}},n.prototype.componentDidUpdate=function(e,t,n){var o=this.props,r=(n||{}).selection,i=void 0===r?[null,null]:r,a=i[0],s=i[1];!!e.multiline!=!!o.multiline&&t.isFocused&&(this.focus(),null!==a&&null!==s&&a>=0&&s>=0&&this.setSelectionRange(a,s));var l=ku(e,t),u=this.value;l!==u&&(this._warnControlledUsage(e),this.state.errorMessage&&!o.errorMessage&&this.setState({errorMessage:""}),this._adjustInputHeight(),this._lastChangeValue=void 0,xu(o)&&this._delayedValidate(u))},n.prototype.render=function(){var t=this.props,n=t.borderless,o=t.className,r=t.disabled,i=t.iconProps,a=t.inputClassName,s=t.label,l=t.multiline,u=t.required,c=t.underlined,d=t.prefix,p=t.resizable,f=t.suffix,h=t.theme,m=t.styles,g=t.autoAdjustHeight,v=t.canRevealPassword,y=t.type,b=t.onRenderPrefix,_=void 0===b?this._onRenderPrefix:b,C=t.onRenderSuffix,S=void 0===C?this._onRenderSuffix:C,k=t.onRenderLabel,x=void 0===k?this._onRenderLabel:k,w=t.onRenderDescription,E=void 0===w?this._onRenderDescription:w,I=this.state,T=I.isFocused,D=I.isRevealingPassword,P=this._errorMessage,M=!!v&&"password"===y&&function(){var e;if("boolean"!=typeof bu){var t=pn();if(null===(e=t)||void 0===e?void 0:e.navigator){var n=/Edg/.test(t.navigator.userAgent||"");bu=!(function(){var e,t,n=pn();return!!(null===(t=null===(e=n)||void 0===e?void 0:e.navigator)||void 0===t?void 0:t.userAgent)&&n.navigator.userAgent.indexOf("rv:11.0")>-1}()||n)}else bu=!0}return bu}(),R=this._classNames=_u(m,{theme:h,className:o,disabled:r,focused:T,required:u,multiline:l,hasLabel:!!s,hasErrorMessage:!!P,borderless:n,resizable:p,hasIcon:!!i,underlined:c,inputClassName:a,autoAdjustHeight:g,hasRevealButton:M});return e.createElement("div",{className:R.root},e.createElement("div",{className:R.wrapper},x(this.props,this._onRenderLabel),e.createElement("div",{className:R.fieldGroup},(void 0!==d||this.props.onRenderPrefix)&&e.createElement("div",{className:R.prefix},_(this.props,this._onRenderPrefix)),l?this._renderTextArea():this._renderInput(),i&&e.createElement(es,Ze({className:R.icon},i)),M&&e.createElement("button",{className:R.revealButton,onClick:this._onRevealButtonClick,type:"button"},e.createElement("span",{className:R.revealSpan},e.createElement(es,{className:R.revealIcon,iconName:D?"Hide":"RedEye"}))),(void 0!==f||this.props.onRenderSuffix)&&e.createElement("div",{className:R.suffix},S(this.props,this._onRenderSuffix)))),this._isDescriptionAvailable&&e.createElement("span",{id:this._descriptionId},E(this.props,this._onRenderDescription),P&&e.createElement("div",{role:"alert"},e.createElement(xl,null,e.createElement("p",{className:R.errorMessage},e.createElement("span",{"data-automation-id":"error-message"},P))))))},n.prototype.focus=function(){this._textElement.current&&this._textElement.current.focus()},n.prototype.blur=function(){this._textElement.current&&this._textElement.current.blur()},n.prototype.select=function(){this._textElement.current&&this._textElement.current.select()},n.prototype.setSelectionStart=function(e){this._textElement.current&&(this._textElement.current.selectionStart=e)},n.prototype.setSelectionEnd=function(e){this._textElement.current&&(this._textElement.current.selectionEnd=e)},Object.defineProperty(n.prototype,"selectionStart",{get:function(){return this._textElement.current?this._textElement.current.selectionStart:-1},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"selectionEnd",{get:function(){return this._textElement.current?this._textElement.current.selectionEnd:-1},enumerable:!0,configurable:!0}),n.prototype.setSelectionRange=function(e,t){this._textElement.current&&this._textElement.current.setSelectionRange(e,t)},n.prototype._warnControlledUsage=function(e){this._id,this.props,null!==this.props.value||this._hasWarnedNullValue||(this._hasWarnedNullValue=!0,_r("Warning: 'value' prop on 'TextField' should not be null. Consider using an empty string to clear the component or undefined to indicate an uncontrolled component."))},Object.defineProperty(n.prototype,"_id",{get:function(){return this.props.id||this._fallbackId},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"_isControlled",{get:function(){return void 0!==(e=this.props)[t="value"]&&null!==e[t];var e,t},enumerable:!0,configurable:!0}),n.prototype._onRenderPrefix=function(t){var n=t.prefix;return e.createElement("span",{style:{paddingBottom:"1px"}},n)},n.prototype._onRenderSuffix=function(t){var n=t.suffix;return e.createElement("span",{style:{paddingBottom:"1px"}},n)},Object.defineProperty(n.prototype,"_errorMessage",{get:function(){var e=this.props.errorMessage;return(void 0===e?this.state.errorMessage:e)||""},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"_isDescriptionAvailable",{get:function(){var e=this.props;return!!(e.onRenderDescription||e.description||this._errorMessage)},enumerable:!0,configurable:!0}),n.prototype._renderTextArea=function(){var t=Zr(this.props,qr,["defaultValue"]),n=this.props["aria-labelledby"]||(this.props.label?this._labelId:void 0);return e.createElement("textarea",Ze({id:this._id},t,{ref:this._textElement,value:this.value||"",onInput:this._onInputChange,onChange:this._onInputChange,className:this._classNames.field,"aria-labelledby":n,"aria-describedby":this._isDescriptionAvailable?this._descriptionId:this.props["aria-describedby"],"aria-invalid":!!this._errorMessage,"aria-label":this.props.ariaLabel,readOnly:this.props.readOnly,onFocus:this._onFocus,onBlur:this._onBlur}))},n.prototype._renderInput=function(){var t,n=Zr(this.props,jr,["defaultValue","type"]),o=this.props["aria-labelledby"]||(this.props.label?this._labelId:void 0),r=this.state.isRevealingPassword?"text":null!=(t=this.props.type)?t:"text";return e.createElement("input",Ze({type:r,id:this._id,"aria-labelledby":o},n,{ref:this._textElement,value:this.value||"",onInput:this._onInputChange,onChange:this._onInputChange,className:this._classNames.field,"aria-label":this.props.ariaLabel,"aria-describedby":this._isDescriptionAvailable?this._descriptionId:this.props["aria-describedby"],"aria-invalid":!!this._errorMessage,readOnly:this.props.readOnly,onFocus:this._onFocus,onBlur:this._onBlur}))},n.prototype._validate=function(e){var t=this;if(this._latestValidateValue!==e||!xu(this.props)){this._latestValidateValue=e;var n=this.props.onGetErrorMessage,o=n&&n(e||"");if(void 0!==o)if("string"!=typeof o&&"then"in o){var r=++this._lastValidation;o.then((function(n){r===t._lastValidation&&t.setState({errorMessage:n}),t._notifyAfterValidate(e,n)}))}else this.setState({errorMessage:o}),this._notifyAfterValidate(e,o);else this._notifyAfterValidate(e,"")}},n.prototype._notifyAfterValidate=function(e,t){e===this.value&&this.props.onNotifyValidationResult&&this.props.onNotifyValidationResult(t,e)},n.prototype._adjustInputHeight=function(){if(this._textElement.current&&this.props.autoAdjustHeight&&this.props.multiline){var e=this._textElement.current;e.style.height="",e.style.height=e.scrollHeight+"px"}},n.defaultProps={resizable:!0,deferredValidationTime:200,validateOnLoad:!0,canRevealPassword:!1},n}(e.Component);function ku(e,t){var n=e.value,o=void 0===n?t.uncontrolledValue:n;return"number"==typeof o?String(o):o}function xu(e){return!(e.validateOnFocusIn||e.validateOnFocusOut)}var wu={root:"ms-TextField",description:"ms-TextField-description",errorMessage:"ms-TextField-errorMessage",field:"ms-TextField-field",fieldGroup:"ms-TextField-fieldGroup",prefix:"ms-TextField-prefix",suffix:"ms-TextField-suffix",wrapper:"ms-TextField-wrapper",revealButton:"ms-TextField-reveal",multiline:"ms-TextField--multiline",borderless:"ms-TextField--borderless",underlined:"ms-TextField--underlined",unresizable:"ms-TextField--unresizable",required:"is-required",disabled:"is-disabled",active:"is-active"};function Eu(e){var t=e.underlined,n=e.disabled,o=e.focused,r=e.theme,i=r.palette,a=r.fonts;return function(){var e;return{root:[t&&n&&{color:i.neutralTertiary},t&&{fontSize:a.medium.fontSize,marginRight:8,paddingLeft:12,paddingRight:0,lineHeight:"22px",height:32},t&&o&&{selectors:(e={},e[Eo]={height:31},e)}]}}}var Iu=li(Su,(function(e){var t,n,o,r,i,a,s,l,u,c,d,p,f=e.theme,h=e.className,m=e.disabled,g=e.focused,v=e.required,y=e.multiline,b=e.hasLabel,_=e.borderless,C=e.underlined,S=e.hasIcon,k=e.resizable,x=e.hasErrorMessage,w=e.inputClassName,E=e.autoAdjustHeight,I=e.hasRevealButton,T=f.semanticColors,D=f.effects,P=f.fonts,M=Oo(wu,f),R={background:T.disabledBackground,color:m?T.disabledText:T.inputPlaceholderText,display:"flex",alignItems:"center",padding:"0 10px",lineHeight:1,whiteSpace:"nowrap",flexShrink:0,selectors:(t={},t[Eo]={background:"Window",color:m?"GrayText":"WindowText"},t)},F=[P.medium,{color:T.inputPlaceholderText,opacity:1,selectors:(n={},n[Eo]={color:"GrayText"},n)}],N={color:T.disabledText,selectors:(o={},o[Eo]={color:"GrayText"},o)};return{root:[M.root,P.medium,v&&M.required,m&&M.disabled,g&&M.active,y&&M.multiline,_&&M.borderless,C&&M.underlined,yr,{position:"relative"},h],wrapper:[M.wrapper,C&&[{display:"flex",borderBottom:"1px solid "+(x?T.errorText:T.inputBorder),width:"100%"},m&&{borderBottomColor:T.disabledBackground,selectors:Ze((r={},r[Eo]={borderColor:"GrayText"},r),To())},!m&&{selectors:{":hover":{borderBottomColor:x?T.errorText:T.inputBorderHovered,selectors:Ze((i={},i[Eo]={borderBottomColor:"Highlight"},i),To())}}},g&&[{position:"relative"},Ao(x?T.errorText:T.inputFocusBorderAlt,0,"borderBottom")]]],fieldGroup:[M.fieldGroup,yr,{border:"1px solid "+T.inputBorder,borderRadius:D.roundedCorner2,background:T.inputBackground,cursor:"text",height:32,display:"flex",flexDirection:"row",alignItems:"stretch",position:"relative"},y&&{minHeight:"60px",height:"auto",display:"flex"},!g&&!m&&{selectors:{":hover":{borderColor:T.inputBorderHovered,selectors:Ze((a={},a[Eo]={borderColor:"Highlight"},a),To())}}},g&&!C&&Ao(x?T.errorText:T.inputFocusBorderAlt,D.roundedCorner2),m&&{borderColor:T.disabledBackground,selectors:Ze((s={},s[Eo]={borderColor:"GrayText"},s),To()),cursor:"default"},_&&{border:"none"},_&&g&&{border:"none",selectors:{":after":{border:"none"}}},C&&{flex:"1 1 0px",border:"none",textAlign:"left"},C&&m&&{backgroundColor:"transparent"},x&&!C&&{borderColor:T.errorText,selectors:{"&:hover":{borderColor:T.errorText}}},!b&&v&&{selectors:(l={":before":{content:"'*'",color:T.errorText,position:"absolute",top:-5,right:-10}},l[Eo]={selectors:{":before":{color:"WindowText",right:-14}}},l)}],field:[P.medium,M.field,yr,{borderRadius:0,border:"none",background:"none",backgroundColor:"transparent",color:T.inputText,padding:"0 8px",width:"100%",minWidth:0,textOverflow:"ellipsis",outline:0,selectors:(u={"&:active, &:focus, &:hover":{outline:0},"::-ms-clear":{display:"none"}},u[Eo]={background:"Window",color:m?"GrayText":"WindowText"},u)},br(F),y&&!k&&[M.unresizable,{resize:"none"}],y&&{minHeight:"inherit",lineHeight:17,flexGrow:1,paddingTop:6,paddingBottom:6,overflow:"auto",width:"100%"},y&&E&&{overflow:"hidden"},S&&!I&&{paddingRight:24},y&&S&&{paddingRight:40},m&&[{backgroundColor:T.disabledBackground,color:T.disabledText,borderColor:T.disabledBackground},br(N)],C&&{textAlign:"left"},g&&!_&&{selectors:(c={},c[Eo]={paddingLeft:11,paddingRight:11},c)},g&&y&&!_&&{selectors:(d={},d[Eo]={paddingTop:4},d)},w],icon:[y&&{paddingRight:24,alignItems:"flex-end"},{pointerEvents:"none",position:"absolute",bottom:6,right:8,top:"auto",fontSize:xo.medium,lineHeight:18},m&&{color:T.disabledText}],description:[M.description,{color:T.bodySubtext,fontSize:P.xSmall.fontSize}],errorMessage:[M.errorMessage,wo.slideDownIn20,P.small,{color:T.errorText,margin:0,paddingTop:5,display:"flex",alignItems:"center"}],prefix:[M.prefix,R],suffix:[M.suffix,R],revealButton:[M.revealButton,"ms-Button","ms-Button--icon",{height:30,width:32,border:"none",padding:"0px 4px",backgroundColor:"transparent",color:T.link,selectors:{":hover":{outline:0,color:T.primaryButtonBackgroundHovered,backgroundColor:T.buttonBackgroundHovered,selectors:(p={},p[Eo]={borderColor:"Highlight",color:"Highlight"},p)},":focus":{outline:0}}},S&&{marginRight:28}],revealSpan:{display:"flex",height:"100%",alignItems:"center"},revealIcon:{margin:"0px 4px",pointerEvents:"none",bottom:6,right:8,top:"auto",fontSize:xo.medium,lineHeight:18},subComponentStyles:{label:Eu(e)}}}),void 0,{scope:"TextField"});!function(e){function t(n,o){var r=e.call(this,n,o)||this;return function(e,t,n){for(var o=0,r=n.length;o<r;o++)Tu(e,t,n[o])}(r,t.prototype,["componentDidMount","shouldComponentUpdate","getSnapshotBeforeUpdate","render","componentDidUpdate","componentWillUnmount"]),r}$e(t,e),t.prototype.componentDidUpdate=function(e,t){this._updateComponentRef(e,this.props)},t.prototype.componentDidMount=function(){this._setComponentRef(this.props.componentRef,this)},t.prototype.componentWillUnmount=function(){if(this._setComponentRef(this.props.componentRef,null),this.__disposables){for(var e=0,t=this._disposables.length;e<t;e++){var n=this.__disposables[e];n.dispose&&n.dispose()}this.__disposables=null}},Object.defineProperty(t.prototype,"className",{get:function(){if(!this.__className){var e=/function (.{1,})\(/.exec(this.constructor.toString());this.__className=e&&e.length>1?e[1]:""}return this.__className},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"_disposables",{get:function(){return this.__disposables||(this.__disposables=[]),this.__disposables},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"_async",{get:function(){return this.__async||(this.__async=new ta(this),this._disposables.push(this.__async)),this.__async},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"_events",{get:function(){return this.__events||(this.__events=new Ii(this),this._disposables.push(this.__events)),this.__events},enumerable:!0,configurable:!0}),t.prototype._resolveRef=function(e){var t=this;return this.__resolves||(this.__resolves={}),this.__resolves[e]||(this.__resolves[e]=function(n){return t[e]=n}),this.__resolves[e]},t.prototype._updateComponentRef=function(e,t){void 0===t&&(t={}),e&&t&&e.componentRef!==t.componentRef&&(this._setComponentRef(e.componentRef,null),this._setComponentRef(t.componentRef,this))},t.prototype._warnDeprecations=function(e){this.className,this.props},t.prototype._warnMutuallyExclusive=function(e){this.className,this.props},t.prototype._warnConditionallyRequiredProps=function(e,t,n){this.className,this.props},t.prototype._setComponentRef=function(e,t){!this._skipComponentRefResolution&&e&&("function"==typeof e&&e(t),"object"==typeof e&&(e.current=t))}}(e.Component);function Tu(e,t,n){var o=e[n],r=t[n];(o||r)&&(e[n]=function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return r&&(e=r.apply(this,t)),o!==r&&(e=o.apply(this,t)),e})}function Du(){return null}var Pu,Mu,Ru=function(t){var n=t.className,o=t.imageProps,r=Zr(t,Ur),i=t["aria-label"]?{}:{role:"presentation","aria-hidden":!o.alt&&!o["aria-labelledby"]};return e.createElement("div",Ze({},i,r,{className:ra(ja,Ga.root,Ga.image,n)}),e.createElement(Ya,Ze({},o)))},Fu=0,Nu=1,Au=2,Lu=3,Bu=4,Ou=5,Hu=6,zu=7,Wu=8,Uu=9,Vu=10,Ku=11,Gu=12,ju=13;function qu(e){if(void 0===Mu||e){var t=pn(),n=t&&t.navigator.userAgent;Mu=!!n&&-1!==n.indexOf("Macintosh")}return!!Mu}!function(e){e[e.Normal=0]="Normal",e[e.Divider=1]="Divider",e[e.Header=2]="Header",e[e.Section=3]="Section"}(Pu||(Pu={}));var Qu=function(){return!!(window&&window.navigator&&window.navigator.userAgent)&&/iPad|iPhone|iPod/i.test(window.navigator.userAgent)};function $u(e){return e.canCheck?!(!e.isChecked&&!e.checked):"boolean"==typeof e.isChecked?e.isChecked:"boolean"==typeof e.checked?e.checked:null}function Zu(e){return!(!e.subMenuProps&&!e.items)}function Xu(e){return!(!e.isDisabled&&!e.disabled)}function Yu(e){return null!==$u(e)?"menuitemcheckbox":"menuitem"}var Ju,ec=e.createContext({window:"object"==typeof window?window:void 0});!function(e){e[e.small=0]="small",e[e.medium=1]="medium",e[e.large=2]="large",e[e.xLarge=3]="xLarge",e[e.xxLarge=4]="xxLarge",e[e.xxxLarge=5]="xxxLarge",e[e.unknown=999]="unknown"}(Ju||(Ju={}));var tc,nc,oc,rc,ic=[479,639,1023,1365,1919,99999999];function ac(){return tc||nc||Ju.large}function sc(t){var n,o=((n=function(n){function o(e){var t=n.call(this,e)||this;return t._onResize=function(){var e=lc(t.context.window);e!==t.state.responsiveMode&&t.setState({responsiveMode:e})},t._events=new Ii(t),t._updateComposedComponentRef=t._updateComposedComponentRef.bind(t),t.state={responsiveMode:ac()},t}return $e(o,n),o.prototype.componentDidMount=function(){this._events.on(this.context.window,"resize",this._onResize),this._onResize()},o.prototype.componentWillUnmount=function(){this._events.dispose()},o.prototype.render=function(){var n=this.state.responsiveMode;return n===Ju.unknown?null:e.createElement(t,Ze({ref:this._updateComposedComponentRef,responsiveMode:n},this.props))},o}(ou)).contextType=ec,n);return ps(t,o)}function lc(e){var t=Ju.small;if(e){try{for(;e.innerWidth>ic[t];)t++}catch(e){t=ac()}nc=t}else{if(void 0===tc)throw new Error("Content was rendered in a server environment without providing a default responsive mode. Call setResponsiveMode to define what the responsive mode is.");t=tc}return t}function uc(e,t,n,o){return e.addEventListener(t,n,o),function(){return e.removeEventListener(t,n,o)}}!function(e){e[e.top=1]="top",e[e.bottom=-1]="bottom",e[e.left=2]="left",e[e.right=-2]="right"}(oc||(oc={})),function(e){e[e.top=0]="top",e[e.bottom=1]="bottom",e[e.start=2]="start",e[e.end=3]="end"}(rc||(rc={}));var cc,dc=function(){function e(e,t,n,o){void 0===e&&(e=0),void 0===t&&(t=0),void 0===n&&(n=0),void 0===o&&(o=0),this.top=n,this.bottom=o,this.left=e,this.right=t}return Object.defineProperty(e.prototype,"width",{get:function(){return this.right-this.left},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this.bottom-this.top},enumerable:!0,configurable:!0}),e.prototype.equals=function(e){return parseFloat(this.top.toFixed(4))===parseFloat(e.top.toFixed(4))&&parseFloat(this.bottom.toFixed(4))===parseFloat(e.bottom.toFixed(4))&&parseFloat(this.left.toFixed(4))===parseFloat(e.left.toFixed(4))&&parseFloat(this.right.toFixed(4))===parseFloat(e.right.toFixed(4))},e}();function pc(e,t,n){return{targetEdge:e,alignmentEdge:t,isAuto:n}}var fc=((cc={})[Fu]=pc(oc.top,oc.left),cc[Nu]=pc(oc.top),cc[Au]=pc(oc.top,oc.right),cc[Lu]=pc(oc.top,void 0,!0),cc[Bu]=pc(oc.bottom,oc.left),cc[Ou]=pc(oc.bottom),cc[Hu]=pc(oc.bottom,oc.right),cc[zu]=pc(oc.bottom,void 0,!0),cc[Wu]=pc(oc.left,oc.top),cc[Uu]=pc(oc.left),cc[Vu]=pc(oc.left,oc.bottom),cc[Ku]=pc(oc.right,oc.top),cc[Gu]=pc(oc.right),cc[ju]=pc(oc.right,oc.bottom),cc);function hc(e,t){return!(e.top<t.top)&&(!(e.bottom>t.bottom)&&(!(e.left<t.left)&&!(e.right>t.right)))}function mc(e,t){var n=[];return e.top<t.top&&n.push(oc.top),e.bottom>t.bottom&&n.push(oc.bottom),e.left<t.left&&n.push(oc.left),e.right>t.right&&n.push(oc.right),n}function gc(e,t){return e[oc[t]]}function vc(e,t,n){return e[oc[t]]=n,e}function yc(e,t){var n=Dc(t);return(gc(e,n.positiveEdge)+gc(e,n.negativeEdge))/2}function bc(e,t){return e>0?t:-1*t}function _c(e,t){return bc(e,gc(t,e))}function Cc(e,t,n){return bc(n,gc(e,n)-gc(t,n))}function Sc(e,t,n){var o=gc(e,t)-n;return e=vc(e,t,n),e=vc(e,-1*t,gc(e,-1*t)-o)}function kc(e,t,n,o){return void 0===o&&(o=0),Sc(e,n,gc(t,n)+bc(n,o))}function xc(e,t,n){return _c(n,e)>_c(n,t)}function wc(e,t,n,o,r,i,a){void 0===r&&(r=0);var s=o.alignmentEdge,l=o.alignTargetEdge,u={elementRectangle:e,targetEdge:o.targetEdge,alignmentEdge:s};i||a||(u=function(e,t,n,o,r){void 0===r&&(r=0);var i=[oc.left,oc.right,oc.bottom,oc.top];gn()&&(i[0]*=-1,i[1]*=-1);for(var a=e,s=o.targetEdge,l=o.alignmentEdge,u=0;u<4;u++){if(xc(a,n,s))return{elementRectangle:a,targetEdge:s,alignmentEdge:l};i.splice(i.indexOf(s),1),i.length>0&&(i.indexOf(-1*s)>-1?s*=-1:(l=s,s=i.slice(-1)[0]),a=Tc(e,t,{targetEdge:s,alignmentEdge:l},r))}return{elementRectangle:e,targetEdge:o.targetEdge,alignmentEdge:o.alignmentEdge}}(e,t,n,o,r));var c=mc(e,n);if(l){if(u.alignmentEdge&&c.indexOf(-1*u.alignmentEdge)>-1){var d=function(e,t,n,o){var r=e.alignmentEdge,i=e.targetEdge,a=-1*r;return{elementRectangle:Tc(e.elementRectangle,t,{targetEdge:i,alignmentEdge:a},n,o),targetEdge:i,alignmentEdge:a}}(u,t,r,a);if(hc(d.elementRectangle,n))return d;u=Ec(mc(d.elementRectangle,n),u,n)}}else u=Ec(c,u,n);return u}function Ec(e,t,n){for(var o=0,r=e;o<r.length;o++){var i=r[o];t.elementRectangle=kc(t.elementRectangle,n,i)}return t}function Ic(e,t,n){var o=Dc(t).positiveEdge;return Sc(e,o,n-(yc(e,t)-gc(e,o)))}function Tc(e,t,n,o,r){var i;void 0===o&&(o=0);var a=n.alignmentEdge,s=n.targetEdge,l=r?s:-1*s;(i=r?kc(e,t,s,o):function(e,t,n,o){void 0===o&&(o=0);var r=bc(-1*n,o);return Sc(e,-1*n,gc(t,n)+r)}(e,t,s,o),a)?i=kc(i,t,a):i=Ic(i,l,yc(t,s));return i}function Dc(e){return e===oc.top||e===oc.bottom?{positiveEdge:oc.left,negativeEdge:oc.right}:{positiveEdge:oc.top,negativeEdge:oc.bottom}}function Pc(e,t,n){return n&&Math.abs(Cc(e,n,t))>Math.abs(Cc(e,n,-1*t))?-1*t:t}function Mc(e){return Math.sqrt(e*e*2)}function Rc(e,t,n){if(void 0===e&&(e=zu),n)return{alignmentEdge:n.alignmentEdge,isAuto:n.isAuto,targetEdge:n.targetEdge};var o=Ze({},fc[e]);return gn()?(o.alignmentEdge&&o.alignmentEdge%2==0&&(o.alignmentEdge=-1*o.alignmentEdge),void 0!==t?fc[t]:o):o}function Fc(e,t,n){var o=yc(t,e),r=yc(n,e),i=Dc(e),a=i.positiveEdge,s=i.negativeEdge;return o<=r?a:s}function Nc(e,t,n,o,r,i,a){var s=Tc(e,t,o,r,a);return hc(s,n)?{elementRectangle:s,targetEdge:o.targetEdge,alignmentEdge:o.alignmentEdge}:wc(e,t,n,o,r,i,a)}function Ac(e,t,n){var o=-1*e.targetEdge,r=new dc(0,e.elementRectangle.width,0,e.elementRectangle.height),i={},a=Pc(e.elementRectangle,e.alignmentEdge?e.alignmentEdge:Dc(o).positiveEdge,n);return i[oc[o]]=gc(t,o),i[oc[a]]=Cc(t,r,a),{elementPosition:Ze({},i),closestEdge:Fc(e.targetEdge,t,r),targetEdge:o}}function Lc(e,t){var n=t.targetRectangle,o=Dc(t.targetEdge),r=o.positiveEdge,i=o.negativeEdge,a=yc(n,t.targetEdge),s=new dc(e/2,t.elementRectangle.width-e/2,e/2,t.elementRectangle.height-e/2),l=new dc(0,e,0,e);return xc(l=Ic(l=Sc(l,-1*t.targetEdge,-e/2),-1*t.targetEdge,a-_c(r,t.elementRectangle)),s,r)?xc(l,s,i)||(l=kc(l,s,i)):l=kc(l,s,r),l}function Bc(e){var t=e.getBoundingClientRect();return new dc(t.left,t.right,t.top,t.bottom)}function Oc(e){return new dc(e.left,e.right,e.top,e.bottom)}function Hc(e,t,n,o,r){var i=0,a=fc[t],s=r?-1*a.targetEdge:a.targetEdge;return(i=s===oc.top?gc(e,a.targetEdge)-o.top-n:s===oc.bottom?o.bottom-gc(e,a.targetEdge)-n:o.bottom-e.top-n)>0?i:o.height}function zc(e,t,n,o){var r=e.gapSpace?e.gapSpace:0,i=function(e,t){var n;if(t){if(t.preventDefault){var o=t;n=new dc(o.clientX,o.clientX,o.clientY,o.clientY)}else if(t.getBoundingClientRect)n=Bc(t);else{var r=t,i=r.left||r.x,a=r.top||r.y;n=new dc(i,i,a,a)}if(!hc(n,e))for(var s=0,l=mc(n,e);s<l.length;s++){var u=l[s];n[oc[u]]=e[oc[u]]}}else n=new dc(0,0,0,0);return n}(n,e.target),a=function(e,t,n,o,r){return e.isAuto&&(e.alignmentEdge=Fc(e.targetEdge,t,n)),e.alignTargetEdge=r,e}(Rc(e.directionalHint,e.directionalHintForRTL,o),i,n,e.coverTarget,e.alignTargetEdge),s=Nc(Bc(t),i,n,a,r,e.directionalHintFixed,e.coverTarget);return Ze(Ze({},s),{targetRectangle:i})}function Wc(e,t,n,o,r){return{elementPosition:function(e,t,n,o,r,i,a){var s={},l=Bc(t),u=i?n:-1*n,c=oc[u],d=r||Dc(n).positiveEdge;return a||(d=Pc(e,d,o)),s[c]=Cc(e,l,u),s[oc[d]]=Cc(e,l,d),s}(e.elementRectangle,t,e.targetEdge,n,e.alignmentEdge,o,r),targetEdge:e.targetEdge,alignmentEdge:e.alignmentEdge}}function Uc(e,t,n,o,r){var i=e.isBeakVisible&&e.beakWidth||0,a=Mc(i)/2+(e.gapSpace?e.gapSpace:0),s=e;s.gapSpace=a;var l=e.bounds?Oc(e.bounds):new dc(0,window.innerWidth-Ca(),0,window.innerHeight),u=zc(s,n,l,o),c=Ac(u,Lc(i,u),l);return Ze(Ze({},Wc(u,t,l,e.coverTarget,r)),{beakPosition:c})}function Vc(e,t,n,o){return function(e,t,n,o){return Uc(e,t,n,o,!0)}(e,t,n,o)}var Kc,Gc=function(t){function n(n){var o=t.call(this,n)||this;return o._root=e.createRef(),o._disposables=[],o._onKeyDown=function(e){switch(e.which){case Xt:o.props.onDismiss&&(o.props.onDismiss(e),e.preventDefault(),e.stopPropagation())}},o._onFocus=function(){o._containsFocus=!0},o._onBlur=function(e){o._root.current&&e.relatedTarget&&!oa(o._root.current,e.relatedTarget)&&(o._containsFocus=!1)},o._async=new ta(o),o.state={needsVerticalScrollBar:!1},o}return $e(n,t),n.prototype.UNSAFE_componentWillMount=function(){this._originalFocusedElement=cn().activeElement},n.prototype.componentDidMount=function(){if(this._root.current){this._disposables.push(uc(this._root.current,"focus",this._onFocus,!0),uc(this._root.current,"blur",this._onBlur,!0));var e=pn(this._root.current);e&&this._disposables.push(uc(e,"keydown",this._onKeyDown)),function(e){var t=cn(e),n=t&&t.activeElement;return!(!n||!oa(e,n))}(this._root.current)&&(this._containsFocus=!0)}this._updateScrollBarAsync()},n.prototype.componentDidUpdate=function(){this._updateScrollBarAsync(),this._async.dispose()},n.prototype.componentWillUnmount=function(){var e;if(this._disposables.forEach((function(e){return e()})),this.props.shouldRestoreFocus){var t=this.props.onRestoreFocus;(void 0===t?jc:t)({originalElement:this._originalFocusedElement,containsFocus:this._containsFocus,documentContainsFocus:(null===(e=cn())||void 0===e?void 0:e.hasFocus())||!1})}delete this._originalFocusedElement},n.prototype.render=function(){var t=this.props,n=t.role,o=t.className,r=t.ariaLabel,i=t.ariaLabelledBy,a=t.ariaDescribedBy,s=t.style;return e.createElement("div",Ze({ref:this._root},Zr(this.props,$r),{className:o,role:n,"aria-label":r,"aria-labelledby":i,"aria-describedby":a,onKeyDown:this._onKeyDown,style:Ze({overflowY:this.state.needsVerticalScrollBar?"scroll":void 0,outline:"none"},s)}),this.props.children)},n.prototype._updateScrollBarAsync=function(){var e=this;this._async.requestAnimationFrame((function(){e._getScrollBar()}))},n.prototype._getScrollBar=function(){if(!this.props.style||!this.props.style.overflowY){var e=!1;if(this._root&&this._root.current&&this._root.current.firstElementChild){var t=this._root.current.clientHeight,n=this._root.current.firstElementChild.clientHeight;t>0&&n>t&&(e=n-t>1)}this.state.needsVerticalScrollBar!==e&&this.setState({needsVerticalScrollBar:e})}},n.defaultProps={shouldRestoreFocus:!0},n}(e.Component);function jc(e){var t=e.originalElement,n=e.containsFocus;t&&n&&t!==window&&t.focus&&t.focus()}var qc=((Kc={})[oc.top]=wo.slideUpIn10,Kc[oc.bottom]=wo.slideDownIn10,Kc[oc.left]=wo.slideLeftIn10,Kc[oc.right]=wo.slideRightIn10,Kc),Qc=pi({disableCaching:!0}),$c=0,Zc=0,Xc={opacity:0,filter:"opacity(0)"},Yc=["role","aria-roledescription"],Jc=function(t){function n(n){var o=t.call(this,n)||this;return o._hostElement=e.createRef(),o._calloutElement=e.createRef(),o._hasListeners=!1,o._disposables=[],o.dismiss=function(e){var t=o.props.onDismiss;t&&t(e)},o._dismissOnScroll=function(e){var t=o.props,n=t.preventDismissOnEvent,r=t.preventDismissOnScroll;o.state.positions&&(n&&!n(e)||!n&&!r)&&o._dismissOnClickOrScroll(e)},o._dismissOnResize=function(e){var t=o.props,n=t.preventDismissOnEvent,r=t.preventDismissOnResize;(n&&!n(e)||!n&&!r)&&o.dismiss(e)},o._dismissOnLostFocus=function(e){var t=o.props,n=t.preventDismissOnEvent,r=t.preventDismissOnLostFocus;(n&&!n(e)||!n&&!r)&&o._dismissOnClickOrScroll(e)},o._setInitialFocus=function(){o.props.setInitialFocus&&!o._didSetInitialFocus&&o.state.positions&&o._calloutElement.current&&(o._didSetInitialFocus=!0,o._async.requestAnimationFrame((function(){return ua(o._calloutElement.current)}),o._calloutElement.current))},o._onComponentDidMount=function(){o._addListeners(),o.props.onLayerMounted&&o.props.onLayerMounted(),o._updateAsyncPosition(),o._setHeightOffsetEveryFrame()},o._dismissOnTargetWindowBlur=function(e){var t=o.props,n=t.preventDismissOnEvent,r=t.preventDismissOnLostFocus;t.shouldDismissOnWindowFocus&&((!n||n(e))&&(n||r)||o._targetWindow.document.hasFocus()||null!==e.relatedTarget||o.dismiss(e))},o._mouseDownOnPopup=function(){o._isMouseDownOnPopup=!0},o._mouseUpOnPopup=function(){o._isMouseDownOnPopup=!1},o._async=new ta(o),o._didSetInitialFocus=!1,o.state={positions:void 0,slideDirectionalClassName:void 0,calloutElementRect:void 0,heightOffset:0},o._positionAttempts=0,o}return $e(n,t),n.prototype.componentDidUpdate=function(){this.props.hidden?this._hasListeners&&this._removeListeners():(this._setInitialFocus(),this._hasListeners||this._addListeners(),this._updateAsyncPosition())},n.prototype.shouldComponentUpdate=function(e,t){return!(!e.shouldUpdateWhenHidden&&this.props.hidden&&e.hidden)&&(!xi(this.props,e)||!xi(this.state,t))},n.prototype.UNSAFE_componentWillMount=function(){this._setTargetWindowAndElement(this._getTarget())},n.prototype.componentWillUnmount=function(){this._async.dispose(),this._disposables.forEach((function(e){return e()}))},n.prototype.UNSAFE_componentWillUpdate=function(e){var t=this._getTarget(e);(t!==this._getTarget()||"string"==typeof t||t instanceof String)&&!this._blockResetHeight&&(this._maxHeight=void 0,this._setTargetWindowAndElement(t)),e.gapSpace===this.props.gapSpace&&this.props.beakWidth===e.beakWidth||(this._maxHeight=void 0),e.finalHeight!==this.props.finalHeight&&this._setHeightOffsetEveryFrame(),this._didPositionPropsChange(e,this.props)&&(this._maxHeight=void 0,this._setTargetWindowAndElement(t),this.setState({positions:void 0}),this._didSetInitialFocus=!1,this._bounds=void 0),this._blockResetHeight=!1},n.prototype.componentDidMount=function(){this.props.hidden||this._onComponentDidMount()},n.prototype.render=function(){if(!this._targetWindow)return null;var t=this.props.target,n=this.props,o=n.styles,r=n.style,i=n.ariaLabel,a=n.ariaDescribedBy,s=n.ariaLabelledBy,l=n.className,u=n.isBeakVisible,c=n.children,d=n.beakWidth,p=n.calloutWidth,f=n.calloutMaxWidth,h=n.finalHeight,m=n.hideOverflow,g=void 0===m?!!h:m,v=n.backgroundColor,y=n.calloutMaxHeight,b=n.onScroll,_=n.shouldRestoreFocus,C=void 0===_||_;t=this._getTarget();var S=this.state.positions,k=this._getMaxHeight()?this._getMaxHeight()+this.state.heightOffset:void 0,x=y&&k&&y<k?y:k,w=g,E=u&&!!t;this._classNames=Qc(o,{theme:this.props.theme,className:l,overflowYHidden:w,calloutWidth:p,positions:S,beakWidth:d,backgroundColor:v,calloutMaxWidth:f});var I=Ze(Ze(Ze({},r),{maxHeight:x}),w&&{overflowY:"hidden"}),T=this.props.hidden?{visibility:"hidden"}:void 0;return e.createElement("div",{ref:this._hostElement,className:this._classNames.container,style:T},e.createElement("div",Ze({},Zr(this.props,$r,Yc),{className:ra(this._classNames.root,S&&S.targetEdge&&qc[S.targetEdge]),style:S?S.elementPosition:Xc,tabIndex:-1,ref:this._calloutElement}),E&&e.createElement("div",{className:this._classNames.beak,style:this._getBeakPosition()}),E&&e.createElement("div",{className:this._classNames.beakCurtain}),e.createElement(Gc,Ze({},Zr(this.props,Yc),{ariaLabel:i,onRestoreFocus:this.props.onRestoreFocus,ariaDescribedBy:a,ariaLabelledBy:s,className:this._classNames.calloutMain,onDismiss:this.dismiss,onScroll:b,shouldRestoreFocus:C,style:I,onMouseDown:this._mouseDownOnPopup,onMouseUp:this._mouseUpOnPopup}),c)))},n.prototype._dismissOnClickOrScroll=function(e){var t=e.target,n=this._hostElement.current&&!oa(this._hostElement.current,t);n&&this._isMouseDownOnPopup?this._isMouseDownOnPopup=!1:(!this._target&&n||e.target!==this._targetWindow&&n&&(this._target.stopPropagation||!this._target||this.props.dismissOnTargetClick||t!==this._target&&!oa(this._target,t)))&&this.dismiss(e)},n.prototype._addListeners=function(){var e=this;this._async.setTimeout((function(){e._disposables.push(uc(e._targetWindow,"scroll",e._dismissOnScroll,!0),uc(e._targetWindow,"resize",e._dismissOnResize,!0),uc(e._targetWindow.document.documentElement,"focus",e._dismissOnLostFocus,!0),uc(e._targetWindow.document.documentElement,"click",e._dismissOnLostFocus,!0),uc(e._targetWindow,"blur",e._dismissOnTargetWindowBlur,!0)),e._hasListeners=!0}),0)},n.prototype._removeListeners=function(){this._disposables.forEach((function(e){return e()})),this._disposables=[],this._hasListeners=!1},n.prototype._updateAsyncPosition=function(){var e=this;this._async.requestAnimationFrame((function(){return e._updatePosition()}),this._calloutElement.current)},n.prototype._getBeakPosition=function(){var e=this.state.positions,t=Ze({},e&&e.beakPosition?e.beakPosition.elementPosition:null);return t.top||t.bottom||t.left||t.right||(t.left=Zc,t.top=$c),t},n.prototype._updatePosition=function(){this._setTargetWindowAndElement(this._getTarget());var e=this.state.positions,t=this._hostElement.current,n=this._calloutElement.current,o=!!this.props.target;if(t&&n&&(!o||this._target)){var r=Ze({},this.props);r.bounds=this._getBounds(),r.target=this._target;var i=this.props.finalHeight?Vc(r,t,n,e):function(e,t,n,o){return Uc(e,t,n,o)}(r,t,n,e);!e&&i||e&&i&&!this._arePositionsEqual(e,i)&&this._positionAttempts<5?(this._positionAttempts++,this.setState({positions:i})):this._positionAttempts>0&&(this._positionAttempts=0,this.props.onPositioned&&this.props.onPositioned(this.state.positions))}},n.prototype._getBounds=function(){if(!this._bounds){var e=this.props.bounds,t="function"==typeof e?e(this.props.target,this._targetWindow):e;t||(n=this._target,o=this._targetWindow,t={top:(t=function(e,t){var n=void 0;if(t.getWindowSegments&&(n=t.getWindowSegments()),void 0===n||n.length<=1)return{top:0,left:0,right:t.innerWidth,bottom:t.innerHeight,width:t.innerWidth,height:t.innerHeight};var o=0,r=0;if(null!==e&&e.getBoundingClientRect){var i=e.getBoundingClientRect();o=(i.left+i.right)/2,r=(i.top+i.bottom)/2}else null!==e&&(o=e.left||e.x,r=e.top||e.y);for(var a={top:0,left:0,right:0,bottom:0,width:0,height:0},s=0,l=n;s<l.length;s++){var u=l[s];o&&u.left<=o&&u.right>=o&&r&&u.top<=r&&u.bottom>=r&&(a={top:u.top,left:u.left,right:u.right,bottom:u.bottom,width:u.width,height:u.height})}return a}(n,o)).top+this.props.minPagePadding,left:t.left+this.props.minPagePadding,right:t.right-this.props.minPagePadding,bottom:t.bottom-this.props.minPagePadding,width:t.width-2*this.props.minPagePadding,height:t.height-2*this.props.minPagePadding}),this._bounds=t}var n,o;return this._bounds},n.prototype._getMaxHeight=function(){var e=this;if(!this._maxHeight)if(this.props.directionalHintFixed&&this._target){var t=this.props.isBeakVisible?this.props.beakWidth:0,n=(this.props.gapSpace?this.props.gapSpace:0)+t;this._async.requestAnimationFrame((function(){e._target&&(e._maxHeight=function(e,t,n,o,r){void 0===n&&(n=0);var i=e,a=e,s=e,l=o?Oc(o):new dc(0,window.innerWidth-Ca(),0,window.innerHeight),u=s.left||s.x,c=s.top||s.y;return Hc(i.stopPropagation?new dc(i.clientX,i.clientX,i.clientY,i.clientY):void 0!==u&&void 0!==c?new dc(u,u,c,c):Bc(a),t,n,l,r)}(e._target,e.props.directionalHint,n,e._getBounds(),e.props.coverTarget),e._blockResetHeight=!0,e.forceUpdate())}),this._target)}else this._maxHeight=this._getBounds().height;return this._maxHeight},n.prototype._arePositionsEqual=function(e,t){return this._comparePositions(e.elementPosition,t.elementPosition)&&this._comparePositions(e.beakPosition.elementPosition,t.beakPosition.elementPosition)},n.prototype._comparePositions=function(e,t){for(var n in t)if(t.hasOwnProperty(n)){var o=e[n],r=t[n];if(void 0===o||void 0===r)return!1;if(o.toFixed(2)!==r.toFixed(2))return!1}return!0},n.prototype._setTargetWindowAndElement=function(e){var t=this._calloutElement.current;if(e)if("string"==typeof e){var n=cn(t);this._target=n?n.querySelector(e):null,this._targetWindow=pn(t)}else if(e.stopPropagation)this._targetWindow=pn(e.target),this._target=e;else if(e.getBoundingClientRect){var o=e;this._targetWindow=pn(o),this._target=o}else void 0!==e.current?(this._target=e.current,this._targetWindow=pn(this._target)):(this._targetWindow=pn(t),this._target=e);else this._targetWindow=pn(t)},n.prototype._setHeightOffsetEveryFrame=function(){var e=this;this._calloutElement.current&&this.props.finalHeight&&(this._setHeightOffsetTimer=this._async.requestAnimationFrame((function(){var t=e._calloutElement.current&&e._calloutElement.current.lastChild;if(t){var n=t.scrollHeight-t.offsetHeight;e.setState({heightOffset:e.state.heightOffset+n}),t.offsetHeight<e.props.finalHeight?e._setHeightOffsetEveryFrame():e._async.cancelAnimationFrame(e._setHeightOffsetTimer,e._calloutElement.current)}}),this._calloutElement.current))},n.prototype._didPositionPropsChange=function(e,t){return!e.hidden&&e.hidden!==t.hidden||e.directionalHint!==t.directionalHint},n.prototype._getTarget=function(e){return void 0===e&&(e=this.props),e.target},n.defaultProps={preventDismissOnLostFocus:!1,preventDismissOnScroll:!1,preventDismissOnResize:!1,isBeakVisible:!0,beakWidth:16,gapSpace:0,minPagePadding:8,directionalHint:zu},n}(e.Component);function ed(e){return{height:e,width:e}}var td={container:"ms-Callout-container",root:"ms-Callout",beak:"ms-Callout-beak",beakCurtain:"ms-Callout-beakCurtain",calloutMain:"ms-Callout-main"},nd=li(Jc,(function(e){var t,n=e.theme,o=e.className,r=e.overflowYHidden,i=e.calloutWidth,a=e.beakWidth,s=e.backgroundColor,l=e.calloutMaxWidth,u=Oo(td,n),c=n.semanticColors,d=n.effects;return{container:[u.container,{position:"relative"}],root:[u.root,n.fonts.medium,{position:"absolute",boxSizing:"border-box",borderRadius:d.roundedCorner2,boxShadow:d.elevation16,selectors:(t={},t[Eo]={borderWidth:1,borderStyle:"solid",borderColor:"WindowText"},t)},{selectors:{"&::-moz-focus-inner":{border:0},"&":{outline:"transparent"}}},o,!!i&&{width:i},!!l&&{maxWidth:l}],beak:[u.beak,{position:"absolute",backgroundColor:c.menuBackground,boxShadow:"inherit",border:"inherit",boxSizing:"border-box",transform:"rotate(45deg)"},ed(a),s&&{backgroundColor:s}],beakCurtain:[u.beakCurtain,{position:"absolute",top:0,right:0,bottom:0,left:0,backgroundColor:c.menuBackground,borderRadius:d.roundedCorner2}],calloutMain:[u.calloutMain,{backgroundColor:c.menuBackground,overflowX:"hidden",overflowY:"auto",position:"relative",borderRadius:d.roundedCorner2},r&&{overflowY:"hidden"},s&&{backgroundColor:s}]}}),void 0,{scope:"CalloutContent"}),od=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return $e(n,t),n.prototype.render=function(){var t=this.props,n=t.layerProps,o=Xe(t,["layerProps"]),r=e.createElement(nd,Ze({},o));return this.props.doNotLayer?r:e.createElement(Ss,Ze({},n),r)},n}(e.Component),rd=function(t){var n=t.item,o=t.hasIcons,r=t.classNames,i=n.iconProps;return o?n.onRenderIcon?n.onRenderIcon(t):e.createElement(es,Ze({},i,{className:r.icon})):null},id=function(t){var n=t.onCheckmarkClick,o=t.item,r=t.classNames,i=$u(o);if(n){return e.createElement(es,{iconName:!1!==o.canCheck&&i?"CheckMark":"",className:r.checkmarkIcon,onClick:function(e){return n(o,e)}})}return null},ad=function(t){var n=t.item,o=t.classNames;return n.text||n.name?e.createElement("span",{className:o.label},n.text||n.name):null},sd=function(t){var n=t.item,o=t.classNames;return n.secondaryText?e.createElement("span",{className:o.secondaryText},n.secondaryText):null},ld=function(t){var n=t.item,o=t.classNames,r=t.theme;return Zu(n)?e.createElement(es,Ze({iconName:gn(r)?"ChevronLeft":"ChevronRight"},n.submenuIconProps,{className:o.subMenuIcon})):null},ud=function(t){function n(e){var n=t.call(this,e)||this;return n.openSubMenu=function(){var e=n.props,t=e.item,o=e.openSubMenu,r=e.getSubmenuTarget;if(r){var i=r();Zu(t)&&o&&i&&o(t,i)}},n.dismissSubMenu=function(){var e=n.props,t=e.item,o=e.dismissSubMenu;Zu(t)&&o&&o()},n.dismissMenu=function(e){var t=n.props.dismissMenu;t&&t(void 0,e)},gi(n),n}return $e(n,t),n.prototype.render=function(){var t=this.props,n=t.item,o=t.classNames,r=n.onRenderContent||this._renderLayout;return e.createElement("div",{className:n.split?o.linkContentMenu:o.linkContent},r(this.props,{renderCheckMarkIcon:id,renderItemIcon:rd,renderItemName:ad,renderSecondaryText:sd,renderSubMenuIcon:ld}))},n.prototype._renderLayout=function(t,n){return e.createElement(e.Fragment,null,n.renderCheckMarkIcon(t),n.renderItemIcon(t),n.renderItemName(t),n.renderSecondaryText(t),n.renderSubMenuIcon(t))},n}(e.Component),cd=Kt((function(e){return Mr({wrapper:{display:"inline-flex",height:"100%",alignItems:"center"},divider:{width:1,height:"100%",backgroundColor:e.palette.neutralTertiaryAlt}})})),dd=36,pd=Io(0,639),fd=Kt((function(){var e;return{selectors:(e={},e[Eo]={backgroundColor:"Highlight",borderColor:"Highlight",color:"HighlightText",MsHighContrastAdjust:"none"},e)}})),hd=Kt((function(e){var t,n,o,r,i,a,s,l=e.semanticColors,u=e.fonts,c=e.palette,d=l.menuItemBackgroundHovered,p=l.menuItemTextHovered,f=l.menuItemBackgroundPressed,h=l.bodyDivider;return Dr({item:[u.medium,{color:l.bodyText,position:"relative",boxSizing:"border-box"}],divider:{display:"block",height:"1px",backgroundColor:h,position:"relative"},root:[Fo(e),u.medium,{color:l.bodyText,backgroundColor:"transparent",border:"none",width:"100%",height:dd,lineHeight:dd,display:"block",cursor:"pointer",padding:"0px 8px 0 4px",textAlign:"left"}],rootDisabled:{color:l.disabledBodyText,cursor:"default",pointerEvents:"none",selectors:Ze((t={},t[Eo]={color:"GrayText",opacity:1},t),To())},rootHovered:Ze({backgroundColor:d,color:p,selectors:{".ms-ContextualMenu-icon":{color:c.themeDarkAlt},".ms-ContextualMenu-submenuIcon":{color:c.neutralPrimary}}},fd()),rootFocused:Ze({backgroundColor:c.white},fd()),rootChecked:Ze({selectors:{".ms-ContextualMenu-checkmarkIcon":{color:c.neutralPrimary}}},fd()),rootPressed:Ze({backgroundColor:f,selectors:{".ms-ContextualMenu-icon":{color:c.themeDark},".ms-ContextualMenu-submenuIcon":{color:c.neutralPrimary}}},fd()),rootExpanded:Ze({backgroundColor:f,color:l.bodyTextChecked},fd()),linkContent:{whiteSpace:"nowrap",height:"inherit",display:"flex",alignItems:"center",maxWidth:"100%"},anchorLink:{padding:"0px 8px 0 4px",textRendering:"auto",color:"inherit",letterSpacing:"normal",wordSpacing:"normal",textTransform:"none",textIndent:"0px",textShadow:"none",textDecoration:"none",boxSizing:"border-box"},label:{margin:"0 4px",verticalAlign:"middle",display:"inline-block",flexGrow:"1",textOverflow:"ellipsis",overflow:"hidden",whiteSpace:"nowrap"},secondaryText:{color:e.palette.neutralSecondary,paddingLeft:"20px",textAlign:"right"},icon:{display:"inline-block",minHeight:"1px",maxHeight:dd,fontSize:xo.medium,width:xo.medium,margin:"0 4px",verticalAlign:"middle",flexShrink:"0",selectors:(n={},n[pd]={fontSize:xo.large,width:xo.large},n)},iconColor:{color:l.menuIcon,selectors:(o={},o[Eo]={color:"inherit"},o["$root:hover &"]={selectors:(r={},r[Eo]={color:"HighlightText"},r)},o["$root:focus &"]={selectors:(i={},i[Eo]={color:"HighlightText"},i)},o)},iconDisabled:{color:l.disabledBodyText},checkmarkIcon:{color:l.bodySubtext,selectors:(a={},a[Eo]={color:"HighlightText"},a)},subMenuIcon:{height:dd,lineHeight:dd,color:c.neutralSecondary,textAlign:"center",display:"inline-block",verticalAlign:"middle",flexShrink:"0",fontSize:xo.small,selectors:(s={":hover":{color:c.neutralPrimary},":active":{color:c.neutralPrimary}},s[pd]={fontSize:xo.medium},s[Eo]={color:"HighlightText"},s)},splitButtonFlexContainer:[Fo(e),{display:"flex",height:dd,flexWrap:"nowrap",justifyContent:"center",alignItems:"flex-start"}]})})),md="28px",gd=Io(0,639),vd=Kt((function(e){var t;return Mr(cd(e),{wrapper:{position:"absolute",right:28,selectors:(t={},t[gd]={right:32},t)},divider:{height:16,width:1}})})),yd={item:"ms-ContextualMenu-item",divider:"ms-ContextualMenu-divider",root:"ms-ContextualMenu-link",isChecked:"is-checked",isExpanded:"is-expanded",isDisabled:"is-disabled",linkContent:"ms-ContextualMenu-linkContent",linkContentMenu:"ms-ContextualMenu-linkContent",icon:"ms-ContextualMenu-icon",iconColor:"ms-ContextualMenu-iconColor",checkmarkIcon:"ms-ContextualMenu-checkmarkIcon",subMenuIcon:"ms-ContextualMenu-submenuIcon",label:"ms-ContextualMenu-itemText",secondaryText:"ms-ContextualMenu-secondaryText",splitMenu:"ms-ContextualMenu-splitMenu",screenReaderText:"ms-ContextualMenu-screenReaderText"},bd=Kt((function(e,t,n,o,r,i,a,s,l,u,c,d){var p,f,h,m,g=hd(e),v=Oo(yd,e);return Mr({item:[v.item,g.item,a],divider:[v.divider,g.divider,s],root:[v.root,g.root,o&&[v.isChecked,g.rootChecked],r&&g.anchorLink,n&&[v.isExpanded,g.rootExpanded],t&&[v.isDisabled,g.rootDisabled],!t&&!n&&[{selectors:(p={":hover":g.rootHovered,":active":g.rootPressed},p[".ms-Fabric--isFocusVisible &:focus, .ms-Fabric--isFocusVisible &:focus:hover"]=g.rootFocused,p[".ms-Fabric--isFocusVisible &:hover"]={background:"inherit;"},p)}],d],splitPrimary:[g.root,{width:"calc(100% - 28px)"},o&&["is-checked",g.rootChecked],(t||c)&&["is-disabled",g.rootDisabled],!(t||c)&&!o&&[{selectors:(f={":hover":g.rootHovered},f[":hover ~ ."+v.splitMenu]=g.rootHovered,f[":active"]=g.rootPressed,f[".ms-Fabric--isFocusVisible &:focus, .ms-Fabric--isFocusVisible &:focus:hover"]=g.rootFocused,f[".ms-Fabric--isFocusVisible &:hover"]={background:"inherit;"},f)}]],splitMenu:[v.splitMenu,g.root,{flexBasis:"0",padding:"0 8px",minWidth:md},n&&["is-expanded",g.rootExpanded],t&&["is-disabled",g.rootDisabled],!t&&!n&&[{selectors:(h={":hover":g.rootHovered,":active":g.rootPressed},h[".ms-Fabric--isFocusVisible &:focus, .ms-Fabric--isFocusVisible &:focus:hover"]=g.rootFocused,h[".ms-Fabric--isFocusVisible &:hover"]={background:"inherit;"},h)}]],anchorLink:g.anchorLink,linkContent:[v.linkContent,g.linkContent],linkContentMenu:[v.linkContentMenu,g.linkContent,{justifyContent:"center"}],icon:[v.icon,i&&g.iconColor,g.icon,l,t&&[v.isDisabled,g.iconDisabled]],iconColor:g.iconColor,checkmarkIcon:[v.checkmarkIcon,i&&g.checkmarkIcon,g.icon,l],subMenuIcon:[v.subMenuIcon,g.subMenuIcon,u,n&&{color:e.palette.neutralPrimary},t&&[g.iconDisabled]],label:[v.label,g.label],secondaryText:[v.secondaryText,g.secondaryText],splitContainer:[g.splitButtonFlexContainer,!t&&!o&&[{selectors:(m={},m[".ms-Fabric--isFocusVisible &:focus, .ms-Fabric--isFocusVisible &:focus:hover"]=g.rootFocused,m)}]],screenReaderText:[v.screenReaderText,g.screenReaderText,Lo,{visibility:"hidden"}]})})),_d=function(e){var t=e.theme,n=e.disabled,o=e.expanded,r=e.checked,i=e.isAnchorLink,a=e.knownIcon,s=e.itemClassName,l=e.dividerClassName,u=e.iconClassName,c=e.subMenuClassName,d=e.primaryDisabled,p=e.className;return bd(t,n,o,r,i,a,s,l,u,c,d,p)},Cd=li(ud,_d,void 0,{scope:"ContextualMenuItem"}),Sd=function(e){function t(t){var n=e.call(this,t)||this;return n._onItemMouseEnter=function(e){var t=n.props,o=t.item,r=t.onItemMouseEnter;r&&r(o,e,e.currentTarget)},n._onItemClick=function(e){var t=n.props,o=t.item,r=t.onItemClickBase;r&&r(o,e,e.currentTarget)},n._onItemMouseLeave=function(e){var t=n.props,o=t.item,r=t.onItemMouseLeave;r&&r(o,e)},n._onItemKeyDown=function(e){var t=n.props,o=t.item,r=t.onItemKeyDown;r&&r(o,e)},n._onItemMouseMove=function(e){var t=n.props,o=t.item,r=t.onItemMouseMove;r&&r(o,e,e.currentTarget)},n._getSubMenuId=function(e){var t=n.props.getSubMenuId;if(t)return t(e)},n._getSubmenuTarget=function(){},gi(n),n}return $e(t,e),t.prototype.shouldComponentUpdate=function(e){return!xi(e,this.props)},t}(e.Component),kd=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n._anchor=e.createRef(),n._getMemoizedMenuButtonKeytipProps=Kt((function(e){return Ze(Ze({},e),{hasMenu:!0})})),n._getSubmenuTarget=function(){return n._anchor.current?n._anchor.current:void 0},n._onItemClick=function(e){var t=n.props,o=t.item,r=t.onItemClick;r&&r(o,e)},n._renderAriaDescription=function(t,o){return t?e.createElement("span",{id:n._ariaDescriptionId,className:o},t):null},n}return $e(n,t),n.prototype.render=function(){var t=this,n=this.props,o=n.item,r=n.classNames,i=n.index,a=n.focusableElementIndex,s=n.totalItemCount,l=n.hasCheckmarks,u=n.hasIcons,c=n.contextualMenuItemAs,d=void 0===c?Cd:c,p=n.expandedMenuItemKey,f=n.onItemClick,h=n.openSubMenu,m=n.dismissSubMenu,g=n.dismissMenu,v=o.rel;o.target&&"_blank"===o.target.toLowerCase()&&(v=v||"nofollow noopener noreferrer");var y=this._getSubMenuId(o),b=Zu(o),_=Zr(o,Kr),C=Xu(o),S=o.itemProps,k=o.ariaDescription,x=o.keytipProps;return x&&b&&(x=this._getMemoizedMenuButtonKeytipProps(x)),k&&(this._ariaDescriptionId=Pi()),e.createElement("div",null,e.createElement(Oi,{keytipProps:o.keytipProps,ariaDescribedBy:_["aria-describedby"],disabled:C},(function(n){return e.createElement("a",Ze({},_,n,{ref:t._anchor,href:o.href,target:o.target,rel:v,className:r.root,role:"menuitem","aria-owns":o.key===p?y:void 0,"aria-haspopup":b||void 0,"aria-expanded":b?o.key===p:void 0,"aria-posinset":a+1,"aria-setsize":s,"aria-disabled":Xu(o),"aria-describedby":ki(k?t._ariaDescriptionId:void 0,n?n["aria-describedby"]:void 0),style:o.style,onClick:t._onItemClick,onMouseEnter:t._onItemMouseEnter,onMouseLeave:t._onItemMouseLeave,onMouseMove:t._onItemMouseMove,onKeyDown:b?t._onItemKeyDown:void 0}),e.createElement(d,Ze({componentRef:o.componentRef,item:o,classNames:r,index:i,onCheckmarkClick:l&&f?f:void 0,hasIcons:u,openSubMenu:h,dismissSubMenu:m,dismissMenu:g,getSubmenuTarget:t._getSubmenuTarget},S)),t._renderAriaDescription(k,r.screenReaderText))})))},n}(Sd),xd=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n._btn=e.createRef(),n._getMemoizedMenuButtonKeytipProps=Kt((function(e){return Ze(Ze({},e),{hasMenu:!0})})),n._renderAriaDescription=function(t,o){return t?e.createElement("span",{id:n._ariaDescriptionId,className:o},t):null},n._getSubmenuTarget=function(){return n._btn.current?n._btn.current:void 0},n}return $e(n,t),n.prototype.render=function(){var t=this,n=this.props,o=n.item,r=n.classNames,i=n.index,a=n.focusableElementIndex,s=n.totalItemCount,l=n.hasCheckmarks,u=n.hasIcons,c=n.contextualMenuItemAs,d=void 0===c?Cd:c,p=n.expandedMenuItemKey,f=n.onItemMouseDown,h=n.onItemClick,m=n.openSubMenu,g=n.dismissSubMenu,v=n.dismissMenu,y=this._getSubMenuId(o),b=$u(o),_=null!==b,C=Yu(o),S=Zu(o),k=o.itemProps,x=o.ariaLabel,w=o.ariaDescription,E=Zr(o,Gr);delete E.disabled;var I=o.role||C;w&&(this._ariaDescriptionId=Pi());var T=w?this._ariaDescriptionId:void 0,D={className:r.root,onClick:this._onItemClick,onKeyDown:S?this._onItemKeyDown:void 0,onMouseEnter:this._onItemMouseEnter,onMouseLeave:this._onItemMouseLeave,onMouseDown:function(e){return f?f(o,e):void 0},onMouseMove:this._onItemMouseMove,href:o.href,title:o.title,"aria-label":x,"aria-describedby":T,"aria-haspopup":S||void 0,"aria-owns":o.key===p?y:void 0,"aria-expanded":S?o.key===p:void 0,"aria-posinset":a+1,"aria-setsize":s,"aria-disabled":Xu(o),"aria-checked":"menuitemcheckbox"!==I&&"menuitemradio"!==I||!_?void 0:!!b,"aria-selected":"menuitem"===I&&_?!!b:void 0,role:I,style:o.style},P=o.keytipProps;return P&&S&&(P=this._getMemoizedMenuButtonKeytipProps(P)),e.createElement(Oi,{keytipProps:P,ariaDescribedBy:E["aria-describedby"],disabled:Xu(o)},(function(n){return e.createElement("button",Ze({ref:t._btn},E,D,n,{"aria-describedby":ki(D["aria-describedby"],n?n["aria-describedby"]:void 0)}),e.createElement(d,Ze({componentRef:o.componentRef,item:o,classNames:r,index:i,onCheckmarkClick:l&&h?h:void 0,hasIcons:u,openSubMenu:m,dismissSubMenu:g,dismissMenu:v,getSubmenuTarget:t._getSubmenuTarget},k)),t._renderAriaDescription(w,r.screenReaderText))}))},n}(Sd),wd=pi(),Ed=function(t){var n=t.styles,o=t.theme,r=t.getClassNames,i=t.className,a=wd(n,{theme:o,getClassNames:r,className:i});return e.createElement("span",{className:a.wrapper},e.createElement("span",{className:a.divider}))};Ed.displayName="VerticalDividerBase";var Id=li(Ed,(function(e){var t=e.theme,n=e.getClassNames,o=e.className;if(!t)throw new Error("Theme is undefined or null.");if(n){var r=n(t);return{wrapper:[r.wrapper],divider:[r.divider]}}return{wrapper:[{display:"inline-flex",height:"100%",alignItems:"center"},o],divider:[{width:1,height:"100%",backgroundColor:t.palette.neutralTertiaryAlt}]}}),void 0,{scope:"VerticalDivider"}),Td=function(t){function n(n){var o=t.call(this,n)||this;return o._getMemoizedMenuButtonKeytipProps=Kt((function(e){return Ze(Ze({},e),{hasMenu:!0})})),o._renderAriaDescription=function(t,n){return t?e.createElement("span",{id:o._ariaDescriptionId,className:n},t):null},o._onItemKeyDown=function(e){var t=o.props,n=t.item,r=t.onItemKeyDown;e.which===$t?(o._executeItemClick(e),e.preventDefault(),e.stopPropagation()):r&&r(n,e)},o._getSubmenuTarget=function(){return o._splitButton},o._onItemMouseEnterPrimary=function(e){var t=o.props,n=t.item,r=t.onItemMouseEnter;r&&r(Ze(Ze({},n),{subMenuProps:void 0,items:void 0}),e,o._splitButton)},o._onItemMouseEnterIcon=function(e){var t=o.props,n=t.item,r=t.onItemMouseEnter;r&&r(n,e,o._splitButton)},o._onItemMouseMovePrimary=function(e){var t=o.props,n=t.item,r=t.onItemMouseMove;r&&r(Ze(Ze({},n),{subMenuProps:void 0,items:void 0}),e,o._splitButton)},o._onItemMouseMoveIcon=function(e){var t=o.props,n=t.item,r=t.onItemMouseMove;r&&r(n,e,o._splitButton)},o._onIconItemClick=function(e){var t=o.props,n=t.item,r=t.onItemClickBase;r&&r(n,e,o._splitButton?o._splitButton:e.currentTarget)},o._executeItemClick=function(e){var t=o.props,n=t.item,r=t.executeItemClick,i=t.onItemClick;if(!n.disabled&&!n.isDisabled)return o._processingTouch&&i?i(n,e):void(r&&r(n,e))},o._onTouchStart=function(e){o._splitButton&&!("onpointerdown"in o._splitButton)&&o._handleTouchAndPointerEvent(e)},o._onPointerDown=function(e){"touch"===e.pointerType&&(o._handleTouchAndPointerEvent(e),e.preventDefault(),e.stopImmediatePropagation())},o._async=new ta(o),o._events=new Ii(o),o}return $e(n,t),n.prototype.componentDidMount=function(){this._splitButton&&"onpointerdown"in this._splitButton&&this._events.on(this._splitButton,"pointerdown",this._onPointerDown,!0)},n.prototype.componentWillUnmount=function(){this._async.dispose(),this._events.dispose()},n.prototype.render=function(){var t=this,n=this.props,o=n.item,r=n.classNames,i=n.index,a=n.focusableElementIndex,s=n.totalItemCount,l=n.hasCheckmarks,u=n.hasIcons,c=n.onItemMouseLeave,d=n.expandedMenuItemKey,p=Zu(o),f=o.keytipProps;f&&(f=this._getMemoizedMenuButtonKeytipProps(f));var h=o.ariaDescription;return h&&(this._ariaDescriptionId=Pi()),e.createElement(Oi,{keytipProps:f,disabled:Xu(o)},(function(n){return e.createElement("div",{"data-ktp-target":n["data-ktp-target"],ref:function(e){return t._splitButton=e},role:Yu(o),"aria-label":o.ariaLabel,className:r.splitContainer,"aria-disabled":Xu(o),"aria-expanded":p?o.key===d:void 0,"aria-haspopup":!0,"aria-describedby":ki(h?t._ariaDescriptionId:void 0,n["aria-describedby"]),"aria-checked":o.isChecked||o.checked,"aria-posinset":a+1,"aria-setsize":s,onMouseEnter:t._onItemMouseEnterPrimary,onMouseLeave:c?c.bind(t,Ze(Ze({},o),{subMenuProps:null,items:null})):void 0,onMouseMove:t._onItemMouseMovePrimary,onKeyDown:t._onItemKeyDown,onClick:t._executeItemClick,onTouchStart:t._onTouchStart,tabIndex:0,"data-is-focusable":!0,"aria-roledescription":o["aria-roledescription"]},t._renderSplitPrimaryButton(o,r,i,l,u),t._renderSplitDivider(o),t._renderSplitIconButton(o,r,i,n),t._renderAriaDescription(h,r.screenReaderText))}))},n.prototype._renderSplitPrimaryButton=function(t,n,o,r,i){var a=this.props,s=a.contextualMenuItemAs,l=void 0===s?Cd:s,u=a.onItemClick,c={key:t.key,disabled:Xu(t)||t.primaryDisabled,name:t.name,text:t.text||t.name,secondaryText:t.secondaryText,className:n.splitPrimary,canCheck:t.canCheck,isChecked:t.isChecked,checked:t.checked,iconProps:t.iconProps,onRenderIcon:t.onRenderIcon,data:t.data,"data-is-focusable":!1},d=t.itemProps;return e.createElement("button",Ze({},Zr(c,Gr)),e.createElement(l,Ze({"data-is-focusable":!1,item:c,classNames:n,index:o,onCheckmarkClick:r&&u?u:void 0,hasIcons:i},d)))},n.prototype._renderSplitDivider=function(t){var n=t.getSplitButtonVerticalDividerClassNames||vd;return e.createElement(Id,{getClassNames:n})},n.prototype._renderSplitIconButton=function(t,n,o,r){var i=this.props,a=i.contextualMenuItemAs,s=void 0===a?Cd:a,l=i.onItemMouseLeave,u=i.onItemMouseDown,c=i.openSubMenu,d=i.dismissSubMenu,p=i.dismissMenu,f={onClick:this._onIconItemClick,disabled:Xu(t),className:n.splitMenu,subMenuProps:t.subMenuProps,submenuIconProps:t.submenuIconProps,split:!0,key:t.key},h=Ze(Ze({},Zr(f,Gr)),{onMouseEnter:this._onItemMouseEnterIcon,onMouseLeave:l?l.bind(this,t):void 0,onMouseDown:function(e){return u?u(t,e):void 0},onMouseMove:this._onItemMouseMoveIcon,"data-is-focusable":!1,"data-ktp-execute-target":r["data-ktp-execute-target"],"aria-hidden":!0}),m=t.itemProps;return e.createElement("button",Ze({},h),e.createElement(s,Ze({componentRef:t.componentRef,item:f,classNames:n,index:o,hasIcons:!1,openSubMenu:c,dismissSubMenu:d,dismissMenu:p,getSubmenuTarget:this._getSubmenuTarget},m)))},n.prototype._handleTouchAndPointerEvent=function(e){var t=this,n=this.props.onTap;n&&n(e),this._lastTouchTimeoutId&&(this._async.clearTimeout(this._lastTouchTimeoutId),this._lastTouchTimeoutId=void 0),this._processingTouch=!0,this._lastTouchTimeoutId=this._async.setTimeout((function(){t._processingTouch=!1,t._lastTouchTimeoutId=void 0}),500)},n}(Sd),Dd=pi(),Pd=pi();function Md(e){return e.subMenuProps?e.subMenuProps.items:e.items}var Rd=Kt((function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){return Pr.apply(void 0,Je([t,_d],e))}})),Fd=function(t){function n(n){var o=t.call(this,n)||this;return o._mounted=!1,o.dismiss=function(e,t){var n=o.props.onDismiss;n&&n(e,t)},o._tryFocusPreviousActiveElement=function(e){o.props.onRestoreFocus?o.props.onRestoreFocus(e):e&&e.containsFocus&&o._previousActiveElement&&o._previousActiveElement.focus&&o._previousActiveElement.focus()},o._onRenderMenuList=function(t,n){var r=0,i=t.items,a=t.totalItemCount,s=t.hasCheckmarks,l=t.hasIcons,u=t.role;return e.createElement("ul",{className:o._classNames.list,onKeyDown:o._onKeyDown,onKeyUp:o._onKeyUp,role:null!=u?u:"menu"},i.map((function(e,t){var n=o._renderMenuItem(e,t,r,a,s,l);if(e.itemType!==Pu.Divider&&e.itemType!==Pu.Header){var i=e.customOnRenderListLength?e.customOnRenderListLength:1;r+=i}return n})))},o._renderMenuItem=function(t,n,r,i,a,s){var l,u,c=[],d=t.iconProps||{iconName:"None"},p=t.getItemClassNames,f=t.itemProps,h=f?f.styles:void 0,m=t.itemType===Pu.Divider?t.className:void 0,g=t.submenuIconProps?t.submenuIconProps.className:"";if(p)u=p(o.props.theme,Xu(t),o.state.expandedMenuItemKey===t.key,!!$u(t),!!t.href,"None"!==d.iconName,t.className,m,d.className,g,t.primaryDisabled);else{var v={theme:o.props.theme,disabled:Xu(t),expanded:o.state.expandedMenuItemKey===t.key,checked:!!$u(t),isAnchorLink:!!t.href,knownIcon:"None"!==d.iconName,itemClassName:t.className,dividerClassName:m,iconClassName:d.className,subMenuClassName:g,primaryDisabled:t.primaryDisabled};u=Pd(Rd(null===(l=o._classNames.subComponentStyles)||void 0===l?void 0:l.menuItem,h),v)}switch("-"!==t.text&&"-"!==t.name||(t.itemType=Pu.Divider),t.itemType){case Pu.Divider:c.push(o._renderSeparator(n,u));break;case Pu.Header:c.push(o._renderSeparator(n,u));var y=o._renderHeaderMenuItem(t,u,n,a,s);c.push(o._renderListItem(y,t.key||n,u,t.title));break;case Pu.Section:c.push(o._renderSectionItem(t,u,n,a,s));break;default:var b=o._renderNormalItem(t,u,n,r,i,a,s);c.push(o._renderListItem(b,t.key||n,u,t.title))}return e.createElement(e.Fragment,{key:t.key},c)},o._defaultMenuItemRenderer=function(e){var t=e.index,n=e.focusableElementIndex,r=e.totalItemCount,i=e.hasCheckmarks,a=e.hasIcons;return o._renderMenuItem(e,t,n,r,i,a)},o._onKeyDown=function(e){o._lastKeyDownWasAltOrMeta=o._isAltOrMeta(e);var t=e.which===Xt&&(qu()||Qu());return o._keyHandler(e,o._shouldHandleKeyDown,t)},o._shouldHandleKeyDown=function(e){return e.which===Xt||o._shouldCloseSubMenu(e)||e.which===rn&&(e.altKey||e.metaKey)},o._onMenuFocusCapture=function(e){o.props.delayUpdateFocusOnHover&&(o._shouldUpdateFocusOnMouseEvent=!0)},o._onKeyUp=function(e){return o._keyHandler(e,o._shouldHandleKeyUp,!0)},o._shouldHandleKeyUp=function(e){var t=o._lastKeyDownWasAltOrMeta&&o._isAltOrMeta(e);return o._lastKeyDownWasAltOrMeta=!1,!!t&&!(Qu()||qu())},o._keyHandler=function(e,t,n){var r=!1;return t(e)&&(o._focusingPreviousElement=!0,o.dismiss(e,n),e.preventDefault(),e.stopPropagation(),r=!0),r},o._shouldCloseSubMenu=function(e){var t=gn(o.props.theme)?an:on;return!(e.which!==t||!o.props.isSubMenu)&&(o._adjustedFocusZoneProps.direction===wa.vertical||!!o._adjustedFocusZoneProps.checkForNoWrap&&!ga(e.target,"data-no-horizontal-wrap"))},o._onMenuKeyDown=function(e){if(!o._onKeyDown(e)&&o._host){var t=!(!e.altKey&&!e.metaKey),n=e.which===rn,r=e.which===sn;if(!t&&(n||r)){var i=n?function(e,t,n){return ca(e,t,!0,!1,!0,n)}(o._host,o._host.lastChild,!0):function(e,t,n){return da(e,t,!0,!1,!1,n)}(o._host,o._host.firstChild,!0);i&&(i.focus(),e.preventDefault(),e.stopPropagation())}}},o._onScroll=function(){o._isScrollIdle||void 0===o._scrollIdleTimeoutId?o._isScrollIdle=!1:(o._async.clearTimeout(o._scrollIdleTimeoutId),o._scrollIdleTimeoutId=void 0),o._scrollIdleTimeoutId=o._async.setTimeout((function(){o._isScrollIdle=!0}),250)},o._onItemMouseEnterBase=function(e,t,n){o._shouldIgnoreMouseEvent()||o._updateFocusOnMouseEvent(e,t,n)},o._onItemMouseMoveBase=function(e,t,n){var r=t.currentTarget;o._shouldUpdateFocusOnMouseEvent&&(o._gotMouseMove=!0,o._isScrollIdle&&void 0===o._enterTimerId&&r!==o._targetWindow.document.activeElement&&o._updateFocusOnMouseEvent(e,t,n))},o._onMouseItemLeave=function(e,t){if(!o._shouldIgnoreMouseEvent()&&(void 0!==o._enterTimerId&&(o._async.clearTimeout(o._enterTimerId),o._enterTimerId=void 0),void 0===o.state.expandedMenuItemKey))if(o._host.setActive)try{o._host.setActive()}catch(e){}else o._host.focus()},o._onItemMouseDown=function(e,t){e.onMouseDown&&e.onMouseDown(e,t)},o._onItemClick=function(e,t){o._onItemClickBase(e,t,t.currentTarget)},o._onItemClickBase=function(e,t,n){var r=Md(e);o._cancelSubMenuTimer(),Zu(e)||r&&r.length?e.key!==o.state.expandedMenuItemKey&&(o.setState({expandedByMouseClick:0!==t.nativeEvent.detail||"mouse"===t.nativeEvent.pointerType}),o._onItemSubMenuExpand(e,n)):o._executeItemClick(e,t),t.stopPropagation(),t.preventDefault()},o._onAnchorClick=function(e,t){o._executeItemClick(e,t),t.stopPropagation()},o._executeItemClick=function(e,t){if(!e.disabled&&!e.isDisabled){var n=!1;e.onClick?n=!!e.onClick(t,e):o.props.onItemClick&&(n=!!o.props.onItemClick(t,e)),!n&&t.defaultPrevented||(o.dismiss(t,!0),o._focusingPreviousElement=!0)}},o._onItemKeyDown=function(e,t){var n=gn(o.props.theme)?on:an;e.disabled||t.which!==n&&t.which!==$t&&(t.which!==sn||!t.altKey&&!t.metaKey)||(o.setState({expandedByMouseClick:!1}),o._onItemSubMenuExpand(e,t.currentTarget),t.preventDefault())},o._cancelSubMenuTimer=function(){void 0!==o._enterTimerId&&(o._async.clearTimeout(o._enterTimerId),o._enterTimerId=void 0)},o._onItemSubMenuExpand=function(e,t){o.state.expandedMenuItemKey!==e.key&&(o.state.expandedMenuItemKey&&o._onSubMenuDismiss(),t.focus(),o.setState({expandedMenuItemKey:e.key,submenuTarget:t}))},o._onSubMenuDismiss=function(e,t){t?o.dismiss(e,t):o._mounted&&o.setState({dismissedMenuItemKey:o.state.expandedMenuItemKey,expandedMenuItemKey:void 0,submenuTarget:void 0})},o._getSubMenuId=function(e){var t=o.state.subMenuId;return e.subMenuProps&&e.subMenuProps.id&&(t=e.subMenuProps.id),t},o._onPointerAndTouchEvent=function(e){o._cancelSubMenuTimer()},o._async=new ta(o),o._events=new Ii(o),gi(o),o.state={contextualMenuItems:void 0,subMenuId:Pi("ContextualMenu")},o._id=n.id||Pi("ContextualMenu"),o._focusingPreviousElement=!1,o._isScrollIdle=!0,o._shouldUpdateFocusOnMouseEvent=!o.props.delayUpdateFocusOnHover,o._gotMouseMove=!1,o}return $e(n,t),n.prototype.shouldComponentUpdate=function(e,t){return!(!e.shouldUpdateWhenHidden&&this.props.hidden&&e.hidden)&&(!xi(this.props,e)||!xi(this.state,t))},n.prototype.UNSAFE_componentWillUpdate=function(e){if(e.target!==this.props.target){var t=e.target;this._setTargetWindowAndElement(t)}this._isHidden(e)!==this._isHidden(this.props)&&(this._isHidden(e)?this._onMenuClosed():(this._onMenuOpened(),this._previousActiveElement=this._targetWindow?this._targetWindow.document.activeElement:void 0)),e.delayUpdateFocusOnHover!==this.props.delayUpdateFocusOnHover&&(this._shouldUpdateFocusOnMouseEvent=!e.delayUpdateFocusOnHover,this._gotMouseMove=this._shouldUpdateFocusOnMouseEvent&&this._gotMouseMove)},n.prototype.UNSAFE_componentWillMount=function(){var e=this.props.target;this._setTargetWindowAndElement(e),this.props.hidden||(this._previousActiveElement=this._targetWindow?this._targetWindow.document.activeElement:void 0)},n.prototype.componentDidMount=function(){this.props.hidden||this._onMenuOpened(),this._mounted=!0},n.prototype.componentWillUnmount=function(){this.props.onMenuDismissed&&this.props.onMenuDismissed(this.props),this._events.dispose(),this._async.dispose(),this._mounted=!1},n.prototype.render=function(){var t=this,n=this.props.isBeakVisible,o=this.props,r=o.items,i=o.labelElementId,a=o.id,s=o.className,l=o.beakWidth,u=o.directionalHint,c=o.directionalHintForRTL,d=o.alignTargetEdge,p=o.gapSpace,f=o.coverTarget,h=o.ariaLabel,m=o.doNotLayer,g=o.target,v=o.bounds,y=o.useTargetWidth,b=o.useTargetAsMinWidth,_=o.directionalHintFixed,C=o.shouldFocusOnMount,S=o.shouldFocusOnContainer,k=o.title,x=o.styles,w=o.theme,E=o.calloutProps,I=o.onRenderSubMenu,T=void 0===I?this._onRenderSubMenu:I,D=o.onRenderMenuList,P=void 0===D?this._onRenderMenuList:D,M=o.focusZoneProps,R=o.getMenuClassNames;this._classNames=R?R(w,s):Dd(x,{theme:w,className:s});var F=function e(t){for(var n=0,o=t;n<o.length;n++){var r=o[n];if(r.iconProps)return!0;if(r.itemType===Pu.Section&&r.sectionProps&&e(r.sectionProps.items))return!0}return!1}(r);this._adjustedFocusZoneProps=Ze(Ze({},M),{direction:this._getFocusZoneDirection()});var N,A=function(e){return e.some((function(e){return!!e.canCheck||!(!e.sectionProps||!e.sectionProps.items.some((function(e){return!0===e.canCheck})))}))}(r),L=this.state.expandedMenuItemKey&&!0!==this.props.hidden?this._getSubmenuProps():null;n=void 0===n?this.props.responsiveMode<=Ju.medium:n;var B=this._target;if((y||b)&&B&&B.offsetWidth){var O=B.getBoundingClientRect().width-2;y?N={width:O}:b&&(N={minWidth:O})}if(r&&r.length>0){for(var H=0,z=0,W=r;z<W.length;z++){var U=W[z];if(U.itemType!==Pu.Divider&&U.itemType!==Pu.Header)H+=U.customOnRenderListLength?U.customOnRenderListLength:1}var V=this._classNames.subComponentStyles?this._classNames.subComponentStyles.callout:void 0;return e.createElement(od,Ze({styles:V,onRestoreFocus:this._tryFocusPreviousActiveElement},E,{target:g,isBeakVisible:n,beakWidth:l,directionalHint:u,directionalHintForRTL:c,gapSpace:p,coverTarget:f,doNotLayer:m,className:ra("ms-ContextualMenu-Callout",E&&E.className),setInitialFocus:C,onDismiss:this.props.onDismiss,onScroll:this._onScroll,bounds:v,directionalHintFixed:_,alignTargetEdge:d,hidden:this.props.hidden}),e.createElement("div",{"aria-label":h,"aria-labelledby":i,style:N,ref:function(e){return t._host=e},id:a,className:this._classNames.container,tabIndex:S?0:-1,onKeyDown:this._onMenuKeyDown,onKeyUp:this._onKeyUp,onFocusCapture:this._onMenuFocusCapture},k&&e.createElement("div",{className:this._classNames.title}," ",k," "),r&&r.length?e.createElement(Ka,Ze({className:this._classNames.root,isCircularNavigation:!0,handleTabKey:Ea},this._adjustedFocusZoneProps),P({items:r,totalItemCount:H,hasCheckmarks:A,hasIcons:F,defaultMenuItemRenderer:this._defaultMenuItemRenderer},this._onRenderMenuList)):null,L&&T(L,this._onRenderSubMenu)))}return null},n.prototype._isHidden=function(e){return!!e.hidden},n.prototype._onMenuOpened=function(){this._events.on(this._targetWindow,"resize",this.dismiss),this._shouldUpdateFocusOnMouseEvent=!this.props.delayUpdateFocusOnHover,this._gotMouseMove=!1,this.props.onMenuOpened&&this.props.onMenuOpened(this.props)},n.prototype._onMenuClosed=function(){this._events.off(this._targetWindow,"resize",this.dismiss),this._tryFocusPreviousActiveElement({containsFocus:this._focusingPreviousElement,documentContainsFocus:this._targetWindow.document.hasFocus(),originalElement:this._previousActiveElement}),this._focusingPreviousElement=!1,this.props.onMenuDismissed&&this.props.onMenuDismissed(this.props),this._shouldUpdateFocusOnMouseEvent=!this.props.delayUpdateFocusOnHover,this.setState({expandedByMouseClick:void 0,dismissedMenuItemKey:void 0,expandedMenuItemKey:void 0,submenuTarget:void 0})},n.prototype._getFocusZoneDirection=function(){var e=this.props.focusZoneProps;return e&&void 0!==e.direction?e.direction:wa.vertical},n.prototype._onRenderSubMenu=function(e,t){throw Error("ContextualMenuBase: onRenderSubMenu callback is null or undefined. Please ensure to set `onRenderSubMenu` property either manually or with `styled` helper.")},n.prototype._renderSectionItem=function(t,n,o,r,i){var a,s=this,l=t.sectionProps;if(l){var u,c;if(l.title){var d=void 0,p="";if("string"==typeof l.title){var f=this._id+l.title.replace(/\s/g,"");d={key:"section-"+l.title+"-title",itemType:Pu.Header,text:l.title,id:f},p=f}else d=l.title,p=this._id+(null===(a=l.title.text)||void 0===a?void 0:a.replace(/\s/g,""));d&&(c={role:"group","aria-labelledby":p},u=this._renderHeaderMenuItem(d,n,o,r,i))}return l.items&&l.items.length>0?e.createElement("li",{role:"presentation",key:l.key||t.key||"section-"+o},e.createElement("div",Ze({},c),e.createElement("ul",{className:this._classNames.list},l.topDivider&&this._renderSeparator(o,n,!0,!0),u&&this._renderListItem(u,t.key||o,n,t.title),l.items.map((function(e,t){return s._renderMenuItem(e,t,t,l.items.length,r,i)})),l.bottomDivider&&this._renderSeparator(o,n,!1,!0)))):void 0}},n.prototype._renderListItem=function(t,n,o,r){return e.createElement("li",{role:"presentation",title:r,key:n,className:o.item},t)},n.prototype._renderSeparator=function(t,n,o,r){return r||t>0?e.createElement("li",{role:"separator",key:"separator-"+t+(void 0===o?"":o?"-top":"-bottom"),className:n.divider,"aria-hidden":"true"}):null},n.prototype._renderNormalItem=function(e,t,n,o,r,i,a){return e.onRender?e.onRender(Ze({"aria-posinset":o+1,"aria-setsize":r},e),this.dismiss):e.href?this._renderAnchorMenuItem(e,t,n,o,r,i,a):e.split&&Zu(e)?this._renderSplitButton(e,t,n,o,r,i,a):this._renderButtonItem(e,t,n,o,r,i,a)},n.prototype._renderHeaderMenuItem=function(t,n,o,r,i){var a=this.props.contextualMenuItemAs,s=void 0===a?Cd:a,l=t.itemProps,u=t.id,c=l&&Zr(l,$r);return e.createElement("div",Ze({id:u,className:this._classNames.header},c,{style:t.style}),e.createElement(s,Ze({item:t,classNames:n,index:o,onCheckmarkClick:r?this._onItemClick:void 0,hasIcons:i},l)))},n.prototype._renderAnchorMenuItem=function(t,n,o,r,i,a,s){var l=this.props.contextualMenuItemAs,u=this.state.expandedMenuItemKey;return e.createElement(kd,{item:t,classNames:n,index:o,focusableElementIndex:r,totalItemCount:i,hasCheckmarks:a,hasIcons:s,contextualMenuItemAs:l,onItemMouseEnter:this._onItemMouseEnterBase,onItemMouseLeave:this._onMouseItemLeave,onItemMouseMove:this._onItemMouseMoveBase,onItemMouseDown:this._onItemMouseDown,executeItemClick:this._executeItemClick,onItemClick:this._onAnchorClick,onItemKeyDown:this._onItemKeyDown,getSubMenuId:this._getSubMenuId,expandedMenuItemKey:u,openSubMenu:this._onItemSubMenuExpand,dismissSubMenu:this._onSubMenuDismiss,dismissMenu:this.dismiss})},n.prototype._renderButtonItem=function(t,n,o,r,i,a,s){var l=this.props.contextualMenuItemAs,u=this.state.expandedMenuItemKey;return e.createElement(xd,{item:t,classNames:n,index:o,focusableElementIndex:r,totalItemCount:i,hasCheckmarks:a,hasIcons:s,contextualMenuItemAs:l,onItemMouseEnter:this._onItemMouseEnterBase,onItemMouseLeave:this._onMouseItemLeave,onItemMouseMove:this._onItemMouseMoveBase,onItemMouseDown:this._onItemMouseDown,executeItemClick:this._executeItemClick,onItemClick:this._onItemClick,onItemClickBase:this._onItemClickBase,onItemKeyDown:this._onItemKeyDown,getSubMenuId:this._getSubMenuId,expandedMenuItemKey:u,openSubMenu:this._onItemSubMenuExpand,dismissSubMenu:this._onSubMenuDismiss,dismissMenu:this.dismiss})},n.prototype._renderSplitButton=function(t,n,o,r,i,a,s){var l=this.props.contextualMenuItemAs,u=this.state.expandedMenuItemKey;return e.createElement(Td,{item:t,classNames:n,index:o,focusableElementIndex:r,totalItemCount:i,hasCheckmarks:a,hasIcons:s,contextualMenuItemAs:l,onItemMouseEnter:this._onItemMouseEnterBase,onItemMouseLeave:this._onMouseItemLeave,onItemMouseMove:this._onItemMouseMoveBase,onItemMouseDown:this._onItemMouseDown,executeItemClick:this._executeItemClick,onItemClick:this._onItemClick,onItemClickBase:this._onItemClickBase,onItemKeyDown:this._onItemKeyDown,openSubMenu:this._onItemSubMenuExpand,dismissSubMenu:this._onSubMenuDismiss,dismissMenu:this.dismiss,expandedMenuItemKey:u,onTap:this._onPointerAndTouchEvent})},n.prototype._isAltOrMeta=function(e){return e.which===Zt||"Meta"===e.key},n.prototype._shouldIgnoreMouseEvent=function(){return!this._isScrollIdle||!this._gotMouseMove},n.prototype._updateFocusOnMouseEvent=function(e,t,n){var o=this,r=n||t.currentTarget,i=this.props.subMenuHoverDelay,a=void 0===i?250:i;e.key!==this.state.expandedMenuItemKey&&(void 0!==this._enterTimerId&&(this._async.clearTimeout(this._enterTimerId),this._enterTimerId=void 0),void 0===this.state.expandedMenuItemKey&&r.focus(),Zu(e)?(t.stopPropagation(),this._enterTimerId=this._async.setTimeout((function(){r.focus(),o.setState({expandedByMouseClick:!0}),o._onItemSubMenuExpand(e,r),o._enterTimerId=void 0}),a)):this._enterTimerId=this._async.setTimeout((function(){o._onSubMenuDismiss(t),r.focus(),o._enterTimerId=void 0}),a))},n.prototype._getSubmenuProps=function(){var e=this.state,t=e.submenuTarget,n=e.expandedMenuItemKey,o=this._findItemByKey(n),r=null;return o&&(r={items:Md(o),target:t,onDismiss:this._onSubMenuDismiss,isSubMenu:!0,id:this.state.subMenuId,shouldFocusOnMount:!0,shouldFocusOnContainer:this.state.expandedByMouseClick,directionalHint:gn(this.props.theme)?Wu:Ku,className:this.props.className,gapSpace:0,isBeakVisible:!1},o.subMenuProps&&wi(r,o.subMenuProps)),r},n.prototype._findItemByKey=function(e){var t=this.props.items;return this._findItemByKeyFromItems(e,t)},n.prototype._findItemByKeyFromItems=function(e,t){for(var n=0,o=t;n<o.length;n++){var r=o[n];if(r.itemType===Pu.Section&&r.sectionProps){var i=this._findItemByKeyFromItems(e,r.sectionProps.items);if(i)return i}else if(r.key&&r.key===e)return r}},n.prototype._setTargetWindowAndElement=function(e){var t=this._host;if(e)if("string"==typeof e){var n=cn(t);this._target=n?n.querySelector(e):null,this._targetWindow=pn(t)}else if(e.stopPropagation)this._targetWindow=pn(e.target),this._target=e;else if(void 0===e.left&&void 0===e.x||void 0===e.top&&void 0===e.y)if(void 0!==e.current)this._target=e.current,this._targetWindow=pn(this._target);else{var o=e;this._targetWindow=pn(o),this._target=e}else this._targetWindow=pn(t),this._target=e;else this._targetWindow=pn(t)},n.defaultProps={items:[],shouldFocusOnMount:!0,gapSpace:0,directionalHint:zu,beakWidth:16},n=Ye([sc],n)}(e.Component),Nd={root:"ms-ContextualMenu",container:"ms-ContextualMenu-container",list:"ms-ContextualMenu-list",header:"ms-ContextualMenu-header",title:"ms-ContextualMenu-title",isopen:"is-open"};function Ad(t){return e.createElement(Ld,Ze({},t))}var Ld=li(Fd,(function(e){var t=e.className,n=e.theme,o=Oo(Nd,n),r=n.fonts,i=n.semanticColors,a=n.effects;return{root:[n.fonts.medium,o.root,o.isopen,{backgroundColor:i.menuBackground,minWidth:"180px"},t],container:[o.container,{selectors:{":focus":{outline:0}}}],list:[o.list,o.isopen,{listStyleType:"none",margin:"0",padding:"0"}],header:[o.header,r.small,{fontWeight:ko.semibold,color:i.menuHeader,background:"none",backgroundColor:"transparent",border:"none",height:dd,lineHeight:dd,cursor:"default",padding:"0px 6px",userSelect:"none",textAlign:"left"}],title:[o.title,{fontSize:r.mediumPlus.fontSize,paddingRight:"14px",paddingLeft:"14px",paddingBottom:"5px",paddingTop:"5px",backgroundColor:i.menuItemBackgroundPressed}],subComponentStyles:{callout:{root:{boxShadow:a.elevation8}},menuItem:{}}}}),(function(){return{onRenderSubMenu:Ad}}),{scope:"ContextualMenu"}),Bd=Ld,Od={msButton:"ms-Button",msButtonHasMenu:"ms-Button--hasMenu",msButtonIcon:"ms-Button-icon",msButtonMenuIcon:"ms-Button-menuIcon",msButtonLabel:"ms-Button-label",msButtonDescription:"ms-Button-description",msButtonScreenReaderText:"ms-Button-screenReaderText",msButtonFlexContainer:"ms-Button-flexContainer",msButtonTextContainer:"ms-Button-textContainer"},Hd=Kt((function(e,t,n,o,r,i,a,s,l,u,c){var d,p,f=Oo(Od,e||{}),h=u&&!c;return Mr({root:[f.msButton,t.root,o,l&&["is-checked",t.rootChecked],h&&["is-expanded",t.rootExpanded,{selectors:(d={},d[":hover ."+f.msButtonIcon]=t.iconExpandedHovered,d[":hover ."+f.msButtonMenuIcon]=t.menuIconExpandedHovered||t.rootExpandedHovered,d[":hover"]=t.rootExpandedHovered,d)}],s&&[Od.msButtonHasMenu,t.rootHasMenu],a&&["is-disabled",t.rootDisabled],!a&&!h&&!l&&{selectors:(p={":hover":t.rootHovered},p[":hover ."+f.msButtonLabel]=t.labelHovered,p[":hover ."+f.msButtonIcon]=t.iconHovered,p[":hover ."+f.msButtonDescription]=t.descriptionHovered,p[":hover ."+f.msButtonMenuIcon]=t.menuIconHovered,p[":focus"]=t.rootFocused,p[":active"]=t.rootPressed,p[":active ."+f.msButtonIcon]=t.iconPressed,p[":active ."+f.msButtonDescription]=t.descriptionPressed,p[":active ."+f.msButtonMenuIcon]=t.menuIconPressed,p)},a&&l&&[t.rootCheckedDisabled],!a&&l&&{selectors:{":hover":t.rootCheckedHovered,":active":t.rootCheckedPressed}},n],flexContainer:[f.msButtonFlexContainer,t.flexContainer],textContainer:[f.msButtonTextContainer,t.textContainer],icon:[f.msButtonIcon,r,t.icon,h&&t.iconExpanded,l&&t.iconChecked,a&&t.iconDisabled],label:[f.msButtonLabel,t.label,l&&t.labelChecked,a&&t.labelDisabled],menuIcon:[f.msButtonMenuIcon,i,t.menuIcon,l&&t.menuIconChecked,a&&!c&&t.menuIconDisabled,!a&&!h&&!l&&{selectors:{":hover":t.menuIconHovered,":active":t.menuIconPressed}},h&&["is-expanded",t.menuIconExpanded]],description:[f.msButtonDescription,t.description,l&&t.descriptionChecked,a&&t.descriptionDisabled],screenReaderText:[f.msButtonScreenReaderText,t.screenReaderText]})})),zd=Kt((function(e,t,n,o,r){return{root:Lt(e.splitButtonMenuButton,n&&[e.splitButtonMenuButtonExpanded],t&&[e.splitButtonMenuButtonDisabled],o&&!t&&[e.splitButtonMenuButtonChecked]),splitButtonContainer:Lt(e.splitButtonContainer,!t&&o&&[e.splitButtonContainerChecked,{selectors:{":hover":e.splitButtonContainerCheckedHovered}}],!t&&!o&&[{selectors:{":hover":e.splitButtonContainerHovered,":focus":e.splitButtonContainerFocused}}],t&&e.splitButtonContainerDisabled),icon:Lt(e.splitButtonMenuIcon,t&&e.splitButtonMenuIconDisabled,!t&&r&&e.splitButtonMenuIcon),flexContainer:Lt(e.splitButtonFlexContainer),divider:Lt(e.splitButtonDivider,(r||t)&&e.splitButtonDividerDisabled)}})),Wd=function(t){function n(n){var o=t.call(this,n)||this;return o._buttonElement=e.createRef(),o._splitButtonContainer=e.createRef(),o._mergedRef=aa(),o._renderedVisibleMenu=!1,o._getMemoizedMenuButtonKeytipProps=Kt((function(e){return Ze(Ze({},e),{hasMenu:!0})})),o._onRenderIcon=function(t,n){var r=o.props.iconProps;if(r&&(void 0!==r.iconName||r.imageProps)){var i=r.className,a=r.imageProps,s=Xe(r,["className","imageProps"]);if(r.styles)return e.createElement(es,Ze({className:ra(o._classNames.icon,i),imageProps:a},s));if(r.iconName)return e.createElement(Qa,Ze({className:ra(o._classNames.icon,i)},s));if(a)return e.createElement(Ru,Ze({className:ra(o._classNames.icon,i),imageProps:a},s))}return null},o._onRenderTextContents=function(){var t=o.props,n=t.text,r=t.children,i=t.secondaryText,a=void 0===i?o.props.description:i,s=t.onRenderText,l=void 0===s?o._onRenderText:s,u=t.onRenderDescription,c=void 0===u?o._onRenderDescription:u;return n||"string"==typeof r||a?e.createElement("span",{className:o._classNames.textContainer},l(o.props,o._onRenderText),c(o.props,o._onRenderDescription)):[l(o.props,o._onRenderText),c(o.props,o._onRenderDescription)]},o._onRenderText=function(){var t=o.props.text,n=o.props.children;return void 0===t&&"string"==typeof n&&(t=n),o._hasText()?e.createElement("span",{key:o._labelId,className:o._classNames.label,id:o._labelId},t):null},o._onRenderChildren=function(){var e=o.props.children;return"string"==typeof e?null:e},o._onRenderDescription=function(t){var n=t.secondaryText,r=void 0===n?o.props.description:n;return r?e.createElement("span",{key:o._descriptionId,className:o._classNames.description,id:o._descriptionId},r):null},o._onRenderAriaDescription=function(){var t=o.props.ariaDescription;return t?e.createElement("span",{className:o._classNames.screenReaderText,id:o._ariaDescriptionId},t):null},o._onRenderMenuIcon=function(t){var n=o.props.menuIconProps;return e.createElement(Qa,Ze({iconName:"ChevronDown"},n,{className:o._classNames.menuIcon}))},o._onRenderMenu=function(t){var n=o.props.persistMenu,r=o.state.menuHidden,i=o.props.menuAs||Bd;return t.ariaLabel||t.labelElementId||!o._hasText()||(t=Ze(Ze({},t),{labelElementId:o._labelId})),e.createElement(i,Ze({id:o._labelId+"-menu",directionalHint:Bu},t,{shouldFocusOnContainer:o._menuShouldFocusOnContainer,shouldFocusOnMount:o._menuShouldFocusOnMount,hidden:n?r:void 0,className:ra("ms-BaseButton-menuhost",t.className),target:o._isSplitButton?o._splitButtonContainer.current:o._buttonElement.current,onDismiss:o._onDismissMenu}))},o._onDismissMenu=function(e){var t=o.props.menuProps;t&&t.onDismiss&&t.onDismiss(e),e&&e.defaultPrevented||o._dismissMenu()},o._dismissMenu=function(){o._menuShouldFocusOnMount=void 0,o._menuShouldFocusOnContainer=void 0,o.setState({menuHidden:!0})},o._openMenu=function(e,t){void 0===t&&(t=!0),o.props.menuProps&&(o._menuShouldFocusOnContainer=e,o._menuShouldFocusOnMount=t,o._renderedVisibleMenu=!0,o.setState({menuHidden:!1}))},o._onToggleMenu=function(e){var t=!0;o.props.menuProps&&!1===o.props.menuProps.shouldFocusOnMount&&(t=!1),o.state.menuHidden?o._openMenu(e,t):o._dismissMenu()},o._onSplitContainerFocusCapture=function(e){var t=o._splitButtonContainer.current;!t||e.target&&xa(e.target,t)||t.focus()},o._onSplitButtonPrimaryClick=function(e){o.state.menuHidden||o._dismissMenu(),!o._processingTouch&&o.props.onClick?o.props.onClick(e):o._processingTouch&&o._onMenuClick(e)},o._onKeyDown=function(e){!o.props.disabled||e.which!==$t&&e.which!==Yt?o.props.disabled||(o.props.menuProps?o._onMenuKeyDown(e):void 0!==o.props.onKeyDown&&o.props.onKeyDown(e)):(e.preventDefault(),e.stopPropagation())},o._onKeyUp=function(e){o.props.disabled||void 0===o.props.onKeyUp||o.props.onKeyUp(e)},o._onKeyPress=function(e){o.props.disabled||void 0===o.props.onKeyPress||o.props.onKeyPress(e)},o._onMouseUp=function(e){o.props.disabled||void 0===o.props.onMouseUp||o.props.onMouseUp(e)},o._onMouseDown=function(e){o.props.disabled||void 0===o.props.onMouseDown||o.props.onMouseDown(e)},o._onClick=function(e){o.props.disabled||(o.props.menuProps?o._onMenuClick(e):void 0!==o.props.onClick&&o.props.onClick(e))},o._onSplitButtonContainerKeyDown=function(e){e.which===$t||e.which===Yt?o._buttonElement.current&&(o._buttonElement.current.click(),e.preventDefault(),e.stopPropagation()):o._onMenuKeyDown(e)},o._onMenuKeyDown=function(e){if(!o.props.disabled){o.props.onKeyDown&&o.props.onKeyDown(e);var t=e.which===rn,n=e.which===sn;if(!e.defaultPrevented&&o._isValidMenuOpenKey(e)){var r=o.props.onMenuClick;r&&r(e,o.props),o._onToggleMenu(!1),e.preventDefault(),e.stopPropagation()}if(!e.altKey&&!e.metaKey&&(t||n))if(!o.state.menuHidden&&o.props.menuProps)(void 0!==o._menuShouldFocusOnMount?o._menuShouldFocusOnMount:o.props.menuProps.shouldFocusOnMount)||(e.preventDefault(),e.stopPropagation(),o._menuShouldFocusOnMount=!0,o.forceUpdate())}},o._onTouchStart=function(){o._isSplitButton&&o._splitButtonContainer.current&&!("onpointerdown"in o._splitButtonContainer.current)&&o._handleTouchAndPointerEvent()},o._onMenuClick=function(e){var t=o.props.onMenuClick;if(t&&t(e,o.props),!e.defaultPrevented){var n=0!==e.nativeEvent.detail||"mouse"===e.nativeEvent.pointerType;o._onToggleMenu(n),e.preventDefault(),e.stopPropagation()}},gi(o),o._async=new ta(o),o._events=new Ii(o),o.props.split,o._labelId=Pi(),o._descriptionId=Pi(),o._ariaDescriptionId=Pi(),o.state={menuHidden:!0},o}return $e(n,t),Object.defineProperty(n.prototype,"_isSplitButton",{get:function(){return!!this.props.menuProps&&!!this.props.onClick&&!0===this.props.split},enumerable:!0,configurable:!0}),n.prototype.render=function(){var e,t=this.props,n=t.ariaDescription,o=t.ariaLabel,r=t.ariaHidden,i=t.className,a=t.disabled,s=t.allowDisabledFocus,l=t.primaryDisabled,u=t.secondaryText,c=void 0===u?this.props.description:u,d=t.href,p=t.iconProps,f=t.menuIconProps,h=t.styles,m=t.checked,g=t.variantClassName,v=t.theme,y=t.toggle,b=t.getClassNames,_=t.role,C=this.state.menuHidden,S=a||l;this._classNames=b?b(v,i,g,p&&p.className,f&&f.className,S,m,!C,!!this.props.menuProps,this.props.split,!!s):Hd(v,h,i,g,p&&p.className,f&&f.className,S,!!this.props.menuProps,m,!C,this.props.split);var k=this,x=k._ariaDescriptionId,w=k._labelId,E=k._descriptionId,I=!S&&!!d,T=I?"a":"button",D=Zr(wi(I?{}:{type:"button"},this.props.rootProps,this.props),I?Kr:Gr,["disabled"]),P=o||D["aria-label"],M=void 0;n?M=x:c&&this.props.onRenderDescription!==Du?M=E:D["aria-describedby"]&&(M=D["aria-describedby"]);var R=void 0;P||(D["aria-labelledby"]?R=D["aria-labelledby"]:M&&(R=this._hasText()?w:void 0));var F=!(!1===this.props["data-is-focusable"]||a&&!s||this._isSplitButton),N="menuitemcheckbox"===_||"checkbox"===_,A=N||!0===y?!!m:void 0,L=wi(D,((e={className:this._classNames.root,ref:this._mergedRef(this.props.elementRef,this._buttonElement),disabled:S&&!s,onKeyDown:this._onKeyDown,onKeyPress:this._onKeyPress,onKeyUp:this._onKeyUp,onMouseDown:this._onMouseDown,onMouseUp:this._onMouseUp,onClick:this._onClick,"aria-label":P,"aria-labelledby":R,"aria-describedby":M,"aria-disabled":S,"data-is-focusable":F})[N?"aria-checked":"aria-pressed"]=A,e));return r&&(L["aria-hidden"]=!0),this._isSplitButton?this._onRenderSplitButtonContent(T,L):(this.props.menuProps&&wi(L,{"aria-expanded":!C,"aria-owns":C?null:this._labelId+"-menu","aria-haspopup":!0}),this._onRenderContent(T,L))},n.prototype.componentDidMount=function(){this._isSplitButton&&this._splitButtonContainer.current&&("onpointerdown"in this._splitButtonContainer.current&&this._events.on(this._splitButtonContainer.current,"pointerdown",this._onPointerDown,!0),"onpointerup"in this._splitButtonContainer.current&&this.props.onPointerUp&&this._events.on(this._splitButtonContainer.current,"pointerup",this.props.onPointerUp,!0))},n.prototype.componentDidUpdate=function(e,t){this.props.onAfterMenuDismiss&&!t.menuHidden&&this.state.menuHidden&&this.props.onAfterMenuDismiss()},n.prototype.componentWillUnmount=function(){this._async.dispose(),this._events.dispose()},n.prototype.focus=function(){this._isSplitButton&&this._splitButtonContainer.current?this._splitButtonContainer.current.focus():this._buttonElement.current&&this._buttonElement.current.focus()},n.prototype.dismissMenu=function(){this._dismissMenu()},n.prototype.openMenu=function(e,t){this._openMenu(e,t)},n.prototype._onRenderContent=function(t,n){var o=this,r=this.props,i=t,a=r.menuIconProps,s=r.menuProps,l=r.onRenderIcon,u=void 0===l?this._onRenderIcon:l,c=r.onRenderAriaDescription,d=void 0===c?this._onRenderAriaDescription:c,p=r.onRenderChildren,f=void 0===p?this._onRenderChildren:p,h=r.onRenderMenu,m=void 0===h?this._onRenderMenu:h,g=r.onRenderMenuIcon,v=void 0===g?this._onRenderMenuIcon:g,y=r.disabled,b=r.keytipProps;b&&s&&(b=this._getMemoizedMenuButtonKeytipProps(b));var _=function(t){return e.createElement(i,Ze({},n,t),e.createElement("span",{className:o._classNames.flexContainer,"data-automationid":"splitbuttonprimary"},u(r,o._onRenderIcon),o._onRenderTextContents(),d(r,o._onRenderAriaDescription),f(r,o._onRenderChildren),!o._isSplitButton&&(s||a||o.props.onRenderMenuIcon)&&v(o.props,o._onRenderMenuIcon),s&&!s.doNotLayer&&o._shouldRenderMenu()&&m(s,o._onRenderMenu)))},C=b?e.createElement(Oi,{keytipProps:this._isSplitButton?void 0:b,ariaDescribedBy:n["aria-describedby"],disabled:y},(function(e){return _(e)})):_();return s&&s.doNotLayer?e.createElement("span",{style:{display:"inline-block"}},C,this._shouldRenderMenu()&&m(s,this._onRenderMenu)):e.createElement(e.Fragment,null,C,e.createElement(ji,null))},n.prototype._shouldRenderMenu=function(){var e=this.state.menuHidden,t=this.props,n=t.persistMenu,o=t.renderPersistedMenuHiddenOnMount;return!e||!(!n||!this._renderedVisibleMenu&&!o)},n.prototype._hasText=function(){return null!==this.props.text&&(void 0!==this.props.text||"string"==typeof this.props.children)},n.prototype._onRenderSplitButtonContent=function(t,n){var o=this,r=this.props,i=r.styles,a=void 0===i?{}:i,s=r.disabled,l=r.allowDisabledFocus,u=r.checked,c=r.getSplitButtonClassNames,d=r.primaryDisabled,p=r.menuProps,f=r.toggle,h=r.role,m=r.primaryActionButtonProps,g=this.props.keytipProps,v=this.state.menuHidden,y=c?c(!!s,!v,!!u,!!l):a&&zd(a,!!s,!v,!!u,!!d);wi(n,{onClick:void 0,onPointerDown:void 0,onPointerUp:void 0,tabIndex:-1,"data-is-focusable":!1}),g&&p&&(g=this._getMemoizedMenuButtonKeytipProps(g));var b=Zr(n,[],["disabled"]);m&&wi(n,m);var _=function(r){return e.createElement("div",Ze({},b,{"data-ktp-target":r?r["data-ktp-target"]:void 0,role:h||"button","aria-disabled":s,"aria-haspopup":!0,"aria-expanded":!v,"aria-pressed":f?!!u:void 0,"aria-describedby":ki(n["aria-describedby"],r?r["aria-describedby"]:void 0),className:y&&y.splitButtonContainer,onKeyDown:o._onSplitButtonContainerKeyDown,onTouchStart:o._onTouchStart,ref:o._splitButtonContainer,"data-is-focusable":!0,onClick:s||d?void 0:o._onSplitButtonPrimaryClick,tabIndex:!s||l?0:void 0,"aria-roledescription":n["aria-roledescription"],onFocusCapture:o._onSplitContainerFocusCapture}),e.createElement("span",{style:{display:"flex"}},o._onRenderContent(t,n),o._onRenderSplitButtonMenuButton(y,r),o._onRenderSplitButtonDivider(y)))};return g?e.createElement(Oi,{keytipProps:g,disabled:s},(function(e){return _(e)})):_()},n.prototype._onRenderSplitButtonDivider=function(t){if(t&&t.divider){return e.createElement("span",{className:t.divider,"aria-hidden":!0,onClick:function(e){e.stopPropagation()}})}return null},n.prototype._onRenderSplitButtonMenuButton=function(t,o){var r=this.props,i=r.allowDisabledFocus,a=r.checked,s=r.disabled,l=r.splitButtonMenuProps,u=r.splitButtonAriaLabel,c=this.state.menuHidden,d=this.props.menuIconProps;void 0===d&&(d={iconName:"ChevronDown"});var p=Ze(Ze({},l),{styles:t,checked:a,disabled:s,allowDisabledFocus:i,onClick:this._onMenuClick,menuProps:void 0,iconProps:Ze(Ze({},d),{className:this._classNames.menuIcon}),ariaLabel:u,"aria-haspopup":!0,"aria-expanded":!c,"data-is-focusable":!1});return e.createElement(n,Ze({},p,{"data-ktp-execute-target":o?o["data-ktp-execute-target"]:o,onMouseDown:this._onMouseDown,tabIndex:-1}))},n.prototype._onPointerDown=function(e){var t=this.props.onPointerDown;t&&t(e),"touch"===e.pointerType&&(this._handleTouchAndPointerEvent(),e.preventDefault(),e.stopImmediatePropagation())},n.prototype._handleTouchAndPointerEvent=function(){var e=this;void 0!==this._lastTouchTimeoutId&&(this._async.clearTimeout(this._lastTouchTimeoutId),this._lastTouchTimeoutId=void 0),this._processingTouch=!0,this._lastTouchTimeoutId=this._async.setTimeout((function(){e._processingTouch=!1,e._lastTouchTimeoutId=void 0,e.focus()}),500)},n.prototype._isValidMenuOpenKey=function(e){return this.props.menuTriggerKeyCode?e.which===this.props.menuTriggerKeyCode:!!this.props.menuProps&&(e.which===sn&&(e.altKey||e.metaKey))},n.defaultProps={baseClassName:"ms-Button",styles:{},split:!1},n}(e.Component),Ud={outline:0},Vd=function(e){return{fontSize:e,margin:"0 4px",height:"16px",lineHeight:"16px",textAlign:"center",flexShrink:0}},Kd=Kt((function(e){var t,n,o=e.semanticColors,r=e.effects,i=e.fonts,a=o.buttonBorder,s=o.disabledBackground,l=o.disabledText,u={left:-2,top:-2,bottom:-2,right:-2,outlineColor:"ButtonText"};return{root:[Fo(e,{inset:1,highContrastStyle:u,borderColor:"transparent"}),e.fonts.medium,{boxSizing:"border-box",border:"1px solid "+a,userSelect:"none",display:"inline-block",textDecoration:"none",textAlign:"center",cursor:"pointer",padding:"0 16px",borderRadius:r.roundedCorner2,selectors:{":active > *":{position:"relative",left:0,top:0}}}],rootDisabled:[Fo(e,{inset:1,highContrastStyle:u,borderColor:"transparent"}),{backgroundColor:s,borderColor:s,color:l,cursor:"default",pointerEvents:"none",selectors:{":hover":Ud,":focus":Ud}}],iconDisabled:{color:l,selectors:(t={},t[Eo]={color:"GrayText"},t)},menuIconDisabled:{color:l,selectors:(n={},n[Eo]={color:"GrayText"},n)},flexContainer:{display:"flex",height:"100%",flexWrap:"nowrap",justifyContent:"center",alignItems:"center"},description:{display:"block"},textContainer:{flexGrow:1,display:"block"},icon:Vd(i.mediumPlus.fontSize),menuIcon:Vd(i.small.fontSize),label:{margin:"0 4px",lineHeight:"100%",display:"block"},screenReaderText:Lo}})),Gd=Kt((function(e,t){var n,o,r,i,a,s,l,u,c,d,p,f,h=e.effects,m=e.palette,g=e.semanticColors,v={position:"absolute",width:1,right:31,top:8,bottom:8};return Dr({splitButtonContainer:[Fo(e,{highContrastStyle:{left:-2,top:-2,bottom:-2,right:-2,border:"none"},inset:2}),{display:"inline-flex",selectors:{".ms-Button--default":{borderTopRightRadius:"0",borderBottomRightRadius:"0",borderRight:"none"},".ms-Button--primary":{borderTopRightRadius:"0",borderBottomRightRadius:"0",border:"none",selectors:(n={},n[Eo]={color:"WindowText",backgroundColor:"Window",border:"1px solid WindowText",borderRightWidth:"0",MsHighContrastAdjust:"none"},n)},".ms-Button--primary + .ms-Button":{border:"none",selectors:(o={},o[Eo]={border:"1px solid WindowText",borderLeftWidth:"0"},o)}}}],splitButtonContainerHovered:{selectors:{".ms-Button--primary":{selectors:(r={},r[Eo]={color:"Window",backgroundColor:"Highlight"},r)},".ms-Button.is-disabled":{color:g.buttonTextDisabled,selectors:(i={},i[Eo]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},i)}}},splitButtonContainerChecked:{selectors:{".ms-Button--primary":{selectors:(a={},a[Eo]={color:"Window",backgroundColor:"WindowText",MsHighContrastAdjust:"none"},a)}}},splitButtonContainerCheckedHovered:{selectors:{".ms-Button--primary":{selectors:(s={},s[Eo]={color:"Window",backgroundColor:"WindowText",MsHighContrastAdjust:"none"},s)}}},splitButtonContainerFocused:{outline:"none!important"},splitButtonMenuButton:{padding:6,height:"auto",boxSizing:"border-box",borderRadius:0,borderTopRightRadius:h.roundedCorner2,borderBottomRightRadius:h.roundedCorner2,border:"1px solid "+m.neutralSecondaryAlt,borderLeft:"none",outline:"transparent",userSelect:"none",display:"inline-block",textDecoration:"none",textAlign:"center",cursor:"pointer",verticalAlign:"top",width:32,marginLeft:-1,marginTop:0,marginRight:0,marginBottom:0},splitButtonDivider:Ze(Ze({},v),{selectors:(l={},l[Eo]={backgroundColor:"WindowText"},l)}),splitButtonDividerDisabled:Ze(Ze({},v),{selectors:(u={},u[Eo]={backgroundColor:"GrayText"},u)}),splitButtonMenuButtonDisabled:{pointerEvents:"none",border:"none",selectors:(c={":hover":{cursor:"default"},".ms-Button--primary":{selectors:(d={},d[Eo]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},d)},".ms-Button-menuIcon":{selectors:(p={},p[Eo]={color:"GrayText"},p)}},c[Eo]={color:"GrayText",border:"1px solid GrayText",backgroundColor:"Window"},c)},splitButtonFlexContainer:{display:"flex",height:"100%",flexWrap:"nowrap",justifyContent:"center",alignItems:"center"},splitButtonContainerDisabled:{outline:"none",border:"none",selectors:Ze((f={},f[Eo]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},f),To())}},t)}));var jd=Kt((function(e,t,n){var o=Kd(e),r=Gd(e);return Dr(o,{root:{minWidth:"80px",height:"32px"},label:{fontWeight:ko.semibold}},n?function(e){var t,n,o,r,i,a,s,l,u,c=e.palette,d=e.semanticColors;return{root:{backgroundColor:d.primaryButtonBackground,border:"1px solid "+d.primaryButtonBackground,color:d.primaryButtonText,selectors:(t={},t[Eo]={color:"Window",backgroundColor:"WindowText",borderColor:"WindowText",MsHighContrastAdjust:"none"},t[".ms-Fabric--isFocusVisible &:focus"]={selectors:{":after":{border:"none",outlineColor:c.white}}},t)},rootHovered:{backgroundColor:d.primaryButtonBackgroundHovered,border:"1px solid "+d.primaryButtonBackgroundHovered,color:d.primaryButtonTextHovered,selectors:(n={},n[Eo]={color:"Window",backgroundColor:"Highlight",borderColor:"Highlight"},n)},rootPressed:{backgroundColor:d.primaryButtonBackgroundPressed,border:"1px solid "+d.primaryButtonBackgroundPressed,color:d.primaryButtonTextPressed,selectors:(o={},o[Eo]={color:"Window",backgroundColor:"WindowText",borderColor:"WindowText",MsHighContrastAdjust:"none"},o)},rootExpanded:{backgroundColor:d.primaryButtonBackgroundPressed,color:d.primaryButtonTextPressed},rootChecked:{backgroundColor:d.primaryButtonBackgroundPressed,color:d.primaryButtonTextPressed},rootCheckedHovered:{backgroundColor:d.primaryButtonBackgroundPressed,color:d.primaryButtonTextPressed},rootDisabled:{selectors:(r={},r[Eo]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},r)},splitButtonContainer:{selectors:(i={},i[Eo]={border:"none"},i)},splitButtonDivider:Ze(Ze({},{position:"absolute",width:1,right:31,top:8,bottom:8}),{backgroundColor:c.white,selectors:(a={},a[Eo]={backgroundColor:"Window"},a)}),splitButtonMenuButton:{backgroundColor:d.primaryButtonBackground,color:d.primaryButtonText,selectors:(s={},s[Eo]={backgroundColor:"WindowText"},s[":hover"]={backgroundColor:d.primaryButtonBackgroundHovered,selectors:(l={},l[Eo]={color:"Highlight"},l)},s)},splitButtonMenuButtonDisabled:{backgroundColor:d.primaryButtonBackgroundDisabled,selectors:{":hover":{backgroundColor:d.primaryButtonBackgroundDisabled}}},splitButtonMenuButtonChecked:{backgroundColor:d.primaryButtonBackgroundPressed,selectors:{":hover":{backgroundColor:d.primaryButtonBackgroundPressed}}},splitButtonMenuButtonExpanded:{backgroundColor:d.primaryButtonBackgroundPressed,selectors:{":hover":{backgroundColor:d.primaryButtonBackgroundPressed}}},splitButtonMenuIcon:{color:d.primaryButtonText},splitButtonMenuIconDisabled:{color:c.neutralTertiary,selectors:(u={},u[Eo]={color:"GrayText"},u)}}}(e):function(e){var t,n,o,r,i,a=e.semanticColors,s=e.palette,l=a.buttonBackground,u=a.buttonBackgroundPressed,c=a.buttonBackgroundHovered,d=a.buttonText,p=a.buttonTextHovered,f=a.buttonTextChecked,h=a.buttonTextCheckedHovered;return{root:{backgroundColor:l,color:d},rootHovered:{backgroundColor:c,color:p,selectors:(t={},t[Eo]={borderColor:"Highlight",color:"Highlight"},t)},rootPressed:{backgroundColor:u,color:f},rootExpanded:{backgroundColor:u,color:f},rootChecked:{backgroundColor:u,color:f},rootCheckedHovered:{backgroundColor:u,color:h},rootDisabled:{selectors:(n={},n[Eo]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},n)},splitButtonContainer:{selectors:(o={},o[Eo]={border:"none"},o)},splitButtonMenuButton:{color:s.white,backgroundColor:"transparent",selectors:{":hover":{backgroundColor:s.neutralLight,selectors:(r={},r[Eo]={color:"Highlight"},r)}}},splitButtonMenuButtonDisabled:{backgroundColor:a.buttonBackgroundDisabled,selectors:{":hover":{backgroundColor:a.buttonBackgroundDisabled}}},splitButtonDivider:Ze(Ze({},{position:"absolute",width:1,right:31,top:8,bottom:8}),{backgroundColor:s.neutralTertiaryAlt,selectors:(i={},i[Eo]={backgroundColor:"WindowText"},i)}),splitButtonDividerDisabled:{backgroundColor:e.palette.neutralTertiaryAlt},splitButtonMenuButtonChecked:{backgroundColor:s.neutralQuaternaryAlt,selectors:{":hover":{backgroundColor:s.neutralQuaternaryAlt}}},splitButtonMenuButtonExpanded:{backgroundColor:s.neutralQuaternaryAlt,selectors:{":hover":{backgroundColor:s.neutralQuaternaryAlt}}},splitButtonMenuIcon:{color:a.buttonText},splitButtonMenuIconDisabled:{color:a.buttonTextDisabled}}}(e),r,t)})),qd=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return $e(n,t),n.prototype.render=function(){var t=this.props,n=t.primary,o=void 0!==n&&n,r=t.styles,i=t.theme;return e.createElement(Wd,Ze({},this.props,{variantClassName:o?"ms-Button--primary":"ms-Button--default",styles:jd(i,r,o),onRenderDescription:Du}))},n=Ye([fs("DefaultButton",["theme","styles"],!0)],n)}(e.Component),Qd=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return $e(n,t),n.prototype.render=function(){return e.createElement(qd,Ze({},this.props,{primary:!0,onRenderDescription:Du}))},n=Ye([fs("PrimaryButton",["theme","styles"],!0)],n)}(e.Component),$d=function(){return($d=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},Zd=function(t){var n={id:0,name:"",phoneNo:""},o=e.useState(n),r=o[0],i=o[1],a=Fe(),s=function(e){var t;i($d($d({},r),((t={})[e.target.name]=e.target.value,t)))};return e.createElement("form",{onSubmit:function(e){var t;e.preventDefault(),a((t=r,function(e){return fu(void 0,void 0,void 0,(function(){return hu(this,(function(n){switch(n.label){case 0:return console.log("in async Dispatch"),[4,mu(500)];case 1:return n.sent(),console.log("in async Dispatch after wait 500"),e({type:"AddVehicle",payload:t}),[2]}}))}))})),i(n)}},t.isDuplicate?e.createElement(e.Fragment,null):e.createElement(ii,{horizontal:!0,tokens:{childrenGap:10}},e.createElement(Iu,{name:"name",placeholder:"Enter name",value:r.name,onChange:s}),e.createElement(Iu,{name:"phoneNo",placeholder:"Enter phone No",value:r.phoneNo,onChange:s}),e.createElement(Qd,{type:"submit"},"Add")))},Xd=function(){return(Xd=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},Yd=function(t){var n=t.title,o=Be((function(e){return e.vehicle})),r=Fe(),i=[{key:"name",name:"name",fieldName:"name",minWidth:100,maxWidth:200,isResizable:!0},{key:"phoneNo",name:"Phone No",fieldName:"phoneNo",minWidth:100,maxWidth:200,isResizable:!0}];t.isDuplicate||i.push({key:"delete",name:"delete",fieldName:"",minWidth:100,maxWidth:200,isResizable:!0});return e.createElement("div",null,e.createElement("h1",null,n),e.createElement(pu,{items:o,columns:i,setKey:"set",onRenderItemColumn:function(n,o,i){var a,s,l,u=n[i.fieldName];switch(null===(a=i)||void 0===a?void 0:a.key){case"delete":return t.isDuplicate?"":e.createElement(Ui,{onClick:(l=(null===(s=n)||void 0===s?void 0:s.id)||0,function(){r(gu(l))})},"delete");default:return e.createElement("span",null,u)}},layoutMode:Ji.justified,selectionPreservedOnEmptyClick:!0}),e.createElement(Zd,Xd({},t)))},Jd=function(){return e.createElement(ii,{horizontal:!0,tokens:{childrenGap:30}},e.createElement(ii.Item,null,e.createElement(Yd,{title:"Vehicle List"})),e.createElement(ii.Item,{styles:{root:{background:"grey"}}}," "),e.createElement(ii.Item,null,e.createElement(Yd,{title:"Vehicle List - Duplicate",isDuplicate:!0})))},ep=function(t){var n=Be((function(e){return e.vehicle.find((function(e){return e.id.toString()===t.match.params.id}))})),o=Fe(),r=n?e.createElement("div",{className:"post"},e.createElement("h4",{className:"center"},n.name),e.createElement("p",null,n.phoneNo),e.createElement("div",{className:"center"},e.createElement("button",{className:"btn",onClick:function(){var e;o(gu((null===(e=n)||void 0===e?void 0:e.id)||0)),t.history.push("/")}},"Delete"))):e.createElement("div",{className:"center"},"Loading vehicle...");return e.createElement("div",{className:"contianer"},r)},tp=function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},np=function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};var op=function(e){return function(t){return tp(void 0,void 0,void 0,(function(){return np(this,(function(n){switch(n.label){case 0:return[4,(o=3e3,new Promise((function(e){return setTimeout(e,o)}))).then((function(n){t({type:"SearchClient",payload:e})}))];case 1:return n.sent(),[2]}var o}))}))}},rp=function(t){var n=Be((function(e){return e.clientView.list.find((function(e){return e.id.toString()===t.match.params.id}))})),o=Fe(),r=te(),i=n?e.createElement("div",{className:"post"},e.createElement("h1",{className:"center"},n.name),e.createElement("p",null,n.phoneNo),e.createElement("p",null,n.address),e.createElement("div",{className:"center"},e.createElement(Qd,{onClick:function(){var e,r;o((r=(null===(e=n)||void 0===e?void 0:e.id)||0,function(e){return tp(void 0,void 0,void 0,(function(){return np(this,(function(t){return e({type:"RemoveClient",payload:r}),[2]}))}))})),t.history.push("/clients")}},"Delete"),e.createElement(qd,{onClick:function(){r.goBack()}},"Back"))):e.createElement("div",{className:"center"},"Loading person...");return e.createElement("div",{className:"contianer"},i)};var ip=Gt((function(t){var n=t;return Gt((function(o){if(t===o)throw new Error("Attempted to compose a component with itself.");var r=o,i=Gt((function(t){return function(n){return e.createElement(r,Ze({},n,{defaultRender:t}))}}));return function(t){var o=t.defaultRender;return e.createElement(n,Ze({},t,{defaultRender:o?i(o):r}))}}))}));function ap(e,t){return ip(e)(t)}var sp,lp=pi(),up=function(t){function n(n){var o=t.call(this,n)||this;return o._focusZone=e.createRef(),o._persistedKeytips={},o._keytipManager=Ri.getInstance(),o._divContainer=e.createRef(),o._onRenderItems=function(t){return t.map((function(t,n){return e.createElement("div",{key:t.key,className:o._classNames.item},o.props.onRenderItem(t))}))},o._onRenderOverflowButtonWrapper=function(t){var n={className:o._classNames.overflowButton},r=o.props.keytipSequences,i=[];return r?t.forEach((function(e){var t=e.keytipProps;if(t){var n={content:t.content,keySequences:t.keySequences,disabled:t.disabled||!(!e.disabled&&!e.isDisabled),hasDynamicChildren:t.hasDynamicChildren,hasMenu:t.hasMenu};t.hasDynamicChildren||o._getSubMenuForItem(e)?n.onExecute=o._keytipManager.menuExecute.bind(o._keytipManager,r,e.keytipProps.keySequences):n.onExecute=t.onExecute,o._persistedKeytips[n.content]=n;var a=Ze(Ze({},e),{keytipProps:Ze(Ze({},t),{overflowSetSequence:r})});i.push(a)}else i.push(e)})):i=t,e.createElement("div",Ze({},n),o.props.onRenderOverflowButton(i))},gi(o),o}return $e(n,t),n.prototype.render=function(){var t,n,o=this.props,r=o.items,i=o.overflowItems,a=o.className,s=o.focusZoneProps,l=o.styles,u=o.vertical,c=o.doNotContainWithinFocusZone,d=o.role,p=o.overflowSide,f=void 0===p?"end":p;this._classNames=lp(l,{className:a,vertical:u}),c?(t="div",n=Ze(Ze({},Zr(this.props,$r)),{ref:this._divContainer})):(t=Ka,n=Ze(Ze(Ze({},Zr(this.props,$r)),s),{componentRef:this._focusZone,direction:u?wa.vertical:wa.horizontal}));var h=i&&i.length>0;return e.createElement(t,Ze({role:d||"group","aria-orientation":"menubar"===d?!0===u?"vertical":"horizontal":void 0},n,{className:this._classNames.root}),"start"===f&&h&&this._onRenderOverflowButtonWrapper(i),r&&this._onRenderItems(r),"end"===f&&h&&this._onRenderOverflowButtonWrapper(i))},n.prototype.focus=function(e){var t=!1;return this.props.doNotContainWithinFocusZone?this._divContainer.current&&(t=ua(this._divContainer.current)):this._focusZone.current&&(t=this._focusZone.current.focus(e)),t},n.prototype.focusElement=function(e){var t=!1;return!!e&&(this.props.doNotContainWithinFocusZone?this._divContainer.current&&oa(this._divContainer.current,e)&&(e.focus(),t=document.activeElement===e):this._focusZone.current&&(t=this._focusZone.current.focusElement(e)),t)},n.prototype.componentDidMount=function(){this._registerPersistedKeytips()},n.prototype.componentWillUnmount=function(){this._unregisterPersistedKeytips()},n.prototype.UNSAFE_componentWillUpdate=function(){this._unregisterPersistedKeytips()},n.prototype.componentDidUpdate=function(){this._registerPersistedKeytips()},n.prototype._registerPersistedKeytips=function(){var e=this;Object.keys(this._persistedKeytips).forEach((function(t){var n=e._persistedKeytips[t],o=e._keytipManager.register(n,!0);e._persistedKeytips[o]=n,delete e._persistedKeytips[t]}))},n.prototype._unregisterPersistedKeytips=function(){var e=this;Object.keys(this._persistedKeytips).forEach((function(t){e._keytipManager.unregister(e._persistedKeytips[t],t,!0)})),this._persistedKeytips={}},n.prototype._getSubMenuForItem=function(e){return this.props.itemSubMenuProvider?this.props.itemSubMenuProvider(e):e.subMenuProps?e.subMenuProps.items:void 0},n}(e.Component),cp={flexShrink:0,display:"inherit"},dp=li(up,(function(e){var t=e.className;return{root:["ms-OverflowSet",{position:"relative",display:"flex",flexWrap:"nowrap"},e.vertical&&{flexDirection:"column"},t],item:["ms-OverflowSet-item",cp],overflowButton:["ms-OverflowSet-overflowButton",cp]}}),void 0,{scope:"OverflowSet"});!function(e){e[e.horizontal=0]="horizontal",e[e.vertical=1]="vertical"}(sp||(sp={}));var pp,fp=function(e){var t;void 0===e&&(t={},e={getCachedMeasurement:function(e){if(e&&e.cacheKey&&t.hasOwnProperty(e.cacheKey))return t[e.cacheKey]},addMeasurementToCache:function(e,n){e.cacheKey&&(t[e.cacheKey]=n)}});var n,o=e;function r(e,t){var n=o.getCachedMeasurement(e);if(void 0!==n)return n;var r=t();return o.addMeasurementToCache(e,r),r}function i(e,t,i){for(var a=e,s=r(e,i);s>n;){var l=t(a);if(void 0===l)return{renderedData:a,resizeDirection:void 0,dataToMeasure:void 0};if(void 0===(s=o.getCachedMeasurement(l)))return{dataToMeasure:l,resizeDirection:"shrink"};a=l}return{renderedData:a,resizeDirection:void 0,dataToMeasure:void 0}}return{getNextState:function(e,t,a,s){if(void 0!==s||void 0!==t.dataToMeasure){if(s){if(n&&t.renderedData&&!t.dataToMeasure)return Ze(Ze({},t),function(e,t,o,r){var i;return i=e>n?r?{resizeDirection:"grow",dataToMeasure:r(o)}:{resizeDirection:"shrink",dataToMeasure:t}:{resizeDirection:"shrink",dataToMeasure:o},n=e,Ze(Ze({},i),{measureContainer:!1})}(s,e.data,t.renderedData,e.onGrowData));n=s}var l=Ze(Ze({},t),{measureContainer:!1});return t.dataToMeasure&&(l="grow"===t.resizeDirection&&e.onGrowData?Ze(Ze({},l),function(e,t,a,s){for(var l=e,u=r(e,a);u<n;){var c=t(l);if(void 0===c)return{renderedData:l,resizeDirection:void 0,dataToMeasure:void 0};if(void 0===(u=o.getCachedMeasurement(c)))return{dataToMeasure:c};l=c}return Ze({resizeDirection:"shrink"},i(l,s,a))}(t.dataToMeasure,e.onGrowData,a,e.onReduceData)):Ze(Ze({},l),i(t.dataToMeasure,e.onReduceData,a))),l}},shouldRenderDataForMeasurement:function(e){return!(!e||void 0!==o.getCachedMeasurement(e))},getInitialResizeGroupState:function(e){return{dataToMeasure:Ze({},e),resizeDirection:"grow",measureContainer:!0}}}},hp=e.createContext({isMeasured:!1}),mp={position:"fixed",visibility:"hidden"},gp={position:"relative"},vp=function(t){function n(n){var o=t.call(this,n)||this;return o._nextResizeGroupStateProvider=fp(),o._root=e.createRef(),o._initialHiddenDiv=e.createRef(),o._updateHiddenDiv=e.createRef(),o._hasRenderedContent=!1,o.state=o._nextResizeGroupStateProvider.getInitialResizeGroupState(o.props.data),gi(o),o._async=new ta(o),o._events=new Ii(o),o}return $e(n,t),n.prototype.render=function(){var t=this.props,n=t.className,o=t.onRenderData,r=this.state,i=r.dataToMeasure,a=r.renderedData,s=Zr(this.props,$r,["data"]),l=this._nextResizeGroupStateProvider.shouldRenderDataForMeasurement(i),u=!this._hasRenderedContent&&l;return e.createElement("div",Ze({},s,{className:n,ref:this._root}),e.createElement("div",{style:gp},l&&!u&&e.createElement("div",{style:mp,ref:this._updateHiddenDiv},e.createElement(hp.Provider,{value:{isMeasured:!0}},o(i))),e.createElement("div",{ref:this._initialHiddenDiv,style:u?mp:void 0,"data-automation-id":"visibleContent"},u?o(i):a&&o(a))))},n.prototype.componentDidMount=function(){this._afterComponentRendered(this.props.direction),this._events.on(window,"resize",this._async.debounce(this._onResize,16,{leading:!0}))},n.prototype.UNSAFE_componentWillReceiveProps=function(e){this.setState({dataToMeasure:Ze({},e.data),resizeDirection:"grow",measureContainer:!0})},n.prototype.componentDidUpdate=function(e){this.state.renderedData&&(this._hasRenderedContent=!0,this.props.dataDidRender&&this.props.dataDidRender(this.state.renderedData)),this._afterComponentRendered(this.props.direction)},n.prototype.componentWillUnmount=function(){this._async.dispose(),this._events.dispose()},n.prototype.remeasure=function(){this._root.current&&this.setState({measureContainer:!0})},n.prototype._afterComponentRendered=function(e){var t=this;this._async.requestAnimationFrame((function(){var n=void 0;if(t.state.measureContainer&&t._root.current){var o=t._root.current.getBoundingClientRect();n=e&&e===sp.vertical?o.height:o.width}var r=t._nextResizeGroupStateProvider.getNextState(t.props,t.state,(function(){var n=t._hasRenderedContent?t._updateHiddenDiv:t._initialHiddenDiv;return n.current?e&&e===sp.vertical?n.current.scrollHeight:n.current.scrollWidth:0}),n);r&&t.setState(r)}),this._root.current)},n.prototype._onResize=function(){this._root.current&&this.setState({measureContainer:!0})},n}(e.Component),yp=Kt((function(e,t,n,o){var r,i,a,s,l,u,c,d,p,f,h,m,g,v,y=Kd(e),b=Gd(e),_=e.palette,C=e.semanticColors;return Dr(y,b,{root:[Fo(e,{inset:2,highContrastStyle:{left:4,top:4,bottom:4,right:4,border:"none"},borderColor:"transparent"}),e.fonts.medium,{minWidth:"40px",backgroundColor:_.white,color:_.neutralPrimary,padding:"0 4px",border:"none",borderRadius:0,selectors:(r={},r[Eo]={border:"none"},r)}],rootHovered:{backgroundColor:_.neutralLighter,color:_.neutralDark,selectors:(i={},i[Eo]={color:"Highlight"},i["."+Od.msButtonIcon]={color:_.themeDarkAlt},i["."+Od.msButtonMenuIcon]={color:_.neutralPrimary},i)},rootPressed:{backgroundColor:_.neutralLight,color:_.neutralDark,selectors:(a={},a["."+Od.msButtonIcon]={color:_.themeDark},a["."+Od.msButtonMenuIcon]={color:_.neutralPrimary},a)},rootChecked:{backgroundColor:_.neutralLight,color:_.neutralDark,selectors:(s={},s["."+Od.msButtonIcon]={color:_.themeDark},s["."+Od.msButtonMenuIcon]={color:_.neutralPrimary},s)},rootCheckedHovered:{backgroundColor:_.neutralQuaternaryAlt,selectors:(l={},l["."+Od.msButtonIcon]={color:_.themeDark},l["."+Od.msButtonMenuIcon]={color:_.neutralPrimary},l)},rootExpanded:{backgroundColor:_.neutralLight,color:_.neutralDark,selectors:(u={},u["."+Od.msButtonIcon]={color:_.themeDark},u["."+Od.msButtonMenuIcon]={color:_.neutralPrimary},u)},rootExpandedHovered:{backgroundColor:_.neutralQuaternaryAlt},rootDisabled:{backgroundColor:_.white,selectors:Ze((c={},c["."+Od.msButtonIcon]={color:C.disabledBodySubtext,selectors:(d={},d[Eo]={color:"GrayText"},d)},c[Eo]={color:"GrayText",backgroundColor:"Window"},c),To())},splitButtonContainer:{height:"100%",selectors:(p={},p[Eo]={border:"none"},p)},splitButtonDividerDisabled:{selectors:(f={},f[Eo]={backgroundColor:"Window"},f)},splitButtonDivider:{backgroundColor:_.neutralTertiaryAlt},splitButtonMenuButton:{backgroundColor:_.white,border:"none",borderTopRightRadius:"0",borderBottomRightRadius:"0",color:_.neutralSecondary,selectors:{":hover":{backgroundColor:_.neutralLighter,color:_.neutralDark,selectors:(h={},h[Eo]={color:"Highlight"},h["."+Od.msButtonIcon]={color:_.neutralPrimary},h)},":active":{backgroundColor:_.neutralLight,selectors:(m={},m["."+Od.msButtonIcon]={color:_.neutralPrimary},m)}}},splitButtonMenuButtonDisabled:Ze({backgroundColor:_.white,selectors:(g={},g[Eo]={color:"GrayText",border:"none",backgroundColor:"Window"},g)},To()),splitButtonMenuButtonChecked:{backgroundColor:_.neutralLight,color:_.neutralDark,selectors:{":hover":{backgroundColor:_.neutralQuaternaryAlt}}},splitButtonMenuButtonExpanded:{backgroundColor:_.neutralLight,color:_.black,selectors:{":hover":{backgroundColor:_.neutralQuaternaryAlt}}},splitButtonMenuIcon:{color:_.neutralPrimary},splitButtonMenuIconDisabled:{color:_.neutralTertiary},label:{fontWeight:"normal"},icon:{color:_.themePrimary},menuIcon:(v={color:_.neutralSecondary},v[Eo]={color:"GrayText"},v)},t)})),bp=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return $e(n,t),n.prototype.render=function(){var t=this.props,n=t.styles,o=t.theme;return e.createElement(Wd,Ze({},this.props,{variantClassName:"ms-Button--commandBar",styles:yp(o,n),onRenderDescription:Du}))},n=Ye([fs("CommandBarButton",["theme","styles"],!0)],n)}(e.Component);!function(e){e[e.Parent=0]="Parent",e[e.Self=1]="Self"}(pp||(pp={}));var _p,Cp=pi(),Sp=li(function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n._onRenderContent=function(t){return e.createElement("p",{className:n._classNames.subText},t.content)},n}return $e(n,t),n.prototype.render=function(){var t=this.props,n=t.className,o=t.calloutProps,r=t.directionalHint,i=t.directionalHintForRTL,a=t.styles,s=t.id,l=t.maxWidth,u=t.onRenderContent,c=void 0===u?this._onRenderContent:u,d=t.targetElement,p=t.theme;return this._classNames=Cp(a,{theme:p,className:n||o&&o.className,beakWidth:o&&o.beakWidth,gapSpace:o&&o.gapSpace,maxWidth:l}),e.createElement(od,Ze({target:d,directionalHint:r,directionalHintForRTL:i},o,Zr(this.props,$r,["id"]),{className:this._classNames.root}),e.createElement("div",{className:this._classNames.content,id:s,role:"tooltip",onMouseEnter:this.props.onMouseEnter,onMouseLeave:this.props.onMouseLeave},c(this.props,this._onRenderContent)))},n.defaultProps={directionalHint:Nu,maxWidth:"364px",calloutProps:{isBeakVisible:!0,beakWidth:16,gapSpace:0,setInitialFocus:!0,doNotLayer:!1}},n}(e.Component),(function(e){var t=e.className,n=e.beakWidth,o=void 0===n?16:n,r=e.gapSpace,i=void 0===r?0:r,a=e.maxWidth,s=e.theme,l=s.semanticColors,u=s.fonts,c=s.effects,d=-(Math.sqrt(o*o/2)+i);return{root:["ms-Tooltip",s.fonts.medium,wo.fadeIn200,{background:l.menuBackground,boxShadow:c.elevation8,padding:"8px",maxWidth:a,selectors:{":after":{content:"''",position:"absolute",bottom:d,left:d,right:d,top:d,zIndex:0}}},t],content:["ms-Tooltip-content",u.small,{position:"relative",zIndex:1,color:l.menuItemText,wordWrap:"break-word",overflowWrap:"break-word",overflow:"hidden"}],subText:["ms-Tooltip-subtext",{fontSize:"inherit",fontWeight:"inherit",color:"inherit",margin:0}]}}),void 0,{scope:"Tooltip"});!function(e){e[e.zero=0]="zero",e[e.medium=1]="medium",e[e.long=2]="long"}(_p||(_p={}));var kp=pi(),xp=function(t){function n(o){var r=t.call(this,o)||this;return r._tooltipHost=e.createRef(),r._defaultTooltipId=Pi("tooltip"),r.show=function(){r._toggleTooltip(!0)},r.dismiss=function(){r._hideTooltip()},r._getTargetElement=function(){if(r._tooltipHost.current){var e=r.props.overflowMode;if(void 0!==e)switch(e){case pp.Parent:return r._tooltipHost.current.parentElement;case pp.Self:return r._tooltipHost.current}return r._tooltipHost.current}},r._onTooltipMouseEnter=function(e){var t,o=r.props,i=o.overflowMode,a=o.delay;if(n._currentVisibleTooltip&&n._currentVisibleTooltip!==r&&n._currentVisibleTooltip.dismiss(),n._currentVisibleTooltip=r,void 0!==i){var s=r._getTargetElement();if(s&&(!function(e){return e.clientWidth<e.scrollWidth}(t=s)&&!function(e){return e.clientHeight<e.scrollHeight}(t)))return}if(!e.target||!xa(e.target,r._getTargetElement()))if(r._clearDismissTimer(),r._clearOpenTimer(),a!==_p.zero){r.setState({isAriaPlaceholderRendered:!0});var l=r._getDelayTime(a);r._openTimerId=r._async.setTimeout((function(){r._toggleTooltip(!0)}),l)}else r._toggleTooltip(!0)},r._onTooltipMouseLeave=function(e){var t=r.props.closeDelay;r._clearDismissTimer(),r._clearOpenTimer(),t?r._dismissTimerId=r._async.setTimeout((function(){r._toggleTooltip(!1)}),t):r._toggleTooltip(!1),n._currentVisibleTooltip===r&&(n._currentVisibleTooltip=void 0)},r._onTooltipKeyDown=function(e){(e.which===Xt||e.ctrlKey)&&r.state.isTooltipVisible&&(r._hideTooltip(),e.stopPropagation())},r._clearDismissTimer=function(){r._async.clearTimeout(r._dismissTimerId)},r._clearOpenTimer=function(){r._async.clearTimeout(r._openTimerId)},r._hideTooltip=function(){r._clearOpenTimer(),r._clearDismissTimer(),r._toggleTooltip(!1)},r._toggleTooltip=function(e){r.state.isTooltipVisible!==e&&r.setState({isAriaPlaceholderRendered:!1,isTooltipVisible:e},(function(){return r.props.onTooltipToggle&&r.props.onTooltipToggle(e)}))},r._getDelayTime=function(e){switch(e){case _p.medium:return 300;case _p.long:return 500;default:return 0}},gi(r),r.state={isAriaPlaceholderRendered:!1,isTooltipVisible:!1},r._async=new ta(r),r}return $e(n,t),n.prototype.render=function(){var t=this.props,n=t.calloutProps,o=t.children,r=t.content,i=t.directionalHint,a=t.directionalHintForRTL,s=t.hostClassName,l=t.id,u=t.setAriaDescribedBy,c=void 0===u||u,d=t.tooltipProps,p=t.styles,f=t.theme;this._classNames=kp(p,{theme:f,className:s});var h=this.state,m=h.isAriaPlaceholderRendered,g=h.isTooltipVisible,v=l||this._defaultTooltipId,y=!!(r||d&&d.onRenderContent&&d.onRenderContent()),b=g&&y,_=c&&g&&y?v:void 0;return e.createElement("div",Ze({className:this._classNames.root,ref:this._tooltipHost},{onFocusCapture:this._onTooltipMouseEnter},{onBlurCapture:this._hideTooltip},{onMouseEnter:this._onTooltipMouseEnter,onMouseLeave:this._onTooltipMouseLeave,onKeyDown:this._onTooltipKeyDown,"aria-describedby":_}),o,b&&e.createElement(Sp,Ze({id:v,content:r,targetElement:this._getTargetElement(),directionalHint:i,directionalHintForRTL:a,calloutProps:wi({},n,{onDismiss:this._hideTooltip,onMouseEnter:this._onTooltipMouseEnter,onMouseLeave:this._onTooltipMouseLeave}),onMouseEnter:this._onTooltipMouseEnter,onMouseLeave:this._onTooltipMouseLeave},Zr(this.props,$r),d)),m&&e.createElement("div",{id:v,style:Lo},r))},n.prototype.componentWillUnmount=function(){n._currentVisibleTooltip&&n._currentVisibleTooltip===this&&(n._currentVisibleTooltip=void 0),this._async.dispose()},n.defaultProps={delay:_p.medium},n}(e.Component),wp={root:"ms-TooltipHost",ariaPlaceholder:"ms-TooltipHost-aria-placeholder"},Ep=li(xp,(function(e){var t=e.className,n=e.theme;return{root:[Oo(wp,n).root,{display:"inline"},t]}}),void 0,{scope:"TooltipHost"}),Ip=Kt((function(e){var t={height:"100%"},n={whiteSpace:"nowrap"},o=e||{},r=o.root,i=o.label,a=Xe(o,["root","label"]);return Ze(Ze({},a),{root:r?[t,r]:t,label:i?[n,i]:n})})),Tp=pi(),Dp=li(function(t){function n(n){var o=t.call(this,n)||this;return o._overflowSet=e.createRef(),o._resizeGroup=e.createRef(),o._onRenderData=function(t){return e.createElement(Ka,{className:ra(o._classNames.root),direction:wa.horizontal,role:"menubar","aria-label":o.props.ariaLabel},e.createElement(dp,{role:"none",componentRef:o._overflowSet,className:ra(o._classNames.primarySet),doNotContainWithinFocusZone:!0,items:t.primaryItems,overflowItems:t.overflowItems.length?t.overflowItems:void 0,onRenderItem:o._onRenderItem,onRenderOverflowButton:o._onRenderOverflowButton}),t.farItems&&t.farItems.length>0&&e.createElement(dp,{role:"none",className:ra(o._classNames.secondarySet),doNotContainWithinFocusZone:!0,items:t.farItems,onRenderItem:o._onRenderItem,onRenderOverflowButton:Du}))},o._onRenderItem=function(t){if(t.onRender)return t.onRender(t,(function(){}));var n=t.text||t.name,r=Ze(Ze({allowDisabledFocus:!0,role:"menuitem"},t),{styles:Ip(t.buttonStyles),className:ra("ms-CommandBarItem-link",t.className),text:t.iconOnly?void 0:n,menuProps:t.subMenuProps,onClick:o._onButtonClick(t)});return t.iconOnly&&(void 0!==n||t.tooltipHostProps)?e.createElement(Ep,Ze({content:n},t.tooltipHostProps),o._commandButton(t,r)):o._commandButton(t,r)},o._commandButton=function(t,n){var r=o.props.buttonAs,i=t.commandBarButtonAs,a=bp;return i&&(a=ap(i,a)),r&&(a=ap(r,a)),e.createElement(a,Ze({},n))},o._onRenderOverflowButton=function(t){var n=o.props.overflowButtonProps,r=void 0===n?{}:n,i=Je(r.menuProps?r.menuProps.items:[],t),a=Ze(Ze({role:"menuitem"},r),{styles:Ze({menuIcon:{fontSize:"17px"}},r.styles),className:ra("ms-CommandBar-overflowButton",r.className),menuProps:Ze(Ze({},r.menuProps),{items:i}),menuIconProps:Ze({iconName:"More"},r.menuIconProps)}),s=o.props.overflowButtonAs?ap(o.props.overflowButtonAs,bp):bp;return e.createElement(s,Ze({},a))},o._onReduceData=function(e){var t=o.props,n=t.shiftOnReduce,r=t.onDataReduced,i=e.primaryItems,a=e.overflowItems,s=e.cacheKey,l=i[n?0:i.length-1];if(void 0!==l){l.renderedInOverflow=!0,a=Je([l],a),i=n?i.slice(1):i.slice(0,-1);var u=Ze(Ze({},e),{primaryItems:i,overflowItems:a});return s=o._computeCacheKey({primaryItems:i,overflow:a.length>0}),r&&r(l),u.cacheKey=s,u}},o._onGrowData=function(e){var t=o.props,n=t.shiftOnReduce,r=t.onDataGrown,i=e.minimumOverflowItems,a=e.primaryItems,s=e.overflowItems,l=e.cacheKey,u=s[0];if(void 0!==u&&s.length>i){u.renderedInOverflow=!1,s=s.slice(1),a=n?Je([u],a):Je(a,[u]);var c=Ze(Ze({},e),{primaryItems:a,overflowItems:s});return l=o._computeCacheKey({primaryItems:a,overflow:s.length>0}),r&&r(u),c.cacheKey=l,c}},gi(o),o}return $e(n,t),n.prototype.render=function(){var t=this.props,n=t.items,o=t.overflowItems,r=t.farItems,i=t.styles,a=t.theme,s=t.dataDidRender,l=t.onReduceData,u=void 0===l?this._onReduceData:l,c=t.onGrowData,d=void 0===c?this._onGrowData:c,p={primaryItems:Je(n),overflowItems:Je(o),minimumOverflowItems:Je(o).length,farItems:r,cacheKey:this._computeCacheKey({primaryItems:Je(n),overflow:o&&o.length>0})};this._classNames=Tp(i,{theme:a});var f=Zr(this.props,$r);return e.createElement(vp,Ze({},f,{componentRef:this._resizeGroup,data:p,onReduceData:u,onGrowData:d,onRenderData:this._onRenderData,dataDidRender:s}))},n.prototype.focus=function(){var e=this._overflowSet.current;e&&e.focus()},n.prototype.remeasure=function(){this._resizeGroup.current&&this._resizeGroup.current.remeasure()},n.prototype._onButtonClick=function(e){return function(t){e.inactive||e.onClick&&e.onClick(t,e)}},n.prototype._computeCacheKey=function(e){var t=e.primaryItems,n=e.overflow;return[t&&t.reduce((function(e,t){var n=t.cacheKey;return e+(void 0===n?t.key:n)}),""),n?"overflow":""].join("")},n.defaultProps={items:[],overflowItems:[]},n}(e.Component),(function(e){var t=e.className,n=e.theme,o=n.semanticColors;return{root:[n.fonts.medium,"ms-CommandBar",{display:"flex",backgroundColor:o.bodyBackground,padding:"0 14px 0 24px",height:44},t],primarySet:["ms-CommandBar-primaryCommand",{flexGrow:"1",display:"flex",alignItems:"stretch"}],secondarySet:["ms-CommandBar-secondaryCommand",{flexShrink:"0",display:"flex",alignItems:"stretch"}]}}),void 0,{scope:"CommandBar"}),Pp=function(){var t=te(),n=ne(),o=[{key:"Vehicles",text:"Vehicles",onClick:function(){return t.push("/")},checked:"/"===n.pathname},{key:"About",text:"About",onClick:function(){return t.push("/about")},checked:"/about"===n.pathname},{key:"contact",text:"contact",onClick:function(){return t.push("/contact")},checked:"/contact"===n.pathname},{key:"clients",text:"clients",onClick:function(){return t.push("/clients")},checked:"/clients"===n.pathname}];return e.createElement(Dp,{items:o})},Mp=function(){return e.createElement("div",{className:"container"},"Contact")},Rp=function(){return e.createElement("div",{className:"container"},"About")},Fp=function(t){var n=e.useState("")[1],o=Be((function(e){return e.clientView})),r=Fe();return e.createElement("div",null,e.createElement("h1",null,"Clients"),e.createElement(ii,{horizontal:!0,grow:!0,tokens:{childrenGap:10}},e.createElement(Iu,{name:"search",placeholder:"Search",onChange:function(e){n(e.target.value),o.search=e.target.value,r(op(o))}}),e.createElement(Qd,{text:"Search",onClick:function(){r(op(o))},style:{maxWidth:"30px"}}),e.createElement(Qd,{text:"Add",onClick:function(){return t.history.push("/client-create")},style:{maxWidth:"30px"}})),e.createElement(pu,{items:o.list,columns:[{key:"Name",name:"Name",fieldName:"name",minWidth:100,maxWidth:200,isResizable:!0},{key:"phoneNo",name:"Phone No",fieldName:"phoneNo",minWidth:100,maxWidth:200,isResizable:!0},{key:"address",name:"Address",fieldName:"address",minWidth:100,maxWidth:200,isResizable:!0}],setKey:"set",onRenderItemColumn:function(t,n,o){var r,i=t[o.fieldName];switch(o.key){case"Name":return e.createElement(ue,{to:"/client-detail/"+(null===(r=t)||void 0===r?void 0:r.id)},i);default:return e.createElement("span",null,i)}},layoutMode:Ji.justified,selectionPreservedOnEmptyClick:!0,onItemInvoked:function(e){alert("Item invoked: "+e.name)}}))},Np=function(){return(Np=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},Ap=function(t){var n={id:0,name:"",phoneNo:"",address:""},o=e.useState(n),r=o[0],i=o[1],a=function(e){var t;i(Np(Np({},r),((t={})[e.target.name]=e.target.value,t)))},s=Fe(),l=te();return e.createElement(ii,{tokens:{childrenGap:20},styles:{root:{width:300}}},e.createElement(Iu,{placeholder:"Enter name",name:"name",onChange:a}),e.createElement(Iu,{placeholder:"Enter phone no",name:"phoneNo",onChange:a}),e.createElement(Iu,{placeholder:"Enter address",name:"address",onChange:a}),e.createElement(Qd,{text:"Save",onClick:function(){var e;s((e=r,function(t){return tp(void 0,void 0,void 0,(function(){return np(this,(function(n){return t({type:"AddClient",payload:e}),[2]}))}))})),i(n),t.history.push("/clients")}}),e.createElement(qd,{text:"Back",onClick:function(){l.goBack()}}))};function Lp(e,t){void 0===e&&(e=""),xr({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons"',src:"url('"+e+"fabric-icons-a13498cf.woff') format('woff')"},icons:{GlobalNavButton:"",ChevronDown:"",ChevronUp:"",Edit:"",Add:"",Cancel:"",More:"",Settings:"",Mail:"",Filter:"",Search:"",Share:"",BlockedSite:"",FavoriteStar:"",FavoriteStarFill:"",CheckMark:"",Delete:"",ChevronLeft:"",ChevronRight:"",Calendar:"",Megaphone:"",Undo:"",Flag:"",Page:"",Pinned:"",View:"",Clear:"",Download:"",Upload:"",Folder:"",Sort:"",AlignRight:"",AlignLeft:"",Tag:"",AddFriend:"",Info:"",SortLines:"",List:"",CircleRing:"",Heart:"",HeartFill:"",Tiles:"",Embed:"",Glimmer:"",Ascending:"",Descending:"",SortUp:"",SortDown:"",SyncToPC:"",LargeGrid:"",SkypeCheck:"",SkypeClock:"",SkypeMinus:"",ClearFilter:"",Flow:"",StatusCircleCheckmark:"",MoreVertical:""}},t)}function Bp(e,t){void 0===e&&(e=""),xr({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-0"',src:"url('"+e+"fabric-icons-0-467ee27f.woff') format('woff')"},icons:{PageLink:"",CommentSolid:"",ChangeEntitlements:"",Installation:"",WebAppBuilderModule:"",WebAppBuilderFragment:"",WebAppBuilderSlot:"",BullseyeTargetEdit:"",WebAppBuilderFragmentCreate:"",PageData:"",PageHeaderEdit:"",ProductList:"",UnpublishContent:"",DependencyAdd:"",DependencyRemove:"",EntitlementPolicy:"",EntitlementRedemption:"",SchoolDataSyncLogo:"",PinSolid12:"",PinSolidOff12:"",AddLink:"",SharepointAppIcon16:"",DataflowsLink:"",TimePicker:"",UserWarning:"",ComplianceAudit:"",InternetSharing:"",Brightness:"",MapPin:"",Airplane:"",Tablet:"",QuickNote:"",Video:"",People:"",Phone:"",Pin:"",Shop:"",Stop:"",Link:"",AllApps:"",Zoom:"",ZoomOut:"",Microphone:"",Camera:"",Attach:"",Send:"",FavoriteList:"",PageSolid:"",Forward:"",Back:"",Refresh:"",Lock:"",ReportHacked:"",EMI:"",MiniLink:"",Blocked:"",ReadingMode:"",Favicon:"",Remove:"",Checkbox:"",CheckboxComposite:"",CheckboxFill:"",CheckboxIndeterminate:"",CheckboxCompositeReversed:"",BackToWindow:"",FullScreen:"",Print:"",Up:"",Down:"",OEM:"",Save:"",ReturnKey:"",Cloud:"",Flashlight:"",CommandPrompt:"",Sad:"",RealEstate:"",SIPMove:"",EraseTool:"",GripperTool:"",Dialpad:"",PageLeft:"",PageRight:"",MultiSelect:"",KeyboardClassic:"",Play:"",Pause:"",InkingTool:"",Emoji2:"",GripperBarHorizontal:"",System:"",Personalize:"",SearchAndApps:"",Globe:"",EaseOfAccess:"",ContactInfo:"",Unpin:"",Contact:"",Memo:"",IncomingCall:""}},t)}function Op(e,t){void 0===e&&(e=""),xr({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-1"',src:"url('"+e+"fabric-icons-1-4d521695.woff') format('woff')"},icons:{Paste:"",WindowsLogo:"",Error:"",GripperBarVertical:"",Unlock:"",Slideshow:"",Trim:"",AutoEnhanceOn:"",AutoEnhanceOff:"",Color:"",SaveAs:"",Light:"",Filters:"",AspectRatio:"",Contrast:"",Redo:"",Crop:"",PhotoCollection:"",Album:"",Rotate:"",PanoIndicator:"",Translate:"",RedEye:"",ViewOriginal:"",ThumbnailView:"",Package:"",Telemarketer:"",Warning:"",Financial:"",Education:"",ShoppingCart:"",Train:"",Move:"",TouchPointer:"",Merge:"",TurnRight:"",Ferry:"",Highlight:"",PowerButton:"",Tab:"",Admin:"",TVMonitor:"",Speakers:"",Game:"",HorizontalTabKey:"",UnstackSelected:"",StackIndicator:"",Nav2DMapView:"",StreetsideSplitMinimize:"",Car:"",Bus:"",EatDrink:"",SeeDo:"",LocationCircle:"",Home:"",SwitcherStartEnd:"",ParkingLocation:"",IncidentTriangle:"",Touch:"",MapDirections:"",CaretHollow:"",CaretSolid:"",History:"",Location:"",MapLayers:"",SearchNearby:"",Work:"",Recent:"",Hotel:"",Bank:"",LocationDot:"",Dictionary:"",ChromeBack:"",FolderOpen:"",PinnedFill:"",RevToggleKey:"",USB:"",Previous:"",Next:"",Sync:"",Help:"",Emoji:"",MailForward:"",ClosePane:"",OpenPane:"",PreviewLink:"",ZoomIn:"",Bookmarks:"",Document:"",ProtectedDocument:"",OpenInNewWindow:"",MailFill:"",ViewAll:"",Switch:"",Rename:"",Go:"",Remote:"",SelectAll:"",Orientation:"",Import:""}},t)}function Hp(e,t){void 0===e&&(e=""),xr({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-2"',src:"url('"+e+"fabric-icons-2-63c99abf.woff') format('woff')"},icons:{Picture:"",ChromeClose:"",ShowResults:"",Message:"",CalendarDay:"",CalendarWeek:"",MailReplyAll:"",Read:"",Cut:"",PaymentCard:"",Copy:"",Important:"",MailReply:"",GotoToday:"",Font:"",FontColor:"",FolderFill:"",Permissions:"",DisableUpdates:"",Unfavorite:"",Italic:"",Underline:"",Bold:"",MoveToFolder:"",Dislike:"",Like:"",AlignCenter:"",OpenFile:"",ClearSelection:"",FontDecrease:"",FontIncrease:"",FontSize:"",CellPhone:"",RepeatOne:"",RepeatAll:"",Calculator:"",Library:"",PostUpdate:"",NewFolder:"",CalendarReply:"",UnsyncFolder:"",SyncFolder:"",BlockContact:"",Accept:"",BulletedList:"",Preview:"",News:"",Chat:"",Group:"",World:"",Comment:"",DockLeft:"",DockRight:"",Repair:"",Accounts:"",Street:"",RadioBullet:"",Stopwatch:"",Clock:"",WorldClock:"",AlarmClock:"",Photo:"",ActionCenter:"",Hospital:"",Timer:"",FullCircleMask:"",LocationFill:"",ChromeMinimize:"",ChromeRestore:"",Annotation:"",Fingerprint:"",Handwriting:"",ChromeFullScreen:"",Completed:"",Label:"",FlickDown:"",FlickUp:"",FlickLeft:"",FlickRight:"",MiniExpand:"",MiniContract:"",Streaming:"",MusicInCollection:"",OneDriveLogo:"",CompassNW:"",Code:"",LightningBolt:"",CalculatorMultiply:"",CalculatorAddition:"",CalculatorSubtract:"",CalculatorPercentage:"",CalculatorEqualTo:"",PrintfaxPrinterFile:"",StorageOptical:"",Communications:"",Headset:"",Health:"",Webcam2:"",FrontCamera:"",ChevronUpSmall:""}},t)}function zp(e,t){void 0===e&&(e=""),xr({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-3"',src:"url('"+e+"fabric-icons-3-089e217a.woff') format('woff')"},icons:{ChevronDownSmall:"",ChevronLeftSmall:"",ChevronRightSmall:"",ChevronUpMed:"",ChevronDownMed:"",ChevronLeftMed:"",ChevronRightMed:"",Devices2:"",PC1:"",PresenceChickletVideo:"",Reply:"",HalfAlpha:"",ConstructionCone:"",DoubleChevronLeftMed:"",Volume0:"",Volume1:"",Volume2:"",Volume3:"",Chart:"",Robot:"",Manufacturing:"",LockSolid:"",FitPage:"",FitWidth:"",BidiLtr:"",BidiRtl:"",RightDoubleQuote:"",Sunny:"",CloudWeather:"",Cloudy:"",PartlyCloudyDay:"",PartlyCloudyNight:"",ClearNight:"",RainShowersDay:"",Rain:"",Thunderstorms:"",RainSnow:"",Snow:"",BlowingSnow:"",Frigid:"",Fog:"",Squalls:"",Duststorm:"",Unknown:"",Precipitation:"",Ribbon:"",AreaChart:"",Assign:"",FlowChart:"",CheckList:"",Diagnostic:"",Generate:"",LineChart:"",Equalizer:"",BarChartHorizontal:"",BarChartVertical:"",Freezing:"",FunnelChart:"",Processing:"",Quantity:"",ReportDocument:"",StackColumnChart:"",SnowShowerDay:"",HailDay:"",WorkFlow:"",HourGlass:"",StoreLogoMed20:"",TimeSheet:"",TriangleSolid:"",UpgradeAnalysis:"",VideoSolid:"",RainShowersNight:"",SnowShowerNight:"",Teamwork:"",HailNight:"",PeopleAdd:"",Glasses:"",DateTime2:"",Shield:"",Header1:"",PageAdd:"",NumberedList:"",PowerBILogo:"",Info2:"",MusicInCollectionFill:"",Asterisk:"",ErrorBadge:"",CircleFill:"",Record2:"",AllAppsMirrored:"",BookmarksMirrored:"",BulletedListMirrored:"",CaretHollowMirrored:"",CaretSolidMirrored:"",ChromeBackMirrored:"",ClearSelectionMirrored:"",ClosePaneMirrored:"",DockLeftMirrored:"",DoubleChevronLeftMedMirrored:"",GoMirrored:""}},t)}function Wp(e,t){void 0===e&&(e=""),xr({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-4"',src:"url('"+e+"fabric-icons-4-a656cc0a.woff') format('woff')"},icons:{HelpMirrored:"",ImportMirrored:"",ImportAllMirrored:"",ListMirrored:"",MailForwardMirrored:"",MailReplyMirrored:"",MailReplyAllMirrored:"",MiniContractMirrored:"",MiniExpandMirrored:"",OpenPaneMirrored:"",ParkingLocationMirrored:"",SendMirrored:"",ShowResultsMirrored:"",ThumbnailViewMirrored:"",Media:"",Devices3:"",Focus:"",VideoLightOff:"",Lightbulb:"",StatusTriangle:"",VolumeDisabled:"",Puzzle:"",EmojiNeutral:"",EmojiDisappointed:"",HomeSolid:"",Ringer:"",PDF:"",HeartBroken:"",StoreLogo16:"",MultiSelectMirrored:"",Broom:"",AddToShoppingList:"",Cocktails:"",Wines:"",Articles:"",Cycling:"",DietPlanNotebook:"",Pill:"",ExerciseTracker:"",HandsFree:"",Medical:"",Running:"",Weights:"",Trackers:"",AddNotes:"",AllCurrency:"",BarChart4:"",CirclePlus:"",Coffee:"",Cotton:"",Market:"",Money:"",PieDouble:"",PieSingle:"",RemoveFilter:"",Savings:"",Sell:"",StockDown:"",StockUp:"",Lamp:"",Source:"",MSNVideos:"",Cricket:"",Golf:"",Baseball:"",Soccer:"",MoreSports:"",AutoRacing:"",CollegeHoops:"",CollegeFootball:"",ProFootball:"",ProHockey:"",Rugby:"",SubstitutionsIn:"",Tennis:"",Arrivals:"",Design:"",Website:"",Drop:"",HistoricalWeather:"",SkiResorts:"",Snowflake:"",BusSolid:"",FerrySolid:"",AirplaneSolid:"",TrainSolid:"",Ticket:"",WifiWarning4:"",Devices4:"",AzureLogo:"",BingLogo:"",MSNLogo:"",OutlookLogoInverse:"",OfficeLogo:"",SkypeLogo:"",Door:"",EditMirrored:"",GiftCard:"",DoubleBookmark:"",StatusErrorFull:""}},t)}function Up(e,t){void 0===e&&(e=""),xr({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-5"',src:"url('"+e+"fabric-icons-5-f95ba260.woff') format('woff')"},icons:{Certificate:"",FastForward:"",Rewind:"",Photo2:"",OpenSource:"",Movers:"",CloudDownload:"",Family:"",WindDirection:"",Bug:"",SiteScan:"",BrowserScreenShot:"",F12DevTools:"",CSS:"",JS:"",DeliveryTruck:"",ReminderPerson:"",ReminderGroup:"",ReminderTime:"",TabletMode:"",Umbrella:"",NetworkTower:"",CityNext:"",CityNext2:"",Section:"",OneNoteLogoInverse:"",ToggleFilled:"",ToggleBorder:"",SliderThumb:"",ToggleThumb:"",Documentation:"",Badge:"",Giftbox:"",VisualStudioLogo:"",HomeGroup:"",ExcelLogoInverse:"",WordLogoInverse:"",PowerPointLogoInverse:"",Cafe:"",SpeedHigh:"",Commitments:"",ThisPC:"",MusicNote:"",MicOff:"",PlaybackRate1x:"",EdgeLogo:"",CompletedSolid:"",AlbumRemove:"",MessageFill:"",TabletSelected:"",MobileSelected:"",LaptopSelected:"",TVMonitorSelected:"",DeveloperTools:"",Shapes:"",InsertTextBox:"",LowerBrightness:"",WebComponents:"",OfflineStorage:"",DOM:"",CloudUpload:"",ScrollUpDown:"",DateTime:"",Event:"",Cake:"",Org:"",PartyLeader:"",DRM:"",CloudAdd:"",AppIconDefault:"",Photo2Add:"",Photo2Remove:"",Calories:"",POI:"",AddTo:"",RadioBtnOff:"",RadioBtnOn:"",ExploreContent:"",Product:"",ProgressLoopInner:"",ProgressLoopOuter:"",Blocked2:"",FangBody:"",Toolbox:"",PageHeader:"",ChatInviteFriend:"",Brush:"",Shirt:"",Crown:"",Diamond:"",ScaleUp:"",QRCode:"",Feedback:"",SharepointLogoInverse:"",YammerLogo:"",Hide:"",Uneditable:"",ReturnToSession:"",OpenFolderHorizontal:"",CalendarMirrored:""}},t)}function Vp(e,t){void 0===e&&(e=""),xr({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-6"',src:"url('"+e+"fabric-icons-6-ef6fd590.woff') format('woff')"},icons:{SwayLogoInverse:"",OutOfOffice:"",Trophy:"",ReopenPages:"",EmojiTabSymbols:"",AADLogo:"",AccessLogo:"",AdminALogoInverse32:"",AdminCLogoInverse32:"",AdminDLogoInverse32:"",AdminELogoInverse32:"",AdminLLogoInverse32:"",AdminMLogoInverse32:"",AdminOLogoInverse32:"",AdminPLogoInverse32:"",AdminSLogoInverse32:"",AdminYLogoInverse32:"",DelveLogoInverse:"",ExchangeLogoInverse:"",LyncLogo:"",OfficeVideoLogoInverse:"",SocialListeningLogo:"",VisioLogoInverse:"",Balloons:"",Cat:"",MailAlert:"",MailCheck:"",MailLowImportance:"",MailPause:"",MailRepeat:"",SecurityGroup:"",Table:"",VoicemailForward:"",VoicemailReply:"",Waffle:"",RemoveEvent:"",EventInfo:"",ForwardEvent:"",WipePhone:"",AddOnlineMeeting:"",JoinOnlineMeeting:"",RemoveLink:"",PeopleBlock:"",PeopleRepeat:"",PeopleAlert:"",PeoplePause:"",TransferCall:"",AddPhone:"",UnknownCall:"",NoteReply:"",NoteForward:"",NotePinned:"",RemoveOccurrence:"",Timeline:"",EditNote:"",CircleHalfFull:"",Room:"",Unsubscribe:"",Subscribe:"",HardDrive:"",RecurringTask:"",TaskManager:"",TaskManagerMirrored:"",Combine:"",Split:"",DoubleChevronUp:"",DoubleChevronLeft:"",DoubleChevronRight:"",TextBox:"",TextField:"",NumberField:"",Dropdown:"",PenWorkspace:"",BookingsLogo:"",ClassNotebookLogoInverse:"",DelveAnalyticsLogo:"",DocsLogoInverse:"",Dynamics365Logo:"",DynamicSMBLogo:"",OfficeAssistantLogo:"",OfficeStoreLogo:"",OneNoteEduLogoInverse:"",PlannerLogo:"",PowerApps:"",Suitcase:"",ProjectLogoInverse:"",CaretLeft8:"",CaretRight8:"",CaretUp8:"",CaretDown8:"",CaretLeftSolid8:"",CaretRightSolid8:"",CaretUpSolid8:"",CaretDownSolid8:"",ClearFormatting:"",Superscript:"",Subscript:"",Strikethrough:"",Export:"",ExportMirrored:""}},t)}function Kp(e,t){void 0===e&&(e=""),xr({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-7"',src:"url('"+e+"fabric-icons-7-2b97bb99.woff') format('woff')"},icons:{SingleBookmark:"",SingleBookmarkSolid:"",DoubleChevronDown:"",FollowUser:"",ReplyAll:"",WorkforceManagement:"",RecruitmentManagement:"",Questionnaire:"",ManagerSelfService:"",ProductionFloorManagement:"",ProductRelease:"",ProductVariant:"",ReplyMirrored:"",ReplyAllMirrored:"",Medal:"",AddGroup:"",QuestionnaireMirrored:"",CloudImportExport:"",TemporaryUser:"",CaretSolid16:"",GroupedDescending:"",GroupedAscending:"",AwayStatus:"",MyMoviesTV:"",GenericScan:"",AustralianRules:"",WifiEthernet:"",TrackersMirrored:"",DateTimeMirrored:"",StopSolid:"",DoubleChevronUp12:"",DoubleChevronDown12:"",DoubleChevronLeft12:"",DoubleChevronRight12:"",CalendarAgenda:"",ConnectVirtualMachine:"",AddEvent:"",AssetLibrary:"",DataConnectionLibrary:"",DocLibrary:"",FormLibrary:"",FormLibraryMirrored:"",ReportLibrary:"",ReportLibraryMirrored:"",ContactCard:"",CustomList:"",CustomListMirrored:"",IssueTracking:"",IssueTrackingMirrored:"",PictureLibrary:"",OfficeAddinsLogo:"",OfflineOneDriveParachute:"",OfflineOneDriveParachuteDisabled:"",TriangleSolidUp12:"",TriangleSolidDown12:"",TriangleSolidLeft12:"",TriangleSolidRight12:"",TriangleUp12:"",TriangleDown12:"",TriangleLeft12:"",TriangleRight12:"",ArrowUpRight8:"",ArrowDownRight8:"",DocumentSet:"",GoToDashboard:"",DelveAnalytics:"",ArrowUpRightMirrored8:"",ArrowDownRightMirrored8:"",CompanyDirectory:"",OpenEnrollment:"",CompanyDirectoryMirrored:"",OneDriveAdd:"",ProfileSearch:"",Header2:"",Header3:"",Header4:"",RingerSolid:"",Eyedropper:"",MarketDown:"",CalendarWorkWeek:"",SidePanel:"",GlobeFavorite:"",CaretTopLeftSolid8:"",CaretTopRightSolid8:"",ViewAll2:"",DocumentReply:"",PlayerSettings:"",ReceiptForward:"",ReceiptReply:"",ReceiptCheck:"",Fax:"",RecurringEvent:"",ReplyAlt:"",ReplyAllAlt:"",EditStyle:"",EditMail:"",Lifesaver:"",LifesaverLock:"",InboxCheck:"",FolderSearch:""}},t)}function Gp(e,t){void 0===e&&(e=""),xr({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-8"',src:"url('"+e+"fabric-icons-8-6fdf1528.woff') format('woff')"},icons:{CollapseMenu:"",ExpandMenu:"",Boards:"",SunAdd:"",SunQuestionMark:"",LandscapeOrientation:"",DocumentSearch:"",PublicCalendar:"",PublicContactCard:"",PublicEmail:"",PublicFolder:"",WordDocument:"",PowerPointDocument:"",ExcelDocument:"",GroupedList:"",ClassroomLogo:"",Sections:"",EditPhoto:"",Starburst:"",ShareiOS:"",AirTickets:"",PencilReply:"",Tiles2:"",SkypeCircleCheck:"",SkypeCircleClock:"",SkypeCircleMinus:"",SkypeMessage:"",ClosedCaption:"",ATPLogo:"",OfficeFormsLogoInverse:"",RecycleBin:"",EmptyRecycleBin:"",Hide2:"",Breadcrumb:"",BirthdayCake:"",TimeEntry:"",CRMProcesses:"",PageEdit:"",PageArrowRight:"",PageRemove:"",Database:"",DataManagementSettings:"",CRMServices:"",EditContact:"",ConnectContacts:"",AppIconDefaultAdd:"",AppIconDefaultList:"",ActivateOrders:"",DeactivateOrders:"",ProductCatalog:"",ScatterChart:"",AccountActivity:"",DocumentManagement:"",CRMReport:"",KnowledgeArticle:"",Relationship:"",HomeVerify:"",ZipFolder:"",SurveyQuestions:"",TextDocument:"",TextDocumentShared:"",PageCheckedOut:"",PageShared:"",SaveAndClose:"",Script:"",Archive:"",ActivityFeed:"",Compare:"",EventDate:"",ArrowUpRight:"",CaretRight:"",SetAction:"",ChatBot:"",CaretSolidLeft:"",CaretSolidDown:"",CaretSolidRight:"",CaretSolidUp:"",PowerAppsLogo:"",PowerApps2Logo:"",SearchIssue:"",SearchIssueMirrored:"",FabricAssetLibrary:"",FabricDataConnectionLibrary:"",FabricDocLibrary:"",FabricFormLibrary:"",FabricFormLibraryMirrored:"",FabricReportLibrary:"",FabricReportLibraryMirrored:"",FabricPublicFolder:"",FabricFolderSearch:"",FabricMovetoFolder:"",FabricUnsyncFolder:"",FabricSyncFolder:"",FabricOpenFolderHorizontal:"",FabricFolder:"",FabricFolderFill:"",FabricNewFolder:"",FabricPictureLibrary:"",PhotoVideoMedia:"",AddFavorite:""}},t)}function jp(e,t){void 0===e&&(e=""),xr({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-9"',src:"url('"+e+"fabric-icons-9-c6162b42.woff') format('woff')"},icons:{AddFavoriteFill:"",BufferTimeBefore:"",BufferTimeAfter:"",BufferTimeBoth:"",PublishContent:"",ClipboardList:"",ClipboardListMirrored:"",CannedChat:"",SkypeForBusinessLogo:"",TabCenter:"",PageCheckedin:"",PageList:"",ReadOutLoud:"",CaretBottomLeftSolid8:"",CaretBottomRightSolid8:"",FolderHorizontal:"",MicrosoftStaffhubLogo:"",GiftboxOpen:"",StatusCircleOuter:"",StatusCircleInner:"",StatusCircleRing:"",StatusTriangleOuter:"",StatusTriangleInner:"",StatusTriangleExclamation:"",StatusCircleExclamation:"",StatusCircleErrorX:"",StatusCircleInfo:"",StatusCircleBlock:"",StatusCircleBlock2:"",StatusCircleQuestionMark:"",StatusCircleSync:"",Toll:"",ExploreContentSingle:"",CollapseContent:"",CollapseContentSingle:"",InfoSolid:"",GroupList:"",ProgressRingDots:"",CaloriesAdd:"",BranchFork:"",MuteChat:"",AddHome:"",AddWork:"",MobileReport:"",ScaleVolume:"",HardDriveGroup:"",FastMode:"",ToggleLeft:"",ToggleRight:"",TriangleShape:"",RectangleShape:"",CubeShape:"",Trophy2:"",BucketColor:"",BucketColorFill:"",Taskboard:"",SingleColumn:"",DoubleColumn:"",TripleColumn:"",ColumnLeftTwoThirds:"",ColumnRightTwoThirds:"",AccessLogoFill:"",AnalyticsLogo:"",AnalyticsQuery:"",NewAnalyticsQuery:"",AnalyticsReport:"",WordLogo:"",WordLogoFill:"",ExcelLogo:"",ExcelLogoFill:"",OneNoteLogo:"",OneNoteLogoFill:"",OutlookLogo:"",OutlookLogoFill:"",PowerPointLogo:"",PowerPointLogoFill:"",PublisherLogo:"",PublisherLogoFill:"",ScheduleEventAction:"",FlameSolid:"",ServerProcesses:"",Server:"",SaveAll:"",LinkedInLogo:"",Decimals:"",SidePanelMirrored:"",ProtectRestrict:"",Blog:"",UnknownMirrored:"",PublicContactCardMirrored:"",GridViewSmall:"",GridViewMedium:"",GridViewLarge:"",Step:"",StepInsert:"",StepShared:"",StepSharedAdd:"",StepSharedInsert:"",ViewDashboard:"",ViewList:""}},t)}function qp(e,t){void 0===e&&(e=""),xr({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-10"',src:"url('"+e+"fabric-icons-10-c4ded8e4.woff') format('woff')"},icons:{ViewListGroup:"",ViewListTree:"",TriggerAuto:"",TriggerUser:"",PivotChart:"",StackedBarChart:"",StackedLineChart:"",BuildQueue:"",BuildQueueNew:"",UserFollowed:"",ContactLink:"",Stack:"",Bullseye:"",VennDiagram:"",FiveTileGrid:"",FocalPoint:"",Insert:"",RingerRemove:"",TeamsLogoInverse:"",TeamsLogo:"",TeamsLogoFill:"",SkypeForBusinessLogoFill:"",SharepointLogo:"",SharepointLogoFill:"",DelveLogo:"",DelveLogoFill:"",OfficeVideoLogo:"",OfficeVideoLogoFill:"",ExchangeLogo:"",ExchangeLogoFill:"",Signin:"",DocumentApproval:"",CloneToDesktop:"",InstallToDrive:"",Blur:"",Build:"",ProcessMetaTask:"",BranchFork2:"",BranchLocked:"",BranchCommit:"",BranchCompare:"",BranchMerge:"",BranchPullRequest:"",BranchSearch:"",BranchShelveset:"",RawSource:"",MergeDuplicate:"",RowsGroup:"",RowsChild:"",Deploy:"",Redeploy:"",ServerEnviroment:"",VisioDiagram:"",HighlightMappedShapes:"",TextCallout:"",IconSetsFlag:"",VisioLogo:"",VisioLogoFill:"",VisioDocument:"",TimelineProgress:"",TimelineDelivery:"",Backlog:"",TeamFavorite:"",TaskGroup:"",TaskGroupMirrored:"",ScopeTemplate:"",AssessmentGroupTemplate:"",NewTeamProject:"",CommentAdd:"",CommentNext:"",CommentPrevious:"",ShopServer:"",LocaleLanguage:"",QueryList:"",UserSync:"",UserPause:"",StreamingOff:"",ArrowTallUpLeft:"",ArrowTallUpRight:"",ArrowTallDownLeft:"",ArrowTallDownRight:"",FieldEmpty:"",FieldFilled:"",FieldChanged:"",FieldNotChanged:"",RingerOff:"",PlayResume:"",BulletedList2:"",BulletedList2Mirrored:"",ImageCrosshair:"",GitGraph:"",Repo:"",RepoSolid:"",FolderQuery:"",FolderList:"",FolderListMirrored:"",LocationOutline:"",POISolid:"",CalculatorNotEqualTo:"",BoxSubtractSolid:""}},t)}function Qp(e,t){void 0===e&&(e=""),xr({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-11"',src:"url('"+e+"fabric-icons-11-2a8393d6.woff') format('woff')"},icons:{BoxAdditionSolid:"",BoxMultiplySolid:"",BoxPlaySolid:"",BoxCheckmarkSolid:"",CirclePauseSolid:"",CirclePause:"",MSNVideosSolid:"",CircleStopSolid:"",CircleStop:"",NavigateBack:"",NavigateBackMirrored:"",NavigateForward:"",NavigateForwardMirrored:"",UnknownSolid:"",UnknownMirroredSolid:"",CircleAddition:"",CircleAdditionSolid:"",FilePDB:"",FileTemplate:"",FileSQL:"",FileJAVA:"",FileASPX:"",FileCSS:"",FileSass:"",FileLess:"",FileHTML:"",JavaScriptLanguage:"",CSharpLanguage:"",CSharp:"",VisualBasicLanguage:"",VB:"",CPlusPlusLanguage:"",CPlusPlus:"",FSharpLanguage:"",FSharp:"",TypeScriptLanguage:"",PythonLanguage:"",PY:"",CoffeeScript:"",MarkDownLanguage:"",FullWidth:"",FullWidthEdit:"",Plug:"",PlugSolid:"",PlugConnected:"",PlugDisconnected:"",UnlockSolid:"",Variable:"",Parameter:"",CommentUrgent:"",Storyboard:"",DiffInline:"",DiffSideBySide:"",ImageDiff:"",ImagePixel:"",FileBug:"",FileCode:"",FileComment:"",BusinessHoursSign:"",FileImage:"",FileSymlink:"",AutoFillTemplate:"",WorkItem:"",WorkItemBug:"",LogRemove:"",ColumnOptions:"",Packages:"",BuildIssue:"",AssessmentGroup:"",VariableGroup:"",FullHistory:"",Wheelchair:"",SingleColumnEdit:"",DoubleColumnEdit:"",TripleColumnEdit:"",ColumnLeftTwoThirdsEdit:"",ColumnRightTwoThirdsEdit:"",StreamLogo:"",PassiveAuthentication:"",AlertSolid:"",MegaphoneSolid:"",TaskSolid:"",ConfigurationSolid:"",BugSolid:"",CrownSolid:"",Trophy2Solid:"",QuickNoteSolid:"",ConstructionConeSolid:"",PageListSolid:"",PageListMirroredSolid:"",StarburstSolid:"",ReadingModeSolid:"",SadSolid:"",HealthSolid:"",ShieldSolid:"",GiftBoxSolid:"",ShoppingCartSolid:"",MailSolid:"",ChatSolid:"",RibbonSolid:""}},t)}function $p(e,t){void 0===e&&(e=""),xr({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-12"',src:"url('"+e+"fabric-icons-12-7e945a1e.woff') format('woff')"},icons:{FinancialSolid:"",FinancialMirroredSolid:"",HeadsetSolid:"",PermissionsSolid:"",ParkingSolid:"",ParkingMirroredSolid:"",DiamondSolid:"",AsteriskSolid:"",OfflineStorageSolid:"",BankSolid:"",DecisionSolid:"",Parachute:"",ParachuteSolid:"",FiltersSolid:"",ColorSolid:"",ReviewSolid:"",ReviewRequestSolid:"",ReviewRequestMirroredSolid:"",ReviewResponseSolid:"",FeedbackRequestSolid:"",FeedbackRequestMirroredSolid:"",FeedbackResponseSolid:"",WorkItemBar:"",WorkItemBarSolid:"",Separator:"",NavigateExternalInline:"",PlanView:"",TimelineMatrixView:"",EngineeringGroup:"",ProjectCollection:"",CaretBottomRightCenter8:"",CaretBottomLeftCenter8:"",CaretTopRightCenter8:"",CaretTopLeftCenter8:"",DonutChart:"",ChevronUnfold10:"",ChevronFold10:"",DoubleChevronDown8:"",DoubleChevronUp8:"",DoubleChevronLeft8:"",DoubleChevronRight8:"",ChevronDownEnd6:"",ChevronUpEnd6:"",ChevronLeftEnd6:"",ChevronRightEnd6:"",ContextMenu:"",AzureAPIManagement:"",AzureServiceEndpoint:"",VSTSLogo:"",VSTSAltLogo1:"",VSTSAltLogo2:"",FileTypeSolution:"",WordLogoInverse16:"",WordLogo16:"",WordLogoFill16:"",PowerPointLogoInverse16:"",PowerPointLogo16:"",PowerPointLogoFill16:"",ExcelLogoInverse16:"",ExcelLogo16:"",ExcelLogoFill16:"",OneNoteLogoInverse16:"",OneNoteLogo16:"",OneNoteLogoFill16:"",OutlookLogoInverse16:"",OutlookLogo16:"",OutlookLogoFill16:"",PublisherLogoInverse16:"",PublisherLogo16:"",PublisherLogoFill16:"",VisioLogoInverse16:"",VisioLogo16:"",VisioLogoFill16:"",TestBeaker:"",TestBeakerSolid:"",TestExploreSolid:"",TestAutoSolid:"",TestUserSolid:"",TestImpactSolid:"",TestPlan:"",TestStep:"",TestParameter:"",TestSuite:"",TestCase:"",Sprint:"",SignOut:"",TriggerApproval:"",Rocket:"",AzureKeyVault:"",Onboarding:"",Transition:"",LikeSolid:"",DislikeSolid:"",CRMCustomerInsightsApp:"",EditCreate:"",PlayReverseResume:"",PlayReverse:"",SearchData:"",UnSetColor:"",DeclineCall:""}},t)}function Zp(e,t){void 0===e&&(e=""),xr({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-13"',src:"url('"+e+"fabric-icons-13-c3989a02.woff') format('woff')"},icons:{RectangularClipping:"",TeamsLogo16:"",TeamsLogoFill16:"",Spacer:"",SkypeLogo16:"",SkypeForBusinessLogo16:"",SkypeForBusinessLogoFill16:"",FilterSolid:"",MailUndelivered:"",MailTentative:"",MailTentativeMirrored:"",MailReminder:"",ReceiptUndelivered:"",ReceiptTentative:"",ReceiptTentativeMirrored:"",Inbox:"",IRMReply:"",IRMReplyMirrored:"",IRMForward:"",IRMForwardMirrored:"",VoicemailIRM:"",EventAccepted:"",EventTentative:"",EventTentativeMirrored:"",EventDeclined:"",IDBadge:"",BackgroundColor:"",OfficeFormsLogoInverse16:"",OfficeFormsLogo:"",OfficeFormsLogoFill:"",OfficeFormsLogo16:"",OfficeFormsLogoFill16:"",OfficeFormsLogoInverse24:"",OfficeFormsLogo24:"",OfficeFormsLogoFill24:"",PageLock:"",NotExecuted:"",NotImpactedSolid:"",FieldReadOnly:"",FieldRequired:"",BacklogBoard:"",ExternalBuild:"",ExternalTFVC:"",ExternalXAML:"",IssueSolid:"",DefectSolid:"",LadybugSolid:"",NugetLogo:"",TFVCLogo:"",ProjectLogo32:"",ProjectLogoFill32:"",ProjectLogo16:"",ProjectLogoFill16:"",SwayLogo32:"",SwayLogoFill32:"",SwayLogo16:"",SwayLogoFill16:"",ClassNotebookLogo32:"",ClassNotebookLogoFill32:"",ClassNotebookLogo16:"",ClassNotebookLogoFill16:"",ClassNotebookLogoInverse32:"",ClassNotebookLogoInverse16:"",StaffNotebookLogo32:"",StaffNotebookLogoFill32:"",StaffNotebookLogo16:"",StaffNotebookLogoFill16:"",StaffNotebookLogoInverted32:"",StaffNotebookLogoInverted16:"",KaizalaLogo:"",TaskLogo:"",ProtectionCenterLogo32:"",GallatinLogo:"",Globe2:"",Guitar:"",Breakfast:"",Brunch:"",BeerMug:"",Vacation:"",Teeth:"",Taxi:"",Chopsticks:"",SyncOccurence:"",UnsyncOccurence:"",GIF:"",PrimaryCalendar:"",SearchCalendar:"",VideoOff:"",MicrosoftFlowLogo:"",BusinessCenterLogo:"",ToDoLogoBottom:"",ToDoLogoTop:"",EditSolid12:"",EditSolidMirrored12:"",UneditableSolid12:"",UneditableSolidMirrored12:"",UneditableMirrored:"",AdminALogo32:"",AdminALogoFill32:"",ToDoLogoInverse:""}},t)}function Xp(e,t){void 0===e&&(e=""),xr({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-14"',src:"url('"+e+"fabric-icons-14-5cf58db8.woff') format('woff')"},icons:{Snooze:"",WaffleOffice365:"",ImageSearch:"",NewsSearch:"",VideoSearch:"",R:"",FontColorA:"",FontColorSwatch:"",LightWeight:"",NormalWeight:"",SemiboldWeight:"",GroupObject:"",UngroupObject:"",AlignHorizontalLeft:"",AlignHorizontalCenter:"",AlignHorizontalRight:"",AlignVerticalTop:"",AlignVerticalCenter:"",AlignVerticalBottom:"",HorizontalDistributeCenter:"",VerticalDistributeCenter:"",Ellipse:"",Line:"",Octagon:"",Hexagon:"",Pentagon:"",RightTriangle:"",HalfCircle:"",QuarterCircle:"",ThreeQuarterCircle:"","6PointStar":"","12PointStar":"",ArrangeBringToFront:"",ArrangeSendToBack:"",ArrangeSendBackward:"",ArrangeBringForward:"",BorderDash:"",BorderDot:"",LineStyle:"",LineThickness:"",WindowEdit:"",HintText:"",MediaAdd:"",AnchorLock:"",AutoHeight:"",ChartSeries:"",ChartXAngle:"",ChartYAngle:"",Combobox:"",LineSpacing:"",Padding:"",PaddingTop:"",PaddingBottom:"",PaddingLeft:"",PaddingRight:"",NavigationFlipper:"",AlignJustify:"",TextOverflow:"",VisualsFolder:"",VisualsStore:"",PictureCenter:"",PictureFill:"",PicturePosition:"",PictureStretch:"",PictureTile:"",Slider:"",SliderHandleSize:"",DefaultRatio:"",NumberSequence:"",GUID:"",ReportAdd:"",DashboardAdd:"",MapPinSolid:"",WebPublish:"",PieSingleSolid:"",BlockedSolid:"",DrillDown:"",DrillDownSolid:"",DrillExpand:"",DrillShow:"",SpecialEvent:"",OneDriveFolder16:"",FunctionalManagerDashboard:"",BIDashboard:"",CodeEdit:"",RenewalCurrent:"",RenewalFuture:"",SplitObject:"",BulkUpload:"",DownloadDocument:"",GreetingCard:"",Flower:"",WaitlistConfirm:"",WaitlistConfirmMirrored:"",LaptopSecure:"",DragObject:"",EntryView:"",EntryDecline:"",ContactCardSettings:"",ContactCardSettingsMirrored:""}},t)}function Yp(e,t){void 0===e&&(e=""),xr({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-15"',src:"url('"+e+"fabric-icons-15-3807251b.woff') format('woff')"},icons:{CalendarSettings:"",CalendarSettingsMirrored:"",HardDriveLock:"",HardDriveUnlock:"",AccountManagement:"",ReportWarning:"",TransitionPop:"",TransitionPush:"",TransitionEffect:"",LookupEntities:"",ExploreData:"",AddBookmark:"",SearchBookmark:"",DrillThrough:"",MasterDatabase:"",CertifiedDatabase:"",MaximumValue:"",MinimumValue:"",VisualStudioIDELogo32:"",PasteAsText:"",PasteAsCode:"",BrowserTab:"",BrowserTabScreenshot:"",DesktopScreenshot:"",FileYML:"",ClipboardSolid:"",FabricUserFolder:"",FabricNetworkFolder:"",BullseyeTarget:"",AnalyticsView:"",Video360Generic:"",Untag:"",Leave:"",Trending12:"",Blocked12:"",Warning12:"",CheckedOutByOther12:"",CheckedOutByYou12:"",CircleShapeSolid:"",SquareShapeSolid:"",TriangleShapeSolid:"",DropShapeSolid:"",RectangleShapeSolid:"",ZoomToFit:"",InsertColumnsLeft:"",InsertColumnsRight:"",InsertRowsAbove:"",InsertRowsBelow:"",DeleteColumns:"",DeleteRows:"",DeleteRowsMirrored:"",DeleteTable:"",AccountBrowser:"",VersionControlPush:"",StackedColumnChart2:"",TripleColumnWide:"",QuadColumn:"",WhiteBoardApp16:"",WhiteBoardApp32:"",PinnedSolid:"",InsertSignatureLine:"",ArrangeByFrom:"",Phishing:"",CreateMailRule:"",PublishCourse:"",DictionaryRemove:"",UserRemove:"",UserEvent:"",Encryption:"",PasswordField:"",OpenInNewTab:"",Hide3:"",VerifiedBrandSolid:"",MarkAsProtected:"",AuthenticatorApp:"",WebTemplate:"",DefenderTVM:"",MedalSolid:"",D365TalentLearn:"",D365TalentInsight:"",D365TalentHRCore:"",BacklogList:"",ButtonControl:"",TableGroup:"",MountainClimbing:"",TagUnknown:"",TagUnknownMirror:"",TagUnknown12:"",TagUnknown12Mirror:"",Link12:"",Presentation:"",Presentation12:"",Lock12:"",BuildDefinition:"",ReleaseDefinition:"",SaveTemplate:"",UserGauge:"",BlockedSiteSolid12:"",TagSolid:"",OfficeChat:""}},t)}function Jp(e,t){void 0===e&&(e=""),xr({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-16"',src:"url('"+e+"fabric-icons-16-9cf93f3b.woff') format('woff')"},icons:{OfficeChatSolid:"",MailSchedule:"",WarningSolid:"",Blocked2Solid:"",SkypeCircleArrow:"",SkypeArrow:"",SyncStatus:"",SyncStatusSolid:"",ProjectDocument:"",ToDoLogoOutline:"",VisioOnlineLogoFill32:"",VisioOnlineLogo32:"",VisioOnlineLogoCloud32:"",VisioDiagramSync:"",Event12:"",EventDateMissed12:"",UserOptional:"",ResponsesMenu:"",DoubleDownArrow:"",DistributeDown:"",BookmarkReport:"",FilterSettings:"",GripperDotsVertical:"",MailAttached:"",AddIn:"",LinkedDatabase:"",TableLink:"",PromotedDatabase:"",BarChartVerticalFilter:"",BarChartVerticalFilterSolid:"",MicOff2:"",MicrosoftTranslatorLogo:"",ShowTimeAs:"",FileRequest:"",WorkItemAlert:"",PowerBILogo16:"",PowerBILogoBackplate16:"",BulletedListText:"",BulletedListBullet:"",BulletedListTextMirrored:"",BulletedListBulletMirrored:"",NumberedListText:"",NumberedListNumber:"",NumberedListTextMirrored:"",NumberedListNumberMirrored:"",RemoveLinkChain:"",RemoveLinkX:"",FabricTextHighlight:"",ClearFormattingA:"",ClearFormattingEraser:"",Photo2Fill:"",IncreaseIndentText:"",IncreaseIndentArrow:"",DecreaseIndentText:"",DecreaseIndentArrow:"",IncreaseIndentTextMirrored:"",IncreaseIndentArrowMirrored:"",DecreaseIndentTextMirrored:"",DecreaseIndentArrowMirrored:"",CheckListText:"",CheckListCheck:"",CheckListTextMirrored:"",CheckListCheckMirrored:"",NumberSymbol:"",Coupon:"",VerifiedBrand:"",ReleaseGate:"",ReleaseGateCheck:"",ReleaseGateError:"",M365InvoicingLogo:"",RemoveFromShoppingList:"",ShieldAlert:"",FabricTextHighlightComposite:"",Dataflows:"",GenericScanFilled:"",DiagnosticDataBarTooltip:"",SaveToMobile:"",Orientation2:"",ScreenCast:"",ShowGrid:"",SnapToGrid:"",ContactList:"",NewMail:"",EyeShadow:"",FabricFolderConfirm:"",InformationBarriers:"",CommentActive:"",ColumnVerticalSectionEdit:"",WavingHand:"",ShakeDevice:"",SmartGlassRemote:"",Rotate90Clockwise:"",Rotate90CounterClockwise:"",CampaignTemplate:"",ChartTemplate:"",PageListFilter:"",SecondaryNav:"",ColumnVerticalSection:"",SkypeCircleSlash:"",SkypeSlash:""}},t)}function ef(e,t){void 0===e&&(e=""),xr({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-17"',src:"url('"+e+"fabric-icons-17-0c4ed701.woff') format('woff')"},icons:{CustomizeToolbar:"",DuplicateRow:"",RemoveFromTrash:"",MailOptions:"",Childof:"",Footer:"",Header:"",BarChartVerticalFill:"",StackedColumnChart2Fill:"",PlainText:"",AccessibiltyChecker:"",DatabaseSync:"",ReservationOrders:"",TabOneColumn:"",TabTwoColumn:"",TabThreeColumn:"",BulletedTreeList:"",MicrosoftTranslatorLogoGreen:"",MicrosoftTranslatorLogoBlue:"",InternalInvestigation:"",AddReaction:"",ContactHeart:"",VisuallyImpaired:"",EventToDoLogo:"",Variable2:"",ModelingView:"",DisconnectVirtualMachine:"",ReportLock:"",Uneditable2:"",Uneditable2Mirrored:"",BarChartVerticalEdit:"",GlobalNavButtonActive:"",PollResults:"",Rerun:"",QandA:"",QandAMirror:"",BookAnswers:"",AlertSettings:"",TrimStart:"",TrimEnd:"",TableComputed:"",DecreaseIndentLegacy:"",IncreaseIndentLegacy:"",SizeLegacy:""}},t)}var tf=function(){wr("trash","delete"),wr("onedrive","onedrivelogo"),wr("alertsolid12","eventdatemissed12"),wr("sixpointstar","6pointstar"),wr("twelvepointstar","12pointstar"),wr("toggleon","toggleleft"),wr("toggleoff","toggleright")};Ar("@uifabric/icons","7.5.16");var nf,of;void 0===nf&&(nf="https://spoprod-a.akamaihd.net/files/fabric/assets/icons/"),[Lp,Bp,Op,Hp,zp,Wp,Up,Vp,Kp,Gp,jp,qp,Qp,$p,Zp,Xp,Yp,Jp,ef].forEach((function(e){return e(nf,of)})),tf();var rf=document.getElementById("root");(0,n.render)(e.createElement((function(){return e.createElement(ve,{store:qe},e.createElement(oe,null,e.createElement(Pp,null),e.createElement(J,null,e.createElement(q,{exact:!0,path:"/",component:Jd}),e.createElement(q,{path:"/detail/:id",component:ep}),e.createElement(q,{path:"/contact",component:Mp}),e.createElement(q,{path:"/about",component:Rp}),e.createElement(q,{path:"/clients",component:Fp}),e.createElement(q,{path:"/client-detail/:id",component:rp}),e.createElement(q,{path:"/client-create",component:Ap}))))}),null),rf)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy93ZWJwYWNrL3J1bnRpbWUvY3JlYXRlIGZha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvcG9ueWZpbGwuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvd2VicGFjay9ydW50aW1lL2hhcm1vbnkgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvZXNtL3Jlc29sdmUtcGF0aG5hbWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvdGlueS1pbnZhcmlhbnQvZGlzdC90aW55LWludmFyaWFudC5lc20uanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lc20vaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9taW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0L2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzbS9yZWFjdC1yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lc20vcmVhY3Qtcm91dGVyLWRvbS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmF0Y2guanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9yZWR1eC5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VSZWR1eENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU3RvcmUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlRGlzcGF0Y2guanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvcmVkdXgtdGh1bmsvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9zcmMvc3RvcmUvdmVoaWNsZS92ZWhpY2xlUmVkdWNlci50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9zcmMvc3RvcmUvY2xpZW50L2NsaWVudFZpZXdSZWR1Y2VyLnRzeCIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL3NyYy9zdG9yZS9jb25maWd1cmVTdG9yZS50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9zcmMvc3RvcmUvcm9vdHJlZHVjZXIudHN4Iiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvbWVyZ2Utc3R5bGVzL2xpYi9TdHlsZXNoZWV0LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9tZXJnZS1zdHlsZXMvbGliL1N0eWxlT3B0aW9uc1N0YXRlLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9tZXJnZS1zdHlsZXMvbGliL2V4dHJhY3RTdHlsZVBhcnRzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9tZXJnZS1zdHlsZXMvbGliL3RyYW5zZm9ybXMva2ViYWJSdWxlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvbWVyZ2Utc3R5bGVzL2xpYi9nZXRWZW5kb3JTZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvbWVyZ2Utc3R5bGVzL2xpYi90cmFuc2Zvcm1zL3ByZWZpeFJ1bGVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9tZXJnZS1zdHlsZXMvbGliL3RyYW5zZm9ybXMvcHJvdmlkZVVuaXRzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9tZXJnZS1zdHlsZXMvbGliL3RyYW5zZm9ybXMvcnRsaWZ5UnVsZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL21lcmdlLXN0eWxlcy9saWIvc3R5bGVUb0NsYXNzTmFtZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvbWVyZ2Utc3R5bGVzL2xpYi9tZXJnZVN0eWxlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvdXRpbGl0aWVzL2xpYi9tZW1vaXplLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy91dGlsaXRpZXMvbGliL0tleUNvZGVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy91dGlsaXRpZXMvbGliL2RvbS9zZXRTU1IuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3V0aWxpdGllcy9saWIvZG9tL2dldERvY3VtZW50LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy91dGlsaXRpZXMvbGliL2RvbS9nZXRXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3V0aWxpdGllcy9saWIvc2Vzc2lvblN0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3V0aWxpdGllcy9saWIvcnRsLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9mb3VuZGF0aW9uL2xpYi91dGlsaXRpZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL2ZvdW5kYXRpb24vbGliL3Nsb3RzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9tZXJnZS1zdHlsZXMvbGliL2tleWZyYW1lcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdGhlbWUvbGliL21vdGlvbi9BbmltYXRpb25TdHlsZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3N0eWxpbmcvbGliL2NsYXNzTmFtZXMvQW5pbWF0aW9uQ2xhc3NOYW1lcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdGhlbWUvbGliL2ZvbnRzL0ZsdWVudEZvbnRzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9zdHlsaW5nL2xpYi91dGlsaXRpZXMvYnVpbGRDbGFzc01hcC5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvc3R5bGluZy9saWIvc3R5bGVzL0NvbW1vblN0eWxlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvdXRpbGl0aWVzL2xpYi9zZXRGb2N1c1Zpc2liaWxpdHkuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3N0eWxpbmcvbGliL3N0eWxlcy96SW5kZXhlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvc3R5bGluZy9saWIvc3R5bGVzL2dldEZvY3VzU3R5bGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3N0eWxpbmcvbGliL3N0eWxlcy9oaWRkZW5Db250ZW50U3R5bGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3N0eWxpbmcvbGliL3N0eWxlcy9nZXRHbG9iYWxDbGFzc05hbWVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy91dGlsaXRpZXMvbGliL0dsb2JhbFNldHRpbmdzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy91dGlsaXRpZXMvbGliL2N1c3RvbWl6YXRpb25zL0N1c3RvbWl6YXRpb25zLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvbG9hZC10aGVtZWQtc3R5bGVzL2xpYi1lczYvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3RoZW1lL2xpYi9jb2xvcnMvRGVmYXVsdFBhbGV0dGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3RoZW1lL2xpYi9lZmZlY3RzL0ZsdWVudERlcHRocy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdGhlbWUvbGliL2VmZmVjdHMvRGVmYXVsdEVmZmVjdHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL21lcmdlLXN0eWxlcy9saWIvZm9udEZhY2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3RoZW1lL2xpYi9mb250cy9jcmVhdGVGb250U3R5bGVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy91dGlsaXRpZXMvbGliL2xhbmd1YWdlLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS90aGVtZS9saWIvZm9udHMvRGVmYXVsdEZvbnRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3V0aWxpdGllcy9saWIvbG9jYWxTdG9yYWdlLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy91dGlsaXRpZXMvbGliL21lcmdlLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS90aGVtZS9saWIvdXRpbGl0aWVzL21ha2VTZW1hbnRpY0NvbG9ycy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdGhlbWUvbGliL3NwYWNpbmcvRGVmYXVsdFNwYWNpbmcuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3RoZW1lL2xpYi9jcmVhdGVUaGVtZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdGhlbWUvbGliL21lcmdlVGhlbWVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9zdHlsaW5nL2xpYi9zdHlsZXMvdGhlbWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3N0eWxpbmcvbGliL3N0eWxlcy9HZW5lcmFsU3R5bGVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9zdHlsaW5nL2xpYi9zdHlsZXMvZ2V0UGxhY2Vob2xkZXJTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3V0aWxpdGllcy9saWIvd2Fybi93YXJuLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9zdHlsaW5nL2xpYi91dGlsaXRpZXMvaWNvbnMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL21lcmdlLXN0eWxlcy9saWIvY29uY2F0U3R5bGVTZXRzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9tZXJnZS1zdHlsZXMvbGliL2NvbmNhdFN0eWxlU2V0c1dpdGhQcm9wcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvbWVyZ2Utc3R5bGVzL2xpYi9tZXJnZVN0eWxlU2V0cy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvc2V0LXZlcnNpb24vbGliL3NldFZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3NldC12ZXJzaW9uL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvc3R5bGluZy9saWIvdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvc3R5bGluZy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3V0aWxpdGllcy9saWIvY3VzdG9taXphdGlvbnMvQ3VzdG9taXplckNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL2ZvdW5kYXRpb24vbGliL2NyZWF0ZUNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvdXRpbGl0aWVzL2xpYi9wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvU3RhY2svU3RhY2tVdGlscy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL1N0YWNrL1N0YWNrLnN0eWxlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL1N0YWNrL1N0YWNrSXRlbS9TdGFja0l0ZW0uc3R5bGVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvU3RhY2svU3RhY2tJdGVtL1N0YWNrSXRlbS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL1N0YWNrL1N0YWNrLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy91dGlsaXRpZXMvbGliL2N1c3RvbWl6YXRpb25zL3VzZUN1c3RvbWl6YXRpb25TZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvdXRpbGl0aWVzL2xpYi9zdHlsZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3V0aWxpdGllcy9saWIvY2xhc3NOYW1lc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy91dGlsaXRpZXMvbGliL2FwcGVuZEZ1bmN0aW9uLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy91dGlsaXRpZXMvbGliL2luaXRpYWxpemVDb21wb25lbnRSZWYuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3V0aWxpdGllcy9saWIvZXh0ZW5kQ29tcG9uZW50LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL3V0aWxpdGllcy9rZXl0aXBzL0tleXRpcENvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvcmVhY3QtaG9va3MvbGliL3VzZUNvbnN0LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy91dGlsaXRpZXMvbGliL2FyaWEuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3V0aWxpdGllcy9saWIvb2JqZWN0LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy91dGlsaXRpZXMvbGliL0V2ZW50R3JvdXAuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3V0aWxpdGllcy9saWIvZ2V0SWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvdXRpbGl0aWVzL2tleXRpcHMvS2V5dGlwTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvdXRpbGl0aWVzL2xpYi9hcnJheS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi91dGlsaXRpZXMva2V5dGlwcy9LZXl0aXBVdGlscy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0tleXRpcERhdGEvdXNlS2V5dGlwRGF0YS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvcmVhY3QtaG9va3MvbGliL3VzZVByZXZpb3VzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvS2V5dGlwRGF0YS9LZXl0aXBEYXRhLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy91dGlsaXRpZXMvbGliL2tleWJvYXJkLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvTGluay9MaW5rLmJhc2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9MaW5rL0xpbmsuc3R5bGVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvTGluay9MaW5rLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy91dGlsaXRpZXMvbGliL3VzZUZvY3VzUmVjdHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3V0aWxpdGllcy9saWIvQXN5bmMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9EZXRhaWxzTGlzdC9EZXRhaWxzTGlzdC50eXBlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvZG9tLXV0aWxpdGllcy9saWIvZ2V0UGFyZW50LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9kb20tdXRpbGl0aWVzL2xpYi9nZXRWaXJ0dWFsUGFyZW50LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9kb20tdXRpbGl0aWVzL2xpYi9pc1ZpcnR1YWxFbGVtZW50LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9kb20tdXRpbGl0aWVzL2xpYi9lbGVtZW50Q29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3V0aWxpdGllcy9saWIvY3NzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy91dGlsaXRpZXMvbGliL2NyZWF0ZU1lcmdlZFJlZi5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvZG9tLXV0aWxpdGllcy9saWIvZmluZEVsZW1lbnRSZWN1cnNpdmUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3V0aWxpdGllcy9saWIvZm9jdXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL2RvbS11dGlsaXRpZXMvbGliL2VsZW1lbnRDb250YWluc0F0dHJpYnV0ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvdXRpbGl0aWVzL2xpYi9zY3JvbGwuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3V0aWxpdGllcy9saWIvZG9tL3JhaXNlQ2xpY2suanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL2RvbS11dGlsaXRpZXMvbGliL3NldFBvcnRhbEF0dHJpYnV0ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvZG9tLXV0aWxpdGllcy9saWIvcG9ydGFsQ29udGFpbnNFbGVtZW50LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC1mb2N1cy9saWIvY29tcG9uZW50cy9Gb2N1c1pvbmUvRm9jdXNab25lLnR5cGVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC1mb2N1cy9saWIvY29tcG9uZW50cy9Gb2N1c1pvbmUvRm9jdXNab25lLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvSWNvbi9JY29uLnR5cGVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvSW1hZ2UvSW1hZ2UudHlwZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9JY29uL0ljb24uc3R5bGVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvSWNvbi9Gb250SWNvbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0ltYWdlL0ltYWdlLmJhc2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9JbWFnZS9JbWFnZS5zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9JbWFnZS9JbWFnZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0ljb24vSWNvbi5iYXNlLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvSWNvbi9JY29uLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy91dGlsaXRpZXMvbGliL2N1c3RvbWl6YXRpb25zL21lcmdlU2V0dGluZ3MuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3V0aWxpdGllcy9saWIvY3VzdG9taXphdGlvbnMvQ3VzdG9taXplci5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvdXRpbGl0aWVzL2xpYi9jdXN0b21pemF0aW9ucy9tZXJnZUN1c3RvbWl6YXRpb25zLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvRmFicmljL0ZhYnJpYy5iYXNlLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvRmFicmljL0ZhYnJpYy5zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9GYWJyaWMvRmFicmljLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9kb20tdXRpbGl0aWVzL2xpYi9zZXRWaXJ0dWFsUGFyZW50LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy91dGlsaXRpZXMvbGliL2hvaXN0U3RhdGljcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvdXRpbGl0aWVzL2xpYi9jdXN0b21pemF0aW9ucy9jdXN0b21pemFibGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9MYXllci9MYXllci5ub3RpZmljYXRpb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9MYXllci9MYXllci5iYXNlLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvTGF5ZXIvTGF5ZXIuc3R5bGVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvR3JvdXBlZExpc3QvR3JvdXBlZExpc3QudHlwZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9MYXllci9MYXllci5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0dyb3VwZWRMaXN0L0dyb3VwU3BhY2VyLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvQ2hlY2svQ2hlY2suYmFzZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0NoZWNrL0NoZWNrLnN0eWxlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0NoZWNrL0NoZWNrLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvRGV0YWlsc0xpc3QvRGV0YWlsc1Jvdy5zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9EZXRhaWxzTGlzdC9EZXRhaWxzSGVhZGVyLnN0eWxlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0RldGFpbHNMaXN0L0RldGFpbHNSb3dDaGVjay5zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3V0aWxpdGllcy9saWIvcmVuZGVyRnVuY3Rpb24vY29tcG9zZVJlbmRlckZ1bmN0aW9uLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvRGV0YWlsc0xpc3QvRGV0YWlsc1Jvd0NoZWNrLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy91dGlsaXRpZXMvbGliL3NlbGVjdGlvbi9TZWxlY3Rpb24udHlwZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvdXRpbGl0aWVzL2RyYWdkcm9wL0RyYWdEcm9wSGVscGVyLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvRGV0YWlsc0xpc3QvRGV0YWlsc0hlYWRlci50eXBlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0RldGFpbHNMaXN0L0RldGFpbHNDb2x1bW4uYmFzZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0RldGFpbHNMaXN0L0RldGFpbHNDb2x1bW4uc3R5bGVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvRGV0YWlsc0xpc3QvRGV0YWlsc0NvbHVtbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0RldGFpbHNMaXN0L0RldGFpbHNIZWFkZXIuYmFzZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0RldGFpbHNMaXN0L0RldGFpbHNIZWFkZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9EZXRhaWxzTGlzdC9EZXRhaWxzUm93RmllbGRzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvRGV0YWlsc0xpc3QvRGV0YWlsc1Jvdy5iYXNlLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvRGV0YWlsc0xpc3QvRGV0YWlsc1Jvdy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi91dGlsaXRpZXMvc2VsZWN0aW9uL1NlbGVjdGlvblpvbmUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3V0aWxpdGllcy9saWIvc2VsZWN0aW9uL1NlbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0dyb3VwZWRMaXN0L0dyb3VwZWRMaXN0LnN0eWxlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL1NwaW5uZXIvU3Bpbm5lci50eXBlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0dyb3VwZWRMaXN0L0dyb3VwSGVhZGVyLnN0eWxlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvdXRpbGl0aWVzL2xpYi9EZWxheWVkUmVuZGVyLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvU3Bpbm5lci9TcGlubmVyLmJhc2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9TcGlubmVyL1NwaW5uZXIuc3R5bGVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvU3Bpbm5lci9TcGlubmVyLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvR3JvdXBlZExpc3QvR3JvdXBIZWFkZXIuYmFzZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0dyb3VwZWRMaXN0L0dyb3VwSGVhZGVyLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvR3JvdXBlZExpc3QvR3JvdXBTaG93QWxsLnN0eWxlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0dyb3VwZWRMaXN0L0dyb3VwU2hvd0FsbC5iYXNlLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvR3JvdXBlZExpc3QvR3JvdXBTaG93QWxsLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvR3JvdXBlZExpc3QvR3JvdXBGb290ZXIuc3R5bGVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvR3JvdXBlZExpc3QvR3JvdXBGb290ZXIuYmFzZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0dyb3VwZWRMaXN0L0dyb3VwRm9vdGVyLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvTGlzdC9MaXN0LnR5cGVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvTGlzdC9MaXN0LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvR3JvdXBlZExpc3QvR3JvdXBlZExpc3RTZWN0aW9uLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvR3JvdXBlZExpc3QvR3JvdXBlZExpc3QuYmFzZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0dyb3VwZWRMaXN0L0dyb3VwZWRMaXN0LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy91dGlsaXRpZXMvbGliL2hvaXN0LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL3V0aWxpdGllcy9kZWNvcmF0b3JzL0Jhc2VEZWNvcmF0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3V0aWxpdGllcy9saWIvZG9tL2dldFJlY3QuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvdXRpbGl0aWVzL2RlY29yYXRvcnMvd2l0aFZpZXdwb3J0LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL3V0aWxpdGllcy9ncm91cGVkTGlzdC9Hcm91cGVkTGlzdFV0aWxpdHkuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9EZXRhaWxzTGlzdC9EZXRhaWxzTGlzdC5iYXNlLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvRGV0YWlsc0xpc3QvRGV0YWlsc0xpc3Quc3R5bGVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvRGV0YWlsc0xpc3QvRGV0YWlsc0xpc3QuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9zcmMvc3RvcmUvdmVoaWNsZS9hY3Rpb25zLnRzeCIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0xhYmVsL0xhYmVsLmJhc2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9MYWJlbC9MYWJlbC5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0xhYmVsL0xhYmVsLnN0eWxlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvdXRpbGl0aWVzL2xpYi9pZTExRGV0ZWN0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9UZXh0RmllbGQvVGV4dEZpZWxkLmJhc2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3V0aWxpdGllcy9saWIvY29udHJvbGxlZC5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL1RleHRGaWVsZC9UZXh0RmllbGQuc3R5bGVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvVGV4dEZpZWxkL1RleHRGaWVsZC5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvdXRpbGl0aWVzL2xpYi9CYXNlQ29tcG9uZW50LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvSWNvbi9JbWFnZUljb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9Db250ZXh0dWFsTWVudS9Db250ZXh0dWFsTWVudS50eXBlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvdXRpbGl0aWVzL2xpYi9vc0RldGVjdG9yLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbW1vbi9EaXJlY3Rpb25hbEhpbnQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3V0aWxpdGllcy9saWIvbW9iaWxlRGV0ZWN0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvdXRpbGl0aWVzL2NvbnRleHR1YWxNZW51L2NvbnRleHR1YWxNZW51VXRpbGl0eS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3Qtd2luZG93LXByb3ZpZGVyL2xpYi9XaW5kb3dQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi91dGlsaXRpZXMvZGVjb3JhdG9ycy93aXRoUmVzcG9uc2l2ZU1vZGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvdXRpbGl0aWVzL3Bvc2l0aW9uaW5nL3Bvc2l0aW9uaW5nLnR5cGVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy91dGlsaXRpZXMvbGliL2RvbS9vbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvdXRpbGl0aWVzL2xpYi9SZWN0YW5nbGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvdXRpbGl0aWVzL3Bvc2l0aW9uaW5nL3Bvc2l0aW9uaW5nLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvUG9wdXAvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9DYWxsb3V0L0NhbGxvdXRDb250ZW50LmJhc2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9DYWxsb3V0L0NhbGxvdXRDb250ZW50LnN0eWxlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0NhbGxvdXQvQ2FsbG91dENvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9DYWxsb3V0L0NhbGxvdXQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9Db250ZXh0dWFsTWVudS9Db250ZXh0dWFsTWVudUl0ZW0uYmFzZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0RpdmlkZXIvVmVydGljYWxEaXZpZGVyLmNsYXNzTmFtZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9Db250ZXh0dWFsTWVudS9Db250ZXh0dWFsTWVudS5jbnN0eWxlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0NvbnRleHR1YWxNZW51L0NvbnRleHR1YWxNZW51LmNsYXNzTmFtZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9Db250ZXh0dWFsTWVudS9Db250ZXh0dWFsTWVudUl0ZW0uanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9Db250ZXh0dWFsTWVudS9Db250ZXh0dWFsTWVudUl0ZW1XcmFwcGVyL0NvbnRleHR1YWxNZW51SXRlbVdyYXBwZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9Db250ZXh0dWFsTWVudS9Db250ZXh0dWFsTWVudUl0ZW1XcmFwcGVyL0NvbnRleHR1YWxNZW51QW5jaG9yLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvQ29udGV4dHVhbE1lbnUvQ29udGV4dHVhbE1lbnVJdGVtV3JhcHBlci9Db250ZXh0dWFsTWVudUJ1dHRvbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0RpdmlkZXIvVmVydGljYWxEaXZpZGVyLmJhc2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9EaXZpZGVyL1ZlcnRpY2FsRGl2aWRlci5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0RpdmlkZXIvVmVydGljYWxEaXZpZGVyLnN0eWxlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0NvbnRleHR1YWxNZW51L0NvbnRleHR1YWxNZW51SXRlbVdyYXBwZXIvQ29udGV4dHVhbE1lbnVTcGxpdEJ1dHRvbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0NvbnRleHR1YWxNZW51L0NvbnRleHR1YWxNZW51LmJhc2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9Db250ZXh0dWFsTWVudS9Db250ZXh0dWFsTWVudS5zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9Db250ZXh0dWFsTWVudS9Db250ZXh0dWFsTWVudS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0J1dHRvbi9CYXNlQnV0dG9uLmNsYXNzTmFtZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9CdXR0b24vU3BsaXRCdXR0b24vU3BsaXRCdXR0b24uY2xhc3NOYW1lcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0J1dHRvbi9CYXNlQnV0dG9uLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvQnV0dG9uL0Jhc2VCdXR0b24uc3R5bGVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvQnV0dG9uL1NwbGl0QnV0dG9uL1NwbGl0QnV0dG9uLnN0eWxlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0J1dHRvbi9EZWZhdWx0QnV0dG9uL0RlZmF1bHRCdXR0b24uc3R5bGVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvQnV0dG9uL0J1dHRvblRoZW1lcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0J1dHRvbi9EZWZhdWx0QnV0dG9uL0RlZmF1bHRCdXR0b24uanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9CdXR0b24vUHJpbWFyeUJ1dHRvbi9QcmltYXJ5QnV0dG9uLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vc3JjL2NvbXBvbmVudHMvdmVoaWNsZS92ZWhpY2xlQWRkLnRzeCIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL3NyYy9jb21wb25lbnRzL3ZlaGljbGUvdmVoaWNsZUxpc3QudHN4Iiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vc3JjL2NvbXBvbmVudHMvdmVoaWNsZS9jb250YWluZXIudHN4Iiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vc3JjL2NvbXBvbmVudHMvdmVoaWNsZS9kZXRhaWwudHN4Iiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vc3JjL3N0b3JlL2NsaWVudC9hY3Rpb25zLnRzeCIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL3NyYy9jb21wb25lbnRzL2NsaWVudC9kZXRhaWwudHN4Iiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy91dGlsaXRpZXMvbGliL2NvbXBvbmVudEFzL2NvbXBvc2VDb21wb25lbnRBcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL092ZXJmbG93U2V0L092ZXJmbG93U2V0LmJhc2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9SZXNpemVHcm91cC9SZXNpemVHcm91cC50eXBlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL092ZXJmbG93U2V0L092ZXJmbG93U2V0LnN0eWxlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL092ZXJmbG93U2V0L092ZXJmbG93U2V0LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvUmVzaXplR3JvdXAvUmVzaXplR3JvdXAuYmFzZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL1Rvb2x0aXAvVG9vbHRpcEhvc3QudHlwZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9SZXNpemVHcm91cC9SZXNpemVHcm91cC5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0J1dHRvbi9Db21tYW5kQmFyQnV0dG9uL0NvbW1hbmRCYXJCdXR0b24uc3R5bGVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvQnV0dG9uL0NvbW1hbmRCYXJCdXR0b24vQ29tbWFuZEJhckJ1dHRvbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL1Rvb2x0aXAvVG9vbHRpcC5iYXNlLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvVG9vbHRpcC9Ub29sdGlwLnR5cGVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvVG9vbHRpcC9Ub29sdGlwLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvVG9vbHRpcC9Ub29sdGlwLnN0eWxlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL1Rvb2x0aXAvVG9vbHRpcEhvc3QuYmFzZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvdXRpbGl0aWVzL2xpYi9vdmVyZmxvdy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL1Rvb2x0aXAvVG9vbHRpcEhvc3Quc3R5bGVzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL29mZmljZS11aS1mYWJyaWMtcmVhY3QvbGliL2NvbXBvbmVudHMvVG9vbHRpcC9Ub29sdGlwSG9zdC5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0NvbW1hbmRCYXIvQ29tbWFuZEJhci5zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvb2ZmaWNlLXVpLWZhYnJpYy1yZWFjdC9saWIvY29tcG9uZW50cy9Db21tYW5kQmFyL0NvbW1hbmRCYXIuYmFzZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9vZmZpY2UtdWktZmFicmljLXJlYWN0L2xpYi9jb21wb25lbnRzL0NvbW1hbmRCYXIvQ29tbWFuZEJhci5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL3NyYy9jb21wb25lbnRzL2xheW91dC9uYXZiYXIudHN4Iiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vc3JjL2NvbXBvbmVudHMvY29udGFjdC50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9zcmMvY29tcG9uZW50cy9hYm91dC50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9zcmMvY29tcG9uZW50cy9jbGllbnQvY2xpZW50cy50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9zcmMvY29tcG9uZW50cy9jbGllbnQvY3JlYXRlLnRzeCIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvaWNvbnMvbGliL2ZhYnJpYy1pY29ucy5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvaWNvbnMvbGliL2ZhYnJpYy1pY29ucy0wLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9pY29ucy9saWIvZmFicmljLWljb25zLTEuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL2ljb25zL2xpYi9mYWJyaWMtaWNvbnMtMi5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvaWNvbnMvbGliL2ZhYnJpYy1pY29ucy0zLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9pY29ucy9saWIvZmFicmljLWljb25zLTQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL2ljb25zL2xpYi9mYWJyaWMtaWNvbnMtNS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvaWNvbnMvbGliL2ZhYnJpYy1pY29ucy02LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9pY29ucy9saWIvZmFicmljLWljb25zLTcuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL2ljb25zL2xpYi9mYWJyaWMtaWNvbnMtOC5qcyIsIndlYnBhY2s6Ly9yZWFjdC1yZWR1eC1hc3luYy8uL25vZGVfbW9kdWxlcy9AdWlmYWJyaWMvaWNvbnMvbGliL2ZhYnJpYy1pY29ucy05LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9pY29ucy9saWIvZmFicmljLWljb25zLTEwLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9pY29ucy9saWIvZmFicmljLWljb25zLTExLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9pY29ucy9saWIvZmFicmljLWljb25zLTEyLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9pY29ucy9saWIvZmFicmljLWljb25zLTEzLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9pY29ucy9saWIvZmFicmljLWljb25zLTE0LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9pY29ucy9saWIvZmFicmljLWljb25zLTE1LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9pY29ucy9saWIvZmFicmljLWljb25zLTE2LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9pY29ucy9saWIvZmFicmljLWljb25zLTE3LmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9pY29ucy9saWIvaWNvbkFsaWFzZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL2ljb25zL2xpYi92ZXJzaW9uLmpzIiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9pY29ucy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3QtcmVkdXgtYXN5bmMvLi9zcmMvaW5kZXgudHN4Iiwid2VicGFjazovL3JlYWN0LXJlZHV4LWFzeW5jLy4vc3JjL2FwcC50c3giXSwibmFtZXMiOlsibGVhZlByb3RvdHlwZXMiLCJnZXRQcm90byIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwidHlwZSIsIktOT1dOX1NUQVRJQ1MiLCJuYW1lIiwibGVuZ3RoIiwicHJvdG90eXBlIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJndW1lbnRzIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJNZW1vIiwiZGVmaW5lUHJvcGVydHkiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RQcm90b3R5cGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJrZXlzIiwiY29uY2F0IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJpIiwia2V5IiwiZGVzY3JpcHRvciIsImUiLCJBcnJheSIsImlzQXJyYXkiLCJhcnIiLCJ0b1N0cmluZyIsImNhbGwiLCJoYXNPd25Qcm9wZXJ0eSIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRvT2JqZWN0IiwidmFsIiwiVHlwZUVycm9yIiwiYXNzaWduIiwidGVzdDEiLCJTdHJpbmciLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsIm1hcCIsIm4iLCJqb2luIiwidGVzdDMiLCJzcGxpdCIsImZvckVhY2giLCJsZXR0ZXIiLCJlcnIiLCJzaG91bGRVc2VOYXRpdmUiLCJ0YXJnZXQiLCJzb3VyY2UiLCJmcm9tIiwic3ltYm9scyIsInRvIiwicyIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHAiLCJwYXJzZSIsImNvbXBpbGUiLCJzdHIiLCJvcHRpb25zIiwidG9rZW5zVG9GdW5jdGlvbiIsInRva2Vuc1RvUmVnRXhwIiwiUEFUSF9SRUdFWFAiLCJSZWdFeHAiLCJyZXMiLCJ0b2tlbnMiLCJpbmRleCIsInBhdGgiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwiZXhlYyIsIm0iLCJlc2NhcGVkIiwib2Zmc2V0Iiwic2xpY2UiLCJuZXh0IiwicHJlZml4IiwiY2FwdHVyZSIsImdyb3VwIiwibW9kaWZpZXIiLCJhc3RlcmlzayIsInB1c2giLCJwYXJ0aWFsIiwicmVwZWF0Iiwib3B0aW9uYWwiLCJwYXR0ZXJuIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJzdWJzdHIiLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJyZXBsYWNlIiwiYyIsImNoYXJDb2RlQXQiLCJ0b1VwcGVyQ2FzZSIsIm1hdGNoZXMiLCJmbGFncyIsIm9iaiIsIm9wdHMiLCJkYXRhIiwiZW5jb2RlIiwicHJldHR5IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwidG9rZW4iLCJzZWdtZW50IiwidmFsdWUiLCJKU09OIiwic3RyaW5naWZ5IiwiaiIsInRlc3QiLCJhdHRhY2hLZXlzIiwicmUiLCJzZW5zaXRpdmUiLCJzdHJpY3QiLCJlbmQiLCJyb3V0ZSIsImVuZHNXaXRoRGVsaW1pdGVyIiwiZ3JvdXBzIiwibWF0Y2giLCJyZWdleHBUb1JlZ2V4cCIsInBhcnRzIiwiYXJyYXlUb1JlZ2V4cCIsInN0cmluZ1RvUmVnZXhwIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BzIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwibG9jYXRpb24iLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJFcnJvciIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImJvb2wiLCJmdW5jIiwibnVtYmVyIiwib2JqZWN0Iiwic3RyaW5nIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImVsZW1lbnQiLCJlbGVtZW50VHlwZSIsImluc3RhbmNlT2YiLCJub2RlIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsInNoYXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsImFhIiwiciIsInUiLCJhIiwiYiIsImJhIiwiZCIsImYiLCJnIiwiaCIsImsiLCJsIiwiYXBwbHkiLCJ0aGlzIiwib25FcnJvciIsImRhIiwiZWEiLCJmYSIsImhhIiwiaWEiLCJqYSIsImxhIiwibWEiLCJuYSIsIm9hIiwiY3VycmVudFRhcmdldCIsImthIiwicGEiLCJxYSIsInJhIiwiaW5kZXhPZiIsInNhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJ0YSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwidWEiLCJyZWdpc3RyYXRpb25OYW1lIiwidmEiLCJ3YSIsImRlcGVuZGVuY2llcyIsInhhIiwieWEiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsInN0YXRlTm9kZSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJMYSIsIk1hIiwiTmEiLCJPYSIsIlBhIiwiUWEiLCJ2IiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwiQyIsInRvTG93ZXJDYXNlIiwiVWEiLCJWYSIsInhsaW5rSHJlZiIsIldhIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJYYSIsIlNhIiwiaXNOYU4iLCJUYSIsIlJhIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiY3VycmVudCIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwic3VzcGVuc2UiLCJZYSIsIkUiLCJTeW1ib2wiLCJmb3IiLCJaYSIsIiRhIiwiYWIiLCJiYiIsImNiIiwiZGIiLCJlYiIsImZiIiwiZ2IiLCJoYiIsImliIiwiamIiLCJrYiIsImxiIiwibWIiLCJpdGVyYXRvciIsIm5iIiwicGIiLCIkJHR5cGVvZiIsIl9zdGF0dXMiLCJfcmVzdWx0IiwicWIiLCJ0YWciLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJldHVybiIsInJiIiwic2IiLCJub2RlTmFtZSIsInhiIiwiX3ZhbHVlVHJhY2tlciIsImNvbnN0cnVjdG9yIiwiZ2V0Iiwic2V0IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJ0YiIsInliIiwiY2hlY2tlZCIsInpiIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJBYiIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJCYiIsIkNiIiwiRGIiLCJFYiIsIm93bmVyRG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiR2IiLCJjaGlsZHJlbiIsIkNoaWxkcmVuIiwiRmIiLCJIYiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGlzYWJsZWQiLCJJYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiSmIiLCJLYiIsIkxiIiwidGV4dENvbnRlbnQiLCJNYiIsIk5iIiwiT2IiLCJQYiIsIlFiIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwidmFsdWVPZiIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIlJiIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJTYiIsIlRiIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiVWIiLCJWYiIsIldiIiwic3R5bGUiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiV2Vha01hcCIsIk1hcCIsImNjIiwiZGMiLCJhbHRlcm5hdGUiLCJlZmZlY3RUYWciLCJlYyIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiZmMiLCJoYyIsImNoaWxkIiwic2libGluZyIsImdjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJtYyIsIm5jIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsIm9jIiwicGMiLCJxYyIsInRvcExldmVsVHlwZSIsIm5hdGl2ZUV2ZW50IiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsInJjIiwicG9wIiwiZXZlbnRTeXN0ZW1GbGFncyIsInNjIiwiY29udGFpbmVySW5mbyIsInRjIiwidWMiLCJoYXMiLCJ2YyIsIkYiLCJ3YyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiQmMiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIktjIiwiYmxvY2tlZE9uIiwiY29udGFpbmVyIiwiTGMiLCJkZWxldGUiLCJwb2ludGVySWQiLCJNYyIsIk5jIiwiUGMiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsImh5ZHJhdGUiLCJRYyIsIlJjIiwiU2MiLCJUYyIsInNoaWZ0IiwiVWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJWYyIsIldjIiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJldmVudFByaW9yaXR5IiwiYmQiLCJjZCIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJiaW5kIiwiaGQiLCJpZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJPYyIsImpkIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJrZCIsImxkIiwidHJpbSIsIm1kIiwic2V0UHJvcGVydHkiLCJjaGFyQXQiLCJzdWJzdHJpbmciLCJuZCIsIm1lbnVpdGVtIiwiYXJlYSIsImJhc2UiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsIm9kIiwicGQiLCJpcyIsInFkIiwicmQiLCJzZCIsInRkIiwiYm9keSIsInVkIiwidmQiLCJuZXh0U2libGluZyIsIndkIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsInhkIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50V2luZG93IiwiaHJlZiIsInlkIiwiY29udGVudEVkaXRhYmxlIiwiQmQiLCJDZCIsIkRkIiwiRWQiLCJGZCIsImF1dG9Gb2N1cyIsIkdkIiwiX19odG1sIiwiSGQiLCJzZXRUaW1lb3V0IiwiSWQiLCJjbGVhclRpbWVvdXQiLCJKZCIsIktkIiwicHJldmlvdXNTaWJsaW5nIiwiTGQiLCJNYXRoIiwicmFuZG9tIiwiTWQiLCJOZCIsIk9kIiwiUGQiLCJRZCIsIlJkIiwiU2QiLCJUZCIsImRpc3BhdGNoQ29uZmlnIiwiVWQiLCJfdGFyZ2V0SW5zdCIsIlZkIiwiV2QiLCJYZCIsIllkIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJjZSIsIkciLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJlZSIsImV2ZW50UG9vbCIsImZlIiwiZGVzdHJ1Y3RvciIsImRlIiwiZ2V0UG9vbGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsImlzVHJ1c3RlZCIsImV4dGVuZCIsImdlIiwiaGUiLCJpZSIsImplIiwia2UiLCJkb2N1bWVudE1vZGUiLCJsZSIsIm1lIiwibmUiLCJvZSIsImJlZm9yZUlucHV0IiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJwZSIsInFlIiwia2V5Q29kZSIsImRldGFpbCIsInNlIiwidmUiLCJsb2NhbGUiLCJ3aGljaCIsInRlIiwiY3RybEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJjaGFyIiwidWUiLCJ3ZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsInVybCIsIndlZWsiLCJ4ZSIsInllIiwiY2hhbmdlIiwiemUiLCJBZSIsIkJlIiwiQ2UiLCJEZSIsIkVlIiwiRmUiLCJHZSIsImRldGFjaEV2ZW50IiwiSGUiLCJJZSIsImF0dGFjaEV2ZW50IiwiSmUiLCJLZSIsIkxlIiwiTWUiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiTmUiLCJ2aWV3IiwiT2UiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGUiLCJnZXRNb2RpZmllclN0YXRlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsIlZlIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJXZSIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlhlIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJZZSIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93IiwicCIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJzZWxlY3QiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImpmIiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImtmIiwib25TZWxlY3QiLCJsZiIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJtZiIsImNsaXBib2FyZERhdGEiLCJuZiIsIm9mIiwiY2hhckNvZGUiLCJwZiIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJxZiIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJyZiIsInNmIiwiZGF0YVRyYW5zZmVyIiwidGYiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwidWYiLCJ2ZiIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwid2YiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwieWYiLCJ6ZiIsIkgiLCJJIiwiQWYiLCJKIiwiSyIsIkJmIiwiQ2YiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJMIiwiRGYiLCJFZiIsIkZmIiwiZ2V0Q2hpbGRDb250ZXh0IiwiR2YiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIkhmIiwiSWYiLCJKZiIsIktmIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJMZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIk1mIiwidW5zdGFibGVfbm93IiwiTmYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIk9mIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJQZiIsIlFmIiwiUmYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIlNmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiVGYiLCJVZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiVmYiLCJXZiIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwiX2NvbnRleHQiLCJfY3VycmVudFZhbHVlIiwicGciLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwicWciLCJmaXJzdENvbnRleHQiLCJleHBpcmF0aW9uVGltZSIsInJnIiwic2ciLCJjb250ZXh0Iiwib2JzZXJ2ZWRCaXRzIiwicmVzcG9uZGVycyIsInRnIiwidWciLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImJhc2VRdWV1ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwidmciLCJ3ZyIsInN1c3BlbnNlQ29uZmlnIiwicGF5bG9hZCIsImNhbGxiYWNrIiwieGciLCJ5ZyIsInpnIiwieCIsInoiLCJjYSIsIkFnIiwiRCIsInQiLCJCZyIsIkNnIiwiRGciLCJFZyIsIkNvbXBvbmVudCIsInJlZnMiLCJGZyIsIkpnIiwiaXNNb3VudGVkIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsImVucXVldWVTZXRTdGF0ZSIsIkdnIiwiSGciLCJJZyIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJLZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiTGciLCJzdGF0ZSIsInVwZGF0ZXIiLCJNZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk5nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJPZyIsIlBnIiwicmVmIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsIlFnIiwiUmciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwiU2ciLCJUZyIsIm1vZGUiLCJVZyIsImltcGxlbWVudGF0aW9uIiwiVmciLCJXZyIsInkiLCJBIiwicSIsImRvbmUiLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZG9jdW1lbnRFbGVtZW50IiwidGFnTmFtZSIsImVoIiwiZmgiLCJnaCIsIk0iLCJoaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImloIiwicmVzcG9uZGVyIiwiamgiLCJraCIsImxoIiwiTiIsIk8iLCJQIiwibWgiLCJRIiwibmgiLCJvaCIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJxdWV1ZSIsInVoIiwidmgiLCJ3aCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJhY3Rpb24iLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsInhoIiwieWgiLCJ6aCIsIkFoIiwiY3JlYXRlIiwiZGVzdHJveSIsImRlcHMiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsIkloIiwiSmgiLCJLaCIsIkxoIiwiTWgiLCJOaCIsInJlYWRDb250ZXh0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlUmVzcG9uZGVyIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJwZW5kaW5nUHJvcHMiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiUmVhY3RDdXJyZW50T3duZXIiLCJSIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwiZWkiLCJmaSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsImdpIiwiaGkiLCJwZW5kaW5nQ29udGV4dCIsIm5pIiwicGkiLCJxaSIsImlpIiwicmV0cnlUaW1lIiwiamkiLCJmYWxsYmFjayIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwia2kiLCJsaSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwibGFzdCIsInRhaWwiLCJ0YWlsRXhwaXJhdGlvbiIsInRhaWxNb2RlIiwibWkiLCJyaSIsInNpIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIm9uQ2xpY2siLCJvbmNsaWNrIiwic2l6ZSIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZVRleHROb2RlIiwiUyIsInRpIiwidWkiLCJ2aSIsIndpIiwiVCIsInhpIiwiVSIsInlpIiwiemkiLCJBaSIsInN0YWNrIiwiQmkiLCJXZWFrU2V0IiwiU2V0IiwiQ2kiLCJjb25zb2xlIiwiZXJyb3IiLCJGaSIsIkVpIiwiR2kiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIkhpIiwiSWkiLCJKaSIsImZvY3VzIiwiS2kiLCJMaSIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiRGkiLCJNaSIsIk5pIiwiT2kiLCJQaSIsIlFpIiwiUmkiLCJpbnN0YW5jZSIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJTaSIsIlRpIiwiZGlzcGxheSIsIlVpIiwiVmkiLCJhZGQiLCJ0aGVuIiwiV2kiLCJYaSIsIllpIiwiWmkiLCIkaSIsImNvbXBvbmVudERpZENhdGNoIiwiYWoiLCJjb21wb25lbnRTdGFjayIsIlJqIiwiYmoiLCJjZWlsIiwiY2oiLCJkaiIsImZqIiwiZ2oiLCJXIiwiWCIsImtqIiwibGoiLCJtaiIsIm5qIiwib2oiLCJZIiwicWoiLCJyaiIsInNqIiwidGoiLCJ1aiIsInZqIiwid2oiLCJ0aW1lb3V0TXMiLCJ4aiIsInlqIiwiWiIsInpqIiwibGFzdEV4cGlyZWRUaW1lIiwiQWoiLCJmaXJzdFBlbmRpbmdUaW1lIiwibGFzdFBpbmdlZFRpbWUiLCJuZXh0S25vd25QZW5kaW5nTGV2ZWwiLCJjYWxsYmFja0V4cGlyYXRpb25UaW1lIiwiY2FsbGJhY2tQcmlvcml0eSIsImNhbGxiYWNrTm9kZSIsIkJqIiwidGltZW91dCIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkRXhwaXJhdGlvblRpbWUiLCJsYXN0U3VzcGVuZGVkVGltZSIsIklqIiwidGltZW91dEhhbmRsZSIsIkpqIiwiYnVzeU1pbkR1cmF0aW9uTXMiLCJidXN5RGVsYXlNcyIsIktqIiwiTWoiLCJOaiIsInBpbmdDYWNoZSIsIk9qIiwidyIsInViIiwiUGoiLCJYYyIsIlFqIiwiU2oiLCJmaXJzdFN1c3BlbmRlZFRpbWUiLCJyYW5nZUNvdW50Iiwid2IiLCJhY3RpdmVFbGVtZW50RGV0YWNoZWQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiVGoiLCJCIiwibWluIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJ2YiIsIlVqIiwiVmoiLCJXaiIsImhpZGRlbiIsIl9jdG9yIiwiZGVmYXVsdCIsIm9iIiwiWGoiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJaaiIsImlzUmVhY3RDb21wb25lbnQiLCJwZW5kaW5nQ2hpbGRyZW4iLCJhayIsImJrIiwiY2siLCJkayIsImVrIiwiZmsiLCJKYyIsIl9pbnRlcm5hbFJvb3QiLCJnayIsImlrIiwiaGFzQXR0cmlidXRlIiwiaGsiLCJqayIsImtrIiwidW5tb3VudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwiTGoiLCJsayIsIkV2ZW50cyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiWWoiLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlUHJvcHMiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsImJ1bmRsZVR5cGUiLCJ2ZXJzaW9uIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsImNyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwiY2hlY2tEQ0UiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGcmFnbWVudCIsIkxhenkiLCJQb3J0YWwiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGVPZiIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJfX3NlbGYiLCJfX3NvdXJjZSIsInJlc3VsdCIsImtleVByZWZpeCIsImNvdW50IiwiViIsImVzY2FwZSIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwidG9BcnJheSIsIm9ubHkiLCJQdXJlQ29tcG9uZW50IiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwibWVtbyIsIk1lc3NhZ2VDaGFubmVsIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJwZXJmb3JtYW5jZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZmxvb3IiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJzb3J0SW5kZXgiLCJzdGFydFRpbWUiLCJwcmlvcml0eUxldmVsIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsImRlbGF5IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwicm9vdCIsIm9ic2VydmFibGUiLCJzZWxmIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJfX3Byb3RvX18iLCJucyIsImRlZiIsImRlZmluaXRpb24iLCJvIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwiaG1kIiwicHJvcCIsInRvU3RyaW5nVGFnIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJpc0Fic29sdXRlIiwicGF0aG5hbWUiLCJzcGxpY2VPbmUiLCJsaXN0IiwidW5kZWZpbmVkIiwiaGFzVHJhaWxpbmdTbGFzaCIsInRvUGFydHMiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsInVwIiwicGFydCIsInVuc2hpZnQiLCJjb25kaXRpb24iLCJtZXNzYWdlIiwiYWRkTGVhZGluZ1NsYXNoIiwic3RyaXBMZWFkaW5nU2xhc2giLCJzdHJpcEJhc2VuYW1lIiwiaGFzQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJjcmVhdGVQYXRoIiwiaGFzaCIsImN1cnJlbnRMb2NhdGlvbiIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwicGFyc2VQYXRoIiwiZGVjb2RlVVJJIiwiVVJJRXJyb3IiLCJjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsImxpc3RlbmVycyIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImFwcGVuZExpc3RlbmVyIiwiZm4iLCJpc0FjdGl2ZSIsImxpc3RlbmVyIiwiZmlsdGVyIiwiaXRlbSIsIm5vdGlmeUxpc3RlbmVycyIsIl9sZW4iLCJhcmdzIiwiX2tleSIsImNhblVzZURPTSIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJQb3BTdGF0ZUV2ZW50IiwiSGFzaENoYW5nZUV2ZW50IiwiZ2V0SGlzdG9yeVN0YXRlIiwiaGlzdG9yeSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMka2V5TGVuZ3RoIiwia2V5TGVuZ3RoIiwiYmFzZW5hbWUiLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl9yZWYiLCJfd2luZG93JGxvY2F0aW9uIiwiY3JlYXRlS2V5IiwidHJhbnNpdGlvbk1hbmFnZXIiLCJuZXh0U3RhdGUiLCJoYW5kbGVQb3BTdGF0ZSIsImV2ZW50IiwiaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCIsImhhbmRsZVBvcCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJmb3JjZU5leHRQb3AiLCJvayIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsS2V5cyIsImZyb21JbmRleCIsImRlbHRhIiwiZ28iLCJyZXZlcnRQb3AiLCJpbml0aWFsTG9jYXRpb24iLCJjcmVhdGVIcmVmIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImlzQmxvY2tlZCIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsIm5leHRLZXlzIiwicmVwbGFjZVN0YXRlIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwiYmxvY2siLCJ1bmJsb2NrIiwibGlzdGVuIiwidW5saXN0ZW4iLCJIYXNoQ2hhbmdlRXZlbnQkMSIsIkhhc2hQYXRoQ29kZXJzIiwiaGFzaGJhbmciLCJlbmNvZGVQYXRoIiwiZGVjb2RlUGF0aCIsIm5vc2xhc2giLCJzbGFzaCIsInN0cmlwSGFzaCIsImdldEhhc2hQYXRoIiwicmVwbGFjZUhhc2hQYXRoIiwiY3JlYXRlSGFzaEhpc3RvcnkiLCJfcHJvcHMkaGFzaFR5cGUiLCJoYXNoVHlwZSIsIl9IYXNoUGF0aENvZGVycyRoYXNoVCIsImlnbm9yZVBhdGgiLCJlbmNvZGVkUGF0aCIsInByZXZMb2NhdGlvbiIsImFsbFBhdGhzIiwibGFzdEluZGV4T2YiLCJiYXNlVGFnIiwicXVlcnlTZWxlY3RvciIsImdldEF0dHJpYnV0ZSIsInB1c2hIYXNoUGF0aCIsIm5leHRQYXRocyIsImNsYW1wIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJtYXgiLCJjcmVhdGVNZW1vcnlIaXN0b3J5IiwiX3Byb3BzJGluaXRpYWxFbnRyaWVzIiwiaW5pdGlhbEVudHJpZXMiLCJfcHJvcHMkaW5pdGlhbEluZGV4IiwiaW5pdGlhbEluZGV4IiwiZW50cmllcyIsImVudHJ5IiwibmV4dEluZGV4IiwibmV4dEVudHJpZXMiLCJzcGxpY2UiLCJjYW5HbyIsIk1BWF9TSUdORURfMzFfQklUX0lOVCIsImNvbW1vbmpzR2xvYmFsIiwiY3JlYXRlRXZlbnRFbWl0dGVyIiwiaGFuZGxlcnMiLCJvbiIsImhhbmRsZXIiLCJvZmYiLCJuZXdWYWx1ZSIsImNoYW5nZWRCaXRzIiwiY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJfQ29uc3VtZXIkY29udGV4dFR5cGUiLCJjb250ZXh0UHJvcCIsImdldFVuaXF1ZUlkIiwiX0NvbXBvbmVudCIsIl90aGlzIiwiZW1pdHRlciIsIl9wcm90byIsIm5leHRQcm9wcyIsIm9sZFZhbHVlIiwiX0NvbXBvbmVudDIiLCJfdGhpczIiLCJvblVwZGF0ZSIsIl9wcm90bzIiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJoaXN0b3J5Q29udGV4dCIsImNyZWF0ZU5hbWVkQ29udGV4dCIsImNyZWF0ZU5hbWVkQ29udGV4dCQxIiwiUm91dGVyIiwiX1JlYWN0JENvbXBvbmVudCIsIl9pc01vdW50ZWQiLCJfcGVuZGluZ0xvY2F0aW9uIiwic3RhdGljQ29udGV4dCIsImNvbXB1dGVSb290TWF0Y2giLCJwYXJhbXMiLCJpc0V4YWN0IiwiY2FjaGUkMSIsImNhY2hlQ291bnQkMSIsIm1hdGNoUGF0aCIsIl9vcHRpb25zIiwiX29wdGlvbnMkZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJyZWR1Y2UiLCJtYXRjaGVkIiwiX2NvbXBpbGVQYXRoIiwiY2FjaGVLZXkiLCJwYXRoQ2FjaGUiLCJyZWdleHAiLCJjb21waWxlUGF0aCQxIiwidmFsdWVzIiwiUm91dGUiLCJjb250ZXh0JDEiLCJjb21wdXRlZE1hdGNoIiwiX3RoaXMkcHJvcHMiLCJjcmVhdGVVUkwiLCJzdGF0aWNIYW5kbGVyIiwibWV0aG9kTmFtZSIsIm5vb3AiLCJTd2l0Y2giLCJ1c2VIaXN0b3J5IiwidXNlTG9jYXRpb24iLCJCcm93c2VyUm91dGVyIiwicmVzb2x2ZVRvTG9jYXRpb24iLCJub3JtYWxpemVUb0xvY2F0aW9uIiwiZm9yd2FyZFJlZlNoaW0iLCJMaW5rQW5jaG9yIiwiZm9yd2FyZGVkUmVmIiwiaW5uZXJSZWYiLCJuYXZpZ2F0ZSIsIl9vbkNsaWNrIiwicmVzdCIsImV4IiwiaXNNb2RpZmllZEV2ZW50IiwiTGluayIsIl9yZWYyIiwiX3JlZjIkY29tcG9uZW50IiwiZm9yd2FyZFJlZlNoaW0kMSIsImZvcndhcmRSZWYkMSIsIl9yZWYkYXJpYUN1cnJlbnQiLCJhcmlhQ3VycmVudCIsIl9yZWYkYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJjbGFzc05hbWVQcm9wIiwiY2xhc3NOYW1lIiwiaXNBY3RpdmVQcm9wIiwibG9jYXRpb25Qcm9wIiwic3R5bGVQcm9wIiwiZXNjYXBlZFBhdGgiLCJjbGFzc25hbWVzIiwiam9pbkNsYXNzbmFtZXMiLCJiYXRjaCIsImdldEJhdGNoIiwibnVsbExpc3RlbmVycyIsIm5vdGlmeSIsIlN1YnNjcmlwdGlvbiIsInN0b3JlIiwicGFyZW50U3ViIiwidW5zdWJzY3JpYmUiLCJoYW5kbGVDaGFuZ2VXcmFwcGVyIiwiYWRkTmVzdGVkU3ViIiwidHJ5U3Vic2NyaWJlIiwic3Vic2NyaWJlIiwibm90aWZ5TmVzdGVkU3VicyIsIm9uU3RhdGVDaGFuZ2UiLCJpc1N1YnNjcmliZWQiLCJCb29sZWFuIiwiZmlyc3QiLCJjbGVhciIsInByZXYiLCJjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24iLCJ0cnlVbnN1YnNjcmliZSIsImNvbnRleHRWYWx1ZSIsInN1YnNjcmlwdGlvbiIsInByZXZpb3VzU3RhdGUiLCJnZXRTdGF0ZSIsIkNvbnRleHQiLCJyYW5kb21TdHJpbmciLCJBY3Rpb25UeXBlcyIsIklOSVQiLCJSRVBMQUNFIiwiUFJPQkVfVU5LTk9XTl9BQ1RJT04iLCJpc1BsYWluT2JqZWN0IiwicHJvdG8iLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJvYnNlcnZlU3RhdGUiLCJnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZSIsImFjdGlvblR5cGUiLCJfZGVmaW5lUHJvcGVydHkiLCJ3cml0YWJsZSIsIm93bktleXMiLCJlbnVtZXJhYmxlT25seSIsInN5bSIsIl9vYmplY3RTcHJlYWQyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJjb21wb3NlIiwiZnVuY3MiLCJhcmciLCJjcmVhdGVTdG9yZUhvb2siLCJ1c2VSZWR1eENvbnRleHQiLCJjcmVhdGVEaXNwYXRjaEhvb2siLCJ1c2VTdG9yZSIsInVzZURpc3BhdGNoIiwicmVmRXF1YWxpdHkiLCJjcmVhdGVTZWxlY3Rvckhvb2siLCJzZWxlY3RvciIsImVxdWFsaXR5Rm4iLCJfdXNlUmVkdXhDb250ZXh0IiwiY29udGV4dFN1YiIsInNlbGVjdGVkU3RhdGUiLCJmb3JjZVJlbmRlciIsImxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IiLCJsYXRlc3RTZWxlY3RvciIsImxhdGVzdFNlbGVjdGVkU3RhdGUiLCJjaGVja0ZvclVwZGF0ZXMiLCJuZXdTZWxlY3RlZFN0YXRlIiwidXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24iLCJuZXdCYXRjaCIsInVzZVNlbGVjdG9yIiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsInRodW5rIiwid2l0aEV4dHJhQXJndW1lbnQiLCJfX3NwcmVhZEFycmF5cyIsImlsIiwiamwiLCJpbml0U3RhdGUiLCJwaG9uZU5vIiwiYWRkcmVzcyIsInJlZHVjZXJzIiwicmVkdWNlcktleXMiLCJmaW5hbFJlZHVjZXJzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImZpbmFsUmVkdWNlcktleXMiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJoYXNDaGFuZ2VkIiwiX2kiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiZXJyb3JNZXNzYWdlIiwiY29tYmluZVJlZHVjZXJzIiwidmVoaWNsZSIsIm5ld2lkIiwiY2xpZW50VmlldyIsInNlYXJjaF8xIiwibWlkZGxld2FyZXMiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwiY2hhaW4iLCJtaWRkbGV3YXJlIiwiYXBwbHlNaWRkbGV3YXJlIiwiZXh0ZW5kU3RhdGljcyIsInNldFByb3RvdHlwZU9mIiwiX19leHRlbmRzIiwiX18iLCJfX3Jlc3QiLCJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsImRlc2MiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJfc3R5bGVzaGVldCIsIkluamVjdGlvbk1vZGUiLCJSRVVTRV9TVFlMRV9OT0RFIiwiX2dsb2JhbCIsIl9hIiwiX3J0bCIsIlN0eWxlc2hlZXQiLCJjb25maWciLCJfcnVsZXMiLCJfcHJlc2VydmVkUnVsZXMiLCJfcnVsZXNUb0luc2VydCIsIl9jb3VudGVyIiwiX2tleVRvQ2xhc3NOYW1lIiwiX29uUmVzZXRDYWxsYmFja3MiLCJfY2xhc3NOYW1lVG9BcmdzIiwiX2NvbmZpZyIsImluamVjdGlvbk1vZGUiLCJkZWZhdWx0UHJlZml4IiwibmFtZXNwYWNlIiwiY3NwU2V0dGluZ3MiLCJjbGFzc05hbWVDYWNoZSIsImdldEluc3RhbmNlIiwiX2xhc3RTdHlsZUVsZW1lbnQiLCJmYWJyaWNDb25maWciLCJGYWJyaWNDb25maWciLCJtZXJnZVN0eWxlcyIsInNldENvbmZpZyIsIm9uUmVzZXQiLCJnZXRDbGFzc05hbWUiLCJjYWNoZUNsYXNzTmFtZSIsInJ1bGVzIiwiY2xhc3NOYW1lRnJvbUtleSIsImdldENsYXNzTmFtZUNhY2hlIiwiYXJnc0Zyb21DbGFzc05hbWUiLCJpbnNlcnRlZFJ1bGVzRnJvbUNsYXNzTmFtZSIsImluc2VydFJ1bGUiLCJydWxlIiwicHJlc2VydmUiLCJfZ2V0U3R5bGVFbGVtZW50Iiwic2hlZXQiLCJjc3NSdWxlcyIsIm9uSW5zZXJ0UnVsZSIsImdldFJ1bGVzIiwiaW5jbHVkZVByZXNlcnZlZFJ1bGVzIiwicmVzZXQiLCJyZXNldEtleXMiLCJfc3R5bGVFbGVtZW50IiwiX2NyZWF0ZVN0eWxlRWxlbWVudCIsImhlYWQiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsIm5leHRFbGVtZW50U2libGluZyIsInBsYWNlaG9sZGVyU3R5bGVUYWciLCJfZmluZFBsYWNlaG9sZGVyU3R5bGVUYWciLCJjaGlsZE5vZGVzIiwiZXh0cmFjdFN0eWxlUGFydHMiLCJjbGFzc2VzIiwib2JqZWN0cyIsInN0eWxlc2hlZXQiLCJfcHJvY2Vzc0FyZ3MiLCJhcmdzTGlzdCIsImFyZ3NMaXN0XzEiLCJ0cmFuc2xhdGVkQXJncyIsInNldFJUTCIsImlzUlRMIiwiZ2V0UlRMIiwiZ2V0U3R5bGVPcHRpb25zIiwicnRsIiwiX3ZlbmRvclNldHRpbmdzIiwia2ViYWJSdWxlcyIsInJ1bGVQYWlycyIsImF1dG9QcmVmaXhOYW1lcyIsInByZWZpeFJ1bGVzIiwidmVuZG9yU2V0dGluZ3MiLCJkb2MiLCJuYXYiLCJpc1dlYmtpdCIsImlzTW96IiwiaXNPcGVyYSIsImlzTXMiLCJnZXRWZW5kb3JTZXR0aW5ncyIsIk5PTl9QSVhFTF9OVU1CRVJfUFJPUFMiLCJwcm92aWRlVW5pdHMiLCJpc05vblBpeGVsUHJvcCIsImlzVmFyaWFibGVPclByZWZpeGVkIiwidW5pdCIsIkxFRlQiLCJSSUdIVCIsIk5BTUVfUkVQTEFDRU1FTlRTIiwiVkFMVUVfUkVQTEFDRU1FTlRTIiwicnRsaWZ5UnVsZXMiLCJuYW1lXzEiLCJmbGlwUXVhZCIsInBhcnRJbmRleCIsIm51bWJlclZhbCIsInBhcnNlSW50IiwibmVnYXRlTnVtIiwiZ2V0RGlzcGxheU5hbWUiLCJyb290U3R5bGUiLCJnbG9iYWxTZWxlY3RvclJlZ0V4cCIsImV4cGFuZFNlbGVjdG9yIiwibmV3U2VsZWN0b3IiLCJjdXJyZW50U2VsZWN0b3IiLCJleHRyYWN0U2VsZWN0b3IiLCJfX29yZGVyIiwiZXh0cmFjdFJ1bGVzIiwic2VsZWN0b3JXaXRoR2xvYmFscyIsInJlcGxhY2VtZW50SW5mbyIsImZpbmRHbG9iYWwiLCJyZXZlcnNlIiwibWF0Y2hJbmRleCIsIm1hdGNoRW5kSW5kZXgiLCJyZXBsYWNlbWVudCIsImV4cGFuZENvbW1hU2VwYXJhdGVkR2xvYmFscyIsInNlcGFyYXRlZFNlbGVjdG9yIiwiY3VycmVudFJ1bGVzIiwiYXJnc18xIiwiZXhwYW5kZWRSdWxlcyIsInByb3BWYWx1ZSIsInNlbGVjdG9ycyIsImV4cGFuZFF1YWRzIiwiZ2V0S2V5Rm9yUnVsZXMiLCJzZXJpYWxpemVkIiwiaGFzUHJvcHMiLCJydWxlc0ZvclNlbGVjdG9yIiwicmVwZWF0U3RyaW5nIiwic2VyaWFsaXplUnVsZUVudHJpZXMiLCJydWxlRW50cmllcyIsImFsbEVudHJpZXMiLCJzdHlsZVRvUmVnaXN0cmF0aW9uIiwicmVnaXN0cmF0aW9uIiwicnVsZXNUb0luc2VydCIsIl9iIiwiYXBwbHlSZWdpc3RyYXRpb24iLCJzcGVjaWZpY2l0eU11bHRpcGxpZXIiLCJwcm9jZXNzZWRSdWxlIiwibWVyZ2VDc3MiLCJzdHlsZVRvQ2xhc3NOYW1lIiwiX2luaXRpYWxpemVkU3R5bGVzaGVldFJlc2V0cyIsIl9yZXNldENvdW50ZXIiLCJfZW1wdHlPYmplY3QiLCJlbXB0eSIsIl9kaWN0aW9uYXJ5IiwiX3dlYWtNYXAiLCJyZXNldE1lbW9pemF0aW9ucyIsIm1lbW9pemVGdW5jdGlvbiIsIm1heENhY2hlU2l6ZSIsImlnbm9yZU51bGxPclVuZGVmaW5lZFJlc3VsdCIsInJvb3ROb2RlIiwiY2FjaGVTaXplIiwibG9jYWxSZXNldENvdW50ZXIiLCJjdXJyZW50Tm9kZSIsIl9jcmVhdGVOb2RlIiwiX25vcm1hbGl6ZUFyZyIsImNyZWF0ZU1lbW9pemVyIiwiY2FjaGUiLCJLZXlDb2RlcyIsIl9pc1NTUiIsInJvb3RFbGVtZW50IiwiZWwiLCJfd2luZG93IiwiZ2V0SXRlbSIsIndpbiIsInNlc3Npb25TdG9yYWdlIiwiX2lzUlRMIiwiUlRMX0xPQ0FMX1NUT1JBR0VfS0VZIiwidGhlbWUiLCJzYXZlZFJUTCIsInBlcnNpc3RTZXR0aW5nIiwic2V0SXRlbSIsImdldFJUTFNhZmVLZXlDb2RlIiwid2l0aFNsb3RzIiwic2xvdFR5cGUiLCJpc1Nsb3QiLCJEZWZhdWx0Q29tcG9uZW50IiwiZGVmYXVsdFByb3AiLCJjb21wb25lbnRQcm9wcyIsInVzZXJQcm9wcyIsInVzZXJTbG90T3B0aW9ucyIsImRlZmF1bHRTdHlsZXMiLCJmaW5hbFByb3BzIiwiYWxsUHJvcHMiLCJjbGFzc05hbWVzIiwiYWxsUHJvcHNfMSIsIl9jb25zdHJ1Y3RGaW5hbFByb3BzIiwic2xvdFByb3BzIiwidHJhbnNmb3JtZWRQcm9wcyIsIl90cmFuc2xhdGVTaG9ydGhhbmQiLCJVc2VyQ29tcG9uZW50IiwiZGVmYXVsdEZhY3RvcnkiLCJnZXRTbG90cyIsInNsb3RzIiwibWl4ZWRQcm9wcyIsIl9sb29wXzEiLCJzbG90IiwiX3JlbmRlclNsb3QiLCJfZGVmYXVsdFN0eWxlcyIsIkNvbXBvbmVudFR5cGUiLCJzbG90T3B0aW9ucyIsImtleWZyYW1lcyIsInRpbWVsaW5lIiwicnVsZXNBcnJheSIsIkVBU0lOR19GVU5DVElPTl8xIiwiRUFTSU5HX0ZVTkNUSU9OXzIiLCJEVVJBVElPTl8xIiwiRFVSQVRJT05fMiIsIkRVUkFUSU9OXzMiLCJEVVJBVElPTl80IiwiRkFERV9JTiIsIkZBREVfT1VUIiwidmlzaWJpbGl0eSIsIlNMSURFX1JJR0hUX0lOMTAiLCJfY3JlYXRlU2xpZGVJblgiLCJTTElERV9SSUdIVF9JTjIwIiwiU0xJREVfUklHSFRfSU40MCIsIlNMSURFX1JJR0hUX0lONDAwIiwiU0xJREVfTEVGVF9JTjEwIiwiU0xJREVfTEVGVF9JTjIwIiwiU0xJREVfTEVGVF9JTjQwIiwiU0xJREVfTEVGVF9JTjQwMCIsIlNMSURFX1VQX0lOMTAiLCJfY3JlYXRlU2xpZGVJblkiLCJTTElERV9VUF9JTjIwIiwiU0xJREVfRE9XTl9JTjEwIiwiU0xJREVfRE9XTl9JTjIwIiwiU0xJREVfUklHSFRfT1VUMTAiLCJfY3JlYXRlU2xpZGVPdXRYIiwiU0xJREVfUklHSFRfT1VUMjAiLCJTTElERV9SSUdIVF9PVVQ0MCIsIlNMSURFX1JJR0hUX09VVDQwMCIsIlNMSURFX0xFRlRfT1VUMTAiLCJTTElERV9MRUZUX09VVDIwIiwiU0xJREVfTEVGVF9PVVQ0MCIsIlNMSURFX0xFRlRfT1VUNDAwIiwiU0xJREVfVVBfT1VUMTAiLCJfY3JlYXRlU2xpZGVPdXRZIiwiU0xJREVfVVBfT1VUMjAiLCJTTElERV9ET1dOX09VVDEwIiwiU0xJREVfRE9XTl9PVVQyMCIsIlNDQUxFX1VQMTAwIiwidHJhbnNmb3JtIiwiU0NBTEVfRE9XTjk4IiwiU0NBTEVfRE9XTjEwMCIsIlNDQUxFX1VQMTAzIiwiUk9UQVRFOTAiLCJST1RBVEVfTjkwIiwiQW5pbWF0aW9uVmFyaWFibGVzIiwiQW5pbWF0aW9uU3R5bGVzIiwic2xpZGVSaWdodEluMTAiLCJfY3JlYXRlQW5pbWF0aW9uIiwic2xpZGVSaWdodEluMjAiLCJzbGlkZVJpZ2h0SW40MCIsInNsaWRlUmlnaHRJbjQwMCIsInNsaWRlTGVmdEluMTAiLCJzbGlkZUxlZnRJbjIwIiwic2xpZGVMZWZ0SW40MCIsInNsaWRlTGVmdEluNDAwIiwic2xpZGVVcEluMTAiLCJzbGlkZVVwSW4yMCIsInNsaWRlRG93bkluMTAiLCJzbGlkZURvd25JbjIwIiwic2xpZGVSaWdodE91dDEwIiwic2xpZGVSaWdodE91dDIwIiwic2xpZGVSaWdodE91dDQwIiwic2xpZGVSaWdodE91dDQwMCIsInNsaWRlTGVmdE91dDEwIiwic2xpZGVMZWZ0T3V0MjAiLCJzbGlkZUxlZnRPdXQ0MCIsInNsaWRlTGVmdE91dDQwMCIsInNsaWRlVXBPdXQxMCIsInNsaWRlVXBPdXQyMCIsInNsaWRlRG93bk91dDEwIiwic2xpZGVEb3duT3V0MjAiLCJzY2FsZVVwSW4xMDAiLCJzY2FsZURvd25JbjEwMCIsInNjYWxlVXBPdXQxMDMiLCJzY2FsZURvd25PdXQ5OCIsImZhZGVJbjEwMCIsImZhZGVJbjIwMCIsImZhZGVJbjQwMCIsImZhZGVJbjUwMCIsImZhZGVPdXQxMDAiLCJmYWRlT3V0MjAwIiwiZmFkZU91dDQwMCIsImZhZGVPdXQ1MDAiLCJyb3RhdGU5MGRlZyIsInJvdGF0ZU45MGRlZyIsImFuaW1hdGlvbkR1cmF0aW9uIiwiYW5pbWF0aW9uVGltaW5nRnVuY3Rpb24iLCJhbmltYXRpb25GaWxsTW9kZSIsImZyb21YIiwicG9pbnRlckV2ZW50cyIsImZyb21ZIiwidG9YIiwidG9ZIiwiTG9jYWxpemVkRm9udE5hbWVzIiwiTG9jYWxpemVkRm9udEZhbWlsaWVzIiwiRm9udFNpemVzIiwiRm9udFdlaWdodHMiLCJJY29uRm9udFNpemVzIiwiQW5pbWF0aW9uQ2xhc3NOYW1lcyIsInN0eWxlcyIsInN0eWxlTmFtZSIsImNsYXNzTmFtZV8xIiwiYnVpbGRDbGFzc01hcCIsIkFyYWJpYyIsIkN5cmlsbGljIiwiRWFzdEV1cm9wZWFuIiwiR3JlZWsiLCJIZWJyZXciLCJUaGFpIiwiVmlldG5hbWVzZSIsIldlc3RFdXJvcGVhbiIsIlNlbGF3aWsiLCJBcm1lbmlhbiIsIkdlb3JnaWFuIiwiQ2hpbmVzZVNpbXBsaWZpZWQiLCJDaGluZXNlVHJhZGl0aW9uYWwiLCJIaW5kaSIsIkphcGFuZXNlIiwiS29yZWFuIiwic2l6ZTEwIiwic2l6ZTEyIiwic2l6ZTE0Iiwic2l6ZTE2Iiwic2l6ZTE4Iiwic2l6ZTIwIiwic2l6ZTI0Iiwic2l6ZTI4Iiwic2l6ZTMyIiwic2l6ZTQyIiwic2l6ZTY4IiwibWluaSIsInhTbWFsbCIsInNtYWxsIiwic21hbGxQbHVzIiwibWVkaXVtIiwibWVkaXVtUGx1cyIsImljb24iLCJsYXJnZSIsInhMYXJnZSIsInhMYXJnZVBsdXMiLCJ4eExhcmdlIiwieHhMYXJnZVBsdXMiLCJzdXBlckxhcmdlIiwibWVnYSIsImxpZ2h0Iiwic2VtaWxpZ2h0IiwicmVndWxhciIsInNlbWlib2xkIiwiYm9sZCIsIkhpZ2hDb250cmFzdFNlbGVjdG9yIiwiZ2V0U2NyZWVuU2VsZWN0b3IiLCJnZXRFZGdlQ2hyb21pdW1Ob0hpZ2hDb250cmFzdEFkanVzdFNlbGVjdG9yIiwiZm9yY2VkQ29sb3JBZGp1c3QiLCJaSW5kZXhlcyIsIklzRm9jdXNIaWRkZW5DbGFzc05hbWUiLCJzZXRGb2N1c1Zpc2liaWxpdHkiLCJlbmFibGVkIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiZ2V0Rm9jdXNTdHlsZSIsImluc2V0T3JPcHRpb25zIiwicG9zaXRpb24iLCJoaWdoQ29udHJhc3RTdHlsZSIsImJvcmRlckNvbG9yIiwib3V0bGluZUNvbG9yIiwiaXNGb2N1c2VkT25seSIsIl9nZXRGb2N1c1N0eWxlSW50ZXJuYWwiLCJpbnNldCIsIl9jIiwiX2QiLCJfZSIsIl9mIiwicGFsZXR0ZSIsIndoaXRlIiwiX2ciLCJuZXV0cmFsU2Vjb25kYXJ5IiwiX2giLCJvdXRsaW5lIiwiYm9yZGVyIiwiY29udGVudCIsImJvdHRvbSIsInJpZ2h0IiwiRm9jdXNTdHlsZSIsIk5hdiIsIlNjcm9sbGFibGVQYW5lIiwiQ29hY2htYXJrIiwiTGF5ZXIiLCJLZXl0aXBMYXllciIsImdldElucHV0Rm9jdXNTdHlsZSIsImJvcmRlclJhZGl1cyIsImJvcmRlclR5cGUiLCJib3JkZXJQb3NpdGlvbiIsImlzQm9yZGVyQm90dG9tIiwiaGlkZGVuQ29udGVudFN0eWxlIiwibWFyZ2luIiwicGFkZGluZyIsIm92ZXJmbG93IiwiX2dldEdsb2JhbENsYXNzTmFtZXMiLCJkaXNhYmxlR2xvYmFsQ2xhc3NOYW1lcyIsInN0eWxlU2hlZXQiLCJhY2MiLCJnZXRHbG9iYWxDbGFzc05hbWVzIiwiR2xvYmFsU2V0dGluZ3MiLCJnbG9iYWxTZXR0aW5ncyIsIl9nZXRHbG9iYWxTZXR0aW5ncyIsImNhbGxiYWNrcyIsImNoYW5nZURlc2NyaXB0aW9uIiwiYWRkQ2hhbmdlTGlzdGVuZXIiLCJfX2lkX18iLCJfZ2V0Q2FsbGJhY2tzIiwicmVtb3ZlQ2hhbmdlTGlzdGVuZXIiLCJnbG9iYWxPYmoiLCJOT19DVVNUT01JWkFUSU9OUyIsInNldHRpbmdzIiwic2NvcGVkU2V0dGluZ3MiLCJpbkN1c3RvbWl6ZXJDb250ZXh0IiwiX2FsbFNldHRpbmdzIiwiX2V2ZW50cyIsIkN1c3RvbWl6YXRpb25zIiwiYXBwbHlTZXR0aW5ncyIsIl9yYWlzZUNoYW5nZSIsImFwcGx5U2NvcGVkU2V0dGluZ3MiLCJzY29wZU5hbWUiLCJnZXRTZXR0aW5ncyIsInByb3BlcnRpZXMiLCJsb2NhbFNldHRpbmdzIiwibG9jYWxTY29wZWRTZXR0aW5ncyIsImdsb2JhbFNjb3BlZFNldHRpbmdzIiwicHJvcGVydGllc18xIiwicHJvcGVydHkiLCJhcHBseUJhdGNoZWRVcGRhdGVzIiwiY29kZSIsInN1cHByZXNzVXBkYXRlIiwiX3N1cHByZXNzVXBkYXRlcyIsIm9ic2VydmUiLCJvbkNoYW5nZSIsInVub2JzZXJ2ZSIsIl9yb290IiwiQ1NQU2V0dGluZ3MiLCJfX3RoZW1lU3RhdGVfXyIsImxhc3RTdHlsZUVsZW1lbnQiLCJyZWdpc3RlcmVkU3R5bGVzIiwicnVuU3RhdGUiLCJwZXJmIiwiZHVyYXRpb24iLCJmbHVzaFRpbWVyIiwiYnVmZmVyIiwicmVnaXN0ZXJlZFRoZW1hYmxlU3R5bGVzIiwiaW5pdGlhbGl6ZVRoZW1lU3RhdGUiLCJEZXB0aHMiLCJEZWZhdWx0UGFsZXR0ZSIsInRoZW1lRGFya2VyIiwidGhlbWVEYXJrIiwidGhlbWVEYXJrQWx0IiwidGhlbWVQcmltYXJ5IiwidGhlbWVTZWNvbmRhcnkiLCJ0aGVtZVRlcnRpYXJ5IiwidGhlbWVMaWdodCIsInRoZW1lTGlnaHRlciIsInRoZW1lTGlnaHRlckFsdCIsImJsYWNrIiwiYmxhY2tUcmFuc2x1Y2VudDQwIiwibmV1dHJhbERhcmsiLCJuZXV0cmFsUHJpbWFyeSIsIm5ldXRyYWxQcmltYXJ5QWx0IiwibmV1dHJhbFNlY29uZGFyeUFsdCIsIm5ldXRyYWxUZXJ0aWFyeSIsIm5ldXRyYWxUZXJ0aWFyeUFsdCIsIm5ldXRyYWxRdWF0ZXJuYXJ5IiwibmV1dHJhbFF1YXRlcm5hcnlBbHQiLCJuZXV0cmFsTGlnaHQiLCJuZXV0cmFsTGlnaHRlciIsIm5ldXRyYWxMaWdodGVyQWx0IiwiYWNjZW50Iiwid2hpdGVUcmFuc2x1Y2VudDQwIiwieWVsbG93RGFyayIsInllbGxvdyIsInllbGxvd0xpZ2h0Iiwib3JhbmdlIiwib3JhbmdlTGlnaHQiLCJvcmFuZ2VMaWdodGVyIiwicmVkRGFyayIsInJlZCIsIm1hZ2VudGFEYXJrIiwibWFnZW50YSIsIm1hZ2VudGFMaWdodCIsInB1cnBsZURhcmsiLCJwdXJwbGUiLCJwdXJwbGVMaWdodCIsImJsdWVEYXJrIiwiYmx1ZU1pZCIsImJsdWUiLCJibHVlTGlnaHQiLCJ0ZWFsRGFyayIsInRlYWwiLCJ0ZWFsTGlnaHQiLCJncmVlbkRhcmsiLCJncmVlbiIsImdyZWVuTGlnaHQiLCJkZXB0aDAiLCJkZXB0aDQiLCJkZXB0aDgiLCJkZXB0aDE2IiwiZGVwdGg2NCIsIkRlZmF1bHRFZmZlY3RzIiwiZWxldmF0aW9uNCIsImVsZXZhdGlvbjgiLCJlbGV2YXRpb24xNiIsImVsZXZhdGlvbjY0Iiwicm91bmRlZENvcm5lcjIiLCJyb3VuZGVkQ29ybmVyNCIsInJvdW5kZWRDb3JuZXI2IiwiZm9udEZhY2UiLCJmb250IiwiX2xhbmd1YWdlIiwiZGVmYXVsdEZvbnRGYW1pbHkiLCJMYW5ndWFnZVRvRm9udE1hcCIsImFyIiwiY3MiLCJldCIsImh1Iiwia28iLCJsdCIsImx2IiwicGwiLCJydSIsInNrIiwidHIiLCJ1ayIsImh5IiwiX2NyZWF0ZUZvbnQiLCJ3ZWlnaHQiLCJmb250RmFtaWx5IiwiTW96T3N4Rm9udFNtb290aGluZyIsIldlYmtpdEZvbnRTbW9vdGhpbmciLCJmb250U2l6ZSIsIlNUT1JBR0VfS0VZIiwibG9jYWxlQ29kZSIsImZvbnRGYW1pbHlXaXRoRmFsbGJhY2siLCJEZWZhdWx0Rm9udFN0eWxlcyIsInBlcnNpc3RlbmNlVHlwZSIsInNhdmVkTGFuZ3VhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRMYW5ndWFnZSIsImxhbmd1YWdlIiwibGFuZyIsIl9nZXRMb2NhbGl6ZWRGb250RmFtaWx5IiwidGlueSIsIl9yZWdpc3RlckZvbnRGYWNlIiwibG9jYWxGb250TmFtZSIsInNyYyIsImxvY2FsRm9udFNyYyIsImZvbnRTdHlsZSIsImZvbnREaXNwbGF5IiwiX3JlZ2lzdGVyRm9udEZhY2VTZXQiLCJiYXNlVXJsIiwiY2RuRm9sZGVyIiwiY2RuRm9udE5hbWUiLCJ1cmxCYXNlIiwibWVyZ2UiLCJfbWVyZ2UiLCJjaXJjdWxhclJlZmVyZW5jZXMiLCJpc0NpcmN1bGFyUmVmZXJlbmNlIiwibWFrZVNlbWFudGljQ29sb3JzIiwiaXNJbnZlcnRlZCIsImRlcENvbW1lbnRzIiwiZGVwIiwibGlzdFRleHRDb2xvciIsImxpc3RUZXh0IiwibWVudUl0ZW1CYWNrZ3JvdW5kQ2hlY2tlZCIsIndhcm5pbmdIaWdobGlnaHQiLCJ3YXJuaW5nVGV4dCIsIm1lc3NhZ2VUZXh0Iiwic3VjY2Vzc1RleHQiLCJfZml4RGVwcmVjYXRlZFNsb3RzIiwiZ2V0U2VtYW50aWNDb2xvcnMiLCJwcmltYXJ5QnV0dG9uQm9yZGVyIiwiZXJyb3JUZXh0IiwibWVzc2FnZUxpbmsiLCJtZXNzYWdlTGlua0hvdmVyZWQiLCJpbmZvSWNvbiIsImVycm9ySWNvbiIsImJsb2NraW5nSWNvbiIsIndhcm5pbmdJY29uIiwic2V2ZXJlV2FybmluZ0ljb24iLCJzdWNjZXNzSWNvbiIsImluZm9CYWNrZ3JvdW5kIiwiZXJyb3JCYWNrZ3JvdW5kIiwiYmxvY2tpbmdCYWNrZ3JvdW5kIiwid2FybmluZ0JhY2tncm91bmQiLCJzZXZlcmVXYXJuaW5nQmFja2dyb3VuZCIsInN1Y2Nlc3NCYWNrZ3JvdW5kIiwiYm9keUJhY2tncm91bmQiLCJib2R5RnJhbWVCYWNrZ3JvdW5kIiwiYWNjZW50QnV0dG9uVGV4dCIsImJ1dHRvbkJhY2tncm91bmQiLCJwcmltYXJ5QnV0dG9uVGV4dCIsInByaW1hcnlCdXR0b25UZXh0SG92ZXJlZCIsInByaW1hcnlCdXR0b25UZXh0UHJlc3NlZCIsImlucHV0QmFja2dyb3VuZCIsImlucHV0Rm9yZWdyb3VuZENoZWNrZWQiLCJsaXN0QmFja2dyb3VuZCIsIm1lbnVCYWNrZ3JvdW5kIiwiY2FyZFN0YW5kb3V0QmFja2dyb3VuZCIsImJvZHlUZXh0Q2hlY2tlZCIsImJ1dHRvblRleHRDaGVja2VkSG92ZXJlZCIsInByaW1hcnlCdXR0b25CYWNrZ3JvdW5kIiwiaW5wdXRCYWNrZ3JvdW5kQ2hlY2tlZCIsImlucHV0SWNvbiIsImlucHV0Rm9jdXNCb3JkZXJBbHQiLCJtZW51SWNvbiIsIm1lbnVIZWFkZXIiLCJhY2NlbnRCdXR0b25CYWNrZ3JvdW5kIiwicHJpbWFyeUJ1dHRvbkJhY2tncm91bmRQcmVzc2VkIiwiaW5wdXRCYWNrZ3JvdW5kQ2hlY2tlZEhvdmVyZWQiLCJpbnB1dEljb25Ib3ZlcmVkIiwibGlua0hvdmVyZWQiLCJwcmltYXJ5QnV0dG9uQmFja2dyb3VuZEhvdmVyZWQiLCJpbnB1dFBsYWNlaG9sZGVyQmFja2dyb3VuZENoZWNrZWQiLCJib2R5QmFja2dyb3VuZENoZWNrZWQiLCJib2R5RnJhbWVEaXZpZGVyIiwiYm9keURpdmlkZXIiLCJ2YXJpYW50Qm9yZGVyIiwiYnV0dG9uQmFja2dyb3VuZENoZWNrZWRIb3ZlcmVkIiwiYnV0dG9uQmFja2dyb3VuZFByZXNzZWQiLCJsaXN0SXRlbUJhY2tncm91bmRDaGVja2VkIiwibGlzdEhlYWRlckJhY2tncm91bmRQcmVzc2VkIiwibWVudUl0ZW1CYWNrZ3JvdW5kUHJlc3NlZCIsImJvZHlCYWNrZ3JvdW5kSG92ZXJlZCIsImJ1dHRvbkJhY2tncm91bmRIb3ZlcmVkIiwiYnV0dG9uQmFja2dyb3VuZERpc2FibGVkIiwiYnV0dG9uQm9yZGVyRGlzYWJsZWQiLCJwcmltYXJ5QnV0dG9uQmFja2dyb3VuZERpc2FibGVkIiwiZGlzYWJsZWRCYWNrZ3JvdW5kIiwibGlzdEl0ZW1CYWNrZ3JvdW5kSG92ZXJlZCIsImxpc3RIZWFkZXJCYWNrZ3JvdW5kSG92ZXJlZCIsIm1lbnVJdGVtQmFja2dyb3VuZEhvdmVyZWQiLCJwcmltYXJ5QnV0dG9uVGV4dERpc2FibGVkIiwiZGlzYWJsZWRTdWJ0ZXh0IiwibGlzdEl0ZW1CYWNrZ3JvdW5kQ2hlY2tlZEhvdmVyZWQiLCJkaXNhYmxlZEJvZHlUZXh0IiwidmFyaWFudEJvcmRlckhvdmVyZWQiLCJidXR0b25UZXh0RGlzYWJsZWQiLCJpbnB1dEljb25EaXNhYmxlZCIsImRpc2FibGVkVGV4dCIsImJvZHlUZXh0IiwiYWN0aW9uTGluayIsImJ1dHRvblRleHQiLCJpbnB1dEJvcmRlckhvdmVyZWQiLCJpbnB1dFRleHQiLCJtZW51SXRlbVRleHQiLCJib2R5U3RhbmRvdXRCYWNrZ3JvdW5kIiwiZGVmYXVsdFN0YXRlQmFja2dyb3VuZCIsImFjdGlvbkxpbmtIb3ZlcmVkIiwiYnV0dG9uVGV4dEhvdmVyZWQiLCJidXR0b25UZXh0Q2hlY2tlZCIsImJ1dHRvblRleHRQcmVzc2VkIiwiaW5wdXRUZXh0SG92ZXJlZCIsIm1lbnVJdGVtVGV4dEhvdmVyZWQiLCJib2R5U3VidGV4dCIsImZvY3VzQm9yZGVyIiwiaW5wdXRCb3JkZXIiLCJzbWFsbElucHV0Qm9yZGVyIiwiaW5wdXRQbGFjZWhvbGRlclRleHQiLCJidXR0b25Cb3JkZXIiLCJkaXNhYmxlZEJvZHlTdWJ0ZXh0IiwiZGlzYWJsZWRCb3JkZXIiLCJidXR0b25CYWNrZ3JvdW5kQ2hlY2tlZCIsIm1lbnVEaXZpZGVyIiwiY2FyZFNoYWRvdyIsImNhcmRTaGFkb3dIb3ZlcmVkIiwiZm9udFVybCIsInJlZ2lzdGVyRGVmYXVsdEZvbnRGYWNlcyIsImZvbnRCYXNlVXJsIiwiX2dldEZvbnRCYXNlVXJsIiwiRGVmYXVsdFNwYWNpbmciLCJzMiIsInMxIiwibDEiLCJsMiIsInBhcnRpYWxUaGVtZSIsIm1lcmdlZFRoZW1lIiwic2VtYW50aWNDb2xvcnMiLCJkZWZhdWx0Rm9udFN0eWxlIiwiZm9udHMiLCJzdHlsZXNoZWV0cyIsIm1lcmdlVGhlbWVzIiwic3BhY2luZyIsIl90aGVtZSIsIlRoZW1lU2V0dGluZ05hbWUiLCJpbml0aWFsaXplVGhlbWVJbkN1c3RvbWl6YXRpb25zIiwibm9ybWFsaXplIiwiYm94U2hhZG93IiwiYm94U2l6aW5nIiwiZ2V0UGxhY2Vob2xkZXJTdHlsZXMiLCJ3YXJuIiwiX2ljb25TZXR0aW5ncyIsIl9fb3B0aW9ucyIsImRpc2FibGVXYXJuaW5ncyIsIndhcm5Pbk1pc3NpbmdJY29ucyIsIl9fcmVtYXBwZWQiLCJzdWJzZXQiLCJub3JtYWxpemVJY29uTmFtZSIsInJlZ2lzdGVySWNvbnMiLCJpY29uU3Vic2V0IiwiaXNSZWdpc3RlcmVkIiwiaWNvbnMiLCJpY29uTmFtZSIsIm5vcm1hbGl6ZWRJY29uTmFtZSIsIl93YXJuRHVwbGljYXRlSWNvbiIsInJlZ2lzdGVySWNvbkFsaWFzIiwibWFwcGVkVG9OYW1lIiwiX21pc3NpbmdJY29ucyIsIl9taXNzaW5nSWNvbnNUaW1lciIsImNvbmNhdFN0eWxlU2V0cyIsInN0eWxlU2V0cyIsInN1YkNvbXBvbmVudFN0eWxlcyIsIm1lcmdlZFNldCIsIndvcmtpbmdTdWJjb21wb25lbnRTdHlsZXMiLCJzdHlsZVNldHNfMSIsImN1cnJlbnRTZXQiLCJjdXJyZW50Q29tcG9uZW50U3R5bGVzIiwic3ViQ29tcFByb3AiLCJtZXJnZWRWYWx1ZSIsImN1cnJlbnRWYWx1ZSIsIm1lcmdlZFN1YlN0eWxlcyIsIndvcmtpbmdTZXRfMSIsInN0eWxlUHJvcHMiLCJzdHlsZUZ1bmN0aW9uT3JPYmplY3QiLCJjb25jYXRTdHlsZVNldHNXaXRoUHJvcHMiLCJhbGxTdHlsZXMiLCJhbGxTdHlsZXNfMSIsIm1lcmdlU3R5bGVTZXRzIiwibWVyZ2VDc3NTZXRzIiwiY2xhc3NOYW1lU2V0IiwiY29uY2F0ZW5hdGVkU3R5bGVTZXQiLCJyZWdpc3RyYXRpb25zIiwic3R5bGVTZXRBcmVhIiwicmVnaXN0cmF0aW9uc18xIiwicGFja2FnZXNDYWNoZSIsIl93aW4iLCJzZXRWZXJzaW9uIiwicGFja2FnZU5hbWUiLCJwYWNrYWdlVmVyc2lvbiIsInBhY2thZ2VzIiwiX19wYWNrYWdlc19fIiwiQ3VzdG9taXplckNvbnRleHQiLCJjdXN0b21pemF0aW9ucyIsImNyZWF0ZUNvbXBvbmVudCIsImZhY3RvcnlPcHRpb25zIiwiUmVzdWx0Q29tcG9uZW50IiwiZmllbGRzIiwiRGVmYXVsdEZpZWxkcyIsIl9nZXRDdXN0b21pemF0aW9ucyIsInN0YXRlUmVkdWNlciIsIl9yZXNvbHZlVG9rZW5zIiwiX3Jlc29sdmVTdHlsZXMiLCJ2aWV3UHJvcHMiLCJzdGF0aWNzIiwiYWxsVG9rZW5zIiwiYWxsVG9rZW5zXzEiLCJjdXJyZW50VG9rZW5zIiwidG9PYmplY3RNYXAiLCJpdGVtcyIsIml0ZW1zXzEiLCJrZXlzXzEiLCJiYXNlRWxlbWVudEV2ZW50cyIsImJhc2VFbGVtZW50UHJvcGVydGllcyIsImh0bWxFbGVtZW50UHJvcGVydGllcyIsImF1ZGlvUHJvcGVydGllcyIsImFuY2hvclByb3BlcnRpZXMiLCJidXR0b25Qcm9wZXJ0aWVzIiwiaW5wdXRQcm9wZXJ0aWVzIiwidGV4dEFyZWFQcm9wZXJ0aWVzIiwiaW1nUHJvcGVydGllcyIsImRpdlByb3BlcnRpZXMiLCJnZXROYXRpdmVQcm9wcyIsImFsbG93ZWRQcm9wTmFtZXMiLCJleGNsdWRlZFByb3BOYW1lcyIsImtleXNfMiIsIl9nZXRUaGVtZWRTcGFjaW5nIiwic3BhY2UiLCJfZ2V0VmFsdWVVbml0R2FwIiwiZ2FwIiwibnVtZXJpY2FsUGFydCIsInBhcnNlRmxvYXQiLCJudW1lcmljYWxWYWx1ZSIsIm51bWVyaWNhbFN0cmluZyIsInBhcnNlUGFkZGluZyIsInBhZGRpbmdWYWx1ZXMiLCJwYWRkaW5nMSIsInBhZGRpbmcyIiwibmFtZU1hcCIsIkdsb2JhbENsYXNzTmFtZXMiLCJpbm5lciIsImFsaWduTWFwIiwiU3RhY2tJdGVtIiwiZ3JvdyIsInNocmluayIsImRpc2FibGVTaHJpbmsiLCJhbGlnbiIsInZlcnRpY2FsRmlsbCIsImFsaWduU2VsZiIsIlN0YWNrIiwiYXMiLCJSb290VHlwZSIsIndyYXAiLCJzdGFja0NoaWxkcmVuIiwiZGVmYXVsdEl0ZW1Qcm9wcyIsIm5hdGl2ZVByb3BzIiwiU2xvdHMiLCJob3Jpem9udGFsIiwicmV2ZXJzZWQiLCJob3Jpem9udGFsQWxpZ24iLCJ2ZXJ0aWNhbEFsaWduIiwiY2hpbGRyZW5HYXAiLCJtYXhIZWlnaHQiLCJtYXhXaWR0aCIsInJvd0dhcCIsImNvbHVtbkdhcCIsInNwbGl0R2FwIiwiY2FsY3VsYXRlZEdhcCIsInBhcnNlR2FwIiwiaG9yaXpvbnRhbE1hcmdpbiIsInZlcnRpY2FsTWFyZ2luIiwiY2hpbGRTdHlsZXMiLCJ0ZXh0T3ZlcmZsb3ciLCJjb21tb25TZWxlY3RvcnMiLCJmbGV4V3JhcCIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsImZsZXhEaXJlY3Rpb24iLCJJdGVtIiwidXNlQ3VzdG9taXphdGlvblNldHRpbmdzIiwic3R5bGVkIiwiYmFzZVN0eWxlcyIsImdldFByb3BzIiwiY3VzdG9taXphYmxlIiwicHVyZSIsInNjb3BlIiwiV3JhcHBlZCIsImN1c3RvbWl6ZWRTdHlsZXMiLCJkaXIiLCJhZGRpdGlvbmFsUHJvcHMiLCJfX2NhY2hlZElucHV0c19fIiwiY29uY2F0ZW5hdGVkU3R5bGVzIiwiX19ub1N0eWxlT3ZlcnJpZGVfXyIsInB1cmVDb21wb25lbnQiLCJfbWVtb2l6ZWRDbGFzc05hbWVzIiwicmV0VmFsIiwiY2xhc3NOYW1lc0Z1bmN0aW9uIiwic3R5bGVDYWxjQ291bnQiLCJnZXRDbGFzc05hbWVzQ291bnQiLCJjdXJyZW50TWVtb2l6ZWRDbGFzc05hbWVzIiwidXNlU3RhdGljU3R5bGVzIiwiZGlzYWJsZUNhY2hpbmciLCJfdHJhdmVyc2VNYXAiLCJlbmFibGVDbGFzc05hbWVDYWNoZUZ1bGxXYXJuaW5nIiwidHJhY2UiLCJfdHJhdmVyc2VFZGdlIiwiX25vcm1hbGl6ZVZhbHVlIiwiaW5wdXRzIiwiYXBwZW5kRnVuY3Rpb24iLCJwYXJlbnQiLCJmdW5jdGlvbnMiLCJpbml0aWFsaXplQ29tcG9uZW50UmVmIiwibWV0aG9kcyIsImV4dGVuZENvbXBvbmVudCIsIl9vbk1vdW50IiwiX29uVXBkYXRlIiwiX29uVW5tb3VudCIsIl9zZXRDb21wb25lbnRSZWYiLCJjb21wb25lbnRSZWYiLCJwcmV2UHJvcHMiLCJLZXl0aXBFdmVudHMiLCJ1c2VDb25zdCIsIm1lcmdlQXJpYUF0dHJpYnV0ZVZhbHVlcyIsImFyaWFBdHRyaWJ1dGVzIiwibWVyZ2VkQXR0cmlidXRlIiwic2hhbGxvd0NvbXBhcmUiLCJmaWx0ZXJlZEFzc2lnbiIsImlzQWxsb3dlZCIsInNvdXJjZU9iamVjdCIsIktFWVRJUF9BRERFRCIsIktFWVRJUF9SRU1PVkVEIiwiS0VZVElQX1VQREFURUQiLCJQRVJTSVNURURfS0VZVElQX0FEREVEIiwiUEVSU0lTVEVEX0tFWVRJUF9SRU1PVkVEIiwiUEVSU0lTVEVEX0tFWVRJUF9FWEVDVVRFIiwiRU5URVJfS0VZVElQX01PREUiLCJFWElUX0tFWVRJUF9NT0RFIiwiRXZlbnRHcm91cCIsIl9pZCIsIl91bmlxdWVJZCIsIl9wYXJlbnQiLCJfZXZlbnRSZWNvcmRzIiwicmFpc2UiLCJldmVudE5hbWUiLCJldmVudEFyZ3MiLCJidWJibGVFdmVudCIsIl9pc0VsZW1lbnQiLCJjcmVhdGVFdmVudCIsImV2IiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImNyZWF0ZUV2ZW50T2JqZWN0IiwiZXZPYmoiLCJmaXJlRXZlbnQiLCJldmVudHMiLCJfX2V2ZW50c19fIiwiZXZlbnRSZWNvcmRzIiwiZXZlbnRSZWNvcmRMaXN0IiwibGlzdEluZGV4IiwicmVjb3JkIiwib2JqZWN0Q2FsbGJhY2siLCJpc09ic2VydmVkIiwiaXNEZWNsYXJlZCIsImRlY2xhcmVkRXZlbnRzIiwiX19kZWNsYXJlZEV2ZW50cyIsIkhUTUxFbGVtZW50IiwiZGlzcG9zZSIsIl9pc0Rpc3Bvc2VkIiwib25BbGwiLCJ1c2VDYXB0dXJlIiwicGFyZW50XzEiLCJldmVudFJlY29yZCIsInByb2Nlc3NFbGVtZW50RXZlbnQiLCJlbGVtZW50Q2FsbGJhY2siLCJ0YXJnZXRBcnJheUxvb2t1cCIsInRhcmdldEFycmF5IiwiZGVjbGFyZSIsImdldElkIiwicmVzZXRJZHMiLCJjb3VudGVyIiwiS2V5dGlwTWFuYWdlciIsImtleXRpcHMiLCJwZXJzaXN0ZWRLZXl0aXBzIiwic2VxdWVuY2VNYXBwaW5nIiwiaW5LZXl0aXBNb2RlIiwic2hvdWxkRW50ZXJLZXl0aXBNb2RlIiwiZGVsYXlVcGRhdGluZ0tleXRpcENoYW5nZSIsIl9pbnN0YW5jZSIsImluaXQiLCJyZWdpc3RlciIsImtleXRpcFByb3BzIiwicGVyc2lzdGVkIiwiYWRkUGFyZW50T3ZlcmZsb3ciLCJrZXlTZXF1ZW5jZXMiLCJ1bmlxdWVLZXl0aXAiLCJfZ2V0VW5pcXVlS3RwIiwidW5pcXVlSUQiLCJldmVudF8xIiwia2V5dGlwIiwidXBkYXRlIiwibmV3S2V5dGlwUHJvcHMiLCJvbGRLZXlUaXAiLCJ2aXNpYmxlIiwidW5yZWdpc3RlciIsImtleXRpcFRvUmVtb3ZlIiwiZW50ZXJLZXl0aXBNb2RlIiwiZXhpdEtleXRpcE1vZGUiLCJnZXRLZXl0aXBzIiwiZnVsbFNlcXVlbmNlIiwicGFyZW50S2V5dGlwIiwib3ZlcmZsb3dTZXRTZXF1ZW5jZSIsIm1lbnVFeGVjdXRlIiwib3ZlcmZsb3dCdXR0b25TZXF1ZW5jZXMiLCJrZXl0aXBTZXF1ZW5jZXMiLCJmaW5kSW5kZXgiLCJhcnJheXNFcXVhbCIsImFycmF5MSIsImFycmF5MiIsInNlcXVlbmNlc1RvSUQiLCJwcmV2VmFsdWUiLCJrZXlTZXF1ZW5jZSIsInVzZUtleXRpcERhdGEiLCJ1bmlxdWVJZCIsImtleXRpcE1hbmFnZXIiLCJwcmV2T3B0aW9ucyIsIm5hdGl2ZUtleXRpcFByb3BzIiwiYXJpYURlc2NyaWJlZEJ5Iiwia2V5dGlwSWQiLCJkZXNjcmliZWRCeVByZXBlbmQiLCJkZXNjcmliZWRieSIsImdldEFyaWFEZXNjcmliZWRCeSIsIm92ZXJmbG93S2V5U2VxdWVuY2VzIiwib3ZlcmZsb3dTZXF1ZW5jZUxlbiIsIm92ZXJmbG93U2VxdWVuY2UiLCJpdGVtVG9BZGQiLCJjb3B5IiwiYWRkRWxlbWVudEF0SW5kZXgiLCJtZXJnZU92ZXJmbG93cyIsImdldEtleXRpcERhdGEiLCJLZXl0aXBEYXRhIiwiZ2V0Q2xhc3NOYW1lcyIsIkxpbmtCYXNlIiwiX3N1cGVyIiwiX2xpbmsiLCJfcmVuZGVyQ29udGVudCIsImtleXRpcEF0dHJpYnV0ZXMiLCJpc0J1dHRvbiIsIl9nZXRSb290VHlwZSIsIl9hZGp1c3RQcm9wc0ZvclJvb3RUeXBlIiwicmVzdFByb3BzIiwiZ2V0U3R5bGVzIiwibGlua0NvbG9yIiwibGlua0ludGVyYWN0ZWRDb2xvciIsImxpbmtEaXNhYmxlZENvbG9yIiwiZm9jdXNCb3JkZXJDb2xvciIsInRleHREZWNvcmF0aW9uIiwiYm9yZGVyQm90dG9tIiwiYmFja2dyb3VuZCIsImJhY2tncm91bmRDb2xvciIsImN1cnNvciIsInRleHRBbGlnbiIsInVzZXJTZWxlY3QiLCJNc0hpZ2hDb250cmFzdEFkanVzdCIsIkRpcmVjdGlvbmFsS2V5Q29kZXMiLCJtb3VudENvdW50ZXJzIiwic2V0TW91bnRDb3VudGVycyIsImN1cnJWYWx1ZSIsIkZvY3VzUmVjdHMiLCJyb290UmVmIiwiZGlzYWJsZUZvY3VzUmVjdHMiLCJfb25Nb3VzZURvd24iLCJfb25Qb2ludGVyRG93biIsIl9vbktleURvd24iLCJDb2x1bW5BY3Rpb25zTW9kZSIsIkNvbnN0cmFpbk1vZGUiLCJDb2x1bW5EcmFnRW5kTG9jYXRpb24iLCJEZXRhaWxzTGlzdExheW91dE1vZGUiLCJDaGVja2JveFZpc2liaWxpdHkiLCJBc3luYyIsIl90aW1lb3V0SWRzIiwiX2ltbWVkaWF0ZUlkcyIsIl9pbnRlcnZhbElkcyIsIl9hbmltYXRpb25GcmFtZUlkcyIsIl9vbkVycm9ySGFuZGxlciIsIl9ub29wIiwiY2xlYXJJbW1lZGlhdGUiLCJjbGVhckludGVydmFsIiwidGltZW91dElkIiwic2V0SW1tZWRpYXRlIiwidGFyZ2V0RWxlbWVudCIsImltbWVkaWF0ZUlkIiwiX2xvZ0Vycm9yIiwic2V0SW50ZXJ2YWwiLCJpbnRlcnZhbElkIiwidGhyb3R0bGUiLCJ3YWl0IiwibGFzdFJlc3VsdCIsImxhc3RBcmdzIiwid2FpdE1TIiwibGVhZGluZyIsInRyYWlsaW5nIiwibGFzdEV4ZWN1dGVUaW1lIiwidXNlckNhbGwiLCJ3YWl0TGVuZ3RoIiwiZGVib3VuY2UiLCJub09wRnVuY3Rpb24iLCJjYW5jZWwiLCJmbHVzaCIsIm1heFdhaXQiLCJsYXN0Q2FsbFRpbWUiLCJtYXJrRXhlY3V0ZWQiLCJpbnZva2VGdW5jdGlvbiIsImV4ZWN1dGVJbW1lZGlhdGVseSIsIm1heFdhaXREZWx0YSIsIm1heFdhaXRFeHBpcmVkIiwicmVzdWx0RnVuY3Rpb24iLCJhbmltYXRpb25GcmFtZUlkIiwiYW5pbWF0aW9uRnJhbWVDYWxsYmFjayIsImdldFBhcmVudCIsImFsbG93VmlydHVhbFBhcmVudHMiLCJfdmlydHVhbCIsImdldFZpcnR1YWxQYXJlbnQiLCJlbGVtZW50Q29udGFpbnMiLCJpc0NvbnRhaW5lZCIsIm5leHRQYXJlbnQiLCJjc3MiLCJjcmVhdGVSZXNvbHZlciIsImxvY2FsIiwiY3JlYXRlTWVyZ2VkUmVmIiwibmV3UmVmcyIsInJlc29sdmVyIiwiZmluZEVsZW1lbnRSZWN1cnNpdmUiLCJtYXRjaEZ1bmN0aW9uIiwiSVNfRk9DVVNBQkxFX0FUVFJJQlVURSIsImZvY3VzRmlyc3RDaGlsZCIsImdldE5leHRFbGVtZW50IiwidGFyZ2V0VG9Gb2N1c09uTmV4dFJlcGFpbnQiLCJmb2N1c2FibGVFbGVtZW50IiwiZm9jdXNBc3luYyIsImdldFByZXZpb3VzRWxlbWVudCIsImN1cnJlbnRFbGVtZW50IiwiY2hlY2tOb2RlIiwic3VwcHJlc3NQYXJlbnRUcmF2ZXJzYWwiLCJ0cmF2ZXJzZUNoaWxkcmVuIiwiaW5jbHVkZUVsZW1lbnRzSW5Gb2N1c1pvbmVzIiwiYWxsb3dGb2N1c1Jvb3QiLCJ0YWJiYWJsZSIsImlzQ3VycmVudEVsZW1lbnRWaXNpYmxlIiwiaXNFbGVtZW50VmlzaWJsZSIsImlzRWxlbWVudEZvY3VzWm9uZSIsImlzRWxlbWVudEZvY3VzU3ViWm9uZSIsImNoaWxkTWF0Y2giLCJsYXN0RWxlbWVudENoaWxkIiwiaXNFbGVtZW50VGFiYmFibGUiLCJjaGlsZE1hdGNoU2libGluZ01hdGNoIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsImNoaWxkTWF0Y2hQYXJlbnQiLCJwYXJlbnRFbGVtZW50IiwiY2hpbGRNYXRjaFBhcmVudE1hdGNoIiwic2libGluZ01hdGNoIiwic3VwcHJlc3NDaGlsZFRyYXZlcnNhbCIsImZpcnN0RWxlbWVudENoaWxkIiwidmlzaWJpbGl0eUF0dHJpYnV0ZSIsIm9mZnNldEhlaWdodCIsIm9mZnNldFBhcmVudCIsImlzVmlzaWJsZSIsImNoZWNrVGFiSW5kZXgiLCJ0YWJJbmRleCIsInRhYkluZGV4QXR0cmlidXRlVmFsdWUiLCJpc0ZvY3VzYWJsZUF0dHJpYnV0ZSIsImlzVGFiSW5kZXhTZXQiLCJzaG91bGRXcmFwRm9jdXMiLCJub1dyYXBEYXRhQXR0cmlidXRlIiwiYXR0cmlidXRlIiwiZWxlbWVudE1hdGNoIiwidGVzdEVsZW1lbnQiLCJlbGVtZW50Q29udGFpbnNBdHRyaWJ1dGUiLCJfc2Nyb2xsYmFyV2lkdGgiLCJyYWlzZUNsaWNrIiwiRXZlbnQiLCJjcmVhdGVOZXdFdmVudCIsIkRBVEFfSVNfU0NST0xMQUJMRV9BVFRSSUJVVEUiLCJzY3JvbGxEaXYiLCJvZmZzZXRXaWR0aCIsImNsaWVudFdpZHRoIiwiZmluZFNjcm9sbGFibGVQYXJlbnQiLCJzdGFydGluZ0VsZW1lbnQiLCJjb21wdXRlZFN0eWxlcyIsImdldENvbXB1dGVkU3R5bGUiLCJvdmVyZmxvd1kiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiREFUQV9QT1JUQUxfQVRUUklCVVRFIiwicG9ydGFsQ29udGFpbnNFbGVtZW50IiwiRm9jdXNab25lRGlyZWN0aW9uIiwiRm9jdXNab25lVGFiYmFibGVFbGVtZW50cyIsImZvY3VzWm9uZVN0eWxlcyIsIlRBQklOREVYIiwiTk9fVkVSVElDQUxfV1JBUCIsIk5PX0hPUklaT05UQUxfV1JBUCIsIkxBUkdFX0RJU1RBTkNFX0ZST01fQ0VOVEVSIiwiTEFSR0VfTkVHQVRJVkVfRElTVEFOQ0VfRlJPTV9DRU5URVIiLCJJY29uVHlwZSIsIkltYWdlRml0IiwiSW1hZ2VDb3ZlclN0eWxlIiwiSW1hZ2VMb2FkU3RhdGUiLCJfYWxsSW5zdGFuY2VzIiwiX291dGVyWm9uZXMiLCJBTExPV0VEX0lOUFVUX1RZUEVTIiwiQUxMT1dfVklSVFVBTF9FTEVNRU5UUyIsIkZvY3VzWm9uZSIsIl9tZXJnZWRSZWYiLCJfb25Gb2N1cyIsIl9wb3J0YWxDb250YWluc0VsZW1lbnQiLCJuZXdBY3RpdmVFbGVtZW50Iiwib25BY3RpdmVFbGVtZW50Q2hhbmdlZCIsImRvTm90QWxsb3dGb2N1c0V2ZW50VG9Qcm9wYWdhdGUiLCJzdG9wRm9jdXNQcm9wYWdhdGlvbiIsIm9uRm9jdXNOb3RpZmljYXRpb24iLCJvbkZvY3VzIiwic2hvdWxkRm9jdXNJbm5lckVsZW1lbnRXaGVuUmVjZWl2ZWRGb2N1cyIsImRlZmF1bHRUYWJiYWJsZUVsZW1lbnQiLCJpc0ltbWVkaWF0ZURlc2NlbmRhbnQiLCJfaXNJbW1lZGlhdGVEZXNjZW5kYW50T2Zab25lIiwibWF5YmVFbGVtZW50VG9Gb2N1cyIsIl9hY3RpdmVFbGVtZW50IiwiaW5pdGlhbEVsZW1lbnRGb2N1c2VkIiwiX3NldEZvY3VzQWxpZ25tZW50IiwiX3VwZGF0ZVRhYkluZGV4ZXMiLCJfb25CbHVyIiwiX3NldFBhcmtlZEZvY3VzIiwiX3NldEFjdGl2ZUVsZW1lbnQiLCJkaXJlY3Rpb24iLCJpc0lubmVyWm9uZUtleXN0cm9rZSIsInBhZ2luZ1N1cHBvcnREaXNhYmxlZCIsInNob3VsZEVudGVySW5uZXJab25lIiwib25LZXlEb3duIiwiX2dldERvY3VtZW50IiwiX2lzSW5uZXJab25lIiwiaW5uZXJab25lIiwiX2dldEZpcnN0SW5uZXJab25lIiwiZm9jdXNFbGVtZW50IiwiX3RyeUludm9rZUNsaWNrRm9yRm9jdXNhYmxlIiwidmVydGljYWwiLCJfcHJldmVudERlZmF1bHRXaGVuSGFuZGxlZCIsIl9tb3ZlRm9jdXNMZWZ0IiwiX21vdmVGb2N1c1JpZ2h0IiwiX21vdmVGb2N1c1VwIiwiX21vdmVGb2N1c0Rvd24iLCJfbW92ZUZvY3VzUGFnaW5nIiwiYWxsb3dUYWJLZXkiLCJoYW5kbGVUYWJLZXkiLCJfaXNFbGVtZW50SW5wdXQiLCJmb2N1c0NoYW5nZWQiLCJfcHJvY2Vzc2luZ1RhYktleSIsIl9zaG91bGRXcmFwRm9jdXMiLCJzaG91bGRSZXNldEFjdGl2ZUVsZW1lbnRXaGVuVGFiRnJvbVpvbmUiLCJfaXNDb250ZW50RWRpdGFibGVFbGVtZW50IiwiX3Nob3VsZElucHV0TG9zZUZvY3VzIiwiX2dldEhvcml6b250YWxEaXN0YW5jZUZyb21DZW50ZXIiLCJpc0ZvcndhcmQiLCJhY3RpdmVSZWN0IiwidGFyZ2V0UmVjdCIsImxlZnRBbGlnbm1lbnQiLCJfZm9jdXNBbGlnbm1lbnQiLCJ0YXJnZXRSZWN0VG9wIiwiYWN0aXZlUmVjdEJvdHRvbSIsInRhcmdldFJlY3RCb3R0b20iLCJhY3RpdmVSZWN0VG9wIiwiYWJzIiwiZ2V0T3V0ZXJab25lcyIsIl9vbktleURvd25DYXB0dXJlIiwiem9uZSIsIl93aW5kb3dFbGVtZW50IiwiZGVmYXVsdEFjdGl2ZUVsZW1lbnQiLCJzaG91bGRGb2N1c09uTW91bnQiLCJfbGFzdEluZGV4UGF0aCIsInByZXZlbnRGb2N1c1Jlc3RvcmF0aW9uIiwiZWxlbWVudFRvRm9jdXMiLCJwYXRoXzEiLCJuZXh0Q2hpbGQiLCJnZXRGb2N1c2FibGVCeUluZGV4UGF0aCIsIl9kZWZhdWx0Rm9jdXNFbGVtZW50Iiwicm9vdFByb3BzIiwiYXJpYUxhYmVsbGVkQnkiLCJkaXZQcm9wcyIsIlRhZyIsIl9ldmFsdWF0ZUZvY3VzQmVmb3JlUmVuZGVyIiwiZWxlbWVudFJlZiIsIm9uTW91c2VEb3duQ2FwdHVyZSIsImZvcmNlSW50b0ZpcnN0RWxlbWVudCIsIm93bmVyWm9uZUVsZW1lbnQiLCJfZ2V0T3duZXJab25lIiwib3duZXJab25lIiwiZm9jdXNMYXN0IiwiZm9yY2VBbGlnbm1lbnQiLCJvbkJlZm9yZUZvY3VzIiwic2hvdWxkUmVjZWl2ZUZvY3VzIiwic2V0Rm9jdXNBbGlnbm1lbnQiLCJwb2ludCIsImZvY3VzZWRFbGVtZW50Iiwic2hvdWxkUmVzdG9yZUZvY3VzIiwiZ2V0RWxlbWVudEluZGV4UGF0aCIsImlzUGFya2VkIiwiX2lzUGFya2VkIiwiX3BhcmtlZFRhYkluZGV4IiwicHJldmlvdXNBY3RpdmVFbGVtZW50IiwicHJldmVudERlZmF1bHRXaGVuSGFuZGxlZCIsInNob3VsZFJhaXNlQ2xpY2tzIiwiX21vdmVGb2N1cyIsImdldERpc3RhbmNlRnJvbUNlbnRlciIsInVzZURlZmF1bHRXcmFwIiwiY2FuZGlkYXRlRGlzdGFuY2UiLCJjYW5kaWRhdGVFbGVtZW50IiwiY2hhbmdlZEZvY3VzIiwiaXNCaWRpcmVjdGlvbmFsIiwiYmlkaXJlY3Rpb25hbCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImVsZW1lbnREaXN0YW5jZSIsImlzQ2lyY3VsYXJOYXZpZ2F0aW9uIiwidGFyZ2V0VG9wIiwiZGlzdGFuY2UiLCJzaG91bGRXcmFwIiwidG9GaXhlZCIsInNjcm9sbGFibGVQYXJlbnQiLCJ0YXJnZXRCb3R0b20iLCJwYWdlc2l6ZSIsImNsaWVudEhlaWdodCIsImlzSG9yaXpvbnRhbCIsImlzVmVydGljYWwiLCJyZWN0IiwidG9wXzEiLCJjaGlsZEluZGV4IiwiaXNSYW5nZVNlbGVjdGVkIiwiaW5wdXRWYWx1ZSIsImlzUmVhZG9ubHkiLCJyZWFkT25seSIsInNob3VsZElucHV0TG9zZUZvY3VzT25BcnJvd0tleSIsImNoZWNrRm9yTm9XcmFwIiwicGxhY2Vob2xkZXIiLCJpbWFnZSIsIk1TX0lDT04iLCJnZXRJY29uQ29udGVudCIsImdldEljb24iLCJpY29uQ2xhc3NOYW1lIiwiRm9udEljb24iLCJpY29uQ29udGVudCIsImNvbnRhaW5lclByb3BzIiwicm9sZSIsImFyaWFMYWJlbCIsIkltYWdlQmFzZSIsIl9jb3ZlclN0eWxlIiwicG9ydHJhaXQiLCJfaW1hZ2VFbGVtZW50IiwiX2ZyYW1lRWxlbWVudCIsIl9vbkltYWdlTG9hZGVkIiwib25Mb2FkIiwiX2NvbXB1dGVDb3ZlclN0eWxlIiwibG9hZFN0YXRlIiwiX29uSW1hZ2VFcnJvciIsIm5vdExvYWRlZCIsInByZXZTdGF0ZSIsIl9jaGVja0ltYWdlTG9hZGVkIiwib25Mb2FkaW5nU3RhdGVDaGFuZ2UiLCJpbWFnZVByb3BzIiwiYWx0Iiwic2hvdWxkRmFkZUluIiwic2hvdWxkU3RhcnRWaXNpYmxlIiwiaW1hZ2VGaXQiLCJtYXhpbWl6ZUZyYW1lIiwiY292ZXJTdHlsZSIsImlzTG9hZGVkIiwiaXNMYW5kc2NhcGUiLCJsYW5kc2NhcGUiLCJpc0NlbnRlciIsImNlbnRlciIsImlzQ2VudGVyQ29udGFpbiIsImNlbnRlckNvbnRhaW4iLCJpc0NlbnRlckNvdmVyIiwiY2VudGVyQ292ZXIiLCJpc0NvbnRhaW4iLCJjb250YWluIiwiaXNDb3ZlciIsImNvdmVyIiwiaXNOb25lIiwibm9uZSIsImlzRXJyb3IiLCJpc05vdEltYWdlRml0IiwibmF0dXJhbFdpZHRoIiwibmF0dXJhbEhlaWdodCIsImNvbXBsZXRlIiwiX3N2Z1JlZ2V4IiwiZGVzaXJlZFJhdGlvIiwibmF0dXJhbFJhdGlvIiwicm9vdE1heGltaXplRnJhbWUiLCJpbWFnZUNlbnRlciIsImltYWdlQ29udGFpbiIsImltYWdlQ292ZXIiLCJpbWFnZUNlbnRlckNvbnRhaW4iLCJpbWFnZUNlbnRlckNvdmVyIiwiaW1hZ2VOb25lIiwiaW1hZ2VMYW5kc2NhcGUiLCJpbWFnZVBvcnRyYWl0IiwiSW1hZ2UiLCJJbWFnZUZpdFN0eWxlcyIsInN1cHBvcnRzT2JqZWN0Rml0IiwibXNNYXhUb3VjaFBvaW50cyIsImZhbGxiYWNrT2JqZWN0Rml0U3R5bGVzIiwib2JqZWN0Rml0IiwiSWNvbiIsIkljb25CYXNlIiwiX29uSW1hZ2VMb2FkaW5nU3RhdGVDaGFuZ2UiLCJpbWFnZUxvYWRFcnJvciIsImltYWdlRXJyb3JBcyIsImlzUGxhY2Vob2xkZXIiLCJpc0ltYWdlIiwiaWNvblR5cGUiLCJpY29uQ29udGVudENoaWxkcmVuIiwiSW1hZ2VUeXBlIiwiaW1hZ2VDb250YWluZXIiLCJtZXJnZVNldHRpbmdzIiwib2xkU2V0dGluZ3MiLCJuZXdTZXR0aW5ncyIsIl9pc1NldHRpbmdzRnVuY3Rpb24iLCJfc2V0dGluZ3NNZXJnZVdpdGgiLCJtZXJnZVNjb3BlZFNldHRpbmdzIiwic2NvcGVkU2V0dGluZ3NGcm9tUHJvcHMiLCJvbGRTY29wZWRTZXR0aW5ncyIsIm5ld1Njb3BlZFNldHRpbmdzIiwiX3Njb3BlZFNldHRpbmdzTWVyZ2VXaXRoIiwiQ3VzdG9taXplciIsIl9vbkN1c3RvbWl6YXRpb25DaGFuZ2UiLCJjb250ZXh0VHJhbnNmb3JtIiwicGFyZW50Q29udGV4dCIsIm5ld0NvbnRleHQiLCJtZXJnZUN1c3RvbWl6YXRpb25zIiwiZ2V0RmFicmljVGhlbWUiLCJGYWJyaWNCYXNlIiwiX3Jvb3RFbGVtZW50IiwiX3JlbW92ZUNsYXNzTmFtZUZyb21Cb2R5IiwiUm9vdCIsIl9nZXRDbGFzc05hbWVzIiwiY29udGV4dERpciIsInBhZ2VEaXIiLCJjb21wb25lbnREaXIiLCJyb290RGlyIiwibmVlZHNUaGVtZSIsImdldERpciIsInJlbmRlcmVkQ29udGVudCIsIl9hZGRDbGFzc05hbWVUb0JvZHkiLCJhcHBseVRoZW1lIiwiYXBwbHlUaGVtZVRvQm9keSIsImNsYXNzTmFtZXNfMSIsImN1cnJlbnREb2NfMSIsImJvZHlUaGVtZWQiLCJpbmhlcml0Rm9udCIsIkZhYnJpYyIsInNldFZpcnR1YWxQYXJlbnQiLCJ2aXJ0dWFsQ2hpbGQiLCJ2aXJ0dWFsUGFyZW50Iiwib2xkUGFyZW50IiwiZGVzdCIsImNvbmNhdFN0eWxlcyIsIkNvbXBvc2VkQ29tcG9uZW50IiwicmVzdWx0Q2xhc3MiLCJDb21wb25lbnRXaXRoSW5qZWN0ZWRQcm9wcyIsIl9zdHlsZUNhY2hlIiwiX29uU2V0dGluZ0NoYW5nZWQiLCJtZXJnZWRTdHlsZXMiLCJtZXJnZWQiLCJfZGVmYXVsdEhvc3RTZWxlY3RvciIsIl9sYXllcnNCeUhvc3RJZCIsIl9maWx0ZXJlZEV2ZW50UHJvcHMiLCJMYXllckJhc2UiLCJfcm9vdFJlZiIsIl9jcmVhdGVMYXllckVsZW1lbnQiLCJob3N0SWQiLCJob3N0IiwiX2dldEhvc3QiLCJfcmVtb3ZlTGF5ZXJFbGVtZW50IiwibGF5ZXJFbGVtZW50IiwiaW5zZXJ0Rmlyc3QiLCJvbkxheWVyRGlkTW91bnQiLCJvbkxheWVyTW91bnRlZCIsInJlZ2lzdGVyTGF5ZXIiLCJldmVudEJ1YmJsaW5nRW5hYmxlZCIsIl9vbkZpbHRlckV2ZW50IiwiX2dldEZpbHRlcmVkRXZlbnRzIiwiaWR4IiwidW5yZWdpc3RlckxheWVyIiwib25MYXllcldpbGxVbm1vdW50IiwiaXNOb3RIb3N0IiwiZ2V0RWxlbWVudEJ5SWQiLCJkZWZhdWx0SG9zdFNlbGVjdG9yIiwiQlVCQkxJTkdfUEhBU0UiLCJDb2xsYXBzZUFsbFZpc2liaWxpdHkiLCJyb290Tm9Ib3N0IiwiR3JvdXBTcGFjZXIiLCJpbmRlbnRXaWR0aCIsIkNoZWNrQmFzZSIsInVzZUZhc3RJY29ucyIsIkljb25Db21wb25lbnQiLCJjaXJjbGUiLCJjaGVjayIsIkNoZWNrR2xvYmFsQ2xhc3NOYW1lcyIsImNoZWNrSG9zdCIsIkNoZWNrIiwiY2hlY2tCb3hIZWlnaHQiLCJzaGFyZWRDaXJjbGVDaGVjayIsIkRldGFpbHNSb3dHbG9iYWxDbGFzc05hbWVzIiwiY29tcGFjdCIsImNlbGwiLCJjZWxsQW5pbWF0aW9uIiwiY2VsbENoZWNrIiwiY2VsbE1lYXN1cmVyIiwibGlzdENlbGxGaXJzdENoaWxkIiwiaXNDb250ZW50VW5zZWxlY3RhYmxlIiwiaXNTZWxlY3RlZCIsImlzQ2hlY2tWaXNpYmxlIiwiaXNSb3dIZWFkZXIiLCJERUZBVUxUX0NFTExfU1RZTEVfUFJPUFMiLCJjZWxsTGVmdFBhZGRpbmciLCJjZWxsUmlnaHRQYWRkaW5nIiwiY2VsbEV4dHJhUmlnaHRQYWRkaW5nIiwiREVGQVVMVF9ST1dfSEVJR0hUUyIsInJvd0hlaWdodCIsImNvbXBhY3RSb3dIZWlnaHQiLCJyb3dWZXJ0aWNhbFBhZGRpbmciLCJjb21wYWN0Um93VmVydGljYWxQYWRkaW5nIiwidG9vbHRpcEhvc3QiLCJjZWxsSXNDaGVjayIsImNvbGxhcHNlQnV0dG9uIiwiaXNDb2xsYXBzZWQiLCJpc0FsbFNlbGVjdGVkIiwiaXNTZWxlY3RBbGxIaWRkZW4iLCJpc1Jlc2l6aW5nQ29sdW1uIiwiY2VsbFNpemVyIiwiaXNSZXNpemluZyIsImRyb3BIaW50Q2lyY2xlU3R5bGUiLCJkcm9wSGludENhcmV0U3R5bGUiLCJkcm9wSGludExpbmVTdHlsZSIsImNlbGxUaXRsZSIsImNlbGxOYW1lIiwiZmlsdGVyQ2hldnJvbiIsImdyaXBwZXJCYXJWZXJ0aWNhbCIsImNoZWNrVG9vbHRpcCIsImdldENlbGxTdHlsZXMiLCJjZWxsU3R5bGVQcm9wcyIsIndoaXRlU3BhY2UiLCJpc0hlYWRlciIsIm1lbW9pemVyIiwib3V0ZXIiLCJpbm5lck1lbW9pemVyIiwiZGVmYXVsdFJlbmRlciIsImlubmVyUHJvcHMiLCJvdXRlclByb3BzIiwiY29tcG9zZVJlbmRlckZ1bmN0aW9uIiwiRmFzdENoZWNrIiwiX2RlZmF1bHRDaGVja2JveFJlbmRlciIsImNoZWNrYm94UHJvcHMiLCJfZmFzdERlZmF1bHRDaGVja2JveFJlbmRlciIsIlNlbGVjdGlvbk1vZGUiLCJTZWxlY3Rpb25EaXJlY3Rpb24iLCJEZXRhaWxzUm93Q2hlY2siLCJjYW5TZWxlY3QiLCJhbnlTZWxlY3RlZCIsImNoZWNrQ2xhc3NOYW1lIiwib25SZW5kZXJEZXRhaWxzQ2hlY2tib3giLCJidXR0b25Qcm9wcyIsImRlZmF1bHRDaGVja2JveFJlbmRlciIsIm9uUmVuZGVyQ2hlY2tib3giLCJkZXRhaWxzQ2hlY2tib3hQcm9wcyIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsIlNFTEVDVElPTl9DSEFOR0UiLCJTZWxlY3RBbGxWaXNpYmlsaXR5IiwiRHJhZ0Ryb3BIZWxwZXIiLCJfc2VsZWN0aW9uIiwic2VsZWN0aW9uIiwiX2RyYWdFbnRlckNvdW50cyIsIl9hY3RpdmVUYXJnZXRzIiwiX2xhc3RJZCIsIl9pbml0aWFsaXplZCIsImRyYWdEcm9wT3B0aW9ucyIsIl9vbk1vdXNlVXAiLCJfb25Eb2N1bWVudE1vdXNlVXAiLCJvbkRyYWdTdGFydCIsIm9uRHJhZ0xlYXZlIiwib25EcmFnRW50ZXIiLCJvbkRyYWdFbmQiLCJvbkRyb3AiLCJvbkRyYWdPdmVyIiwib25Nb3VzZURvd24iLCJpc0RyYWdnYWJsZSIsImlzRHJvcHBhYmxlIiwiYWN0aXZlVGFyZ2V0IiwiZXZlbnRNYXAiLCJ1cGRhdGVEcm9wU3RhdGVfMSIsInVwZGF0ZURyb3BTdGF0ZSIsImRyYWdEcm9wVGFyZ2V0IiwiX2lzRHJhZ2dhYmxlIiwiX2lzRHJvcHBhYmxlIiwiZXZlbnRNYXBfMSIsImlzSGFuZGxlZCIsIl9vbkRyYWdFbmQiLCJfaXNEcmFnZ2luZyIsInNldERhdGEiLCJoYW5kbGVyc18xIiwiX2RyYWdEYXRhIiwiZHJvcFRhcmdldCIsIl9vbk1vdXNlTW92ZSIsIl9pc0NoaWxkIiwiX29uTW91c2VMZWF2ZSIsImV2ZW50VGFyZ2V0IiwiZHJhZ1RhcmdldCIsImNoaWxkRWxlbWVudCIsImNhbkRyYWciLCJkcmFnQ29udGV4dCIsImNhbkRyb3AiLCJEZXRhaWxzQ29sdW1uQmFzZSIsIl9vblJlbmRlckNvbHVtbkhlYWRlclRvb2x0aXAiLCJ0b29sdGlwSG9zdFByb3BzIiwiaG9zdENsYXNzTmFtZSIsIl9vbkNvbHVtbkNsaWNrIiwib25Db2x1bW5DbGljayIsImNvbHVtbiIsImNvbHVtbkFjdGlvbnNNb2RlIiwiX29uRHJhZ1N0YXJ0IiwiaXRlbUluZGV4Iiwic2VsZWN0ZWRJdGVtcyIsIl9jbGFzc05hbWVzIiwiX3VwZGF0ZUhlYWRlckRyYWdJbmZvIiwiYm9yZGVyV2hpbGVEcmFnZ2luZyIsIl9hc3luYyIsIm5vQm9yZGVyV2hpbGVEcmFnZ2luZyIsInNldERyYWdnZWRJdGVtSW5kZXgiLCJ1cGRhdGVEcmFnSW5mbyIsIl9vbkNvbHVtbkNvbnRleHRNZW51Iiwib25Db2x1bW5Db250ZXh0TWVudSIsIl9vblJvb3RNb3VzZURvd24iLCJjb2x1bW5JbmRleCIsInBhcmVudElkIiwib25SZW5kZXJDb2x1bW5IZWFkZXJUb29sdGlwIiwiaGVhZGVyQ2xhc3NOYW1lIiwiaXNBY3Rpb25hYmxlIiwiaXNFbXB0eSIsImlzSWNvblZpc2libGUiLCJpc1NvcnRlZCIsImlzR3JvdXBlZCIsImlzRmlsdGVyZWQiLCJpc1BhZGRlZCIsImlzSWNvbk9ubHkiLCJ0cmFuc2l0aW9uRHVyYXRpb25EcmFnIiwidHJhbnNpdGlvbkR1cmF0aW9uRHJvcCIsImlzU29ydGVkRGVzY2VuZGluZyIsImRyYWdnYWJsZSIsImNhbGN1bGF0ZWRXaWR0aCIsImdyaXBwZXJCYXJWZXJ0aWNhbFN0eWxlIiwiY2VsbFRvb2x0aXAiLCJzZXRBcmlhRGVzY3JpYmVkQnkiLCJfaGFzQWNjZXNzaWJsZUxhYmVsIiwib25Db250ZXh0TWVudSIsImhhc0Ryb3Bkb3duIiwiaXNNZW51T3BlbiIsImFjY2Vzc2libGVMYWJlbCIsIm5lYXJJY29uIiwic29ydEljb24iLCJfcmVuZGVyQWNjZXNzaWJsZUxhYmVsIiwiZHJhZ0Ryb3BIZWxwZXIiLCJfYWRkRHJhZ0Ryb3BIYW5kbGluZyIsImlzRHJvcHBlZCIsImJvcmRlckFmdGVyRHJvcHBpbmciLCJub0JvcmRlckFmdGVyRHJvcHBpbmciLCJUUkFOU0lUSU9OX0RVUkFUSU9OX0RST1AiLCJfZHJhZ0Ryb3BTdWJzY3JpcHRpb24iLCJfZ2V0Q29sdW1uRHJhZ0Ryb3BPcHRpb25zIiwic2VsZWN0aW9uSW5kZXgiLCJmaWx0ZXJBcmlhTGFiZWwiLCJzb3J0QXNjZW5kaW5nQXJpYUxhYmVsIiwic29ydERlc2NlbmRpbmdBcmlhTGFiZWwiLCJncm91cEFyaWFMYWJlbCIsIkRldGFpbHNDb2x1bW4iLCJjb2xvcnMiLCJpY29uRm9yZWdyb3VuZENvbG9yIiwiaGVhZGVyRm9yZWdyb3VuZENvbG9yIiwiaGVhZGVyQmFja2dyb3VuZENvbG9yIiwiZHJvcGRvd25DaGV2cm9uRm9yZWdyb3VuZENvbG9yIiwicmVzaXplckNvbG9yIiwibmVhckljb25TdHlsZSIsInBhZGRpbmdMZWZ0IiwiYm9yZGVyQWZ0ZXJEcmFnT3JEcm9wIiwicGFkZGluZ1JpZ2h0IiwiYWxpZ25Db250ZW50IiwiTk9fQ09MVU1OUyIsIl9saWVzQmV0d2VlbiIsIl9pc0JlZm9yZSIsIl9pc0FmdGVyIiwiX3N0b3BQcm9wYWdhdGlvbiIsIkRldGFpbHNIZWFkZXIiLCJEZXRhaWxzSGVhZGVyQmFzZSIsIl9yb290Q29tcG9uZW50IiwiX2RyYWdnZWRDb2x1bW5JbmRleCIsIl9kcm9wSGludERldGFpbHMiLCJfdXBkYXRlRHJvcHBpbmdTdGF0ZSIsIl9yZXNldERyb3BIaW50cyIsIl9vbkRyYWdPdmVyIiwiX2NvbXB1dGVEcm9wSGludFRvQmVTaG93biIsIl9vbkRyb3AiLCJjb2x1bW5SZW9yZGVyUHJvcHMiLCJfZ2V0Q29sdW1uUmVvcmRlclByb3BzIiwidGFyZ2V0SW5kZXgiLCJfY3VycmVudERyb3BIaW50SW5kZXgiLCJpc1ZhbGlkRHJvcCIsIl9pc1ZhbGlkQ3VycmVudERyb3BIaW50SW5kZXgiLCJfb25Ecm9wSW5kZXhJbmZvIiwic291cmNlSW5kZXgiLCJvbkNvbHVtbkRyb3AiLCJkcmFnRHJvcERldGFpbHMiLCJkcmFnZ2VkSW5kZXgiLCJoYW5kbGVDb2x1bW5SZW9yZGVyIiwiX3VwZGF0ZURyYWdJbmZvIiwiX2lzQ2hlY2tib3hDb2x1bW5IaWRkZW4iLCJfZ2V0RHJvcEhpbnRQb3NpdGlvbnMiLCJvbkNvbHVtbkRyYWdTdGFydCIsIm9uQ29sdW1uRHJhZ0VuZCIsImNvbHVtbkRyYWdFbmRMb2NhdGlvbiIsIl9pc0V2ZW50T25IZWFkZXIiLCJkcm9wTG9jYXRpb24iLCJwcmV2UmVmIiwicHJldlgiLCJwcmV2TWlkIiwiZnJvemVuQ29sdW1uQ291bnRGcm9tU3RhcnQiLCJmcm96ZW5Db2x1bW5Db3VudEZyb21FbmQiLCJkcm9wSGludEVsZW1lbnQiLCJvZmZzZXRMZWZ0IiwibmV3TWlkIiwib3JpZ2luWCIsInN0YXJ0WCIsImVuZFgiLCJkcm9wSGludEVsZW1lbnRSZWYiLCJpc1J0bCIsImV2ZW50WFJlbGF0aXZlUG9zaXRpb24iLCJjdXJyZW50RHJvcEhpbnRJbmRleCIsImN1cnJlbnRJbmRleCIsImxhc3RWYWxpZENvbHVtbiIsImluZGV4VG9VcGRhdGUiLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJtaWRkbGVJbmRleCIsIl91cGRhdGVEcm9wSGludEVsZW1lbnQiLCJfcmVuZGVyQ29sdW1uU2l6ZXIiLCJjb2x1bW5SZXNpemVEZXRhaWxzIiwiaXNSZXNpemFibGUiLCJvbkJsdXIiLCJfb25TaXplckJsdXIiLCJjZWxsU2l6ZXJTdGFydCIsImNlbGxTaXplckVuZCIsImNlbGxJc1Jlc2l6aW5nIiwib25Eb3VibGVDbGljayIsIl9vblNpemVyRG91YmxlQ2xpY2siLCJfb25TZWxlY3RBbGxDbGlja2VkIiwidG9nZ2xlQWxsU2VsZWN0ZWQiLCJjb2x1bW5JbmRleEF0dHIiLCJOdW1iZXIiLCJjb2x1bW5NaW5XaWR0aCIsIl9vblJvb3RNb3VzZU1vdmUiLCJpc1NpemluZyIsIl9vblJvb3RLZXlEb3duIiwib25Db2x1bW5SZXNpemVkIiwiaW5jcmVtZW50IiwiX29uU2l6ZXJNb3VzZU1vdmUiLCJvbkNvbHVtbklzU2l6aW5nQ2hhbmdlZCIsIm1vdmVtZW50IiwiX29uU2l6ZXJNb3VzZVVwIiwiX29uVG9nZ2xlQ29sbGFwc2VBbGwiLCJvblRvZ2dsZUNvbGxhcHNlQWxsIiwibmV3Q29sbGFwc2VkIiwiaXNBbGxDb2xsYXBzZWQiLCJfZHJhZ0Ryb3BIZWxwZXIiLCJtaW5pbXVtUGl4ZWxzRm9yRHJhZyIsIl9vblNlbGVjdGlvbkNoYW5nZWQiLCJfc3Vic2NyaXB0aW9uT2JqZWN0IiwiX2dldEhlYWRlckRyYWdEcm9wT3B0aW9ucyIsInByZXZpb3VzQ29sdW1ucyIsImFyaWFMYWJlbEZvclRvZ2dsZUFsbEdyb3Vwc0J1dHRvbiIsImFyaWFMYWJlbEZvclNlbGVjdEFsbENoZWNrYm94Iiwic2VsZWN0QWxsVmlzaWJpbGl0eSIsImFyaWFMYWJlbEZvclNlbGVjdGlvbkNvbHVtbiIsInNlbGVjdGlvbk1vZGUiLCJncm91cE5lc3RpbmdEZXB0aCIsImNoZWNrYm94VmlzaWJpbGl0eSIsInNob3dDaGVja2JveCIsImlzQ2hlY2tib3hIaWRkZW4iLCJpc0NoZWNrYm94QWx3YXlzVmlzaWJsZSIsImFsd2F5cyIsIm9uTW91c2VNb3ZlIiwiY29sbGFwc2VBbGxWaXNpYmlsaXR5IiwiY2VsbElzR3JvdXBFeHBhbmRlciIsIl9yZW5kZXJEcm9wSGludCIsIl9yZW5kZXJDb2x1bW5EaXZpZGVyIiwic2l6aW5nT3ZlcmxheSIsIm9uTW91c2VVcCIsImNvbHVtblJlb3JkZXJPcHRpb25zIiwiZGlzcGxheVByb3BlcnR5IiwiY2xpZW50UmVjdCIsImhlYWRlciIsIm9uUmVuZGVyRGl2aWRlciIsImRyb3BIaW50SW5kZXgiLCJkcm9wSGludFN0eWxlIiwib25Db2x1bW5BdXRvUmVzaXplZCIsImNlbGxTaXplckZhZGVJblN0eWxlcyIsImNlbGxTdHlsZXMiLCJtaW5XaWR0aCIsInBhZGRpbmdCb3R0b20iLCJwYWRkaW5nVG9wIiwiY2VsbFdyYXBwZXJQYWRkZWQiLCJjZWxsSXNBY3Rpb25hYmxlIiwiY2VsbElzRW1wdHkiLCJ0cmFuc2Zvcm1PcmlnaW4iLCJEZXRhaWxzUm93RmllbGRzIiwiY29sdW1uU3RhcnRJbmRleCIsInJvd0NsYXNzTmFtZXMiLCJvblJlbmRlckl0ZW1Db2x1bW4iLCJnZXRDZWxsVmFsdWVLZXkiLCJjZWxsc0J5Q29sdW1uIiwiZW5hYmxlVXBkYXRlQW5pbWF0aW9ucyIsImNlbGxWYWx1ZUtleXNSZWYiLCJjZWxsVmFsdWVLZXlzIiwib25SZW5kZXIiLCJnZXRWYWx1ZUtleSIsImNlbGxDb250ZW50c1JlbmRlciIsImZpZWxkTmFtZSIsImdldENlbGxUZXh0IiwicHJldmlvdXNWYWx1ZUtleSIsImNlbGxWYWx1ZUtleSIsInNob3dBbmltYXRpb24iLCJpc011bHRpbGluZSIsImNlbGxQYWRkZWQiLCJjZWxsVW5wYWRkZWQiLCJnZXRTZWxlY3Rpb25TdGF0ZSIsImlzSW5kZXhTZWxlY3RlZCIsImlzU2VsZWN0aW9uTW9kYWwiLCJpc01vZGFsIiwiRGV0YWlsc1JvdyIsIkRldGFpbHNSb3dCYXNlIiwiX2NlbGxNZWFzdXJlciIsIl9mb2N1c1pvbmUiLCJzZWxlY3Rpb25TdGF0ZSIsImlzRHJvcHBpbmciLCJkcmFnRHJvcEV2ZW50cyIsIl9kcm9wcGluZ0NsYXNzTmFtZXMiLCJjb2x1bW5NZWFzdXJlSW5mbyIsIm9uRGlkTW91bnQiLCJfZ2V0Um93RHJhZ0Ryb3BPcHRpb25zIiwiX29uRGlkTW91bnRDYWxsZWQiLCJwcmV2aW91c1Byb3BzIiwibmV3V2lkdGgiLCJvbk1lYXN1cmVEb25lIiwib25XaWxsVW5tb3VudCIsInVzZVJlZHVjZWRSb3dSZW5kZXJlciIsIm5ld1NlbGVjdGlvblN0YXRlIiwib25SZW5kZXJDaGVjayIsIl9vblJlbmRlckNoZWNrIiwicm93V2lkdGgiLCJnZXRSb3dBcmlhTGFiZWwiLCJnZXRSb3dBcmlhRGVzY3JpYmVkQnkiLCJjaGVja0J1dHRvbkFyaWFMYWJlbCIsImNoZWNrYm94Q2VsbENsYXNzTmFtZSIsInJvd0ZpZWxkc0FzIiwiUm93RmllbGRzIiwiX2oiLCJfayIsImRyb3BwaW5nQ2xhc3NOYW1lIiwiY2FuU2VsZWN0SXRlbSIsImFyaWFTZWxlY3RlZCIsIl9yb3dDbGFzc05hbWVzIiwicm93RmllbGRzIiwiY2hlY2tDZWxsIiwiY2hlY2tDb3ZlciIsIm1lYXN1cmVDZWxsIiwiZXZlbnRzVG9SZWdpc3RlciIsIl9sIiwiX20iLCJfbyIsImRlZmF1bHRIZWFkZXJUZXh0IiwiZGVmYXVsdE1ldGFUZXh0IiwiZGVmYXVsdEJhY2tncm91bmQiLCJkZWZhdWx0SG92ZXJIZWFkZXJUZXh0IiwiZGVmYXVsdEhvdmVyTWV0YVRleHQiLCJkZWZhdWx0SG92ZXJCYWNrZ3JvdW5kIiwic2VsZWN0ZWRIZWFkZXJUZXh0Iiwic2VsZWN0ZWRNZXRhVGV4dCIsInNlbGVjdGVkQmFja2dyb3VuZCIsInNlbGVjdGVkSG92ZXJIZWFkZXJUZXh0Iiwic2VsZWN0ZWRIb3Zlck1ldGFUZXh0Iiwic2VsZWN0ZWRIb3ZlckJhY2tncm91bmQiLCJmb2N1c0hlYWRlclRleHQiLCJmb2N1c01ldGFUZXh0IiwiZm9jdXNCYWNrZ3JvdW5kIiwiZm9jdXNIb3ZlckJhY2tncm91bmQiLCJzZWxlY3RlZFN0eWxlcyIsImJvcmRlclRvcCIsImNhbm5vdFNlbGVjdFN0eWxlcyIsInJvb3RDb21wYWN0U3R5bGVzIiwibWluSGVpZ2h0IiwiY2VsbENvbXBhY3RTdHlsZXMiLCJkZWZhdWx0Q2VsbFN0eWxlcyIsIndvcmRCcmVhayIsIlNFTEVDVElPTl9JTkRFWF9BVFRSSUJVVEVfTkFNRSIsIlNFTEVDVElPTl9UT0dHTEVfQVRUUklCVVRFX05BTUUiLCJTRUxFQ1RJT05fSU5WT0tFX0FUVFJJQlVURV9OQU1FIiwiU0VMRUNUQUxMX1RPR0dMRV9BTExfQVRUUklCVVRFX05BTUUiLCJTZWxlY3Rpb25ab25lIiwiaWdub3JlTmV4dEZvY3VzIiwiX2hhbmRsZU5leHRGb2N1cyIsIl9vblNlbGVjdGlvbkNoYW5nZSIsIl9vbk1vdXNlRG93bkNhcHR1cmUiLCJfaGFzQXR0cmlidXRlIiwiaXNUb2dnbGVNb2RpZmllclByZXNzZWQiLCJfaXNDdHJsUHJlc3NlZCIsIl9pc01ldGFQcmVzc2VkIiwiX2dldFNlbGVjdGlvbk1vZGUiLCJfc2hvdWxkSGFuZGxlRm9jdXMiLCJpc1RvZ2dsZSIsIml0ZW1Sb290IiwiX2ZpbmRJdGVtUm9vdCIsIl9nZXRJdGVtSW5kZXgiLCJzZXRJbmRleFNlbGVjdGVkIiwiZW50ZXJNb2RhbE9uVG91Y2giLCJfaXNUb3VjaCIsInNldE1vZGFsIiwiX3NldElzVG91Y2giLCJpc1NlbGVjdGVkT25Gb2N1cyIsIl9vbkl0ZW1TdXJmYWNlQ2xpY2siLCJfdXBkYXRlTW9kaWZpZXJzIiwiX2lzU2VsZWN0aW9uRGlzYWJsZWQiLCJfc2hvdWxkQXV0b1NlbGVjdCIsIl9pc1NoaWZ0UHJlc3NlZCIsIl9vbkludm9rZU1vdXNlRG93biIsImRpc2FibGVBdXRvU2VsZWN0T25JbnB1dEVsZW1lbnRzIiwiX29uVG91Y2hTdGFydENhcHR1cmUiLCJlbmFibGVUb3VjaEludm9jYXRpb25UYXJnZXQiLCJpc1NlbGVjdGlvbkRpc2FibGVkIiwiX29uVG9nZ2xlQWxsQ2xpY2siLCJfb25Ub2dnbGVDbGljayIsIl9vbkludm9rZUNsaWNrIiwiX29uQ29udGV4dE1lbnUiLCJvbkl0ZW1Db250ZXh0TWVudSIsImdldEl0ZW1zIiwiX29uRG91YmxlQ2xpY2siLCJvbkl0ZW1JbnZva2VkIiwiX2lzSW5wdXRFbGVtZW50IiwiaXNTZWxlY3RBbGxLZXkiLCJpc0NsZWFyU2VsZWN0aW9uS2V5Iiwic2V0QWxsU2VsZWN0ZWQiLCJnZXRTZWxlY3RlZENvdW50IiwiX2ZpbmRTY3JvbGxQYXJlbnRBbmRUcnlDbGVhck9uRW1wdHlDbGljayIsIm9uS2V5RG93bkNhcHR1cmUiLCJvbkZvY3VzQ2FwdHVyZSIsInNldENoYW5nZUV2ZW50cyIsInRvZ2dsZUluZGV4U2VsZWN0ZWQiLCJzaW5nbGUiLCJfaXNUYWJQcmVzc2VkIiwic2VsZWN0VG9JbmRleCIsIl9jbGVhckFuZFNlbGVjdEluZGV4Iiwic2Nyb2xsUGFyZW50IiwiX3RyeUNsZWFyT25FbXB0eUNsaWNrIiwiTm9kZSIsInNlbGVjdGlvblByZXNlcnZlZE9uRW1wdHlDbGljayIsIl9pc05vbkhhbmRsZWRDbGljayIsImluZGV4VmFsdWUiLCJoYW5kbGVGb2N1cyIsIl9zaG91bGRIYW5kbGVGb2N1c1RpbWVvdXRJZCIsImlzVG91Y2giLCJfaXNUb3VjaFRpbWVvdXRJZCIsIlNlbGVjdGlvbiIsIm9uU2VsZWN0aW9uQ2hhbmdlZCIsImdldEtleSIsIl9nZXRLZXkiLCJkZWZhdWx0R2V0S2V5IiwiX2NoYW5nZUV2ZW50U3VwcHJlc3Npb25Db3VudCIsIl9leGVtcHRlZENvdW50IiwiX2FuY2hvcmVkSW5kZXgiLCJfdW5zZWxlY3RhYmxlQ291bnQiLCJfY2FuU2VsZWN0SXRlbSIsIl9pc01vZGFsIiwic2V0SXRlbXMiLCJpc0VuYWJsZWQiLCJzdXBwcmVzc0NoYW5nZSIsIl9oYXNDaGFuZ2VkIiwiX2NoYW5nZSIsInNob3VsZENsZWFyIiwibmV3S2V5VG9JbmRleE1hcCIsIm5ld1Vuc2VsZWN0YWJsZUluZGljZXMiLCJoYXNTZWxlY3Rpb25DaGFuZ2VkIiwiX3NldEFsbFNlbGVjdGVkIiwibmV3RXhlbXB0ZWRJbmRpY2llcyIsIm5ld0V4ZW1wdGVkQ291bnQiLCJpbmRleFByb3BlcnR5IiwiX2V4ZW1wdGVkSW5kaWNlcyIsImV4ZW1wdEtleSIsIl9pdGVtcyIsIm5ld0luZGV4IiwiX2lzQWxsU2VsZWN0ZWQiLCJfa2V5VG9JbmRleE1hcCIsIl91bnNlbGVjdGFibGVJbmRpY2VzIiwiX3NlbGVjdGVkSXRlbXMiLCJfdXBkYXRlQ291bnQiLCJnZXRTZWxlY3RlZEluZGljZXMiLCJfc2VsZWN0ZWRJbmRpY2VzIiwic2VsZWN0YWJsZUNvdW50IiwiaXNLZXlTZWxlY3RlZCIsInNldEtleVNlbGVjdGVkIiwic2hvdWxkQW5jaG9yIiwiaXNFeGVtcHQiLCJzZWxlY3RUb0tleSIsImNsZWFyU2VsZWN0aW9uIiwiYW5jaG9ySW5kZXgiLCJ0b2dnbGVLZXlTZWxlY3RlZCIsInRvZ2dsZVJhbmdlU2VsZWN0ZWQiLCJwcmVzZXJ2ZU1vZGFsU3RhdGUiLCJTcGlubmVyU2l6ZSIsIlNwaW5uZXJUeXBlIiwibGlzdENlbGwiLCJiZXppZXJzIiwiZHJvcEljb24iLCJleHBhbmQiLCJ0aXRsZSIsImljb25UYWciLCJEZWxheWVkUmVuZGVyIiwiaXNSZW5kZXJlZCIsIl90aW1lb3V0SWQiLCJTcGlubmVyQmFzZSIsImFyaWFMaXZlIiwibGFiZWwiLCJsYWJlbFBvc2l0aW9uIiwic3RhdHVzTWVzc2FnZSIsInN0eWxlU2l6ZSIsInNjcmVlblJlYWRlclRleHQiLCJzcGluQW5pbWF0aW9uIiwiU3Bpbm5lciIsImJvcmRlclRvcENvbG9yIiwiR3JvdXBIZWFkZXJCYXNlIiwiX3RvZ2dsZUNvbGxhcHNlIiwib25Ub2dnbGVDb2xsYXBzZSIsImlzR3JvdXBMb2FkaW5nIiwibmV3TG9hZGluZ1Zpc2libGUiLCJpc0xvYWRpbmdWaXNpYmxlIiwiX29uS2V5VXAiLCJvbkdyb3VwSGVhZGVyS2V5VXAiLCJzaG91bGRPcGVuIiwiX29uVG9nZ2xlU2VsZWN0R3JvdXBDbGljayIsIm9uVG9nZ2xlU2VsZWN0R3JvdXAiLCJfb25IZWFkZXJDbGljayIsIm9uR3JvdXBIZWFkZXJDbGljayIsIl9vblJlbmRlclRpdGxlIiwiYXJpYUNvbFNwYW4iLCJoZWFkZXJDb3VudCIsImhhc01vcmVEYXRhIiwiZ3JvdXBMZXZlbCIsInZpZXdwb3J0IiwibG9hZGluZ1RleHQiLCJvblJlbmRlclRpdGxlIiwib25SZW5kZXJHcm91cEhlYWRlckNoZWNrYm94IiwiaXNDb2xsYXBzZWRHcm91cFNlbGVjdFZpc2libGUiLCJleHBhbmRCdXR0b25Qcm9wcyIsImV4cGFuZEJ1dHRvbkljb24iLCJzZWxlY3RBbGxCdXR0b25Qcm9wcyIsImFyaWFQb3NJblNldCIsImFyaWFTZXRTaXplIiwiaXNTZWxlY3Rpb25DaGVja1Zpc2libGUiLCJjdXJyZW50bHlTZWxlY3RlZCIsIm9uS2V5VXAiLCJncm91cEhlYWRlckNvbnRhaW5lciIsImV4cGFuZElzQ29sbGFwc2VkIiwiR3JvdXBIZWFkZXIiLCJmaW5hbFJvd0hlaWdodCIsImNoZWNrRXhwYW5kUmVzZXRTdHlsZXMiLCJ0cmFuc2l0aW9uRGVsYXkiLCJHcm91cFNob3dBbGwiLCJzaG93QWxsTGlua1RleHQiLCJvblRvZ2dsZVN1bW1hcml6ZSIsIm1lbW9pemVkT25DbGljayIsIkdyb3VwRm9vdGVyIiwiZm9vdGVyVGV4dCIsIlNjcm9sbFRvTW9kZSIsIlNQQUNFUl9LRVlfUFJFRklYIiwiRU1QVFlfUkVDVCIsIl9tZWFzdXJlUGFnZVJlY3QiLCJfbWVhc3VyZVN1cmZhY2VSZWN0IiwiX21lYXN1cmVTY3JvbGxSZWN0IiwiTGlzdCIsIl9zdXJmYWNlIiwiX3BhZ2VSZWZzIiwiX2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsInJlbmRlckNvdW50IiwiX3Jlc2V0UmVxdWlyZWRXaW5kb3dzIiwiX3JlcXVpcmVkUmVjdCIsIl9tZWFzdXJlVmVyc2lvbiIsIl9pbnZhbGlkYXRlUGFnZUNhY2hlIiwiX3VwZGF0ZVBhZ2VzIiwiX29uUmVuZGVyUm9vdCIsInN1cmZhY2VFbGVtZW50IiwiX29uUmVuZGVyU3VyZmFjZSIsInN1cmZhY2VSZWYiLCJwYWdlRWxlbWVudHMiLCJfb25SZW5kZXJQYWdlIiwicGFnZVByb3BzIiwib25SZW5kZXJDZWxsIiwicGFnZSIsImNlbGxSb2xlIiwiY2VsbHMiLCJpdGVtS2V5IiwiaWdub3JlU2Nyb2xsaW5nU3RhdGUiLCJpc1Njcm9sbGluZyIsInBhZ2VzIiwiX2VzdGltYXRlZFBhZ2VIZWlnaHQiLCJfdG90YWxFc3RpbWF0ZXMiLCJfcmVxdWlyZWRXaW5kb3dzQWhlYWQiLCJfcmVxdWlyZWRXaW5kb3dzQmVoaW5kIiwiX29uQXN5bmNTY3JvbGwiLCJfb25Bc3luY0lkbGUiLCJfb25Bc3luY1Jlc2l6ZSIsIl9vblNjcm9sbGluZ0RvbmUiLCJfY2FjaGVkUGFnZUhlaWdodHMiLCJfZm9jdXNlZEluZGV4IiwiX3BhZ2VDYWNoZSIsInNjcm9sbFRvSW5kZXgiLCJtZWFzdXJlSXRlbSIsInNjcm9sbFRvTW9kZSIsIl9nZXRSZW5kZXJDb3VudCIsImFsbG93ZWRSZWN0IiwiX2FsbG93ZWRSZWN0IiwiaXRlbXNQZXJQYWdlIiwicGFnZVNwZWNpZmljYXRpb24iLCJfZ2V0UGFnZVNwZWNpZmljYXRpb24iLCJwYWdlSGVpZ2h0IiwiaXRlbUNvdW50IiwiX3Njcm9sbEVsZW1lbnQiLCJzY3JvbGxSZWN0Iiwic2Nyb2xsV2luZG93IiwiaXRlbVBvc2l0aW9uV2l0aGluUGFnZSIsIml0ZW1JbmRleEluUGFnZSIsInNjcm9sbEJvdHRvbSIsImdldFN0YXJ0SXRlbUluZGV4SW5WaWV3IiwicGFnZXNfMSIsImlzU3BhY2VyIiwiX3Njcm9sbFRvcCIsInRvdGFsUm93SGVpZ2h0IiwiX29uU2Nyb2xsIiwiZmluYWxTdGF0ZSIsInBhZ2VzVmVyc2lvbiIsImdldFBhZ2VIZWlnaHQiLCJfdXBkYXRlUGFnZU1lYXN1cmVtZW50cyIsIl9tYXRlcmlhbGl6ZWRSZWN0IiwiX2hhc0NvbXBsZXRlZEZpcnN0UmVuZGVyIiwib25QYWdlc1VwZGF0ZWQiLCJuZXdQcm9wcyIsIm5ld1N0YXRlIiwib2xkUGFnZXMiLCJuZXdQYWdlcyIsIm9sZFBhZ2UiLCJuZXdQYWdlIiwiX3VwZGF0ZVJlbmRlclJlY3RzIiwiZ2V0VG90YWxMaXN0SGVpZ2h0IiwiX3N1cmZhY2VSZWN0Iiwib25SZW5kZXJTdXJmYWNlIiwib25SZW5kZXJSb290IiwicGFnZXNfMiIsIl9yZW5kZXJQYWdlIiwiZmluYWxPblJlbmRlclN1cmZhY2UiLCJfc2hvdWxkVmlydHVhbGl6ZSIsIm9uU2hvdWxkVmlydHVhbGl6ZSIsImNhY2hlZFBhZ2UiLCJ1c2VQYWdlQ2FjaGUiLCJwYWdlRWxlbWVudCIsInBhZ2VTdHlsZSIsIl9nZXRQYWdlU3R5bGUiLCJvblJlbmRlclBhZ2UiLCJuZXdSZWYiLCJnZXRQYWdlU3R5bGUiLCJpbmRleFN0cmluZyIsImlubmVyUmVjdCIsIm91dGVyUmVjdCIsInJlbmRlcmVkV2luZG93c0FoZWFkIiwicmVuZGVyZWRXaW5kb3dzQmVoaW5kIiwicmVxdWlyZWRXaW5kb3dzQWhlYWQiLCJyZXF1aXJlZFdpbmRvd3NCZWhpbmQiLCJ3aW5kb3dzQWhlYWQiLCJ3aW5kb3dzQmVoaW5kIiwibmV3TGlzdFN0YXRlIiwiX2J1aWxkUGFnZXMiLCJvbGRMaXN0UGFnZXMiLCJfbm90aWZ5UGFnZUNoYW5nZXMiLCJvblBhZ2VBZGRlZCIsIm9uUGFnZVJlbW92ZWQiLCJyZW5kZXJlZEluZGV4ZXMiLCJvbGRQYWdlc18xIiwibmV3UGFnZXNfMSIsIl9vblBhZ2VBZGRlZCIsIl9vblBhZ2VSZW1vdmVkIiwiaGVpZ2h0Q2hhbmdlZCIsIl9tZWFzdXJlUGFnZSIsImhhc0NoYW5nZWRIZWlnaHQiLCJjYWNoZWRIZWlnaHQiLCJtZWFzdXJlVmVyc2lvbiIsIm5ld0NsaWVudFJlY3QiLCJyb3VuZCIsIm1hdGVyaWFsaXplZFJlY3QiLCJwYWdlVG9wIiwiY3VycmVudFNwYWNlciIsImZvY3VzZWRJbmRleCIsInNob3VsZFZpcnR1YWxpemUiLCJpc0ZpcnN0UmVuZGVyIiwidGhpc18xIiwicGFnZURhdGEiLCJuZXdSZWN0IiwicGFnZUJvdHRvbSIsImlzUGFnZVJlbmRlcmVkIiwiaXNQYWdlSW5BbGxvd2VkUmFuZ2UiLCJpc1BhZ2VJblJlcXVpcmVkUmFuZ2UiLCJpdGVtc0luUGFnZSIsIl9jcmVhdGVQYWdlIiwiX3Zpc2libGVSZWN0IiwidmlzaWJsZVJlY3QiLCJnZXRQYWdlU3BlY2lmaWNhdGlvbiIsIl9nZXRJdGVtQ291bnRGb3JQYWdlIiwiX2dldFBhZ2VIZWlnaHQiLCJ2aXNpYmlsZVJlY3QiLCJnZXRJdGVtQ291bnRGb3JQYWdlIiwicGFnZUtleSIsInN1cmZhY2VSZWN0Iiwic2Nyb2xsSGVpZ2h0IiwiX3Njcm9sbEhlaWdodCIsInZpc2libGVUb3AiLCJpbm5lckhlaWdodCIsIl9leHBhbmRSZWN0IiwiY29udGFpbnNGb2N1cyIsInBhZ2VzQmVmb3JlIiwicGFnZXNBZnRlciIsIkdyb3VwZWRMaXN0U2VjdGlvbiIsIl9saXN0IiwiX3N1Ykdyb3VwUmVmcyIsIl9kcm9wcGluZ0NsYXNzTmFtZSIsIl9vblJlbmRlckdyb3VwSGVhZGVyIiwiX29uUmVuZGVyR3JvdXBTaG93QWxsIiwiX29uUmVuZGVyR3JvdXBGb290ZXIiLCJfcmVuZGVyU3ViR3JvdXAiLCJzdWJHcm91cCIsInN1Ykdyb3VwSW5kZXgiLCJnZXRHcm91cEl0ZW1MaW1pdCIsImdyb3VwUHJvcHMiLCJoZWFkZXJQcm9wcyIsInNob3dBbGxQcm9wcyIsImZvb3RlclByb3BzIiwibGlzdFByb3BzIiwib25SZW5kZXJHcm91cEhlYWRlciIsIm9uUmVuZGVyR3JvdXBTaG93QWxsIiwib25SZW5kZXJHcm91cEZvb3RlciIsIm5lc3RpbmdEZXB0aCIsImxldmVsIiwic2hvd0VtcHR5R3JvdXBzIiwiX2dldEdyb3VwS2V5IiwiZ3JvdXBJbmRleCIsIl9nZXRHcm91cERyYWdEcm9wT3B0aW9ucyIsImlzR3JvdXAiLCJuZXdJc0Ryb3BwaW5nIiwiZ3JvdXBlZExpc3RDbGFzc05hbWVzIiwiSW5maW5pdHkiLCJpc1Nob3dBbGxWaXNpYmxlIiwiaXNTaG93aW5nQWxsIiwiaGFzTmVzdGVkR3JvdXBzIiwiZGl2aWRlclByb3BzIiwiYXJpYUNvbnRyb2xzUHJvcHMiLCJncm91cGVkTGlzdElkIiwiZ3JvdXBIZWFkZXJQcm9wcyIsImdyb3VwU2hvd0FsbFByb3BzIiwiZ3JvdXBGb290ZXJQcm9wcyIsImNhbkRyYWdHcm91cHMiLCJfZ2V0RHJvcHBpbmdDbGFzc05hbWUiLCJfcmV0dXJuT25lIiwiX29uUmVuZGVyR3JvdXAiLCJmb3JjZUxpc3RVcGRhdGUiLCJzdWJHcm91cENvdW50IiwicGFnZVJlZnMiLCJfb25SZW5kZXJHcm91cENlbGwiLCJncm91cElzRHJvcHBpbmciLCJST1dfSEVJR0hUIiwiQ09NUEFDVF9ST1dfSEVJR0hUIiwiR3JvdXBlZExpc3QiLCJHcm91cGVkTGlzdEJhc2UiLCJfcmVuZGVyR3JvdXAiLCJfb25Ub2dnbGVTZWxlY3RHcm91cCIsIl9vblRvZ2dsZUNvbGxhcHNlIiwiX29uVG9nZ2xlU3VtbWFyaXplIiwiX2dldEdyb3VwTmVzdGluZ0RlcHRoIiwiZmluYWxMaXN0UHJvcHMiLCJvblJlbmRlckhlYWRlciIsIm9uUmVuZGVyU2hvd0FsbCIsIm9uUmVuZGVyRm9vdGVyIiwiX2dldERlZmF1bHRHcm91cEl0ZW1MaW1pdCIsIl9nZXRHcm91cEl0ZW1MaW1pdCIsIl9nZXRHcm91cEhlaWdodCIsImdldEdyb3VwSGVpZ2h0IiwicGFnZUdyb3VwIiwiX3VwZGF0ZUlzU29tZUdyb3VwRXhwYW5kZWQiLCJfaXNJbm5lclpvbmVLZXlzdHJva2UiLCJfaXNTb21lR3JvdXBFeHBhbmRlZCIsIl9jb21wdXRlSXNTb21lR3JvdXBFeHBhbmRlZCIsImxpc3RWZXJzaW9uIiwic2hvdWxkRm9yY2VVcGRhdGVzIiwiaXNBbGxHcm91cHNDb2xsYXBzZWQiLCJfc2V0R3JvdXBzQ29sbGFwc2VkU3RhdGUiLCJmb2N1c1pvbmVQcm9wcyIsInJvb3RMaXN0UHJvcHMiLCJfZm9yY2VMaXN0VXBkYXRlcyIsInRvZ2dsZUNvbGxhcHNlQWxsIiwiYWxsQ29sbGFwc2VkIiwiZ3JvdXBzSW5MZXZlbCIsInNvbWUiLCJvbkdyb3VwRXhwYW5kU3RhdGVDaGFuZ2VkIiwibmV3SXNTb21lR3JvdXBFeHBhbmRlZCIsImlzSGVhZGVyVmlzaWJsZSIsIlJFQUNUX0xJRkVDWUNMRV9FWENMVVNJT05TIiwiQmFzZURlY29yYXRvciIsIl91cGRhdGVDb21wb3NlZENvbXBvbmVudFJlZiIsImNvbXBvc2VkQ29tcG9uZW50SW5zdGFuY2UiLCJfY29tcG9zZWRDb21wb25lbnRJbnN0YW5jZSIsIl9ob2lzdGVkIiwiZGVzdGluYXRpb24iLCJleGNsdXNpb25zIiwiaG9pc3RlZCIsImhvaXN0TWV0aG9kcyIsImdldFJlY3QiLCJpbm5lcldpZHRoIiwid2l0aFZpZXdwb3J0IiwiV2l0aFZpZXdwb3J0Q29tcG9uZW50IiwiX3JlZ2lzdGVyUmVzaXplT2JzZXJ2ZXIiLCJfdmlld3BvcnRSZXNpemVPYnNlcnZlciIsIlJlc2l6ZU9ic2VydmVyIiwiX3VucmVnaXN0ZXJSZXNpemVPYnNlcnZlciIsImRpc2Nvbm5lY3QiLCJfdXBkYXRlVmlld3BvcnQiLCJ3aXRoRm9yY2VVcGRhdGUiLCJ2aWV3cG9ydEVsZW1lbnQiLCJfcmVzaXplQXR0ZW1wdHMiLCJza2lwVmlld3BvcnRNZWFzdXJlcyIsImRpc2FibGVSZXNpemVPYnNlcnZlciIsIl9pc1Jlc2l6ZU9ic2VydmVyQXZhaWxhYmxlIiwicHJldmlvdXNTa2lwVmlld3BvcnRNZWFzdXJlcyIsIm5ld1ZpZXdwb3J0IiwiTUlOX0NPTFVNTl9XSURUSCIsIkRldGFpbHNMaXN0SW5uZXIiLCJhcmlhTGFiZWxGb3JMaXN0SGVhZGVyIiwiY29uc3RyYWluTW9kZSIsImlzUGxhY2Vob2xkZXJEYXRhIiwibGF5b3V0TW9kZSIsIm9uQ29sdW1uSGVhZGVyQ2xpY2siLCJvbkNvbHVtbkhlYWRlckNvbnRleHRNZW51Iiwic2VsZWN0aW9uWm9uZVByb3BzIiwiYXJpYUxhYmVsRm9yR3JpZCIsInJvd0VsZW1lbnRFdmVudE1hcCIsInNob3VsZEFwcGx5QXBwbGljYXRpb25Sb2xlIiwiYWRqdXN0ZWRDb2x1bW5zIiwiaXNTb21lR3JvdXBFeHBhbmRlZCIsImxpc3RSZWYiLCJmb2N1c1pvbmVSZWYiLCJncm91cGVkTGlzdFJlZiIsImhlYWRlclJlZiIsIm9uUm93RGlkTW91bnQiLCJvblJvd1dpbGxVbm1vdW50IiwiZGlzYWJsZVNlbGVjdGlvblpvbmUiLCJvbkFjdGl2ZVJvd0NoYW5nZWQiLCJvblJlbmRlck1pc3NpbmdJdGVtIiwiZW50ZXJNb2RhbFNlbGVjdGlvbk9uVG91Y2giLCJvblJlbmRlckRlZmF1bHRSb3ciLCJzZWxlY3Rpb25ab25lUmVmIiwiZ2V0R3JvdXBOZXN0aW5nRGVwdGgiLCJhZGRpdGlvbmFsTGlzdFByb3BzIiwiZGVmYXVsdE9uUmVuZGVyRGV0YWlsc0hlYWRlciIsImRldGFpbHNIZWFkZXJQcm9wcyIsImRlZmF1bHRPblJlbmRlckRldGFpbHNGb290ZXIiLCJwcm9wc09uUmVuZGVyRGV0YWlsc0hlYWRlciIsIm9uUmVuZGVyRGV0YWlsc0hlYWRlciIsInByb3BzT25SZW5kZXJEZXRhaWxzRm9vdGVyIiwib25SZW5kZXJEZXRhaWxzRm9vdGVyIiwiZGV0YWlsc0Zvb3RlclByb3BzIiwiY29sdW1uUmVvcmRlck9uRHJhZ0VuZCIsImZpbmFsRHJvcExvY2F0aW9uIiwib3V0c2lkZSIsInN1cmZhY2UiLCJyb3dDb3VudCIsInRvdGFsIiwicmVtYWluaW5nR3JvdXBzIiwiY3VycmVudEdyb3VwIiwiR2V0R3JvdXBDb3VudCIsImNvbENvdW50IiwiaXNGaXhlZCIsImZpeGVkQ29sdW1ucyIsImlzSG9yaXpvbnRhbENvbnN0cmFpbmVkIiwiaG9yaXpvbnRhbENvbnN0cmFpbmVkIiwib25SZW5kZXJEZXRhaWxzR3JvdXBGb290ZXIiLCJmaW5hbE9uUmVuZGVyRGV0YWlsc0dyb3VwRm9vdGVyIiwib25SZW5kZXJEZXRhaWxzR3JvdXBIZWFkZXIiLCJmaW5hbE9uUmVuZGVyRGV0YWlsc0dyb3VwSGVhZGVyIiwiZmluYWxHcm91cFByb3BzIiwic3VtQ29sdW1uV2lkdGhzIiwidG90YWxXaWR0aCIsImZpbmFsT25SZW5kZXJSb3ciLCJvblJlbmRlclJvdyIsInJvd1Byb3BzIiwib25SZW5kZXJMaXN0Q2VsbCIsImlzUmlnaHRBcnJvdyIsImZvY3VzWm9uZSIsIm9uSGVhZGVyS2V5RG93biIsIm9uQ29udGVudEtleURvd24iLCJoZWFkZXJXcmFwcGVyIiwiY29udGVudFdyYXBwZXIiLCJEZXRhaWxzTGlzdEJhc2UiLCJfaGVhZGVyIiwiX2dyb3VwZWRMaXN0IiwiX3NlbGVjdGlvblpvbmUiLCJfb25SZW5kZXJSb3ciLCJzZXRLZXkiLCJuZXdWaWV3cG9ydFdpZHRoIiwib2xkVmlld3BvcnRXaWR0aCIsInNob3VsZFJlc2V0U2VsZWN0aW9uIiwiX2luaXRpYWxGb2N1c2VkSW5kZXgiLCJpbml0aWFsRm9jdXNlZEluZGV4IiwiZm9jdXNlZEl0ZW1JbmRleCIsIl9hZGp1c3RDb2x1bW5zIiwiX29uR3JvdXBFeHBhbmRTdGF0ZUNoYW5nZWQiLCJfb25Db2x1bW5Jc1NpemluZ0NoYW5nZWQiLCJfb25Sb3dEaWRNb3VudCIsInJvdyIsIl9nZXRJdGVtS2V5IiwiX2FjdGl2ZVJvd3MiLCJfc2V0Rm9jdXNUb1Jvd0lmUGVuZGluZyIsIl9vblJvd1dpbGxVbm1vdW50IiwiY29sbGFwc2VkIiwiX29uQ29sdW1uUmVzaXplZCIsInJlc2l6aW5nQ29sdW1uIiwicmVzaXppbmdDb2x1bW5JbmRleCIsIm5ld0NhbGN1bGF0ZWRXaWR0aCIsIm9uQ29sdW1uUmVzaXplIiwiX3JlbWVtYmVyQ2FsY3VsYXRlZFdpZHRoIiwiX29uQ29sdW1uQXV0b1Jlc2l6ZWQiLCJ0b3RhbENvdW50IiwiX29uQWN0aXZlUm93Q2hhbmdlZCIsIm9uQWN0aXZlSXRlbUNoYW5nZWQiLCJfY29sdW1uT3ZlcnJpZGVzIiwibGFzdFdpZHRoIiwiX2dldEFkanVzdGVkQ29sdW1ucyIsImZvY3VzSW5kZXgiLCJfc2V0Rm9jdXNUb1JvdyIsIl9ub3RpZnlDb2x1bW5zUmVzaXplZCIsIm9uRGlkVXBkYXRlIiwiY3VycmVudFdpZHRoIiwidmlld3BvcnRXaWR0aCIsIm5ld0l0ZW1zIiwibmV3Q29sdW1ucyIsImxhc3RTZWxlY3Rpb25Nb2RlIiwiY2FuUmVzaXplQ29sdW1ucyIsInNvcnRlZENvbHVtbktleSIsImdyb3VwZWRDb2x1bW5LZXkiLCJmaXJzdEl0ZW0iLCJpc0NvbGxhcHNhYmxlIiwiaXNDb2xsYXBzaWJsZSIsImNsaWNrYWJsZSIsImJ1aWxkQ29sdW1ucyIsIl9nZXRGaXhlZENvbHVtbnMiLCJfZ2V0SnVzdGlmaWVkQ29sdW1uc0FmdGVyUmVzaXplIiwiX2dldEp1c3RpZmllZENvbHVtbnMiLCJfZ2V0Q29sdW1uT3ZlcnJpZGUiLCJuZXdDb2x1bW4iLCJmaXhlZFdpZHRoIiwiZ2V0UGFkZGVkV2lkdGgiLCJyZW1haW5pbmdDb2x1bW5zIiwicmVtYWluaW5nV2lkdGgiLCJmaXJzdEluZGV4Iiwicm93Q2hlY2tXaWR0aCIsImdyb3VwRXhwYW5kV2lkdGgiLCJhdmFpbGFibGVXaWR0aCIsImxhc3RJbmRleCIsIm92ZXJmbG93V2lkdGgiLCJvcmlnaW5hbFdpZHRoIiwiaXNMYXN0Iiwib3ZlcnJpZGVzIiwic3BhY2VMZWZ0IiwianVzdGlmaWVkIiwib25Ib3ZlciIsImlzRmlyc3QiLCJEZXRhaWxzTGlzdCIsIm92ZXJmbG93WCIsIldlYmtpdE92ZXJmbG93U2Nyb2xsaW5nIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJyZWplY3RlZCIsIl8iLCJzZW50IiwidHJ5cyIsIm9wcyIsInZlcmIiLCJvcCIsIm1zIiwicmVtb3ZlVmVoaWNsZSIsIkxhYmVsIiwiTGFiZWxCYXNlIiwicmVxdWlyZWQiLCJsYWJlbEZvbnRXZWlnaHQiLCJsYWJlbENvbG9yIiwibGFiZWxEaXNhYmxlZENvbG9yIiwibGFiZWxSZXF1aXJlZFN0YXJDb2xvciIsIndvcmRXcmFwIiwib3ZlcmZsb3dXcmFwIiwiX19icm93c2VyTmVlZHNSZXZlYWxCdXR0b24iLCJDT01QT05FTlRfTkFNRSIsIlRleHRGaWVsZEJhc2UiLCJfdGV4dEVsZW1lbnQiLCJpc0ZvY3VzZWQiLCJ2YWxpZGF0ZU9uRm9jdXNJbiIsIl92YWxpZGF0ZSIsInZhbGlkYXRlT25Gb2N1c091dCIsIl9vblJlbmRlckxhYmVsIiwibGFiZWxTdHlsZXMiLCJodG1sRm9yIiwiX2xhYmVsSWQiLCJfb25SZW5kZXJEZXNjcmlwdGlvbiIsImRlc2NyaXB0aW9uIiwiX29uUmV2ZWFsQnV0dG9uQ2xpY2siLCJpc1JldmVhbGluZ1Bhc3N3b3JkIiwiX29uSW5wdXRDaGFuZ2UiLCJpc1NhbWVWYWx1ZSIsIl9sYXN0Q2hhbmdlVmFsdWUiLCJfZ2V0VmFsdWUiLCJfaXNDb250cm9sbGVkIiwidW5jb250cm9sbGVkVmFsdWUiLCJfZmFsbGJhY2tJZCIsIl9kZXNjcmlwdGlvbklkIiwiX3dhcm5Db250cm9sbGVkVXNhZ2UiLCJfZGVsYXllZFZhbGlkYXRlIiwiZGVmZXJyZWRWYWxpZGF0aW9uVGltZSIsIl9sYXN0VmFsaWRhdGlvbiIsIl9hZGp1c3RJbnB1dEhlaWdodCIsInZhbGlkYXRlT25Mb2FkIiwic25hcHNob3QiLCJtdWx0aWxpbmUiLCJzZXRTZWxlY3Rpb25SYW5nZSIsIl9zaG91bGRWYWxpZGF0ZUFsbENoYW5nZXMiLCJib3JkZXJsZXNzIiwiaWNvblByb3BzIiwiaW5wdXRDbGFzc05hbWUiLCJ1bmRlcmxpbmVkIiwicmVzaXphYmxlIiwic3VmZml4IiwiYXV0b0FkanVzdEhlaWdodCIsImNhblJldmVhbFBhc3N3b3JkIiwib25SZW5kZXJQcmVmaXgiLCJfb25SZW5kZXJQcmVmaXgiLCJvblJlbmRlclN1ZmZpeCIsIl9vblJlbmRlclN1ZmZpeCIsIm9uUmVuZGVyTGFiZWwiLCJvblJlbmRlckRlc2NyaXB0aW9uIiwiX2Vycm9yTWVzc2FnZSIsImhhc1JldmVhbEJ1dHRvbiIsImlzRWRnZSIsImlzSUUxMSIsIl9icm93c2VyTmVlZHNSZXZlYWxCdXR0b24iLCJmb2N1c2VkIiwiaGFzTGFiZWwiLCJoYXNFcnJvck1lc3NhZ2UiLCJoYXNJY29uIiwid3JhcHBlciIsImZpZWxkR3JvdXAiLCJfcmVuZGVyVGV4dEFyZWEiLCJfcmVuZGVySW5wdXQiLCJyZXZlYWxCdXR0b24iLCJyZXZlYWxTcGFuIiwicmV2ZWFsSWNvbiIsIl9pc0Rlc2NyaXB0aW9uQXZhaWxhYmxlIiwiYmx1ciIsInNldFNlbGVjdGlvblN0YXJ0Iiwic2V0U2VsZWN0aW9uRW5kIiwiX2hhc1dhcm5lZE51bGxWYWx1ZSIsInZhbHVlUHJvcCIsInRleHRBcmVhUHJvcHMiLCJvbklucHV0IiwiZmllbGQiLCJpbnB1dFByb3BzIiwiX2xhdGVzdFZhbGlkYXRlVmFsdWUiLCJvbkdldEVycm9yTWVzc2FnZSIsImN1cnJlbnRWYWxpZGF0aW9uXzEiLCJfbm90aWZ5QWZ0ZXJWYWxpZGF0ZSIsIm9uTm90aWZ5VmFsaWRhdGlvblJlc3VsdCIsInRleHRGaWVsZCIsImdsb2JhbENsYXNzTmFtZXMiLCJ1bnJlc2l6YWJsZSIsImFjdGl2ZSIsImdldExhYmVsU3R5bGVzIiwiVGV4dEZpZWxkIiwiZmllbGRQcmVmaXhTdWZmaXgiLCJwbGFjZWhvbGRlclN0eWxlcyIsImRpc2FibGVkUGxhY2Vob2xkZXJTdHlsZXMiLCJib3JkZXJCb3R0b21Db2xvciIsInJlc2l6ZSIsIkJhc2VDb21wb25lbnQiLCJtZXRob2ROYW1lcyIsImxlbiIsIl9tYWtlU2FmZSIsIl9tYWtlQWxsU2FmZSIsIl91cGRhdGVDb21wb25lbnRSZWYiLCJfX2Rpc3Bvc2FibGVzIiwiX2Rpc3Bvc2FibGVzIiwiZGlzcG9zYWJsZSIsIl9fY2xhc3NOYW1lIiwicmVzdWx0cyIsIl9fYXN5bmMiLCJfX2V2ZW50cyIsIl9yZXNvbHZlUmVmIiwicmVmTmFtZSIsIl9fcmVzb2x2ZXMiLCJjdXJyZW50UHJvcHMiLCJfd2FybkRlcHJlY2F0aW9ucyIsImRlcHJlY2F0aW9uTWFwIiwiX3dhcm5NdXR1YWxseUV4Y2x1c2l2ZSIsIm11dHVhbGx5RXhjbHVzaXZlTWFwIiwiX3dhcm5Db25kaXRpb25hbGx5UmVxdWlyZWRQcm9wcyIsInJlcXVpcmVkUHJvcHMiLCJjb25kaXRpb25hbFByb3BOYW1lIiwiX3NraXBDb21wb25lbnRSZWZSZXNvbHV0aW9uIiwiY2xhc3NNZXRob2QiLCJwcm90b3R5cGVNZXRob2QiLCJudWxsUmVuZGVyIiwiQ29udGV4dHVhbE1lbnVJdGVtVHlwZSIsImlzTWFjUmVzdWx0IiwiSW1hZ2VJY29uIiwiRGlyZWN0aW9uYWxIaW50IiwiaXNNYWMiLCJpc0lPUyIsImdldElzQ2hlY2tlZCIsImNhbkNoZWNrIiwiaXNDaGVja2VkIiwiaGFzU3VibWVudSIsInN1Yk1lbnVQcm9wcyIsImlzSXRlbURpc2FibGVkIiwiZ2V0TWVudUl0ZW1BcmlhUm9sZSIsIlJlc3BvbnNpdmVNb2RlIiwiV2luZG93Q29udGV4dCIsIl9kZWZhdWx0TW9kZSIsIl9sYXN0TW9kZSIsIlJlY3RhbmdsZUVkZ2UiLCJQb3NpdGlvbiIsIlJFU1BPTlNJVkVfTUFYX0NPTlNUUkFJTlQiLCJnZXRJbml0aWFsUmVzcG9uc2l2ZU1vZGUiLCJ3aXRoUmVzcG9uc2l2ZU1vZGUiLCJXaXRoUmVzcG9uc2l2ZU1vZGUiLCJfb25SZXNpemUiLCJyZXNwb25zaXZlTW9kZSIsImdldFJlc3BvbnNpdmVNb2RlIiwidW5rbm93biIsImN1cnJlbnRXaW5kb3ciLCJSZWN0YW5nbGUiLCJlcXVhbHMiLCJfY3JlYXRlUG9zaXRpb25EYXRhIiwidGFyZ2V0RWRnZSIsImFsaWdubWVudEVkZ2UiLCJpc0F1dG8iLCJEaXJlY3Rpb25hbERpY3Rpb25hcnkiLCJfaXNSZWN0YW5nbGVXaXRoaW5Cb3VuZHMiLCJib3VuZGluZ1JlY3QiLCJfZ2V0T3V0T2ZCb3VuZHNFZGdlcyIsIm91dE9mQm91bmRzIiwiX2dldEVkZ2VWYWx1ZSIsImVkZ2UiLCJfc2V0RWRnZVZhbHVlIiwiX2dldENlbnRlclZhbHVlIiwiZWRnZXMiLCJfZ2V0RmxhbmtpbmdFZGdlcyIsInBvc2l0aXZlRWRnZSIsIm5lZ2F0aXZlRWRnZSIsIl9nZXRSZWxhdGl2ZUVkZ2VWYWx1ZSIsIl9nZXRSZWxhdGl2ZVJlY3RFZGdlVmFsdWUiLCJfZ2V0UmVsYXRpdmVFZGdlRGlmZmVyZW5jZSIsImhvc3RSZWN0IiwiX21vdmVFZGdlIiwiZGlmZmVyZW5jZSIsIl9hbGlnbkVkZ2VzIiwiX2lzRWRnZUluQm91bmRzIiwiYm91bmRzIiwiX2FkanVzdEZpdFdpdGhpbkJvdW5kcyIsImJvdW5kaW5nIiwicG9zaXRpb25EYXRhIiwiZGlyZWN0aW9uYWxIaW50Rml4ZWQiLCJjb3ZlclRhcmdldCIsImFsaWduVGFyZ2V0RWRnZSIsImVsZW1lbnRFc3RpbWF0ZSIsImVsZW1lbnRSZWN0YW5nbGUiLCJkaXJlY3Rpb25zIiwiY3VycmVudEVzdGltYXRlIiwiY3VycmVudEVkZ2UiLCJjdXJyZW50QWxpZ25tZW50IiwiX2VzdGltYXRlUG9zaXRpb24iLCJfZmxpcFRvRml0IiwiZmxpcHBlZEVsZW1lbnRFc3RpbWF0ZSIsIm9wcG9zaXRlRWRnZSIsIl9mbGlwQWxpZ25tZW50RWRnZSIsIl9hbGlnbk91dE9mQm91bmRzRWRnZXMiLCJvdXRPZkJvdW5kc0VkZ2VzIiwib3V0T2ZCb3VuZHNFZGdlc18xIiwiX2NlbnRlckVkZ2VUb1BvaW50IiwiZWxlbWVudFRvUG9zaXRpb24iLCJlc3RpbWF0ZWRFbGVtZW50UG9zaXRpb24iLCJlbGVtZW50RWRnZSIsImFkanVzdGVkR2FwIiwiX2FsaWduT3Bwb3NpdGVFZGdlcyIsIl9maW5hbGl6ZVJldHVybkVkZ2UiLCJyZXR1cm5FZGdlIiwiX2NhbGN1bGF0ZUFjdHVhbEJlYWtXaWR0aEluUGl4ZWxzIiwiYmVha1dpZHRoIiwic3FydCIsIl9nZXRQb3NpdGlvbkRhdGEiLCJkaXJlY3Rpb25hbEhpbnQiLCJkaXJlY3Rpb25hbEhpbnRGb3JSVEwiLCJwcmV2aW91c1Bvc2l0aW9ucyIsInBvc2l0aW9uSW5mb3JtYXRpb24iLCJnZXRDbG9zZXN0RWRnZSIsInRhcmdldENlbnRlciIsImJvdW5kaW5nQ2VudGVyIiwiX3Bvc2l0aW9uRWxlbWVudFdpdGhpbkJvdW5kcyIsIl9maW5hbGl6ZUJlYWtQb3NpdGlvbiIsImVsZW1lbnRQb3NpdGlvbiIsInBvc2l0aW9uZWRCZWFrIiwiYWN0dWFsRWxlbWVudCIsImNsb3Nlc3RFZGdlIiwiX3Bvc2l0aW9uQmVhayIsInRhcmdldFJlY3RhbmdsZSIsImJlYWtUYXJnZXRQb2ludCIsImVsZW1lbnRCb3VuZHMiLCJiZWFrUG9zaXRpb24iLCJfZ2V0UmVjdGFuZ2xlRnJvbUVsZW1lbnQiLCJfZ2V0UmVjdGFuZ2xlRnJvbUlSZWN0IiwiX2dldE1heEhlaWdodEZyb21UYXJnZXRSZWN0YW5nbGUiLCJnYXBTcGFjZSIsIl9wb3NpdGlvbkVsZW1lbnRSZWxhdGl2ZSIsIm91dE9mQm91bmRzXzEiLCJfZ2V0VGFyZ2V0UmVjdCIsIl9nZXRBbGlnbm1lbnREYXRhIiwicG9zaXRpb25lZEVsZW1lbnQiLCJfZmluYWxpemVQb3NpdGlvbkRhdGEiLCJob3N0RWxlbWVudCIsImRvTm90RmluYWxpemVSZXR1cm5FZGdlIiwiZWxlbWVudEVkZ2VTdHJpbmciLCJfZmluYWxpemVFbGVtZW50UG9zaXRpb24iLCJfcG9zaXRpb25DYWxsb3V0IiwiY2FsbG91dCIsImlzQmVha1Zpc2libGUiLCJwb3NpdGlvblByb3BzIiwiZmluYWxpemVkQmVha1Bvc2l0aW9uIiwicG9zaXRpb25DYXJkIiwiX3Bvc2l0aW9uQ2FyZCIsIlBvcHVwIiwib25EaXNtaXNzIiwiX2NvbnRhaW5zRm9jdXMiLCJuZWVkc1ZlcnRpY2FsU2Nyb2xsQmFyIiwiX29yaWdpbmFsRm9jdXNlZEVsZW1lbnQiLCJjdXJyZW50QWN0aXZlRWxlbWVudCIsImRvZXNFbGVtZW50Q29udGFpbkZvY3VzIiwiX3VwZGF0ZVNjcm9sbEJhckFzeW5jIiwib25SZXN0b3JlRm9jdXMiLCJkZWZhdWx0Rm9jdXNSZXN0b3JlciIsIm9yaWdpbmFsRWxlbWVudCIsImRvY3VtZW50Q29udGFpbnNGb2N1cyIsImhhc0ZvY3VzIiwiX2dldFNjcm9sbEJhciIsInJvb3RIZWlnaHQiLCJmaXJzdENoaWxkSGVpZ2h0IiwiQU5JTUFUSU9OUyIsIkJFQUtfT1JJR0lOX1BPU0lUSU9OIiwiT0ZGX1NDUkVFTl9TVFlMRSIsIkFSSUFfUk9MRV9BVFRSSUJVVEVTIiwiQ2FsbG91dENvbnRlbnRCYXNlIiwiX2hvc3RFbGVtZW50IiwiX2NhbGxvdXRFbGVtZW50IiwiX2hhc0xpc3RlbmVycyIsImRpc21pc3MiLCJfZGlzbWlzc09uU2Nyb2xsIiwicHJldmVudERpc21pc3NPbkV2ZW50IiwicHJldmVudERpc21pc3NPblNjcm9sbCIsInBvc2l0aW9ucyIsIl9kaXNtaXNzT25DbGlja09yU2Nyb2xsIiwiX2Rpc21pc3NPblJlc2l6ZSIsInByZXZlbnREaXNtaXNzT25SZXNpemUiLCJfZGlzbWlzc09uTG9zdEZvY3VzIiwicHJldmVudERpc21pc3NPbkxvc3RGb2N1cyIsIl9zZXRJbml0aWFsRm9jdXMiLCJzZXRJbml0aWFsRm9jdXMiLCJfZGlkU2V0SW5pdGlhbEZvY3VzIiwiX29uQ29tcG9uZW50RGlkTW91bnQiLCJfYWRkTGlzdGVuZXJzIiwiX3VwZGF0ZUFzeW5jUG9zaXRpb24iLCJfc2V0SGVpZ2h0T2Zmc2V0RXZlcnlGcmFtZSIsIl9kaXNtaXNzT25UYXJnZXRXaW5kb3dCbHVyIiwic2hvdWxkRGlzbWlzc09uV2luZG93Rm9jdXMiLCJfdGFyZ2V0V2luZG93IiwiX21vdXNlRG93bk9uUG9wdXAiLCJfaXNNb3VzZURvd25PblBvcHVwIiwiX21vdXNlVXBPblBvcHVwIiwic2xpZGVEaXJlY3Rpb25hbENsYXNzTmFtZSIsImNhbGxvdXRFbGVtZW50UmVjdCIsImhlaWdodE9mZnNldCIsIl9wb3NpdGlvbkF0dGVtcHRzIiwiX3JlbW92ZUxpc3RlbmVycyIsInNob3VsZFVwZGF0ZVdoZW5IaWRkZW4iLCJfc2V0VGFyZ2V0V2luZG93QW5kRWxlbWVudCIsIl9nZXRUYXJnZXQiLCJuZXdUYXJnZXQiLCJfYmxvY2tSZXNldEhlaWdodCIsIl9tYXhIZWlnaHQiLCJmaW5hbEhlaWdodCIsIl9kaWRQb3NpdGlvblByb3BzQ2hhbmdlIiwiX2JvdW5kcyIsImNhbGxvdXRXaWR0aCIsImNhbGxvdXRNYXhXaWR0aCIsImhpZGVPdmVyZmxvdyIsImNhbGxvdXRNYXhIZWlnaHQiLCJvblNjcm9sbCIsImdldENvbnRlbnRNYXhIZWlnaHQiLCJfZ2V0TWF4SGVpZ2h0IiwiY29udGVudE1heEhlaWdodCIsIm92ZXJmbG93WUhpZGRlbiIsImJlYWtWaXNpYmxlIiwib3ZlcmZsb3dTdHlsZSIsInZpc2liaWxpdHlTdHlsZSIsImJlYWsiLCJfZ2V0QmVha1Bvc2l0aW9uIiwiYmVha0N1cnRhaW4iLCJjYWxsb3V0TWFpbiIsImlzRXZlbnRUYXJnZXRPdXRzaWRlQ2FsbG91dCIsIl90YXJnZXQiLCJkaXNtaXNzT25UYXJnZXRDbGljayIsIl91cGRhdGVQb3NpdGlvbiIsImJlYWtQb3N0aW9uU3R5bGUiLCJjYWxsb3V0RWxlbWVudCIsImV4cGVjdHNUYXJnZXQiLCJfZ2V0Qm91bmRzIiwibmV3UG9zaXRpb25zIiwicG9zaXRpb25DYWxsb3V0IiwiX2FyZVBvc2l0aW9uc0VxdWFsIiwib25Qb3NpdGlvbmVkIiwiY3VycmVudEJvdW5kcyIsInRhcmdldFdpbmRvdyIsInNlZ21lbnRzIiwiZ2V0V2luZG93U2VnbWVudHMiLCJzZWdtZW50c18xIiwiX2dldEJvdW5kc0Zyb21UYXJnZXRXaW5kb3ciLCJtaW5QYWdlUGFkZGluZyIsInRvdGFsR2FwXzEiLCJtb3VzZVRhcmdldCIsImVsZW1lbnRUYXJnZXQiLCJwb2ludFRhcmdldCIsImJvdW5kaW5nUmVjdGFuZ2xlIiwiZ2V0TWF4SGVpZ2h0IiwibmV3UG9zaXRpb24iLCJfY29tcGFyZVBvc2l0aW9ucyIsIm9sZFBvc2l0aW9ucyIsIm9sZFBvc2l0aW9uRWRnZSIsIm5ld1Bvc2l0aW9uRWRnZSIsImN1cnJlbnREb2MiLCJfc2V0SGVpZ2h0T2Zmc2V0VGltZXIiLCJjYWxsb3V0TWFpbkVsZW0iLCJzY3JvbGxEaWZmIiwib2xkUHJvcHMiLCJnZXRCZWFrU3R5bGUiLCJDYWxsb3V0Q29udGVudCIsImJvcmRlcldpZHRoIiwiYm9yZGVyU3R5bGUiLCJDYWxsb3V0IiwibGF5ZXJQcm9wcyIsImRvTm90TGF5ZXIiLCJyZW5kZXJJdGVtSWNvbiIsImhhc0ljb25zIiwib25SZW5kZXJJY29uIiwicmVuZGVyQ2hlY2tNYXJrSWNvbiIsIm9uQ2hlY2ttYXJrQ2xpY2siLCJpc0l0ZW1DaGVja2VkIiwiY2hlY2ttYXJrSWNvbiIsInJlbmRlckl0ZW1OYW1lIiwicmVuZGVyU2Vjb25kYXJ5VGV4dCIsInNlY29uZGFyeVRleHQiLCJyZW5kZXJTdWJNZW51SWNvbiIsInN1Ym1lbnVJY29uUHJvcHMiLCJzdWJNZW51SWNvbiIsIkNvbnRleHR1YWxNZW51SXRlbUJhc2UiLCJvcGVuU3ViTWVudSIsImdldFN1Ym1lbnVUYXJnZXQiLCJzdWJtZW51VGFyZ2V0IiwiZGlzbWlzc1N1Yk1lbnUiLCJkaXNtaXNzTWVudSIsImRpc21pc3NBbGwiLCJyZW5kZXJDb250ZW50Iiwib25SZW5kZXJDb250ZW50IiwiX3JlbmRlckxheW91dCIsImxpbmtDb250ZW50TWVudSIsImxpbmtDb250ZW50IiwiZGVmYXVsdFJlbmRlcnMiLCJnZXREaXZpZGVyQ2xhc3NOYW1lcyIsImRpdmlkZXIiLCJDT05URVhUVUFMX01FTlVfSVRFTV9IRUlHSFQiLCJNZWRpdW1TY3JlZW5TZWxlY3RvciIsIlNjcmVlbldpZHRoTWluTGFyZ2UiLCJnZXRJdGVtSGlnaENvbnRyYXN0U3R5bGVzIiwiZ2V0TWVudUl0ZW1TdHlsZXMiLCJDb250ZXh0dWFsTWVudUl0ZW1CYWNrZ3JvdW5kSG92ZXJDb2xvciIsIkNvbnRleHR1YWxNZW51SXRlbVRleHRIb3ZlckNvbG9yIiwiQ29udGV4dHVhbE1lbnVJdGVtQmFja2dyb3VuZFNlbGVjdGVkQ29sb3IiLCJDb250ZXh0dWFsTWVudUl0ZW1EaXZpZGVyQ29sb3IiLCJyb290RGlzYWJsZWQiLCJyb290SG92ZXJlZCIsInJvb3RGb2N1c2VkIiwicm9vdENoZWNrZWQiLCJyb290UHJlc3NlZCIsInJvb3RFeHBhbmRlZCIsImFuY2hvckxpbmsiLCJ0ZXh0UmVuZGVyaW5nIiwibGV0dGVyU3BhY2luZyIsIndvcmRTcGFjaW5nIiwidGV4dFRyYW5zZm9ybSIsInRleHRJbmRlbnQiLCJ0ZXh0U2hhZG93IiwiaWNvbkNvbG9yIiwiaWNvbkRpc2FibGVkIiwic3BsaXRCdXR0b25GbGV4Q29udGFpbmVyIiwiQ09OVEVYVFVBTF9TUExJVF9NRU5VX01JTldJRFRIIiwiZ2V0U3BsaXRCdXR0b25WZXJ0aWNhbERpdmlkZXJDbGFzc05hbWVzIiwiaXNFeHBhbmRlZCIsInNwbGl0TWVudSIsImdldEl0ZW1DbGFzc05hbWVzIiwiZXhwYW5kZWQiLCJpc0FuY2hvckxpbmsiLCJrbm93bkljb24iLCJpdGVtQ2xhc3NOYW1lIiwiZGl2aWRlckNsYXNzTmFtZSIsInN1Yk1lbnVDbGFzc05hbWUiLCJwcmltYXJ5RGlzYWJsZWQiLCJzcGxpdFByaW1hcnkiLCJmbGV4QmFzaXMiLCJzcGxpdENvbnRhaW5lciIsImdldEl0ZW1TdHlsZXMiLCJDb250ZXh0dWFsTWVudUl0ZW0iLCJDb250ZXh0dWFsTWVudUl0ZW1XcmFwcGVyIiwiX29uSXRlbU1vdXNlRW50ZXIiLCJvbkl0ZW1Nb3VzZUVudGVyIiwiX29uSXRlbUNsaWNrIiwib25JdGVtQ2xpY2tCYXNlIiwiX29uSXRlbU1vdXNlTGVhdmUiLCJvbkl0ZW1Nb3VzZUxlYXZlIiwiX29uSXRlbUtleURvd24iLCJvbkl0ZW1LZXlEb3duIiwiX29uSXRlbU1vdXNlTW92ZSIsIm9uSXRlbU1vdXNlTW92ZSIsIl9nZXRTdWJNZW51SWQiLCJnZXRTdWJNZW51SWQiLCJfZ2V0U3VibWVudVRhcmdldCIsIkNvbnRleHR1YWxNZW51QW5jaG9yIiwiX2FuY2hvciIsIl9nZXRNZW1vaXplZE1lbnVCdXR0b25LZXl0aXBQcm9wcyIsImhhc01lbnUiLCJvbkl0ZW1DbGljayIsIl9yZW5kZXJBcmlhRGVzY3JpcHRpb24iLCJhcmlhRGVzY3JpcHRpb24iLCJfYXJpYURlc2NyaXB0aW9uSWQiLCJmb2N1c2FibGVFbGVtZW50SW5kZXgiLCJ0b3RhbEl0ZW1Db3VudCIsImhhc0NoZWNrbWFya3MiLCJjb250ZXh0dWFsTWVudUl0ZW1BcyIsIkNoaWxkcmVuUmVuZGVyZXIiLCJleHBhbmRlZE1lbnVJdGVtS2V5IiwiYW5jaG9yUmVsIiwicmVsIiwic3ViTWVudUlkIiwiaXRlbUhhc1N1Ym1lbnUiLCJpdGVtUHJvcHMiLCJvbk1vdXNlRW50ZXIiLCJvbk1vdXNlTGVhdmUiLCJDb250ZXh0dWFsTWVudUJ1dHRvbiIsIl9idG4iLCJvbkl0ZW1Nb3VzZURvd24iLCJkZWZhdWx0Um9sZSIsImJ1dHRvbk5hdGl2ZVByb3BlcnRpZXMiLCJpdGVtUm9sZSIsImFyaWFEZXNjcmliZWRCeUlkcyIsIml0ZW1CdXR0b25Qcm9wZXJ0aWVzIiwiVmVydGljYWxEaXZpZGVyQmFzZSIsImRlcHJlY2F0ZWRHZXRDbGFzc05hbWVzIiwiVmVydGljYWxEaXZpZGVyIiwibmFtZXMiLCJDb250ZXh0dWFsTWVudVNwbGl0QnV0dG9uIiwiX2V4ZWN1dGVJdGVtQ2xpY2siLCJfc3BsaXRCdXR0b24iLCJfb25JdGVtTW91c2VFbnRlclByaW1hcnkiLCJfb25JdGVtTW91c2VFbnRlckljb24iLCJfb25JdGVtTW91c2VNb3ZlUHJpbWFyeSIsIl9vbkl0ZW1Nb3VzZU1vdmVJY29uIiwiX29uSWNvbkl0ZW1DbGljayIsImV4ZWN1dGVJdGVtQ2xpY2siLCJfcHJvY2Vzc2luZ1RvdWNoIiwiX29uVG91Y2hTdGFydCIsIl9oYW5kbGVUb3VjaEFuZFBvaW50ZXJFdmVudCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInNwbGl0QnV0dG9uIiwib25Ub3VjaFN0YXJ0IiwiX3JlbmRlclNwbGl0UHJpbWFyeUJ1dHRvbiIsIl9yZW5kZXJTcGxpdERpdmlkZXIiLCJfcmVuZGVyU3BsaXRJY29uQnV0dG9uIiwiaXRlbUNvbXBvbmVudFByb3BzIiwib25UYXAiLCJfbGFzdFRvdWNoVGltZW91dElkIiwiZ2V0Q29udGV4dHVhbE1lbnVJdGVtQ2xhc3NOYW1lcyIsImdldFN1Ym1lbnVJdGVtcyIsIl9nZXRNZW51SXRlbVN0eWxlc0Z1bmN0aW9uIiwiQ29udGV4dHVhbE1lbnVCYXNlIiwiX21vdW50ZWQiLCJfdHJ5Rm9jdXNQcmV2aW91c0FjdGl2ZUVsZW1lbnQiLCJfcHJldmlvdXNBY3RpdmVFbGVtZW50IiwiX29uUmVuZGVyTWVudUxpc3QiLCJtZW51TGlzdFByb3BzIiwiaW5kZXhDb3JyZWN0aW9uIiwibWVudUl0ZW0iLCJfcmVuZGVyTWVudUl0ZW0iLCJpdGVtVHlwZSIsIkRpdmlkZXIiLCJIZWFkZXIiLCJpbmRleEluY3JlYXNlIiwiY3VzdG9tT25SZW5kZXJMaXN0TGVuZ3RoIiwiaXRlbUNsYXNzTmFtZXMiLCJyZW5kZXJlZEl0ZW1zIiwic3ViTWVudUljb25DbGFzc05hbWUiLCJpdGVtU3R5bGVQcm9wcyIsIl9yZW5kZXJTZXBhcmF0b3IiLCJoZWFkZXJJdGVtIiwiX3JlbmRlckhlYWRlck1lbnVJdGVtIiwiX3JlbmRlckxpc3RJdGVtIiwiU2VjdGlvbiIsIl9yZW5kZXJTZWN0aW9uSXRlbSIsIl9yZW5kZXJOb3JtYWxJdGVtIiwiX2RlZmF1bHRNZW51SXRlbVJlbmRlcmVyIiwiX2xhc3RLZXlEb3duV2FzQWx0T3JNZXRhIiwiX2lzQWx0T3JNZXRhIiwiZGlzbWlzc0FsbE1lbnVzIiwiX2tleUhhbmRsZXIiLCJfc2hvdWxkSGFuZGxlS2V5RG93biIsIl9zaG91bGRDbG9zZVN1Yk1lbnUiLCJfb25NZW51Rm9jdXNDYXB0dXJlIiwiZGVsYXlVcGRhdGVGb2N1c09uSG92ZXIiLCJfc2hvdWxkVXBkYXRlRm9jdXNPbk1vdXNlRXZlbnQiLCJfc2hvdWxkSGFuZGxlS2V5VXAiLCJrZXlQcmVzc0lzQWx0T3JNZXRhQWxvbmUiLCJzaG91bGRIYW5kbGVLZXkiLCJoYW5kbGVkIiwiX2ZvY3VzaW5nUHJldmlvdXNFbGVtZW50Iiwic3VibWVudUNsb3NlS2V5IiwiaXNTdWJNZW51IiwiX2FkanVzdGVkRm9jdXNab25lUHJvcHMiLCJfb25NZW51S2V5RG93biIsIl9ob3N0IiwiaGFzTW9kaWZpZXIiLCJpc1VwIiwiaXNEb3duIiwiZ2V0TGFzdEZvY3VzYWJsZSIsImdldEZpcnN0Rm9jdXNhYmxlIiwiX2lzU2Nyb2xsSWRsZSIsIl9zY3JvbGxJZGxlVGltZW91dElkIiwiX29uSXRlbU1vdXNlRW50ZXJCYXNlIiwiX3Nob3VsZElnbm9yZU1vdXNlRXZlbnQiLCJfdXBkYXRlRm9jdXNPbk1vdXNlRXZlbnQiLCJfb25JdGVtTW91c2VNb3ZlQmFzZSIsIl9nb3RNb3VzZU1vdmUiLCJfZW50ZXJUaW1lcklkIiwiX29uTW91c2VJdGVtTGVhdmUiLCJzZXRBY3RpdmUiLCJfb25JdGVtTW91c2VEb3duIiwiX29uSXRlbUNsaWNrQmFzZSIsIl9jYW5jZWxTdWJNZW51VGltZXIiLCJleHBhbmRlZEJ5TW91c2VDbGljayIsIl9vbkl0ZW1TdWJNZW51RXhwYW5kIiwiX29uQW5jaG9yQ2xpY2siLCJvcGVuS2V5IiwiX29uU3ViTWVudURpc21pc3MiLCJkaXNtaXNzZWRNZW51SXRlbUtleSIsIl9vblBvaW50ZXJBbmRUb3VjaEV2ZW50IiwiY29udGV4dHVhbE1lbnVJdGVtcyIsIl9pc0hpZGRlbiIsIl9vbk1lbnVDbG9zZWQiLCJfb25NZW51T3BlbmVkIiwib25NZW51RGlzbWlzc2VkIiwibGFiZWxFbGVtZW50SWQiLCJ1c2VUYXJnZXRXaWR0aCIsInVzZVRhcmdldEFzTWluV2lkdGgiLCJzaG91bGRGb2N1c09uQ29udGFpbmVyIiwiY2FsbG91dFByb3BzIiwib25SZW5kZXJTdWJNZW51IiwiX29uUmVuZGVyU3ViTWVudSIsIm9uUmVuZGVyTWVudUxpc3QiLCJnZXRNZW51Q2xhc3NOYW1lcyIsIml0ZW1zSGF2ZUljb25zIiwiY29udGV4dHVhbE1lbnVJdGVtc18xIiwic2VjdGlvblByb3BzIiwiX2dldEZvY3VzWm9uZURpcmVjdGlvbiIsImNvbnRleHRNZW51U3R5bGUiLCJzdWJtZW51SXRlbSIsImNhbkFueU1lbnVJdGVtc0NoZWNrIiwic3VibWVudVByb3BzIiwiX2dldFN1Ym1lbnVQcm9wcyIsInRhcmdldEFzSHRtbEVsZW1lbnQiLCJ0YXJnZXRXaWR0aCIsImNhbGxvdXRTdHlsZXMiLCJkZWZhdWx0TWVudUl0ZW1SZW5kZXJlciIsIm9uTWVudU9wZW5lZCIsInNlY3Rpb25JdGVtIiwibWVudUNsYXNzTmFtZXMiLCJoZWFkZXJDb250ZXh0dWFsTWVudUl0ZW0iLCJhcmlhTGFiZWxsbGVkYnkiLCJ0b3BEaXZpZGVyIiwiY29udGV4dHVhbE1lbnVJdGVtIiwiaXRlbXNJbmRleCIsImJvdHRvbURpdmlkZXIiLCJmcm9tU2VjdGlvbiIsIl9yZW5kZXJBbmNob3JNZW51SXRlbSIsIl9yZW5kZXJTcGxpdEJ1dHRvbiIsIl9yZW5kZXJCdXR0b25JdGVtIiwiZGl2SHRtbFByb3BlcnRpZXMiLCJzdWJNZW51SG92ZXJEZWxheSIsInRpbWVvdXREdXJhdGlvbiIsIl9maW5kSXRlbUJ5S2V5IiwiX2ZpbmRJdGVtQnlLZXlGcm9tSXRlbXMiLCJpdGVtc18yIiwiaXNvcGVuIiwiTG9jYWxDb250ZXh0dWFsTWVudSIsImxpc3RTdHlsZVR5cGUiLCJDb250ZXh0dWFsTWVudSIsIkJ1dHRvbkdsb2JhbENsYXNzTmFtZXMiLCJtc0J1dHRvbiIsIm1zQnV0dG9uSGFzTWVudSIsIm1zQnV0dG9uSWNvbiIsIm1zQnV0dG9uTWVudUljb24iLCJtc0J1dHRvbkxhYmVsIiwibXNCdXR0b25EZXNjcmlwdGlvbiIsIm1zQnV0dG9uU2NyZWVuUmVhZGVyVGV4dCIsIm1zQnV0dG9uRmxleENvbnRhaW5lciIsIm1zQnV0dG9uVGV4dENvbnRhaW5lciIsImdldEJhc2VCdXR0b25DbGFzc05hbWVzIiwidmFyaWFudENsYXNzTmFtZSIsIm1lbnVJY29uQ2xhc3NOYW1lIiwiaXNTcGxpdCIsImljb25FeHBhbmRlZEhvdmVyZWQiLCJtZW51SWNvbkV4cGFuZGVkSG92ZXJlZCIsInJvb3RFeHBhbmRlZEhvdmVyZWQiLCJyb290SGFzTWVudSIsImxhYmVsSG92ZXJlZCIsImljb25Ib3ZlcmVkIiwiZGVzY3JpcHRpb25Ib3ZlcmVkIiwibWVudUljb25Ib3ZlcmVkIiwiaWNvblByZXNzZWQiLCJkZXNjcmlwdGlvblByZXNzZWQiLCJtZW51SWNvblByZXNzZWQiLCJyb290Q2hlY2tlZERpc2FibGVkIiwicm9vdENoZWNrZWRIb3ZlcmVkIiwicm9vdENoZWNrZWRQcmVzc2VkIiwiZmxleENvbnRhaW5lciIsInRleHRDb250YWluZXIiLCJpY29uRXhwYW5kZWQiLCJpY29uQ2hlY2tlZCIsImxhYmVsQ2hlY2tlZCIsImxhYmVsRGlzYWJsZWQiLCJtZW51SWNvbkNoZWNrZWQiLCJtZW51SWNvbkRpc2FibGVkIiwibWVudUljb25FeHBhbmRlZCIsImRlc2NyaXB0aW9uQ2hlY2tlZCIsImRlc2NyaXB0aW9uRGlzYWJsZWQiLCJzcGxpdEJ1dHRvbk1lbnVCdXR0b24iLCJzcGxpdEJ1dHRvbk1lbnVCdXR0b25FeHBhbmRlZCIsInNwbGl0QnV0dG9uTWVudUJ1dHRvbkRpc2FibGVkIiwic3BsaXRCdXR0b25NZW51QnV0dG9uQ2hlY2tlZCIsInNwbGl0QnV0dG9uQ29udGFpbmVyIiwic3BsaXRCdXR0b25Db250YWluZXJDaGVja2VkIiwic3BsaXRCdXR0b25Db250YWluZXJDaGVja2VkSG92ZXJlZCIsInNwbGl0QnV0dG9uQ29udGFpbmVySG92ZXJlZCIsInNwbGl0QnV0dG9uQ29udGFpbmVyRm9jdXNlZCIsInNwbGl0QnV0dG9uQ29udGFpbmVyRGlzYWJsZWQiLCJzcGxpdEJ1dHRvbk1lbnVJY29uIiwic3BsaXRCdXR0b25NZW51SWNvbkRpc2FibGVkIiwic3BsaXRCdXR0b25EaXZpZGVyIiwic3BsaXRCdXR0b25EaXZpZGVyRGlzYWJsZWQiLCJCYXNlQnV0dG9uIiwiX2J1dHRvbkVsZW1lbnQiLCJfc3BsaXRCdXR0b25Db250YWluZXIiLCJfcmVuZGVyZWRWaXNpYmxlTWVudSIsIl9vblJlbmRlckljb24iLCJfb25SZW5kZXJUZXh0Q29udGVudHMiLCJvblJlbmRlclRleHQiLCJfb25SZW5kZXJUZXh0IiwiX2hhc1RleHQiLCJfb25SZW5kZXJDaGlsZHJlbiIsIl9vblJlbmRlckFyaWFEZXNjcmlwdGlvbiIsIl9vblJlbmRlck1lbnVJY29uIiwibWVudUljb25Qcm9wcyIsIl9vblJlbmRlck1lbnUiLCJtZW51UHJvcHMiLCJwZXJzaXN0TWVudSIsIm1lbnVIaWRkZW4iLCJNZW51VHlwZSIsIm1lbnVBcyIsIl9tZW51U2hvdWxkRm9jdXNPbkNvbnRhaW5lciIsIl9tZW51U2hvdWxkRm9jdXNPbk1vdW50IiwiX2lzU3BsaXRCdXR0b24iLCJfb25EaXNtaXNzTWVudSIsIl9kaXNtaXNzTWVudSIsIl9vcGVuTWVudSIsIl9vblRvZ2dsZU1lbnUiLCJfb25TcGxpdENvbnRhaW5lckZvY3VzQ2FwdHVyZSIsIl9vblNwbGl0QnV0dG9uUHJpbWFyeUNsaWNrIiwiX29uTWVudUNsaWNrIiwiX29uS2V5UHJlc3MiLCJvbktleVByZXNzIiwiX29uU3BsaXRCdXR0b25Db250YWluZXJLZXlEb3duIiwiY2xpY2siLCJfaXNWYWxpZE1lbnVPcGVuS2V5Iiwib25NZW51Q2xpY2siLCJhcmlhSGlkZGVuIiwiYWxsb3dEaXNhYmxlZEZvY3VzIiwidG9nZ2xlIiwiaXNQcmltYXJ5QnV0dG9uRGlzYWJsZWQiLCJyZW5kZXJBc0FuY2hvciIsInJlc29sdmVkQXJpYUxhYmVsIiwiZGF0YUlzRm9jdXNhYmxlIiwiaXNDaGVja2JveFR5cGVSb2xlIiwiY2hlY2tlZE9yUHJlc3NlZFZhbHVlIiwiX29uUmVuZGVyU3BsaXRCdXR0b25Db250ZW50IiwiX29uUmVuZGVyQ29udGVudCIsIm9uUG9pbnRlclVwIiwib25BZnRlck1lbnVEaXNtaXNzIiwib3Blbk1lbnUiLCJvblJlbmRlckFyaWFEZXNjcmlwdGlvbiIsIm9uUmVuZGVyQ2hpbGRyZW4iLCJvblJlbmRlck1lbnUiLCJvblJlbmRlck1lbnVJY29uIiwiQnV0dG9uIiwiX3Nob3VsZFJlbmRlck1lbnUiLCJDb250ZW50IiwicmVuZGVyUGVyc2lzdGVkTWVudUhpZGRlbk9uTW91bnQiLCJnZXRTcGxpdEJ1dHRvbkNsYXNzTmFtZXMiLCJwcmltYXJ5QWN0aW9uQnV0dG9uUHJvcHMiLCJvblBvaW50ZXJEb3duIiwiU3BsaXRCdXR0b24iLCJfb25SZW5kZXJTcGxpdEJ1dHRvbk1lbnVCdXR0b24iLCJfb25SZW5kZXJTcGxpdEJ1dHRvbkRpdmlkZXIiLCJzcGxpdEJ1dHRvbk1lbnVQcm9wcyIsInNwbGl0QnV0dG9uQXJpYUxhYmVsIiwic3BsaXRCdXR0b25Qcm9wcyIsIm1lbnVUcmlnZ2VyS2V5Q29kZSIsImJhc2VDbGFzc05hbWUiLCJub091dGxpbmUiLCJpY29uU3R5bGUiLCJidXR0b25IaWdoQ29udHJhc3RGb2N1cyIsImN1c3RvbVN0eWxlcyIsInNwbGl0QnV0dG9uRGl2aWRlckJhc2VTdHlsZXMiLCJib3JkZXJUb3BSaWdodFJhZGl1cyIsImJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzIiwiYm9yZGVyUmlnaHQiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyTGVmdCIsInByaW1hcnkiLCJiYXNlQnV0dG9uU3R5bGVzIiwic3BsaXRCdXR0b25TdHlsZXMiLCJwcmltYXJ5U3R5bGVzIiwic3RhbmRhcmRTdHlsZXMiLCJEZWZhdWx0QnV0dG9uIiwiUHJpbWFyeUJ1dHRvbiIsIlZlaGljbGVBZGQiLCJfZGVmYXVsdCIsIm5ld1ZlaGljbGUiLCJzZXROZXdWZWhpY2xlIiwidXBkYXRlTmV3VmVoaWNsZSIsIm9uU3VibWl0IiwiVmVoaWNsZSIsImxvZyIsImlzRHVwbGljYXRlIiwiVmVoaWNsZUxpc3QiLCJ2ZWhpY2xlcyIsIl9jb2x1bW5zIiwiZmllbGRDb250ZW50IiwiQ29udGFpbmVyIiwiRGV0YWlsIiwiZmluZCIsInNlYXJjaENsaWVudCIsImNsaWVudCIsImNvbXBvbmVudEFzTWVtb2l6ZXIiLCJPdXRlciIsIklubmVyIiwiY29tcG9zZUNvbXBvbmVudEFzIiwiUmVzaXplR3JvdXBEaXJlY3Rpb24iLCJPdmVyZmxvd1NldEJhc2UiLCJfcGVyc2lzdGVkS2V5dGlwcyIsIl9rZXl0aXBNYW5hZ2VyIiwiX2RpdkNvbnRhaW5lciIsIl9vblJlbmRlckl0ZW1zIiwib25SZW5kZXJJdGVtIiwiX29uUmVuZGVyT3ZlcmZsb3dCdXR0b25XcmFwcGVyIiwid3JhcHBlckRpdlByb3BzIiwib3ZlcmZsb3dCdXR0b24iLCJvdmVyZmxvd0tleXRpcFNlcXVlbmNlcyIsIm5ld092ZXJmbG93SXRlbXMiLCJvdmVyZmxvd0l0ZW0iLCJwZXJzaXN0ZWRLZXl0aXAiLCJoYXNEeW5hbWljQ2hpbGRyZW4iLCJfZ2V0U3ViTWVudUZvckl0ZW0iLCJvbkV4ZWN1dGUiLCJuZXdPdmVyZmxvd0l0ZW0iLCJvblJlbmRlck92ZXJmbG93QnV0dG9uIiwidW5pcXVlQ29tcG9uZW50UHJvcHMiLCJvdmVyZmxvd0l0ZW1zIiwiZG9Ob3RDb250YWluV2l0aGluRm9jdXNab25lIiwib3ZlcmZsb3dTaWRlIiwic2hvd092ZXJmbG93IiwiZm9jdXNTdWNjZWVkZWQiLCJfcmVnaXN0ZXJQZXJzaXN0ZWRLZXl0aXBzIiwiX3VucmVnaXN0ZXJQZXJzaXN0ZWRLZXl0aXBzIiwiaXRlbVN1Yk1lbnVQcm92aWRlciIsIm92ZXJmbG93SXRlbVN0eWxlIiwiT3ZlcmZsb3dTZXQiLCJUb29sdGlwT3ZlcmZsb3dNb2RlIiwiZ2V0TmV4dFJlc2l6ZUdyb3VwU3RhdGVQcm92aWRlciIsIm1lYXN1cmVtZW50Q2FjaGUiLCJtZWFzdXJlbWVudHNDYWNoZSIsImdldENhY2hlZE1lYXN1cmVtZW50IiwiYWRkTWVhc3VyZW1lbnRUb0NhY2hlIiwibWVhc3VyZW1lbnQiLCJfY29udGFpbmVyRGltZW5zaW9uIiwiX21lYXN1cmVtZW50Q2FjaGUiLCJfZ2V0TWVhc3VyZWREaW1lbnNpb24iLCJtZWFzdXJlZERhdGEiLCJnZXRFbGVtZW50VG9NZWFzdXJlRGltZW5zaW9uIiwiY2FjaGVkRGltZW5zaW9uIiwibWVhc3VyZWREaW1lbnNpb24iLCJfc2hyaW5rQ29udGVudHNVbnRpbFRoZXlGaXQiLCJvblJlZHVjZURhdGEiLCJkYXRhVG9NZWFzdXJlIiwibmV4dE1lYXN1cmVkRGF0YSIsInJlbmRlcmVkRGF0YSIsInJlc2l6ZURpcmVjdGlvbiIsImdldE5leHRTdGF0ZSIsIm5ld0NvbnRhaW5lckRpbWVuc2lvbiIsIm5ld0RpbWVuc2lvbiIsImZ1bGxEaW1lbnNpb25EYXRhIiwib25Hcm93RGF0YSIsIm1lYXN1cmVDb250YWluZXIiLCJfdXBkYXRlQ29udGFpbmVyRGltZW5zaW9uIiwiX2dyb3dEYXRhVW50aWxJdERvZXNOb3RGaXQiLCJzaG91bGRSZW5kZXJEYXRhRm9yTWVhc3VyZW1lbnQiLCJnZXRJbml0aWFsUmVzaXplR3JvdXBTdGF0ZSIsIk1lYXN1cmVkQ29udGV4dCIsImlzTWVhc3VyZWQiLCJoaWRkZW5EaXZTdHlsZXMiLCJoaWRkZW5QYXJlbnRTdHlsZXMiLCJSZXNpemVHcm91cCIsIlJlc2l6ZUdyb3VwQmFzZSIsIl9uZXh0UmVzaXplR3JvdXBTdGF0ZVByb3ZpZGVyIiwiX2luaXRpYWxIaWRkZW5EaXYiLCJfdXBkYXRlSGlkZGVuRGl2IiwiX2hhc1JlbmRlcmVkQ29udGVudCIsIm9uUmVuZGVyRGF0YSIsImRhdGFOZWVkc01lYXN1cmluZyIsImlzSW5pdGlhbE1lYXN1cmUiLCJfYWZ0ZXJDb21wb25lbnRSZW5kZXJlZCIsImRhdGFEaWRSZW5kZXIiLCJyZW1lYXN1cmUiLCJjb250YWluZXJEaW1lbnNpb24iLCJyZWZUb01lYXN1cmUiLCJzY3JvbGxXaWR0aCIsImZvY3VzSW5zZXQiLCJmb2N1c0NvbG9yIiwiX3AiLCJiYXNlU3BsaXRCdXR0b25TdHlsZXMiLCJDb21tYW5kQmFyQnV0dG9uIiwiVG9vbHRpcERlbGF5IiwiVG9vbHRpcCIsIlRvb2x0aXBCYXNlIiwic3ViVGV4dCIsInRvb2x0aXBHYXBTcGFjZSIsIlRvb2x0aXBIb3N0QmFzZSIsIl90b29sdGlwSG9zdCIsIl9kZWZhdWx0VG9vbHRpcElkIiwic2hvdyIsIl90b2dnbGVUb29sdGlwIiwiX2hpZGVUb29sdGlwIiwiX2dldFRhcmdldEVsZW1lbnQiLCJvdmVyZmxvd01vZGUiLCJQYXJlbnQiLCJTZWxmIiwiX29uVG9vbHRpcE1vdXNlRW50ZXIiLCJfY3VycmVudFZpc2libGVUb29sdGlwIiwib3ZlcmZsb3dFbGVtZW50IiwiaGFzSG9yaXpvbnRhbE92ZXJmbG93IiwiaGFzVmVydGljYWxPdmVyZmxvdyIsIl9jbGVhckRpc21pc3NUaW1lciIsIl9jbGVhck9wZW5UaW1lciIsInplcm8iLCJpc0FyaWFQbGFjZWhvbGRlclJlbmRlcmVkIiwiZGVsYXlUaW1lIiwiX2dldERlbGF5VGltZSIsIl9vcGVuVGltZXJJZCIsIl9vblRvb2x0aXBNb3VzZUxlYXZlIiwiY2xvc2VEZWxheSIsIl9kaXNtaXNzVGltZXJJZCIsIl9vblRvb2x0aXBLZXlEb3duIiwiaXNUb29sdGlwVmlzaWJsZSIsIm9uVG9vbHRpcFRvZ2dsZSIsImxvbmciLCJ0b29sdGlwUHJvcHMiLCJ0b29sdGlwSWQiLCJpc0NvbnRlbnRQcmVzZW50Iiwic2hvd1Rvb2x0aXAiLCJvbkJsdXJDYXB0dXJlIiwiYXJpYVBsYWNlaG9sZGVyIiwiVG9vbHRpcEhvc3QiLCJnZXRDb21tYW5kQnV0dG9uU3R5bGVzIiwicm9vdFN0eWxlcyIsInJlc3RDdXN0b21TdHlsZXMiLCJDb21tYW5kQmFyIiwiQ29tbWFuZEJhckJhc2UiLCJfb3ZlcmZsb3dTZXQiLCJfcmVzaXplR3JvdXAiLCJfb25SZW5kZXJEYXRhIiwicHJpbWFyeVNldCIsInByaW1hcnlJdGVtcyIsIl9vblJlbmRlckl0ZW0iLCJfb25SZW5kZXJPdmVyZmxvd0J1dHRvbiIsImZhckl0ZW1zIiwic2Vjb25kYXJ5U2V0IiwiaXRlbVRleHQiLCJjb21tYW5kQnV0dG9uUHJvcHMiLCJidXR0b25TdHlsZXMiLCJpY29uT25seSIsIl9vbkJ1dHRvbkNsaWNrIiwiX2NvbW1hbmRCdXR0b24iLCJCdXR0b25BcyIsImJ1dHRvbkFzIiwiQ29tbWFuZEJhckJ1dHRvbkFzIiwiY29tbWFuZEJhckJ1dHRvbkFzIiwiVHlwZSIsIm92ZXJmbG93QnV0dG9uUHJvcHMiLCJjb21iaW5lZE92ZXJmbG93SXRlbXMiLCJvdmVyZmxvd1Byb3BzIiwiT3ZlcmZsb3dCdXR0b25UeXBlIiwib3ZlcmZsb3dCdXR0b25BcyIsIl9vblJlZHVjZURhdGEiLCJzaGlmdE9uUmVkdWNlIiwib25EYXRhUmVkdWNlZCIsIm1vdmVkSXRlbSIsInJlbmRlcmVkSW5PdmVyZmxvdyIsIm5ld0RhdGEiLCJfY29tcHV0ZUNhY2hlS2V5IiwiX29uR3Jvd0RhdGEiLCJvbkRhdGFHcm93biIsIm1pbmltdW1PdmVyZmxvd0l0ZW1zIiwiY29tbWFuZEJhckRhdGEiLCJvdmVyZmxvd1NldCIsImluYWN0aXZlIiwiTmF2YmFyIiwiQ29udGFjdCIsIkFib3V0IiwiQ2xpZW50cyIsInNldFNlYXJjaCIsImFsZXJ0IiwiQ3JlYXRlIiwibmV3Q2xpZW50Iiwic2V0TmV3Q2xpZW50IiwiaGFuZGxlT25DaGFuZ2UiLCJpbml0aWFsaXplSWNvbnMiLCJzcGVhayIsIkdsb2JhbE5hdkJ1dHRvbiIsIkNoZXZyb25Eb3duIiwiQ2hldnJvblVwIiwiRWRpdCIsIkFkZCIsIkNhbmNlbCIsIk1vcmUiLCJTZXR0aW5ncyIsIk1haWwiLCJGaWx0ZXIiLCJTZWFyY2giLCJTaGFyZSIsIkJsb2NrZWRTaXRlIiwiRmF2b3JpdGVTdGFyIiwiRmF2b3JpdGVTdGFyRmlsbCIsIkNoZWNrTWFyayIsIkRlbGV0ZSIsIkNoZXZyb25MZWZ0IiwiQ2hldnJvblJpZ2h0IiwiQ2FsZW5kYXIiLCJNZWdhcGhvbmUiLCJVbmRvIiwiRmxhZyIsIlBhZ2UiLCJQaW5uZWQiLCJWaWV3IiwiQ2xlYXIiLCJEb3dubG9hZCIsIlVwbG9hZCIsIkZvbGRlciIsIlNvcnQiLCJBbGlnblJpZ2h0IiwiQWxpZ25MZWZ0IiwiQWRkRnJpZW5kIiwiSW5mbyIsIlNvcnRMaW5lcyIsIkNpcmNsZVJpbmciLCJIZWFydCIsIkhlYXJ0RmlsbCIsIlRpbGVzIiwiRW1iZWQiLCJHbGltbWVyIiwiQXNjZW5kaW5nIiwiRGVzY2VuZGluZyIsIlNvcnRVcCIsIlNvcnREb3duIiwiU3luY1RvUEMiLCJMYXJnZUdyaWQiLCJTa3lwZUNoZWNrIiwiU2t5cGVDbG9jayIsIlNreXBlTWludXMiLCJDbGVhckZpbHRlciIsIkZsb3ciLCJTdGF0dXNDaXJjbGVDaGVja21hcmsiLCJNb3JlVmVydGljYWwiLCJyZWdpc3Rlckljb25BbGlhc2VzIiwiaW5pdGlhbGl6ZSJdLCJtYXBwaW5ncyI6IlVBQ0lBLEVBREFDLEUsOEJDRUosSUFBSUMsRUFBVSxFQUFRLEtBTWxCQyxFQUFnQixDQUNsQkMsbUJBQW1CLEVBQ25CQyxhQUFhLEVBQ2JDLGNBQWMsRUFDZEMsY0FBYyxFQUNkQyxhQUFhLEVBQ2JDLGlCQUFpQixFQUNqQkMsMEJBQTBCLEVBQzFCQywwQkFBMEIsRUFDMUJDLFFBQVEsRUFDUkMsV0FBVyxFQUNYQyxNQUFNLEdBRUpDLEVBQWdCLENBQ2xCQyxNQUFNLEVBQ05DLFFBQVEsRUFDUkMsV0FBVyxFQUNYQyxRQUFRLEVBQ1JDLFFBQVEsRUFDUkMsV0FBVyxFQUNYQyxPQUFPLEdBU0xDLEVBQWUsQ0FDakIsVUFBWSxFQUNaQyxTQUFTLEVBQ1RqQixjQUFjLEVBQ2RDLGFBQWEsRUFDYkssV0FBVyxFQUNYQyxNQUFNLEdBRUpXLEVBQWUsR0FJbkIsU0FBU0MsRUFBV0MsR0FFbEIsT0FBSXpCLEVBQVEwQixPQUFPRCxHQUNWSixFQUlGRSxFQUFhRSxFQUFvQixXQUFNeEIsRUFWaERzQixFQUFhdkIsRUFBUTJCLFlBaEJLLENBQ3hCLFVBQVksRUFDWkMsUUFBUSxFQUNSdkIsY0FBYyxFQUNkQyxhQUFhLEVB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YyxPQUFRLGdCQUFvQixHQUFVLENBQUV5bEQsTUFBT0EsSUFDMUUsZ0JBQW9CbkMsR0FBZSxLQUMvQixnQkFBb0JrZ0gsR0FBUSxNQUM1QixnQkFBb0JyZ0gsRUFBUSxLQUN4QixnQkFBb0JSLEVBQU8sQ0FBRS80QyxPQUFPLEVBQU14RixLQUFNLElBQUt2RSxVQUFXMDRKLEtBQ2hFLGdCQUFvQjUxRyxFQUFPLENBQUV2K0MsS0FBTSxjQUFldkUsVUFBVzI0SixLQUM3RCxnQkFBb0I3MUcsRUFBTyxDQUFFditDLEtBQU0sV0FBWXZFLFVBQVc0akssS0FDMUQsZ0JBQW9COWdILEVBQU8sQ0FBRXYrQyxLQUFNLFNBQVV2RSxVQUFXNmpLLEtBQ3hELGdCQUFvQi9nSCxFQUFPLENBQUV2K0MsS0FBTSxXQUFZdkUsVUFBVzhqSyxLQUMxRCxnQkFBb0JoaEgsRUFBTyxDQUFFditDLEtBQU0scUJBQXNCdkUsVUFBVyxLQUNwRSxnQkFBb0I4aUQsRUFBTyxDQUFFditDLEtBQU0saUJBQWtCdkUsVUFBV2lrSyxVRGhCNUMsTUFBT2h0RyxLIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiA/IChvYmopID0+IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopIDogKG9iaikgPT4gb2JqLl9fcHJvdG9fXztcbnZhciBsZWFmUHJvdG90eXBlcztcbi8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuLy8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4vLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuLy8gbW9kZSAmIDE2OiByZXR1cm4gdmFsdWUgd2hlbiBpdCdzIFByb21pc2UtbGlrZVxuLy8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuX193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcblx0aWYobW9kZSAmIDEpIHZhbHVlID0gdGhpcyh2YWx1ZSk7XG5cdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG5cdGlmKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUpIHtcblx0XHRpZigobW9kZSAmIDQpICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcblx0XHRpZigobW9kZSAmIDE2KSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHZhbHVlO1xuXHR9XG5cdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG5cdHZhciBkZWYgPSB7fTtcblx0bGVhZlByb3RvdHlwZXMgPSBsZWFmUHJvdG90eXBlcyB8fCBbbnVsbCwgZ2V0UHJvdG8oe30pLCBnZXRQcm90byhbXSksIGdldFByb3RvKGdldFByb3RvKV07XG5cdGZvcih2YXIgY3VycmVudCA9IG1vZGUgJiAyICYmIHZhbHVlOyB0eXBlb2YgY3VycmVudCA9PSAnb2JqZWN0JyAmJiAhfmxlYWZQcm90b3R5cGVzLmluZGV4T2YoY3VycmVudCk7IGN1cnJlbnQgPSBnZXRQcm90byhjdXJyZW50KSkge1xuXHRcdE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGN1cnJlbnQpLmZvckVhY2goa2V5ID0+IGRlZltrZXldID0gKCkgPT4gdmFsdWVba2V5XSk7XG5cdH1cblx0ZGVmWydkZWZhdWx0J10gPSAoKSA9PiB2YWx1ZTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBkZWYpO1xuXHRyZXR1cm4gbnM7XG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSwgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMsIG9wdGlvbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJywgZmxhZ3Mob3B0aW9ucykpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIG9wdHMpIHtcbiAgICB2YXIgcGF0aCA9ICcnXG4gICAgdmFyIGRhdGEgPSBvYmogfHwge31cbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge31cbiAgICB2YXIgZW5jb2RlID0gb3B0aW9ucy5wcmV0dHkgPyBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgOiBlbmNvZGVVUklDb21wb25lbnRcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlblxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGRhdGFbdG9rZW4ubmFtZV1cbiAgICAgIHZhciBzZWdtZW50XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBiZSBkZWZpbmVkJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNhcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCByZXBlYXQsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICdgJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IGJlIGVtcHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2VnbWVudCA9IGVuY29kZSh2YWx1ZVtqXSlcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSlcblxuICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgXCInICsgc2VnbWVudCArICdcIicpXG4gICAgICB9XG5cbiAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudFxuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcXC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcmVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaEtleXMgKHJlLCBrZXlzKSB7XG4gIHJlLmtleXMgPSBrZXlzXG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xNC4wXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHUoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHUoMjI3KSk7XG5mdW5jdGlvbiBiYShhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgZGE9ITEsZWE9bnVsbCxmYT0hMSxoYT1udWxsLGlhPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2RhPSEwO2VhPWF9fTtmdW5jdGlvbiBqYShhLGIsYyxkLGUsZixnLGgsayl7ZGE9ITE7ZWE9bnVsbDtiYS5hcHBseShpYSxhcmd1bWVudHMpfWZ1bmN0aW9uIGthKGEsYixjLGQsZSxmLGcsaCxrKXtqYS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoZGEpe2lmKGRhKXt2YXIgbD1lYTtkYT0hMTtlYT1udWxsfWVsc2UgdGhyb3cgRXJyb3IodSgxOTgpKTtmYXx8KGZhPSEwLGhhPWwpfX12YXIgbGE9bnVsbCxtYT1udWxsLG5hPW51bGw7XG5mdW5jdGlvbiBvYShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9bmEoYyk7a2EoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH12YXIgcGE9bnVsbCxxYT17fTtcbmZ1bmN0aW9uIHJhKCl7aWYocGEpZm9yKHZhciBhIGluIHFhKXt2YXIgYj1xYVthXSxjPXBhLmluZGV4T2YoYSk7aWYoISgtMTxjKSl0aHJvdyBFcnJvcih1KDk2LGEpKTtpZighc2FbY10pe2lmKCFiLmV4dHJhY3RFdmVudHMpdGhyb3cgRXJyb3IodSg5NyxhKSk7c2FbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtpZih0YS5oYXNPd25Qcm9wZXJ0eShoKSl0aHJvdyBFcnJvcih1KDk5LGgpKTt0YVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZ1YShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8odWEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtpZighZSl0aHJvdyBFcnJvcih1KDk4LGQsYSkpO319fX1cbmZ1bmN0aW9uIHVhKGEsYixjKXtpZih2YVthXSl0aHJvdyBFcnJvcih1KDEwMCxhKSk7dmFbYV09Yjt3YVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBzYT1bXSx0YT17fSx2YT17fSx3YT17fTtmdW5jdGlvbiB4YShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtpZighcWEuaGFzT3duUHJvcGVydHkoYyl8fHFhW2NdIT09ZCl7aWYocWFbY10pdGhyb3cgRXJyb3IodSgxMDIsYykpO3FhW2NdPWQ7Yj0hMH19YiYmcmEoKX12YXIgeWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLHphPW51bGwsQWE9bnVsbCxCYT1udWxsO1xuZnVuY3Rpb24gQ2EoYSl7aWYoYT1tYShhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHphKXRocm93IEVycm9yKHUoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9bGEoYiksemEoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRGEoYSl7QWE/QmE/QmEucHVzaChhKTpCYT1bYV06QWE9YX1mdW5jdGlvbiBFYSgpe2lmKEFhKXt2YXIgYT1BYSxiPUJhO0JhPUFhPW51bGw7Q2EoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUNhKGJbYV0pfX1mdW5jdGlvbiBGYShhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEdhKGEsYixjLGQsZSl7cmV0dXJuIGEoYixjLGQsZSl9ZnVuY3Rpb24gSGEoKXt9dmFyIElhPUZhLEphPSExLEthPSExO2Z1bmN0aW9uIExhKCl7aWYobnVsbCE9PUFhfHxudWxsIT09QmEpSGEoKSxFYSgpfVxuZnVuY3Rpb24gTWEoYSxiLGMpe2lmKEthKXJldHVybiBhKGIsYyk7S2E9ITA7dHJ5e3JldHVybiBJYShhLGIsYyl9ZmluYWxseXtLYT0hMSxMYSgpfX12YXIgTmE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLE9hPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksUGE9e30sUWE9e307XG5mdW5jdGlvbiBSYShhKXtpZihPYS5jYWxsKFFhLGEpKXJldHVybiEwO2lmKE9hLmNhbGwoUGEsYSkpcmV0dXJuITE7aWYoTmEudGVzdChhKSlyZXR1cm4gUWFbYV09ITA7UGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gU2EoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBUYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxTYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHYoYSxiLGMsZCxlLGYpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mfXZhciBDPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMCwhMSxhLG51bGwsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0NbYl09bmV3IHYoYiwxLCExLGFbMV0sbnVsbCwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMiwhMSxhLG51bGwsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMywhMCxhLG51bGwsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsNCwhMSxhLG51bGwsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw2LCExLGEsbnVsbCwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO3ZhciBVYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIFZhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFxuVmEpO0NbYl09bmV3IHYoYiwxLCExLGEsbnVsbCwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxWYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxWYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuQy54bGlua0hyZWY9bmV3IHYoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwKX0pO3ZhciBXYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtXYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChXYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtXYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnXCIpfHwoV2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc9e3N1c3BlbnNlOm51bGx9KTtcbmZ1bmN0aW9uIFhhKGEsYixjLGQpe3ZhciBlPUMuaGFzT3duUHJvcGVydHkoYik/Q1tiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KFRhKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9SYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIFlhPS9eKC4qKVtcXFxcXFwvXS8sRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLFphPUU/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsJGE9RT9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGFiPUU/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGJiPUU/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGNiPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGRiPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGViPUU/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsZmI9RT9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLGdiPUU/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLGhiPUU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGliPUU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6XG42MDEyMCxqYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LGtiPUU/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsbGI9RT9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsbWI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIG5iKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1tYiYmYVttYl18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiBvYihhKXtpZigtMT09PWEuX3N0YXR1cyl7YS5fc3RhdHVzPTA7dmFyIGI9YS5fY3RvcjtiPWIoKTthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfX1cbmZ1bmN0aW9uIHBiKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgYWI6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgJGE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIGNiOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIGJiOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgaGI6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgaWI6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZWI6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSBkYjpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIGdiOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO3JldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XG5cIkZvcndhcmRSZWZcIik7Y2FzZSBqYjpyZXR1cm4gcGIoYS50eXBlKTtjYXNlIGxiOnJldHVybiBwYihhLnJlbmRlcik7Y2FzZSBrYjppZihhPTE9PT1hLl9zdGF0dXM/YS5fcmVzdWx0Om51bGwpcmV0dXJuIHBiKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIHFiKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMzpjYXNlIDQ6Y2FzZSA2OmNhc2UgNzpjYXNlIDEwOmNhc2UgOTp2YXIgYz1cIlwiO2JyZWFrIGE7ZGVmYXVsdDp2YXIgZD1hLl9kZWJ1Z093bmVyLGU9YS5fZGVidWdTb3VyY2UsZj1wYihhLnR5cGUpO2M9bnVsbDtkJiYoYz1wYihkLnR5cGUpKTtkPWY7Zj1cIlwiO2U/Zj1cIiAoYXQgXCIrZS5maWxlTmFtZS5yZXBsYWNlKFlhLFwiXCIpK1wiOlwiK2UubGluZU51bWJlcitcIilcIjpjJiYoZj1cIiAoY3JlYXRlZCBieSBcIitjK1wiKVwiKTtjPVwiXFxuICAgIGluIFwiKyhkfHxcIlVua25vd25cIikrZn1iKz1jO2E9YS5yZXR1cm59d2hpbGUoYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiByYihhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gc2IoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIHRiKGEpe3ZhciBiPXNiKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiB4YihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9dGIoYSkpfWZ1bmN0aW9uIHliKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1zYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIHpiKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBuKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIEFiKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPXJiKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gQmIoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZYYShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gQ2IoYSxiKXtCYihhLGIpO3ZhciBjPXJiKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP0RiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJkRiKGEsYi50eXBlLHJiKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gRWIoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIERiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBGYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBHYihhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPUZiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIEhiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIityYihjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gSWIoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHUoOTEpKTtyZXR1cm4gbih7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBKYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcih1KDkyKSk7aWYoQXJyYXkuaXNBcnJheShjKSl7aWYoISgxPj1jLmxlbmd0aCkpdGhyb3cgRXJyb3IodSg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnJiKGMpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9cmIoYi52YWx1ZSksZD1yYihiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIExiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIE1iPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIE5iKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gT2IoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP05iKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIFBiLFFiPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU1iLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1BiPVBifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1BiLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPVBiLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIFJiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9ZnVuY3Rpb24gU2IoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVGI9e2FuaW1hdGlvbmVuZDpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlNiKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVWI9e30sVmI9e307XG55YSYmKFZiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFRiLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFRiLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gV2IoYSl7aWYoVWJbYV0pcmV0dXJuIFViW2FdO2lmKCFUYlthXSlyZXR1cm4gYTt2YXIgYj1UYlthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBWYilyZXR1cm4gVWJbYV09YltjXTtyZXR1cm4gYX1cbnZhciBYYj1XYihcImFuaW1hdGlvbmVuZFwiKSxZYj1XYihcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxaYj1XYihcImFuaW1hdGlvbnN0YXJ0XCIpLCRiPVdiKFwidHJhbnNpdGlvbmVuZFwiKSxhYz1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksYmM9bmV3IChcImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcCk7ZnVuY3Rpb24gY2MoYSl7dmFyIGI9YmMuZ2V0KGEpO3ZvaWQgMD09PWImJihiPW5ldyBNYXAsYmMuc2V0KGEsYikpO3JldHVybiBifVxuZnVuY3Rpb24gZGMoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmVmZmVjdFRhZyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gZWMoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBmYyhhKXtpZihkYyhhKSE9PWEpdGhyb3cgRXJyb3IodSgxODgpKTt9XG5mdW5jdGlvbiBnYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1kYyhhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBmYyhlKSxhO2lmKGY9PT1kKXJldHVybiBmYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHUoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IodSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih1KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGhjKGEpe2E9Z2MoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBpYyhhLGIpe2lmKG51bGw9PWIpdGhyb3cgRXJyb3IodSgzMCkpO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiBqYyhhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIga2M9bnVsbDtcbmZ1bmN0aW9uIGxjKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKylvYShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZvYShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gbWMoYSl7bnVsbCE9PWEmJihrYz1pYyhrYyxhKSk7YT1rYztrYz1udWxsO2lmKGEpe2pjKGEsbGMpO2lmKGtjKXRocm93IEVycm9yKHUoOTUpKTtpZihmYSl0aHJvdyBhPWhhLGZhPSExLGhhPW51bGwsYTt9fVxuZnVuY3Rpb24gbmMoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIG9jKGEpe2lmKCF5YSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn12YXIgcGM9W107ZnVuY3Rpb24gcWMoYSl7YS50b3BMZXZlbFR5cGU9bnVsbDthLm5hdGl2ZUV2ZW50PW51bGw7YS50YXJnZXRJbnN0PW51bGw7YS5hbmNlc3RvcnMubGVuZ3RoPTA7MTA+cGMubGVuZ3RoJiZwYy5wdXNoKGEpfVxuZnVuY3Rpb24gcmMoYSxiLGMsZCl7aWYocGMubGVuZ3RoKXt2YXIgZT1wYy5wb3AoKTtlLnRvcExldmVsVHlwZT1hO2UuZXZlbnRTeXN0ZW1GbGFncz1kO2UubmF0aXZlRXZlbnQ9YjtlLnRhcmdldEluc3Q9YztyZXR1cm4gZX1yZXR1cm57dG9wTGV2ZWxUeXBlOmEsZXZlbnRTeXN0ZW1GbGFnczpkLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX19XG5mdW5jdGlvbiBzYyhhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkPWM7aWYoMz09PWQudGFnKWQ9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlbHNle2Zvcig7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvfWlmKCFkKWJyZWFrO2I9Yy50YWc7NSE9PWImJjYhPT1ifHxhLmFuY2VzdG9ycy5wdXNoKGMpO2M9dGMoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9bmMoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTt2YXIgZj1hLm5hdGl2ZUV2ZW50LGc9YS5ldmVudFN5c3RlbUZsYWdzOzA9PT1jJiYoZ3w9NjQpO2Zvcih2YXIgaD1udWxsLGs9MDtrPHNhLmxlbmd0aDtrKyspe3ZhciBsPXNhW2tdO2wmJihsPWwuZXh0cmFjdEV2ZW50cyhkLGIsZixlLGcpKSYmKGg9XG5pYyhoLGwpKX1tYyhoKX19ZnVuY3Rpb24gdWMoYSxiLGMpe2lmKCFjLmhhcyhhKSl7c3dpdGNoKGEpe2Nhc2UgXCJzY3JvbGxcIjp2YyhiLFwic2Nyb2xsXCIsITApO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6dmMoYixcImZvY3VzXCIsITApO3ZjKGIsXCJibHVyXCIsITApO2Muc2V0KFwiYmx1clwiLG51bGwpO2Muc2V0KFwiZm9jdXNcIixudWxsKTticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6b2MoYSkmJnZjKGIsYSwhMCk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWFjLmluZGV4T2YoYSkmJkYoYSxiKX1jLnNldChhLG51bGwpfX1cbnZhciB3Yyx4Yyx5Yyx6Yz0hMSxBYz1bXSxCYz1udWxsLENjPW51bGwsRGM9bnVsbCxFYz1uZXcgTWFwLEZjPW5ldyBNYXAsR2M9W10sSGM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjbG9zZSBjYW5jZWwgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKSxJYz1cImZvY3VzIGJsdXIgZHJhZ2VudGVyIGRyYWdsZWF2ZSBtb3VzZW92ZXIgbW91c2VvdXQgcG9pbnRlcm92ZXIgcG9pbnRlcm91dCBnb3Rwb2ludGVyY2FwdHVyZSBsb3N0cG9pbnRlcmNhcHR1cmVcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBKYyhhLGIpe3ZhciBjPWNjKGIpO0hjLmZvckVhY2goZnVuY3Rpb24oYSl7dWMoYSxiLGMpfSk7SWMuZm9yRWFjaChmdW5jdGlvbihhKXt1YyhhLGIsYyl9KX1mdW5jdGlvbiBLYyhhLGIsYyxkLGUpe3JldHVybntibG9ja2VkT246YSx0b3BMZXZlbFR5cGU6YixldmVudFN5c3RlbUZsYWdzOmN8MzIsbmF0aXZlRXZlbnQ6ZSxjb250YWluZXI6ZH19XG5mdW5jdGlvbiBMYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOkJjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpDYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpEYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6RWMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6RmMuZGVsZXRlKGIucG9pbnRlcklkKX19ZnVuY3Rpb24gTWMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT1LYyhiLGMsZCxlLGYpLG51bGwhPT1iJiYoYj1OYyhiKSxudWxsIT09YiYmeGMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO3JldHVybiBhfVxuZnVuY3Rpb24gT2MoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzXCI6cmV0dXJuIEJjPU1jKEJjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBDYz1NYyhDYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gRGM9TWMoRGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtFYy5zZXQoZixNYyhFYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsRmMuc2V0KGYsTWMoRmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gUGMoYSl7dmFyIGI9dGMoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1kYyhiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1lYyhjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7eWMoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfWZ1bmN0aW9uIFFjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTt2YXIgYj1SYyhhLnRvcExldmVsVHlwZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYS5jb250YWluZXIsYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWIpe3ZhciBjPU5jKGIpO251bGwhPT1jJiZ4YyhjKTthLmJsb2NrZWRPbj1iO3JldHVybiExfXJldHVybiEwfVxuZnVuY3Rpb24gU2MoYSxiLGMpe1FjKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiBUYygpe2Zvcih6Yz0hMTswPEFjLmxlbmd0aDspe3ZhciBhPUFjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1OYyhhLmJsb2NrZWRPbik7bnVsbCE9PWEmJndjKGEpO2JyZWFrfXZhciBiPVJjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLmNvbnRhaW5lcixhLm5hdGl2ZUV2ZW50KTtudWxsIT09Yj9hLmJsb2NrZWRPbj1iOkFjLnNoaWZ0KCl9bnVsbCE9PUJjJiZRYyhCYykmJihCYz1udWxsKTtudWxsIT09Q2MmJlFjKENjKSYmKENjPW51bGwpO251bGwhPT1EYyYmUWMoRGMpJiYoRGM9bnVsbCk7RWMuZm9yRWFjaChTYyk7RmMuZm9yRWFjaChTYyl9ZnVuY3Rpb24gVWMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLHpjfHwoemM9ITAsci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksVGMpKSl9XG5mdW5jdGlvbiBWYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBVYyhiLGEpfWlmKDA8QWMubGVuZ3RoKXtVYyhBY1swXSxhKTtmb3IodmFyIGM9MTtjPEFjLmxlbmd0aDtjKyspe3ZhciBkPUFjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09QmMmJlVjKEJjLGEpO251bGwhPT1DYyYmVWMoQ2MsYSk7bnVsbCE9PURjJiZVYyhEYyxhKTtFYy5mb3JFYWNoKGIpO0ZjLmZvckVhY2goYik7Zm9yKGM9MDtjPEdjLmxlbmd0aDtjKyspZD1HY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8R2MubGVuZ3RoJiYoYz1HY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylQYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJkdjLnNoaWZ0KCl9XG52YXIgV2M9e30sWWM9bmV3IE1hcCxaYz1uZXcgTWFwLCRjPVtcImFib3J0XCIsXCJhYm9ydFwiLFhiLFwiYW5pbWF0aW9uRW5kXCIsWWIsXCJhbmltYXRpb25JdGVyYXRpb25cIixaYixcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIixcInNlZWtpbmdcIixcblwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLCRiLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBhZChhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXSxmPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO2Y9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmYsY2FwdHVyZWQ6ZitcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltkXSxldmVudFByaW9yaXR5OmJ9O1pjLnNldChkLGIpO1ljLnNldChkLGYpO1djW2VdPWZ9fVxuYWQoXCJibHVyIGJsdXIgY2FuY2VsIGNhbmNlbCBjbGljayBjbGljayBjbG9zZSBjbG9zZSBjb250ZXh0bWVudSBjb250ZXh0TWVudSBjb3B5IGNvcHkgY3V0IGN1dCBhdXhjbGljayBhdXhDbGljayBkYmxjbGljayBkb3VibGVDbGljayBkcmFnZW5kIGRyYWdFbmQgZHJhZ3N0YXJ0IGRyYWdTdGFydCBkcm9wIGRyb3AgZm9jdXMgZm9jdXMgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSwwKTtcbmFkKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO2FkKCRjLDIpO2Zvcih2YXIgYmQ9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLGNkPTA7Y2Q8YmQubGVuZ3RoO2NkKyspWmMuc2V0KGJkW2NkXSwwKTtcbnZhciBkZD1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGVkPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LGZkPSEwO2Z1bmN0aW9uIEYoYSxiKXt2YyhiLGEsITEpfWZ1bmN0aW9uIHZjKGEsYixjKXt2YXIgZD1aYy5nZXQoYik7c3dpdGNoKHZvaWQgMD09PWQ/MjpkKXtjYXNlIDA6ZD1nZC5iaW5kKG51bGwsYiwxLGEpO2JyZWFrO2Nhc2UgMTpkPWhkLmJpbmQobnVsbCxiLDEsYSk7YnJlYWs7ZGVmYXVsdDpkPWlkLmJpbmQobnVsbCxiLDEsYSl9Yz9hLmFkZEV2ZW50TGlzdGVuZXIoYixkLCEwKTphLmFkZEV2ZW50TGlzdGVuZXIoYixkLCExKX1mdW5jdGlvbiBnZChhLGIsYyxkKXtKYXx8SGEoKTt2YXIgZT1pZCxmPUphO0phPSEwO3RyeXtHYShlLGEsYixjLGQpfWZpbmFsbHl7KEphPWYpfHxMYSgpfX1mdW5jdGlvbiBoZChhLGIsYyxkKXtlZChkZCxpZC5iaW5kKG51bGwsYSxiLGMsZCkpfVxuZnVuY3Rpb24gaWQoYSxiLGMsZCl7aWYoZmQpaWYoMDxBYy5sZW5ndGgmJi0xPEhjLmluZGV4T2YoYSkpYT1LYyhudWxsLGEsYixjLGQpLEFjLnB1c2goYSk7ZWxzZXt2YXIgZT1SYyhhLGIsYyxkKTtpZihudWxsPT09ZSlMYyhhLGQpO2Vsc2UgaWYoLTE8SGMuaW5kZXhPZihhKSlhPUtjKGUsYSxiLGMsZCksQWMucHVzaChhKTtlbHNlIGlmKCFPYyhlLGEsYixjLGQpKXtMYyhhLGQpO2E9cmMoYSxkLG51bGwsYik7dHJ5e01hKHNjLGEpfWZpbmFsbHl7cWMoYSl9fX19XG5mdW5jdGlvbiBSYyhhLGIsYyxkKXtjPW5jKGQpO2M9dGMoYyk7aWYobnVsbCE9PWMpe3ZhciBlPWRjKGMpO2lmKG51bGw9PT1lKWM9bnVsbDtlbHNle3ZhciBmPWUudGFnO2lmKDEzPT09Zil7Yz1lYyhlKTtpZihudWxsIT09YylyZXR1cm4gYztjPW51bGx9ZWxzZSBpZigzPT09Zil7aWYoZS5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWUudGFnP2Uuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtjPW51bGx9ZWxzZSBlIT09YyYmKGM9bnVsbCl9fWE9cmMoYSxkLGMsYik7dHJ5e01hKHNjLGEpfWZpbmFsbHl7cWMoYSl9cmV0dXJuIG51bGx9XG52YXIgamQ9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sa2Q9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKGpkKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2tkLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7amRbYl09amRbYV19KX0pO2Z1bmN0aW9uIGxkKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxqZC5oYXNPd25Qcm9wZXJ0eShhKSYmamRbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gbWQoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9bGQoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgbmQ9bih7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIG9kKGEsYil7aWYoYil7aWYobmRbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih1KDEzNyxhLFwiXCIpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHUoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHUoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHUoNjIsXCJcIikpO319XG5mdW5jdGlvbiBwZChhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHFkPU1iLmh0bWw7ZnVuY3Rpb24gcmQoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9Y2MoYSk7Yj13YVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl1YyhiW2RdLGEsYyl9ZnVuY3Rpb24gc2QoKXt9XG5mdW5jdGlvbiB0ZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gdWQoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfWZ1bmN0aW9uIHZkKGEsYil7dmFyIGM9dWQoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9dWQoYyl9fVxuZnVuY3Rpb24gd2QoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT93ZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9ZnVuY3Rpb24geGQoKXtmb3IodmFyIGE9d2luZG93LGI9dGQoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9dGQoYS5kb2N1bWVudCl9cmV0dXJuIGJ9XG5mdW5jdGlvbiB5ZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfXZhciB6ZD1cIiRcIixBZD1cIi8kXCIsQmQ9XCIkP1wiLENkPVwiJCFcIixEZD1udWxsLEVkPW51bGw7ZnVuY3Rpb24gRmQoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gR2QoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBIZD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxJZD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7ZnVuY3Rpb24gSmQoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWt9cmV0dXJuIGF9XG5mdW5jdGlvbiBLZChhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT16ZHx8Yz09PUNkfHxjPT09QmQpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlIGM9PT1BZCYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIExkPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLE1kPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrTGQsTmQ9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitMZCxPZD1cIl9fcmVhY3RDb250YWluZXJlJFwiK0xkO1xuZnVuY3Rpb24gdGMoYSl7dmFyIGI9YVtNZF07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbT2RdfHxjW01kXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPUtkKGEpO251bGwhPT1hOyl7aWYoYz1hW01kXSlyZXR1cm4gYzthPUtkKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBOYyhhKXthPWFbTWRdfHxhW09kXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gUGQoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHUoMzMpKTt9ZnVuY3Rpb24gUWQoYSl7cmV0dXJuIGFbTmRdfHxudWxsfVxuZnVuY3Rpb24gUmQoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIFNkKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9bGEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IEVycm9yKHUoMjMxLFxuYix0eXBlb2YgYykpO3JldHVybiBjfWZ1bmN0aW9uIFRkKGEsYixjKXtpZihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9aWMoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9aWMoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gVWQoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1SZChiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspVGQoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylUZChjW2JdLFwiYnViYmxlZFwiLGEpfX1cbmZ1bmN0aW9uIFZkKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz1pYyhjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1pYyhjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gV2QoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZWZChhLl90YXJnZXRJbnN0LG51bGwsYSl9ZnVuY3Rpb24gWGQoYSl7amMoYSxVZCl9dmFyIFlkPW51bGwsWmQ9bnVsbCwkZD1udWxsO1xuZnVuY3Rpb24gYWUoKXtpZigkZClyZXR1cm4gJGQ7dmFyIGEsYj1aZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBZZD9ZZC52YWx1ZTpZZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiAkZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIGJlKCl7cmV0dXJuITB9ZnVuY3Rpb24gY2UoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIEcoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP2JlOmNlO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Y2U7cmV0dXJuIHRoaXN9XG5uKEcucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9YmUpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9YmUpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9YmV9LGlzUGVyc2lzdGVudDpjZSxkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1jZTt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO0cuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuRy5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtkZShjKTtyZXR1cm4gY307ZGUoRyk7ZnVuY3Rpb24gZWUoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9XG5mdW5jdGlvbiBmZShhKXtpZighKGEgaW5zdGFuY2VvZiB0aGlzKSl0aHJvdyBFcnJvcih1KDI3OSkpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiBkZShhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1lZTthLnJlbGVhc2U9ZmV9dmFyIGdlPUcuZXh0ZW5kKHtkYXRhOm51bGx9KSxoZT1HLmV4dGVuZCh7ZGF0YTpudWxsfSksaWU9WzksMTMsMjcsMzJdLGplPXlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxrZT1udWxsO3lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihrZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIGxlPXlhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYha2UsbWU9eWEmJighamV8fGtlJiY4PGtlJiYxMT49a2UpLG5lPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLG9lPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LHBlPSExO1xuZnVuY3Rpb24gcWUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1pZS5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIHJlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIHNlPSExO2Z1bmN0aW9uIHRlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiByZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7cGU9ITA7cmV0dXJuIG5lO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PW5lJiZwZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiB1ZShhLGIpe2lmKHNlKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFqZSYmcWUoYSxiKT8oYT1hZSgpLCRkPVpkPVlkPW51bGwsc2U9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIG1lJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciB2ZT17ZXZlbnRUeXBlczpvZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlO2lmKGplKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBmPW9lLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpmPW9lLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Zj1vZS5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWY9dm9pZCAwfWVsc2Ugc2U/cWUoYSxjKSYmKGY9b2UuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZj1vZS5jb21wb3NpdGlvblN0YXJ0KTtmPyhtZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihzZXx8ZiE9PW9lLmNvbXBvc2l0aW9uU3RhcnQ/Zj09PW9lLmNvbXBvc2l0aW9uRW5kJiZzZSYmKGU9YWUoKSk6KFlkPWQsWmQ9XCJ2YWx1ZVwiaW4gWWQ/WWQudmFsdWU6WWQudGV4dENvbnRlbnQsc2U9ITApKSxmPWdlLmdldFBvb2xlZChmLFxuYixjLGQpLGU/Zi5kYXRhPWU6KGU9cmUoYyksbnVsbCE9PWUmJihmLmRhdGE9ZSkpLFhkKGYpLGU9Zik6ZT1udWxsOyhhPWxlP3RlKGEsYyk6dWUoYSxjKSk/KGI9aGUuZ2V0UG9vbGVkKG9lLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxYZChiKSk6Yj1udWxsO3JldHVybiBudWxsPT09ZT9iOm51bGw9PT1iP2U6W2UsYl19fSx3ZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiB4ZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIXdlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbnZhciB5ZT17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiB6ZShhLGIsYyl7YT1HLmdldFBvb2xlZCh5ZS5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO0RhKGMpO1hkKGEpO3JldHVybiBhfXZhciBBZT1udWxsLEJlPW51bGw7ZnVuY3Rpb24gQ2UoYSl7bWMoYSl9ZnVuY3Rpb24gRGUoYSl7dmFyIGI9UGQoYSk7aWYoeWIoYikpcmV0dXJuIGF9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgRmU9ITE7eWEmJihGZT1vYyhcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtcbmZ1bmN0aW9uIEdlKCl7QWUmJihBZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSksQmU9QWU9bnVsbCl9ZnVuY3Rpb24gSGUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJkRlKEJlKSlpZihhPXplKEJlLGEsbmMoYSkpLEphKW1jKGEpO2Vsc2V7SmE9ITA7dHJ5e0ZhKENlLGEpfWZpbmFsbHl7SmE9ITEsTGEoKX19fWZ1bmN0aW9uIEllKGEsYixjKXtcImZvY3VzXCI9PT1hPyhHZSgpLEFlPWIsQmU9YyxBZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSkpOlwiYmx1clwiPT09YSYmR2UoKX1mdW5jdGlvbiBKZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBEZShCZSl9ZnVuY3Rpb24gS2UoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBEZShiKX1mdW5jdGlvbiBMZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBEZShiKX1cbnZhciBNZT17ZXZlbnRUeXBlczp5ZSxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOkZlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9QZChiKTp3aW5kb3csZj1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWZ8fFwiaW5wdXRcIj09PWYmJlwiZmlsZVwiPT09ZS50eXBlKXZhciBnPUVlO2Vsc2UgaWYoeGUoZSkpaWYoRmUpZz1MZTtlbHNle2c9SmU7dmFyIGg9SWV9ZWxzZShmPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1mLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihnPUtlKTtpZihnJiYoZz1nKGEsYikpKXJldHVybiB6ZShnLGMsZCk7aCYmaChhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJkRiKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LE5lPUcuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxcbk9lPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZShhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9lW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gUWUoKXtyZXR1cm4gUGV9XG52YXIgUmU9MCxTZT0wLFRlPSExLFVlPSExLFZlPU5lLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZSxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj1SZTtSZT1hLnNjcmVlblg7cmV0dXJuIFRlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooVGU9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj1TZTtTZT1hLnNjcmVlblk7cmV0dXJuIFVlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooVWU9ITAsMCl9fSksV2U9VmUuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLFhlPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxZZT17ZXZlbnRUeXBlczpYZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZz1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZiYmMD09PShlJjMyKSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFnJiYhZilyZXR1cm4gbnVsbDtmPWQud2luZG93PT09ZD9kOihmPWQub3duZXJEb2N1bWVudCk/Zi5kZWZhdWx0Vmlld3x8Zi5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGcpe2lmKGc9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP3RjKGIpOm51bGwsbnVsbCE9PWIpe3ZhciBoPWRjKGIpO2lmKGIhPT1ofHw1IT09Yi50YWcmJjYhPT1iLnRhZyliPW51bGx9fWVsc2UgZz1udWxsO2lmKGc9PT1iKXJldHVybiBudWxsO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1cbmEpe3ZhciBrPVZlO3ZhciBsPVhlLm1vdXNlTGVhdmU7dmFyIG09WGUubW91c2VFbnRlcjt2YXIgcD1cIm1vdXNlXCJ9ZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpaz1XZSxsPVhlLnBvaW50ZXJMZWF2ZSxtPVhlLnBvaW50ZXJFbnRlcixwPVwicG9pbnRlclwiO2E9bnVsbD09Zz9mOlBkKGcpO2Y9bnVsbD09Yj9mOlBkKGIpO2w9ay5nZXRQb29sZWQobCxnLGMsZCk7bC50eXBlPXArXCJsZWF2ZVwiO2wudGFyZ2V0PWE7bC5yZWxhdGVkVGFyZ2V0PWY7Yz1rLmdldFBvb2xlZChtLGIsYyxkKTtjLnR5cGU9cCtcImVudGVyXCI7Yy50YXJnZXQ9ZjtjLnJlbGF0ZWRUYXJnZXQ9YTtkPWc7cD1iO2lmKGQmJnApYTp7az1kO209cDtnPTA7Zm9yKGE9azthO2E9UmQoYSkpZysrO2E9MDtmb3IoYj1tO2I7Yj1SZChiKSlhKys7Zm9yKDswPGctYTspaz1SZChrKSxnLS07Zm9yKDswPGEtZzspbT1SZChtKSxhLS07Zm9yKDtnLS07KXtpZihrPT09bXx8az09PW0uYWx0ZXJuYXRlKWJyZWFrIGE7XG5rPVJkKGspO209UmQobSl9az1udWxsfWVsc2Ugaz1udWxsO209aztmb3Ioaz1bXTtkJiZkIT09bTspe2c9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1tKWJyZWFrO2sucHVzaChkKTtkPVJkKGQpfWZvcihkPVtdO3AmJnAhPT1tOyl7Zz1wLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PW0pYnJlYWs7ZC5wdXNoKHApO3A9UmQocCl9Zm9yKHA9MDtwPGsubGVuZ3RoO3ArKylWZChrW3BdLFwiYnViYmxlZFwiLGwpO2ZvcihwPWQubGVuZ3RoOzA8cC0tOylWZChkW3BdLFwiY2FwdHVyZWRcIixjKTtyZXR1cm4gMD09PShlJjY0KT9bbF06W2wsY119fTtmdW5jdGlvbiBaZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyICRlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOlplLGFmPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBiZihhLGIpe2lmKCRlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighYWYuY2FsbChiLGNbZF0pfHwhJGUoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1cbnZhciBjZj15YSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLGRmPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxlZj1udWxsLGZmPW51bGwsZ2Y9bnVsbCxoZj0hMTtcbmZ1bmN0aW9uIGpmKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoaGZ8fG51bGw9PWVmfHxlZiE9PXRkKGMpKXJldHVybiBudWxsO2M9ZWY7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmeWQoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gZ2YmJmJmKGdmLGMpP251bGw6KGdmPWMsYT1HLmdldFBvb2xlZChkZi5zZWxlY3QsZmYsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1lZixYZChhKSxhKX1cbnZhciBrZj17ZXZlbnRUeXBlczpkZixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXtlPWZ8fChkLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCk7aWYoIShmPSFlKSl7YTp7ZT1jYyhlKTtmPXdhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKWlmKCFlLmhhcyhmW2ddKSl7ZT0hMTticmVhayBhfWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9QZChiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKHhlKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKWVmPWUsZmY9YixnZj1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6Z2Y9ZmY9ZWY9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6aGY9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiBoZj0hMSxqZihjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihjZilicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIGpmKGMsZCl9cmV0dXJuIG51bGx9fSxsZj1HLmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksbWY9Ry5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxuZj1OZS5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO2Z1bmN0aW9uIG9mKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIHBmPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxxZj17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0scmY9TmUuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPXBmW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9mKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9xZlthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWUsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2YoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2YoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxzZj1WZS5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksdGY9TmUuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWV9KSx1Zj1HLmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSx2Zj1WZS5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHdmPXtldmVudFR5cGVzOldjLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9WWMuZ2V0KGEpO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2YoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPXJmO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1uZjticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPVxuVmU7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1zZjticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXRmO2JyZWFrO2Nhc2UgWGI6Y2FzZSBZYjpjYXNlIFpiOmE9bGY7YnJlYWs7Y2FzZSAkYjphPXVmO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPU5lO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9dmY7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1tZjticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPVxuV2U7YnJlYWs7ZGVmYXVsdDphPUd9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtYZChiKTtyZXR1cm4gYn19O2lmKHBhKXRocm93IEVycm9yKHUoMTAxKSk7cGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7cmEoKTt2YXIgeGY9TmM7bGE9UWQ7bWE9eGY7bmE9UGQ7eGEoe1NpbXBsZUV2ZW50UGx1Z2luOndmLEVudGVyTGVhdmVFdmVudFBsdWdpbjpZZSxDaGFuZ2VFdmVudFBsdWdpbjpNZSxTZWxlY3RFdmVudFBsdWdpbjprZixCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOnZlfSk7dmFyIHlmPVtdLHpmPS0xO2Z1bmN0aW9uIEgoYSl7MD56Znx8KGEuY3VycmVudD15Zlt6Zl0seWZbemZdPW51bGwsemYtLSl9XG5mdW5jdGlvbiBJKGEsYil7emYrKzt5Zlt6Zl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBBZj17fSxKPXtjdXJyZW50OkFmfSxLPXtjdXJyZW50OiExfSxCZj1BZjtmdW5jdGlvbiBDZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIEFmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEwoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1cbmZ1bmN0aW9uIERmKCl7SChLKTtIKEopfWZ1bmN0aW9uIEVmKGEsYixjKXtpZihKLmN1cnJlbnQhPT1BZil0aHJvdyBFcnJvcih1KDE2OCkpO0koSixiKTtJKEssYyl9ZnVuY3Rpb24gRmYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih1KDEwOCxwYihiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBuKHt9LGMse30sZCl9ZnVuY3Rpb24gR2YoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fEFmO0JmPUouY3VycmVudDtJKEosYSk7SShLLEsuY3VycmVudCk7cmV0dXJuITB9XG5mdW5jdGlvbiBIZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IodSgxNjkpKTtjPyhhPUZmKGEsYixCZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEgoSyksSChKKSxJKEosYSkpOkgoSyk7SShLLGMpfVxudmFyIElmPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LEpmPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxLZj1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLExmPXIudW5zdGFibGVfcmVxdWVzdFBhaW50LE1mPXIudW5zdGFibGVfbm93LE5mPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsT2Y9ci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxQZj1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFFmPXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksUmY9ci51bnN0YWJsZV9Mb3dQcmlvcml0eSxTZj1yLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxUZj17fSxVZj1yLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFZmPXZvaWQgMCE9PUxmP0xmOmZ1bmN0aW9uKCl7fSxXZj1udWxsLFhmPW51bGwsWWY9ITEsWmY9TWYoKSwkZj0xRTQ+WmY/TWY6ZnVuY3Rpb24oKXtyZXR1cm4gTWYoKS1aZn07XG5mdW5jdGlvbiBhZygpe3N3aXRjaChOZigpKXtjYXNlIE9mOnJldHVybiA5OTtjYXNlIFBmOnJldHVybiA5ODtjYXNlIFFmOnJldHVybiA5NztjYXNlIFJmOnJldHVybiA5NjtjYXNlIFNmOnJldHVybiA5NTtkZWZhdWx0OnRocm93IEVycm9yKHUoMzMyKSk7fX1mdW5jdGlvbiBiZyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gT2Y7Y2FzZSA5ODpyZXR1cm4gUGY7Y2FzZSA5NzpyZXR1cm4gUWY7Y2FzZSA5NjpyZXR1cm4gUmY7Y2FzZSA5NTpyZXR1cm4gU2Y7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMzMikpO319ZnVuY3Rpb24gY2coYSxiKXthPWJnKGEpO3JldHVybiBJZihhLGIpfWZ1bmN0aW9uIGRnKGEsYixjKXthPWJnKGEpO3JldHVybiBKZihhLGIsYyl9ZnVuY3Rpb24gZWcoYSl7bnVsbD09PVdmPyhXZj1bYV0sWGY9SmYoT2YsZmcpKTpXZi5wdXNoKGEpO3JldHVybiBUZn1mdW5jdGlvbiBnZygpe2lmKG51bGwhPT1YZil7dmFyIGE9WGY7WGY9bnVsbDtLZihhKX1mZygpfVxuZnVuY3Rpb24gZmcoKXtpZighWWYmJm51bGwhPT1XZil7WWY9ITA7dmFyIGE9MDt0cnl7dmFyIGI9V2Y7Y2coOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO1dmPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PVdmJiYoV2Y9V2Yuc2xpY2UoYSsxKSksSmYoT2YsZ2cpLGM7fWZpbmFsbHl7WWY9ITF9fX1mdW5jdGlvbiBoZyhhLGIsYyl7Yy89MTA7cmV0dXJuIDEwNzM3NDE4MjEtKCgoMTA3Mzc0MTgyMS1hK2IvMTApL2N8MCkrMSkqY31mdW5jdGlvbiBpZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn12YXIgamc9e2N1cnJlbnQ6bnVsbH0sa2c9bnVsbCxsZz1udWxsLG1nPW51bGw7ZnVuY3Rpb24gbmcoKXttZz1sZz1rZz1udWxsfVxuZnVuY3Rpb24gb2coYSl7dmFyIGI9amcuY3VycmVudDtIKGpnKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHBnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKGEuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWEuY2hpbGRFeHBpcmF0aW9uVGltZT1iLG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtlbHNlIGlmKG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiljLmNoaWxkRXhwaXJhdGlvblRpbWU9YjtlbHNlIGJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIHFnKGEsYil7a2c9YTttZz1sZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKGEuZXhwaXJhdGlvblRpbWU+PWImJihyZz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiBzZyhhLGIpe2lmKG1nIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YiltZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09bGcpe2lmKG51bGw9PT1rZyl0aHJvdyBFcnJvcih1KDMwOCkpO2xnPWI7a2cuZGVwZW5kZW5jaWVzPXtleHBpcmF0aW9uVGltZTowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBsZz1sZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgdGc9ITE7ZnVuY3Rpb24gdWcoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxiYXNlUXVldWU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHZnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGJhc2VRdWV1ZTphLmJhc2VRdWV1ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB3ZyhhLGIpe2E9e2V4cGlyYXRpb25UaW1lOmEsc3VzcGVuc2VDb25maWc6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9O3JldHVybiBhLm5leHQ9YX1mdW5jdGlvbiB4ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YSl7YT1hLnNoYXJlZDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifX1cbmZ1bmN0aW9uIHlnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJnZnKGMsYSk7YT1hLnVwZGF0ZVF1ZXVlO2M9YS5iYXNlUXVldWU7bnVsbD09PWM/KGEuYmFzZVF1ZXVlPWIubmV4dD1iLGIubmV4dD1iKTooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yil9XG5mdW5jdGlvbiB6ZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3RnPSExO3ZhciBmPWUuYmFzZVF1ZXVlLGc9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09Zyl7aWYobnVsbCE9PWYpe3ZhciBoPWYubmV4dDtmLm5leHQ9Zy5uZXh0O2cubmV4dD1ofWY9ZztlLnNoYXJlZC5wZW5kaW5nPW51bGw7aD1hLmFsdGVybmF0ZTtudWxsIT09aCYmKGg9aC51cGRhdGVRdWV1ZSxudWxsIT09aCYmKGguYmFzZVF1ZXVlPWcpKX1pZihudWxsIT09Zil7aD1mLm5leHQ7dmFyIGs9ZS5iYXNlU3RhdGUsbD0wLG09bnVsbCxwPW51bGwseD1udWxsO2lmKG51bGwhPT1oKXt2YXIgej1oO2Rve2c9ei5leHBpcmF0aW9uVGltZTtpZihnPGQpe3ZhciBjYT17ZXhwaXJhdGlvblRpbWU6ei5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzp6LnN1c3BlbnNlQ29uZmlnLHRhZzp6LnRhZyxwYXlsb2FkOnoucGF5bG9hZCxjYWxsYmFjazp6LmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PXg/KHA9eD1cbmNhLG09ayk6eD14Lm5leHQ9Y2E7Zz5sJiYobD1nKX1lbHNle251bGwhPT14JiYoeD14Lm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ei5zdXNwZW5zZUNvbmZpZyx0YWc6ei50YWcscGF5bG9hZDp6LnBheWxvYWQsY2FsbGJhY2s6ei5jYWxsYmFjayxuZXh0Om51bGx9KTtBZyhnLHouc3VzcGVuc2VDb25maWcpO2E6e3ZhciBEPWEsdD16O2c9YjtjYT1jO3N3aXRjaCh0LnRhZyl7Y2FzZSAxOkQ9dC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBEKXtrPUQuY2FsbChjYSxrLGcpO2JyZWFrIGF9az1EO2JyZWFrIGE7Y2FzZSAzOkQuZWZmZWN0VGFnPUQuZWZmZWN0VGFnJi00MDk3fDY0O2Nhc2UgMDpEPXQucGF5bG9hZDtnPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBEP0QuY2FsbChjYSxrLGcpOkQ7aWYobnVsbD09PWd8fHZvaWQgMD09PWcpYnJlYWsgYTtrPW4oe30sayxnKTticmVhayBhO2Nhc2UgMjp0Zz0hMH19bnVsbCE9PXouY2FsbGJhY2smJlxuKGEuZWZmZWN0VGFnfD0zMixnPWUuZWZmZWN0cyxudWxsPT09Zz9lLmVmZmVjdHM9W3pdOmcucHVzaCh6KSl9ej16Lm5leHQ7aWYobnVsbD09PXp8fHo9PT1oKWlmKGc9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09ZylicmVhaztlbHNlIHo9Zi5uZXh0PWcubmV4dCxnLm5leHQ9aCxlLmJhc2VRdWV1ZT1mPWcsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpfW51bGw9PT14P209azp4Lm5leHQ9cDtlLmJhc2VTdGF0ZT1tO2UuYmFzZVF1ZXVlPXg7QmcobCk7YS5leHBpcmF0aW9uVGltZT1sO2EubWVtb2l6ZWRTdGF0ZT1rfX1cbmZ1bmN0aW9uIENnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9ZTtlPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQpdGhyb3cgRXJyb3IodSgxOTEsZCkpO2QuY2FsbChlKX19fXZhciBEZz1XYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxFZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBGZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmV4cGlyYXRpb25UaW1lJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgSmc9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpP2RjKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT13ZyhkLGUpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTt4ZyhhLGUpO0lnKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXdnKGQsZSk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7eGcoYSxlKTtJZyhhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1HZygpLGQ9RGcuc3VzcGVuc2U7XG5jPUhnKGMsYSxkKTtkPXdnKGMsZCk7ZC50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7eGcoYSxkKTtJZyhhLGMpfX07ZnVuY3Rpb24gS2coYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hYmYoYyxkKXx8IWJmKGUsZik6ITB9XG5mdW5jdGlvbiBMZyhhLGIsYyl7dmFyIGQ9ITEsZT1BZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1zZyhmKTooZT1MKGIpP0JmOkouY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0NmKGEsZSk6QWYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1KZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBNZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmSmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBOZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUVnO3VnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9c2coZik6KGY9TChiKT9CZjpKLmN1cnJlbnQsZS5jb250ZXh0PUNmKGEsZikpO3pnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihGZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZKZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSx6ZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIE9nPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBQZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHUoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IodSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RWcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IodSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IodSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFFnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHUoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpKTt9XG5mdW5jdGlvbiBSZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1TZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1UZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1QZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9VWcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9UGcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1WZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9V2coYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBwKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1UZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYz1VZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1QZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgJGE6cmV0dXJuIGI9VmcoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKE9nKGIpfHxcbm5iKGIpKXJldHVybiBiPVdnKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1FnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PWFiP20oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSAkYTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihPZyhjKXx8bmIoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO1FnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geihhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPVxuYS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1hYj9tKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSAkYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihPZyhkKXx8bmIoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO1FnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gY2EoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsdD1udWxsLG09Zyx5PWc9MCxBPW51bGw7bnVsbCE9PW0mJnk8aC5sZW5ndGg7eSsrKXttLmluZGV4Pnk/KEE9bSxtPW51bGwpOkE9bS5zaWJsaW5nO3ZhciBxPXgoZSxtLGhbeV0sayk7aWYobnVsbD09PXEpe251bGw9PT1tJiYobT1BKTticmVha31hJiZcbm0mJm51bGw9PT1xLmFsdGVybmF0ZSYmYihlLG0pO2c9ZihxLGcseSk7bnVsbD09PXQ/bD1xOnQuc2libGluZz1xO3Q9cTttPUF9aWYoeT09PWgubGVuZ3RoKXJldHVybiBjKGUsbSksbDtpZihudWxsPT09bSl7Zm9yKDt5PGgubGVuZ3RoO3krKyltPXAoZSxoW3ldLGspLG51bGwhPT1tJiYoZz1mKG0sZyx5KSxudWxsPT09dD9sPW06dC5zaWJsaW5nPW0sdD1tKTtyZXR1cm4gbH1mb3IobT1kKGUsbSk7eTxoLmxlbmd0aDt5KyspQT16KG0sZSx5LGhbeV0sayksbnVsbCE9PUEmJihhJiZudWxsIT09QS5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1BLmtleT95OkEua2V5KSxnPWYoQSxnLHkpLG51bGw9PT10P2w9QTp0LnNpYmxpbmc9QSx0PUEpO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gRChlLGcsaCxsKXt2YXIgaz1uYihoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2Ygayl0aHJvdyBFcnJvcih1KDE1MCkpO2g9ay5jYWxsKGgpO1xuaWYobnVsbD09aCl0aHJvdyBFcnJvcih1KDE1MSkpO2Zvcih2YXIgbT1rPW51bGwsdD1nLHk9Zz0wLEE9bnVsbCxxPWgubmV4dCgpO251bGwhPT10JiYhcS5kb25lO3krKyxxPWgubmV4dCgpKXt0LmluZGV4Pnk/KEE9dCx0PW51bGwpOkE9dC5zaWJsaW5nO3ZhciBEPXgoZSx0LHEudmFsdWUsbCk7aWYobnVsbD09PUQpe251bGw9PT10JiYodD1BKTticmVha31hJiZ0JiZudWxsPT09RC5hbHRlcm5hdGUmJmIoZSx0KTtnPWYoRCxnLHkpO251bGw9PT1tP2s9RDptLnNpYmxpbmc9RDttPUQ7dD1BfWlmKHEuZG9uZSlyZXR1cm4gYyhlLHQpLGs7aWYobnVsbD09PXQpe2Zvcig7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXAoZSxxLnZhbHVlLGwpLG51bGwhPT1xJiYoZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTtyZXR1cm4ga31mb3IodD1kKGUsdCk7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXoodCxlLHkscS52YWx1ZSxsKSxudWxsIT09cSYmKGEmJm51bGwhPT1cbnEuYWx0ZXJuYXRlJiZ0LmRlbGV0ZShudWxsPT09cS5rZXk/eTpxLmtleSksZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTthJiZ0LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBrfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1hYiYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBaYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpe3N3aXRjaChrLnRhZyl7Y2FzZSA3OmlmKGYudHlwZT09PWFiKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWJyZWFrO2RlZmF1bHQ6aWYoay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLFxuay5zaWJsaW5nKTtkPWUoayxmLnByb3BzKTtkLnJlZj1QZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PWFiPyhkPVdnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1VZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1QZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgJGE6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9XG5kLnNpYmxpbmd9ZD1WZyhmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1UZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihPZyhmKSlyZXR1cm4gY2EoYSxkLGYsaCk7aWYobmIoZikpcmV0dXJuIEQoYSxkLGYsaCk7bCYmUWcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMDp0aHJvdyBhPWEudHlwZSxFcnJvcih1KDE1MixhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIFhnPVJnKCEwKSxZZz1SZyghMSksWmc9e30sJGc9e2N1cnJlbnQ6Wmd9LGFoPXtjdXJyZW50OlpnfSxiaD17Y3VycmVudDpaZ307XG5mdW5jdGlvbiBjaChhKXtpZihhPT09WmcpdGhyb3cgRXJyb3IodSgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBkaChhLGIpe0koYmgsYik7SShhaCxhKTtJKCRnLFpnKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOk9iKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1PYihiLGEpfUgoJGcpO0koJGcsYil9ZnVuY3Rpb24gZWgoKXtIKCRnKTtIKGFoKTtIKGJoKX1mdW5jdGlvbiBmaChhKXtjaChiaC5jdXJyZW50KTt2YXIgYj1jaCgkZy5jdXJyZW50KTt2YXIgYz1PYihiLGEudHlwZSk7YiE9PWMmJihJKGFoLGEpLEkoJGcsYykpfWZ1bmN0aW9uIGdoKGEpe2FoLmN1cnJlbnQ9PT1hJiYoSCgkZyksSChhaCkpfXZhciBNPXtjdXJyZW50OjB9O1xuZnVuY3Rpb24gaGgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8Yy5kYXRhPT09QmR8fGMuZGF0YT09PUNkKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfWZ1bmN0aW9uIGloKGEsYil7cmV0dXJue3Jlc3BvbmRlcjphLHByb3BzOmJ9fVxudmFyIGpoPVdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsa2g9V2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsbGg9MCxOPW51bGwsTz1udWxsLFA9bnVsbCxtaD0hMTtmdW5jdGlvbiBRKCl7dGhyb3cgRXJyb3IodSgzMjEpKTt9ZnVuY3Rpb24gbmgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighJGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIG9oKGEsYixjLGQsZSxmKXtsaD1mO049YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5leHBpcmF0aW9uVGltZT0wO2poLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/cGg6cWg7YT1jKGQsZSk7aWYoYi5leHBpcmF0aW9uVGltZT09PWxoKXtmPTA7ZG97Yi5leHBpcmF0aW9uVGltZT0wO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IodSgzMDEpKTtmKz0xO1A9Tz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtqaC5jdXJyZW50PXJoO2E9YyhkLGUpfXdoaWxlKGIuZXhwaXJhdGlvblRpbWU9PT1saCl9amguY3VycmVudD1zaDtiPW51bGwhPT1PJiZudWxsIT09Ty5uZXh0O2xoPTA7UD1PPU49bnVsbDttaD0hMTtpZihiKXRocm93IEVycm9yKHUoMzAwKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB0aCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiB1aCgpe2lmKG51bGw9PT1PKXt2YXIgYT1OLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1PLm5leHQ7dmFyIGI9bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlOlAubmV4dDtpZihudWxsIT09YilQPWIsTz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMTApKTtPPWE7YT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLGJhc2VRdWV1ZTpPLmJhc2VRdWV1ZSxxdWV1ZTpPLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hfXJldHVybiBQfVxuZnVuY3Rpb24gdmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiB3aChhKXt2YXIgYj11aCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih1KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU8sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5leHBpcmF0aW9uVGltZTtpZihsPGxoKXt2YXIgbT17ZXhwaXJhdGlvblRpbWU6ay5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzprLnN1c3BlbnNlQ29uZmlnLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09aD8oZz1oPW0sZj1kKTpoPWgubmV4dD1tO2w+Ti5leHBpcmF0aW9uVGltZSYmXG4oTi5leHBpcmF0aW9uVGltZT1sLEJnKGwpKX1lbHNlIG51bGwhPT1oJiYoaD1oLm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ay5zdXNwZW5zZUNvbmZpZyxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLEFnKGwsay5zdXNwZW5zZUNvbmZpZyksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1lKTtudWxsPT09aD9mPWQ6aC5uZXh0PWc7JGUoZCxiLm1lbW9pemVkU3RhdGUpfHwocmc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWY7Yi5iYXNlUXVldWU9aDtjLmxhc3RSZW5kZXJlZFN0YXRlPWR9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIHhoKGEpe3ZhciBiPXVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHUoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTskZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChyZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfVxuZnVuY3Rpb24geWgoYSl7dmFyIGI9dGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6dmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPXpoLmJpbmQobnVsbCxOLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19ZnVuY3Rpb24gQWgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ti51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsfSxOLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfVxuZnVuY3Rpb24gQmgoKXtyZXR1cm4gdWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIENoKGEsYixjLGQpe3ZhciBlPXRoKCk7Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9ZnVuY3Rpb24gRGgoYSxiLGMsZCl7dmFyIGU9dWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZuaChkLGcuZGVwcykpe0FoKGIsYyxmLGQpO3JldHVybn19Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLGYsZCl9ZnVuY3Rpb24gRWgoYSxiKXtyZXR1cm4gQ2goNTE2LDQsYSxiKX1mdW5jdGlvbiBGaChhLGIpe3JldHVybiBEaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIEdoKGEsYil7cmV0dXJuIERoKDQsMixhLGIpfVxuZnVuY3Rpb24gSGgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiBJaChhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIERoKDQsMixIaC5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBKaCgpe31mdW5jdGlvbiBLaChhLGIpe3RoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9ZnVuY3Rpb24gTGgoYSxiKXt2YXIgYz11aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmbmgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBNaChhLGIpe3ZhciBjPXVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZuaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBOaChhLGIsYyl7dmFyIGQ9YWcoKTtjZyg5OD5kPzk4OmQsZnVuY3Rpb24oKXthKCEwKX0pO2NnKDk3PGQ/OTc6ZCxmdW5jdGlvbigpe3ZhciBkPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXthKCExKSxjKCl9ZmluYWxseXtraC5zdXNwZW5zZT1kfX0pfVxuZnVuY3Rpb24gemgoYSxiLGMpe3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXtleHBpcmF0aW9uVGltZTpkLHN1c3BlbnNlQ29uZmlnOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07dmFyIGY9Yi5wZW5kaW5nO251bGw9PT1mP2UubmV4dD1lOihlLm5leHQ9Zi5uZXh0LGYubmV4dD1lKTtiLnBlbmRpbmc9ZTtmPWEuYWx0ZXJuYXRlO2lmKGE9PT1OfHxudWxsIT09ZiYmZj09PU4pbWg9ITAsZS5leHBpcmF0aW9uVGltZT1saCxOLmV4cGlyYXRpb25UaW1lPWxoO2Vsc2V7aWYoMD09PWEuZXhwaXJhdGlvblRpbWUmJihudWxsPT09Znx8MD09PWYuZXhwaXJhdGlvblRpbWUpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuZWFnZXJSZWR1Y2VyPWY7ZS5lYWdlclN0YXRlPWg7aWYoJGUoaCxnKSlyZXR1cm59Y2F0Y2goayl7fWZpbmFsbHl7fUlnKGEsXG5kKX19XG52YXIgc2g9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOlEsdXNlQ29udGV4dDpRLHVzZUVmZmVjdDpRLHVzZUltcGVyYXRpdmVIYW5kbGU6USx1c2VMYXlvdXRFZmZlY3Q6USx1c2VNZW1vOlEsdXNlUmVkdWNlcjpRLHVzZVJlZjpRLHVzZVN0YXRlOlEsdXNlRGVidWdWYWx1ZTpRLHVzZVJlc3BvbmRlcjpRLHVzZURlZmVycmVkVmFsdWU6USx1c2VUcmFuc2l0aW9uOlF9LHBoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpLaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpFaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gQ2goNCwyLEhoLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQ2goNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz10aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLFxuYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9emguYmluZChudWxsLE4sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPXRoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOnloLHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz15aChhKSxkPWNbMF0sZT1jWzFdO0VoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1cbmN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9eWgoITEpLGM9YlswXTtiPWJbMV07cmV0dXJuW0toKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHFoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6d2gsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHdoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXdoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPVxud2godmgpLGM9YlswXTtiPWJbMV07cmV0dXJuW0xoKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHJoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6eGgsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHhoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXhoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXhoKHZoKSxjPWJbMF07Yj1iWzFdO3JldHVybltMaChOaC5iaW5kKG51bGwsXG5iLGEpLFtiLGFdKSxjXX19LE9oPW51bGwsUGg9bnVsbCxRaD0hMTtmdW5jdGlvbiBSaChhLGIpe3ZhciBjPVNoKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9XG5mdW5jdGlvbiBUaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gVWgoYSl7aWYoUWgpe3ZhciBiPVBoO2lmKGIpe3ZhciBjPWI7aWYoIVRoKGEsYikpe2I9SmQoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFUaChhLGIpKXthLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXwyO1FoPSExO09oPWE7cmV0dXJufVJoKE9oLGMpfU9oPWE7UGg9SmQoYi5maXJzdENoaWxkKX1lbHNlIGEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDIsUWg9ITEsT2g9YX19ZnVuY3Rpb24gVmgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO09oPWF9XG5mdW5jdGlvbiBXaChhKXtpZihhIT09T2gpcmV0dXJuITE7aWYoIVFoKXJldHVybiBWaChhKSxRaD0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUdkKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1QaDtiOylSaChhLGIpLGI9SmQoYi5uZXh0U2libGluZyk7VmgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih1KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT1BZCl7aWYoMD09PWIpe1BoPUpkKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2UgYyE9PXpkJiZjIT09Q2QmJmMhPT1CZHx8YisrfWE9YS5uZXh0U2libGluZ31QaD1udWxsfX1lbHNlIFBoPU9oP0pkKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gWGgoKXtQaD1PaD1udWxsO1FoPSExfXZhciBZaD1XYS5SZWFjdEN1cnJlbnRPd25lcixyZz0hMTtmdW5jdGlvbiBSKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WWcoYixudWxsLGMsZCk6WGcoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gWmgoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3FnKGIsZSk7ZD1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gYWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFiaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxjaShhLGIsZyxkLGUsZik7YT1VZyhjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmJmLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuICRoKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPVNnKGcsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gY2koYSxiLGMsZCxlLGYpe3JldHVybiBudWxsIT09YSYmYmYoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmJiYocmc9ITEsZTxmKT8oYi5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLCRoKGEsYixmKSk6ZGkoYSxiLGMsZCxmKX1mdW5jdGlvbiBlaShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIGRpKGEsYixjLGQsZSl7dmFyIGY9TChjKT9CZjpKLmN1cnJlbnQ7Zj1DZihiLGYpO3FnKGIsZSk7Yz1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gZmkoYSxiLGMsZCxlKXtpZihMKGMpKXt2YXIgZj0hMDtHZihiKX1lbHNlIGY9ITE7cWcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLExnKGIsYyxkKSxOZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1zZyhsKToobD1MKGMpP0JmOkouY3VycmVudCxsPUNmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3B8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKTt0Zz0hMTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT14O3pnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHx4IT09a3x8Sy5jdXJyZW50fHx0Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihGZyhiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9dGd8fEtnKGIsYyxoLGQseCxrLGwpKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLHZnKGEsYiksaD1iLm1lbW9pemVkUHJvcHMsZy5wcm9wcz1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6aWcoYi50eXBlLGgpLGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZSxcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9c2cobCk6KGw9TChjKT9CZjpKLmN1cnJlbnQsbD1DZihiLGwpKSxtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLChwPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKSx0Zz0hMSxrPWIubWVtb2l6ZWRTdGF0ZSxnLnN0YXRlPWssemcoYixkLGcsZSkseD1iLm1lbW9pemVkU3RhdGUsaCE9PWR8fGshPT14fHxLLmN1cnJlbnR8fHRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKEZnKGIsYyxtLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobT10Z3x8S2coYixjLGgsZCxrLHgsbCkpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLFxueCxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsbCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWwsZD1tKTpcbihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gZ2koYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gZ2koYSxiLGMsZCxlLGYpe2VpKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZIZihiLGMsITEpLCRoKGEsYixmKTtkPWIuc3RhdGVOb2RlO1loLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVhnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WGcoYixudWxsLGgsZikpOlIoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmSGYoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBoaShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0VmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkVmKGEsYi5jb250ZXh0LCExKTtkaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgaWk9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeVRpbWU6MH07XG5mdW5jdGlvbiBqaShhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1NLmN1cnJlbnQsZz0hMSxoOyhoPTAhPT0oYi5lZmZlY3RUYWcmNjQpKXx8KGg9MCE9PShmJjIpJiYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpKTtoPyhnPSEwLGIuZWZmZWN0VGFnJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1lLmZhbGxiYWNrfHwhMD09PWUudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChmfD0xKTtJKE0sZiYxKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZS5mYWxsYmFjayYmVWgoYik7aWYoZyl7Zz1lLmZhbGxiYWNrO2U9V2cobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1XZyhnLGQsYyxudWxsKTtjLnJldHVybj1cbmI7ZS5zaWJsaW5nPWM7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9ZTtyZXR1cm4gY31kPWUuY2hpbGRyZW47Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9WWcoYixudWxsLGQsYyl9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7YT1hLmNoaWxkO2Q9YS5zaWJsaW5nO2lmKGcpe2U9ZS5mYWxsYmFjaztjPVNnKGEsYS5wZW5kaW5nUHJvcHMpO2MucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikmJihnPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1hLmNoaWxkKSlmb3IoYy5jaGlsZD1nO251bGwhPT1nOylnLnJldHVybj1jLGc9Zy5zaWJsaW5nO2Q9U2coZCxlKTtkLnJldHVybj1iO2Muc2libGluZz1kO2MuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWM7cmV0dXJuIGR9Yz1YZyhiLGEuY2hpbGQsZS5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1cbmN9YT1hLmNoaWxkO2lmKGcpe2c9ZS5mYWxsYmFjaztlPVdnKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7ZS5jaGlsZD1hO251bGwhPT1hJiYoYS5yZXR1cm49ZSk7aWYoMD09PShiLm1vZGUmMikpZm9yKGE9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1hO251bGwhPT1hOylhLnJldHVybj1lLGE9YS5zaWJsaW5nO2M9V2coZyxkLGMsbnVsbCk7Yy5yZXR1cm49YjtlLnNpYmxpbmc9YztjLmVmZmVjdFRhZ3w9MjtlLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1lO3JldHVybiBjfWIubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVhnKGIsYSxlLmNoaWxkcmVuLGMpfVxuZnVuY3Rpb24ga2koYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3BnKGEucmV0dXJuLGIpfWZ1bmN0aW9uIGxpKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbEV4cGlyYXRpb246MCx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcucmVuZGVyaW5nU3RhcnRUaW1lPTAsZy5sYXN0PWQsZy50YWlsPWMsZy50YWlsRXhwaXJhdGlvbj0wLGcudGFpbE1vZGU9ZSxnLmxhc3RFZmZlY3Q9Zil9XG5mdW5jdGlvbiBtaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1IoYSxiLGQuY2hpbGRyZW4sYyk7ZD1NLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5lZmZlY3RUYWd8PTY0O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5lZmZlY3RUYWcmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYma2koYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpa2koYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShNLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1oaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO2xpKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWhoKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX1saShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6bGkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uICRoKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTt2YXIgZD1iLmV4cGlyYXRpb25UaW1lOzAhPT1kJiZCZyhkKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IodSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9U2coYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVNnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9dmFyIG5pLG9pLHBpLHFpO1xubmk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O29pPWZ1bmN0aW9uKCl7fTtcbnBpPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgZz1iLnN0YXRlTm9kZTtjaCgkZy5jdXJyZW50KTthPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmY9emIoZyxmKTtkPXpiKGcsZCk7YT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1HYihnLGYpO2Q9R2IoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmPW4oe30sZix7dmFsdWU6dm9pZCAwfSk7ZD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2E9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Zj1JYihnLGYpO2Q9SWIoZyxkKTthPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGYub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGcub25jbGljaz1zZCl9b2QoYyxkKTt2YXIgaCxrO2M9bnVsbDtmb3IoaCBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGgpJiZmLmhhc093blByb3BlcnR5KGgpJiZudWxsIT1mW2hdKWlmKFwic3R5bGVcIj09PVxuaClmb3IoayBpbiBnPWZbaF0sZylnLmhhc093blByb3BlcnR5KGspJiYoY3x8KGM9e30pLGNba109XCJcIik7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWgmJlwiY2hpbGRyZW5cIiE9PWgmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmXCJhdXRvRm9jdXNcIiE9PWgmJih2YS5oYXNPd25Qcm9wZXJ0eShoKT9hfHwoYT1bXSk6KGE9YXx8W10pLnB1c2goaCxudWxsKSk7Zm9yKGggaW4gZCl7dmFyIGw9ZFtoXTtnPW51bGwhPWY/ZltoXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShoKSYmbCE9PWcmJihudWxsIT1sfHxudWxsIT1nKSlpZihcInN0eWxlXCI9PT1oKWlmKGcpe2ZvcihrIGluIGcpIWcuaGFzT3duUHJvcGVydHkoayl8fGwmJmwuaGFzT3duUHJvcGVydHkoayl8fChjfHwoYz17fSksY1trXT1cIlwiKTtmb3IoayBpbiBsKWwuaGFzT3duUHJvcGVydHkoaykmJmdba10hPT1sW2tdJiYoY3x8KGM9e30pLFxuY1trXT1sW2tdKX1lbHNlIGN8fChhfHwoYT1bXSksYS5wdXNoKGgsYykpLGM9bDtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD8obD1sP2wuX19odG1sOnZvaWQgMCxnPWc/Zy5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJmchPT1sJiYoYT1hfHxbXSkucHVzaChoLGwpKTpcImNoaWxkcmVuXCI9PT1oP2c9PT1sfHxcInN0cmluZ1wiIT09dHlwZW9mIGwmJlwibnVtYmVyXCIhPT10eXBlb2YgbHx8KGE9YXx8W10pLnB1c2goaCxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmKHZhLmhhc093blByb3BlcnR5KGgpPyhudWxsIT1sJiZyZChlLGgpLGF8fGc9PT1sfHwoYT1bXSkpOihhPWF8fFtdKS5wdXNoKGgsbCkpfWMmJihhPWF8fFtdKS5wdXNoKFwic3R5bGVcIixjKTtlPWE7aWYoYi51cGRhdGVRdWV1ZT1lKWIuZWZmZWN0VGFnfD00fX07XG5xaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZWZmZWN0VGFnfD00KX07ZnVuY3Rpb24gcmkoYSxiKXtzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gc2koYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxOnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDM6cmV0dXJuIGVoKCksSChLKSxIKEopLGM9Yi5zdGF0ZU5vZGUsYy5wZW5kaW5nQ29udGV4dCYmKGMuY29udGV4dD1jLnBlbmRpbmdDb250ZXh0LGMucGVuZGluZ0NvbnRleHQ9bnVsbCksbnVsbCE9PWEmJm51bGwhPT1hLmNoaWxkfHwhV2goYil8fChiLmVmZmVjdFRhZ3w9NCksb2koYiksbnVsbDtjYXNlIDU6Z2goYik7Yz1jaChiaC5jdXJyZW50KTt2YXIgZT1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKXBpKGEsYixlLGQsYyksYS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2NikpO1xucmV0dXJuIG51bGx9YT1jaCgkZy5jdXJyZW50KTtpZihXaChiKSl7ZD1iLnN0YXRlTm9kZTtlPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtNZF09YjtkW05kXT1mO3N3aXRjaChlKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGE9MDthPGFjLmxlbmd0aDthKyspRihhY1thXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsZCk7RihcImxvYWRcIixkKTticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGQpO0YoXCJzdWJtaXRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpBYihkLGYpO0YoXCJpbnZhbGlkXCIsZCk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtGKFwiaW52YWxpZFwiLGQpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpKYihkLGYpLEYoXCJpbnZhbGlkXCIsZCkscmQoYyxcIm9uQ2hhbmdlXCIpfW9kKGUsZik7YT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJihhPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZC50ZXh0Q29udGVudCE9PVwiXCIraCYmKGE9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTp2YS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9aCYmcmQoYyxnKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoZCk7RWIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp4YihkKTtMYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmXG4oZC5vbmNsaWNrPXNkKX1jPWE7Yi51cGRhdGVRdWV1ZT1jO251bGwhPT1jJiYoYi5lZmZlY3RUYWd8PTQpfWVsc2V7Zz05PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDthPT09cWQmJihhPU5iKGUpKTthPT09cWQ/XCJzY3JpcHRcIj09PWU/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChlLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGUpLFwic2VsZWN0XCI9PT1lJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxlKTthW01kXT1iO2FbTmRdPWQ7bmkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2c9cGQoZSxkKTtzd2l0Y2goZSl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLFxuYSk7aD1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihoPTA7aDxhYy5sZW5ndGg7aCsrKUYoYWNbaF0sYSk7aD1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsYSk7RihcImxvYWRcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImZvcm1cIjpGKFwicmVzZXRcIixhKTtGKFwic3VibWl0XCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLGEpO2g9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpBYihhLGQpO2g9emIoYSxkKTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6aD1HYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07aD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkpiKGEsXG5kKTtoPUliKGEsZCk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpoPWR9b2QoZSxoKTt2YXIgaz1oO2ZvcihmIGluIGspaWYoay5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGw9a1tmXTtcInN0eWxlXCI9PT1mP21kKGEsbCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8obD1sP2wuX19odG1sOnZvaWQgMCxudWxsIT1sJiZRYihhLGwpKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2YgbD8oXCJ0ZXh0YXJlYVwiIT09ZXx8XCJcIiE9PWwpJiZSYihhLGwpOlwibnVtYmVyXCI9PT10eXBlb2YgbCYmUmIoYSxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJih2YS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1sJiZyZChjLGYpOm51bGwhPWwmJlhhKGEsZixsLGcpKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoYSk7RWIoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnhiKGEpO0xiKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIityYihkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2M9ZC52YWx1ZTtudWxsIT1jP0hiKGEsISFkLm11bHRpcGxlLGMsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZIYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5vbkNsaWNrJiYoYS5vbmNsaWNrPXNkKX1GZChlLGQpJiYoYi5lZmZlY3RUYWd8PTQpfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlxaShhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTtcbmM9Y2goYmguY3VycmVudCk7Y2goJGcuY3VycmVudCk7V2goYik/KGM9Yi5zdGF0ZU5vZGUsZD1iLm1lbW9pemVkUHJvcHMsY1tNZF09YixjLm5vZGVWYWx1ZSE9PWQmJihiLmVmZmVjdFRhZ3w9NCkpOihjPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksY1tNZF09YixiLnN0YXRlTm9kZT1jKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9YyxiO2M9bnVsbCE9PWQ7ZD0hMTtudWxsPT09YT92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJldoKGIpOihlPWEubWVtb2l6ZWRTdGF0ZSxkPW51bGwhPT1lLGN8fG51bGw9PT1lfHwoZT1hLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWUmJihmPWIuZmlyc3RFZmZlY3QsbnVsbCE9PWY/KGIuZmlyc3RFZmZlY3Q9ZSxlLm5leHRFZmZlY3Q9Zik6KGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PVxuZSxlLm5leHRFZmZlY3Q9bnVsbCksZS5lZmZlY3RUYWc9OCkpKTtpZihjJiYhZCYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWEmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KE0uY3VycmVudCYxKSlTPT09dGkmJihTPXVpKTtlbHNle2lmKFM9PT10aXx8Uz09PXVpKVM9dmk7MCE9PXdpJiZudWxsIT09VCYmKHhpKFQsVSkseWkoVCx3aSkpfWlmKGN8fGQpYi5lZmZlY3RUYWd8PTQ7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG9pKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYiksbnVsbDtjYXNlIDE3OnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDE5OkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7ZT0wIT09KGIuZWZmZWN0VGFnJjY0KTtmPWQucmVuZGVyaW5nO2lmKG51bGw9PT1mKWlmKGUpcmkoZCwhMSk7ZWxzZXtpZihTIT09dGl8fG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJlxuNjQpKWZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KXthPWhoKGYpO2lmKG51bGwhPT1hKXtiLmVmZmVjdFRhZ3w9NjQ7cmkoZCwhMSk7ZT1hLnVwZGF0ZVF1ZXVlO251bGwhPT1lJiYoYi51cGRhdGVRdWV1ZT1lLGIuZWZmZWN0VGFnfD00KTtudWxsPT09ZC5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0O2ZvcihkPWIuY2hpbGQ7bnVsbCE9PWQ7KWU9ZCxmPWMsZS5lZmZlY3RUYWcmPTIsZS5uZXh0RWZmZWN0PW51bGwsZS5maXJzdEVmZmVjdD1udWxsLGUubGFzdEVmZmVjdD1udWxsLGE9ZS5hbHRlcm5hdGUsbnVsbD09PWE/KGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGUuZXhwaXJhdGlvblRpbWU9ZixlLmNoaWxkPW51bGwsZS5tZW1vaXplZFByb3BzPW51bGwsZS5tZW1vaXplZFN0YXRlPW51bGwsZS51cGRhdGVRdWV1ZT1udWxsLGUuZGVwZW5kZW5jaWVzPW51bGwpOihlLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lLFxuZS5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLGUuY2hpbGQ9YS5jaGlsZCxlLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzLGUubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGUsZS51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGY9YS5kZXBlbmRlbmNpZXMsZS5kZXBlbmRlbmNpZXM9bnVsbD09PWY/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Zi5leHBpcmF0aW9uVGltZSxmaXJzdENvbnRleHQ6Zi5maXJzdENvbnRleHQscmVzcG9uZGVyczpmLnJlc3BvbmRlcnN9KSxkPWQuc2libGluZztJKE0sTS5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9Zj1mLnNpYmxpbmd9fWVsc2V7aWYoIWUpaWYoYT1oaChmKSxudWxsIT09YSl7aWYoYi5lZmZlY3RUYWd8PTY0LGU9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZWZmZWN0VGFnfD00KSxyaShkLCEwKSxudWxsPT09ZC50YWlsJiZcImhpZGRlblwiPT09ZC50YWlsTW9kZSYmIWYuYWx0ZXJuYXRlKXJldHVybiBiPVxuYi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdCxudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKSxudWxsfWVsc2UgMiokZigpLWQucmVuZGVyaW5nU3RhcnRUaW1lPmQudGFpbEV4cGlyYXRpb24mJjE8YyYmKGIuZWZmZWN0VGFnfD02NCxlPSEwLHJpKGQsITEpLGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWMtMSk7ZC5pc0JhY2t3YXJkcz8oZi5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1mKTooYz1kLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWY6Yi5jaGlsZD1mLGQubGFzdD1mKX1yZXR1cm4gbnVsbCE9PWQudGFpbD8oMD09PWQudGFpbEV4cGlyYXRpb24mJihkLnRhaWxFeHBpcmF0aW9uPSRmKCkrNTAwKSxjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT0kZigpLGMuc2libGluZz1udWxsLGI9TS5jdXJyZW50LEkoTSxlP2ImMXwyOmImMSksYyk6bnVsbH10aHJvdyBFcnJvcih1KDE1NixcbmIudGFnKSk7fWZ1bmN0aW9uIHppKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkwoYS50eXBlKSYmRGYoKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiY0MDk2PyhhLmVmZmVjdFRhZz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAzOmVoKCk7SChLKTtIKEopO2I9YS5lZmZlY3RUYWc7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih1KDI4NSkpO2EuZWZmZWN0VGFnPWImLTQwOTd8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBnaChhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoTSksYj1hLmVmZmVjdFRhZyxiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKE0pLG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1mdW5jdGlvbiBBaShhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOnFiKGIpfX1cbnZhciBCaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtmdW5jdGlvbiBDaShhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPXFiKGMpKTtudWxsIT09YyYmcGIoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjE9PT1hLnRhZyYmcGIoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gRGkoYSxiKXt0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGMpe0VpKGEsYyl9fWZ1bmN0aW9uIEZpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe0VpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIEdpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6cmV0dXJuO2Nhc2UgMTppZihiLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOmlnKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9cmV0dXJuO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31cbmZ1bmN0aW9uIEhpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuZGVzdHJveTtjLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWQmJmQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIElpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuY3JlYXRlO2MuZGVzdHJveT1kKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1cbmZ1bmN0aW9uIEppKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpJaSgzLGMpO3JldHVybjtjYXNlIDE6YT1jLnN0YXRlTm9kZTtpZihjLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1iKWEuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBkPWMuZWxlbWVudFR5cGU9PT1jLnR5cGU/Yi5tZW1vaXplZFByb3BzOmlnKGMudHlwZSxiLm1lbW9pemVkUHJvcHMpO2EuY29tcG9uZW50RGlkVXBkYXRlKGQsYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfWI9Yy51cGRhdGVRdWV1ZTtudWxsIT09YiYmQ2coYyxiLGEpO3JldHVybjtjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1jLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6YT1jLmNoaWxkLnN0YXRlTm9kZX1DZyhjLGIsYSl9cmV0dXJuO1xuY2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZWZmZWN0VGFnJjQmJkZkKGMudHlwZSxjLm1lbW9pemVkUHJvcHMpJiZhLmZvY3VzKCk7cmV0dXJuO2Nhc2UgNjpyZXR1cm47Y2FzZSA0OnJldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGw9PT1jLm1lbW9pemVkU3RhdGUmJihjPWMuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYz1jLm1lbW9pemVkU3RhdGUsbnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsIT09YyYmVmMoYykpKSk7cmV0dXJuO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fVxuZnVuY3Rpb24gS2koYSxiLGMpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBMaSYmTGkoYik7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBkPWEubmV4dDtjZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYT1kO2Rve3ZhciBjPWEuZGVzdHJveTtpZih2b2lkIDAhPT1jKXt2YXIgZz1iO3RyeXtjKCl9Y2F0Y2goaCl7RWkoZyxoKX19YT1hLm5leHR9d2hpbGUoYSE9PWQpfSl9YnJlYWs7Y2FzZSAxOkZpKGIpO2M9Yi5zdGF0ZU5vZGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50V2lsbFVubW91bnQmJkRpKGIsYyk7YnJlYWs7Y2FzZSA1OkZpKGIpO2JyZWFrO2Nhc2UgNDpNaShhLGIsYyl9fVxuZnVuY3Rpb24gTmkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7YS5yZXR1cm49bnVsbDthLmNoaWxkPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5hbHRlcm5hdGU9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO251bGwhPT1iJiZOaShiKX1mdW5jdGlvbiBPaShhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFBpKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKE9pKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn10aHJvdyBFcnJvcih1KDE2MCkpO31iPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNjEpKTt9Yy5lZmZlY3RUYWcmMTYmJihSYihiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8T2koYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP1FpKGEsYyxiKTpSaShhLGMsYil9XG5mdW5jdGlvbiBRaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9c2QpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoUWkoYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylRaShhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBSaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFJpKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspUmkoYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gTWkoYSxiLGMpe2Zvcih2YXIgZD1iLGU9ITEsZixnOzspe2lmKCFlKXtlPWQucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih1KDE2MCkpO2Y9ZS5zdGF0ZU5vZGU7c3dpdGNoKGUudGFnKXtjYXNlIDU6Zz0hMTticmVhayBhO2Nhc2UgMzpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGE7Y2FzZSA0OmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1lPWUucmV0dXJufWU9ITB9aWYoNT09PWQudGFnfHw2PT09ZC50YWcpe2E6Zm9yKHZhciBoPWEsaz1kLGw9YyxtPWs7OylpZihLaShoLG0sbCksbnVsbCE9PW0uY2hpbGQmJjQhPT1tLnRhZyltLmNoaWxkLnJldHVybj1tLG09bS5jaGlsZDtlbHNle2lmKG09PT1rKWJyZWFrIGE7Zm9yKDtudWxsPT09bS5zaWJsaW5nOyl7aWYobnVsbD09PW0ucmV0dXJufHxtLnJldHVybj09PWspYnJlYWsgYTttPW0ucmV0dXJufW0uc2libGluZy5yZXR1cm49bS5yZXR1cm47bT1tLnNpYmxpbmd9Zz8oaD1cbmYsaz1kLnN0YXRlTm9kZSw4PT09aC5ub2RlVHlwZT9oLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoayk6aC5yZW1vdmVDaGlsZChrKSk6Zi5yZW1vdmVDaGlsZChkLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09ZC50YWcpe2lmKG51bGwhPT1kLmNoaWxkKXtmPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zz0hMDtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihLaShhLGQsYyksbnVsbCE9PWQuY2hpbGQpe2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfWlmKGQ9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWQuc2libGluZzspe2lmKG51bGw9PT1kLnJldHVybnx8ZC5yZXR1cm49PT1iKXJldHVybjtkPWQucmV0dXJuOzQ9PT1kLnRhZyYmKGU9ITEpfWQuc2libGluZy5yZXR1cm49ZC5yZXR1cm47ZD1kLnNpYmxpbmd9fVxuZnVuY3Rpb24gU2koYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOkhpKDMsYik7cmV0dXJuO2Nhc2UgMTpyZXR1cm47Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wcyxlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW05kXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiZCYihjLGQpO3BkKGEsZSk7Yj1wZChhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz0yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/bWQoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP1FiKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9SYihjLGgpOlhhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjpDYihjLGQpO2JyZWFrO1xuY2FzZSBcInRleHRhcmVhXCI6S2IoYyxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxhPWQudmFsdWUsbnVsbCE9YT9IYihjLCEhZC5tdWx0aXBsZSxhLCExKTpiIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/SGIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOkhiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19cmV0dXJuO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yj1iLnN0YXRlTm9kZTtiLmh5ZHJhdGUmJihiLmh5ZHJhdGU9ITEsVmMoYi5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6Yz1iO251bGw9PT1iLm1lbW9pemVkU3RhdGU/XG5kPSExOihkPSEwLGM9Yi5jaGlsZCxUaT0kZigpKTtpZihudWxsIT09YylhOmZvcihhPWM7Oyl7aWYoNT09PWEudGFnKWY9YS5zdGF0ZU5vZGUsZD8oZj1mLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooZj1hLnN0YXRlTm9kZSxlPWEubWVtb2l6ZWRQcm9wcy5zdHlsZSxlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbCxmLnN0eWxlLmRpc3BsYXk9bGQoXCJkaXNwbGF5XCIsZSkpO2Vsc2UgaWYoNj09PWEudGFnKWEuc3RhdGVOb2RlLm5vZGVWYWx1ZT1kP1wiXCI6YS5tZW1vaXplZFByb3BzO2Vsc2UgaWYoMTM9PT1hLnRhZyYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtmPWEuY2hpbGQuc2libGluZztmLnJldHVybj1hO2E9XG5mO2NvbnRpbnVlfWVsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1jKWJyZWFrO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1jKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfVVpKGIpO3JldHVybjtjYXNlIDE5OlVpKGIpO3JldHVybjtjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31mdW5jdGlvbiBVaShhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBCaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPVZpLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxudmFyIFdpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIFhpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7WWl8fChZaT0hMCxaaT1kKTtDaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uICRpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe0NpKGEsYik7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1haj9haj1uZXcgU2V0KFt0aGlzXSk6YWouYWRkKHRoaXMpLENpKGEsYikpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxudmFyIGJqPU1hdGguY2VpbCxjaj1XYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGRqPVdhLlJlYWN0Q3VycmVudE93bmVyLFY9MCxlaj04LGZqPTE2LGdqPTMyLHRpPTAsaGo9MSxpaj0yLHVpPTMsdmk9NCxqaj01LFc9VixUPW51bGwsWD1udWxsLFU9MCxTPXRpLGtqPW51bGwsbGo9MTA3Mzc0MTgyMyxtaj0xMDczNzQxODIzLG5qPW51bGwsd2k9MCxvaj0hMSxUaT0wLHBqPTUwMCxZPW51bGwsWWk9ITEsWmk9bnVsbCxhaj1udWxsLHFqPSExLHJqPW51bGwsc2o9OTAsdGo9bnVsbCx1aj0wLHZqPW51bGwsd2o9MDtmdW5jdGlvbiBHZygpe3JldHVybihXJihmanxnaikpIT09Vj8xMDczNzQxODIxLSgkZigpLzEwfDApOjAhPT13aj93ajp3aj0xMDczNzQxODIxLSgkZigpLzEwfDApfVxuZnVuY3Rpb24gSGcoYSxiLGMpe2I9Yi5tb2RlO2lmKDA9PT0oYiYyKSlyZXR1cm4gMTA3Mzc0MTgyMzt2YXIgZD1hZygpO2lmKDA9PT0oYiY0KSlyZXR1cm4gOTk9PT1kPzEwNzM3NDE4MjM6MTA3Mzc0MTgyMjtpZigoVyZmaikhPT1WKXJldHVybiBVO2lmKG51bGwhPT1jKWE9aGcoYSxjLnRpbWVvdXRNc3wwfHw1RTMsMjUwKTtlbHNlIHN3aXRjaChkKXtjYXNlIDk5OmE9MTA3Mzc0MTgyMzticmVhaztjYXNlIDk4OmE9aGcoYSwxNTAsMTAwKTticmVhaztjYXNlIDk3OmNhc2UgOTY6YT1oZyhhLDVFMywyNTApO2JyZWFrO2Nhc2UgOTU6YT0yO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMjYpKTt9bnVsbCE9PVQmJmE9PT1VJiYtLWE7cmV0dXJuIGF9XG5mdW5jdGlvbiBJZyhhLGIpe2lmKDUwPHVqKXRocm93IHVqPTAsdmo9bnVsbCxFcnJvcih1KDE4NSkpO2E9eGooYSxiKTtpZihudWxsIT09YSl7dmFyIGM9YWcoKTsxMDczNzQxODIzPT09Yj8oVyZlaikhPT1WJiYoVyYoZmp8Z2opKT09PVY/eWooYSk6KFooYSksVz09PVYmJmdnKCkpOlooYSk7KFcmNCk9PT1WfHw5OCE9PWMmJjk5IT09Y3x8KG51bGw9PT10aj90aj1uZXcgTWFwKFtbYSxiXV0pOihjPXRqLmdldChhKSwodm9pZCAwPT09Y3x8Yz5iKSYmdGouc2V0KGEsYikpKX19XG5mdW5jdGlvbiB4aihhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGQ9YS5yZXR1cm4sZT1udWxsO2lmKG51bGw9PT1kJiYzPT09YS50YWcpZT1hLnN0YXRlTm9kZTtlbHNlIGZvcig7bnVsbCE9PWQ7KXtjPWQuYWx0ZXJuYXRlO2QuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoZC5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO251bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjM9PT1kLnRhZyl7ZT1kLnN0YXRlTm9kZTticmVha31kPWQucmV0dXJufW51bGwhPT1lJiYoVD09PWUmJihCZyhiKSxTPT09dmkmJnhpKGUsVSkpLHlpKGUsYikpO3JldHVybiBlfVxuZnVuY3Rpb24gemooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7aWYoMCE9PWIpcmV0dXJuIGI7Yj1hLmZpcnN0UGVuZGluZ1RpbWU7aWYoIUFqKGEsYikpcmV0dXJuIGI7dmFyIGM9YS5sYXN0UGluZ2VkVGltZTthPWEubmV4dEtub3duUGVuZGluZ0xldmVsO2E9Yz5hP2M6YTtyZXR1cm4gMj49YSYmYiE9PWE/MDphfVxuZnVuY3Rpb24gWihhKXtpZigwIT09YS5sYXN0RXhwaXJlZFRpbWUpYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjMsYS5jYWxsYmFja1ByaW9yaXR5PTk5LGEuY2FsbGJhY2tOb2RlPWVnKHlqLmJpbmQobnVsbCxhKSk7ZWxzZXt2YXIgYj16aihhKSxjPWEuY2FsbGJhY2tOb2RlO2lmKDA9PT1iKW51bGwhPT1jJiYoYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MCxhLmNhbGxiYWNrUHJpb3JpdHk9OTApO2Vsc2V7dmFyIGQ9R2coKTsxMDczNzQxODIzPT09Yj9kPTk5OjE9PT1ifHwyPT09Yj9kPTk1OihkPTEwKigxMDczNzQxODIxLWIpLTEwKigxMDczNzQxODIxLWQpLGQ9MD49ZD85OToyNTA+PWQ/OTg6NTI1MD49ZD85Nzo5NSk7aWYobnVsbCE9PWMpe3ZhciBlPWEuY2FsbGJhY2tQcmlvcml0eTtpZihhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9PT1iJiZlPj1kKXJldHVybjtjIT09VGYmJktmKGMpfWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT1cbmI7YS5jYWxsYmFja1ByaW9yaXR5PWQ7Yj0xMDczNzQxODIzPT09Yj9lZyh5ai5iaW5kKG51bGwsYSkpOmRnKGQsQmouYmluZChudWxsLGEpLHt0aW1lb3V0OjEwKigxMDczNzQxODIxLWIpLSRmKCl9KTthLmNhbGxiYWNrTm9kZT1ifX19XG5mdW5jdGlvbiBCaihhLGIpe3dqPTA7aWYoYilyZXR1cm4gYj1HZygpLENqKGEsYiksWihhKSxudWxsO3ZhciBjPXpqKGEpO2lmKDAhPT1jKXtiPWEuY2FsbGJhY2tOb2RlO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmM9PT1VfHxFaihhLGMpO2lmKG51bGwhPT1YKXt2YXIgZD1XO1d8PWZqO3ZhciBlPUZqKCk7ZG8gdHJ5e0dqKCk7YnJlYWt9Y2F0Y2goaCl7SGooYSxoKX13aGlsZSgxKTtuZygpO1c9ZDtjai5jdXJyZW50PWU7aWYoUz09PWhqKXRocm93IGI9a2osRWooYSxjKSx4aShhLGMpLFooYSksYjtpZihudWxsPT09WClzd2l0Y2goZT1hLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlLGEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1jLGQ9UyxUPW51bGwsZCl7Y2FzZSB0aTpjYXNlIGhqOnRocm93IEVycm9yKHUoMzQ1KSk7Y2FzZSBpajpDaihhLDI8Yz8yOmMpO2JyZWFrO2Nhc2UgdWk6eGkoYSxjKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7XG5jPT09ZCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPUlqKGUpKTtpZigxMDczNzQxODIzPT09bGomJihlPVRpK3BqLSRmKCksMTA8ZSkpe2lmKG9qKXt2YXIgZj1hLmxhc3RQaW5nZWRUaW1lO2lmKDA9PT1mfHxmPj1jKXthLmxhc3RQaW5nZWRUaW1lPWM7RWooYSxjKTticmVha319Zj16aihhKTtpZigwIT09ZiYmZiE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPWQ7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUhkKEpqLmJpbmQobnVsbCxhKSxlKTticmVha31KaihhKTticmVhaztjYXNlIHZpOnhpKGEsYyk7ZD1hLmxhc3RTdXNwZW5kZWRUaW1lO2M9PT1kJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9SWooZSkpO2lmKG9qJiYoZT1hLmxhc3RQaW5nZWRUaW1lLDA9PT1lfHxlPj1jKSl7YS5sYXN0UGluZ2VkVGltZT1jO0VqKGEsYyk7YnJlYWt9ZT16aihhKTtpZigwIT09ZSYmZSE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPVxuZDticmVha30xMDczNzQxODIzIT09bWo/ZD0xMCooMTA3Mzc0MTgyMS1taiktJGYoKToxMDczNzQxODIzPT09bGo/ZD0wOihkPTEwKigxMDczNzQxODIxLWxqKS01RTMsZT0kZigpLGM9MTAqKDEwNzM3NDE4MjEtYyktZSxkPWUtZCwwPmQmJihkPTApLGQ9KDEyMD5kPzEyMDo0ODA+ZD80ODA6MTA4MD5kPzEwODA6MTkyMD5kPzE5MjA6M0UzPmQ/M0UzOjQzMjA+ZD80MzIwOjE5NjAqYmooZC8xOTYwKSktZCxjPGQmJihkPWMpKTtpZigxMDxkKXthLnRpbWVvdXRIYW5kbGU9SGQoSmouYmluZChudWxsLGEpLGQpO2JyZWFrfUpqKGEpO2JyZWFrO2Nhc2Ugamo6aWYoMTA3Mzc0MTgyMyE9PWxqJiZudWxsIT09bmope2Y9bGo7dmFyIGc9bmo7ZD1nLmJ1c3lNaW5EdXJhdGlvbk1zfDA7MD49ZD9kPTA6KGU9Zy5idXN5RGVsYXlNc3wwLGY9JGYoKS0oMTAqKDEwNzM3NDE4MjEtZiktKGcudGltZW91dE1zfDB8fDVFMykpLGQ9Zjw9ZT8wOmUrZC1mKTtpZigxMDxkKXt4aShhLGMpO2EudGltZW91dEhhbmRsZT1cbkhkKEpqLmJpbmQobnVsbCxhKSxkKTticmVha319SmooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMyOSkpO31aKGEpO2lmKGEuY2FsbGJhY2tOb2RlPT09YilyZXR1cm4gQmouYmluZChudWxsLGEpfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHlqKGEpe3ZhciBiPWEubGFzdEV4cGlyZWRUaW1lO2I9MCE9PWI/YjoxMDczNzQxODIzO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmI9PT1VfHxFaihhLGIpO2lmKG51bGwhPT1YKXt2YXIgYz1XO1d8PWZqO3ZhciBkPUZqKCk7ZG8gdHJ5e0tqKCk7YnJlYWt9Y2F0Y2goZSl7SGooYSxlKX13aGlsZSgxKTtuZygpO1c9Yztjai5jdXJyZW50PWQ7aWYoUz09PWhqKXRocm93IGM9a2osRWooYSxiKSx4aShhLGIpLFooYSksYztpZihudWxsIT09WCl0aHJvdyBFcnJvcih1KDI2MSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWI7VD1udWxsO0pqKGEpO1ooYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTGooKXtpZihudWxsIT09dGope3ZhciBhPXRqO3RqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEsYyl7Q2ooYyxhKTtaKGMpfSk7Z2coKX19XG5mdW5jdGlvbiBNaihhLGIpe3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fWZ1bmN0aW9uIE5qKGEsYil7dmFyIGM9VztXJj0tMjtXfD1lajt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fVxuZnVuY3Rpb24gRWooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsSWQoYykpO2lmKG51bGwhPT1YKWZvcihjPVgucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmRGYoKTticmVhaztjYXNlIDM6ZWgoKTtIKEspO0goSik7YnJlYWs7Y2FzZSA1OmdoKGQpO2JyZWFrO2Nhc2UgNDplaCgpO2JyZWFrO2Nhc2UgMTM6SChNKTticmVhaztjYXNlIDE5OkgoTSk7YnJlYWs7Y2FzZSAxMDpvZyhkKX1jPWMucmV0dXJufVQ9YTtYPVNnKGEuY3VycmVudCxudWxsKTtVPWI7Uz10aTtraj1udWxsO21qPWxqPTEwNzM3NDE4MjM7bmo9bnVsbDt3aT0wO29qPSExfVxuZnVuY3Rpb24gSGooYSxiKXtkb3t0cnl7bmcoKTtqaC5jdXJyZW50PXNoO2lmKG1oKWZvcih2YXIgYz1OLm1lbW9pemVkU3RhdGU7bnVsbCE9PWM7KXt2YXIgZD1jLnF1ZXVlO251bGwhPT1kJiYoZC5wZW5kaW5nPW51bGwpO2M9Yy5uZXh0fWxoPTA7UD1PPU49bnVsbDttaD0hMTtpZihudWxsPT09WHx8bnVsbD09PVgucmV0dXJuKXJldHVybiBTPWhqLGtqPWIsWD1udWxsO2E6e3ZhciBlPWEsZj1YLnJldHVybixnPVgsaD1iO2I9VTtnLmVmZmVjdFRhZ3w9MjA0ODtnLmZpcnN0RWZmZWN0PWcubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1oJiZcIm9iamVjdFwiPT09dHlwZW9mIGgmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLnRoZW4pe3ZhciBrPWg7aWYoMD09PShnLm1vZGUmMikpe3ZhciBsPWcuYWx0ZXJuYXRlO2w/KGcudXBkYXRlUXVldWU9bC51cGRhdGVRdWV1ZSxnLm1lbW9pemVkU3RhdGU9bC5tZW1vaXplZFN0YXRlLGcuZXhwaXJhdGlvblRpbWU9bC5leHBpcmF0aW9uVGltZSk6KGcudXBkYXRlUXVldWU9XG5udWxsLGcubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgbT0wIT09KE0uY3VycmVudCYxKSxwPWY7ZG97dmFyIHg7aWYoeD0xMz09PXAudGFnKXt2YXIgej1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXopeD1udWxsIT09ei5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIGNhPXAubWVtb2l6ZWRQcm9wczt4PXZvaWQgMD09PWNhLmZhbGxiYWNrPyExOiEwIT09Y2EudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6bT8hMTohMH19aWYoeCl7dmFyIEQ9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09RCl7dmFyIHQ9bmV3IFNldDt0LmFkZChrKTtwLnVwZGF0ZVF1ZXVlPXR9ZWxzZSBELmFkZChrKTtpZigwPT09KHAubW9kZSYyKSl7cC5lZmZlY3RUYWd8PTY0O2cuZWZmZWN0VGFnJj0tMjk4MTtpZigxPT09Zy50YWcpaWYobnVsbD09PWcuYWx0ZXJuYXRlKWcudGFnPTE3O2Vsc2V7dmFyIHk9d2coMTA3Mzc0MTgyMyxudWxsKTt5LnRhZz0yO3hnKGcseSl9Zy5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO1xuYnJlYWsgYX1oPXZvaWQgMDtnPWI7dmFyIEE9ZS5waW5nQ2FjaGU7bnVsbD09PUE/KEE9ZS5waW5nQ2FjaGU9bmV3IFdpLGg9bmV3IFNldCxBLnNldChrLGgpKTooaD1BLmdldChrKSx2b2lkIDA9PT1oJiYoaD1uZXcgU2V0LEEuc2V0KGssaCkpKTtpZighaC5oYXMoZykpe2guYWRkKGcpO3ZhciBxPU9qLmJpbmQobnVsbCxlLGssZyk7ay50aGVuKHEscSl9cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO2JyZWFrIGF9cD1wLnJldHVybn13aGlsZShudWxsIT09cCk7aD1FcnJvcigocGIoZy50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiK3FiKGcpKX1TIT09XG5qaiYmKFM9aWopO2g9QWkoaCxnKTtwPWY7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6az1oO3AuZWZmZWN0VGFnfD00MDk2O3AuZXhwaXJhdGlvblRpbWU9Yjt2YXIgQj1YaShwLGssYik7eWcocCxCKTticmVhayBhO2Nhc2UgMTprPWg7dmFyIHc9cC50eXBlLHViPXAuc3RhdGVOb2RlO2lmKDA9PT0ocC5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dWImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB1Yi5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1hanx8IWFqLmhhcyh1YikpKSl7cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO3ZhciB2Yj0kaShwLGssYik7eWcocCx2Yik7YnJlYWsgYX19cD1wLnJldHVybn13aGlsZShudWxsIT09cCl9WD1QaihYKX1jYXRjaChYYyl7Yj1YYztjb250aW51ZX1icmVha313aGlsZSgxKX1cbmZ1bmN0aW9uIEZqKCl7dmFyIGE9Y2ouY3VycmVudDtjai5jdXJyZW50PXNoO3JldHVybiBudWxsPT09YT9zaDphfWZ1bmN0aW9uIEFnKGEsYil7YTxsaiYmMjxhJiYobGo9YSk7bnVsbCE9PWImJmE8bWomJjI8YSYmKG1qPWEsbmo9Yil9ZnVuY3Rpb24gQmcoYSl7YT53aSYmKHdpPWEpfWZ1bmN0aW9uIEtqKCl7Zm9yKDtudWxsIT09WDspWD1RaihYKX1mdW5jdGlvbiBHaigpe2Zvcig7bnVsbCE9PVgmJiFVZigpOylYPVFqKFgpfWZ1bmN0aW9uIFFqKGEpe3ZhciBiPVJqKGEuYWx0ZXJuYXRlLGEsVSk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1QaihhKSk7ZGouY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gUGooYSl7WD1hO2Rve3ZhciBiPVguYWx0ZXJuYXRlO2E9WC5yZXR1cm47aWYoMD09PShYLmVmZmVjdFRhZyYyMDQ4KSl7Yj1zaShiLFgsVSk7aWYoMT09PVV8fDEhPT1YLmNoaWxkRXhwaXJhdGlvblRpbWUpe2Zvcih2YXIgYz0wLGQ9WC5jaGlsZDtudWxsIT09ZDspe3ZhciBlPWQuZXhwaXJhdGlvblRpbWUsZj1kLmNoaWxkRXhwaXJhdGlvblRpbWU7ZT5jJiYoYz1lKTtmPmMmJihjPWYpO2Q9ZC5zaWJsaW5nfVguY2hpbGRFeHBpcmF0aW9uVGltZT1jfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1hJiYwPT09KGEuZWZmZWN0VGFnJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PVguZmlyc3RFZmZlY3QpLG51bGwhPT1YLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9WC5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PVgubGFzdEVmZmVjdCksMTxYLmVmZmVjdFRhZyYmKG51bGwhPT1cbmEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1YOmEuZmlyc3RFZmZlY3Q9WCxhLmxhc3RFZmZlY3Q9WCkpfWVsc2V7Yj16aShYKTtpZihudWxsIT09YilyZXR1cm4gYi5lZmZlY3RUYWcmPTIwNDcsYjtudWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5lZmZlY3RUYWd8PTIwNDgpfWI9WC5zaWJsaW5nO2lmKG51bGwhPT1iKXJldHVybiBiO1g9YX13aGlsZShudWxsIT09WCk7Uz09PXRpJiYoUz1qaik7cmV0dXJuIG51bGx9ZnVuY3Rpb24gSWooYSl7dmFyIGI9YS5leHBpcmF0aW9uVGltZTthPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtyZXR1cm4gYj5hP2I6YX1mdW5jdGlvbiBKaihhKXt2YXIgYj1hZygpO2NnKDk5LFNqLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG8gRGooKTt3aGlsZShudWxsIT09cmopO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrLGQ9YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcih1KDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTA7YS5jYWxsYmFja1ByaW9yaXR5PTkwO2EubmV4dEtub3duUGVuZGluZ0xldmVsPTA7dmFyIGU9SWooYyk7YS5maXJzdFBlbmRpbmdUaW1lPWU7ZDw9YS5sYXN0U3VzcGVuZGVkVGltZT9hLmZpcnN0U3VzcGVuZGVkVGltZT1hLmxhc3RTdXNwZW5kZWRUaW1lPWEubmV4dEtub3duUGVuZGluZ0xldmVsPTA6ZDw9YS5maXJzdFN1c3BlbmRlZFRpbWUmJihhLmZpcnN0U3VzcGVuZGVkVGltZT1cbmQtMSk7ZDw9YS5sYXN0UGluZ2VkVGltZSYmKGEubGFzdFBpbmdlZFRpbWU9MCk7ZDw9YS5sYXN0RXhwaXJlZFRpbWUmJihhLmxhc3RFeHBpcmVkVGltZT0wKTthPT09VCYmKFg9VD1udWxsLFU9MCk7MTxjLmVmZmVjdFRhZz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGU9Yy5maXJzdEVmZmVjdCk6ZT1jOmU9Yy5maXJzdEVmZmVjdDtpZihudWxsIT09ZSl7dmFyIGY9VztXfD1najtkai5jdXJyZW50PW51bGw7RGQ9ZmQ7dmFyIGc9eGQoKTtpZih5ZChnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyl2YXIgaD17c3RhcnQ6Zy5zZWxlY3Rpb25TdGFydCxlbmQ6Zy5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7aD0oaD1nLm93bmVyRG9jdW1lbnQpJiZoLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGs9aC5nZXRTZWxlY3Rpb24mJmguZ2V0U2VsZWN0aW9uKCk7aWYoayYmMCE9PWsucmFuZ2VDb3VudCl7aD1rLmFuY2hvck5vZGU7dmFyIGw9ay5hbmNob3JPZmZzZXQsXG5tPWsuZm9jdXNOb2RlO2s9ay5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxtLm5vZGVUeXBlfWNhdGNoKHdiKXtoPW51bGw7YnJlYWsgYX12YXIgcD0wLHg9LTEsej0tMSxjYT0wLEQ9MCx0PWcseT1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIEE7Oyl7dCE9PWh8fDAhPT1sJiYzIT09dC5ub2RlVHlwZXx8KHg9cCtsKTt0IT09bXx8MCE9PWsmJjMhPT10Lm5vZGVUeXBlfHwoej1wK2spOzM9PT10Lm5vZGVUeXBlJiYocCs9dC5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KEE9dC5maXJzdENoaWxkKSlicmVhazt5PXQ7dD1BfWZvcig7Oyl7aWYodD09PWcpYnJlYWsgYjt5PT09aCYmKytjYT09PWwmJih4PXApO3k9PT1tJiYrK0Q9PT1rJiYoej1wKTtpZihudWxsIT09KEE9dC5uZXh0U2libGluZykpYnJlYWs7dD15O3k9dC5wYXJlbnROb2RlfXQ9QX1oPS0xPT09eHx8LTE9PT16P251bGw6e3N0YXJ0OngsZW5kOnp9fWVsc2UgaD1udWxsfWg9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1cbm51bGw7RWQ9e2FjdGl2ZUVsZW1lbnREZXRhY2hlZDpudWxsLGZvY3VzZWRFbGVtOmcsc2VsZWN0aW9uUmFuZ2U6aH07ZmQ9ITE7WT1lO2RvIHRyeXtUaigpfWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPWU7ZG8gdHJ5e2ZvcihnPWEsaD1iO251bGwhPT1ZOyl7dmFyIHE9WS5lZmZlY3RUYWc7cSYxNiYmUmIoWS5zdGF0ZU5vZGUsXCJcIik7aWYocSYxMjgpe3ZhciBCPVkuYWx0ZXJuYXRlO2lmKG51bGwhPT1CKXt2YXIgdz1CLnJlZjtudWxsIT09dyYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3P3cobnVsbCk6dy5jdXJyZW50PW51bGwpfX1zd2l0Y2gocSYxMDM4KXtjYXNlIDI6UGkoWSk7WS5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpQaShZKTtZLmVmZmVjdFRhZyY9LTM7U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSAxMDI0OlkuZWZmZWN0VGFnJj0tMTAyNTticmVhaztjYXNlIDEwMjg6WS5lZmZlY3RUYWcmPVxuLTEwMjU7U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA0OlNpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgODpsPVksTWkoZyxsLGgpLE5pKGwpfVk9WS5uZXh0RWZmZWN0fX1jYXRjaCh3Yil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtFaShZLHdiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7dz1FZDtCPXhkKCk7cT13LmZvY3VzZWRFbGVtO2g9dy5zZWxlY3Rpb25SYW5nZTtpZihCIT09cSYmcSYmcS5vd25lckRvY3VtZW50JiZ3ZChxLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHEpKXtudWxsIT09aCYmeWQocSkmJihCPWguc3RhcnQsdz1oLmVuZCx2b2lkIDA9PT13JiYodz1CKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBxPyhxLnNlbGVjdGlvblN0YXJ0PUIscS5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odyxxLnZhbHVlLmxlbmd0aCkpOih3PShCPXEub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZCLmRlZmF1bHRWaWV3fHx3aW5kb3csdy5nZXRTZWxlY3Rpb24mJlxuKHc9dy5nZXRTZWxlY3Rpb24oKSxsPXEudGV4dENvbnRlbnQubGVuZ3RoLGc9TWF0aC5taW4oaC5zdGFydCxsKSxoPXZvaWQgMD09PWguZW5kP2c6TWF0aC5taW4oaC5lbmQsbCksIXcuZXh0ZW5kJiZnPmgmJihsPWgsaD1nLGc9bCksbD12ZChxLGcpLG09dmQocSxoKSxsJiZtJiYoMSE9PXcucmFuZ2VDb3VudHx8dy5hbmNob3JOb2RlIT09bC5ub2RlfHx3LmFuY2hvck9mZnNldCE9PWwub2Zmc2V0fHx3LmZvY3VzTm9kZSE9PW0ubm9kZXx8dy5mb2N1c09mZnNldCE9PW0ub2Zmc2V0KSYmKEI9Qi5jcmVhdGVSYW5nZSgpLEIuc2V0U3RhcnQobC5ub2RlLGwub2Zmc2V0KSx3LnJlbW92ZUFsbFJhbmdlcygpLGc+aD8ody5hZGRSYW5nZShCKSx3LmV4dGVuZChtLm5vZGUsbS5vZmZzZXQpKTooQi5zZXRFbmQobS5ub2RlLG0ub2Zmc2V0KSx3LmFkZFJhbmdlKEIpKSkpKSk7Qj1bXTtmb3Iodz1xO3c9dy5wYXJlbnROb2RlOykxPT09dy5ub2RlVHlwZSYmQi5wdXNoKHtlbGVtZW50OncsbGVmdDp3LnNjcm9sbExlZnQsXG50b3A6dy5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgcS5mb2N1cyYmcS5mb2N1cygpO2ZvcihxPTA7cTxCLmxlbmd0aDtxKyspdz1CW3FdLHcuZWxlbWVudC5zY3JvbGxMZWZ0PXcubGVmdCx3LmVsZW1lbnQuc2Nyb2xsVG9wPXcudG9wfWZkPSEhRGQ7RWQ9RGQ9bnVsbDthLmN1cnJlbnQ9YztZPWU7ZG8gdHJ5e2ZvcihxPWE7bnVsbCE9PVk7KXt2YXIgdWI9WS5lZmZlY3RUYWc7dWImMzYmJkppKHEsWS5hbHRlcm5hdGUsWSk7aWYodWImMTI4KXtCPXZvaWQgMDt2YXIgdmI9WS5yZWY7aWYobnVsbCE9PXZiKXt2YXIgWGM9WS5zdGF0ZU5vZGU7c3dpdGNoKFkudGFnKXtjYXNlIDU6Qj1YYzticmVhaztkZWZhdWx0OkI9WGN9XCJmdW5jdGlvblwiPT09dHlwZW9mIHZiP3ZiKEIpOnZiLmN1cnJlbnQ9Qn19WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPVxubnVsbDtWZigpO1c9Zn1lbHNlIGEuY3VycmVudD1jO2lmKHFqKXFqPSExLHJqPWEsc2o9YjtlbHNlIGZvcihZPWU7bnVsbCE9PVk7KWI9WS5uZXh0RWZmZWN0LFkubmV4dEVmZmVjdD1udWxsLFk9YjtiPWEuZmlyc3RQZW5kaW5nVGltZTswPT09YiYmKGFqPW51bGwpOzEwNzM3NDE4MjM9PT1iP2E9PT12aj91aisrOih1aj0wLHZqPWEpOnVqPTA7XCJmdW5jdGlvblwiPT09dHlwZW9mIFVqJiZVaihjLnN0YXRlTm9kZSxkKTtaKGEpO2lmKFlpKXRocm93IFlpPSExLGE9WmksWmk9bnVsbCxhO2lmKChXJmVqKSE9PVYpcmV0dXJuIG51bGw7Z2coKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBUaigpe2Zvcig7bnVsbCE9PVk7KXt2YXIgYT1ZLmVmZmVjdFRhZzswIT09KGEmMjU2KSYmR2koWS5hbHRlcm5hdGUsWSk7MD09PShhJjUxMil8fHFqfHwocWo9ITAsZGcoOTcsZnVuY3Rpb24oKXtEaigpO3JldHVybiBudWxsfSkpO1k9WS5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIERqKCl7aWYoOTAhPT1zail7dmFyIGE9OTc8c2o/OTc6c2o7c2o9OTA7cmV0dXJuIGNnKGEsVmopfX1mdW5jdGlvbiBWaigpe2lmKG51bGw9PT1yailyZXR1cm4hMTt2YXIgYT1yajtyaj1udWxsO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMzMSkpO3ZhciBiPVc7V3w9Z2o7Zm9yKGE9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1hOyl7dHJ5e3ZhciBjPWE7aWYoMCE9PShjLmVmZmVjdFRhZyY1MTIpKXN3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOkhpKDUsYyksSWkoNSxjKX19Y2F0Y2goZCl7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMzApKTtFaShhLGQpfWM9YS5uZXh0RWZmZWN0O2EubmV4dEVmZmVjdD1udWxsO2E9Y31XPWI7Z2coKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFdqKGEsYixjKXtiPUFpKGMsYik7Yj1YaShhLGIsMTA3Mzc0MTgyMyk7eGcoYSxiKTthPXhqKGEsMTA3Mzc0MTgyMyk7bnVsbCE9PWEmJlooYSl9ZnVuY3Rpb24gRWkoYSxiKXtpZigzPT09YS50YWcpV2ooYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtXaihjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1hanx8IWFqLmhhcyhkKSkpe2E9QWkoYixhKTthPSRpKGMsYSwxMDczNzQxODIzKTt4ZyhjLGEpO2M9eGooYywxMDczNzQxODIzKTtudWxsIT09YyYmWihjKTticmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBPaihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1Q9PT1hJiZVPT09Yz9TPT09dml8fFM9PT11aSYmMTA3Mzc0MTgyMz09PWxqJiYkZigpLVRpPHBqP0VqKGEsVSk6b2o9ITA6QWooYSxjKSYmKGI9YS5sYXN0UGluZ2VkVGltZSwwIT09YiYmYjxjfHwoYS5sYXN0UGluZ2VkVGltZT1jLFooYSkpKX1mdW5jdGlvbiBWaShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPUdnKCksYj1IZyhiLGEsbnVsbCkpO2E9eGooYSxiKTtudWxsIT09YSYmWihhKX12YXIgUmo7XG5Saj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSl7dmFyIGU9Yi5wZW5kaW5nUHJvcHM7aWYoYS5tZW1vaXplZFByb3BzIT09ZXx8Sy5jdXJyZW50KXJnPSEwO2Vsc2V7aWYoZDxjKXtyZz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpoaShiKTtYaCgpO2JyZWFrO2Nhc2UgNTpmaChiKTtpZihiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLG51bGw7YnJlYWs7Y2FzZSAxOkwoYi50eXBlKSYmR2YoYik7YnJlYWs7Y2FzZSA0OmRoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTtlPWIudHlwZS5fY29udGV4dDtJKGpnLGUuX2N1cnJlbnRWYWx1ZSk7ZS5fY3VycmVudFZhbHVlPWQ7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtcbmlmKDAhPT1kJiZkPj1jKXJldHVybiBqaShhLGIsYyk7SShNLE0uY3VycmVudCYxKTtiPSRoKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9SShNLE0uY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPj1jO2lmKDAhPT0oYS5lZmZlY3RUYWcmNjQpKXtpZihkKXJldHVybiBtaShhLGIsYyk7Yi5lZmZlY3RUYWd8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCk7SShNLE0uY3VycmVudCk7aWYoIWQpcmV0dXJuIG51bGx9cmV0dXJuICRoKGEsYixjKX1yZz0hMX19ZWxzZSByZz0hMTtiLmV4cGlyYXRpb25UaW1lPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1DZihiLEouY3VycmVudCk7cWcoYixjKTtlPW9oKG51bGwsXG5iLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoTChkKSl7dmFyIGY9ITA7R2YoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dWcoYik7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJkZnKGIsZCxnLGEpO2UudXBkYXRlcj1KZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO05nKGIsZCxhLGMpO2I9Z2kobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsUihudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjphOntlPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1cbm51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztvYihlKTtpZigxIT09ZS5fc3RhdHVzKXRocm93IGUuX3Jlc3VsdDtlPWUuX3Jlc3VsdDtiLnR5cGU9ZTtmPWIudGFnPVhqKGUpO2E9aWcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9ZGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTpiPWZpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WmgobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1haShudWxsLGIsZSxpZyhlLnR5cGUsYSksZCxjKTticmVhayBhfXRocm93IEVycm9yKHUoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksZGkoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksZmkoYSxiLGQsZSxjKTtcbmNhc2UgMzpoaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHUoMjgyKSk7ZD1iLnBlbmRpbmdQcm9wcztlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3ZnKGEsYik7emcoYixkLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlYaCgpLGI9JGgoYSxiLGMpO2Vsc2V7aWYoZT1iLnN0YXRlTm9kZS5oeWRyYXRlKVBoPUpkKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksT2g9YixlPVFoPSEwO2lmKGUpZm9yKGM9WWcoYixudWxsLGQsYyksYi5jaGlsZD1jO2M7KWMuZWZmZWN0VGFnPWMuZWZmZWN0VGFnJi0zfDEwMjQsYz1jLnNpYmxpbmc7ZWxzZSBSKGEsYixkLGMpLFhoKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gZmgoYiksbnVsbD09PWEmJlVoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6XG5udWxsLGc9ZS5jaGlsZHJlbixHZChkLGUpP2c9bnVsbDpudWxsIT09ZiYmR2QoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNiksZWkoYSxiKSxiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLGI9bnVsbCk6KFIoYSxiLGcsYyksYj1iLmNoaWxkKSxiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJlVoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gamkoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gZGgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9WGcoYixudWxsLGQsYyk6UihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksWmgoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBSKGEsXG5iLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO3ZhciBoPWIudHlwZS5fY29udGV4dDtJKGpnLGguX2N1cnJlbnRWYWx1ZSk7aC5fY3VycmVudFZhbHVlPWY7aWYobnVsbCE9PWcpaWYoaD1nLnZhbHVlLGY9JGUoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwLDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIUsuY3VycmVudCl7Yj0kaChhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09XG5rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPWsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD13ZyhjLG51bGwpLGwudGFnPTIseGcoaCxsKSk7aC5leHBpcmF0aW9uVGltZTxjJiYoaC5leHBpcmF0aW9uVGltZT1jKTtsPWguYWx0ZXJuYXRlO251bGwhPT1sJiZsLmV4cGlyYXRpb25UaW1lPGMmJihsLmV4cGlyYXRpb25UaW1lPWMpO3BnKGgucmV0dXJuLGMpO2suZXhwaXJhdGlvblRpbWU8YyYmKGsuZXhwaXJhdGlvblRpbWU9Yyk7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9XG5nfVIoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4scWcoYixjKSxlPXNnKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxSKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1pZyhlLGIucGVuZGluZ1Byb3BzKSxmPWlnKGUudHlwZSxmKSxhaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gY2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsTChkKT8oYT0hMCxHZihiKSk6YT0hMSxxZyhiLGMpLExnKGIsZCxlKSxOZyhiLGQsZSxjKSxnaShudWxsLFxuYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHUoMTU2LGIudGFnKSk7fTt2YXIgVWo9bnVsbCxMaT1udWxsO2Z1bmN0aW9uIFlqKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO1VqPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJSb290KGMsYSx2b2lkIDAsNjQ9PT0oYS5jdXJyZW50LmVmZmVjdFRhZyY2NCkpfWNhdGNoKGUpe319O0xpPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9Y2F0Y2goZSl7fX19Y2F0Y2goZCl7fXJldHVybiEwfVxuZnVuY3Rpb24gWmooYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBTaChhLGIsYyxkKXtyZXR1cm4gbmV3IFpqKGEsYixjLGQpfVxuZnVuY3Rpb24gYmkoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBYaihhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYmkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PWdiKXJldHVybiAxMTtpZihhPT09amIpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gU2coYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1TaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLmVmZmVjdFRhZz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtjLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWU7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntleHBpcmF0aW9uVGltZTpiLmV4cGlyYXRpb25UaW1lLFxuZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Yi5yZXNwb25kZXJzfTtjLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFVnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSliaShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBhYjpyZXR1cm4gV2coYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBmYjpnPTg7ZXw9NzticmVhaztjYXNlIGJiOmc9ODtlfD0xO2JyZWFrO2Nhc2UgY2I6cmV0dXJuIGE9U2goMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT1jYixhLnR5cGU9Y2IsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBoYjpyZXR1cm4gYT1TaCgxMyxjLGIsZSksYS50eXBlPWhiLGEuZWxlbWVudFR5cGU9aGIsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBpYjpyZXR1cm4gYT1TaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1pYixhLmV4cGlyYXRpb25UaW1lPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZGI6Zz1cbjEwO2JyZWFrIGE7Y2FzZSBlYjpnPTk7YnJlYWsgYTtjYXNlIGdiOmc9MTE7YnJlYWsgYTtjYXNlIGpiOmc9MTQ7YnJlYWsgYTtjYXNlIGtiOmc9MTY7ZD1udWxsO2JyZWFrIGE7Y2FzZSBsYjpnPTIyO2JyZWFrIGF9dGhyb3cgRXJyb3IodSgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1TaChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIFdnKGEsYixjLGQpe2E9U2goNyxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIFRnKGEsYixjKXthPVNoKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIFZnKGEsYixjKXtiPVNoKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gYWsoYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jdXJyZW50PW51bGw7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5waW5nQ2FjaGU9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt0aGlzLmZpbmlzaGVkV29yaz1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTkwO3RoaXMubGFzdEV4cGlyZWRUaW1lPXRoaXMubGFzdFBpbmdlZFRpbWU9dGhpcy5uZXh0S25vd25QZW5kaW5nTGV2ZWw9dGhpcy5sYXN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0UGVuZGluZ1RpbWU9MH1cbmZ1bmN0aW9uIEFqKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWU7YT1hLmxhc3RTdXNwZW5kZWRUaW1lO3JldHVybiAwIT09YyYmYz49YiYmYTw9Yn1mdW5jdGlvbiB4aShhLGIpe3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lLGQ9YS5sYXN0U3VzcGVuZGVkVGltZTtjPGImJihhLmZpcnN0U3VzcGVuZGVkVGltZT1iKTtpZihkPmJ8fDA9PT1jKWEubGFzdFN1c3BlbmRlZFRpbWU9YjtiPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtiPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApfVxuZnVuY3Rpb24geWkoYSxiKXtiPmEuZmlyc3RQZW5kaW5nVGltZSYmKGEuZmlyc3RQZW5kaW5nVGltZT1iKTt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTswIT09YyYmKGI+PWM/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmI+PWEubGFzdFN1c3BlbmRlZFRpbWUmJihhLmxhc3RTdXNwZW5kZWRUaW1lPWIrMSksYj5hLm5leHRLbm93blBlbmRpbmdMZXZlbCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPWIpKX1mdW5jdGlvbiBDaihhLGIpe3ZhciBjPWEubGFzdEV4cGlyZWRUaW1lO2lmKDA9PT1jfHxjPmIpYS5sYXN0RXhwaXJlZFRpbWU9Yn1cbmZ1bmN0aW9uIGJrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUdnKCksZz1EZy5zdXNwZW5zZTtmPUhnKGYsZSxnKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6e2lmKGRjKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHUoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoTChoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHUoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEwoaykpe2M9RmYoYyxrLGgpO2JyZWFrIGF9fWM9aH1lbHNlIGM9QWY7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj13ZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PVxuZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO3hnKGUsYik7SWcoZSxmKTtyZXR1cm4gZn1mdW5jdGlvbiBjayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGRrKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQmJmEucmV0cnlUaW1lPGImJihhLnJldHJ5VGltZT1iKX1mdW5jdGlvbiBlayhhLGIpe2RrKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZkayhhLGIpfVxuZnVuY3Rpb24gZmsoYSxiLGMpe2M9bnVsbCE9YyYmITA9PT1jLmh5ZHJhdGU7dmFyIGQ9bmV3IGFrKGEsYixjKSxlPVNoKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtkLmN1cnJlbnQ9ZTtlLnN0YXRlTm9kZT1kO3VnKGUpO2FbT2RdPWQuY3VycmVudDtjJiYwIT09YiYmSmMoYSw5PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudCk7dGhpcy5faW50ZXJuYWxSb290PWR9ZmsucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXtiayhhLHRoaXMuX2ludGVybmFsUm9vdCxudWxsLG51bGwpfTtmay5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdCxiPWEuY29udGFpbmVySW5mbztiayhudWxsLGEsbnVsbCxmdW5jdGlvbigpe2JbT2RdPW51bGx9KX07XG5mdW5jdGlvbiBnayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24gaGsoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBmayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIGlrKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9Y2soZyk7aC5jYWxsKGEpfX1iayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPWhrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWNrKGcpO2suY2FsbChhKX19TmooZnVuY3Rpb24oKXtiayhiLGcsYSxlKX0pfXJldHVybiBjayhnKX1mdW5jdGlvbiBqayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOiRhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxud2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9aGcoR2coKSwxNTAsMTAwKTtJZyhhLGIpO2VrKGEsYil9fTt4Yz1mdW5jdGlvbihhKXsxMz09PWEudGFnJiYoSWcoYSwzKSxlayhhLDMpKX07eWM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9R2coKTtiPUhnKGIsYSxudWxsKTtJZyhhLGIpO2VrKGEsYil9fTtcbnphPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Q2IoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPVFkKGQpO2lmKCFlKXRocm93IEVycm9yKHUoOTApKTt5YihkKTtDYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2IoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJkhiKGEsISFjLm11bHRpcGxlLGIsITEpfX07RmE9TWo7XG5HYT1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVc7V3w9NDt0cnl7cmV0dXJuIGNnKDk4LGEuYmluZChudWxsLGIsYyxkLGUpKX1maW5hbGx5e1c9ZixXPT09ViYmZ2coKX19O0hhPWZ1bmN0aW9uKCl7KFcmKDF8Zmp8Z2opKT09PVYmJihMaigpLERqKCkpfTtJYT1mdW5jdGlvbihhLGIpe3ZhciBjPVc7V3w9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fTtmdW5jdGlvbiBrayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBqayhhLGIsbnVsbCxjKX12YXIgbGs9e0V2ZW50czpbTmMsUGQsUWQseGEsdGEsWGQsZnVuY3Rpb24oYSl7amMoYSxXZCl9LERhLEVhLGlkLG1jLERqLHtjdXJyZW50OiExfV19O1xuKGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIFlqKG4oe30sYSx7b3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpXYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9aGMoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH0sZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp0YyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjE0LjBcIixcbnJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9bGs7ZXhwb3J0cy5jcmVhdGVQb3J0YWw9a2s7ZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IodSgxODgpKTt0aHJvdyBFcnJvcih1KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWhjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07XG5leHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhLGIpe2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDE4NykpO3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGNnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1c9YyxnZygpfX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gaWsobnVsbCxhLGIsITAsYyl9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gaWsobnVsbCxhLGIsITEsYyl9O1xuZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFnayhhKSl0aHJvdyBFcnJvcih1KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oTmooZnVuY3Rpb24oKXtpayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbT2RdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1NajtleHBvcnRzLnVuc3RhYmxlX2NyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3JldHVybiBrayhhLGIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGwpfTtcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIWdrKGMpKXRocm93IEVycm9yKHUoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyKXRocm93IEVycm9yKHUoMzgpKTtyZXR1cm4gaWsoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE2LjE0LjBcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTQuMFxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHA9bj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxxPW4/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixyPW4/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHQ9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx2PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHc9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx4PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHk9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsej1uP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LEE9bj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTpcbjYwMTE2LEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEMoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9XG52YXIgRD17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sRT17fTtmdW5jdGlvbiBGKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUU7dGhpcy51cGRhdGVyPWN8fER9Ri5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtGLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3IoQyg4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Ri5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07XG5mdW5jdGlvbiBHKCl7fUcucHJvdG90eXBlPUYucHJvdG90eXBlO2Z1bmN0aW9uIEgoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RTt0aGlzLnVwZGF0ZXI9Y3x8RH12YXIgST1ILnByb3RvdHlwZT1uZXcgRztJLmNvbnN0cnVjdG9yPUg7bChJLEYucHJvdG90eXBlKTtJLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBKPXtjdXJyZW50Om51bGx9LEs9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixjKXt2YXIgZSxkPXt9LGc9bnVsbCxrPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUsuY2FsbChiLGUpJiYhTC5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zm9yKHZhciBoPUFycmF5KGYpLG09MDttPGY7bSsrKWhbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1ofWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2VdJiYoZFtlXT1mW2VdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmsscHJvcHM6ZCxfb3duZXI6Si5jdXJyZW50fX1cbmZ1bmN0aW9uIE4oYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE8oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nLFE9W107ZnVuY3Rpb24gUihhLGIsYyxlKXtpZihRLmxlbmd0aCl7dmFyIGQ9US5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWM7ZC5jb250ZXh0PWU7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmMsY29udGV4dDplLGNvdW50OjB9fVxuZnVuY3Rpb24gUyhhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlEubGVuZ3RoJiZRLnB1c2goYSl9XG5mdW5jdGlvbiBUKGEsYixjLGUpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBjKGUsYSxcIlwiPT09Yj9cIi5cIitVKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBrPTA7azxhLmxlbmd0aDtrKyspe2Q9YVtrXTt2YXIgZj1iK1UoZCxrKTtnKz1UKGQsZixjLGUpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9QiYmYVtCXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxrPVxuMDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrVShkLGsrKyksZys9VChkLGYsYyxlKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1kKXRocm93IGM9XCJcIithLEVycm9yKEMoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWM/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YyxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gVihhLGIsYyl7cmV0dXJuIG51bGw9PWE/MDpUKGEsXCJcIixiLGMpfWZ1bmN0aW9uIFUoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIFcoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gYWEoYSxiLGMpe3ZhciBlPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/WChhLGUsYyxmdW5jdGlvbihhKXtyZXR1cm4gYX0pOm51bGwhPWEmJihPKGEpJiYoYT1OKGEsZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIikrYykpLGUucHVzaChhKSl9ZnVuY3Rpb24gWChhLGIsYyxlLGQpe3ZhciBnPVwiXCI7bnVsbCE9YyYmKGc9KFwiXCIrYykucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKTtiPVIoYixnLGUsZCk7VihhLGFhLGIpO1MoYil9dmFyIFk9e2N1cnJlbnQ6bnVsbH07ZnVuY3Rpb24gWigpe3ZhciBhPVkuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcihDKDMyMSkpO3JldHVybiBhfVxudmFyIGJhPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlksUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3N1c3BlbnNlOm51bGx9LFJlYWN0Q3VycmVudE93bmVyOkosSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpsfTtleHBvcnRzLkNoaWxkcmVuPXttYXA6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W107WChhLGUsbnVsbCxiLGMpO3JldHVybiBlfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO2I9UihudWxsLG51bGwsYixjKTtWKGEsVyxiKTtTKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVihhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1goYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtpZighTyhhKSl0aHJvdyBFcnJvcihDKDE0MykpO3JldHVybiBhfX07XG5leHBvcnRzLkNvbXBvbmVudD1GO2V4cG9ydHMuRnJhZ21lbnQ9cjtleHBvcnRzLlByb2ZpbGVyPXU7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUg7ZXhwb3J0cy5TdHJpY3RNb2RlPXQ7ZXhwb3J0cy5TdXNwZW5zZT15O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9YmE7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoQygyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxnPWEucmVmLGs9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihnPWIucmVmLGs9Si5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBmPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGggaW4gYilLLmNhbGwoYixoKSYmIUwuaGFzT3duUHJvcGVydHkoaCkmJihlW2hdPXZvaWQgMD09PWJbaF0mJnZvaWQgMCE9PWY/ZltoXTpiW2hdKX12YXIgaD1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWgpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxoKXtmPUFycmF5KGgpO2Zvcih2YXIgbT0wO208aDttKyspZlttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWZ9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6Zyxwcm9wczplLF9vd25lcjprfX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOngscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOkEsX2N0b3I6YSxfc3RhdHVzOi0xLF9yZXN1bHQ6bnVsbH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp6LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VDb250ZXh0KGEsYil9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBaKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gWigpLnVzZVJlZHVjZXIoYSxiLGMpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gWigpLnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gWigpLnVzZVN0YXRlKGEpfTtleHBvcnRzLnZlcnNpb249XCIxNi4xNC4wXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xOS4xXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGYsZyxoLGssbDtcbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBwPW51bGwscT1udWxsLHQ9ZnVuY3Rpb24oKXtpZihudWxsIT09cCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtwKCEwLGEpO3A9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHQsMCksYjt9fSx1PURhdGUubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKS11fTtmPWZ1bmN0aW9uKGEpe251bGwhPT1wP3NldFRpbWVvdXQoZiwwLGEpOihwPWEsc2V0VGltZW91dCh0LDApKX07Zz1mdW5jdGlvbihhLGIpe3E9c2V0VGltZW91dChhLGIpfTtoPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHEpfTtrPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2w9ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgdz13aW5kb3cucGVyZm9ybWFuY2UseD13aW5kb3cuRGF0ZSxcbnk9d2luZG93LnNldFRpbWVvdXQsej13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIEE9d2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBBJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIil9aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIHcmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB3Lm5vdylleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB3Lm5vdygpfTtlbHNle3ZhciBCPXgubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4geC5ub3coKS1CfX12YXIgQz0hMSxEPW51bGwsRT0tMSxGPTUsRz0wO2s9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49R307bD1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZXJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHVuc3VwcG9ydGVkXCIpOkY9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O3ZhciBIPW5ldyBNZXNzYWdlQ2hhbm5lbCxJPUgucG9ydDI7SC5wb3J0MS5vbm1lc3NhZ2U9XG5mdW5jdGlvbigpe2lmKG51bGwhPT1EKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0c9YStGO3RyeXtEKCEwLGEpP0kucG9zdE1lc3NhZ2UobnVsbCk6KEM9ITEsRD1udWxsKX1jYXRjaChiKXt0aHJvdyBJLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEM9ITF9O2Y9ZnVuY3Rpb24oYSl7RD1hO0N8fChDPSEwLEkucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7RT15KGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9O2g9ZnVuY3Rpb24oKXt6KEUpO0U9LTF9fWZ1bmN0aW9uIEooYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKHZvaWQgMCE9PWUmJjA8SyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gTChhKXthPWFbMF07cmV0dXJuIHZvaWQgMD09PWE/bnVsbDphfVxuZnVuY3Rpb24gTShhKXt2YXIgYj1hWzBdO2lmKHZvaWQgMCE9PWIpe3ZhciBjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlOyl7dmFyIG09MiooZCsxKS0xLG49YVttXSx2PW0rMSxyPWFbdl07aWYodm9pZCAwIT09biYmMD5LKG4sYykpdm9pZCAwIT09ciYmMD5LKHIsbik/KGFbZF09cixhW3ZdPWMsZD12KTooYVtkXT1uLGFbbV09YyxkPW0pO2Vsc2UgaWYodm9pZCAwIT09ciYmMD5LKHIsYykpYVtkXT1yLGFbdl09YyxkPXY7ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBLKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfXZhciBOPVtdLE89W10sUD0xLFE9bnVsbCxSPTMsUz0hMSxUPSExLFU9ITE7XG5mdW5jdGlvbiBWKGEpe2Zvcih2YXIgYj1MKE8pO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spTShPKTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKU0oTyksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxKKE4sYik7ZWxzZSBicmVhaztiPUwoTyl9fWZ1bmN0aW9uIFcoYSl7VT0hMTtWKGEpO2lmKCFUKWlmKG51bGwhPT1MKE4pKVQ9ITAsZihYKTtlbHNle3ZhciBiPUwoTyk7bnVsbCE9PWImJmcoVyxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBYKGEsYil7VD0hMTtVJiYoVT0hMSxoKCkpO1M9ITA7dmFyIGM9Ujt0cnl7VihiKTtmb3IoUT1MKE4pO251bGwhPT1RJiYoIShRLmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhaygpKTspe3ZhciBkPVEuY2FsbGJhY2s7aWYobnVsbCE9PWQpe1EuY2FsbGJhY2s9bnVsbDtSPVEucHJpb3JpdHlMZXZlbDt2YXIgZT1kKFEuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9RLmNhbGxiYWNrPWU6UT09PUwoTikmJk0oTik7VihiKX1lbHNlIE0oTik7UT1MKE4pfWlmKG51bGwhPT1RKXZhciBtPSEwO2Vsc2V7dmFyIG49TChPKTtudWxsIT09biYmZyhXLG4uc3RhcnRUaW1lLWIpO209ITF9cmV0dXJuIG19ZmluYWxseXtRPW51bGwsUj1jLFM9ITF9fVxuZnVuY3Rpb24gWShhKXtzd2l0Y2goYSl7Y2FzZSAxOnJldHVybi0xO2Nhc2UgMjpyZXR1cm4gMjUwO2Nhc2UgNTpyZXR1cm4gMTA3Mzc0MTgyMztjYXNlIDQ6cmV0dXJuIDFFNDtkZWZhdWx0OnJldHVybiA1RTN9fXZhciBaPWw7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1R8fFN8fChUPSEwLGYoWCkpfTtcbmV4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gUn07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBMKE4pfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFIpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVJ9dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtSPWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1aO2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UjtSPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtSPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXt2YXIgZT1jLmRlbGF5O2U9XCJudW1iZXJcIj09PXR5cGVvZiBlJiYwPGU/ZCtlOmQ7Yz1cIm51bWJlclwiPT09dHlwZW9mIGMudGltZW91dD9jLnRpbWVvdXQ6WShhKX1lbHNlIGM9WShhKSxlPWQ7Yz1lK2M7YT17aWQ6UCsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTplLGV4cGlyYXRpb25UaW1lOmMsc29ydEluZGV4Oi0xfTtlPmQ/KGEuc29ydEluZGV4PWUsSihPLGEpLG51bGw9PT1MKE4pJiZhPT09TChPKSYmKFU/aCgpOlU9ITAsZyhXLGUtZCkpKTooYS5zb3J0SW5kZXg9YyxKKE4sYSksVHx8U3x8KFQ9ITAsZihYKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO1YoYSk7dmFyIGI9TChOKTtyZXR1cm4gYiE9PVEmJm51bGwhPT1RJiZudWxsIT09YiYmbnVsbCE9PWIuY2FsbGJhY2smJmIuc3RhcnRUaW1lPD1hJiZiLmV4cGlyYXRpb25UaW1lPFEuZXhwaXJhdGlvblRpbWV8fGsoKX07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9UjtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1SO1I9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7Uj1jfX19O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHRsb2FkZWQ6IGZhbHNlLFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiBtb2R1bGVbJ2RlZmF1bHQnXSA6XG5cdFx0KCkgPT4gbW9kdWxlO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmhtZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlID0gT2JqZWN0LmNyZWF0ZShtb2R1bGUpO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsICdleHBvcnRzJywge1xuXHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0c2V0OiAoKSA9PiB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0VTIE1vZHVsZXMgbWF5IG5vdCBhc3NpZ24gbW9kdWxlLmV4cG9ydHMgb3IgZXhwb3J0cy4qLCBVc2UgRVNNIGV4cG9ydCBzeW50YXgsIGluc3RlYWQ6ICcgKyBtb2R1bGUuaWQpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBtb2R1bGU7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRobmFtZSkge1xuICByZXR1cm4gcGF0aG5hbWUuY2hhckF0KDApID09PSAnLyc7XG59XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKVxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSkge1xuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICB9XG5cbiAgbGlzdC5wb3AoKTtcbn1cblxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBoZWF2aWx5IG9uIG5vZGUncyB1cmwucGFyc2VcbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZSh0bywgZnJvbSkge1xuICBpZiAoZnJvbSA9PT0gdW5kZWZpbmVkKSBmcm9tID0gJyc7XG5cbiAgdmFyIHRvUGFydHMgPSAodG8gJiYgdG8uc3BsaXQoJy8nKSkgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSAoZnJvbSAmJiBmcm9tLnNwbGl0KCcvJykpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2g7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkgZnJvbVBhcnRzLnVuc2hpZnQoJy4uJyk7XG5cbiAgaWYgKFxuICAgIG11c3RFbmRBYnMgJiZcbiAgICBmcm9tUGFydHNbMF0gIT09ICcnICYmXG4gICAgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSlcbiAgKVxuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTtcbiIsInZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHByZWZpeCA9ICdJbnZhcmlhbnQgZmFpbGVkJztcbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCArIFwiOiBcIiArIChtZXNzYWdlIHx8ICcnKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGludmFyaWFudDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBwYXRoLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihwcmVmaXgudG9Mb3dlckNhc2UoKSkgPT09IDAgJiYgJy8/IycuaW5kZXhPZihwYXRoLmNoYXJBdChwcmVmaXgubGVuZ3RoKSkgIT09IC0xO1xufVxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcblxuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuXG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb247XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59XG5mdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJykgOiB2b2lkIDA7XG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpIDogdm9pZCAwO1xuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5cbmZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IF9wcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG52YXIgSGFzaENoYW5nZUV2ZW50JDEgPSAnaGFzaGNoYW5nZSc7XG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RyaXBIYXNoKHVybCkge1xuICB2YXIgaGFzaEluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyB1cmwgOiB1cmwuc2xpY2UoMCwgaGFzaEluZGV4KTtcbn1cblxuZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59XG5cbmZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uoc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKSArICcjJyArIHBhdGgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBfcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdm9pZCAwID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbCQkMShhLCBiKSB7XG4gICAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwkJDEocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9IC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuXG5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICB2YXIgYmFzZVRhZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcbiAgICB2YXIgaHJlZiA9ICcnO1xuXG4gICAgaWYgKGJhc2VUYWcgJiYgYmFzZVRhZy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkge1xuICAgICAgaHJlZiA9IHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhyZWYgKyAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJykgOiB2b2lkIDA7XG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJykgOiB2b2lkIDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IF9wcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB2b2lkIDAgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBfcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuXG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIHBhcnNlUGF0aCwgY3JlYXRlUGF0aCB9O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDoge307XG5cbmZ1bmN0aW9uIGdldFVuaXF1ZUlkKCkge1xuICB2YXIga2V5ID0gJ19fZ2xvYmFsX3VuaXF1ZV9pZF9fJztcbiAgcmV0dXJuIGNvbW1vbmpzR2xvYmFsW2tleV0gPSAoY29tbW9uanNHbG9iYWxba2V5XSB8fCAwKSArIDE7XG59XG5cbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArIGdldFVuaXF1ZUlkKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuZW1pdHRlciA9IGNyZWF0ZUV2ZW50RW1pdHRlcihfdGhpcy5wcm9wcy52YWx1ZSk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFByb3ZpZGVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltjb250ZXh0UHJvcF0gPSB0aGlzLmVtaXR0ZXIsIF9yZWY7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gbmV4dFByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgY2hhbmdlZEJpdHM7XG5cbiAgICAgICAgaWYgKG9iamVjdElzKG9sZFZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicgPyBjYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSwgbmV3VmFsdWUpIDogTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoKGNoYW5nZWRCaXRzICYgTUFYX1NJR05FRF8zMV9CSVRfSU5UKSA9PT0gY2hhbmdlZEJpdHMsICdjYWxjdWxhdGVDaGFuZ2VkQml0czogRXhwZWN0ZWQgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBhICcgKyAnMzEtYml0IGludGVnZXIuIEluc3RlYWQgcmVjZWl2ZWQ6ICcgKyBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZEJpdHMgfD0gMDtcblxuICAgICAgICAgIGlmIChjaGFuZ2VkQml0cyAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnNldChuZXh0UHJvcHMudmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICB2YXIgQ29uc3VtZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX3RoaXMyID0gX0NvbXBvbmVudDIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH07XG5cbiAgICAgIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuXG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8yID0gQ29uc3VtZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG52YXIgaW5kZXggPSBSZWFjdC5jcmVhdGVDb250ZXh0IHx8IGNyZWF0ZVJlYWN0Q29udGV4dDtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgY3JlYXRlUGF0aCB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBjcmVhdGVDb250ZXh0IGZyb20gJ21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gJ3BhdGgtdG8tcmVnZXhwJztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuXG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5cbnZhciBjcmVhdGVOYW1lZENvbnRleHQgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZENvbnRleHQobmFtZSkge1xuICB2YXIgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxudmFyIGhpc3RvcnlDb250ZXh0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU5hbWVkQ29udGV4dChcIlJvdXRlci1IaXN0b3J5XCIpO1xuXG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5cbnZhciBjcmVhdGVOYW1lZENvbnRleHQkMSA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkQ29udGV4dChuYW1lKSB7XG4gIHZhciBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG52YXIgY29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVOYW1lZENvbnRleHQkMShcIlJvdXRlclwiKTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cblxudmFyIFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIFJvdXRlci5jb21wdXRlUm9vdE1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZVJvb3RNYXRjaChwYXRobmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBcIi9cIixcbiAgICAgIHVybDogXCIvXCIsXG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgaXNFeGFjdDogcGF0aG5hbWUgPT09IFwiL1wiXG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBSb3V0ZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvY2F0aW9uOiBwcm9wcy5oaXN0b3J5LmxvY2F0aW9uXG4gICAgfTsgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2suIFdlIGhhdmUgdG8gc3RhcnQgbGlzdGVuaW5nIGZvciBsb2NhdGlvblxuICAgIC8vIGNoYW5nZXMgaGVyZSBpbiB0aGUgY29uc3RydWN0b3IgaW4gY2FzZSB0aGVyZSBhcmUgYW55IDxSZWRpcmVjdD5zXG4gICAgLy8gb24gdGhlIGluaXRpYWwgcmVuZGVyLiBJZiB0aGVyZSBhcmUsIHRoZXkgd2lsbCByZXBsYWNlL3B1c2ggd2hlblxuICAgIC8vIHRoZXkgbW91bnQgYW5kIHNpbmNlIGNETSBmaXJlcyBpbiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cywgd2UgbWF5XG4gICAgLy8gZ2V0IGEgbmV3IGxvY2F0aW9uIGJlZm9yZSB0aGUgPFJvdXRlcj4gaXMgbW91bnRlZC5cblxuICAgIF90aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcblxuICAgIGlmICghcHJvcHMuc3RhdGljQ29udGV4dCkge1xuICAgICAgX3RoaXMudW5saXN0ZW4gPSBwcm9wcy5oaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgaWYgKF90aGlzLl9pc01vdW50ZWQpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbG9jYXRpb247XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5fcGVuZGluZ0xvY2F0aW9uKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbG9jYXRpb246IHRoaXMuX3BlbmRpbmdMb2NhdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnVubGlzdGVuKSB0aGlzLnVubGlzdGVuKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZToge1xuICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLnN0YXRlLmxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogUm91dGVyLmNvbXB1dGVSb290TWF0Y2godGhpcy5zdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSksXG4gICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuc3RhdGljQ29udGV4dFxuICAgICAgfVxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoaGlzdG9yeUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIHx8IG51bGwsXG4gICAgICB2YWx1ZTogdGhpcy5wcm9wcy5oaXN0b3J5XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByZXZQcm9wcy5oaXN0b3J5ID09PSB0aGlzLnByb3BzLmhpc3RvcnksIFwiWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHN0b3JlcyBsb2NhdGlvbiBpbiBtZW1vcnkuXG4gKi9cblxudmFyIE1lbW9yeVJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNZW1vcnlSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbW9yeVJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlTWVtb3J5SGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1lbW9yeVJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBNZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciBMaWZlY3ljbGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGlmZWN5Y2xlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaWZlY3ljbGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExpZmVjeWNsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VudCkgdGhpcy5wcm9wcy5vbk1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVwZGF0ZSkgdGhpcy5wcm9wcy5vblVwZGF0ZS5jYWxsKHRoaXMsIHRoaXMsIHByZXZQcm9wcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Vbm1vdW50KSB0aGlzLnByb3BzLm9uVW5tb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIExpZmVjeWNsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXkgZnJvbSBhIHNjcmVlbi5cbiAqL1xuXG5mdW5jdGlvbiBQcm9tcHQoX3JlZikge1xuICB2YXIgbWVzc2FnZSA9IF9yZWYubWVzc2FnZSxcbiAgICAgIF9yZWYkd2hlbiA9IF9yZWYud2hlbixcbiAgICAgIHdoZW4gPSBfcmVmJHdoZW4gPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJHdoZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgaWYgKCF3aGVuIHx8IGNvbnRleHQuc3RhdGljQ29udGV4dCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1ldGhvZCA9IGNvbnRleHQuaGlzdG9yeS5ibG9jaztcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICBpZiAocHJldlByb3BzLm1lc3NhZ2UgIT09IG1lc3NhZ2UpIHtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblVubW91bnQ6IGZ1bmN0aW9uIG9uVW5tb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgfSxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIG1lc3NhZ2VUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zdHJpbmddKTtcbiAgUHJvbXB0LnByb3BUeXBlcyA9IHtcbiAgICB3aGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBtZXNzYWdlOiBtZXNzYWdlVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0aCkge1xuICBpZiAoY2FjaGVbcGF0aF0pIHJldHVybiBjYWNoZVtwYXRoXTtcbiAgdmFyIGdlbmVyYXRvciA9IHBhdGhUb1JlZ2V4cC5jb21waWxlKHBhdGgpO1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIGNhY2hlW3BhdGhdID0gZ2VuZXJhdG9yO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBnZW5lcmF0b3I7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIGdlbmVyYXRpbmcgYSBVUkwgcGF0aG5hbWUgZnJvbSBhIHBhdGggYW5kIHBhcmFtZXRlcnMuXG4gKi9cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgocGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXRoID0gXCIvXCI7XG4gIH1cblxuICBpZiAocGFyYW1zID09PSB2b2lkIDApIHtcbiAgICBwYXJhbXMgPSB7fTtcbiAgfVxuXG4gIHJldHVybiBwYXRoID09PSBcIi9cIiA/IHBhdGggOiBjb21waWxlUGF0aChwYXRoKShwYXJhbXMsIHtcbiAgICBwcmV0dHk6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG5hdmlnYXRpbmcgcHJvZ3JhbW1hdGljYWxseSB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbmZ1bmN0aW9uIFJlZGlyZWN0KF9yZWYpIHtcbiAgdmFyIGNvbXB1dGVkTWF0Y2ggPSBfcmVmLmNvbXB1dGVkTWF0Y2gsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBfcmVmJHB1c2ggPSBfcmVmLnB1c2gsXG4gICAgICBwdXNoID0gX3JlZiRwdXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkcHVzaDtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dC5oaXN0b3J5LFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gY29udGV4dC5zdGF0aWNDb250ZXh0O1xuICAgIHZhciBtZXRob2QgPSBwdXNoID8gaGlzdG9yeS5wdXNoIDogaGlzdG9yeS5yZXBsYWNlO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGNvbXB1dGVkTWF0Y2ggPyB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBnZW5lcmF0ZVBhdGgodG8sIGNvbXB1dGVkTWF0Y2gucGFyYW1zKSA6IF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgfSkgOiB0byk7IC8vIFdoZW4gcmVuZGVyaW5nIGluIGEgc3RhdGljIGNvbnRleHQsXG4gICAgLy8gc2V0IHRoZSBuZXcgbG9jYXRpb24gaW1tZWRpYXRlbHkuXG5cbiAgICBpZiAoc3RhdGljQ29udGV4dCkge1xuICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudCgpIHtcbiAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwcmV2UHJvcHMudG8pO1xuXG4gICAgICAgIGlmICghbG9jYXRpb25zQXJlRXF1YWwocHJldkxvY2F0aW9uLCBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICAgICAgICBrZXk6IHByZXZMb2NhdGlvbi5rZXlcbiAgICAgICAgfSkpKSB7XG4gICAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRvOiB0b1xuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSZWRpcmVjdC5wcm9wVHlwZXMgPSB7XG4gICAgcHVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlJDEgPSB7fTtcbnZhciBjYWNoZUxpbWl0JDEgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50JDEgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aCQxKHBhdGgsIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gXCJcIiArIG9wdGlvbnMuZW5kICsgb3B0aW9ucy5zdHJpY3QgKyBvcHRpb25zLnNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhDYWNoZSA9IGNhY2hlJDFbY2FjaGVLZXldIHx8IChjYWNoZSQxW2NhY2hlS2V5XSA9IHt9KTtcbiAgaWYgKHBhdGhDYWNoZVtwYXRoXSkgcmV0dXJuIHBhdGhDYWNoZVtwYXRoXTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlZ2V4cCA9IHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICByZWdleHA6IHJlZ2V4cCxcbiAgICBrZXlzOiBrZXlzXG4gIH07XG5cbiAgaWYgKGNhY2hlQ291bnQkMSA8IGNhY2hlTGltaXQkMSkge1xuICAgIHBhdGhDYWNoZVtwYXRoXSA9IHJlc3VsdDtcbiAgICBjYWNoZUNvdW50JDErKztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgVVJMIHBhdGhuYW1lIHRvIGEgcGF0aC5cbiAqL1xuXG5cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcbiAgICBvcHRpb25zID0ge1xuICAgICAgcGF0aDogb3B0aW9uc1xuICAgIH07XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGF0aCA9IF9vcHRpb25zLnBhdGgsXG4gICAgICBfb3B0aW9ucyRleGFjdCA9IF9vcHRpb25zLmV4YWN0LFxuICAgICAgZXhhY3QgPSBfb3B0aW9ucyRleGFjdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRleGFjdCxcbiAgICAgIF9vcHRpb25zJHN0cmljdCA9IF9vcHRpb25zLnN0cmljdCxcbiAgICAgIHN0cmljdCA9IF9vcHRpb25zJHN0cmljdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzdHJpY3QsXG4gICAgICBfb3B0aW9ucyRzZW5zaXRpdmUgPSBfb3B0aW9ucy5zZW5zaXRpdmUsXG4gICAgICBzZW5zaXRpdmUgPSBfb3B0aW9ucyRzZW5zaXRpdmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc2Vuc2l0aXZlO1xuICB2YXIgcGF0aHMgPSBbXS5jb25jYXQocGF0aCk7XG4gIHJldHVybiBwYXRocy5yZWR1Y2UoZnVuY3Rpb24gKG1hdGNoZWQsIHBhdGgpIHtcbiAgICBpZiAoIXBhdGggJiYgcGF0aCAhPT0gXCJcIikgcmV0dXJuIG51bGw7XG4gICAgaWYgKG1hdGNoZWQpIHJldHVybiBtYXRjaGVkO1xuXG4gICAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoJDEocGF0aCwge1xuICAgICAgZW5kOiBleGFjdCxcbiAgICAgIHN0cmljdDogc3RyaWN0LFxuICAgICAgc2Vuc2l0aXZlOiBzZW5zaXRpdmVcbiAgICB9KSxcbiAgICAgICAgcmVnZXhwID0gX2NvbXBpbGVQYXRoLnJlZ2V4cCxcbiAgICAgICAga2V5cyA9IF9jb21waWxlUGF0aC5rZXlzO1xuXG4gICAgdmFyIG1hdGNoID0gcmVnZXhwLmV4ZWMocGF0aG5hbWUpO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgIHZhciB1cmwgPSBtYXRjaFswXSxcbiAgICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG4gICAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuICAgIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAvLyB0aGUgcGF0aCB1c2VkIHRvIG1hdGNoXG4gICAgICB1cmw6IHBhdGggPT09IFwiL1wiICYmIHVybCA9PT0gXCJcIiA/IFwiL1wiIDogdXJsLFxuICAgICAgLy8gdGhlIG1hdGNoZWQgcG9ydGlvbiBvZiB0aGUgVVJMXG4gICAgICBpc0V4YWN0OiBpc0V4YWN0LFxuICAgICAgLy8gd2hldGhlciBvciBub3Qgd2UgbWF0Y2hlZCBleGFjdGx5XG4gICAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9LCB7fSlcbiAgICB9O1xuICB9LCBudWxsKTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIHBhdGgpIHtcbiAgdmFyIHZhbHVlID0gY2hpbGRyZW4ocHJvcHMpO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHZhbHVlICE9PSB1bmRlZmluZWQsIFwiWW91IHJldHVybmVkIGB1bmRlZmluZWRgIGZyb20gdGhlIGBjaGlsZHJlbmAgZnVuY3Rpb24gb2YgXCIgKyAoXCI8Um91dGVcIiArIChwYXRoID8gXCIgcGF0aD1cXFwiXCIgKyBwYXRoICsgXCJcXFwiXCIgOiBcIlwiKSArIFwiPiwgYnV0IHlvdSBcIikgKyBcInNob3VsZCBoYXZlIHJldHVybmVkIGEgUmVhY3QgZWxlbWVudCBvciBgbnVsbGBcIikgOiB2b2lkIDA7XG4gIHJldHVybiB2YWx1ZSB8fCBudWxsO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5cblxudmFyIFJvdXRlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0JDEpIHtcbiAgICAgICFjb250ZXh0JDEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQkMS5sb2NhdGlvbjtcbiAgICAgIHZhciBtYXRjaCA9IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggPyBfdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoIC8vIDxTd2l0Y2g+IGFscmVhZHkgY29tcHV0ZWQgdGhlIG1hdGNoIGZvciB1c1xuICAgICAgOiBfdGhpcy5wcm9wcy5wYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfdGhpcy5wcm9wcykgOiBjb250ZXh0JDEubWF0Y2g7XG5cbiAgICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCBjb250ZXh0JDEsIHtcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogbWF0Y2hcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgICByZW5kZXIgPSBfdGhpcyRwcm9wcy5yZW5kZXI7IC8vIFByZWFjdCB1c2VzIGFuIGVtcHR5IGFycmF5IGFzIGNoaWxkcmVuIGJ5XG4gICAgICAvLyBkZWZhdWx0LCBzbyB1c2UgbnVsbCBpZiB0aGF0J3MgdGhlIGNhc2UuXG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9wc1xuICAgICAgfSwgcHJvcHMubWF0Y2ggPyBjaGlsZHJlbiA/IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgX3RoaXMucHJvcHMucGF0aCkgOiBjaGlsZHJlbihwcm9wcykgOiBjaGlsZHJlbiA6IGNvbXBvbmVudCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykgOiByZW5kZXIgPyByZW5kZXIocHJvcHMpIDogbnVsbCA6IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgX3RoaXMucHJvcHMucGF0aCkgOiBjaGlsZHJlbihwcm9wcykgOiBudWxsKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUm91dGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGUucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudChwcm9wcywgcHJvcE5hbWUpIHtcbiAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gJiYgIWlzVmFsaWRFbGVtZW50VHlwZShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3AgJ2NvbXBvbmVudCcgc3VwcGxpZWQgdG8gJ1JvdXRlJzogdGhlIHByb3AgaXMgbm90IGEgdmFsaWQgUmVhY3QgY29tcG9uZW50XCIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHBhdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpXSksXG4gICAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2xcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJiB0aGlzLnByb3BzLmNvbXBvbmVudCksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY29tcG9uZW50PiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSByZW5kZXI+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSByZW5kZXI+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09IFwiL1wiID8gcGF0aCA6IFwiL1wiICsgcGF0aDtcbn1cblxuZnVuY3Rpb24gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpICsgbG9jYXRpb24ucGF0aG5hbWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcbiAgdmFyIGJhc2UgPSBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpO1xuICBpZiAobG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihiYXNlKSAhPT0gMCkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cihiYXNlLmxlbmd0aClcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVSTChsb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIGxvY2F0aW9uID09PSBcInN0cmluZ1wiID8gbG9jYXRpb24gOiBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbn1cblxuZnVuY3Rpb24gc3RhdGljSGFuZGxlcihtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj5cIiwgbWV0aG9kTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG4vKipcbiAqIFRoZSBwdWJsaWMgdG9wLWxldmVsIEFQSSBmb3IgYSBcInN0YXRpY1wiIDxSb3V0ZXI+LCBzby1jYWxsZWQgYmVjYXVzZSBpdFxuICogY2FuJ3QgYWN0dWFsbHkgY2hhbmdlIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBJbnN0ZWFkLCBpdCBqdXN0IHJlY29yZHNcbiAqIGxvY2F0aW9uIGNoYW5nZXMgaW4gYSBjb250ZXh0IG9iamVjdC4gVXNlZnVsIG1haW5seSBpbiB0ZXN0aW5nIGFuZFxuICogc2VydmVyLXJlbmRlcmluZyBzY2VuYXJpb3MuXG4gKi9cblxuXG52YXIgU3RhdGljUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFN0YXRpY1JvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3RhdGljUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuaGFuZGxlUHVzaCA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUFVTSFwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUmVwbGFjZSA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUkVQTEFDRVwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTGlzdGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJsb2NrID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdGF0aWNSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5uYXZpZ2F0ZVRvID0gZnVuY3Rpb24gbmF2aWdhdGVUbyhsb2NhdGlvbiwgYWN0aW9uKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMkYmFzZW5hbWUgPSBfdGhpcyRwcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wcyRjb250ZXh0ID0gX3RoaXMkcHJvcHMuY29udGV4dCxcbiAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMkY29udGV4dDtcbiAgICBjb250ZXh0LmFjdGlvbiA9IGFjdGlvbjtcbiAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzMiRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzMiRiYXNlbmFtZSxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGNvbnRleHQgPSBfdGhpcyRwcm9wczIuY29udGV4dCxcbiAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzMiRjb250ZXh0ID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzMiRjb250ZXh0LFxuICAgICAgICBfdGhpcyRwcm9wczIkbG9jYXRpb24gPSBfdGhpcyRwcm9wczIubG9jYXRpb24sXG4gICAgICAgIGxvY2F0aW9uID0gX3RoaXMkcHJvcHMyJGxvY2F0aW9uID09PSB2b2lkIDAgPyBcIi9cIiA6IF90aGlzJHByb3BzMiRsb2NhdGlvbixcbiAgICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzMiwgW1wiYmFzZW5hbWVcIiwgXCJjb250ZXh0XCIsIFwibG9jYXRpb25cIl0pO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB7XG4gICAgICBjcmVhdGVIcmVmOiBmdW5jdGlvbiBjcmVhdGVIcmVmKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSk7XG4gICAgICB9LFxuICAgICAgYWN0aW9uOiBcIlBPUFwiLFxuICAgICAgbG9jYXRpb246IHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSksXG4gICAgICBwdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICByZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBnbzogc3RhdGljSGFuZGxlcihcImdvXCIpLFxuICAgICAgZ29CYWNrOiBzdGF0aWNIYW5kbGVyKFwiZ29CYWNrXCIpLFxuICAgICAgZ29Gb3J3YXJkOiBzdGF0aWNIYW5kbGVyKFwiZ29Gb3J3YXJkXCIpLFxuICAgICAgbGlzdGVuOiB0aGlzLmhhbmRsZUxpc3RlbixcbiAgICAgIGJsb2NrOiB0aGlzLmhhbmRsZUJsb2NrXG4gICAgfTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBoaXN0b3J5OiBoaXN0b3J5LFxuICAgICAgc3RhdGljQ29udGV4dDogY29udGV4dFxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN3aXRjaC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dC5sb2NhdGlvbjtcbiAgICAgIHZhciBlbGVtZW50LCBtYXRjaDsgLy8gV2UgdXNlIFJlYWN0LkNoaWxkcmVuLmZvckVhY2ggaW5zdGVhZCBvZiBSZWFjdC5DaGlsZHJlbi50b0FycmF5KCkuZmluZCgpXG4gICAgICAvLyBoZXJlIGJlY2F1c2UgdG9BcnJheSBhZGRzIGtleXMgdG8gYWxsIGNoaWxkIGVsZW1lbnRzIGFuZCB3ZSBkbyBub3Qgd2FudFxuICAgICAgLy8gdG8gdHJpZ2dlciBhbiB1bm1vdW50L3JlbW91bnQgZm9yIHR3byA8Um91dGU+cyB0aGF0IHJlbmRlciB0aGUgc2FtZVxuICAgICAgLy8gY29tcG9uZW50IGF0IGRpZmZlcmVudCBVUkxzLlxuXG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKF90aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKG1hdGNoID09IG51bGwgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgICAgZWxlbWVudCA9IGNoaWxkO1xuICAgICAgICAgIHZhciBwYXRoID0gY2hpbGQucHJvcHMucGF0aCB8fCBjaGlsZC5wcm9wcy5mcm9tO1xuICAgICAgICAgIG1hdGNoID0gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX2V4dGVuZHMoe30sIGNoaWxkLnByb3BzLCB7XG4gICAgICAgICAgICBwYXRoOiBwYXRoXG4gICAgICAgICAgfSkpIDogY29udGV4dC5tYXRjaDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGNvbXB1dGVkTWF0Y2g6IG1hdGNoXG4gICAgICB9KSA6IG51bGw7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTd2l0Y2gucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xuXG5mdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgZGlzcGxheU5hbWUgPSBcIndpdGhSb3V0ZXIoXCIgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArIFwiKVwiO1xuXG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wid3JhcHBlZENvbXBvbmVudFJlZlwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxcIiArIGRpc3BsYXlOYW1lICsgXCIgLz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHJlbWFpbmluZ1Byb3BzLCBjb250ZXh0LCB7XG4gICAgICAgIHJlZjogd3JhcHBlZENvbXBvbmVudFJlZlxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9O1xuXG4gIEMuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgQy5XcmFwcGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBDLnByb3BUeXBlcyA9IHtcbiAgICAgIHdyYXBwZWRDb21wb25lbnRSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGhvaXN0U3RhdGljcyhDLCBDb21wb25lbnQpO1xufVxuXG52YXIgdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQ7XG5mdW5jdGlvbiB1c2VIaXN0b3J5KCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlSGlzdG9yeSgpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGhpc3RvcnlDb250ZXh0KTtcbn1cbmZ1bmN0aW9uIHVzZUxvY2F0aW9uKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlTG9jYXRpb24oKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KS5sb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIHVzZVBhcmFtcygpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVBhcmFtcygpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBtYXRjaCA9IHVzZUNvbnRleHQoY29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoLnBhcmFtcyA6IHt9O1xufVxuZnVuY3Rpb24gdXNlUm91dGVNYXRjaChwYXRoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VSb3V0ZU1hdGNoKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIHBhdGgpIDogbWF0Y2g7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgZ2xvYmFsID0gd2luZG93O1xuICAgIHZhciBrZXkgPSBcIl9fcmVhY3Rfcm91dGVyX2J1aWxkX19cIjtcbiAgICB2YXIgYnVpbGROYW1lcyA9IHtcbiAgICAgIGNqczogXCJDb21tb25KU1wiLFxuICAgICAgZXNtOiBcIkVTIG1vZHVsZXNcIixcbiAgICAgIHVtZDogXCJVTURcIlxuICAgIH07XG5cbiAgICBpZiAoZ2xvYmFsW2tleV0gJiYgZ2xvYmFsW2tleV0gIT09IFwiZXNtXCIpIHtcbiAgICAgIHZhciBpbml0aWFsQnVpbGROYW1lID0gYnVpbGROYW1lc1tnbG9iYWxba2V5XV07XG4gICAgICB2YXIgc2Vjb25kYXJ5QnVpbGROYW1lID0gYnVpbGROYW1lc1tcImVzbVwiXTsgLy8gVE9ETzogQWRkIGxpbmsgdG8gYXJ0aWNsZSB0aGF0IGV4cGxhaW5zIGluIGRldGFpbCBob3cgdG8gYXZvaWRcbiAgICAgIC8vIGxvYWRpbmcgMiBkaWZmZXJlbnQgYnVpbGRzLlxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGxvYWRpbmcgdGhlIFwiICsgc2Vjb25kYXJ5QnVpbGROYW1lICsgXCIgYnVpbGQgb2YgUmVhY3QgUm91dGVyIFwiICsgKFwib24gYSBwYWdlIHRoYXQgaXMgYWxyZWFkeSBydW5uaW5nIHRoZSBcIiArIGluaXRpYWxCdWlsZE5hbWUgKyBcIiBcIikgKyBcImJ1aWxkLCBzbyB0aGluZ3Mgd29uJ3Qgd29yayByaWdodC5cIik7XG4gICAgfVxuXG4gICAgZ2xvYmFsW2tleV0gPSBcImVzbVwiO1xuICB9XG59XG5cbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGhpc3RvcnlDb250ZXh0IGFzIF9fSGlzdG9yeUNvbnRleHQsIGNvbnRleHQgYXMgX19Sb3V0ZXJDb250ZXh0LCBnZW5lcmF0ZVBhdGgsIG1hdGNoUGF0aCwgdXNlSGlzdG9yeSwgdXNlTG9jYXRpb24sIHVzZVBhcmFtcywgdXNlUm91dGVNYXRjaCwgd2l0aFJvdXRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3Qtcm91dGVyLmpzLm1hcFxuIiwiaW1wb3J0IHsgUm91dGVyLCBfX1JvdXRlckNvbnRleHQsIG1hdGNoUGF0aCB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIFByb21wdCwgUmVkaXJlY3QsIFJvdXRlLCBSb3V0ZXIsIFN0YXRpY1JvdXRlciwgU3dpdGNoLCBnZW5lcmF0ZVBhdGgsIG1hdGNoUGF0aCwgdXNlSGlzdG9yeSwgdXNlTG9jYXRpb24sIHVzZVBhcmFtcywgdXNlUm91dGVNYXRjaCwgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgSFRNTDUgaGlzdG9yeS5cbiAqL1xuXG52YXIgQnJvd3NlclJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShCcm93c2VyUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCcm93c2VyUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVCcm93c2VySGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBCcm93c2VyUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBmb3JjZVJlZnJlc2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlclxuICB9O1xuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cblxudmFyIEhhc2hSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSGFzaFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGFzaFJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGFzaEhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBIYXNoUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gSGFzaFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBIYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbXCJoYXNoYmFuZ1wiLCBcIm5vc2xhc2hcIiwgXCJzbGFzaFwiXSlcbiAgfTtcblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciByZXNvbHZlVG9Mb2NhdGlvbiA9IGZ1bmN0aW9uIHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJmdW5jdGlvblwiID8gdG8oY3VycmVudExvY2F0aW9uKSA6IHRvO1xufTtcbnZhciBub3JtYWxpemVUb0xvY2F0aW9uID0gZnVuY3Rpb24gbm9ybWFsaXplVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBjcmVhdGVMb2NhdGlvbih0bywgbnVsbCwgbnVsbCwgY3VycmVudExvY2F0aW9uKSA6IHRvO1xufTtcblxudmFyIGZvcndhcmRSZWZTaGltID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmID0gUmVhY3QuZm9yd2FyZFJlZjtcblxuaWYgKHR5cGVvZiBmb3J3YXJkUmVmID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYgPSBmb3J3YXJkUmVmU2hpbTtcbn1cblxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cblxudmFyIExpbmtBbmNob3IgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIG5hdmlnYXRlID0gX3JlZi5uYXZpZ2F0ZSxcbiAgICAgIF9vbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImlubmVyUmVmXCIsIFwibmF2aWdhdGVcIiwgXCJvbkNsaWNrXCJdKTtcblxuICB2YXIgdGFyZ2V0ID0gcmVzdC50YXJnZXQ7XG5cbiAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoX29uQ2xpY2spIF9vbkNsaWNrKGV2ZW50KTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRocm93IGV4O1xuICAgICAgfVxuXG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmICggLy8gaWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICAgICAhdGFyZ2V0IHx8IHRhcmdldCA9PT0gXCJfc2VsZlwiKSAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgbmF2aWdhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfSk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICB9IGVsc2Uge1xuICAgIHByb3BzLnJlZiA9IGlubmVyUmVmO1xuICB9XG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnQgKi9cblxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBwcm9wcyk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBMaW5rQW5jaG9yLmRpc3BsYXlOYW1lID0gXCJMaW5rQW5jaG9yXCI7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuXG5cbnZhciBMaW5rID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZjIsIGZvcndhcmRlZFJlZikge1xuICB2YXIgX3JlZjIkY29tcG9uZW50ID0gX3JlZjIuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3JlZjIkY29tcG9uZW50ID09PSB2b2lkIDAgPyBMaW5rQW5jaG9yIDogX3JlZjIkY29tcG9uZW50LFxuICAgICAgcmVwbGFjZSA9IF9yZWYyLnJlcGxhY2UsXG4gICAgICB0byA9IF9yZWYyLnRvLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmMi5pbm5lclJlZixcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiY29tcG9uZW50XCIsIFwicmVwbGFjZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3Rvcnk7XG4gICAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbiksIGNvbnRleHQubG9jYXRpb24pO1xuICAgIHZhciBocmVmID0gbG9jYXRpb24gPyBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pIDogXCJcIjtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBocmVmLFxuICAgICAgbmF2aWdhdGU6IGZ1bmN0aW9uIG5hdmlnYXRlKCkge1xuICAgICAgICB2YXIgbG9jYXRpb24gPSByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbik7XG4gICAgICAgIHZhciBtZXRob2QgPSByZXBsYWNlID8gaGlzdG9yeS5yZXBsYWNlIDogaGlzdG9yeS5wdXNoO1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfVxuICAgIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcyk7XG4gIH0pO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIHRvVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSk7XG4gIHZhciByZWZUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogUHJvcFR5cGVzLmFueVxuICB9KV0pO1xuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG4gIExpbmsucHJvcFR5cGVzID0ge1xuICAgIGlubmVyUmVmOiByZWZUeXBlLFxuICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIHJlcGxhY2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogdG9UeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGZvcndhcmRSZWZTaGltJDEgPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYkMSA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiQxID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYkMSA9IGZvcndhcmRSZWZTaGltJDE7XG59XG5cbmZ1bmN0aW9uIGpvaW5DbGFzc25hbWVzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NuYW1lcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBjbGFzc25hbWVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGNsYXNzbmFtZXMuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIGk7XG4gIH0pLmpvaW4oXCIgXCIpO1xufVxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuXG5cbnZhciBOYXZMaW5rID0gZm9yd2FyZFJlZiQxKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYkYXJpYUN1cnJlbnQgPSBfcmVmW1wiYXJpYS1jdXJyZW50XCJdLFxuICAgICAgYXJpYUN1cnJlbnQgPSBfcmVmJGFyaWFDdXJyZW50ID09PSB2b2lkIDAgPyBcInBhZ2VcIiA6IF9yZWYkYXJpYUN1cnJlbnQsXG4gICAgICBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZiRhY3RpdmVDbGFzc05hbWUgPT09IHZvaWQgMCA/IFwiYWN0aXZlXCIgOiBfcmVmJGFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIGlzQWN0aXZlUHJvcCA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBsb2NhdGlvblByb3AgPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgc2Vuc2l0aXZlID0gX3JlZi5zZW5zaXRpdmUsXG4gICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgIHN0eWxlUHJvcCA9IF9yZWYuc3R5bGUsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYXJpYS1jdXJyZW50XCIsIFwiYWN0aXZlQ2xhc3NOYW1lXCIsIFwiYWN0aXZlU3R5bGVcIiwgXCJjbGFzc05hbWVcIiwgXCJleGFjdFwiLCBcImlzQWN0aXZlXCIsIFwibG9jYXRpb25cIiwgXCJzZW5zaXRpdmVcIiwgXCJzdHJpY3RcIiwgXCJzdHlsZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPE5hdkxpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGN1cnJlbnRMb2NhdGlvbiA9IGxvY2F0aW9uUHJvcCB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgIHZhciB0b0xvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSwgY3VycmVudExvY2F0aW9uKTtcbiAgICB2YXIgcGF0aCA9IHRvTG9jYXRpb24ucGF0aG5hbWU7IC8vIFJlZ2V4IHRha2VuIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9waWxsYXJqcy9wYXRoLXRvLXJlZ2V4cC9ibG9iL21hc3Rlci9pbmRleC5qcyNMMjAyXG5cbiAgICB2YXIgZXNjYXBlZFBhdGggPSBwYXRoICYmIHBhdGgucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csIFwiXFxcXCQxXCIpO1xuICAgIHZhciBtYXRjaCA9IGVzY2FwZWRQYXRoID8gbWF0Y2hQYXRoKGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSwge1xuICAgICAgcGF0aDogZXNjYXBlZFBhdGgsXG4gICAgICBleGFjdDogZXhhY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZSxcbiAgICAgIHN0cmljdDogc3RyaWN0XG4gICAgfSkgOiBudWxsO1xuICAgIHZhciBpc0FjdGl2ZSA9ICEhKGlzQWN0aXZlUHJvcCA/IGlzQWN0aXZlUHJvcChtYXRjaCwgY3VycmVudExvY2F0aW9uKSA6IG1hdGNoKTtcbiAgICB2YXIgY2xhc3NOYW1lID0gaXNBY3RpdmUgPyBqb2luQ2xhc3NuYW1lcyhjbGFzc05hbWVQcm9wLCBhY3RpdmVDbGFzc05hbWUpIDogY2xhc3NOYW1lUHJvcDtcbiAgICB2YXIgc3R5bGUgPSBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZVByb3AsIHt9LCBhY3RpdmVTdHlsZSkgOiBzdHlsZVByb3A7XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudCB8fCBudWxsLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0bzogdG9Mb2NhdGlvblxuICAgIH0sIHJlc3QpOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltJDEgIT09IGZvcndhcmRSZWYkMSkge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIHByb3BzKTtcbiAgfSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG4gIHZhciBhcmlhQ3VycmVudFR5cGUgPSBQcm9wVHlwZXMub25lT2YoW1wicGFnZVwiLCBcInN0ZXBcIiwgXCJsb2NhdGlvblwiLCBcImRhdGVcIiwgXCJ0aW1lXCIsIFwidHJ1ZVwiXSk7XG4gIE5hdkxpbmsucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIExpbmsucHJvcFR5cGVzLCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRUeXBlLFxuICAgIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3RcbiAgfSk7XG59XG5cbmV4cG9ydCB7IEJyb3dzZXJSb3V0ZXIsIEhhc2hSb3V0ZXIsIExpbmssIE5hdkxpbmsgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci1kb20uanMubWFwXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciBSZWFjdFJlZHV4Q29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBSZWFjdFJlZHV4Q29udGV4dC5kaXNwbGF5TmFtZSA9ICdSZWFjdFJlZHV4Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVhY3RSZWR1eENvbnRleHQ7IiwiLy8gRGVmYXVsdCB0byBhIGR1bW15IFwiYmF0Y2hcIiBpbXBsZW1lbnRhdGlvbiB0aGF0IGp1c3QgcnVucyB0aGUgY2FsbGJhY2tcbmZ1bmN0aW9uIGRlZmF1bHROb29wQmF0Y2goY2FsbGJhY2spIHtcbiAgY2FsbGJhY2soKTtcbn1cblxudmFyIGJhdGNoID0gZGVmYXVsdE5vb3BCYXRjaDsgLy8gQWxsb3cgaW5qZWN0aW5nIGFub3RoZXIgYmF0Y2hpbmcgZnVuY3Rpb24gbGF0ZXJcblxuZXhwb3J0IHZhciBzZXRCYXRjaCA9IGZ1bmN0aW9uIHNldEJhdGNoKG5ld0JhdGNoKSB7XG4gIHJldHVybiBiYXRjaCA9IG5ld0JhdGNoO1xufTsgLy8gU3VwcGx5IGEgZ2V0dGVyIGp1c3QgdG8gc2tpcCBkZWFsaW5nIHdpdGggRVNNIGJpbmRpbmdzXG5cbmV4cG9ydCB2YXIgZ2V0QmF0Y2ggPSBmdW5jdGlvbiBnZXRCYXRjaCgpIHtcbiAgcmV0dXJuIGJhdGNoO1xufTsiLCJpbXBvcnQgeyBnZXRCYXRjaCB9IGZyb20gJy4vYmF0Y2gnOyAvLyBlbmNhcHN1bGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBsb2dpYyBmb3IgY29ubmVjdGluZyBhIGNvbXBvbmVudCB0byB0aGUgcmVkdXggc3RvcmUsIGFzXG4vLyB3ZWxsIGFzIG5lc3Rpbmcgc3Vic2NyaXB0aW9ucyBvZiBkZXNjZW5kYW50IGNvbXBvbmVudHMsIHNvIHRoYXQgd2UgY2FuIGVuc3VyZSB0aGVcbi8vIGFuY2VzdG9yIGNvbXBvbmVudHMgcmUtcmVuZGVyIGJlZm9yZSBkZXNjZW5kYW50c1xuXG52YXIgbnVsbExpc3RlbmVycyA9IHtcbiAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7fVxufTtcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICB2YXIgYmF0Y2ggPSBnZXRCYXRjaCgpO1xuICB2YXIgZmlyc3QgPSBudWxsO1xuICB2YXIgbGFzdCA9IG51bGw7XG4gIHJldHVybiB7XG4gICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgZmlyc3QgPSBudWxsO1xuICAgICAgbGFzdCA9IG51bGw7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIGJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gZmlyc3Q7XG5cbiAgICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgbGlzdGVuZXIuY2FsbGJhY2soKTtcbiAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gW107XG4gICAgICB2YXIgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGlzdGVuZXJzO1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGFzdCA9IHtcbiAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICBuZXh0OiBudWxsLFxuICAgICAgICBwcmV2OiBsYXN0XG4gICAgICB9O1xuXG4gICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpcnN0ID0gbGlzdGVuZXI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQgfHwgZmlyc3QgPT09IG51bGwpIHJldHVybjtcbiAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLm5leHQpIHtcbiAgICAgICAgICBsaXN0ZW5lci5uZXh0LnByZXYgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhc3QgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLnByZXYpIHtcbiAgICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpcnN0ID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBTdWJzY3JpcHRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oc3RvcmUsIHBhcmVudFN1Yikge1xuICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLnBhcmVudFN1YiA9IHBhcmVudFN1YjtcbiAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyID0gdGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyLmJpbmQodGhpcyk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3Vic2NyaXB0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWRkTmVzdGVkU3ViID0gZnVuY3Rpb24gYWRkTmVzdGVkU3ViKGxpc3RlbmVyKSB7XG4gICAgdGhpcy50cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfTtcblxuICBfcHJvdG8ubm90aWZ5TmVzdGVkU3VicyA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMubm90aWZ5KCk7XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2VXcmFwcGVyKCkge1xuICAgIGlmICh0aGlzLm9uU3RhdGVDaGFuZ2UpIHtcbiAgICAgIHRoaXMub25TdGF0ZUNoYW5nZSgpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaXNTdWJzY3JpYmVkID0gZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMudW5zdWJzY3JpYmUpO1xuICB9O1xuXG4gIF9wcm90by50cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5wYXJlbnRTdWIgPyB0aGlzLnBhcmVudFN1Yi5hZGROZXN0ZWRTdWIodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKSA6IHRoaXMuc3RvcmUuc3Vic2NyaWJlKHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlcik7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8udHJ5VW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICB0aGlzLmxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpO1xuXG5leHBvcnQgeyBTdWJzY3JpcHRpb24gYXMgZGVmYXVsdCB9OyIsImltcG9ydCBSZWFjdCwgeyB1c2VNZW1vLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuXG5mdW5jdGlvbiBQcm92aWRlcihfcmVmKSB7XG4gIHZhciBzdG9yZSA9IF9yZWYuc3RvcmUsXG4gICAgICBjb250ZXh0ID0gX3JlZi5jb250ZXh0LFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICB2YXIgY29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oc3RvcmUpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0b3JlOiBzdG9yZSxcbiAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgfTtcbiAgfSwgW3N0b3JlXSk7XG4gIHZhciBwcmV2aW91c1N0YXRlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHN0b3JlLmdldFN0YXRlKCk7XG4gIH0sIFtzdG9yZV0pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjb250ZXh0VmFsdWUuc3Vic2NyaXB0aW9uO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcblxuICAgIGlmIChwcmV2aW91c1N0YXRlICE9PSBzdG9yZS5nZXRTdGF0ZSgpKSB7XG4gICAgICBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicygpO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gbnVsbDtcbiAgICB9O1xuICB9LCBbY29udGV4dFZhbHVlLCBwcmV2aW91c1N0YXRlXSk7XG4gIHZhciBDb250ZXh0ID0gY29udGV4dCB8fCBSZWFjdFJlZHV4Q29udGV4dDtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgfSwgY2hpbGRyZW4pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gICAgc3RvcmU6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBzdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGdldFN0YXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSksXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBQcm92aWRlcjsiLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCB9IGZyb20gJ3JlYWN0JzsgLy8gUmVhY3QgY3VycmVudGx5IHRocm93cyBhIHdhcm5pbmcgd2hlbiB1c2luZyB1c2VMYXlvdXRFZmZlY3Qgb24gdGhlIHNlcnZlci5cbi8vIFRvIGdldCBhcm91bmQgaXQsIHdlIGNhbiBjb25kaXRpb25hbGx5IHVzZUVmZmVjdCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kXG4vLyB1c2VMYXlvdXRFZmZlY3QgaW4gdGhlIGJyb3dzZXIuIFdlIG5lZWQgdXNlTGF5b3V0RWZmZWN0IHRvIGVuc3VyZSB0aGUgc3RvcmVcbi8vIHN1YnNjcmlwdGlvbiBjYWxsYmFjayBhbHdheXMgaGFzIHRoZSBzZWxlY3RvciBmcm9tIHRoZSBsYXRlc3QgcmVuZGVyIGNvbW1pdFxuLy8gYXZhaWxhYmxlLCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IGhhcHBlbiBiZXR3ZWVuIHJlbmRlciBhbmQgdGhlIGVmZmVjdCxcbi8vIHdoaWNoIG1heSBjYXVzZSBtaXNzZWQgdXBkYXRlczsgd2UgYWxzbyBtdXN0IGVuc3VyZSB0aGUgc3RvcmUgc3Vic2NyaXB0aW9uXG4vLyBpcyBjcmVhdGVkIHN5bmNocm9ub3VzbHksIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgb2NjdXIgYmVmb3JlIHRoZVxuLy8gc3Vic2NyaXB0aW9uIGlzIGNyZWF0ZWQgYW5kIGFuIGluY29uc2lzdGVudCBzdGF0ZSBtYXkgYmUgb2JzZXJ2ZWRcblxuZXhwb3J0IHZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAndW5kZWZpbmVkJyA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDsiLCJpbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciByYW5kb21TdHJpbmcgPSBmdW5jdGlvbiByYW5kb21TdHJpbmcoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbn07XG5cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogXCJAQHJlZHV4L0lOSVRcIiArIHJhbmRvbVN0cmluZygpLFxuICBSRVBMQUNFOiBcIkBAcmVkdXgvUkVQTEFDRVwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFBST0JFX1VOS05PV05fQUNUSU9OOiBmdW5jdGlvbiBQUk9CRV9VTktOT1dOX0FDVElPTigpIHtcbiAgICByZXR1cm4gXCJAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXCIgKyByYW5kb21TdHJpbmcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwcm90byA9IG9iajtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFJlZHV4IHN0b3JlIHRoYXQgaG9sZHMgdGhlIHN0YXRlIHRyZWUuXG4gKiBUaGUgb25seSB3YXkgdG8gY2hhbmdlIHRoZSBkYXRhIGluIHRoZSBzdG9yZSBpcyB0byBjYWxsIGBkaXNwYXRjaCgpYCBvbiBpdC5cbiAqXG4gKiBUaGVyZSBzaG91bGQgb25seSBiZSBhIHNpbmdsZSBzdG9yZSBpbiB5b3VyIGFwcC4gVG8gc3BlY2lmeSBob3cgZGlmZmVyZW50XG4gKiBwYXJ0cyBvZiB0aGUgc3RhdGUgdHJlZSByZXNwb25kIHRvIGFjdGlvbnMsIHlvdSBtYXkgY29tYmluZSBzZXZlcmFsIHJlZHVjZXJzXG4gKiBpbnRvIGEgc2luZ2xlIHJlZHVjZXIgZnVuY3Rpb24gYnkgdXNpbmcgYGNvbWJpbmVSZWR1Y2Vyc2AuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVkdWNlciBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbmV4dCBzdGF0ZSB0cmVlLCBnaXZlblxuICogdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGFjdGlvbiB0byBoYW5kbGUuXG4gKlxuICogQHBhcmFtIHthbnl9IFtwcmVsb2FkZWRTdGF0ZV0gVGhlIGluaXRpYWwgc3RhdGUuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBoeWRyYXRlIHRoZSBzdGF0ZSBmcm9tIHRoZSBzZXJ2ZXIgaW4gdW5pdmVyc2FsIGFwcHMsIG9yIHRvIHJlc3RvcmUgYVxuICogcHJldmlvdXNseSBzZXJpYWxpemVkIHVzZXIgc2Vzc2lvbi5cbiAqIElmIHlvdSB1c2UgYGNvbWJpbmVSZWR1Y2Vyc2AgdG8gcHJvZHVjZSB0aGUgcm9vdCByZWR1Y2VyIGZ1bmN0aW9uLCB0aGlzIG11c3QgYmVcbiAqIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlIGFzIGBjb21iaW5lUmVkdWNlcnNgIGtleXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2VuaGFuY2VyXSBUaGUgc3RvcmUgZW5oYW5jZXIuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBlbmhhbmNlIHRoZSBzdG9yZSB3aXRoIHRoaXJkLXBhcnR5IGNhcGFiaWxpdGllcyBzdWNoIGFzIG1pZGRsZXdhcmUsXG4gKiB0aW1lIHRyYXZlbCwgcGVyc2lzdGVuY2UsIGV0Yy4gVGhlIG9ubHkgc3RvcmUgZW5oYW5jZXIgdGhhdCBzaGlwcyB3aXRoIFJlZHV4XG4gKiBpcyBgYXBwbHlNaWRkbGV3YXJlKClgLlxuICpcbiAqIEByZXR1cm5zIHtTdG9yZX0gQSBSZWR1eCBzdG9yZSB0aGF0IGxldHMgeW91IHJlYWQgdGhlIHN0YXRlLCBkaXNwYXRjaCBhY3Rpb25zXG4gKiBhbmQgc3Vic2NyaWJlIHRvIGNoYW5nZXMuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHZhciBfcmVmMjtcblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGFyZ3VtZW50c1szXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignSXQgbG9va3MgbGlrZSB5b3UgYXJlIHBhc3Npbmcgc2V2ZXJhbCBzdG9yZSBlbmhhbmNlcnMgdG8gJyArICdjcmVhdGVTdG9yZSgpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQsIGNvbXBvc2UgdGhlbSAnICsgJ3RvZ2V0aGVyIHRvIGEgc2luZ2xlIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgZW5oYW5jZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIHJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciBjdXJyZW50UmVkdWNlciA9IHJlZHVjZXI7XG4gIHZhciBjdXJyZW50U3RhdGUgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgdmFyIGN1cnJlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzO1xuICB2YXIgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAvKipcbiAgICogVGhpcyBtYWtlcyBhIHNoYWxsb3cgY29weSBvZiBjdXJyZW50TGlzdGVuZXJzIHNvIHdlIGNhbiB1c2VcbiAgICogbmV4dExpc3RlbmVycyBhcyBhIHRlbXBvcmFyeSBsaXN0IHdoaWxlIGRpc3BhdGNoaW5nLlxuICAgKlxuICAgKiBUaGlzIHByZXZlbnRzIGFueSBidWdzIGFyb3VuZCBjb25zdW1lcnMgY2FsbGluZ1xuICAgKiBzdWJzY3JpYmUvdW5zdWJzY3JpYmUgaW4gdGhlIG1pZGRsZSBvZiBhIGRpc3BhdGNoLlxuICAgKi9cblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVhZHMgdGhlIHN0YXRlIHRyZWUgbWFuYWdlZCBieSB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHthbnl9IFRoZSBjdXJyZW50IHN0YXRlIHRyZWUgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHtcbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1RoZSByZWR1Y2VyIGhhcyBhbHJlYWR5IHJlY2VpdmVkIHRoZSBzdGF0ZSBhcyBhbiBhcmd1bWVudC4gJyArICdQYXNzIGl0IGRvd24gZnJvbSB0aGUgdG9wIHJlZHVjZXIgaW5zdGVhZCBvZiByZWFkaW5nIGl0IGZyb20gdGhlIHN0b3JlLicpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGN1cnJlbnRMaXN0ZW5lcnMgPSBudWxsO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyOyAvLyBUaGlzIGFjdGlvbiBoYXMgYSBzaW1pbGlhciBlZmZlY3QgdG8gQWN0aW9uVHlwZXMuSU5JVC5cbiAgICAvLyBBbnkgcmVkdWNlcnMgdGhhdCBleGlzdGVkIGluIGJvdGggdGhlIG5ldyBhbmQgb2xkIHJvb3RSZWR1Y2VyXG4gICAgLy8gd2lsbCByZWNlaXZlIHRoZSBwcmV2aW91cyBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgICAvLyB0aGUgbmV3IHN0YXRlIHRyZWUgd2l0aCBhbnkgcmVsZXZhbnQgZGF0YSBmcm9tIHRoZSBvbGQgb25lLlxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIG9ic2VydmVyIHRvIGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9IC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuXG5cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgfSk7XG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiBcImFjdGlvbiBcXFwiXCIgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyBcIlxcXCJcIiB8fCAnYW4gYWN0aW9uJztcbiAgcmV0dXJuIFwiR2l2ZW4gXCIgKyBhY3Rpb25EZXNjcmlwdGlvbiArIFwiLCByZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQuIFwiICsgXCJUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuIFwiICsgXCJJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIjtcbn1cblxuZnVuY3Rpb24gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShpbnB1dFN0YXRlLCByZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgYXJndW1lbnROYW1lID0gYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5JTklUID8gJ3ByZWxvYWRlZFN0YXRlIGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTdG9yZScgOiAncHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXInO1xuXG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCAnICsgJ3RvIGNvbWJpbmVSZWR1Y2VycyBpcyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSByZWR1Y2Vycy4nO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KGlucHV0U3RhdGUpKSB7XG4gICAgcmV0dXJuIFwiVGhlIFwiICsgYXJndW1lbnROYW1lICsgXCIgaGFzIHVuZXhwZWN0ZWQgdHlwZSBvZiBcXFwiXCIgKyB7fS50b1N0cmluZy5jYWxsKGlucHV0U3RhdGUpLm1hdGNoKC9cXHMoW2EtenxBLVpdKykvKVsxXSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIFwiICsgXCJJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgXCIgKyBcImV4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgXCIgKyBcIm5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIFwiICsgXCJ5b3UgY2FuIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5QUk9CRV9VTktOT1dOX0FDVElPTigpXG4gICAgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiBcIiArIChcIkRvbid0IHRyeSB0byBoYW5kbGUgXCIgKyBBY3Rpb25UeXBlcy5JTklUICsgXCIgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIG5leHRTdGF0ZVtfa2V5XSA9IG5leHRTdGF0ZUZvcktleTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICB9XG5cbiAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoc3RhdGUpLmxlbmd0aDtcbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhbiBhY3Rpb24gY3JlYXRvciBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZGlzcGF0Y2ggd3JhcHBlZCBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGluc3RlYWQgcmVjZWl2ZWQgXCIgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMpICsgXCIuIFwiICsgXCJEaWQgeW91IHdyaXRlIFxcXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCIgaW5zdGVhZCBvZiBcXFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCI/XCIpO1xuICB9XG5cbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gYWN0aW9uQ3JlYXRvcnMpIHtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpKTtcbiAgfVxuXG4gIGlmIChlbnVtZXJhYmxlT25seSkga2V5cyA9IGtleXMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgfSk7XG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHZvaWQgMCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkMih7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKCdZb3UgYXJlIGN1cnJlbnRseSB1c2luZyBtaW5pZmllZCBjb2RlIG91dHNpZGUgb2YgTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiLiAnICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3Igc2V0dGluZyBtb2RlIHRvIHByb2R1Y3Rpb24gaW4gd2VicGFjayAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25jZXB0cy9tb2RlLykgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzLCBhcHBseU1pZGRsZXdhcmUsIGJpbmRBY3Rpb25DcmVhdG9ycywgY29tYmluZVJlZHVjZXJzLCBjb21wb3NlLCBjcmVhdGVTdG9yZSB9O1xuIiwiaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0Jztcbi8qKlxyXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSB2YWx1ZSBvZiB0aGUgYFJlYWN0UmVkdXhDb250ZXh0YC4gVGhpcyBpcyBhIGxvdy1sZXZlbFxyXG4gKiBob29rIHRoYXQgeW91IHNob3VsZCB1c3VhbGx5IG5vdCBuZWVkIHRvIGNhbGwgZGlyZWN0bHkuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl9IHRoZSB2YWx1ZSBvZiB0aGUgYFJlYWN0UmVkdXhDb250ZXh0YFxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICh7IHZhbHVlIH0pID0+IHtcclxuICogICBjb25zdCB7IHN0b3JlIH0gPSB1c2VSZWR1eENvbnRleHQoKVxyXG4gKiAgIHJldHVybiA8ZGl2PntzdG9yZS5nZXRTdGF0ZSgpfTwvZGl2PlxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlUmVkdXhDb250ZXh0KCkge1xuICB2YXIgY29udGV4dFZhbHVlID0gdXNlQ29udGV4dChSZWFjdFJlZHV4Q29udGV4dCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbnRleHRWYWx1ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IGZpbmQgcmVhY3QtcmVkdXggY29udGV4dCB2YWx1ZTsgcGxlYXNlIGVuc3VyZSB0aGUgY29tcG9uZW50IGlzIHdyYXBwZWQgaW4gYSA8UHJvdmlkZXI+Jyk7XG4gIH1cblxuICByZXR1cm4gY29udGV4dFZhbHVlO1xufSIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgYXMgdXNlRGVmYXVsdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vdXNlUmVkdXhDb250ZXh0Jztcbi8qKlxyXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlU3RvcmVgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTdG9yZWAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RvcmVIb29rKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dDtcbiAgfVxuXG4gIHZhciB1c2VSZWR1eENvbnRleHQgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRSZWR1eENvbnRleHQgOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCk7XG4gIH07XG4gIHJldHVybiBmdW5jdGlvbiB1c2VTdG9yZSgpIHtcbiAgICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmU7XG5cbiAgICByZXR1cm4gc3RvcmU7XG4gIH07XG59XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggc3RvcmUuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl9IHRoZSByZWR1eCBzdG9yZVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZVN0b3JlIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBFeGFtcGxlQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gKiAgIGNvbnN0IHN0b3JlID0gdXNlU3RvcmUoKVxyXG4gKiAgIHJldHVybiA8ZGl2PntzdG9yZS5nZXRTdGF0ZSgpfTwvZGl2PlxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgdmFyIHVzZVN0b3JlID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZVN0b3JlSG9vaygpOyIsImltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCB7IHVzZVN0b3JlIGFzIHVzZURlZmF1bHRTdG9yZSwgY3JlYXRlU3RvcmVIb29rIH0gZnJvbSAnLi91c2VTdG9yZSc7XG4vKipcclxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZURpc3BhdGNoYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlRGlzcGF0Y2hgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURpc3BhdGNoSG9vayhjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQ7XG4gIH1cblxuICB2YXIgdXNlU3RvcmUgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRTdG9yZSA6IGNyZWF0ZVN0b3JlSG9vayhjb250ZXh0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZURpc3BhdGNoKCkge1xuICAgIHZhciBzdG9yZSA9IHVzZVN0b3JlKCk7XG4gICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IGBkaXNwYXRjaGAgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl8ZnVuY3Rpb259IHJlZHV4IHN0b3JlJ3MgYGRpc3BhdGNoYCBmdW5jdGlvblxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcclxuICogaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoeyB2YWx1ZSB9KSA9PiB7XHJcbiAqICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXHJcbiAqICAgY29uc3QgaW5jcmVhc2VDb3VudGVyID0gdXNlQ2FsbGJhY2soKCkgPT4gZGlzcGF0Y2goeyB0eXBlOiAnaW5jcmVhc2UtY291bnRlcicgfSksIFtdKVxyXG4gKiAgIHJldHVybiAoXHJcbiAqICAgICA8ZGl2PlxyXG4gKiAgICAgICA8c3Bhbj57dmFsdWV9PC9zcGFuPlxyXG4gKiAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2luY3JlYXNlQ291bnRlcn0+SW5jcmVhc2UgY291bnRlcjwvYnV0dG9uPlxyXG4gKiAgICAgPC9kaXY+XHJcbiAqICAgKVxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgdmFyIHVzZURpc3BhdGNoID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZURpc3BhdGNoSG9vaygpOyIsImltcG9ydCB7IHVzZVJlZHVjZXIsIHVzZVJlZiwgdXNlTWVtbywgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCBhcyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuXG52YXIgcmVmRXF1YWxpdHkgPSBmdW5jdGlvbiByZWZFcXVhbGl0eShhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufTtcblxuZnVuY3Rpb24gdXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24oc2VsZWN0b3IsIGVxdWFsaXR5Rm4sIHN0b3JlLCBjb250ZXh0U3ViKSB7XG4gIHZhciBfdXNlUmVkdWNlciA9IHVzZVJlZHVjZXIoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gcyArIDE7XG4gIH0sIDApLFxuICAgICAgZm9yY2VSZW5kZXIgPSBfdXNlUmVkdWNlclsxXTtcblxuICB2YXIgc3Vic2NyaXB0aW9uID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24oc3RvcmUsIGNvbnRleHRTdWIpO1xuICB9LCBbc3RvcmUsIGNvbnRleHRTdWJdKTtcbiAgdmFyIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFNlbGVjdG9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RlZFN0YXRlID0gdXNlUmVmKCk7XG4gIHZhciBzZWxlY3RlZFN0YXRlO1xuXG4gIHRyeSB7XG4gICAgaWYgKHNlbGVjdG9yICE9PSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50IHx8IGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgc2VsZWN0ZWRTdGF0ZSA9IHNlbGVjdG9yKHN0b3JlLmdldFN0YXRlKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50O1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgZXJyLm1lc3NhZ2UgKz0gXCJcXG5UaGUgZXJyb3IgbWF5IGJlIGNvcnJlbGF0ZWQgd2l0aCB0aGlzIHByZXZpb3VzIGVycm9yOlxcblwiICsgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50LnN0YWNrICsgXCJcXG5cXG5cIjtcbiAgICB9XG5cbiAgICB0aHJvdyBlcnI7XG4gIH1cblxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBsYXRlc3RTZWxlY3Rvci5jdXJyZW50ID0gc2VsZWN0b3I7XG4gICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gc2VsZWN0ZWRTdGF0ZTtcbiAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gIH0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBjaGVja0ZvclVwZGF0ZXMoKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbmV3U2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQoc3RvcmUuZ2V0U3RhdGUoKSk7XG5cbiAgICAgICAgaWYgKGVxdWFsaXR5Rm4obmV3U2VsZWN0ZWRTdGF0ZSwgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IG5ld1NlbGVjdGVkU3RhdGU7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gd2UgaWdub3JlIGFsbCBlcnJvcnMgaGVyZSwgc2luY2Ugd2hlbiB0aGUgY29tcG9uZW50XG4gICAgICAgIC8vIGlzIHJlLXJlbmRlcmVkLCB0aGUgc2VsZWN0b3JzIGFyZSBjYWxsZWQgYWdhaW4sIGFuZFxuICAgICAgICAvLyB3aWxsIHRocm93IGFnYWluLCBpZiBuZWl0aGVyIHByb3BzIG5vciBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyBjaGFuZ2VkXG4gICAgICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IGVycjtcbiAgICAgIH1cblxuICAgICAgZm9yY2VSZW5kZXIoe30pO1xuICAgIH1cblxuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICBjaGVja0ZvclVwZGF0ZXMoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sIFtzdG9yZSwgc3Vic2NyaXB0aW9uXSk7XG4gIHJldHVybiBzZWxlY3RlZFN0YXRlO1xufVxuLyoqXHJcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cclxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9ySG9vayhjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQ7XG4gIH1cblxuICB2YXIgdXNlUmVkdXhDb250ZXh0ID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU2VsZWN0b3Ioc2VsZWN0b3IsIGVxdWFsaXR5Rm4pIHtcbiAgICBpZiAoZXF1YWxpdHlGbiA9PT0gdm9pZCAwKSB7XG4gICAgICBlcXVhbGl0eUZuID0gcmVmRXF1YWxpdHk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXNlbGVjdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JzXCIpO1xuICAgIH1cblxuICAgIHZhciBfdXNlUmVkdXhDb250ZXh0ID0gdXNlUmVkdXhDb250ZXh0KCksXG4gICAgICAgIHN0b3JlID0gX3VzZVJlZHV4Q29udGV4dC5zdG9yZSxcbiAgICAgICAgY29udGV4dFN1YiA9IF91c2VSZWR1eENvbnRleHQuc3Vic2NyaXB0aW9uO1xuXG4gICAgcmV0dXJuIHVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uKHNlbGVjdG9yLCBlcXVhbGl0eUZuLCBzdG9yZSwgY29udGV4dFN1Yik7XG4gIH07XG59XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggc3RvcmUncyBzdGF0ZS4gVGhpcyBob29rIHRha2VzIGEgc2VsZWN0b3IgZnVuY3Rpb25cclxuICogYXMgYW4gYXJndW1lbnQuIFRoZSBzZWxlY3RvciBpcyBjYWxsZWQgd2l0aCB0aGUgc3RvcmUgc3RhdGUuXHJcbiAqXHJcbiAqIFRoaXMgaG9vayB0YWtlcyBhbiBvcHRpb25hbCBlcXVhbGl0eSBjb21wYXJpc29uIGZ1bmN0aW9uIGFzIHRoZSBzZWNvbmQgcGFyYW1ldGVyXHJcbiAqIHRoYXQgYWxsb3dzIHlvdSB0byBjdXN0b21pemUgdGhlIHdheSB0aGUgc2VsZWN0ZWQgc3RhdGUgaXMgY29tcGFyZWQgdG8gZGV0ZXJtaW5lXHJcbiAqIHdoZXRoZXIgdGhlIGNvbXBvbmVudCBuZWVkcyB0byBiZSByZS1yZW5kZXJlZC5cclxuICpcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2VsZWN0b3IgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb249fSBlcXVhbGl0eUZuIHRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgdXNlZCB0byBkZXRlcm1pbmUgZXF1YWxpdHlcclxuICpcclxuICogQHJldHVybnMge2FueX0gdGhlIHNlbGVjdGVkIHN0YXRlXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuICogaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoKSA9PiB7XHJcbiAqICAgY29uc3QgY291bnRlciA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLmNvdW50ZXIpXHJcbiAqICAgcmV0dXJuIDxkaXY+e2NvdW50ZXJ9PC9kaXY+XHJcbiAqIH1cclxuICovXG5cbmV4cG9ydCB2YXIgdXNlU2VsZWN0b3IgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlU2VsZWN0b3JIb29rKCk7IiwiZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaCxcbiAgICAgICAgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmFBcmd1bWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTtcbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuXG5leHBvcnQgZGVmYXVsdCB0aHVuazsiLCJpbXBvcnQgUHJvdmlkZXIgZnJvbSAnLi9jb21wb25lbnRzL1Byb3ZpZGVyJztcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCBjb25uZWN0IGZyb20gJy4vY29ubmVjdC9jb25uZWN0JztcbmltcG9ydCB7IHVzZURpc3BhdGNoLCBjcmVhdGVEaXNwYXRjaEhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZURpc3BhdGNoJztcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCBjcmVhdGVTZWxlY3Rvckhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVNlbGVjdG9yJztcbmltcG9ydCB7IHVzZVN0b3JlLCBjcmVhdGVTdG9yZUhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVN0b3JlJztcbmltcG9ydCB7IHNldEJhdGNoIH0gZnJvbSAnLi91dGlscy9iYXRjaCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyBhcyBiYXRjaCB9IGZyb20gJy4vdXRpbHMvcmVhY3RCYXRjaGVkVXBkYXRlcyc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbnNldEJhdGNoKGJhdGNoKTtcbmV4cG9ydCB7IFByb3ZpZGVyLCBjb25uZWN0QWR2YW5jZWQsIFJlYWN0UmVkdXhDb250ZXh0LCBjb25uZWN0LCBiYXRjaCwgdXNlRGlzcGF0Y2gsIGNyZWF0ZURpc3BhdGNoSG9vaywgdXNlU2VsZWN0b3IsIGNyZWF0ZVNlbGVjdG9ySG9vaywgdXNlU3RvcmUsIGNyZWF0ZVN0b3JlSG9vaywgc2hhbGxvd0VxdWFsIH07IiwidmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxyXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59O1xyXG52YXIgX19zcHJlYWRBcnJheXMgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXlzKSB8fCBmdW5jdGlvbiAoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufTtcclxudmFyIGluaXRTdGF0ZSA9IFtcclxuICAgIHsgaWQ6IDEsIG5hbWU6IFwiQXdhaXNcIiwgcGhvbmVObzogXCIwMzM0NTYwOThcIiB9LFxyXG4gICAgeyBpZDogMiwgbmFtZTogXCJBaG1lZFwiLCBwaG9uZU5vOiBcIjAzMzQ1NjA5OFwiIH0sXHJcbiAgICB7IGlkOiAzLCBuYW1lOiBcIlNhYWRcIiwgcGhvbmVObzogXCIwMzM0NTYwOThcIiB9LFxyXG4gICAgeyBpZDogNCwgbmFtZTogXCJIYWFkXCIsIHBob25lTm86IFwiMDMzNDU2MDk4XCIgfSxcclxuICAgIHsgaWQ6IDUsIG5hbWU6IFwiWmFpZFwiLCBwaG9uZU5vOiBcIjAzMzQ1NjA5OFwiIH0sXHJcbiAgICB7IGlkOiA2LCBuYW1lOiBcIkFzaGlyXCIsIHBob25lTm86IFwiMDMzNDU2MDk4XCIgfSxcclxuICAgIHsgaWQ6IDcsIG5hbWU6IFwiRnVycWFuXCIsIHBob25lTm86IFwiMDMzNDU2MDk4XCIgfSxcclxuXTtcclxuZXhwb3J0IGZ1bmN0aW9uIHBlb3BsZVJlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xyXG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHsgc3RhdGUgPSBpbml0U3RhdGU7IH1cclxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgICAgICBjYXNlIFwiQWRkVmVoaWNsZVwiOlxyXG4gICAgICAgICAgICB2YXIgbmV3aWQgPSBzdGF0ZS5sZW5ndGggKyAxO1xyXG4gICAgICAgICAgICByZXR1cm4gX19zcHJlYWRBcnJheXMoc3RhdGUsIFtcclxuICAgICAgICAgICAgICAgIF9fYXNzaWduKF9fYXNzaWduKHt9LCBhY3Rpb24ucGF5bG9hZCksIHsgaWQ6IG5ld2lkIH0pXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIC8vLmNvbmNhdCh7IGlkOiBzdGF0ZS5sZW5ndGggKyAxLCBuYW1lOiBhY3Rpb24ucGF5bG9hZCB9KTtcclxuICAgICAgICBjYXNlIFwiUmVtb3ZlVmVoaWNsZVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGUuZmlsdGVyKGZ1bmN0aW9uICh2ZWhpY2xlKSB7IHJldHVybiB2ZWhpY2xlLmlkICE9PSBhY3Rpb24ucGF5bG9hZDsgfSk7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgbmV2ZXJSZWFjaGVkKGFjdGlvbik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RhdGU7XHJcbn1cclxuZnVuY3Rpb24gbmV2ZXJSZWFjaGVkKG5ldmVyKSB7IH1cclxuIiwidmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxyXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59O1xyXG52YXIgX19zcHJlYWRBcnJheXMgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXlzKSB8fCBmdW5jdGlvbiAoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufTtcclxudmFyIGluaXRTdGF0ZSA9IHtcclxuICAgIGxpc3Q6IFtcclxuICAgICAgICB7IGlkOiAxLCBuYW1lOiBcIkF3YWlzXCIsIHBob25lTm86IFwiMDMzNDU2MDk4XCIsIGFkZHJlc3M6IFwiV2hhdHNBcHAgSW5jLiAxNjAxIFdpbGxvdyBSb2FkIE1lbmxvIFBhcmssIENhbGlmb3JuaWEgOTQwMjUuIFVuaXRlZCBTdGF0ZXMgb2YgQW1lcmljYS4gV2hhdHNBcHAgSW5jXCIgfSxcclxuICAgICAgICB7IGlkOiAyLCBuYW1lOiBcIkFobWVkXCIsIHBob25lTm86IFwiMDMzNDU2MDk4XCIsIGFkZHJlc3M6IFwiV2hhdHNBcHAgSW5jLiAxNjAxIFdpbGxvdyBSb2FkIE1lbmxvIFBhcmssIENhbGlmb3JuaWEgOTQwMjUuIFVuaXRlZCBTdGF0ZXMgb2YgQW1lcmljYS4gV2hhdHNBcHAgSW5jXCIgfSxcclxuICAgICAgICB7IGlkOiAzLCBuYW1lOiBcIlNhYWRcIiwgcGhvbmVObzogXCIwMzM0NTYwOThcIiwgYWRkcmVzczogXCJXaGF0c0FwcCBJbmMuIDE2MDEgV2lsbG93IFJvYWQgTWVubG8gUGFyaywgQ2FsaWZvcm5pYSA5NDAyNS4gVW5pdGVkIFN0YXRlcyBvZiBBbWVyaWNhLiBXaGF0c0FwcCBJbmNcIiB9LFxyXG4gICAgICAgIHsgaWQ6IDQsIG5hbWU6IFwiSGFhZFwiLCBwaG9uZU5vOiBcIjAzMzQ1NjA5OFwiLCBhZGRyZXNzOiBcIldoYXRzQXBwIEluYy4gMTYwMSBXaWxsb3cgUm9hZCBNZW5sbyBQYXJrLCBDYWxpZm9ybmlhIDk0MDI1LiBVbml0ZWQgU3RhdGVzIG9mIEFtZXJpY2EuIFdoYXRzQXBwIEluY1wiIH0sXHJcbiAgICAgICAgeyBpZDogNSwgbmFtZTogXCJaYWlkXCIsIHBob25lTm86IFwiMDMzNDU2MDk4XCIsIGFkZHJlc3M6IFwiV2hhdHNBcHAgSW5jLiAxNjAxIFdpbGxvdyBSb2FkIE1lbmxvIFBhcmssIENhbGlmb3JuaWEgOTQwMjUuIFVuaXRlZCBTdGF0ZXMgb2YgQW1lcmljYS4gV2hhdHNBcHAgSW5jXCIgfSxcclxuICAgICAgICB7IGlkOiA2LCBuYW1lOiBcIkFzaGlyXCIsIHBob25lTm86IFwiMDMzNDU2MDk4XCIsIGFkZHJlc3M6IFwiV2hhdHNBcHAgSW5jLiAxNjAxIFdpbGxvdyBSb2FkIE1lbmxvIFBhcmssIENhbGlmb3JuaWEgOTQwMjUuIFVuaXRlZCBTdGF0ZXMgb2YgQW1lcmljYS4gV2hhdHNBcHAgSW5jXCIgfSxcclxuICAgICAgICB7IGlkOiA3LCBuYW1lOiBcIkZ1cnFhblwiLCBwaG9uZU5vOiBcIjAzMzQ1NjA5OFwiLCBhZGRyZXNzOiBcIldoYXRzQXBwIEluYy4gMTYwMSBXaWxsb3cgUm9hZCBNZW5sbyBQYXJrLCBDYWxpZm9ybmlhIDk0MDI1LiBVbml0ZWQgU3RhdGVzIG9mIEFtZXJpY2EuIFdoYXRzQXBwIEluY1wiIH0sXHJcbiAgICBdLFxyXG4gICAgc2VhcmNoOiAnJ1xyXG59O1xyXG5leHBvcnQgZnVuY3Rpb24gY2xpZW50Vmlld1JlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xyXG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHsgc3RhdGUgPSBpbml0U3RhdGU7IH1cclxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgICAgICBjYXNlIFwiU2VhcmNoQ2xpZW50XCI6XHJcbiAgICAgICAgICAgIHZhciBzZWFyY2hfMSA9IGFjdGlvbi5wYXlsb2FkLnNlYXJjaDtcclxuICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBzdGF0ZSksIHsgbGlzdDogaW5pdFN0YXRlLmxpc3QuZmlsdGVyKGZ1bmN0aW9uIChpKSB7IHJldHVybiBpLm5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKHNlYXJjaF8xKSA+IC0xOyB9KSB9KTtcclxuICAgICAgICBjYXNlIFwiQWRkQ2xpZW50XCI6XHJcbiAgICAgICAgICAgIHZhciBuZXdpZCA9IHN0YXRlLmxpc3QubGVuZ3RoICsgMTtcclxuICAgICAgICAgICAgYWN0aW9uLnBheWxvYWQuaWQgPSBuZXdpZDtcclxuICAgICAgICAgICAgc3RhdGUubGlzdC5wdXNoKGFjdGlvbi5wYXlsb2FkKTtcclxuICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBzdGF0ZSksIHsgbGlzdDogX19zcHJlYWRBcnJheXMoc3RhdGUubGlzdCkgfSk7XHJcbiAgICAgICAgY2FzZSBcIlJlbW92ZUNsaWVudFwiOlxyXG4gICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHN0YXRlKSwgeyBsaXN0OiBzdGF0ZS5saXN0LmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5pZCAhPT0gYWN0aW9uLnBheWxvYWQ7IH0pIH0pO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgLy9uZXZlclJlYWNoZWQoYWN0aW9uKTtcclxuICAgIH1cclxuICAgIHJldHVybiBzdGF0ZTtcclxufVxyXG4vL2Z1bmN0aW9uIG5ldmVyUmVhY2hlZChuZXZlcjogbmV2ZXIpIHt9XHJcbiIsImltcG9ydCB7IGNyZWF0ZVN0b3JlLCBhcHBseU1pZGRsZXdhcmUsIH0gZnJvbSBcInJlZHV4XCI7XHJcbmltcG9ydCB0aHVuayBmcm9tIFwicmVkdXgtdGh1bmtcIjtcclxuaW1wb3J0IHsgcm9vdFJlZHVjZXIgfSBmcm9tICcuL3Jvb3RyZWR1Y2VyJztcclxuZnVuY3Rpb24gY29uZmlndXJlU3RvcmUoKSB7XHJcbiAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZShyb290UmVkdWNlciwgdW5kZWZpbmVkLCBhcHBseU1pZGRsZXdhcmUodGh1bmspKTtcclxuICAgIHJldHVybiBzdG9yZTtcclxufVxyXG5leHBvcnQgdmFyIHN0b3JlID0gY29uZmlndXJlU3RvcmUoKTtcclxuLy8gZXhwb3J0IGRlZmF1bHQgc3RvcmU7XHJcbiIsImltcG9ydCB7IGNvbWJpbmVSZWR1Y2VycyB9IGZyb20gXCJyZWR1eFwiO1xyXG5pbXBvcnQgeyBwZW9wbGVSZWR1Y2VyIH0gZnJvbSAnLi92ZWhpY2xlL3ZlaGljbGVSZWR1Y2VyJztcclxuaW1wb3J0IHsgY2xpZW50Vmlld1JlZHVjZXIgfSBmcm9tICcuL2NsaWVudC9jbGllbnRWaWV3UmVkdWNlcic7XHJcbmV4cG9ydCB2YXIgcm9vdFJlZHVjZXIgPSBjb21iaW5lUmVkdWNlcnMoe1xyXG4gICAgdmVoaWNsZTogcGVvcGxlUmVkdWNlcixcclxuICAgIGNsaWVudFZpZXc6IGNsaWVudFZpZXdSZWR1Y2VyXHJcbn0pO1xyXG4iLCIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jcmVhdGVCaW5kaW5nKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTtcclxuICAgIHJlc3VsdC5kZWZhdWx0ID0gbW9kO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwKSB7XHJcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gZ2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByaXZhdGVNYXAuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHByaXZhdGVNYXAsIHZhbHVlKSB7XHJcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gc2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZU1hcC5zZXQocmVjZWl2ZXIsIHZhbHVlKTtcclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxyXG4iLCJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuZXhwb3J0IHZhciBJbmplY3Rpb25Nb2RlID0ge1xuICAgIC8qKlxuICAgICAqIEF2b2lkcyBzdHlsZSBpbmplY3Rpb24sIHVzZSBnZXRSdWxlcygpIHRvIHJlYWQgdGhlIHN0eWxlcy5cbiAgICAgKi9cbiAgICBub25lOiAwLFxuICAgIC8qKlxuICAgICAqIEluc2VydHMgcnVsZXMgdXNpbmcgdGhlIGluc2VydFJ1bGUgYXBpLlxuICAgICAqL1xuICAgIGluc2VydE5vZGU6IDEsXG4gICAgLyoqXG4gICAgICogQXBwZW5kcyBydWxlcyB1c2luZyBhcHBlbmRDaGlsZC5cbiAgICAgKi9cbiAgICBhcHBlbmRDaGlsZDogMixcbn07XG52YXIgU1RZTEVTSEVFVF9TRVRUSU5HID0gJ19fc3R5bGVzaGVldF9fJztcbi8qKlxuICogTVNJRSAxMSBkb2Vzbid0IGNhc2NhZGUgc3R5bGVzIGJhc2VkIG9uIERPTSBvcmRlcmluZywgYnV0IHJhdGhlciBvbiB0aGUgb3JkZXIgdGhhdCBlYWNoIHN0eWxlIG5vZGVcbiAqIGlzIGNyZWF0ZWQuIEFzIHN1Y2gsIHRvIG1haW50YWluIGNvbnNpc3RlbnQgcHJpb3JpdHksIElFMTEgc2hvdWxkIHJldXNlIGEgc2luZ2xlIHN0eWxlIG5vZGUuXG4gKi9cbnZhciBSRVVTRV9TVFlMRV9OT0RFID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL3J2OjExLjAvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG52YXIgX2dsb2JhbCA9IHt9O1xuLy8gR3JhYiB3aW5kb3cuXG50cnkge1xuICAgIF9nbG9iYWwgPSB3aW5kb3c7XG59XG5jYXRjaCAoX2EpIHtcbiAgICAvKiBsZWF2ZSBhcyBibGFuayBvYmplY3QgKi9cbn1cbnZhciBfc3R5bGVzaGVldDtcbi8qKlxuICogUmVwcmVzZW50cyB0aGUgc3RhdGUgb2Ygc3R5bGVzIHJlZ2lzdGVyZWQgaW4gdGhlIHBhZ2UuIEFic3RyYWN0c1xuICogdGhlIHN1cmZhY2UgZm9yIGFkZGluZyBzdHlsZXMgdG8gdGhlIHN0eWxlc2hlZXQsIGV4cG9zZXMgaGVscGVyc1xuICogZm9yIHJlYWRpbmcgdGhlIHN0eWxlcyByZWdpc3RlcmVkIGluIHNlcnZlciByZW5kZXJlZCBzY2VuYXJpb3MuXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgU3R5bGVzaGVldCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdHlsZXNoZWV0KGNvbmZpZykge1xuICAgICAgICB0aGlzLl9ydWxlcyA9IFtdO1xuICAgICAgICB0aGlzLl9wcmVzZXJ2ZWRSdWxlcyA9IFtdO1xuICAgICAgICB0aGlzLl9ydWxlc1RvSW5zZXJ0ID0gW107XG4gICAgICAgIHRoaXMuX2NvdW50ZXIgPSAwO1xuICAgICAgICB0aGlzLl9rZXlUb0NsYXNzTmFtZSA9IHt9O1xuICAgICAgICB0aGlzLl9vblJlc2V0Q2FsbGJhY2tzID0gW107XG4gICAgICAgIHRoaXMuX2NsYXNzTmFtZVRvQXJncyA9IHt9O1xuICAgICAgICB0aGlzLl9jb25maWcgPSBfX2Fzc2lnbih7IGluamVjdGlvbk1vZGU6IEluamVjdGlvbk1vZGUuaW5zZXJ0Tm9kZSwgZGVmYXVsdFByZWZpeDogJ2NzcycsIG5hbWVzcGFjZTogdW5kZWZpbmVkLCBjc3BTZXR0aW5nczogdW5kZWZpbmVkIH0sIGNvbmZpZyk7XG4gICAgICAgIHRoaXMuX2tleVRvQ2xhc3NOYW1lID0gdGhpcy5fY29uZmlnLmNsYXNzTmFtZUNhY2hlIHx8IHt9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzaW5nbGV0b24gaW5zdGFuY2UuXG4gICAgICovXG4gICAgU3R5bGVzaGVldC5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBfc3R5bGVzaGVldCA9IF9nbG9iYWxbU1RZTEVTSEVFVF9TRVRUSU5HXTtcbiAgICAgICAgaWYgKCFfc3R5bGVzaGVldCB8fCAoX3N0eWxlc2hlZXQuX2xhc3RTdHlsZUVsZW1lbnQgJiYgX3N0eWxlc2hlZXQuX2xhc3RTdHlsZUVsZW1lbnQub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQpKSB7XG4gICAgICAgICAgICB2YXIgZmFicmljQ29uZmlnID0gKChfYSA9IF9nbG9iYWwpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5GYWJyaWNDb25maWcpIHx8IHt9O1xuICAgICAgICAgICAgX3N0eWxlc2hlZXQgPSBfZ2xvYmFsW1NUWUxFU0hFRVRfU0VUVElOR10gPSBuZXcgU3R5bGVzaGVldChmYWJyaWNDb25maWcubWVyZ2VTdHlsZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfc3R5bGVzaGVldDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyZXMgdGhlIHN0eWxlc2hlZXQuXG4gICAgICovXG4gICAgU3R5bGVzaGVldC5wcm90b3R5cGUuc2V0Q29uZmlnID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICB0aGlzLl9jb25maWcgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5fY29uZmlnKSwgY29uZmlnKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyZXMgYSByZXNldCBjYWxsYmFjay5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIEEgY2FsbGJhY2sgd2hpY2ggd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgU3R5bGVzaGVldCBpcyByZXNldC5cbiAgICAgKi9cbiAgICBTdHlsZXNoZWV0LnByb3RvdHlwZS5vblJlc2V0ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX29uUmVzZXRDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSB1bmlxdWUgY2xhc3NuYW1lLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRpc3BsYXlOYW1lIC0gT3B0aW9uYWwgdmFsdWUgdG8gdXNlIGFzIGEgcHJlZml4LlxuICAgICAqL1xuICAgIFN0eWxlc2hlZXQucHJvdG90eXBlLmdldENsYXNzTmFtZSA9IGZ1bmN0aW9uIChkaXNwbGF5TmFtZSkge1xuICAgICAgICB2YXIgbmFtZXNwYWNlID0gdGhpcy5fY29uZmlnLm5hbWVzcGFjZTtcbiAgICAgICAgdmFyIHByZWZpeCA9IGRpc3BsYXlOYW1lIHx8IHRoaXMuX2NvbmZpZy5kZWZhdWx0UHJlZml4O1xuICAgICAgICByZXR1cm4gXCJcIiArIChuYW1lc3BhY2UgPyBuYW1lc3BhY2UgKyAnLScgOiAnJykgKyBwcmVmaXggKyBcIi1cIiArIHRoaXMuX2NvdW50ZXIrKztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVzZWQgaW50ZXJuYWxseSB0byBjYWNoZSBpbmZvcm1hdGlvbiBhYm91dCBhIGNsYXNzIHdoaWNoIHdhc1xuICAgICAqIHJlZ2lzdGVyZWQgd2l0aCB0aGUgc3R5bGVzaGVldC5cbiAgICAgKi9cbiAgICBTdHlsZXNoZWV0LnByb3RvdHlwZS5jYWNoZUNsYXNzTmFtZSA9IGZ1bmN0aW9uIChjbGFzc05hbWUsIGtleSwgYXJncywgcnVsZXMpIHtcbiAgICAgICAgdGhpcy5fa2V5VG9DbGFzc05hbWVba2V5XSA9IGNsYXNzTmFtZTtcbiAgICAgICAgdGhpcy5fY2xhc3NOYW1lVG9BcmdzW2NsYXNzTmFtZV0gPSB7XG4gICAgICAgICAgICBhcmdzOiBhcmdzLFxuICAgICAgICAgICAgcnVsZXM6IHJ1bGVzLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXBwcm9wcmlhdGUgY2xhc3NuYW1lIGdpdmVuIGEga2V5IHdoaWNoIHdhcyBwcmV2aW91c2x5XG4gICAgICogcmVnaXN0ZXJlZCB1c2luZyBjYWNoZUNsYXNzTmFtZS5cbiAgICAgKi9cbiAgICBTdHlsZXNoZWV0LnByb3RvdHlwZS5jbGFzc05hbWVGcm9tS2V5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fa2V5VG9DbGFzc05hbWVba2V5XTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGNsYXNzbmFtZXMgY2FjaGUgd2l0aCB0aGUgc3R5bGVzaGVldC5cbiAgICAgKi9cbiAgICBTdHlsZXNoZWV0LnByb3RvdHlwZS5nZXRDbGFzc05hbWVDYWNoZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2tleVRvQ2xhc3NOYW1lO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXJndW1lbnRzIGFzc29jaWF0ZWQgd2l0aCBhIGdpdmVuIGNsYXNzbmFtZSB3aGljaCB3YXNcbiAgICAgKiBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgdXNpbmcgY2FjaGVDbGFzc05hbWUuXG4gICAgICovXG4gICAgU3R5bGVzaGVldC5wcm90b3R5cGUuYXJnc0Zyb21DbGFzc05hbWUgPSBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMuX2NsYXNzTmFtZVRvQXJnc1tjbGFzc05hbWVdO1xuICAgICAgICByZXR1cm4gZW50cnkgJiYgZW50cnkuYXJncztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFyZ3VtZW50cyBhc3NvY2lhdGVkIHdpdGggYSBnaXZlbiBjbGFzc25hbWUgd2hpY2ggd2FzXG4gICAgICogcHJldmlvdXNseSByZWdpc3RlcmVkIHVzaW5nIGNhY2hlQ2xhc3NOYW1lLlxuICAgICAqL1xuICAgIFN0eWxlc2hlZXQucHJvdG90eXBlLmluc2VydGVkUnVsZXNGcm9tQ2xhc3NOYW1lID0gZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLl9jbGFzc05hbWVUb0FyZ3NbY2xhc3NOYW1lXTtcbiAgICAgICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnJ1bGVzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSW5zZXJ0cyBhIGNzcyBydWxlIGludG8gdGhlIHN0eWxlc2hlZXQuXG4gICAgICogQHBhcmFtIHByZXNlcnZlIC0gUHJlc2VydmVzIHRoZSBydWxlIGJleW9uZCBhIHJlc2V0IGJvdW5kYXJ5LlxuICAgICAqL1xuICAgIFN0eWxlc2hlZXQucHJvdG90eXBlLmluc2VydFJ1bGUgPSBmdW5jdGlvbiAocnVsZSwgcHJlc2VydmUpIHtcbiAgICAgICAgdmFyIGluamVjdGlvbk1vZGUgPSB0aGlzLl9jb25maWcuaW5qZWN0aW9uTW9kZTtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBpbmplY3Rpb25Nb2RlICE9PSBJbmplY3Rpb25Nb2RlLm5vbmUgPyB0aGlzLl9nZXRTdHlsZUVsZW1lbnQoKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHByZXNlcnZlKSB7XG4gICAgICAgICAgICB0aGlzLl9wcmVzZXJ2ZWRSdWxlcy5wdXNoKHJ1bGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuX2NvbmZpZy5pbmplY3Rpb25Nb2RlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBJbmplY3Rpb25Nb2RlLmluc2VydE5vZGU6XG4gICAgICAgICAgICAgICAgICAgIHZhciBzaGVldCA9IGVsZW1lbnQuc2hlZXQ7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaGVldC5pbnNlcnRSdWxlKHJ1bGUsIHNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBicm93c2VyIHdpbGwgdGhyb3cgZXhjZXB0aW9ucyBvbiB1bnN1cHBvcnRlZCBydWxlcyAoc3VjaCBhcyBhIG1veiBwcmVmaXggaW4gd2Via2l0LilcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gc3dhbGxvdyB0aGUgZXhjZXB0aW9ucyBmb3IgdGhpcyBzY2VuYXJpbywgb3RoZXJ3aXNlIHdlJ2QgbmVlZCB0byBmaWx0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdoaWNoIGNvdWxkIGJlIHNsb3dlciBhbmQgYnVsa2llci5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEluamVjdGlvbk1vZGUuYXBwZW5kQ2hpbGQ6XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocnVsZSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3J1bGVzLnB1c2gocnVsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5vbkluc2VydFJ1bGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbmZpZy5vbkluc2VydFJ1bGUocnVsZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIHJ1bGVzIHJlZ2lzdGVyZWQgd2l0aCB0aGUgc3R5bGVzaGVldDsgb25seSB2YWxpZCB3aGVuXG4gICAgICogdXNpbmcgSW5zZXJ0aW9uTW9kZS5ub25lLlxuICAgICAqL1xuICAgIFN0eWxlc2hlZXQucHJvdG90eXBlLmdldFJ1bGVzID0gZnVuY3Rpb24gKGluY2x1ZGVQcmVzZXJ2ZWRSdWxlcykge1xuICAgICAgICByZXR1cm4gKChpbmNsdWRlUHJlc2VydmVkUnVsZXMgPyB0aGlzLl9wcmVzZXJ2ZWRSdWxlcy5qb2luKCcnKSA6ICcnKSArIHRoaXMuX3J1bGVzLmpvaW4oJycpICsgdGhpcy5fcnVsZXNUb0luc2VydC5qb2luKCcnKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIGludGVybmFsIHN0YXRlIG9mIHRoZSBzdHlsZXNoZWV0LiBPbmx5IHVzZWQgaW4gc2VydmVyXG4gICAgICogcmVuZGVyZWQgc2NlbmFyaW9zIHdoZXJlIHdlJ3JlIHVzaW5nIEluc2VydGlvbk1vZGUubm9uZS5cbiAgICAgKi9cbiAgICBTdHlsZXNoZWV0LnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcnVsZXMgPSBbXTtcbiAgICAgICAgdGhpcy5fcnVsZXNUb0luc2VydCA9IFtdO1xuICAgICAgICB0aGlzLl9jb3VudGVyID0gMDtcbiAgICAgICAgdGhpcy5fY2xhc3NOYW1lVG9BcmdzID0ge307XG4gICAgICAgIHRoaXMuX2tleVRvQ2xhc3NOYW1lID0ge307XG4gICAgICAgIHRoaXMuX29uUmVzZXRDYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHsgcmV0dXJuIGNhbGxiYWNrKCk7IH0pO1xuICAgIH07XG4gICAgLy8gRm9yY2VzIHRoZSByZWdlbmVyYXRpb24gb2YgaW5jb21pbmcgc3R5bGVzIHdpdGhvdXQgdG90YWxseSByZXNldHRpbmcgdGhlIHN0eWxlc2hlZXQuXG4gICAgU3R5bGVzaGVldC5wcm90b3R5cGUucmVzZXRLZXlzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9rZXlUb0NsYXNzTmFtZSA9IHt9O1xuICAgIH07XG4gICAgU3R5bGVzaGVldC5wcm90b3R5cGUuX2dldFN0eWxlRWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLl9zdHlsZUVsZW1lbnQgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5fc3R5bGVFbGVtZW50ID0gdGhpcy5fY3JlYXRlU3R5bGVFbGVtZW50KCk7XG4gICAgICAgICAgICBpZiAoIVJFVVNFX1NUWUxFX05PREUpIHtcbiAgICAgICAgICAgICAgICAvLyBSZXNldCB0aGUgc3R5bGUgZWxlbWVudCBvbiB0aGUgbmV4dCBmcmFtZS5cbiAgICAgICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3N0eWxlRWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fc3R5bGVFbGVtZW50O1xuICAgIH07XG4gICAgU3R5bGVzaGVldC5wcm90b3R5cGUuX2NyZWF0ZVN0eWxlRWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGhlYWQgPSBkb2N1bWVudC5oZWFkO1xuICAgICAgICB2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1tZXJnZS1zdHlsZXMnLCAndHJ1ZScpO1xuICAgICAgICB2YXIgY3NwU2V0dGluZ3MgPSB0aGlzLl9jb25maWcuY3NwU2V0dGluZ3M7XG4gICAgICAgIGlmIChjc3BTZXR0aW5ncykge1xuICAgICAgICAgICAgaWYgKGNzcFNldHRpbmdzLm5vbmNlKSB7XG4gICAgICAgICAgICAgICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBjc3BTZXR0aW5ncy5ub25jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2xhc3RTdHlsZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBgbmV4dEVsZW1lbnRTaWJsaW5nYCBpcyBudWxsLCB0aGVuIHRoZSBpbnNlcnRCZWZvcmUgd2lsbCBhY3QgYXMgYSByZWd1bGFyIGFwcGVuZC5cbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Ob2RlL2luc2VydEJlZm9yZSNTeW50YXhcbiAgICAgICAgICAgIGhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlRWxlbWVudCwgdGhpcy5fbGFzdFN0eWxlRWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIHBsYWNlaG9sZGVyU3R5bGVUYWcgPSB0aGlzLl9maW5kUGxhY2Vob2xkZXJTdHlsZVRhZygpO1xuICAgICAgICAgICAgaWYgKHBsYWNlaG9sZGVyU3R5bGVUYWcpIHtcbiAgICAgICAgICAgICAgICBoZWFkLmluc2VydEJlZm9yZShzdHlsZUVsZW1lbnQsIHBsYWNlaG9sZGVyU3R5bGVUYWcubmV4dEVsZW1lbnRTaWJsaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlRWxlbWVudCwgaGVhZC5jaGlsZE5vZGVzWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9sYXN0U3R5bGVFbGVtZW50ID0gc3R5bGVFbGVtZW50O1xuICAgICAgICByZXR1cm4gc3R5bGVFbGVtZW50O1xuICAgIH07XG4gICAgU3R5bGVzaGVldC5wcm90b3R5cGUuX2ZpbmRQbGFjZWhvbGRlclN0eWxlVGFnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmhlYWQ7XG4gICAgICAgIGlmIChoZWFkKSB7XG4gICAgICAgICAgICByZXR1cm4gaGVhZC5xdWVyeVNlbGVjdG9yKCdzdHlsZVtkYXRhLW1lcmdlLXN0eWxlc10nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiBTdHlsZXNoZWV0O1xufSgpKTtcbmV4cG9ydCB7IFN0eWxlc2hlZXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0eWxlc2hlZXQuanMubWFwIiwiLyoqXG4gKiBTZXRzIHRoZSBjdXJyZW50IFJUTCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFJUTChpc1JUTCkge1xuICAgIGlmIChfcnRsICE9PSBpc1JUTCkge1xuICAgICAgICBfcnRsID0gaXNSVEw7XG4gICAgfVxufVxuLyoqXG4gKiBHZXRzIHRoZSBjdXJyZW50IFJUTCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJUTCgpIHtcbiAgICBpZiAoX3J0bCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIF9ydGwgPVxuICAgICAgICAgICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICEhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGlyJykgPT09ICdydGwnO1xuICAgIH1cbiAgICByZXR1cm4gX3J0bDtcbn1cbi8vIFRoaXMgaGFzIGJlZW4gc3BsaXQgaW50byAyIGxpbmVzIGJlY2F1c2UgaXQgd2FzIHdvcmtpbmcgaW4gRmFicmljIGR1ZSB0byB0aGUgY29kZSBiZWluZyB0cmFuc3BpbGVkIHRvIGVzNSwgc28gdGhpc1xuLy8gd2FzIGNvbnZlcnRlZCB0byB2YXIgd2hpbGUgbm90IHdvcmtpbmcgaW4gRmx1ZW50IHRoYXQgdXNlcyBiYWJlbCB0byB0cmFuc3BpbGUgdGhlIGNvZGUgdG8gYmUgZXM2LWxpa2UuIFNwbGl0dGluZyB0aGVcbi8vIGxvZ2ljIGludG8gdHdvIGxpbmVzLCBob3dldmVyLCBhbGxvd3MgaXQgdG8gd29yayBpbiBib3RoIHNjZW5hcmlvcy5cbnZhciBfcnRsO1xuX3J0bCA9IGdldFJUTCgpO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN0eWxlT3B0aW9ucygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBydGw6IGdldFJUTCgpLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdHlsZU9wdGlvbnNTdGF0ZS5qcy5tYXAiLCJpbXBvcnQgeyBTdHlsZXNoZWV0IH0gZnJvbSAnLi9TdHlsZXNoZWV0Jztcbi8qKlxuICogU2VwYXJhdGVzIHRoZSBjbGFzc2VzIGFuZCBzdHlsZSBvYmplY3RzLiBBbnkgY2xhc3NlcyB0aGF0IGFyZSBwcmUtcmVnaXN0ZXJlZFxuICogYXJncyBhcmUgYXV0byBleHBhbmRlZCBpbnRvIG9iamVjdHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0U3R5bGVQYXJ0cygpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIGNsYXNzZXMgPSBbXTtcbiAgICB2YXIgb2JqZWN0cyA9IFtdO1xuICAgIHZhciBzdHlsZXNoZWV0ID0gU3R5bGVzaGVldC5nZXRJbnN0YW5jZSgpO1xuICAgIGZ1bmN0aW9uIF9wcm9jZXNzQXJncyhhcmdzTGlzdCkge1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGFyZ3NMaXN0XzEgPSBhcmdzTGlzdDsgX2kgPCBhcmdzTGlzdF8xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGFyZyA9IGFyZ3NMaXN0XzFbX2ldO1xuICAgICAgICAgICAgaWYgKGFyZykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXJnLmluZGV4T2YoJyAnKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfcHJvY2Vzc0FyZ3MoYXJnLnNwbGl0KCcgJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZWRBcmdzID0gc3R5bGVzaGVldC5hcmdzRnJvbUNsYXNzTmFtZShhcmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zbGF0ZWRBcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3Byb2Nlc3NBcmdzKHRyYW5zbGF0ZWRBcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEF2b2lkIGFkZGluZyB0aGUgc2FtZSBjbGFzcyB0d2ljZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2xhc3Nlcy5pbmRleE9mKGFyZykgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMucHVzaChhcmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgICAgICAgICAgICAgX3Byb2Nlc3NBcmdzKGFyZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhcmcgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdHMucHVzaChhcmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfcHJvY2Vzc0FyZ3MoYXJncyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2xhc3NlczogY2xhc3NlcyxcbiAgICAgICAgb2JqZWN0czogb2JqZWN0cyxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXh0cmFjdFN0eWxlUGFydHMuanMubWFwIiwidmFyIHJ1bGVzID0ge307XG5leHBvcnQgZnVuY3Rpb24ga2ViYWJSdWxlcyhydWxlUGFpcnMsIGluZGV4KSB7XG4gICAgdmFyIHJ1bGUgPSBydWxlUGFpcnNbaW5kZXhdO1xuICAgIGlmIChydWxlLmNoYXJBdCgwKSAhPT0gJy0nKSB7XG4gICAgICAgIHJ1bGVQYWlyc1tpbmRleF0gPSBydWxlc1tydWxlXSA9IHJ1bGVzW3J1bGVdIHx8IHJ1bGUucmVwbGFjZSgvKFtBLVpdKS9nLCAnLSQxJykudG9Mb3dlckNhc2UoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZWJhYlJ1bGVzLmpzLm1hcCIsInZhciBfdmVuZG9yU2V0dGluZ3M7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VmVuZG9yU2V0dGluZ3MoKSB7XG4gICAgaWYgKCFfdmVuZG9yU2V0dGluZ3MpIHtcbiAgICAgICAgdmFyIGRvYyA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIG5hdiA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnID8gbmF2aWdhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgICB2YXIgdXNlckFnZW50ID0gbmF2ID8gbmF2LnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpIDogdW5kZWZpbmVkO1xuICAgICAgICBpZiAoIWRvYykge1xuICAgICAgICAgICAgX3ZlbmRvclNldHRpbmdzID0ge1xuICAgICAgICAgICAgICAgIGlzV2Via2l0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGlzTW96OiB0cnVlLFxuICAgICAgICAgICAgICAgIGlzT3BlcmE6IHRydWUsXG4gICAgICAgICAgICAgICAgaXNNczogdHJ1ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfdmVuZG9yU2V0dGluZ3MgPSB7XG4gICAgICAgICAgICAgICAgaXNXZWJraXQ6ICEhKGRvYyAmJiAnV2Via2l0QXBwZWFyYW5jZScgaW4gZG9jLmRvY3VtZW50RWxlbWVudC5zdHlsZSksXG4gICAgICAgICAgICAgICAgaXNNb3o6ICEhKHVzZXJBZ2VudCAmJiB1c2VyQWdlbnQuaW5kZXhPZignZmlyZWZveCcpID4gLTEpLFxuICAgICAgICAgICAgICAgIGlzT3BlcmE6ICEhKHVzZXJBZ2VudCAmJiB1c2VyQWdlbnQuaW5kZXhPZignb3BlcmEnKSA+IC0xKSxcbiAgICAgICAgICAgICAgICBpc01zOiAhIShuYXYgJiYgKC9ydjoxMS4wL2kudGVzdChuYXYudXNlckFnZW50KSB8fCAvRWRnZVxcL1xcZC4vaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBfdmVuZG9yU2V0dGluZ3M7XG59XG4vKipcbiAqIFNldHMgdGhlIHZlbmRvciBzZXR0aW5ncyBmb3IgcHJlZml4aW5nIGFuZCB2ZW5kb3Igc3BlY2lmaWMgb3BlcmF0aW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFZlbmRvclNldHRpbmdzKHZlbmRvclNldHRpbmdzKSB7XG4gICAgX3ZlbmRvclNldHRpbmdzID0gdmVuZG9yU2V0dGluZ3M7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRWZW5kb3JTZXR0aW5ncy5qcy5tYXAiLCJpbXBvcnQgeyBnZXRWZW5kb3JTZXR0aW5ncyB9IGZyb20gJy4uL2dldFZlbmRvclNldHRpbmdzJztcbnZhciBhdXRvUHJlZml4TmFtZXMgPSB7XG4gICAgJ3VzZXItc2VsZWN0JzogMSxcbn07XG5leHBvcnQgZnVuY3Rpb24gcHJlZml4UnVsZXMocnVsZVBhaXJzLCBpbmRleCkge1xuICAgIHZhciB2ZW5kb3JTZXR0aW5ncyA9IGdldFZlbmRvclNldHRpbmdzKCk7XG4gICAgdmFyIG5hbWUgPSBydWxlUGFpcnNbaW5kZXhdO1xuICAgIGlmIChhdXRvUHJlZml4TmFtZXNbbmFtZV0pIHtcbiAgICAgICAgdmFyIHZhbHVlID0gcnVsZVBhaXJzW2luZGV4ICsgMV07XG4gICAgICAgIGlmIChhdXRvUHJlZml4TmFtZXNbbmFtZV0pIHtcbiAgICAgICAgICAgIGlmICh2ZW5kb3JTZXR0aW5ncy5pc1dlYmtpdCkge1xuICAgICAgICAgICAgICAgIHJ1bGVQYWlycy5wdXNoKCctd2Via2l0LScgKyBuYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmVuZG9yU2V0dGluZ3MuaXNNb3opIHtcbiAgICAgICAgICAgICAgICBydWxlUGFpcnMucHVzaCgnLW1vei0nICsgbmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZlbmRvclNldHRpbmdzLmlzTXMpIHtcbiAgICAgICAgICAgICAgICBydWxlUGFpcnMucHVzaCgnLW1zLScgKyBuYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmVuZG9yU2V0dGluZ3MuaXNPcGVyYSkge1xuICAgICAgICAgICAgICAgIHJ1bGVQYWlycy5wdXNoKCctby0nICsgbmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJlZml4UnVsZXMuanMubWFwIiwidmFyIE5PTl9QSVhFTF9OVU1CRVJfUFJPUFMgPSBbXG4gICAgJ2NvbHVtbi1jb3VudCcsXG4gICAgJ2ZvbnQtd2VpZ2h0JyxcbiAgICAnZmxleCcsXG4gICAgJ2ZsZXgtZ3JvdycsXG4gICAgJ2ZsZXgtc2hyaW5rJyxcbiAgICAnZmlsbC1vcGFjaXR5JyxcbiAgICAnb3BhY2l0eScsXG4gICAgJ29yZGVyJyxcbiAgICAnei1pbmRleCcsXG4gICAgJ3pvb20nLFxuXTtcbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlVW5pdHMocnVsZVBhaXJzLCBpbmRleCkge1xuICAgIHZhciBuYW1lID0gcnVsZVBhaXJzW2luZGV4XTtcbiAgICB2YXIgdmFsdWUgPSBydWxlUGFpcnNbaW5kZXggKyAxXTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICB2YXIgaXNOb25QaXhlbFByb3AgPSBOT05fUElYRUxfTlVNQkVSX1BST1BTLmluZGV4T2YobmFtZSkgPiAtMTtcbiAgICAgICAgdmFyIGlzVmFyaWFibGVPclByZWZpeGVkID0gbmFtZS5pbmRleE9mKCctLScpID4gLTE7XG4gICAgICAgIHZhciB1bml0ID0gaXNOb25QaXhlbFByb3AgfHwgaXNWYXJpYWJsZU9yUHJlZml4ZWQgPyAnJyA6ICdweCc7XG4gICAgICAgIHJ1bGVQYWlyc1tpbmRleCArIDFdID0gXCJcIiArIHZhbHVlICsgdW5pdDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm92aWRlVW5pdHMuanMubWFwIiwidmFyIF9hO1xudmFyIExFRlQgPSAnbGVmdCc7XG52YXIgUklHSFQgPSAncmlnaHQnO1xudmFyIE5PX0ZMSVAgPSAnQG5vZmxpcCc7XG52YXIgTkFNRV9SRVBMQUNFTUVOVFMgPSAoX2EgPSB7fSxcbiAgICBfYVtMRUZUXSA9IFJJR0hULFxuICAgIF9hW1JJR0hUXSA9IExFRlQsXG4gICAgX2EpO1xudmFyIFZBTFVFX1JFUExBQ0VNRU5UUyA9IHtcbiAgICAndy1yZXNpemUnOiAnZS1yZXNpemUnLFxuICAgICdzdy1yZXNpemUnOiAnc2UtcmVzaXplJyxcbiAgICAnbnctcmVzaXplJzogJ25lLXJlc2l6ZScsXG59O1xuLyoqXG4gKiBSVExpZmllcyB0aGUgcnVsZVBhaXIgaW4gdGhlIGFycmF5IGF0IHRoZSBjdXJyZW50IGluZGV4LiBUaGlzIG11dGF0ZXMgdGhlIGFycmF5IGZvciBwZXJmb3JtYW5jZVxuICogcmVhc29ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ0bGlmeVJ1bGVzKG9wdGlvbnMsIHJ1bGVQYWlycywgaW5kZXgpIHtcbiAgICBpZiAob3B0aW9ucy5ydGwpIHtcbiAgICAgICAgdmFyIG5hbWVfMSA9IHJ1bGVQYWlyc1tpbmRleF07XG4gICAgICAgIGlmICghbmFtZV8xKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbHVlID0gcnVsZVBhaXJzW2luZGV4ICsgMV07XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmluZGV4T2YoTk9fRkxJUCkgPj0gMCkge1xuICAgICAgICAgICAgcnVsZVBhaXJzW2luZGV4ICsgMV0gPSB2YWx1ZS5yZXBsYWNlKC9cXHMqKD86XFwvXFwqXFxzKik/XFxAbm9mbGlwXFxiKD86XFxzKlxcKlxcLyk/XFxzKj8vZywgJycpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5hbWVfMS5pbmRleE9mKExFRlQpID49IDApIHtcbiAgICAgICAgICAgIHJ1bGVQYWlyc1tpbmRleF0gPSBuYW1lXzEucmVwbGFjZShMRUZULCBSSUdIVCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmFtZV8xLmluZGV4T2YoUklHSFQpID49IDApIHtcbiAgICAgICAgICAgIHJ1bGVQYWlyc1tpbmRleF0gPSBuYW1lXzEucmVwbGFjZShSSUdIVCwgTEVGVCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoU3RyaW5nKHZhbHVlKS5pbmRleE9mKExFRlQpID49IDApIHtcbiAgICAgICAgICAgIHJ1bGVQYWlyc1tpbmRleCArIDFdID0gdmFsdWUucmVwbGFjZShMRUZULCBSSUdIVCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoU3RyaW5nKHZhbHVlKS5pbmRleE9mKFJJR0hUKSA+PSAwKSB7XG4gICAgICAgICAgICBydWxlUGFpcnNbaW5kZXggKyAxXSA9IHZhbHVlLnJlcGxhY2UoUklHSFQsIExFRlQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKE5BTUVfUkVQTEFDRU1FTlRTW25hbWVfMV0pIHtcbiAgICAgICAgICAgIHJ1bGVQYWlyc1tpbmRleF0gPSBOQU1FX1JFUExBQ0VNRU5UU1tuYW1lXzFdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKFZBTFVFX1JFUExBQ0VNRU5UU1t2YWx1ZV0pIHtcbiAgICAgICAgICAgIHJ1bGVQYWlyc1tpbmRleCArIDFdID0gVkFMVUVfUkVQTEFDRU1FTlRTW3ZhbHVlXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN3aXRjaCAobmFtZV8xKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbWFyZ2luJzpcbiAgICAgICAgICAgICAgICBjYXNlICdwYWRkaW5nJzpcbiAgICAgICAgICAgICAgICAgICAgcnVsZVBhaXJzW2luZGV4ICsgMV0gPSBmbGlwUXVhZCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2JveC1zaGFkb3cnOlxuICAgICAgICAgICAgICAgICAgICBydWxlUGFpcnNbaW5kZXggKyAxXSA9IG5lZ2F0ZU51bSh2YWx1ZSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBHaXZlbiBhIHN0cmluZyB2YWx1ZSBpbiBhIHNwYWNlIGRlbGltaXRlZCBmb3JtYXQgKGUuZy4gXCIxIDIgMyA0XCIpLCBuZWdhdGVzIGEgcGFydGljdWxhciB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbmVnYXRlTnVtKHZhbHVlLCBwYXJ0SW5kZXgpIHtcbiAgICB2YXIgcGFydHMgPSB2YWx1ZS5zcGxpdCgnICcpO1xuICAgIHZhciBudW1iZXJWYWwgPSBwYXJzZUludChwYXJ0c1twYXJ0SW5kZXhdLCAxMCk7XG4gICAgcGFydHNbMF0gPSBwYXJ0c1swXS5yZXBsYWNlKFN0cmluZyhudW1iZXJWYWwpLCBTdHJpbmcobnVtYmVyVmFsICogLTEpKTtcbiAgICByZXR1cm4gcGFydHMuam9pbignICcpO1xufVxuLyoqXG4gKiBHaXZlbiBhIHN0cmluZyBxdWFkLCBmbGlwcyB0aGUgbGVmdCBhbmQgcmlnaHQgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBmbGlwUXVhZCh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciBwYXJ0cyA9IHZhbHVlLnNwbGl0KCcgJyk7XG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJ0c1swXSArIFwiIFwiICsgcGFydHNbM10gKyBcIiBcIiArIHBhcnRzWzJdICsgXCIgXCIgKyBwYXJ0c1sxXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ydGxpZnlSdWxlcy5qcy5tYXAiLCJpbXBvcnQgeyBfX3NwcmVhZEFycmF5cyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3R5bGVzaGVldCB9IGZyb20gJy4vU3R5bGVzaGVldCc7XG5pbXBvcnQgeyBrZWJhYlJ1bGVzIH0gZnJvbSAnLi90cmFuc2Zvcm1zL2tlYmFiUnVsZXMnO1xuaW1wb3J0IHsgcHJlZml4UnVsZXMgfSBmcm9tICcuL3RyYW5zZm9ybXMvcHJlZml4UnVsZXMnO1xuaW1wb3J0IHsgcHJvdmlkZVVuaXRzIH0gZnJvbSAnLi90cmFuc2Zvcm1zL3Byb3ZpZGVVbml0cyc7XG5pbXBvcnQgeyBydGxpZnlSdWxlcyB9IGZyb20gJy4vdHJhbnNmb3Jtcy9ydGxpZnlSdWxlcyc7XG52YXIgRElTUExBWV9OQU1FID0gJ2Rpc3BsYXlOYW1lJztcbmZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKHJ1bGVzKSB7XG4gICAgdmFyIHJvb3RTdHlsZSA9IHJ1bGVzICYmIHJ1bGVzWycmJ107XG4gICAgcmV0dXJuIHJvb3RTdHlsZSA/IHJvb3RTdHlsZS5kaXNwbGF5TmFtZSA6IHVuZGVmaW5lZDtcbn1cbnZhciBnbG9iYWxTZWxlY3RvclJlZ0V4cCA9IC9cXDpnbG9iYWxcXCgoLis/KVxcKS9nO1xuLyoqXG4gKiBGaW5kcyBjb21tYSBzZXBhcmF0ZWQgc2VsZWN0b3JzIGluIGEgOmdsb2JhbCgpIGUuZy4gXCI6Z2xvYmFsKC5jbGFzczEsIC5jbGFzczIsIC5jbGFzczMpXCJcbiAqIGFuZCB3cmFwcyB0aGVtIGVhY2ggaW4gdGhlaXIgb3duIGdsb2JhbCBcIjpnbG9iYWwoLmNsYXNzMSksIDpnbG9iYWwoLmNsYXNzMiksIDpnbG9iYWwoLmNsYXNzMylcIlxuICpcbiAqIEBwYXJhbSBzZWxlY3RvcldpdGhHbG9iYWxzIFRoZSBzZWxlY3RvciB0byBwcm9jZXNzXG4gKiBAcmV0dXJucyBUaGUgdXBkYXRlZCBzZWxlY3RvclxuICovXG5mdW5jdGlvbiBleHBhbmRDb21tYVNlcGFyYXRlZEdsb2JhbHMoc2VsZWN0b3JXaXRoR2xvYmFscykge1xuICAgIC8vIFdlIHRoZSBzZWxlY3RvciBkb2VzIG5vdCBoYXZlIGEgOmdsb2JhbCgpIHdlIGNhbiBzaG9ydGN1dFxuICAgIGlmICghZ2xvYmFsU2VsZWN0b3JSZWdFeHAudGVzdChzZWxlY3RvcldpdGhHbG9iYWxzKSkge1xuICAgICAgICByZXR1cm4gc2VsZWN0b3JXaXRoR2xvYmFscztcbiAgICB9XG4gICAgdmFyIHJlcGxhY2VtZW50SW5mbyA9IFtdO1xuICAgIHZhciBmaW5kR2xvYmFsID0gL1xcOmdsb2JhbFxcKCguKz8pXFwpL2c7XG4gICAgdmFyIG1hdGNoID0gbnVsbDtcbiAgICAvLyBDcmVhdGUgYSByZXN1bHQgbGlzdCBmb3IgZ2xvYmFsIHNlbGVjdG9ycyBzbyB3ZSBjYW4gcmVwbGFjZSB0aGVtLlxuICAgIHdoaWxlICgobWF0Y2ggPSBmaW5kR2xvYmFsLmV4ZWMoc2VsZWN0b3JXaXRoR2xvYmFscykpKSB7XG4gICAgICAgIC8vIE9ubHkgaWYgdGhlIGZvdW5kIHNlbGVjdG9yIGlzIGEgY29tbWEgc2VwYXJhdGVkIGxpc3Qgd2UnbGwgcHJvY2VzcyBpdC5cbiAgICAgICAgaWYgKG1hdGNoWzFdLmluZGV4T2YoJywnKSA+IC0xKSB7XG4gICAgICAgICAgICByZXBsYWNlbWVudEluZm8ucHVzaChbXG4gICAgICAgICAgICAgICAgbWF0Y2guaW5kZXgsXG4gICAgICAgICAgICAgICAgbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgLy8gV3JhcCBlYWNoIG9mIHRoZSBmb3VuZCBzZWxlY3RvcnMgaW4gOmdsb2JhbCgpXG4gICAgICAgICAgICAgICAgbWF0Y2hbMV1cbiAgICAgICAgICAgICAgICAgICAgLnNwbGl0KCcsJylcbiAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gXCI6Z2xvYmFsKFwiICsgdi50cmltKCkgKyBcIilcIjsgfSlcbiAgICAgICAgICAgICAgICAgICAgLmpvaW4oJywgJyksXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBSZXBsYWNlIHRoZSBmb3VuZCBzZWxlY3RvcnMgd2l0aCB0aGVpciB3cmFwcGVkIHZhcmlhbnRzIGluIHJldmVyc2Ugb3JkZXJcbiAgICByZXR1cm4gcmVwbGFjZW1lbnRJbmZvXG4gICAgICAgIC5yZXZlcnNlKClcbiAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAoc2VsZWN0b3IsIF9hKSB7XG4gICAgICAgIHZhciBtYXRjaEluZGV4ID0gX2FbMF0sIG1hdGNoRW5kSW5kZXggPSBfYVsxXSwgcmVwbGFjZW1lbnQgPSBfYVsyXTtcbiAgICAgICAgdmFyIHByZWZpeCA9IHNlbGVjdG9yLnNsaWNlKDAsIG1hdGNoSW5kZXgpO1xuICAgICAgICB2YXIgc3VmZml4ID0gc2VsZWN0b3Iuc2xpY2UobWF0Y2hFbmRJbmRleCk7XG4gICAgICAgIHJldHVybiBwcmVmaXggKyByZXBsYWNlbWVudCArIHN1ZmZpeDtcbiAgICB9LCBzZWxlY3RvcldpdGhHbG9iYWxzKTtcbn1cbmZ1bmN0aW9uIGV4cGFuZFNlbGVjdG9yKG5ld1NlbGVjdG9yLCBjdXJyZW50U2VsZWN0b3IpIHtcbiAgICBpZiAobmV3U2VsZWN0b3IuaW5kZXhPZignOmdsb2JhbCgnKSA+PSAwKSB7XG4gICAgICAgIHJldHVybiBuZXdTZWxlY3Rvci5yZXBsYWNlKGdsb2JhbFNlbGVjdG9yUmVnRXhwLCAnJDEnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobmV3U2VsZWN0b3IuaW5kZXhPZignOicpID09PSAwKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50U2VsZWN0b3IgKyBuZXdTZWxlY3RvcjtcbiAgICB9XG4gICAgZWxzZSBpZiAobmV3U2VsZWN0b3IuaW5kZXhPZignJicpIDwgMCkge1xuICAgICAgICByZXR1cm4gY3VycmVudFNlbGVjdG9yICsgJyAnICsgbmV3U2VsZWN0b3I7XG4gICAgfVxuICAgIHJldHVybiBuZXdTZWxlY3Rvcjtcbn1cbmZ1bmN0aW9uIGV4dHJhY3RTZWxlY3RvcihjdXJyZW50U2VsZWN0b3IsIHJ1bGVzLCBzZWxlY3RvciwgdmFsdWUpIHtcbiAgICBpZiAocnVsZXMgPT09IHZvaWQgMCkgeyBydWxlcyA9IHsgX19vcmRlcjogW10gfTsgfVxuICAgIGlmIChzZWxlY3Rvci5pbmRleE9mKCdAJykgPT09IDApIHtcbiAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciArICd7JyArIGN1cnJlbnRTZWxlY3RvcjtcbiAgICAgICAgZXh0cmFjdFJ1bGVzKFt2YWx1ZV0sIHJ1bGVzLCBzZWxlY3Rvcik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNlbGVjdG9yLmluZGV4T2YoJywnKSA+IC0xKSB7XG4gICAgICAgIGV4cGFuZENvbW1hU2VwYXJhdGVkR2xvYmFscyhzZWxlY3RvcilcbiAgICAgICAgICAgIC5zcGxpdCgnLCcpXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnRyaW0oKTsgfSlcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzZXBhcmF0ZWRTZWxlY3Rvcikge1xuICAgICAgICAgICAgcmV0dXJuIGV4dHJhY3RSdWxlcyhbdmFsdWVdLCBydWxlcywgZXhwYW5kU2VsZWN0b3Ioc2VwYXJhdGVkU2VsZWN0b3IsIGN1cnJlbnRTZWxlY3RvcikpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGV4dHJhY3RSdWxlcyhbdmFsdWVdLCBydWxlcywgZXhwYW5kU2VsZWN0b3Ioc2VsZWN0b3IsIGN1cnJlbnRTZWxlY3RvcikpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGV4dHJhY3RSdWxlcyhhcmdzLCBydWxlcywgY3VycmVudFNlbGVjdG9yKSB7XG4gICAgaWYgKHJ1bGVzID09PSB2b2lkIDApIHsgcnVsZXMgPSB7IF9fb3JkZXI6IFtdIH07IH1cbiAgICBpZiAoY3VycmVudFNlbGVjdG9yID09PSB2b2lkIDApIHsgY3VycmVudFNlbGVjdG9yID0gJyYnOyB9XG4gICAgdmFyIHN0eWxlc2hlZXQgPSBTdHlsZXNoZWV0LmdldEluc3RhbmNlKCk7XG4gICAgdmFyIGN1cnJlbnRSdWxlcyA9IHJ1bGVzW2N1cnJlbnRTZWxlY3Rvcl07XG4gICAgaWYgKCFjdXJyZW50UnVsZXMpIHtcbiAgICAgICAgY3VycmVudFJ1bGVzID0ge307XG4gICAgICAgIHJ1bGVzW2N1cnJlbnRTZWxlY3Rvcl0gPSBjdXJyZW50UnVsZXM7XG4gICAgICAgIHJ1bGVzLl9fb3JkZXIucHVzaChjdXJyZW50U2VsZWN0b3IpO1xuICAgIH1cbiAgICBmb3IgKHZhciBfaSA9IDAsIGFyZ3NfMSA9IGFyZ3M7IF9pIDwgYXJnc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgYXJnID0gYXJnc18xW19pXTtcbiAgICAgICAgLy8gSWYgdGhlIGFyZyBpcyBhIHN0cmluZywgd2UgbmVlZCB0byBsb29rIHVwIHRoZSBjbGFzcyBtYXAgYW5kIG1lcmdlLlxuICAgICAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhciBleHBhbmRlZFJ1bGVzID0gc3R5bGVzaGVldC5hcmdzRnJvbUNsYXNzTmFtZShhcmcpO1xuICAgICAgICAgICAgaWYgKGV4cGFuZGVkUnVsZXMpIHtcbiAgICAgICAgICAgICAgICBleHRyYWN0UnVsZXMoZXhwYW5kZWRSdWxlcywgcnVsZXMsIGN1cnJlbnRTZWxlY3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBFbHNlIGlmIHRoZSBhcmcgaXMgYW4gYXJyYXksIHdlIG5lZWQgdG8gcmVjdXJzZSBpbi5cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgICAgIGV4dHJhY3RSdWxlcyhhcmcsIHJ1bGVzLCBjdXJyZW50U2VsZWN0b3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBhcmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXJnLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9wVmFsdWUgPSBhcmdbcHJvcF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wID09PSAnc2VsZWN0b3JzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXZlcnkgY2hpbGQgaXMgYSBzZWxlY3Rvci5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvcnMgPSBhcmcuc2VsZWN0b3JzO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbmV3U2VsZWN0b3IgaW4gc2VsZWN0b3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9ycy5oYXNPd25Qcm9wZXJ0eShuZXdTZWxlY3RvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFjdFNlbGVjdG9yKGN1cnJlbnRTZWxlY3RvciwgcnVsZXMsIG5ld1NlbGVjdG9yLCBzZWxlY3RvcnNbbmV3U2VsZWN0b3JdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHByb3BWYWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByb3AgaXMgYSBzZWxlY3Rvci5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wVmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYWN0U2VsZWN0b3IoY3VycmVudFNlbGVjdG9yLCBydWxlcywgcHJvcCwgcHJvcFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVsc2UsIGFkZCB0aGUgcnVsZSB0byB0aGUgY3VycmVudFNlbGVjdG9yLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wID09PSAnbWFyZ2luJyB8fCBwcm9wID09PSAncGFkZGluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kUXVhZHMoY3VycmVudFJ1bGVzLCBwcm9wLCBwcm9wVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJ1bGVzW3Byb3BdID0gcHJvcFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcnVsZXM7XG59XG5mdW5jdGlvbiBleHBhbmRRdWFkcyhjdXJyZW50UnVsZXMsIG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHZhbHVlLnNwbGl0KCcgJykgOiBbdmFsdWVdO1xuICAgIGN1cnJlbnRSdWxlc1tuYW1lICsgJ1RvcCddID0gcGFydHNbMF07XG4gICAgY3VycmVudFJ1bGVzW25hbWUgKyAnUmlnaHQnXSA9IHBhcnRzWzFdIHx8IHBhcnRzWzBdO1xuICAgIGN1cnJlbnRSdWxlc1tuYW1lICsgJ0JvdHRvbSddID0gcGFydHNbMl0gfHwgcGFydHNbMF07XG4gICAgY3VycmVudFJ1bGVzW25hbWUgKyAnTGVmdCddID0gcGFydHNbM10gfHwgcGFydHNbMV0gfHwgcGFydHNbMF07XG59XG5mdW5jdGlvbiBnZXRLZXlGb3JSdWxlcyhvcHRpb25zLCBydWxlcykge1xuICAgIHZhciBzZXJpYWxpemVkID0gW29wdGlvbnMucnRsID8gJ3J0bCcgOiAnbHRyJ107XG4gICAgdmFyIGhhc1Byb3BzID0gZmFsc2U7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHJ1bGVzLl9fb3JkZXI7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IF9hW19pXTtcbiAgICAgICAgc2VyaWFsaXplZC5wdXNoKHNlbGVjdG9yKTtcbiAgICAgICAgdmFyIHJ1bGVzRm9yU2VsZWN0b3IgPSBydWxlc1tzZWxlY3Rvcl07XG4gICAgICAgIGZvciAodmFyIHByb3BOYW1lIGluIHJ1bGVzRm9yU2VsZWN0b3IpIHtcbiAgICAgICAgICAgIGlmIChydWxlc0ZvclNlbGVjdG9yLmhhc093blByb3BlcnR5KHByb3BOYW1lKSAmJiBydWxlc0ZvclNlbGVjdG9yW3Byb3BOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaGFzUHJvcHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWQucHVzaChwcm9wTmFtZSwgcnVsZXNGb3JTZWxlY3Rvcltwcm9wTmFtZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBoYXNQcm9wcyA/IHNlcmlhbGl6ZWQuam9pbignJykgOiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiByZXBlYXRTdHJpbmcodGFyZ2V0LCBjb3VudCkge1xuICAgIGlmIChjb3VudCA8PSAwKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQgKyByZXBlYXRTdHJpbmcodGFyZ2V0LCBjb3VudCAtIDEpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZVJ1bGVFbnRyaWVzKG9wdGlvbnMsIHJ1bGVFbnRyaWVzKSB7XG4gICAgaWYgKCFydWxlRW50cmllcykge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHZhciBhbGxFbnRyaWVzID0gW107XG4gICAgZm9yICh2YXIgZW50cnkgaW4gcnVsZUVudHJpZXMpIHtcbiAgICAgICAgaWYgKHJ1bGVFbnRyaWVzLmhhc093blByb3BlcnR5KGVudHJ5KSAmJiBlbnRyeSAhPT0gRElTUExBWV9OQU1FICYmIHJ1bGVFbnRyaWVzW2VudHJ5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBhbGxFbnRyaWVzLnB1c2goZW50cnksIHJ1bGVFbnRyaWVzW2VudHJ5XSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQXBwbHkgdHJhbnNmb3Jtcy5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbEVudHJpZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAga2ViYWJSdWxlcyhhbGxFbnRyaWVzLCBpKTtcbiAgICAgICAgcHJvdmlkZVVuaXRzKGFsbEVudHJpZXMsIGkpO1xuICAgICAgICBydGxpZnlSdWxlcyhvcHRpb25zLCBhbGxFbnRyaWVzLCBpKTtcbiAgICAgICAgcHJlZml4UnVsZXMoYWxsRW50cmllcywgaSk7XG4gICAgfVxuICAgIC8vIEFwcGx5IHB1bmN0dWF0aW9uLlxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYWxsRW50cmllcy5sZW5ndGg7IGkgKz0gNCkge1xuICAgICAgICBhbGxFbnRyaWVzLnNwbGljZShpLCAxLCAnOicsIGFsbEVudHJpZXNbaV0sICc7Jyk7XG4gICAgfVxuICAgIHJldHVybiBhbGxFbnRyaWVzLmpvaW4oJycpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlVG9SZWdpc3RyYXRpb24ob3B0aW9ucykge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHJ1bGVzID0gZXh0cmFjdFJ1bGVzKGFyZ3MpO1xuICAgIHZhciBrZXkgPSBnZXRLZXlGb3JSdWxlcyhvcHRpb25zLCBydWxlcyk7XG4gICAgaWYgKGtleSkge1xuICAgICAgICB2YXIgc3R5bGVzaGVldCA9IFN0eWxlc2hlZXQuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgdmFyIHJlZ2lzdHJhdGlvbiA9IHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogc3R5bGVzaGVldC5jbGFzc05hbWVGcm9tS2V5KGtleSksXG4gICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICAgIH07XG4gICAgICAgIGlmICghcmVnaXN0cmF0aW9uLmNsYXNzTmFtZSkge1xuICAgICAgICAgICAgcmVnaXN0cmF0aW9uLmNsYXNzTmFtZSA9IHN0eWxlc2hlZXQuZ2V0Q2xhc3NOYW1lKGdldERpc3BsYXlOYW1lKHJ1bGVzKSk7XG4gICAgICAgICAgICB2YXIgcnVsZXNUb0luc2VydCA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBfYiA9IHJ1bGVzLl9fb3JkZXI7IF9hIDwgX2IubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gX2JbX2FdO1xuICAgICAgICAgICAgICAgIHJ1bGVzVG9JbnNlcnQucHVzaChzZWxlY3Rvciwgc2VyaWFsaXplUnVsZUVudHJpZXMob3B0aW9ucywgcnVsZXNbc2VsZWN0b3JdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWdpc3RyYXRpb24ucnVsZXNUb0luc2VydCA9IHJ1bGVzVG9JbnNlcnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlZ2lzdHJhdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbi8qKlxuICogSW5zZXJ0IHN0eWxlIHRvIHN0eWxlc2hlZXQuXG4gKiBAcGFyYW0gcmVnaXN0cmF0aW9uIFN0eWxlIHJlZ2lzdHJhdGlvbi5cbiAqIEBwYXJhbSBzcGVjaWZpY2l0eU11bHRpcGxpZXIgTnVtYmVyIG9mIHRpbWVzIGNsYXNzbmFtZSBzZWxlY3RvciBpcyByZXBlYXRlZCBpbiB0aGUgY3NzIHJ1bGUuXG4gKiBUaGlzIGlzIHRvIGluY3JlYXNlIGNzcyBzcGVjaWZpY2l0eSBpbiBjYXNlIGl0J3MgbmVlZGVkLiBEZWZhdWx0IHRvIDEuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVJlZ2lzdHJhdGlvbihyZWdpc3RyYXRpb24sIHNwZWNpZmljaXR5TXVsdGlwbGllcikge1xuICAgIGlmIChzcGVjaWZpY2l0eU11bHRpcGxpZXIgPT09IHZvaWQgMCkgeyBzcGVjaWZpY2l0eU11bHRpcGxpZXIgPSAxOyB9XG4gICAgdmFyIHN0eWxlc2hlZXQgPSBTdHlsZXNoZWV0LmdldEluc3RhbmNlKCk7XG4gICAgdmFyIGNsYXNzTmFtZSA9IHJlZ2lzdHJhdGlvbi5jbGFzc05hbWUsIGtleSA9IHJlZ2lzdHJhdGlvbi5rZXksIGFyZ3MgPSByZWdpc3RyYXRpb24uYXJncywgcnVsZXNUb0luc2VydCA9IHJlZ2lzdHJhdGlvbi5ydWxlc1RvSW5zZXJ0O1xuICAgIGlmIChydWxlc1RvSW5zZXJ0KSB7XG4gICAgICAgIC8vIHJ1bGVzVG9JbnNlcnQgaXMgYW4gb3JkZXJlZCBhcnJheSBvZiBzZWxlY3Rvci9ydWxlIHBhaXJzLlxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzVG9JbnNlcnQubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgICAgIHZhciBydWxlcyA9IHJ1bGVzVG9JbnNlcnRbaSArIDFdO1xuICAgICAgICAgICAgaWYgKHJ1bGVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gcnVsZXNUb0luc2VydFtpXTtcbiAgICAgICAgICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnJlcGxhY2UoLyYvZywgcmVwZWF0U3RyaW5nKFwiLlwiICsgcmVnaXN0cmF0aW9uLmNsYXNzTmFtZSwgc3BlY2lmaWNpdHlNdWx0aXBsaWVyKSk7XG4gICAgICAgICAgICAgICAgLy8gSW5zZXJ0LiBOb3RlIGlmIGEgbWVkaWEgcXVlcnksIHdlIG11c3QgY2xvc2UgdGhlIHF1ZXJ5IHdpdGggYSBmaW5hbCBicmFja2V0LlxuICAgICAgICAgICAgICAgIHZhciBwcm9jZXNzZWRSdWxlID0gc2VsZWN0b3IgKyBcIntcIiArIHJ1bGVzICsgXCJ9XCIgKyAoc2VsZWN0b3IuaW5kZXhPZignQCcpID09PSAwID8gJ30nIDogJycpO1xuICAgICAgICAgICAgICAgIHN0eWxlc2hlZXQuaW5zZXJ0UnVsZShwcm9jZXNzZWRSdWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdHlsZXNoZWV0LmNhY2hlQ2xhc3NOYW1lKGNsYXNzTmFtZSwga2V5LCBhcmdzLCBydWxlc1RvSW5zZXJ0KTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gc3R5bGVUb0NsYXNzTmFtZShvcHRpb25zKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgcmVnaXN0cmF0aW9uID0gc3R5bGVUb1JlZ2lzdHJhdGlvbi5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXlzKFtvcHRpb25zXSwgYXJncykpO1xuICAgIGlmIChyZWdpc3RyYXRpb24pIHtcbiAgICAgICAgYXBwbHlSZWdpc3RyYXRpb24ocmVnaXN0cmF0aW9uLCBvcHRpb25zLnNwZWNpZmljaXR5TXVsdGlwbGllcik7XG4gICAgICAgIHJldHVybiByZWdpc3RyYXRpb24uY2xhc3NOYW1lO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHlsZVRvQ2xhc3NOYW1lLmpzLm1hcCIsImltcG9ydCB7IGV4dHJhY3RTdHlsZVBhcnRzIH0gZnJvbSAnLi9leHRyYWN0U3R5bGVQYXJ0cyc7XG5pbXBvcnQgeyBnZXRTdHlsZU9wdGlvbnMgfSBmcm9tICcuL1N0eWxlT3B0aW9uc1N0YXRlJztcbmltcG9ydCB7IHN0eWxlVG9DbGFzc05hbWUgfSBmcm9tICcuL3N0eWxlVG9DbGFzc05hbWUnO1xuLyoqXG4gKiBDb25jYXRlbmF0aW9uIGhlbHBlciwgd2hpY2ggY2FuIG1lcmdlIGNsYXNzIG5hbWVzIHRvZ2V0aGVyLiBTa2lwcyBvdmVyIGZhbHNleSB2YWx1ZXMuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VTdHlsZXMoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBtZXJnZUNzcyhhcmdzLCBnZXRTdHlsZU9wdGlvbnMoKSk7XG59XG4vKipcbiAqIENvbmNhdGVuYXRpb24gaGVscGVyLCB3aGljaCBjYW4gbWVyZ2UgY2xhc3MgbmFtZXMgdG9nZXRoZXIuIFNraXBzIG92ZXIgZmFsc2V5IHZhbHVlcy5cbiAqIEFjY2VwdHMgYSBzZXQgb2Ygb3B0aW9ucyB0aGF0IHdpbGwgYmUgdXNlZCB3aGVuIGNhbGN1bGF0aW5nIHN0eWxlcy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUNzcyhhcmdzLCBvcHRpb25zKSB7XG4gICAgdmFyIHN0eWxlQXJncyA9IGFyZ3MgaW5zdGFuY2VvZiBBcnJheSA/IGFyZ3MgOiBbYXJnc107XG4gICAgdmFyIF9hID0gZXh0cmFjdFN0eWxlUGFydHMoc3R5bGVBcmdzKSwgY2xhc3NlcyA9IF9hLmNsYXNzZXMsIG9iamVjdHMgPSBfYS5vYmplY3RzO1xuICAgIGlmIChvYmplY3RzLmxlbmd0aCkge1xuICAgICAgICBjbGFzc2VzLnB1c2goc3R5bGVUb0NsYXNzTmFtZShvcHRpb25zIHx8IHt9LCBvYmplY3RzKSk7XG4gICAgfVxuICAgIHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlU3R5bGVzLmpzLm1hcCIsImltcG9ydCB7IFN0eWxlc2hlZXQgfSBmcm9tICdAdWlmYWJyaWMvbWVyZ2Utc3R5bGVzJztcbnZhciBfaW5pdGlhbGl6ZWRTdHlsZXNoZWV0UmVzZXRzID0gZmFsc2U7XG52YXIgX3Jlc2V0Q291bnRlciA9IDA7XG52YXIgX2VtcHR5T2JqZWN0ID0geyBlbXB0eTogdHJ1ZSB9O1xudmFyIF9kaWN0aW9uYXJ5ID0ge307XG52YXIgX3dlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogV2Vha01hcDtcbi8qKlxuICogIFRlc3QgdXRpbGl0eSBmb3IgcHJvdmlkaW5nIGEgY3VzdG9tIHdlYWttYXAuXG4gKlxuICogQGludGVybmFsXG4gKiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldE1lbW9pemVXZWFrTWFwKHdlYWtNYXApIHtcbiAgICBfd2Vha01hcCA9IHdlYWtNYXA7XG59XG4vKipcbiAqIFJlc2V0IG1lbW9pemF0aW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0TWVtb2l6YXRpb25zKCkge1xuICAgIF9yZXNldENvdW50ZXIrKztcbn1cbi8qKlxuICogTWVtb2l6ZSBkZWNvcmF0b3IgdG8gYmUgdXNlZCBvbiBjbGFzcyBtZXRob2RzLiBXQVJOSU5HOiB0aGUgYHRoaXNgIHJlZmVyZW5jZVxuICogd2lsbCBiZSBpbmFjY2Vzc2libGUgd2l0aGluIGEgbWVtb2l6ZWQgbWV0aG9kLCBnaXZlbiB0aGF0IGEgY2FjaGVkIG1ldGhvZCdzIGB0aGlzYFxuICogd291bGQgbm90IGJlIGluc3RhbmNlLXNwZWNpZmljLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lbW9pemUodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpIHtcbiAgICAvLyBXZSBiaW5kIHRvIFwibnVsbFwiIHRvIHByZXZlbnQgcGVvcGxlIGZyb20gaW5hZHZlcnRlbnRseSBwdWxsaW5nIHZhbHVlcyBmcm9tIFwidGhpc1wiLFxuICAgIC8vIHJhdGhlciB0aGFuIHBhc3NpbmcgdGhlbSBpbiBhcyBpbnB1dCB2YWx1ZXMgd2hpY2ggY2FuIGJlIG1lbW9pemVkLlxuICAgIHZhciBmbiA9IG1lbW9pemVGdW5jdGlvbihkZXNjcmlwdG9yLnZhbHVlICYmIGRlc2NyaXB0b3IudmFsdWUuYmluZChudWxsKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBmbjtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLyoqXG4gKiBNZW1vaXplcyBhIGZ1bmN0aW9uOyB3aGVuIHlvdSBwYXNzIGluIHRoZSBzYW1lIHBhcmFtZXRlcnMgbXVsdGlwbGUgdGltZXMsIGl0IHJldHVybnMgYSBjYWNoZWQgcmVzdWx0LlxuICogQmUgY2FyZWZ1bCB3aGVuIHBhc3NpbmcgaW4gb2JqZWN0cywgeW91IG5lZWQgdG8gcGFzcyBpbiB0aGUgc2FtZSBJTlNUQU5DRSBmb3IgY2FjaGluZyB0byB3b3JrLiBPdGhlcndpc2VcbiAqIGl0IHdpbGwgZ3JvdyB0aGUgY2FjaGUgdW5uZWNlc3NhcmlseS4gQWxzbyBhdm9pZCB1c2luZyBkZWZhdWx0IHZhbHVlcyB0aGF0IGV2YWx1YXRlIGZ1bmN0aW9uczsgcGFzc2luZyBpblxuICogdW5kZWZpbmVkIGZvciBhIHZhbHVlIGFuZCByZWx5aW5nIG9uIGEgZGVmYXVsdCBmdW5jdGlvbiB3aWxsIGV4ZWN1dGUgaXQgdGhlIGZpcnN0IHRpbWUsIGJ1dCB3aWxsIG5vdFxuICogcmUtZXZhbHVhdGUgc3Vic2VxdWVudCB0aW1lcyB3aGljaCBtYXkgaGF2ZSBiZWVuIHVuZXhwZWN0ZWQuXG4gKlxuICogQnkgZGVmYXVsdCwgdGhlIGNhY2hlIHdpbGwgcmVzZXQgYWZ0ZXIgMTAwIHBlcm11dGF0aW9ucywgdG8gYXZvaWQgYWJ1c2UgY2FzZXMgd2hlcmUgdGhlIGZ1bmN0aW9uIGlzXG4gKiB1bmludGVuZGVkbHkgY2FsbGVkIHdpdGggdW5pcXVlIG9iamVjdHMuIFdpdGhvdXQgYSByZXNldCwgdGhlIGNhY2hlIGNvdWxkIGdyb3cgaW5maW5pdGVseSwgc28gd2Ugc2FmZWd1YXJkXG4gKiBieSByZXNldHRpbmcuIFRvIG92ZXJyaWRlIHRoaXMgYmVoYXZpb3IsIHBhc3MgYSB2YWx1ZSBvZiAwIHRvIHRoZSBtYXhDYWNoZVNpemUgcGFyYW1ldGVyLlxuICpcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSBjYiAtIFRoZSBmdW5jdGlvbiB0byBtZW1vaXplLlxuICogQHBhcmFtIG1heENhY2hlU2l6ZSAtIE1heCByZXN1bHRzIHRvIGNhY2hlLiBJZiB0aGUgY2FjaGUgZXhjZWVkcyB0aGlzIHZhbHVlLCBpdCB3aWxsIHJlc2V0IG9uIHRoZSBuZXh0IGNhbGwuXG4gKiBAcGFyYW0gaWdub3JlTnVsbE9yVW5kZWZpbmVkUmVzdWx0IC0gRmxhZyB0byBkZWNpZGUgd2hldGhlciB0byBjYWNoZSBjYWxsYmFjayByZXN1bHQgaWYgaXQgaXMgdW5kZWZpbmVkL251bGwuXG4gKiBJZiB0aGUgZmxhZyBpcyBzZXQgdG8gdHJ1ZSwgdGhlIGNhbGxiYWNrIHJlc3VsdCBpcyByZWNvbXB1dGVkIGV2ZXJ5IHRpbWUgdGlsbCB0aGUgY2FsbGJhY2sgcmVzdWx0IGlzXG4gKiBub3QgdW5kZWZpbmVkL251bGwgZm9yIHRoZSBmaXJzdCB0aW1lLCBhbmQgdGhlbiB0aGUgbm9uLXVuZGVmaW5lZC9udWxsIHZlcnNpb24gZ2V0cyBjYWNoZWQuXG4gKiBAcmV0dXJucyBBIG1lbW9pemVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVtb2l6ZUZ1bmN0aW9uKGNiLCBtYXhDYWNoZVNpemUsIGlnbm9yZU51bGxPclVuZGVmaW5lZFJlc3VsdCkge1xuICAgIGlmIChtYXhDYWNoZVNpemUgPT09IHZvaWQgMCkgeyBtYXhDYWNoZVNpemUgPSAxMDA7IH1cbiAgICBpZiAoaWdub3JlTnVsbE9yVW5kZWZpbmVkUmVzdWx0ID09PSB2b2lkIDApIHsgaWdub3JlTnVsbE9yVW5kZWZpbmVkUmVzdWx0ID0gZmFsc2U7IH1cbiAgICAvLyBBdm9pZCBicmVha2luZyBzY2VuYXJpb3Mgd2hpY2ggZG9uJ3QgaGF2ZSB3ZWFrIG1hcC5cbiAgICBpZiAoIV93ZWFrTWFwKSB7XG4gICAgICAgIHJldHVybiBjYjtcbiAgICB9XG4gICAgaWYgKCFfaW5pdGlhbGl6ZWRTdHlsZXNoZWV0UmVzZXRzKSB7XG4gICAgICAgIHZhciBzdHlsZXNoZWV0ID0gU3R5bGVzaGVldC5nZXRJbnN0YW5jZSgpO1xuICAgICAgICBpZiAoc3R5bGVzaGVldCAmJiBzdHlsZXNoZWV0Lm9uUmVzZXQpIHtcbiAgICAgICAgICAgIFN0eWxlc2hlZXQuZ2V0SW5zdGFuY2UoKS5vblJlc2V0KHJlc2V0TWVtb2l6YXRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBfaW5pdGlhbGl6ZWRTdHlsZXNoZWV0UmVzZXRzID0gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIHJvb3ROb2RlO1xuICAgIHZhciBjYWNoZVNpemUgPSAwO1xuICAgIHZhciBsb2NhbFJlc2V0Q291bnRlciA9IF9yZXNldENvdW50ZXI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9pemVkRnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGN1cnJlbnROb2RlID0gcm9vdE5vZGU7XG4gICAgICAgIGlmIChyb290Tm9kZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICBsb2NhbFJlc2V0Q291bnRlciAhPT0gX3Jlc2V0Q291bnRlciB8fFxuICAgICAgICAgICAgKG1heENhY2hlU2l6ZSA+IDAgJiYgY2FjaGVTaXplID4gbWF4Q2FjaGVTaXplKSkge1xuICAgICAgICAgICAgcm9vdE5vZGUgPSBfY3JlYXRlTm9kZSgpO1xuICAgICAgICAgICAgY2FjaGVTaXplID0gMDtcbiAgICAgICAgICAgIGxvY2FsUmVzZXRDb3VudGVyID0gX3Jlc2V0Q291bnRlcjtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50Tm9kZSA9IHJvb3ROb2RlO1xuICAgICAgICAvLyBUcmF2ZXJzZSB0aGUgdHJlZSB1bnRpbCB3ZSBmaW5kIHRoZSBtYXRjaC5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYXJnID0gX25vcm1hbGl6ZUFyZyhhcmdzW2ldKTtcbiAgICAgICAgICAgIGlmICghY3VycmVudE5vZGUubWFwLmhhcyhhcmcpKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudE5vZGUubWFwLnNldChhcmcsIF9jcmVhdGVOb2RlKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5tYXAuZ2V0KGFyZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjdXJyZW50Tm9kZS5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSkge1xuICAgICAgICAgICAgY3VycmVudE5vZGUudmFsdWUgPSBjYi5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgICAgICAgICAgY2FjaGVTaXplKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlnbm9yZU51bGxPclVuZGVmaW5lZFJlc3VsdCAmJiAoY3VycmVudE5vZGUudmFsdWUgPT09IG51bGwgfHwgY3VycmVudE5vZGUudmFsdWUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIGN1cnJlbnROb2RlLnZhbHVlID0gY2IuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3VycmVudE5vZGUudmFsdWU7XG4gICAgfTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG1lbW9pemVyIGZvciBhIHNpbmdsZS12YWx1ZSBmdW5jdGlvbiwgYmFja2VkIGJ5IGEgV2Vha01hcC5cbiAqIFdpdGggYSBXZWFrTWFwLCB0aGUgbWVtb2l6ZWQgdmFsdWVzIGFyZSBvbmx5IGtlcHQgYXMgbG9uZyBhcyB0aGUgc291cmNlIG9iamVjdHMsXG4gKiBlbnN1cmluZyB0aGF0IHRoZXJlIGlzIG5vIG1lbW9yeSBsZWFrLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gYXNzdW1lcyB0aGF0IHRoZSBpbnB1dCB2YWx1ZXMgcGFzc2VkIHRvIHRoZSB3cmFwcGVkIGZ1bmN0aW9uIHdpbGwgYmVcbiAqIGBmdW5jdGlvbmAgb3IgYG9iamVjdGAgdHlwZXMuIFRvIG1lbW9pemUgZnVuY3Rpb25zIHdoaWNoIGFjY2VwdCBvdGhlciBpbnB1dHMsIHVzZVxuICogYG1lbW9pemVGdW5jdGlvbmAsIHdoaWNoIG1lbW9pemVzIGFnYWluc3QgYXJiaXRyYXJ5IGlucHV0cyB1c2luZyBhIGxvb2t1cCBjYWNoZS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNZW1vaXplcihnZXRWYWx1ZSkge1xuICAgIGlmICghX3dlYWtNYXApIHtcbiAgICAgICAgLy8gV2l0aG91dCBhIGBXZWFrTWFwYCBpbXBsZW1lbnRhdGlvbiwgbWVtb2l6YXRpb24gaXMgbm90IHBvc3NpYmxlLlxuICAgICAgICByZXR1cm4gZ2V0VmFsdWU7XG4gICAgfVxuICAgIHZhciBjYWNoZSA9IG5ldyBfd2Vha01hcCgpO1xuICAgIGZ1bmN0aW9uIG1lbW9pemVkR2V0VmFsdWUoaW5wdXQpIHtcbiAgICAgICAgaWYgKCFpbnB1dCB8fCAodHlwZW9mIGlucHV0ICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBpbnB1dCAhPT0gJ29iamVjdCcpKSB7XG4gICAgICAgICAgICAvLyBBIFdlYWtNYXAgY2FuIG9ubHkgYmUgdXNlZCB0byB0ZXN0IGFnYWluc3QgcmVmZXJlbmNlIHZhbHVlcywgaS5lLiAnZnVuY3Rpb24nIGFuZCAnb2JqZWN0Jy5cbiAgICAgICAgICAgIC8vIEFsbCBvdGhlciBpbnB1dHMgY2Fubm90IGJlIG1lbW9pemVkIGFnYWluc3QgaW4gdGhpcyBtYW5uZXIuXG4gICAgICAgICAgICByZXR1cm4gZ2V0VmFsdWUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYWNoZS5oYXMoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGUuZ2V0KGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShpbnB1dCk7XG4gICAgICAgIGNhY2hlLnNldChpbnB1dCwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBtZW1vaXplZEdldFZhbHVlO1xufVxuZnVuY3Rpb24gX25vcm1hbGl6ZUFyZyh2YWwpIHtcbiAgICBpZiAoIXZhbCkge1xuICAgICAgICByZXR1cm4gX2VtcHR5T2JqZWN0O1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFfZGljdGlvbmFyeVt2YWxdKSB7XG4gICAgICAgIF9kaWN0aW9uYXJ5W3ZhbF0gPSB7IHZhbDogdmFsIH07XG4gICAgfVxuICAgIHJldHVybiBfZGljdGlvbmFyeVt2YWxdO1xufVxuZnVuY3Rpb24gX2NyZWF0ZU5vZGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWFwOiBfd2Vha01hcCA/IG5ldyBfd2Vha01hcCgpIDogbnVsbCxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVtb2l6ZS5qcy5tYXAiLCIvKipcbiAqIFNpbXVsYXRlZCBlbnVtIGZvciBrZXljb2Rlcy4gVGhlc2Ugd2lsbCBnZXQgaW5saW5lZCBieSB1Z2xpZnkgd2hlbiB1c2VkIG11Y2ggbGlrZSBhbiBlbnVtXG4gKlxuICogQHB1YmxpY1xuICoge0Bkb2NDYXRlZ29yeSBLZXlDb2Rlc31cbiAqL1xuZXhwb3J0IHZhciBLZXlDb2RlcyA9IHtcbiAgICBiYWNrc3BhY2U6IDgsXG4gICAgdGFiOiA5LFxuICAgIGVudGVyOiAxMyxcbiAgICBzaGlmdDogMTYsXG4gICAgY3RybDogMTcsXG4gICAgYWx0OiAxOCxcbiAgICBwYXVzZUJyZWFrOiAxOSxcbiAgICBjYXBzbG9jazogMjAsXG4gICAgZXNjYXBlOiAyNyxcbiAgICBzcGFjZTogMzIsXG4gICAgcGFnZVVwOiAzMyxcbiAgICBwYWdlRG93bjogMzQsXG4gICAgZW5kOiAzNSxcbiAgICBob21lOiAzNixcbiAgICBsZWZ0OiAzNyxcbiAgICB1cDogMzgsXG4gICAgcmlnaHQ6IDM5LFxuICAgIGRvd246IDQwLFxuICAgIGluc2VydDogNDUsXG4gICAgZGVsOiA0NixcbiAgICB6ZXJvOiA0OCxcbiAgICBvbmU6IDQ5LFxuICAgIHR3bzogNTAsXG4gICAgdGhyZWU6IDUxLFxuICAgIGZvdXI6IDUyLFxuICAgIGZpdmU6IDUzLFxuICAgIHNpeDogNTQsXG4gICAgc2V2ZW46IDU1LFxuICAgIGVpZ2h0OiA1NixcbiAgICBuaW5lOiA1NyxcbiAgICBhOiA2NSxcbiAgICBiOiA2NixcbiAgICBjOiA2NyxcbiAgICBkOiA2OCxcbiAgICBlOiA2OSxcbiAgICBmOiA3MCxcbiAgICBnOiA3MSxcbiAgICBoOiA3MixcbiAgICBpOiA3MyxcbiAgICBqOiA3NCxcbiAgICBrOiA3NSxcbiAgICBsOiA3NixcbiAgICBtOiA3NyxcbiAgICBuOiA3OCxcbiAgICBvOiA3OSxcbiAgICBwOiA4MCxcbiAgICBxOiA4MSxcbiAgICByOiA4MixcbiAgICBzOiA4MyxcbiAgICB0OiA4NCxcbiAgICB1OiA4NSxcbiAgICB2OiA4NixcbiAgICB3OiA4NyxcbiAgICB4OiA4OCxcbiAgICB5OiA4OSxcbiAgICB6OiA5MCxcbiAgICBsZWZ0V2luZG93OiA5MSxcbiAgICByaWdodFdpbmRvdzogOTIsXG4gICAgc2VsZWN0OiA5MyxcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cbiAgICB6ZXJvX251bXBhZDogOTYsXG4gICAgb25lX251bXBhZDogOTcsXG4gICAgdHdvX251bXBhZDogOTgsXG4gICAgdGhyZWVfbnVtcGFkOiA5OSxcbiAgICBmb3VyX251bXBhZDogMTAwLFxuICAgIGZpdmVfbnVtcGFkOiAxMDEsXG4gICAgc2l4X251bXBhZDogMTAyLFxuICAgIHNldmVuX251bXBhZDogMTAzLFxuICAgIGVpZ2h0X251bXBhZDogMTA0LFxuICAgIG5pbmVfbnVtcGFkOiAxMDUsXG4gICAgLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cbiAgICBtdWx0aXBseTogMTA2LFxuICAgIGFkZDogMTA3LFxuICAgIHN1YnRyYWN0OiAxMDksXG4gICAgZGVjaW1hbFBvaW50OiAxMTAsXG4gICAgZGl2aWRlOiAxMTEsXG4gICAgZjE6IDExMixcbiAgICBmMjogMTEzLFxuICAgIGYzOiAxMTQsXG4gICAgZjQ6IDExNSxcbiAgICBmNTogMTE2LFxuICAgIGY2OiAxMTcsXG4gICAgZjc6IDExOCxcbiAgICBmODogMTE5LFxuICAgIGY5OiAxMjAsXG4gICAgZjEwOiAxMjEsXG4gICAgZjExOiAxMjIsXG4gICAgZjEyOiAxMjMsXG4gICAgbnVtbG9jazogMTQ0LFxuICAgIHNjcm9sbExvY2s6IDE0NSxcbiAgICBzZW1pY29sb246IDE4NixcbiAgICBlcXVhbFNpZ246IDE4NyxcbiAgICBjb21tYTogMTg4LFxuICAgIGRhc2g6IDE4OSxcbiAgICBwZXJpb2Q6IDE5MCxcbiAgICBmb3J3YXJkU2xhc2g6IDE5MSxcbiAgICBncmF2ZUFjY2VudDogMTkyLFxuICAgIG9wZW5CcmFja2V0OiAyMTksXG4gICAgYmFja1NsYXNoOiAyMjAsXG4gICAgY2xvc2VCcmFja2V0OiAyMjEsXG4gICAgc2luZ2xlUXVvdGU6IDIyMixcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1LZXlDb2Rlcy5qcy5tYXAiLCJleHBvcnQgdmFyIF9pc1NTUiA9IGZhbHNlO1xuLyoqXG4gKiBIZWxwZXIgdG8gc2V0IHNzciBtb2RlIHRvIHNpbXVsYXRlIG5vIHdpbmRvdyBvYmplY3QgcmV0dXJuZWQgZnJvbSBnZXRXaW5kb3cgaGVscGVyLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFNTUihpc0VuYWJsZWQpIHtcbiAgICBfaXNTU1IgPSBpc0VuYWJsZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXRTU1IuanMubWFwIiwiaW1wb3J0IHsgX2lzU1NSIH0gZnJvbSAnLi9zZXRTU1InO1xuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IHRoZSBkb2N1bWVudCBvYmplY3QuIE5vdGUgdGhhdCBpbiBwb3B1cCB3aW5kb3cgY2FzZXMsIGRvY3VtZW50XG4gKiBtaWdodCBiZSB0aGUgd3JvbmcgZG9jdW1lbnQsIHdoaWNoIGlzIHdoeSB3ZSBsb29rIGF0IG93bmVyRG9jdW1lbnQgZm9yIHRoZVxuICogdHJ1dGguIEFsc28gbm90ZSB0aGF0IHRoZSBTU1IgZmxhZyBpcyB1c2VkIHRvIHRlc3Qgc3NyIHNjZW5hcmlvcyBldmVuIGlmXG4gKiBkb2N1bWVudCBpcyBkZWZpbmVkIChmcm9tIEpTRE9NIGZvciBleGFtcGxlLilcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREb2N1bWVudChyb290RWxlbWVudCkge1xuICAgIGlmIChfaXNTU1IgfHwgdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGVsID0gcm9vdEVsZW1lbnQ7XG4gICAgICAgIHJldHVybiBlbCAmJiBlbC5vd25lckRvY3VtZW50ID8gZWwub3duZXJEb2N1bWVudCA6IGRvY3VtZW50O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldERvY3VtZW50LmpzLm1hcCIsImltcG9ydCB7IF9pc1NTUiB9IGZyb20gJy4vc2V0U1NSJztcbnZhciBfd2luZG93ID0gdW5kZWZpbmVkO1xuLy8gTm90ZTogQWNjZXNzaW5nIFwid2luZG93XCIgaW4gSUUxMSBpcyBzb21ld2hhdCBleHBlbnNpdmUsIGFuZCBjYWxsaW5nIFwidHlwZW9mIHdpbmRvd1wiXG4vLyBoaXRzIGEgbWVtb3J5IGxlYWssIHdoZXJlYXMgYWxpYXNpbmcgaXQgYW5kIGNhbGxpbmcgXCJ0eXBlb2YgX3dpbmRvd1wiIGRvZXMgbm90LlxuLy8gQ2FjaGluZyB0aGUgd2luZG93IHZhbHVlIGF0IHRoZSBmaWxlIHNjb3BlIGxldHMgdXMgbWluaW1pemUgdGhlIGltcGFjdC5cbnRyeSB7XG4gICAgX3dpbmRvdyA9IHdpbmRvdztcbn1cbmNhdGNoIChlKSB7XG4gICAgLyogbm8tb3AgKi9cbn1cbi8qKlxuICogSGVscGVyIHRvIGdldCB0aGUgd2luZG93IG9iamVjdC4gVGhlIGhlbHBlciB3aWxsIG1ha2Ugc3VyZSB0byB1c2UgYSBjYWNoZWQgdmFyaWFibGVcbiAqIG9mIFwid2luZG93XCIsIHRvIGF2b2lkIG92ZXJoZWFkIGFuZCBtZW1vcnkgbGVha3MgaW4gSUUxMS4gTm90ZSB0aGF0IGluIHBvcHVwIHNjZW5hcmlvcyB0aGVcbiAqIHdpbmRvdyBvYmplY3Qgd29uJ3QgbWF0Y2ggdGhlIFwiZ2xvYmFsXCIgd2luZG93IG9iamVjdCwgYW5kIGZvciB0aGVzZSBzY2VuYXJpb3MsIHlvdSBzaG91bGRcbiAqIHBhc3MgaW4gYW4gZWxlbWVudCBob3N0ZWQgd2l0aGluIHRoZSBwb3B1cC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRXaW5kb3cocm9vdEVsZW1lbnQpIHtcbiAgICBpZiAoX2lzU1NSIHx8IHR5cGVvZiBfd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGVsID0gcm9vdEVsZW1lbnQ7XG4gICAgICAgIHJldHVybiBlbCAmJiBlbC5vd25lckRvY3VtZW50ICYmIGVsLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgPyBlbC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogX3dpbmRvdztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRXaW5kb3cuanMubWFwIiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnLi9kb20vZ2V0V2luZG93Jztcbi8qKlxuICogRmV0Y2hlcyBhbiBpdGVtIGZyb20gc2Vzc2lvbiBzdG9yYWdlIHdpdGhvdXQgdGhyb3dpbmcgYW4gZXhjZXB0aW9uXG4gKiBAcGFyYW0ga2V5IFRoZSBrZXkgb2YgdGhlIGl0ZW0gdG8gZmV0Y2ggZnJvbSBzZXNzaW9uIHN0b3JhZ2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEl0ZW0oa2V5KSB7XG4gICAgdmFyIHJlc3VsdCA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIHdpbiA9IGdldFdpbmRvdygpO1xuICAgICAgICByZXN1bHQgPSB3aW4gPyB3aW4uc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShrZXkpIDogbnVsbDtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgLyogRWF0IHRoZSBleGNlcHRpb24gKi9cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogSW5zZXJ0cyBhbiBpdGVtIGludG8gc2Vzc2lvbiBzdG9yYWdlIHdpdGhvdXQgdGhyb3dpbmcgYW4gZXhjZXB0aW9uXG4gKiBAcGFyYW0ga2V5IFRoZSBrZXkgb2YgdGhlIGl0ZW0gdG8gYWRkIHRvIHNlc3Npb24gc3RvcmFnZVxuICogQHBhcmFtIGRhdGEgVGhlIGRhdGEgdG8gcHV0IGludG8gc2Vzc2lvbiBzdG9yYWdlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRJdGVtKGtleSwgZGF0YSkge1xuICAgIHZhciBfYTtcbiAgICB0cnkge1xuICAgICAgICAoX2EgPSBnZXRXaW5kb3coKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oa2V5LCBkYXRhKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgLyogRWF0IHRoZSBleGNlcHRpb24gKi9cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXNzaW9uU3RvcmFnZS5qcy5tYXAiLCJpbXBvcnQgeyBLZXlDb2RlcyB9IGZyb20gJy4vS2V5Q29kZXMnO1xuaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICcuL2RvbS9nZXREb2N1bWVudCc7XG5pbXBvcnQgeyBnZXRJdGVtLCBzZXRJdGVtIH0gZnJvbSAnLi9zZXNzaW9uU3RvcmFnZSc7XG5pbXBvcnQgeyBzZXRSVEwgYXMgbWVyZ2VTdHlsZXNTZXRSVEwgfSBmcm9tICdAdWlmYWJyaWMvbWVyZ2Utc3R5bGVzJztcbnZhciBSVExfTE9DQUxfU1RPUkFHRV9LRVkgPSAnaXNSVEwnO1xuLy8gRGVmYXVsdCB0byB1bmRlZmluZWQgc28gdGhhdCB3ZSBpbml0aWFsaXplIG9uIGZpcnN0IHJlYWQuXG52YXIgX2lzUlRMO1xuLyoqXG4gKiBHZXRzIHRoZSBydGwgc3RhdGUgb2YgdGhlIHBhZ2UgKHJldHVybnMgdHJ1ZSBpZiBpbiBydGwuKVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UlRMKHRoZW1lKSB7XG4gICAgaWYgKHRoZW1lID09PSB2b2lkIDApIHsgdGhlbWUgPSB7fTsgfVxuICAgIGlmICh0aGVtZS5ydGwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGhlbWUucnRsO1xuICAgIH1cbiAgICBpZiAoX2lzUlRMID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gRmFicmljIHN1cHBvcnRzIHBlcnNpc3RpbmcgdGhlIFJUTCBzZXR0aW5nIGJldHdlZW4gcGFnZSByZWZyZXNoZXMgdmlhIHNlc3Npb24gc3RvcmFnZVxuICAgICAgICB2YXIgc2F2ZWRSVEwgPSBnZXRJdGVtKFJUTF9MT0NBTF9TVE9SQUdFX0tFWSk7XG4gICAgICAgIGlmIChzYXZlZFJUTCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgX2lzUlRMID0gc2F2ZWRSVEwgPT09ICcxJztcbiAgICAgICAgICAgIHNldFJUTChfaXNSVEwpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkb2MgPSBnZXREb2N1bWVudCgpO1xuICAgICAgICBpZiAoX2lzUlRMID09PSB1bmRlZmluZWQgJiYgZG9jKSB7XG4gICAgICAgICAgICBfaXNSVEwgPSAoKGRvYy5ib2R5ICYmIGRvYy5ib2R5LmdldEF0dHJpYnV0ZSgnZGlyJykpIHx8IGRvYy5kb2N1bWVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkaXInKSkgPT09ICdydGwnO1xuICAgICAgICAgICAgbWVyZ2VTdHlsZXNTZXRSVEwoX2lzUlRMKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gISFfaXNSVEw7XG59XG4vKipcbiAqIFNldHMgdGhlIHJ0bCBzdGF0ZSBvZiB0aGUgcGFnZSAoYnkgYWRqdXN0aW5nIHRoZSBkaXIgYXR0cmlidXRlIG9mIHRoZSBodG1sIGVsZW1lbnQuKVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0UlRMKGlzUlRMLCBwZXJzaXN0U2V0dGluZykge1xuICAgIGlmIChwZXJzaXN0U2V0dGluZyA9PT0gdm9pZCAwKSB7IHBlcnNpc3RTZXR0aW5nID0gZmFsc2U7IH1cbiAgICB2YXIgZG9jID0gZ2V0RG9jdW1lbnQoKTtcbiAgICBpZiAoZG9jKSB7XG4gICAgICAgIGRvYy5kb2N1bWVudEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkaXInLCBpc1JUTCA/ICdydGwnIDogJ2x0cicpO1xuICAgIH1cbiAgICBpZiAocGVyc2lzdFNldHRpbmcpIHtcbiAgICAgICAgc2V0SXRlbShSVExfTE9DQUxfU1RPUkFHRV9LRVksIGlzUlRMID8gJzEnIDogJzAnKTtcbiAgICB9XG4gICAgX2lzUlRMID0gaXNSVEw7XG4gICAgbWVyZ2VTdHlsZXNTZXRSVEwoX2lzUlRMKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgZ2l2ZW4ga2V5LCBidXQgZmxpcHMgcmlnaHQvbGVmdCBhcnJvd3MgaWYgbmVjZXNzYXJ5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UlRMU2FmZUtleUNvZGUoa2V5LCB0aGVtZSkge1xuICAgIGlmICh0aGVtZSA9PT0gdm9pZCAwKSB7IHRoZW1lID0ge307IH1cbiAgICBpZiAoZ2V0UlRMKHRoZW1lKSkge1xuICAgICAgICBpZiAoa2V5ID09PSBLZXlDb2Rlcy5sZWZ0KSB7XG4gICAgICAgICAgICBrZXkgPSBLZXlDb2Rlcy5yaWdodDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09IEtleUNvZGVzLnJpZ2h0KSB7XG4gICAgICAgICAgICBrZXkgPSBLZXlDb2Rlcy5sZWZ0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ydGwuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tICd0c2xpYic7XG5leHBvcnQgdmFyIGFzc2lnbiA9IF9fYXNzaWduO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbGl0aWVzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX3NwcmVhZEFycmF5cyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbWVyZ2VDc3MgfSBmcm9tICdAdWlmYWJyaWMvbWVyZ2Utc3R5bGVzJztcbmltcG9ydCB7IGdldFJUTCwgbWVtb2l6ZUZ1bmN0aW9uIH0gZnJvbSAnQHVpZmFicmljL3V0aWxpdGllcyc7XG5pbXBvcnQgeyBhc3NpZ24gfSBmcm9tICcuL3V0aWxpdGllcyc7XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgcmVxdWlyZWQgZm9yIGFueSBtb2R1bGUgdGhhdCB1c2VzIHNsb3RzLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgYSBzbG90IHJlc29sdmVyIHRoYXQgYXV0b21hdGljYWxseSBldmFsdWF0ZXMgc2xvdCBmdW5jdGlvbnMgdG8gZ2VuZXJhdGUgUmVhY3QgZWxlbWVudHMuXG4gKiBBIGJ5cHJvZHVjdCBvZiB0aGlzIHJlc29sdmVyIGlzIHRoYXQgaXQgcmVtb3ZlcyBzbG90cyBmcm9tIHRoZSBSZWFjdCBoaWVyYXJjaHkgYnkgYnlwYXNzaW5nIFJlYWN0LmNyZWF0ZUVsZW1lbnQuXG4gKlxuICogVG8gdXNlIHRoaXMgZnVuY3Rpb24gb24gYSBwZXItZmlsZSBiYXNpcywgdXNlIHRoZSBqc3ggZGlyZWN0aXZlIHRhcmdldGluZyB3aXRoU2xvdHMuXG4gKiBUaGlzIGRpcmVjdGl2ZSBtdXN0IGJlIHRoZSBGSVJTVCBMSU5FIGluIHRoZSBmaWxlIHRvIHdvcmsgY29ycmVjdGx5LlxuICogVXNhZ2Ugb2YgdGhpcyBwcmFnbWEgYWxzbyByZXF1aXJlcyB3aXRoU2xvdHMgaW1wb3J0IHN0YXRlbWVudC5cbiAqXG4gKiBTZWUgUmVhY3QuY3JlYXRlRWxlbWVudFxuICovXG4vLyBDYW4ndCB1c2UgdHlwZW9mIG9uIFJlYWN0LmNyZWF0ZUVsZW1lbnQgc2luY2UgaXQncyBvdmVybG9hZGVkLiBBcHByb3hpbWF0ZSBjcmVhdGVFbGVtZW50J3Mgc2lnbmF0dXJlIGZvciBub3dcbi8vIGFuZCB3aWRlbiBhcyBuZWVkZWQuXG5leHBvcnQgZnVuY3Rpb24gd2l0aFNsb3RzKHR5cGUsIHByb3BzKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgY2hpbGRyZW5bX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBzbG90VHlwZSA9IHR5cGU7XG4gICAgaWYgKHNsb3RUeXBlLmlzU2xvdCkge1xuICAgICAgICAvLyBTaW5jZSB3ZSBhcmUgYnlwYXNzaW5nIGNyZWF0ZUVsZW1lbnQsIHVzZSBSZWFjdC5DaGlsZHJlbi50b0FycmF5IHRvIG1ha2Ugc3VyZSBjaGlsZHJlbiBhcmVcbiAgICAgICAgLy8gcHJvcGVybHkgYXNzaWduZWQga2V5cy5cbiAgICAgICAgLy8gVE9ETzogc2hvdWxkIHRoaXMgYmUgbXV0YXRpbmc/IGRvZXMgUmVhY3QgbXV0YXRlIGNoaWxkcmVuIHN1YnByb3Agd2l0aCBjcmVhdGVFbGVtZW50P1xuICAgICAgICAvLyBUT0RPOiB3aWxsIHRvQXJyYXkgY2xvYmJlciBleGlzdGluZyBrZXlzP1xuICAgICAgICAvLyBUT0RPOiBSZWFjdCBnZW5lcmF0ZXMgd2FybmluZ3MgYmVjYXVzZSBpdCBkb2Vzbid0IGRldGVjdCBoaWRkZW4gbWVtYmVyIF9zdG9yZSB0aGF0IGlzIHNldCBpbiBjcmVhdGVFbGVtZW50LlxuICAgICAgICAvLyAgICAgICAgRXZlbiBjaGlsZHJlbiBwYXNzZWQgdG8gY3JlYXRlRWxlbWVudCB3aXRob3V0IGtleXMgZG9uJ3QgZ2VuZXJhdGUgdGhpcyB3YXJuaW5nLlxuICAgICAgICAvLyAgICAgICAgSXMgdGhlcmUgYSBiZXR0ZXIgd2F5IHRvIHByZXZlbnQgc2xvdHMgZnJvbSBhcHBlYXJpbmcgaW4gaGllcmFyY2h5PyB0b0FycmF5IGRvZXNuJ3QgYWRkcmVzcyByb290IGlzc3VlLlxuICAgICAgICBjaGlsZHJlbiA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW4pO1xuICAgICAgICAvLyBUT0RPOiBUaGVyZSBpcyBzb21ldGhpbmcgd2VpcmQgZ29pbmcgb24gaGVyZSB3aXRoIGNoaWxkcmVuIGVtYmVkZGVkIGluIHByb3BzIHZzLiByZXN0IGFyZ3MuXG4gICAgICAgIC8vIENvbW1lbnQgb3V0IHRoZXNlIGxpbmVzIHRvIHNlZS4gTWFrZSBzdXJlIHRoaXMgZnVuY3Rpb24gaXMgZG9pbmcgdGhlIHJpZ2h0IHRoaW5ncy5cbiAgICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHNsb3RUeXBlKHByb3BzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2xvdFR5cGUoX19hc3NpZ24oX19hc3NpZ24oe30sIHByb3BzKSwgeyBjaGlsZHJlbjogY2hpbGRyZW4gfSkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gVE9ETzogQXJlIHRoZXJlIHNvbWUgY2FzZXMgd2hlcmUgY2hpbGRyZW4gc2hvdWxkIE5PVCBiZSBzcHJlYWQ/IEFsc28sIHNwcmVhZGluZyByZXJhaXNlcyBwZXJmIHF1ZXN0aW9uLlxuICAgICAgICAvLyAgICAgICAgQ2hpbGRyZW4gaGFkIHRvIGJlIHNwcmVhZCB0byBhdm9pZCBicmVha2luZyBLZXl0aXBEYXRhIGluIFRvZ2dsZS52aWV3OlxuICAgICAgICAvLyAgICAgICAgcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzOjE4OTMxIFVuY2F1Z2h0IFR5cGVFcnJvcjogY2hpbGRyZW4gaXMgbm90IGEgZnVuY3Rpb25cbiAgICAgICAgLy8gICAgICAgIFdpdGhvdXQgc3ByZWFkLCBmdW5jdGlvbiBjaGlsZCBpcyBhIGNoaWxkIGFycmF5IG9mIG9uZSBlbGVtZW50XG4gICAgICAgIC8vIFRPRE86IGlzIHRoZXJlIGEgcmVhc29uIHRoaXMgY2FuJ3QgYmU6XG4gICAgICAgIC8vIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50LmFwcGx5KFJlYWN0LCBfX3NwcmVhZEFycmF5cyhbdHlwZSwgcHJvcHNdLCBjaGlsZHJlbikpO1xuICAgIH1cbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBjcmVhdGVzIGZhY3RvcmllcyB0aGF0IHJlbmRlciBvdXB1dCBkZXBlbmRpbmcgb24gdGhlIHVzZXIgSVNsb3RQcm9wIHByb3BzIHBhc3NlZCBpbi5cbiAqIEBwYXJhbSBEZWZhdWx0Q29tcG9uZW50IC0gQmFzZSBjb21wb25lbnQgdG8gcmVuZGVyIHdoZW4gbm90IG92ZXJyaWRkZW4gYnkgdXNlciBwcm9wcy5cbiAqIEBwYXJhbSBvcHRpb25zIC0gRmFjdG9yeSBvcHRpb25zLCBpbmNsdWRpbmcgZGVmYXVsdFByb3AgdmFsdWUgZm9yIHNob3J0aGFuZCBwcm9wIG1hcHBpbmcuXG4gKiBAcmV0dXJucyBJU2xvdEZhY3RvcnkgZnVuY3Rpb24gdXNlZCBmb3IgcmVuZGVyaW5nIHNsb3RzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRmFjdG9yeShEZWZhdWx0Q29tcG9uZW50LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICB2YXIgX2EgPSBvcHRpb25zLmRlZmF1bHRQcm9wLCBkZWZhdWx0UHJvcCA9IF9hID09PSB2b2lkIDAgPyAnY2hpbGRyZW4nIDogX2E7XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmN0aW9uIChjb21wb25lbnRQcm9wcywgdXNlclByb3BzLCB1c2VyU2xvdE9wdGlvbnMsIGRlZmF1bHRTdHlsZXMsIHRoZW1lKSB7XG4gICAgICAgIC8vIElmIHRoZXkgcGFzc2VkIGluIHJhdyBKU1gsIGp1c3QgcmV0dXJuIHRoYXQuXG4gICAgICAgIGlmIChSZWFjdC5pc1ZhbGlkRWxlbWVudCh1c2VyUHJvcHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdXNlclByb3BzO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmbGF0dGVuZWRVc2VyUHJvcHMgPSBfdHJhbnNsYXRlU2hvcnRoYW5kKGRlZmF1bHRQcm9wLCB1c2VyUHJvcHMpO1xuICAgICAgICB2YXIgZmluYWxQcm9wcyA9IF9jb25zdHJ1Y3RGaW5hbFByb3BzKGRlZmF1bHRTdHlsZXMsIHRoZW1lLCBjb21wb25lbnRQcm9wcywgZmxhdHRlbmVkVXNlclByb3BzKTtcbiAgICAgICAgaWYgKHVzZXJTbG90T3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKHVzZXJTbG90T3B0aW9ucy5jb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBSZW1vdmUgY2FzdCBpZiBwb3NzaWJsZS4gVGhpcyBjYXN0IGlzIG5lZWRlZCBiZWNhdXNlIFRTIGVycm9ycyBvbiB0aGUgaW50cmluc2ljIHBvcnRpb24gb2YgUmVhY3RUeXBlLlxuICAgICAgICAgICAgICAgIC8vIHJldHVybiA8dXNlclNsb3RPcHRpb25zLmNvbXBvbmVudCB7Li4uZmluYWxQcm9wc30gLz47XG4gICAgICAgICAgICAgICAgdmFyIFVzZXJDb21wb25lbnQgPSB1c2VyU2xvdE9wdGlvbnMuY29tcG9uZW50O1xuICAgICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFVzZXJDb21wb25lbnQsIF9fYXNzaWduKHt9LCBmaW5hbFByb3BzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXNlclNsb3RPcHRpb25zLnJlbmRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB1c2VyU2xvdE9wdGlvbnMucmVuZGVyKGZpbmFsUHJvcHMsIERlZmF1bHRDb21wb25lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRDb21wb25lbnQsIF9fYXNzaWduKHt9LCBmaW5hbFByb3BzKSk7XG4gICAgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBEZWZhdWx0IGZhY3RvcnkgZm9yIGNvbXBvbmVudHMgd2l0aG91dCBleHBsaWNpdCBmYWN0b3JpZXMuXG4gKi9cbnZhciBkZWZhdWx0RmFjdG9yeSA9IG1lbW9pemVGdW5jdGlvbihmdW5jdGlvbiAodHlwZSkgeyByZXR1cm4gY3JlYXRlRmFjdG9yeSh0eXBlKTsgfSk7XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gZ2VuZXJhdGVzIHNsb3RzIHRoYXQgY2FuIGJlIHVzZWQgaW4gSlNYIGdpdmVuIGEgZGVmaW5pdGlvbiBvZiBzbG90cyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyB0eXBlcy5cbiAqIEBwYXJhbSB1c2VyUHJvcHMgLSBQcm9wcyBhcyBwYXNzIHRvIGNvbXBvbmVudC5cbiAqIEBwYXJhbSBzbG90cyAtIFNsb3QgZGVmaW5pdGlvbiBvYmplY3QgZGVmaW5pbmcgdGhlIGRlZmF1bHQgc2xvdCBjb21wb25lbnQgZm9yIGVhY2ggc2xvdC5cbiAqIEByZXR1cm5zIEEgc2V0IG9mIGNyZWF0ZWQgc2xvdHMgdGhhdCBjb21wb25lbnRzIGNhbiByZW5kZXIgaW4gSlNYLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2xvdHModXNlclByb3BzLCBzbG90cykge1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAvLyB1c2VyUHJvcHMgYWxyZWFkeSBoYXMgZGVmYXVsdCBwcm9wcyBtaXhlZCBpbiBieSBjcmVhdGVDb21wb25lbnQuIFJlY2FzdCBoZXJlIHRvIGdhaW4gdHlwaW5nIGZvciB0aGlzIGZ1bmN0aW9uLlxuICAgIHZhciBtaXhlZFByb3BzID0gdXNlclByb3BzO1xuICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKG5hbWVfMSkge1xuICAgICAgICBpZiAoc2xvdHMuaGFzT3duUHJvcGVydHkobmFtZV8xKSkge1xuICAgICAgICAgICAgLy8gVGhpcyBjbG9zdXJlIG1ldGhvZCByZXF1aXJlcyB0aGUgdXNlIG9mIHdpdGhTbG90cyB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IHJlcmVuZGVycy4gVGhpcyBpcyBiZWNhdXNlIFJlYWN0XG4gICAgICAgICAgICAvLyBkZXRlY3RzIGVhY2ggY2xvc3VyZSBhcyBhIGRpZmZlcmVudCBjb21wb25lbnQgKHNpbmNlIGl0IGlzIGEgbmV3IGluc3RhbmNlKSBmcm9tIHRoZSBwcmV2aW91cyBvbmUgYW5kIHRoZW5cbiAgICAgICAgICAgIC8vIGZvcmNlcyBhIHJlcmVuZGVyIG9mIHRoZSBlbnRpcmUgc2xvdCBzdWJ0cmVlLiBGb3Igbm93LCB0aGUgb25seSB3YXkgdG8gYXZvaWQgdGhpcyBpcyB0byB1c2Ugd2l0aFNsb3RzLCB3aGljaFxuICAgICAgICAgICAgLy8gYnlwYXNzZXMgdGhlIGNhbGwgdG8gUmVhY3QuY3JlYXRlRWxlbWVudC5cbiAgICAgICAgICAgIHZhciBzbG90ID0gZnVuY3Rpb24gKGNvbXBvbmVudFByb3BzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIFJlYWN0LmNyZWF0ZUVsZW1lbnQgaXMgYmVpbmcgaW5jb3JyZWN0bHkgdXNlZCB3aXRoIHNsb3RzLCB0aGVyZSB3aWxsIGJlIGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBjYW4gZGV0ZWN0IHRoZXNlIGFkZGl0aW9uYWwgYXJndW1lbnRzIGFuZCBlcnJvciBvbiB0aGVpciBwcmVzZW5jZS5cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBbnkgbW9kdWxlIHVzaW5nIGdldFNsb3RzIG11c3QgdXNlIHdpdGhTbG90cy4gUGxlYXNlIHNlZSB3aXRoU2xvdHMgamF2YWRvYyBmb3IgbW9yZSBpbmZvLicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBoYXZpbmcgVFMgaW5mZXIgdHlwZXMgaGVyZSBzZWVtcyB0byBjYXVzZSBpbmZpbml0ZSBsb29wLlxuICAgICAgICAgICAgICAgIC8vICAgdXNlIGV4cGxpY2l0IHR5cGVzIG9yIGNhc3RpbmcgdG8gcHJlc2VydmUgdHlwaW5nIGlmIHBvc3NpYmxlLlxuICAgICAgICAgICAgICAgIC8vIFRPRE86IHRoaXMgc2hvdWxkIGJlIGEgbG9va3VwIG9uIFRQcm9wcyBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGJlaW5nIFRQcm9wcyBkaXJlY3RseSwgd2hpY2ggaXMgcHJvYmFibHlcbiAgICAgICAgICAgICAgICAvLyAgIGNhdXNpbmcgdGhlIGluZmluaXRlIGxvb3BcbiAgICAgICAgICAgICAgICByZXR1cm4gX3JlbmRlclNsb3Qoc2xvdHNbbmFtZV8xXSwgXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogdGhpcyBjYXN0IHRvIGFueSBpcyBoaWRpbmcgYSByZWxhdGlvbnNoaXAgaXNzdWUgYmV0d2VlbiB0aGUgZmlyc3QgdHdvIGFyZ3NcbiAgICAgICAgICAgICAgICBjb21wb25lbnRQcm9wcywgbWl4ZWRQcm9wc1tuYW1lXzFdLCBtaXhlZFByb3BzLnNsb3RzICYmIG1peGVkUHJvcHMuc2xvdHNbbmFtZV8xXSwgXG4gICAgICAgICAgICAgICAgLy8gX2RlZmF1bHRTdHlsZXMgc2hvdWxkIGFsd2F5cyBiZSBwcmVzZW50LCBidXQgYSBjaGVjayBmb3IgZXhpc3RlbmNlIGlzIGFkZGVkIHRvIG1ha2UgdmlldyB0ZXN0c1xuICAgICAgICAgICAgICAgIC8vIGVhc2llciB0byB1c2UuXG4gICAgICAgICAgICAgICAgbWl4ZWRQcm9wcy5fZGVmYXVsdFN0eWxlcyAmJiBtaXhlZFByb3BzLl9kZWZhdWx0U3R5bGVzW25hbWVfMV0sIG1peGVkUHJvcHMudGhlbWUpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNsb3QuaXNTbG90ID0gdHJ1ZTtcbiAgICAgICAgICAgIHJlc3VsdFtuYW1lXzFdID0gc2xvdDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgZm9yICh2YXIgbmFtZV8xIGluIHNsb3RzKSB7XG4gICAgICAgIF9sb29wXzEobmFtZV8xKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRoYXQgdHJhbnNsYXRlcyBzaG9ydGhhbmQgYXMgbmVlZGVkLlxuICogQHBhcmFtIGRlZmF1bHRQcm9wXG4gKiBAcGFyYW0gc2xvdFByb3BzXG4gKi9cbmZ1bmN0aW9uIF90cmFuc2xhdGVTaG9ydGhhbmQoZGVmYXVsdFByb3AsIHNsb3RQcm9wcykge1xuICAgIHZhciBfYTtcbiAgICB2YXIgdHJhbnNmb3JtZWRQcm9wcztcbiAgICBpZiAodHlwZW9mIHNsb3RQcm9wcyA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHNsb3RQcm9wcyA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHNsb3RQcm9wcyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHRyYW5zZm9ybWVkUHJvcHMgPSAoX2EgPSB7fSxcbiAgICAgICAgICAgIF9hW2RlZmF1bHRQcm9wXSA9IHNsb3RQcm9wcyxcbiAgICAgICAgICAgIF9hKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRyYW5zZm9ybWVkUHJvcHMgPSBzbG90UHJvcHM7XG4gICAgfVxuICAgIHJldHVybiB0cmFuc2Zvcm1lZFByb3BzO1xufVxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdGhhdCBjb25zdHJ1Y3RzIGZpbmFsIHN0eWxlcyBhbmQgcHJvcHMgZ2l2ZW4gYSBzZXJpZXMgb2YgcHJvcHMgb3JkZXJlZCBieSBpbmNyZWFzaW5nIHByaW9yaXR5LlxuICovXG5mdW5jdGlvbiBfY29uc3RydWN0RmluYWxQcm9wcyhkZWZhdWx0U3R5bGVzLCB0aGVtZSkge1xuICAgIHZhciBhbGxQcm9wcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFsbFByb3BzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgZmluYWxQcm9wcyA9IHt9O1xuICAgIHZhciBjbGFzc05hbWVzID0gW107XG4gICAgZm9yICh2YXIgX2EgPSAwLCBhbGxQcm9wc18xID0gYWxsUHJvcHM7IF9hIDwgYWxsUHJvcHNfMS5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgdmFyIHByb3BzID0gYWxsUHJvcHNfMVtfYV07XG4gICAgICAgIGNsYXNzTmFtZXMucHVzaChwcm9wcyAmJiBwcm9wcy5jbGFzc05hbWUpO1xuICAgICAgICBhc3NpZ24oZmluYWxQcm9wcywgcHJvcHMpO1xuICAgIH1cbiAgICBmaW5hbFByb3BzLmNsYXNzTmFtZSA9IG1lcmdlQ3NzKFtkZWZhdWx0U3R5bGVzLCBjbGFzc05hbWVzXSwgeyBydGw6IGdldFJUTCh0aGVtZSkgfSk7XG4gICAgcmV0dXJuIGZpbmFsUHJvcHM7XG59XG4vKipcbiAqIFJlbmRlciBhIHNsb3QgZ2l2ZW4gY29tcG9uZW50IGFuZCB1c2VyIHByb3BzLiBVc2VzIGNvbXBvbmVudCBmYWN0b3J5IGlmIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGZhbGxzIGJhY2tcbiAqIHRvIGRlZmF1bHQgZmFjdG9yeS5cbiAqIEBwYXJhbSBDb21wb25lbnRUeXBlIEZhY3RvcnkgY29tcG9uZW50IHR5cGUuXG4gKiBAcGFyYW0gY29tcG9uZW50UHJvcHMgVGhlIHByb3BlcnRpZXMgcGFzc2VkIGludG8gc2xvdCBmcm9tIHdpdGhpbiB0aGUgY29tcG9uZW50LlxuICogQHBhcmFtIHVzZXJQcm9wcyBUaGUgdXNlciBwcm9wZXJ0aWVzIHBhc3NlZCBpbiBmcm9tIG91dHNpZGUgb2YgdGhlIGNvbXBvbmVudC5cbiAqL1xuZnVuY3Rpb24gX3JlbmRlclNsb3QoQ29tcG9uZW50VHlwZSwgY29tcG9uZW50UHJvcHMsIHVzZXJQcm9wcywgc2xvdE9wdGlvbnMsIGRlZmF1bHRTdHlsZXMsIHRoZW1lKSB7XG4gICAgaWYgKENvbXBvbmVudFR5cGUuY3JlYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIENvbXBvbmVudFR5cGUuY3JlYXRlKGNvbXBvbmVudFByb3BzLCB1c2VyUHJvcHMsIHNsb3RPcHRpb25zLCBkZWZhdWx0U3R5bGVzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIFRPRE86IG5lZWQgdG8gcmVzb2x2ZSB0eXBpbmcgLyBnZW5lcmljIGlzc3VlcyBwYXNzaW5nIHRocm91Z2ggbWVtb2l6ZUZ1bmN0aW9uLiBmb3Igbm93LCBjYXN0IHRvICd1bmtub3duJ1xuICAgICAgICByZXR1cm4gZGVmYXVsdEZhY3RvcnkoQ29tcG9uZW50VHlwZSkoY29tcG9uZW50UHJvcHMsIHVzZXJQcm9wcywgc2xvdE9wdGlvbnMsIGRlZmF1bHRTdHlsZXMsIHRoZW1lKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zbG90cy5qcy5tYXAiLCJpbXBvcnQgeyBnZXRTdHlsZU9wdGlvbnMgfSBmcm9tICcuL1N0eWxlT3B0aW9uc1N0YXRlJztcbmltcG9ydCB7IFN0eWxlc2hlZXQgfSBmcm9tICcuL1N0eWxlc2hlZXQnO1xuaW1wb3J0IHsgc2VyaWFsaXplUnVsZUVudHJpZXMgfSBmcm9tICcuL3N0eWxlVG9DbGFzc05hbWUnO1xuLyoqXG4gKiBSZWdpc3RlcnMga2V5ZnJhbWUgZGVmaW5pdGlvbnMuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24ga2V5ZnJhbWVzKHRpbWVsaW5lKSB7XG4gICAgdmFyIHN0eWxlc2hlZXQgPSBTdHlsZXNoZWV0LmdldEluc3RhbmNlKCk7XG4gICAgdmFyIG5hbWUgPSBzdHlsZXNoZWV0LmdldENsYXNzTmFtZSgpO1xuICAgIHZhciBydWxlc0FycmF5ID0gW107XG4gICAgZm9yICh2YXIgcHJvcCBpbiB0aW1lbGluZSkge1xuICAgICAgICBpZiAodGltZWxpbmUuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgICAgIHJ1bGVzQXJyYXkucHVzaChwcm9wLCAneycsIHNlcmlhbGl6ZVJ1bGVFbnRyaWVzKGdldFN0eWxlT3B0aW9ucygpLCB0aW1lbGluZVtwcm9wXSksICd9Jyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHJ1bGVzID0gcnVsZXNBcnJheS5qb2luKCcnKTtcbiAgICBzdHlsZXNoZWV0Lmluc2VydFJ1bGUoXCJAa2V5ZnJhbWVzIFwiICsgbmFtZSArIFwie1wiICsgcnVsZXMgKyBcIn1cIiwgdHJ1ZSk7XG4gICAgc3R5bGVzaGVldC5jYWNoZUNsYXNzTmFtZShuYW1lLCBydWxlcywgW10sIFsna2V5ZnJhbWVzJywgcnVsZXNdKTtcbiAgICByZXR1cm4gbmFtZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtleWZyYW1lcy5qcy5tYXAiLCJpbXBvcnQgeyBrZXlmcmFtZXMgfSBmcm9tICdAdWlmYWJyaWMvbWVyZ2Utc3R5bGVzJztcbi8qIFJlZ2lzdGVyIHRoZSBrZXlmcmFtZXMgKi9cbnZhciBFQVNJTkdfRlVOQ1RJT05fMSA9ICdjdWJpYy1iZXppZXIoLjEsLjksLjIsMSknO1xudmFyIEVBU0lOR19GVU5DVElPTl8yID0gJ2N1YmljLWJlemllciguMSwuMjUsLjc1LC45KSc7XG52YXIgRFVSQVRJT05fMSA9ICcwLjE2N3MnO1xudmFyIERVUkFUSU9OXzIgPSAnMC4yNjdzJztcbnZhciBEVVJBVElPTl8zID0gJzAuMzY3cyc7XG52YXIgRFVSQVRJT05fNCA9ICcwLjQ2N3MnO1xudmFyIEZBREVfSU4gPSBrZXlmcmFtZXMoe1xuICAgIGZyb206IHsgb3BhY2l0eTogMCB9LFxuICAgIHRvOiB7IG9wYWNpdHk6IDEgfSxcbn0pO1xudmFyIEZBREVfT1VUID0ga2V5ZnJhbWVzKHtcbiAgICBmcm9tOiB7IG9wYWNpdHk6IDEgfSxcbiAgICB0bzogeyBvcGFjaXR5OiAwLCB2aXNpYmlsaXR5OiAnaGlkZGVuJyB9LFxufSk7XG52YXIgU0xJREVfUklHSFRfSU4xMCA9IF9jcmVhdGVTbGlkZUluWCgtMTApO1xudmFyIFNMSURFX1JJR0hUX0lOMjAgPSBfY3JlYXRlU2xpZGVJblgoLTIwKTtcbnZhciBTTElERV9SSUdIVF9JTjQwID0gX2NyZWF0ZVNsaWRlSW5YKC00MCk7XG52YXIgU0xJREVfUklHSFRfSU40MDAgPSBfY3JlYXRlU2xpZGVJblgoLTQwMCk7XG52YXIgU0xJREVfTEVGVF9JTjEwID0gX2NyZWF0ZVNsaWRlSW5YKDEwKTtcbnZhciBTTElERV9MRUZUX0lOMjAgPSBfY3JlYXRlU2xpZGVJblgoMjApO1xudmFyIFNMSURFX0xFRlRfSU40MCA9IF9jcmVhdGVTbGlkZUluWCg0MCk7XG52YXIgU0xJREVfTEVGVF9JTjQwMCA9IF9jcmVhdGVTbGlkZUluWCg0MDApO1xudmFyIFNMSURFX1VQX0lOMTAgPSBfY3JlYXRlU2xpZGVJblkoMTApO1xudmFyIFNMSURFX1VQX0lOMjAgPSBfY3JlYXRlU2xpZGVJblkoMjApO1xudmFyIFNMSURFX0RPV05fSU4xMCA9IF9jcmVhdGVTbGlkZUluWSgtMTApO1xudmFyIFNMSURFX0RPV05fSU4yMCA9IF9jcmVhdGVTbGlkZUluWSgtMjApO1xudmFyIFNMSURFX1JJR0hUX09VVDEwID0gX2NyZWF0ZVNsaWRlT3V0WCgxMCk7XG52YXIgU0xJREVfUklHSFRfT1VUMjAgPSBfY3JlYXRlU2xpZGVPdXRYKDIwKTtcbnZhciBTTElERV9SSUdIVF9PVVQ0MCA9IF9jcmVhdGVTbGlkZU91dFgoNDApO1xudmFyIFNMSURFX1JJR0hUX09VVDQwMCA9IF9jcmVhdGVTbGlkZU91dFgoNDAwKTtcbnZhciBTTElERV9MRUZUX09VVDEwID0gX2NyZWF0ZVNsaWRlT3V0WCgtMTApO1xudmFyIFNMSURFX0xFRlRfT1VUMjAgPSBfY3JlYXRlU2xpZGVPdXRYKC0yMCk7XG52YXIgU0xJREVfTEVGVF9PVVQ0MCA9IF9jcmVhdGVTbGlkZU91dFgoLTQwKTtcbnZhciBTTElERV9MRUZUX09VVDQwMCA9IF9jcmVhdGVTbGlkZU91dFgoLTQwMCk7XG52YXIgU0xJREVfVVBfT1VUMTAgPSBfY3JlYXRlU2xpZGVPdXRZKC0xMCk7XG52YXIgU0xJREVfVVBfT1VUMjAgPSBfY3JlYXRlU2xpZGVPdXRZKC0yMCk7XG52YXIgU0xJREVfRE9XTl9PVVQxMCA9IF9jcmVhdGVTbGlkZU91dFkoMTApO1xudmFyIFNMSURFX0RPV05fT1VUMjAgPSBfY3JlYXRlU2xpZGVPdXRZKDIwKTtcbnZhciBTQ0FMRV9VUDEwMCA9IGtleWZyYW1lcyh7XG4gICAgZnJvbTogeyB0cmFuc2Zvcm06ICdzY2FsZTNkKC45OCwuOTgsMSknIH0sXG4gICAgdG86IHsgdHJhbnNmb3JtOiAnc2NhbGUzZCgxLDEsMSknIH0sXG59KTtcbnZhciBTQ0FMRV9ET1dOOTggPSBrZXlmcmFtZXMoe1xuICAgIGZyb206IHsgdHJhbnNmb3JtOiAnc2NhbGUzZCgxLDEsMSknIH0sXG4gICAgdG86IHsgdHJhbnNmb3JtOiAnc2NhbGUzZCguOTgsLjk4LDEpJyB9LFxufSk7XG52YXIgU0NBTEVfRE9XTjEwMCA9IGtleWZyYW1lcyh7XG4gICAgZnJvbTogeyB0cmFuc2Zvcm06ICdzY2FsZTNkKDEuMDMsMS4wMywxKScgfSxcbiAgICB0bzogeyB0cmFuc2Zvcm06ICdzY2FsZTNkKDEsMSwxKScgfSxcbn0pO1xudmFyIFNDQUxFX1VQMTAzID0ga2V5ZnJhbWVzKHtcbiAgICBmcm9tOiB7IHRyYW5zZm9ybTogJ3NjYWxlM2QoMSwxLDEpJyB9LFxuICAgIHRvOiB7IHRyYW5zZm9ybTogJ3NjYWxlM2QoMS4wMywxLjAzLDEpJyB9LFxufSk7XG52YXIgUk9UQVRFOTAgPSBrZXlmcmFtZXMoe1xuICAgIGZyb206IHsgdHJhbnNmb3JtOiAncm90YXRlWigwZGVnKScgfSxcbiAgICB0bzogeyB0cmFuc2Zvcm06ICdyb3RhdGVaKDkwZGVnKScgfSxcbn0pO1xudmFyIFJPVEFURV9OOTAgPSBrZXlmcmFtZXMoe1xuICAgIGZyb206IHsgdHJhbnNmb3JtOiAncm90YXRlWigwZGVnKScgfSxcbiAgICB0bzogeyB0cmFuc2Zvcm06ICdyb3RhdGVaKC05MGRlZyknIH0sXG59KTtcbi8qKlxuICogRXhwb3J0aW5nIHJhdyBkdXJhY3Rpb24gdmFsdWVzIGFuZCBlYXNpbmcgZnVuY3Rpb25zIHRvIGJlIHVzZWQgaW4gY3VzdG9tIGFuaW1hdGlvbnNcbiAqL1xuZXhwb3J0IHZhciBBbmltYXRpb25WYXJpYWJsZXMgPSB7XG4gICAgZWFzZUZ1bmN0aW9uMTogRUFTSU5HX0ZVTkNUSU9OXzEsXG4gICAgZWFzZUZ1bmN0aW9uMjogRUFTSU5HX0ZVTkNUSU9OXzIsXG4gICAgZHVyYXRpb25WYWx1ZTE6IERVUkFUSU9OXzEsXG4gICAgZHVyYXRpb25WYWx1ZTI6IERVUkFUSU9OXzIsXG4gICAgZHVyYXRpb25WYWx1ZTM6IERVUkFUSU9OXzMsXG4gICAgZHVyYXRpb25WYWx1ZTQ6IERVUkFUSU9OXzQsXG59O1xuLyoqXG4gKiBBbGwgRmFicmljIHN0YW5kYXJkIGFuaW1hdGlvbnMsIGV4cG9zZWQgYXMganNvbiBvYmplY3RzIHJlZmVyZW5jaW5nIHByZWRlZmluZWRcbiAqIGtleWZyYW1lcy4gVGhlc2Ugb2JqZWN0cyBjYW4gYmUgbWl4ZWQgaW4gd2l0aCBvdGhlciBjbGFzcyBkZWZpbml0aW9ucy5cbiAqL1xuZXhwb3J0IHZhciBBbmltYXRpb25TdHlsZXMgPSB7XG4gICAgc2xpZGVSaWdodEluMTA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9JTiArIFwiLFwiICsgU0xJREVfUklHSFRfSU4xMCwgRFVSQVRJT05fMywgRUFTSU5HX0ZVTkNUSU9OXzEpLFxuICAgIHNsaWRlUmlnaHRJbjIwOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfSU4gKyBcIixcIiArIFNMSURFX1JJR0hUX0lOMjAsIERVUkFUSU9OXzMsIEVBU0lOR19GVU5DVElPTl8xKSxcbiAgICBzbGlkZVJpZ2h0SW40MDogX2NyZWF0ZUFuaW1hdGlvbihGQURFX0lOICsgXCIsXCIgKyBTTElERV9SSUdIVF9JTjQwLCBEVVJBVElPTl8zLCBFQVNJTkdfRlVOQ1RJT05fMSksXG4gICAgc2xpZGVSaWdodEluNDAwOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfSU4gKyBcIixcIiArIFNMSURFX1JJR0hUX0lONDAwLCBEVVJBVElPTl8zLCBFQVNJTkdfRlVOQ1RJT05fMSksXG4gICAgc2xpZGVMZWZ0SW4xMDogX2NyZWF0ZUFuaW1hdGlvbihGQURFX0lOICsgXCIsXCIgKyBTTElERV9MRUZUX0lOMTAsIERVUkFUSU9OXzMsIEVBU0lOR19GVU5DVElPTl8xKSxcbiAgICBzbGlkZUxlZnRJbjIwOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfSU4gKyBcIixcIiArIFNMSURFX0xFRlRfSU4yMCwgRFVSQVRJT05fMywgRUFTSU5HX0ZVTkNUSU9OXzEpLFxuICAgIHNsaWRlTGVmdEluNDA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9JTiArIFwiLFwiICsgU0xJREVfTEVGVF9JTjQwLCBEVVJBVElPTl8zLCBFQVNJTkdfRlVOQ1RJT05fMSksXG4gICAgc2xpZGVMZWZ0SW40MDA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9JTiArIFwiLFwiICsgU0xJREVfTEVGVF9JTjQwMCwgRFVSQVRJT05fMywgRUFTSU5HX0ZVTkNUSU9OXzEpLFxuICAgIHNsaWRlVXBJbjEwOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfSU4gKyBcIixcIiArIFNMSURFX1VQX0lOMTAsIERVUkFUSU9OXzMsIEVBU0lOR19GVU5DVElPTl8xKSxcbiAgICBzbGlkZVVwSW4yMDogX2NyZWF0ZUFuaW1hdGlvbihGQURFX0lOICsgXCIsXCIgKyBTTElERV9VUF9JTjIwLCBEVVJBVElPTl8zLCBFQVNJTkdfRlVOQ1RJT05fMSksXG4gICAgc2xpZGVEb3duSW4xMDogX2NyZWF0ZUFuaW1hdGlvbihGQURFX0lOICsgXCIsXCIgKyBTTElERV9ET1dOX0lOMTAsIERVUkFUSU9OXzMsIEVBU0lOR19GVU5DVElPTl8xKSxcbiAgICBzbGlkZURvd25JbjIwOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfSU4gKyBcIixcIiArIFNMSURFX0RPV05fSU4yMCwgRFVSQVRJT05fMywgRUFTSU5HX0ZVTkNUSU9OXzEpLFxuICAgIHNsaWRlUmlnaHRPdXQxMDogX2NyZWF0ZUFuaW1hdGlvbihGQURFX09VVCArIFwiLFwiICsgU0xJREVfUklHSFRfT1VUMTAsIERVUkFUSU9OXzMsIEVBU0lOR19GVU5DVElPTl8xKSxcbiAgICBzbGlkZVJpZ2h0T3V0MjA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9PVVQgKyBcIixcIiArIFNMSURFX1JJR0hUX09VVDIwLCBEVVJBVElPTl8zLCBFQVNJTkdfRlVOQ1RJT05fMSksXG4gICAgc2xpZGVSaWdodE91dDQwOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfT1VUICsgXCIsXCIgKyBTTElERV9SSUdIVF9PVVQ0MCwgRFVSQVRJT05fMywgRUFTSU5HX0ZVTkNUSU9OXzEpLFxuICAgIHNsaWRlUmlnaHRPdXQ0MDA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9PVVQgKyBcIixcIiArIFNMSURFX1JJR0hUX09VVDQwMCwgRFVSQVRJT05fMywgRUFTSU5HX0ZVTkNUSU9OXzEpLFxuICAgIHNsaWRlTGVmdE91dDEwOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfT1VUICsgXCIsXCIgKyBTTElERV9MRUZUX09VVDEwLCBEVVJBVElPTl8zLCBFQVNJTkdfRlVOQ1RJT05fMSksXG4gICAgc2xpZGVMZWZ0T3V0MjA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9PVVQgKyBcIixcIiArIFNMSURFX0xFRlRfT1VUMjAsIERVUkFUSU9OXzMsIEVBU0lOR19GVU5DVElPTl8xKSxcbiAgICBzbGlkZUxlZnRPdXQ0MDogX2NyZWF0ZUFuaW1hdGlvbihGQURFX09VVCArIFwiLFwiICsgU0xJREVfTEVGVF9PVVQ0MCwgRFVSQVRJT05fMywgRUFTSU5HX0ZVTkNUSU9OXzEpLFxuICAgIHNsaWRlTGVmdE91dDQwMDogX2NyZWF0ZUFuaW1hdGlvbihGQURFX09VVCArIFwiLFwiICsgU0xJREVfTEVGVF9PVVQ0MDAsIERVUkFUSU9OXzMsIEVBU0lOR19GVU5DVElPTl8xKSxcbiAgICBzbGlkZVVwT3V0MTA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9PVVQgKyBcIixcIiArIFNMSURFX1VQX09VVDEwLCBEVVJBVElPTl8zLCBFQVNJTkdfRlVOQ1RJT05fMSksXG4gICAgc2xpZGVVcE91dDIwOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfT1VUICsgXCIsXCIgKyBTTElERV9VUF9PVVQyMCwgRFVSQVRJT05fMywgRUFTSU5HX0ZVTkNUSU9OXzEpLFxuICAgIHNsaWRlRG93bk91dDEwOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfT1VUICsgXCIsXCIgKyBTTElERV9ET1dOX09VVDEwLCBEVVJBVElPTl8zLCBFQVNJTkdfRlVOQ1RJT05fMSksXG4gICAgc2xpZGVEb3duT3V0MjA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9PVVQgKyBcIixcIiArIFNMSURFX0RPV05fT1VUMjAsIERVUkFUSU9OXzMsIEVBU0lOR19GVU5DVElPTl8xKSxcbiAgICBzY2FsZVVwSW4xMDA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9JTiArIFwiLFwiICsgU0NBTEVfVVAxMDAsIERVUkFUSU9OXzMsIEVBU0lOR19GVU5DVElPTl8xKSxcbiAgICBzY2FsZURvd25JbjEwMDogX2NyZWF0ZUFuaW1hdGlvbihGQURFX0lOICsgXCIsXCIgKyBTQ0FMRV9ET1dOMTAwLCBEVVJBVElPTl8zLCBFQVNJTkdfRlVOQ1RJT05fMSksXG4gICAgc2NhbGVVcE91dDEwMzogX2NyZWF0ZUFuaW1hdGlvbihGQURFX09VVCArIFwiLFwiICsgU0NBTEVfVVAxMDMsIERVUkFUSU9OXzEsIEVBU0lOR19GVU5DVElPTl8yKSxcbiAgICBzY2FsZURvd25PdXQ5ODogX2NyZWF0ZUFuaW1hdGlvbihGQURFX09VVCArIFwiLFwiICsgU0NBTEVfRE9XTjk4LCBEVVJBVElPTl8xLCBFQVNJTkdfRlVOQ1RJT05fMiksXG4gICAgZmFkZUluMTAwOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfSU4sIERVUkFUSU9OXzEsIEVBU0lOR19GVU5DVElPTl8yKSxcbiAgICBmYWRlSW4yMDA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9JTiwgRFVSQVRJT05fMiwgRUFTSU5HX0ZVTkNUSU9OXzIpLFxuICAgIGZhZGVJbjQwMDogX2NyZWF0ZUFuaW1hdGlvbihGQURFX0lOLCBEVVJBVElPTl8zLCBFQVNJTkdfRlVOQ1RJT05fMiksXG4gICAgZmFkZUluNTAwOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfSU4sIERVUkFUSU9OXzQsIEVBU0lOR19GVU5DVElPTl8yKSxcbiAgICBmYWRlT3V0MTAwOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfT1VULCBEVVJBVElPTl8xLCBFQVNJTkdfRlVOQ1RJT05fMiksXG4gICAgZmFkZU91dDIwMDogX2NyZWF0ZUFuaW1hdGlvbihGQURFX09VVCwgRFVSQVRJT05fMiwgRUFTSU5HX0ZVTkNUSU9OXzIpLFxuICAgIGZhZGVPdXQ0MDA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9PVVQsIERVUkFUSU9OXzMsIEVBU0lOR19GVU5DVElPTl8yKSxcbiAgICBmYWRlT3V0NTAwOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfT1VULCBEVVJBVElPTl80LCBFQVNJTkdfRlVOQ1RJT05fMiksXG4gICAgcm90YXRlOTBkZWc6IF9jcmVhdGVBbmltYXRpb24oUk9UQVRFOTAsICcwLjFzJywgRUFTSU5HX0ZVTkNUSU9OXzIpLFxuICAgIHJvdGF0ZU45MGRlZzogX2NyZWF0ZUFuaW1hdGlvbihST1RBVEVfTjkwLCAnMC4xcycsIEVBU0lOR19GVU5DVElPTl8yKSxcbn07XG5mdW5jdGlvbiBfY3JlYXRlQW5pbWF0aW9uKGFuaW1hdGlvbk5hbWUsIGFuaW1hdGlvbkR1cmF0aW9uLCBhbmltYXRpb25UaW1pbmdGdW5jdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFuaW1hdGlvbk5hbWU6IGFuaW1hdGlvbk5hbWUsXG4gICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBhbmltYXRpb25EdXJhdGlvbixcbiAgICAgICAgYW5pbWF0aW9uVGltaW5nRnVuY3Rpb246IGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uLFxuICAgICAgICBhbmltYXRpb25GaWxsTW9kZTogJ2JvdGgnLFxuICAgIH07XG59XG5mdW5jdGlvbiBfY3JlYXRlU2xpZGVJblgoZnJvbVgpIHtcbiAgICByZXR1cm4ga2V5ZnJhbWVzKHtcbiAgICAgICAgZnJvbTogeyB0cmFuc2Zvcm06IFwidHJhbnNsYXRlM2QoXCIgKyBmcm9tWCArIFwicHgsMCwwKVwiLCBwb2ludGVyRXZlbnRzOiAnbm9uZScgfSxcbiAgICAgICAgdG86IHsgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKDAsMCwwKVwiLCBwb2ludGVyRXZlbnRzOiAnYXV0bycgfSxcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIF9jcmVhdGVTbGlkZUluWShmcm9tWSkge1xuICAgIHJldHVybiBrZXlmcmFtZXMoe1xuICAgICAgICBmcm9tOiB7IHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUzZCgwLFwiICsgZnJvbVkgKyBcInB4LDApXCIsIHBvaW50ZXJFdmVudHM6ICdub25lJyB9LFxuICAgICAgICB0bzogeyB0cmFuc2Zvcm06IFwidHJhbnNsYXRlM2QoMCwwLDApXCIsIHBvaW50ZXJFdmVudHM6ICdhdXRvJyB9LFxuICAgIH0pO1xufVxuZnVuY3Rpb24gX2NyZWF0ZVNsaWRlT3V0WCh0b1gpIHtcbiAgICByZXR1cm4ga2V5ZnJhbWVzKHtcbiAgICAgICAgZnJvbTogeyB0cmFuc2Zvcm06IFwidHJhbnNsYXRlM2QoMCwwLDApXCIgfSxcbiAgICAgICAgdG86IHsgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKFwiICsgdG9YICsgXCJweCwwLDApXCIgfSxcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIF9jcmVhdGVTbGlkZU91dFkodG9ZKSB7XG4gICAgcmV0dXJuIGtleWZyYW1lcyh7XG4gICAgICAgIGZyb206IHsgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKDAsMCwwKVwiIH0sXG4gICAgICAgIHRvOiB7IHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUzZCgwLFwiICsgdG9ZICsgXCJweCwwKVwiIH0sXG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BbmltYXRpb25TdHlsZXMuanMubWFwIiwiaW1wb3J0IHsgYnVpbGRDbGFzc01hcCB9IGZyb20gJy4uL3V0aWxpdGllcy9pbmRleCc7XG5pbXBvcnQgeyBBbmltYXRpb25TdHlsZXMgfSBmcm9tICcuLi9zdHlsZXMvaW5kZXgnO1xuLyoqXG4gKiB7QGRvY0NhdGVnb3J5IEFuaW1hdGlvbkNsYXNzTmFtZXN9XG4gKi9cbmV4cG9ydCB2YXIgQW5pbWF0aW9uQ2xhc3NOYW1lcyA9IGJ1aWxkQ2xhc3NNYXAoQW5pbWF0aW9uU3R5bGVzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFuaW1hdGlvbkNsYXNzTmFtZXMuanMubWFwIiwiLy8gRm9udCBmYWNlIG5hbWVzIHRvIGJlIHJlZ2lzdGVyZWQuXG5leHBvcnQgdmFyIExvY2FsaXplZEZvbnROYW1lcztcbihmdW5jdGlvbiAoTG9jYWxpemVkRm9udE5hbWVzKSB7XG4gICAgTG9jYWxpemVkRm9udE5hbWVzLkFyYWJpYyA9ICdTZWdvZSBVSSBXZWIgKEFyYWJpYyknO1xuICAgIExvY2FsaXplZEZvbnROYW1lcy5DeXJpbGxpYyA9ICdTZWdvZSBVSSBXZWIgKEN5cmlsbGljKSc7XG4gICAgTG9jYWxpemVkRm9udE5hbWVzLkVhc3RFdXJvcGVhbiA9ICdTZWdvZSBVSSBXZWIgKEVhc3QgRXVyb3BlYW4pJztcbiAgICBMb2NhbGl6ZWRGb250TmFtZXMuR3JlZWsgPSAnU2Vnb2UgVUkgV2ViIChHcmVlayknO1xuICAgIExvY2FsaXplZEZvbnROYW1lcy5IZWJyZXcgPSAnU2Vnb2UgVUkgV2ViIChIZWJyZXcpJztcbiAgICBMb2NhbGl6ZWRGb250TmFtZXMuVGhhaSA9ICdMZWVsYXdhZGVlIFVJIFdlYic7XG4gICAgTG9jYWxpemVkRm9udE5hbWVzLlZpZXRuYW1lc2UgPSAnU2Vnb2UgVUkgV2ViIChWaWV0bmFtZXNlKSc7XG4gICAgTG9jYWxpemVkRm9udE5hbWVzLldlc3RFdXJvcGVhbiA9ICdTZWdvZSBVSSBXZWIgKFdlc3QgRXVyb3BlYW4pJztcbiAgICBMb2NhbGl6ZWRGb250TmFtZXMuU2VsYXdpayA9ICdTZWxhd2lrIFdlYic7XG4gICAgTG9jYWxpemVkRm9udE5hbWVzLkFybWVuaWFuID0gJ1NlZ29lIFVJIFdlYiAoQXJtZW5pYW4pJztcbiAgICBMb2NhbGl6ZWRGb250TmFtZXMuR2VvcmdpYW4gPSAnU2Vnb2UgVUkgV2ViIChHZW9yZ2lhbiknO1xufSkoTG9jYWxpemVkRm9udE5hbWVzIHx8IChMb2NhbGl6ZWRGb250TmFtZXMgPSB7fSkpO1xuLy8gRm9udCBmYW1pbGllcyB3aXRoIGZhbGxiYWNrcywgZm9yIHRoZSBnZW5lcmFsIHJlZ2lvbnMuXG5leHBvcnQgdmFyIExvY2FsaXplZEZvbnRGYW1pbGllcztcbihmdW5jdGlvbiAoTG9jYWxpemVkRm9udEZhbWlsaWVzKSB7XG4gICAgTG9jYWxpemVkRm9udEZhbWlsaWVzLkFyYWJpYyA9IFwiJ1wiICsgTG9jYWxpemVkRm9udE5hbWVzLkFyYWJpYyArIFwiJ1wiO1xuICAgIExvY2FsaXplZEZvbnRGYW1pbGllcy5DaGluZXNlU2ltcGxpZmllZCA9IFwiJ01pY3Jvc29mdCBZYWhlaSBVSScsIFZlcmRhbmEsIFNpbXN1blwiO1xuICAgIExvY2FsaXplZEZvbnRGYW1pbGllcy5DaGluZXNlVHJhZGl0aW9uYWwgPSBcIidNaWNyb3NvZnQgSmhlbmdoZWkgVUknLCBQbWluZ2xpdVwiO1xuICAgIExvY2FsaXplZEZvbnRGYW1pbGllcy5DeXJpbGxpYyA9IFwiJ1wiICsgTG9jYWxpemVkRm9udE5hbWVzLkN5cmlsbGljICsgXCInXCI7XG4gICAgTG9jYWxpemVkRm9udEZhbWlsaWVzLkVhc3RFdXJvcGVhbiA9IFwiJ1wiICsgTG9jYWxpemVkRm9udE5hbWVzLkVhc3RFdXJvcGVhbiArIFwiJ1wiO1xuICAgIExvY2FsaXplZEZvbnRGYW1pbGllcy5HcmVlayA9IFwiJ1wiICsgTG9jYWxpemVkRm9udE5hbWVzLkdyZWVrICsgXCInXCI7XG4gICAgTG9jYWxpemVkRm9udEZhbWlsaWVzLkhlYnJldyA9IFwiJ1wiICsgTG9jYWxpemVkRm9udE5hbWVzLkhlYnJldyArIFwiJ1wiO1xuICAgIExvY2FsaXplZEZvbnRGYW1pbGllcy5IaW5kaSA9IFwiJ05pcm1hbGEgVUknXCI7XG4gICAgTG9jYWxpemVkRm9udEZhbWlsaWVzLkphcGFuZXNlID0gXCInWXUgR290aGljIFVJJywgJ01laXJ5byBVSScsIE1laXJ5bywgJ01TIFBnb3RoaWMnLCBPc2FrYVwiO1xuICAgIExvY2FsaXplZEZvbnRGYW1pbGllcy5Lb3JlYW4gPSBcIidNYWxndW4gR290aGljJywgR3VsaW1cIjtcbiAgICBMb2NhbGl6ZWRGb250RmFtaWxpZXMuU2VsYXdpayA9IFwiJ1wiICsgTG9jYWxpemVkRm9udE5hbWVzLlNlbGF3aWsgKyBcIidcIjtcbiAgICBMb2NhbGl6ZWRGb250RmFtaWxpZXMuVGhhaSA9IFwiJ0xlZWxhd2FkZWUgVUkgV2ViJywgJ0ttZXIgVUknXCI7XG4gICAgTG9jYWxpemVkRm9udEZhbWlsaWVzLlZpZXRuYW1lc2UgPSBcIidcIiArIExvY2FsaXplZEZvbnROYW1lcy5WaWV0bmFtZXNlICsgXCInXCI7XG4gICAgTG9jYWxpemVkRm9udEZhbWlsaWVzLldlc3RFdXJvcGVhbiA9IFwiJ1wiICsgTG9jYWxpemVkRm9udE5hbWVzLldlc3RFdXJvcGVhbiArIFwiJ1wiO1xuICAgIExvY2FsaXplZEZvbnRGYW1pbGllcy5Bcm1lbmlhbiA9IFwiJ1wiICsgTG9jYWxpemVkRm9udE5hbWVzLkFybWVuaWFuICsgXCInXCI7XG4gICAgTG9jYWxpemVkRm9udEZhbWlsaWVzLkdlb3JnaWFuID0gXCInXCIgKyBMb2NhbGl6ZWRGb250TmFtZXMuR2VvcmdpYW4gKyBcIidcIjtcbn0pKExvY2FsaXplZEZvbnRGYW1pbGllcyB8fCAoTG9jYWxpemVkRm9udEZhbWlsaWVzID0ge30pKTtcbi8vIFN0YW5kYXJkIGZvbnQgc2l6ZXMuXG5leHBvcnQgdmFyIEZvbnRTaXplcztcbihmdW5jdGlvbiAoRm9udFNpemVzKSB7XG4gICAgRm9udFNpemVzLnNpemUxMCA9ICcxMHB4JztcbiAgICBGb250U2l6ZXMuc2l6ZTEyID0gJzEycHgnO1xuICAgIEZvbnRTaXplcy5zaXplMTQgPSAnMTRweCc7XG4gICAgRm9udFNpemVzLnNpemUxNiA9ICcxNnB4JztcbiAgICBGb250U2l6ZXMuc2l6ZTE4ID0gJzE4cHgnO1xuICAgIEZvbnRTaXplcy5zaXplMjAgPSAnMjBweCc7XG4gICAgRm9udFNpemVzLnNpemUyNCA9ICcyNHB4JztcbiAgICBGb250U2l6ZXMuc2l6ZTI4ID0gJzI4cHgnO1xuICAgIEZvbnRTaXplcy5zaXplMzIgPSAnMzJweCc7XG4gICAgRm9udFNpemVzLnNpemU0MiA9ICc0MnB4JztcbiAgICBGb250U2l6ZXMuc2l6ZTY4ID0gJzY4cHgnO1xuICAgIEZvbnRTaXplcy5taW5pID0gJzEwcHgnO1xuICAgIEZvbnRTaXplcy54U21hbGwgPSAnMTBweCc7XG4gICAgRm9udFNpemVzLnNtYWxsID0gJzEycHgnO1xuICAgIEZvbnRTaXplcy5zbWFsbFBsdXMgPSAnMTJweCc7XG4gICAgRm9udFNpemVzLm1lZGl1bSA9ICcxNHB4JztcbiAgICBGb250U2l6ZXMubWVkaXVtUGx1cyA9ICcxNnB4JztcbiAgICBGb250U2l6ZXMuaWNvbiA9ICcxNnB4JztcbiAgICBGb250U2l6ZXMubGFyZ2UgPSAnMThweCc7XG4gICAgRm9udFNpemVzLnhMYXJnZSA9ICcyMHB4JztcbiAgICBGb250U2l6ZXMueExhcmdlUGx1cyA9ICcyNHB4JztcbiAgICBGb250U2l6ZXMueHhMYXJnZSA9ICcyOHB4JztcbiAgICBGb250U2l6ZXMueHhMYXJnZVBsdXMgPSAnMzJweCc7XG4gICAgRm9udFNpemVzLnN1cGVyTGFyZ2UgPSAnNDJweCc7XG4gICAgRm9udFNpemVzLm1lZ2EgPSAnNjhweCc7XG59KShGb250U2l6ZXMgfHwgKEZvbnRTaXplcyA9IHt9KSk7XG4vLyBTdGFuZGFyZCBmb250IHdlaWdodHMuXG5leHBvcnQgdmFyIEZvbnRXZWlnaHRzO1xuKGZ1bmN0aW9uIChGb250V2VpZ2h0cykge1xuICAgIEZvbnRXZWlnaHRzLmxpZ2h0ID0gMTAwO1xuICAgIEZvbnRXZWlnaHRzLnNlbWlsaWdodCA9IDMwMDtcbiAgICBGb250V2VpZ2h0cy5yZWd1bGFyID0gNDAwO1xuICAgIEZvbnRXZWlnaHRzLnNlbWlib2xkID0gNjAwO1xuICAgIEZvbnRXZWlnaHRzLmJvbGQgPSA3MDA7XG59KShGb250V2VpZ2h0cyB8fCAoRm9udFdlaWdodHMgPSB7fSkpO1xuLy8gU3RhbmRhcmQgSWNvbiBTaXplcy5cbmV4cG9ydCB2YXIgSWNvbkZvbnRTaXplcztcbihmdW5jdGlvbiAoSWNvbkZvbnRTaXplcykge1xuICAgIEljb25Gb250U2l6ZXMueFNtYWxsID0gJzEwcHgnO1xuICAgIEljb25Gb250U2l6ZXMuc21hbGwgPSAnMTJweCc7XG4gICAgSWNvbkZvbnRTaXplcy5tZWRpdW0gPSAnMTZweCc7XG4gICAgSWNvbkZvbnRTaXplcy5sYXJnZSA9ICcyMHB4Jztcbn0pKEljb25Gb250U2l6ZXMgfHwgKEljb25Gb250U2l6ZXMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Rmx1ZW50Rm9udHMuanMubWFwIiwiaW1wb3J0IHsgbWVyZ2VTdHlsZXMgfSBmcm9tICcuLi9NZXJnZVN0eWxlcyc7XG4vKipcbiAqIEJ1aWxkcyBhIGNsYXNzIG5hbWVzIG9iamVjdCBmcm9tIGEgZ2l2ZW4gbWFwLlxuICpcbiAqIEBwYXJhbSBzdHlsZXMgLSBNYXAgb2YgdW5wcm9jZXNzZWQgc3R5bGVzLlxuICogQHJldHVybnMgTWFwIG9mIHByb3BlcnR5IG5hbWUgdG8gY2xhc3MgbmFtZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkQ2xhc3NNYXAoc3R5bGVzKSB7XG4gICAgdmFyIGNsYXNzZXMgPSB7fTtcbiAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChzdHlsZU5hbWUpIHtcbiAgICAgICAgaWYgKHN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSB7XG4gICAgICAgICAgICB2YXIgY2xhc3NOYW1lXzE7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2xhc3Nlcywgc3R5bGVOYW1lLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGFzc05hbWVfMSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lXzEgPSBtZXJnZVN0eWxlcyhzdHlsZXNbc3R5bGVOYW1lXSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xhc3NOYW1lXzE7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBmb3IgKHZhciBzdHlsZU5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICAgIF9sb29wXzEoc3R5bGVOYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIGNsYXNzZXM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWlsZENsYXNzTWFwLmpzLm1hcCIsImV4cG9ydCB2YXIgSGlnaENvbnRyYXN0U2VsZWN0b3IgPSAnQG1lZGlhIHNjcmVlbiBhbmQgKC1tcy1oaWdoLWNvbnRyYXN0OiBhY3RpdmUpJztcbmV4cG9ydCB2YXIgSGlnaENvbnRyYXN0U2VsZWN0b3JXaGl0ZSA9ICdAbWVkaWEgc2NyZWVuIGFuZCAoLW1zLWhpZ2gtY29udHJhc3Q6IGJsYWNrLW9uLXdoaXRlKSc7XG5leHBvcnQgdmFyIEhpZ2hDb250cmFzdFNlbGVjdG9yQmxhY2sgPSAnQG1lZGlhIHNjcmVlbiBhbmQgKC1tcy1oaWdoLWNvbnRyYXN0OiB3aGl0ZS1vbi1ibGFjayknO1xuZXhwb3J0IHZhciBFZGdlQ2hyb21pdW1IaWdoQ29udHJhc3RTZWxlY3RvciA9ICdAbWVkaWEgc2NyZWVuIGFuZCAoZm9yY2VkLWNvbG9yczogYWN0aXZlKSc7XG5leHBvcnQgdmFyIFNjcmVlbldpZHRoTWluU21hbGwgPSAzMjA7XG5leHBvcnQgdmFyIFNjcmVlbldpZHRoTWluTWVkaXVtID0gNDgwO1xuZXhwb3J0IHZhciBTY3JlZW5XaWR0aE1pbkxhcmdlID0gNjQwO1xuZXhwb3J0IHZhciBTY3JlZW5XaWR0aE1pblhMYXJnZSA9IDEwMjQ7XG5leHBvcnQgdmFyIFNjcmVlbldpZHRoTWluWFhMYXJnZSA9IDEzNjY7XG5leHBvcnQgdmFyIFNjcmVlbldpZHRoTWluWFhYTGFyZ2UgPSAxOTIwO1xuZXhwb3J0IHZhciBTY3JlZW5XaWR0aE1heFNtYWxsID0gU2NyZWVuV2lkdGhNaW5NZWRpdW0gLSAxO1xuZXhwb3J0IHZhciBTY3JlZW5XaWR0aE1heE1lZGl1bSA9IFNjcmVlbldpZHRoTWluTGFyZ2UgLSAxO1xuZXhwb3J0IHZhciBTY3JlZW5XaWR0aE1heExhcmdlID0gU2NyZWVuV2lkdGhNaW5YTGFyZ2UgLSAxO1xuZXhwb3J0IHZhciBTY3JlZW5XaWR0aE1heFhMYXJnZSA9IFNjcmVlbldpZHRoTWluWFhMYXJnZSAtIDE7XG5leHBvcnQgdmFyIFNjcmVlbldpZHRoTWF4WFhMYXJnZSA9IFNjcmVlbldpZHRoTWluWFhYTGFyZ2UgLSAxO1xuZXhwb3J0IHZhciBTY3JlZW5XaWR0aE1pblVoZk1vYmlsZSA9IDc2ODtcbmV4cG9ydCBmdW5jdGlvbiBnZXRTY3JlZW5TZWxlY3RvcihtaW4sIG1heCkge1xuICAgIHJldHVybiBcIkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogXCIgKyBtaW4gKyBcInB4KSBhbmQgKG1heC13aWR0aDogXCIgKyBtYXggKyBcInB4KVwiO1xufVxuLyoqXG4gKiBUaGUgc3R5bGUgd2hpY2ggdHVybnMgb2ZmIGhpZ2ggY29udHJhc3QgYWRqdXN0bWVudCBpbiAob25seSkgRWRnZSBDaHJvbWl1bSBicm93c2VyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RWRnZUNocm9taXVtTm9IaWdoQ29udHJhc3RBZGp1c3RTZWxlY3RvcigpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIF9hID0ge30sXG4gICAgICAgIF9hW0VkZ2VDaHJvbWl1bUhpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgIGZvcmNlZENvbG9yQWRqdXN0OiAnbm9uZScsXG4gICAgICAgIH0sXG4gICAgICAgIF9hO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29tbW9uU3R5bGVzLmpzLm1hcCIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJy4vZG9tL2dldFdpbmRvdyc7XG5leHBvcnQgdmFyIElzRm9jdXNWaXNpYmxlQ2xhc3NOYW1lID0gJ21zLUZhYnJpYy0taXNGb2N1c1Zpc2libGUnO1xuZXhwb3J0IHZhciBJc0ZvY3VzSGlkZGVuQ2xhc3NOYW1lID0gJ21zLUZhYnJpYy0taXNGb2N1c0hpZGRlbic7XG4vKipcbiAqIFNldHMgdGhlIHZpc2liaWxpdHkgb2YgZm9jdXMgc3R5bGluZy5cbiAqXG4gKiBCeSBkZWZhdWx0LCBmb2N1cyBzdHlsZXMgKHRoZSBib3ggc3Vycm91bmRpbmcgYSBmb2N1c2VkIEJ1dHRvbiwgZm9yIGV4YW1wbGUpIG9ubHkgc2hvdyB1cCB3aGVuIG5hdmlnYXRpb25hbFxuICoga2V5cHJlc3NlcyBvY2N1ciAodGhyb3VnaCBUYWIsIGFycm93cywgUGdVcC9QZ0RuLCBIb21lIGFuZCBFbmQpLCBhbmQgYXJlIGhpZGRlbiB3aGVuIG1vdXNlIGludGVyYWN0aW9ucyBvY2N1ci5cbiAqIFRoaXMgQVBJIHByb3ZpZGVzIGFuIGltcGVyYXRpdmUgd2F5IHRvIHR1cm4gdGhlbSBvbi9vZmYuXG4gKlxuICogQSB1c2UgY2FzZSBtaWdodCBiZSB3aGVuIHlvdSBoYXZlIGEga2V5cHJlc3MgbGlrZSBjdHJsLWY2IG5hdmlnYXRlIHRvIGEgcGFydGljdWxhciByZWdpb24gb24gdGhlIHBhZ2UsXG4gKiBhbmQgd2FudCBmb2N1cyB0byBzaG93IHVwLlxuICpcbiAqIEBwYXJhbSBlbmFibGVkIC0gd2hldGhlciB0byByZW1vdmUgb3IgYWRkIGZvY3VzXG4gKiBAcGFyYW0gdGFyZ2V0IC0gb3B0aW9uYWwgdGFyZ2V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRGb2N1c1Zpc2liaWxpdHkoZW5hYmxlZCwgdGFyZ2V0KSB7XG4gICAgdmFyIHdpbiA9IHRhcmdldCA/IGdldFdpbmRvdyh0YXJnZXQpIDogZ2V0V2luZG93KCk7XG4gICAgaWYgKHdpbikge1xuICAgICAgICB2YXIgY2xhc3NMaXN0ID0gd2luLmRvY3VtZW50LmJvZHkuY2xhc3NMaXN0O1xuICAgICAgICBjbGFzc0xpc3QuYWRkKGVuYWJsZWQgPyBJc0ZvY3VzVmlzaWJsZUNsYXNzTmFtZSA6IElzRm9jdXNIaWRkZW5DbGFzc05hbWUpO1xuICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKGVuYWJsZWQgPyBJc0ZvY3VzSGlkZGVuQ2xhc3NOYW1lIDogSXNGb2N1c1Zpc2libGVDbGFzc05hbWUpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNldEZvY3VzVmlzaWJpbGl0eS5qcy5tYXAiLCJleHBvcnQgdmFyIFpJbmRleGVzO1xuKGZ1bmN0aW9uIChaSW5kZXhlcykge1xuICAgIFpJbmRleGVzLk5hdiA9IDE7XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgU2Nyb2xsYWJsZVBhbmVcbiAgICAgKi9cbiAgICBaSW5kZXhlcy5TY3JvbGxhYmxlUGFuZSA9IDE7XG4gICAgWkluZGV4ZXMuRm9jdXNTdHlsZSA9IDE7XG4gICAgWkluZGV4ZXMuQ29hY2htYXJrID0gMTAwMDtcbiAgICBaSW5kZXhlcy5MYXllciA9IDEwMDAwMDA7XG4gICAgWkluZGV4ZXMuS2V5dGlwTGF5ZXIgPSAxMDAwMDAxO1xufSkoWkluZGV4ZXMgfHwgKFpJbmRleGVzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXpJbmRleGVzLmpzLm1hcCIsImltcG9ydCB7IEhpZ2hDb250cmFzdFNlbGVjdG9yIH0gZnJvbSAnLi9Db21tb25TdHlsZXMnO1xuaW1wb3J0IHsgSXNGb2N1c1Zpc2libGVDbGFzc05hbWUgfSBmcm9tICdAdWlmYWJyaWMvdXRpbGl0aWVzJztcbmltcG9ydCB7IFpJbmRleGVzIH0gZnJvbSAnLi96SW5kZXhlcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm9jdXNTdHlsZSh0aGVtZSwgaW5zZXRPck9wdGlvbnMsIHBvc2l0aW9uLCBoaWdoQ29udHJhc3RTdHlsZSwgYm9yZGVyQ29sb3IsIG91dGxpbmVDb2xvciwgaXNGb2N1c2VkT25seSkge1xuICAgIGlmICh0eXBlb2YgaW5zZXRPck9wdGlvbnMgPT09ICdudW1iZXInIHx8ICFpbnNldE9yT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX2dldEZvY3VzU3R5bGVJbnRlcm5hbCh0aGVtZSwge1xuICAgICAgICAgICAgaW5zZXQ6IGluc2V0T3JPcHRpb25zLFxuICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxuICAgICAgICAgICAgaGlnaENvbnRyYXN0U3R5bGU6IGhpZ2hDb250cmFzdFN0eWxlLFxuICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGJvcmRlckNvbG9yLFxuICAgICAgICAgICAgb3V0bGluZUNvbG9yOiBvdXRsaW5lQ29sb3IsXG4gICAgICAgICAgICBpc0ZvY3VzZWRPbmx5OiBpc0ZvY3VzZWRPbmx5LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBfZ2V0Rm9jdXNTdHlsZUludGVybmFsKHRoZW1lLCBpbnNldE9yT3B0aW9ucyk7XG4gICAgfVxufVxuZnVuY3Rpb24gX2dldEZvY3VzU3R5bGVJbnRlcm5hbCh0aGVtZSwgb3B0aW9ucykge1xuICAgIHZhciBfYSwgX2I7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICB2YXIgX2MgPSBvcHRpb25zLmluc2V0LCBpbnNldCA9IF9jID09PSB2b2lkIDAgPyAwIDogX2MsIF9kID0gb3B0aW9ucy53aWR0aCwgd2lkdGggPSBfZCA9PT0gdm9pZCAwID8gMSA6IF9kLCBfZSA9IG9wdGlvbnMucG9zaXRpb24sIHBvc2l0aW9uID0gX2UgPT09IHZvaWQgMCA/ICdyZWxhdGl2ZScgOiBfZSwgaGlnaENvbnRyYXN0U3R5bGUgPSBvcHRpb25zLmhpZ2hDb250cmFzdFN0eWxlLCBfZiA9IG9wdGlvbnMuYm9yZGVyQ29sb3IsIGJvcmRlckNvbG9yID0gX2YgPT09IHZvaWQgMCA/IHRoZW1lLnBhbGV0dGUud2hpdGUgOiBfZiwgX2cgPSBvcHRpb25zLm91dGxpbmVDb2xvciwgb3V0bGluZUNvbG9yID0gX2cgPT09IHZvaWQgMCA/IHRoZW1lLnBhbGV0dGUubmV1dHJhbFNlY29uZGFyeSA6IF9nLCBfaCA9IG9wdGlvbnMuaXNGb2N1c2VkT25seSwgaXNGb2N1c2VkT25seSA9IF9oID09PSB2b2lkIDAgPyB0cnVlIDogX2g7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy8gQ2xlYXIgYnJvd3Nlci1zcGVjaWZpYyBmb2N1cyBzdHlsZXMgYW5kIHVzZSAndHJhbnNwYXJlbnQnIGFzIHBsYWNlaG9sZGVyIGZvciBmb2N1cyBzdHlsZS5cbiAgICAgICAgb3V0bGluZTogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgLy8gUmVxdWlyZW1lbnQgYmVjYXVzZSBwc2V1ZG8tZWxlbWVudCBpcyBhYnNvbHV0ZWx5IHBvc2l0aW9uZWQuXG4gICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcbiAgICAgICAgc2VsZWN0b3JzOiAoX2EgPSB7XG4gICAgICAgICAgICAgICAgLy8gQ2xlYXIgdGhlIGZvY3VzIGJvcmRlciBpbiBGaXJlZm94LlxuICAgICAgICAgICAgICAgIC8vIFJlZmVyZW5jZTogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTk5MzE5LzE0MzY2NzFcbiAgICAgICAgICAgICAgICAnOjotbW96LWZvY3VzLWlubmVyJzoge1xuICAgICAgICAgICAgICAgICAgICBib3JkZXI6ICcwJyxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gV2hlbiB0aGUgZWxlbWVudCB0aGF0IHVzZXMgdGhpcyBtaXhpbiBpcyBpbiBhIDpmb2N1cyBzdGF0ZSwgYWRkIGEgcHNldWRvLWVsZW1lbnQgdG9cbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGJvcmRlci5cbiAgICAgICAgICAgIF9hW1wiLlwiICsgSXNGb2N1c1Zpc2libGVDbGFzc05hbWUgKyBcIiAmXCIgKyAoaXNGb2N1c2VkT25seSA/ICc6Zm9jdXMnIDogJycpICsgXCI6YWZ0ZXJcIl0gPSB7XG4gICAgICAgICAgICAgICAgY29udGVudDogJ1wiXCInLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAgIGxlZnQ6IGluc2V0ICsgMSxcbiAgICAgICAgICAgICAgICB0b3A6IGluc2V0ICsgMSxcbiAgICAgICAgICAgICAgICBib3R0b206IGluc2V0ICsgMSxcbiAgICAgICAgICAgICAgICByaWdodDogaW5zZXQgKyAxLFxuICAgICAgICAgICAgICAgIGJvcmRlcjogd2lkdGggKyBcInB4IHNvbGlkIFwiICsgYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgb3V0bGluZTogd2lkdGggKyBcInB4IHNvbGlkIFwiICsgb3V0bGluZUNvbG9yLFxuICAgICAgICAgICAgICAgIHpJbmRleDogWkluZGV4ZXMuRm9jdXNTdHlsZSxcbiAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfYiA9IHt9LFxuICAgICAgICAgICAgICAgICAgICBfYltIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSBoaWdoQ29udHJhc3RTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgX2IpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9hKSxcbiAgICB9O1xufVxuLyoqXG4gKiBHZW5lcmF0ZXMgc3R5bGUgdG8gY2xlYXIgYnJvd3NlciBzcGVjaWZpYyBmb2N1cyBzdHlsZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb2N1c0NsZWFyKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgJyY6Oi1tb3otZm9jdXMtaW5uZXInOiB7XG4gICAgICAgICAgICAgICAgLy8gQ2xlYXIgdGhlIGZvY3VzIGJvcmRlciBpbiBGaXJlZm94LiBSZWZlcmVuY2U6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE5OTMxOS8xNDM2NjcxXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICcmJzoge1xuICAgICAgICAgICAgICAgIC8vIENsZWFyIGJyb3dzZXIgc3BlY2lmaWMgZm9jdXMgc3R5bGVzIGFuZCB1c2UgdHJhbnNwYXJlbnQgYXMgcGxhY2Vob2xkZXIgZm9yIGZvY3VzIHN0eWxlXG4gICAgICAgICAgICAgICAgb3V0bGluZTogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgc3R5bGUgd2hpY2ggY2FuIGJlIHVzZWQgdG8gc2V0IGEgYm9yZGVyIG9uIGZvY3VzLlxuICpcbiAqIEBwYXJhbSB0aGVtZSAtIFRoZSB0aGVtZSBvYmplY3QgdG8gdXNlLlxuICogQHBhcmFtIGluc2V0IC0gVGhlIG51bWJlciBvZiBwaXhlbHMgdG8gaW5zZXQgdGhlIGJvcmRlciAoZGVmYXVsdCAwKVxuICogQHBhcmFtIHdpZHRoIC0gVGhlIGJvcmRlciB3aWR0aCBpbiBwaXhlbHMgKGRlZmF1bHQgMSlcbiAqIEBwYXJhbSBjb2xvciAtIENvbG9yIG9mIHRoZSBvdXRsaW5lIChkZWZhdWx0IGB0aGVtZS5wYWxldHRlLm5ldXRyYWxTZWNvbmRhcnlgKVxuICogQHJldHVybnMgVGhlIHN0eWxlIG9iamVjdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZvY3VzT3V0bGluZVN0eWxlKHRoZW1lLCBpbnNldCwgd2lkdGgsIGNvbG9yKSB7XG4gICAgdmFyIF9hO1xuICAgIGlmIChpbnNldCA9PT0gdm9pZCAwKSB7IGluc2V0ID0gMDsgfVxuICAgIGlmICh3aWR0aCA9PT0gdm9pZCAwKSB7IHdpZHRoID0gMTsgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHNlbGVjdG9yczogKF9hID0ge30sXG4gICAgICAgICAgICBfYVtcIjpnbG9iYWwoXCIgKyBJc0ZvY3VzVmlzaWJsZUNsYXNzTmFtZSArIFwiKSAmOmZvY3VzXCJdID0ge1xuICAgICAgICAgICAgICAgIG91dGxpbmU6IHdpZHRoICsgXCIgc29saWQgXCIgKyAoY29sb3IgfHwgdGhlbWUucGFsZXR0ZS5uZXV0cmFsU2Vjb25kYXJ5KSxcbiAgICAgICAgICAgICAgICBvdXRsaW5lT2Zmc2V0OiAtaW5zZXQgKyBcInB4XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2EpLFxuICAgIH07XG59XG4vKipcbiAqIEdlbmVyYXRlcyB0ZXh0IGlucHV0IGJvcmRlciBzdHlsZXMgb24gZm9jdXMuXG4gKlxuICogQHBhcmFtIGJvcmRlckNvbG9yIC0gQ29sb3Igb2YgdGhlIGJvcmRlci5cbiAqIEBwYXJhbSBib3JkZXJSYWRpdXMgLSBSYWRpdXMgb2YgdGhlIGJvcmRlci5cbiAqIEBwYXJhbSBib3JkZXJUeXBlIC0gVHlwZSBvZiB0aGUgYm9yZGVyLlxuICogQHBhcmFtIGJvcmRlclBvc2l0aW9uIC0gUG9zaXRpb24gb2YgdGhlIGJvcmRlciByZWxhdGl2ZSB0byB0aGUgaW5wdXQgZWxlbWVudCAoZGVmYXVsdCB0byAtMVxuICogYXMgaXQncyB0aGUgbW9zdCBjb21tb24gYm9yZGVyIHdpZHRoIG9mIHRoZSBpbnB1dCBlbGVtZW50KVxuICogQHJldHVybnMgVGhlIHN0eWxlIG9iamVjdC5cbiAqL1xuZXhwb3J0IHZhciBnZXRJbnB1dEZvY3VzU3R5bGUgPSBmdW5jdGlvbiAoYm9yZGVyQ29sb3IsIGJvcmRlclJhZGl1cywgYm9yZGVyVHlwZSwgYm9yZGVyUG9zaXRpb24pIHtcbiAgICB2YXIgX2EsIF9iLCBfYztcbiAgICBpZiAoYm9yZGVyVHlwZSA9PT0gdm9pZCAwKSB7IGJvcmRlclR5cGUgPSAnYm9yZGVyJzsgfVxuICAgIGlmIChib3JkZXJQb3NpdGlvbiA9PT0gdm9pZCAwKSB7IGJvcmRlclBvc2l0aW9uID0gLTE7IH1cbiAgICB2YXIgaXNCb3JkZXJCb3R0b20gPSBib3JkZXJUeXBlID09PSAnYm9yZGVyQm90dG9tJztcbiAgICByZXR1cm4ge1xuICAgICAgICBib3JkZXJDb2xvcjogYm9yZGVyQ29sb3IsXG4gICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgJzphZnRlcic6IChfYSA9IHtcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIicnXCIsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBpc0JvcmRlckJvdHRvbSA/IDAgOiBib3JkZXJQb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgdG9wOiBib3JkZXJQb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiBib3JkZXJQb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IGlzQm9yZGVyQm90dG9tID8gMCA6IGJvcmRlclBvc2l0aW9uXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfYVtib3JkZXJUeXBlXSA9IFwiMnB4IHNvbGlkIFwiICsgYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgX2EuYm9yZGVyUmFkaXVzID0gYm9yZGVyUmFkaXVzLFxuICAgICAgICAgICAgICAgIF9hLndpZHRoID0gYm9yZGVyVHlwZSA9PT0gJ2JvcmRlckJvdHRvbScgPyAnMTAwJScgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgX2Euc2VsZWN0b3JzID0gKF9iID0ge30sXG4gICAgICAgICAgICAgICAgICAgIF9iW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IChfYyA9IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX2NbYm9yZGVyVHlwZSA9PT0gJ2JvcmRlcicgPyAnYm9yZGVyQ29sb3InIDogJ2JvcmRlckJvdHRvbUNvbG9yJ10gPSAnSGlnaGxpZ2h0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKSxcbiAgICAgICAgICAgICAgICAgICAgX2IpLFxuICAgICAgICAgICAgICAgIF9hKSxcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldEZvY3VzU3R5bGUuanMubWFwIiwiZXhwb3J0IHZhciBoaWRkZW5Db250ZW50U3R5bGUgPSB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgd2lkdGg6IDEsXG4gICAgaGVpZ2h0OiAxLFxuICAgIG1hcmdpbjogLTEsXG4gICAgcGFkZGluZzogMCxcbiAgICBib3JkZXI6IDAsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhpZGRlbkNvbnRlbnRTdHlsZS5qcy5tYXAiLCJpbXBvcnQgeyBTdHlsZXNoZWV0IH0gZnJvbSAnQHVpZmFicmljL21lcmdlLXN0eWxlcyc7XG5pbXBvcnQgeyBtZW1vaXplRnVuY3Rpb24gfSBmcm9tICdAdWlmYWJyaWMvdXRpbGl0aWVzJztcbi8qKlxuICogSW50ZXJuYWwgbWVtb2l6ZWQgZnVuY3Rpb24gd2hpY2ggc2ltcGx5IHRha2VzIGluIHRoZSBjbGFzcyBtYXAgYW5kIHRoZVxuICogZGlzYWJsZSBib29sZWFuLiBUaGVzZSBpbW11dGFibGUgdmFsdWVzIGNhbiBiZSBtZW1vaXplZC5cbiAqL1xudmFyIF9nZXRHbG9iYWxDbGFzc05hbWVzID0gbWVtb2l6ZUZ1bmN0aW9uKGZ1bmN0aW9uIChjbGFzc05hbWVzLCBkaXNhYmxlR2xvYmFsQ2xhc3NOYW1lcykge1xuICAgIHZhciBzdHlsZVNoZWV0ID0gU3R5bGVzaGVldC5nZXRJbnN0YW5jZSgpO1xuICAgIGlmIChkaXNhYmxlR2xvYmFsQ2xhc3NOYW1lcykge1xuICAgICAgICAvLyBkaXNhYmxlIGdsb2JhbCBjbGFzc25hbWVzXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhjbGFzc05hbWVzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBhY2NbY2xhc3NOYW1lXSA9IHN0eWxlU2hlZXQuZ2V0Q2xhc3NOYW1lKGNsYXNzTmFtZXNbY2xhc3NOYW1lXSk7XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCB7fSk7XG4gICAgfVxuICAgIC8vIHVzZSBnbG9iYWwgY2xhc3NuYW1lc1xuICAgIHJldHVybiBjbGFzc05hbWVzO1xufSk7XG4vKipcbiAqIENoZWNrcyBmb3IgdGhlIGBkaXNhYmxlR2xvYmFsQ2xhc3NOYW1lc2AgcHJvcGVydHkgb24gdGhlIGB0aGVtZWAgdG8gZGV0ZXJtaW5lIGlmIGl0IHNob3VsZCByZXR1cm4gYGNsYXNzTmFtZXNgXG4gKiBOb3RlIHRoYXQgY2FsbHMgdG8gdGhpcyBmdW5jdGlvbiBhcmUgbWVtb2l6ZWQuXG4gKlxuICogQHBhcmFtIGNsYXNzTmFtZXMgLSBUaGUgY29sbGVjdGlvbiBvZiBnbG9iYWwgY2xhc3MgbmFtZXMgdGhhdCBhcHBseSB3aGVuIHRoZSBmbGFnIGlzIGZhbHNlLiBNYWtlIHN1cmUgdG8gcGFzcyBpblxuICogdGhlIHNhbWUgaW5zdGFuY2Ugb24gZWFjaCBjYWxsIHRvIGJlbmVmaXQgZnJvbSBtZW1vaXphdGlvbi5cbiAqIEBwYXJhbSB0aGVtZSAtIFRoZSB0aGVtZSB0byBjaGVjayB0aGUgZmxhZyBvblxuICogQHBhcmFtIGRpc2FibGVHbG9iYWxDbGFzc05hbWVzIC0gT3B0aW9uYWwuIEV4cGxpY2l0bHkgb3B0IGluL291dCBvZiBkaXNhYmxpbmcgZ2xvYmFsIGNsYXNzbmFtZXMuIERlZmF1bHRzIHRvIGZhbHNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0R2xvYmFsQ2xhc3NOYW1lcyhjbGFzc05hbWVzLCB0aGVtZSwgZGlzYWJsZUdsb2JhbENsYXNzTmFtZXMpIHtcbiAgICByZXR1cm4gX2dldEdsb2JhbENsYXNzTmFtZXMoY2xhc3NOYW1lcywgZGlzYWJsZUdsb2JhbENsYXNzTmFtZXMgIT09IHVuZGVmaW5lZCA/IGRpc2FibGVHbG9iYWxDbGFzc05hbWVzIDogdGhlbWUuZGlzYWJsZUdsb2JhbENsYXNzTmFtZXMpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0R2xvYmFsQ2xhc3NOYW1lcy5qcy5tYXAiLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICcuL2RvbS9nZXRXaW5kb3cnO1xuLyoqXG4gKiBTdG9yaW5nIGdsb2JhbCBzdGF0ZSBpbiBsb2NhbCBtb2R1bGUgdmFyaWFibGVzIGhhcyBpc3N1ZXMgd2hlbiBtb3JlIHRoYW4gb25lIGNvcHlcbiAqIGlmIHRoZSBtb2R1bGUgZ2V0cyBsb2FkZWQgb24gdGhlIHBhZ2UgKGR1ZSB0byBhIGJ1bmRsaW5nIGVycm9yIG9yIHNpbXBseSBieSBjb25zdW1pbmdcbiAqIGEgcHJlYnVuZGxlZCBzY3JpcHQuKVxuICpcbiAqIFRoaXMgZmlsZSBjb250YWlucyBoZWxwZXJzIHRvIGRlYWwgd2l0aCB0aGUgZ2V0dGluZyBhbmQgc2V0dGluZyBsb2NhbCBzdGF0ZSwgYW5kIGFsbG93c1xuICogY2FsbGVycyB0byBnZXQgY2FsbGVkIGJhY2sgd2hlbiBpdCBtdXRhdGVzLlxuICovXG52YXIgR0xPQkFMX1NFVFRJTkdTX1BST1BfTkFNRSA9ICdfX2dsb2JhbFNldHRpbmdzX18nO1xudmFyIENBTExCQUNLX1NUQVRFX1BST1BfTkFNRSA9ICdfX2NhbGxiYWNrc19fJztcbnZhciBfY291bnRlciA9IDA7XG4vKipcbiAqIEdsb2JhbCBzZXR0aW5ncyBoZWxwZXIsIHdoaWNoIHN0b3JlcyBzZXR0aW5ncyBpbiB0aGUgZ2xvYmFsICh3aW5kb3cpIG5hbWVzcGFjZS5cbiAqIElmIHdpbmRvdyBpcyBub3QgcHJvdmlkZWQsIGl0IHdpbGwgc3RvcmUgc2V0dGluZ3MgaW4gbW9kdWxlIHNjb3BlLiBQcm92aWRlcyBhXG4gKiB3YXkgdG8gb2JzZXJ2ZSBjaGFuZ2VzIGFzIHdlbGwgd2hlbiB0aGVpciB2YWx1ZXMgY2hhbmdlLlxuICpcbiAqIEBwdWJsaWNcbiAqIHtAZG9jQ2F0ZWdvcnkgR2xvYmFsU2V0dGluZ3N9XG4gKi9cbnZhciBHbG9iYWxTZXR0aW5ncyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBHbG9iYWxTZXR0aW5ncygpIHtcbiAgICB9XG4gICAgR2xvYmFsU2V0dGluZ3MuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoa2V5LCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgdmFyIGdsb2JhbFNldHRpbmdzID0gX2dldEdsb2JhbFNldHRpbmdzKCk7XG4gICAgICAgIGlmIChnbG9iYWxTZXR0aW5nc1trZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGdsb2JhbFNldHRpbmdzW2tleV0gPSB0eXBlb2YgZGVmYXVsdFZhbHVlID09PSAnZnVuY3Rpb24nID8gZGVmYXVsdFZhbHVlKCkgOiBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdsb2JhbFNldHRpbmdzW2tleV07XG4gICAgfTtcbiAgICBHbG9iYWxTZXR0aW5ncy5zZXRWYWx1ZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHZhciBnbG9iYWxTZXR0aW5ncyA9IF9nZXRHbG9iYWxTZXR0aW5ncygpO1xuICAgICAgICB2YXIgY2FsbGJhY2tzID0gZ2xvYmFsU2V0dGluZ3NbQ0FMTEJBQ0tfU1RBVEVfUFJPUF9OQU1FXTtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gZ2xvYmFsU2V0dGluZ3Nba2V5XTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgZ2xvYmFsU2V0dGluZ3Nba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgdmFyIGNoYW5nZURlc2NyaXB0aW9uID0ge1xuICAgICAgICAgICAgICAgIG9sZFZhbHVlOiBvbGRWYWx1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm9yICh2YXIgaWQgaW4gY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzW2lkXShjaGFuZ2VEZXNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIEdsb2JhbFNldHRpbmdzLmFkZENoYW5nZUxpc3RlbmVyID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgIC8vIE5vdGU6IHdlIHVzZSBnZW5lcmF0ZWQgaWRzIG9uIHRoZSBjYWxsYmFja3MgdG8gY3JlYXRlIGEgbWFwIG9mIHRoZSBjYWxsYmFja3MsIHdoaWNoIG9wdGltaXplcyByZW1vdmFsLlxuICAgICAgICAvLyAoSXQncyBmYXN0ZXIgdG8gZGVsZXRlIGEga2V5IHRoYW4gaXQgaXMgdG8gbG9vayB1cCB0aGUgaW5kZXggb2YgYW4gb2JqZWN0IGFuZCBzcGxpY2UgYW4gYXJyYXkuKVxuICAgICAgICB2YXIgaWQgPSBjYi5fX2lkX187XG4gICAgICAgIHZhciBjYWxsYmFja3MgPSBfZ2V0Q2FsbGJhY2tzKCk7XG4gICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICAgIGlkID0gY2IuX19pZF9fID0gU3RyaW5nKF9jb3VudGVyKyspO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrc1tpZF0gPSBjYjtcbiAgICB9O1xuICAgIEdsb2JhbFNldHRpbmdzLnJlbW92ZUNoYW5nZUxpc3RlbmVyID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgIHZhciBjYWxsYmFja3MgPSBfZ2V0Q2FsbGJhY2tzKCk7XG4gICAgICAgIGRlbGV0ZSBjYWxsYmFja3NbY2IuX19pZF9fXTtcbiAgICB9O1xuICAgIHJldHVybiBHbG9iYWxTZXR0aW5ncztcbn0oKSk7XG5leHBvcnQgeyBHbG9iYWxTZXR0aW5ncyB9O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIF9nZXRHbG9iYWxTZXR0aW5ncygpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIHdpbiA9IGdldFdpbmRvdygpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgdmFyIGdsb2JhbE9iaiA9IHdpbiB8fCB7fTtcbiAgICBpZiAoIWdsb2JhbE9ialtHTE9CQUxfU0VUVElOR1NfUFJPUF9OQU1FXSkge1xuICAgICAgICBnbG9iYWxPYmpbR0xPQkFMX1NFVFRJTkdTX1BST1BfTkFNRV0gPSAoX2EgPSB7fSxcbiAgICAgICAgICAgIF9hW0NBTExCQUNLX1NUQVRFX1BST1BfTkFNRV0gPSB7fSxcbiAgICAgICAgICAgIF9hKTtcbiAgICB9XG4gICAgcmV0dXJuIGdsb2JhbE9ialtHTE9CQUxfU0VUVElOR1NfUFJPUF9OQU1FXTtcbn1cbmZ1bmN0aW9uIF9nZXRDYWxsYmFja3MoKSB7XG4gICAgdmFyIGdsb2JhbFNldHRpbmdzID0gX2dldEdsb2JhbFNldHRpbmdzKCk7XG4gICAgcmV0dXJuIGdsb2JhbFNldHRpbmdzW0NBTExCQUNLX1NUQVRFX1BST1BfTkFNRV07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HbG9iYWxTZXR0aW5ncy5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgR2xvYmFsU2V0dGluZ3MgfSBmcm9tICcuLi9HbG9iYWxTZXR0aW5ncyc7XG52YXIgQ3VzdG9taXphdGlvbnNHbG9iYWxLZXkgPSAnY3VzdG9taXphdGlvbnMnO1xudmFyIE5PX0NVU1RPTUlaQVRJT05TID0geyBzZXR0aW5nczoge30sIHNjb3BlZFNldHRpbmdzOiB7fSwgaW5DdXN0b21pemVyQ29udGV4dDogZmFsc2UgfTtcbnZhciBfYWxsU2V0dGluZ3MgPSBHbG9iYWxTZXR0aW5ncy5nZXRWYWx1ZShDdXN0b21pemF0aW9uc0dsb2JhbEtleSwge1xuICAgIHNldHRpbmdzOiB7fSxcbiAgICBzY29wZWRTZXR0aW5nczoge30sXG4gICAgaW5DdXN0b21pemVyQ29udGV4dDogZmFsc2UsXG59KTtcbnZhciBfZXZlbnRzID0gW107XG52YXIgQ3VzdG9taXphdGlvbnMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ3VzdG9taXphdGlvbnMoKSB7XG4gICAgfVxuICAgIEN1c3RvbWl6YXRpb25zLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfYWxsU2V0dGluZ3Muc2V0dGluZ3MgPSB7fTtcbiAgICAgICAgX2FsbFNldHRpbmdzLnNjb3BlZFNldHRpbmdzID0ge307XG4gICAgfTtcbiAgICAvKiogQXBwbHkgZ2xvYmFsIEN1c3RvbWl6YXRpb24gc2V0dGluZ3MuXG4gICAgICogQGV4YW1wbGUgQ3VzdG9taXphdGlvbnMuYXBwbHlTZXR0aW5ncyhcXHsgdGhlbWU6IFxcey4uLlxcfSBcXH0pO1xuICAgICAqL1xuICAgIEN1c3RvbWl6YXRpb25zLmFwcGx5U2V0dGluZ3MgPSBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgICAgICAgX2FsbFNldHRpbmdzLnNldHRpbmdzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIF9hbGxTZXR0aW5ncy5zZXR0aW5ncyksIHNldHRpbmdzKTtcbiAgICAgICAgQ3VzdG9taXphdGlvbnMuX3JhaXNlQ2hhbmdlKCk7XG4gICAgfTtcbiAgICAvKiogQXBwbHkgQ3VzdG9taXphdGlvbnMgdG8gYSBwYXJ0aWN1bGFyIG5hbWVkIHNjb3BlLCBsaWtlIGEgY29tcG9uZW50LlxuICAgICAqIEBleGFtcGxlIEN1c3RvbWl6YXRpb25zLmFwcGx5U2NvcGVkU2V0dGluZ3MoJ05hdicsIFxceyBzdHlsZXM6ICgpID1cXD4gXFx7XFx9IFxcfSk7XG4gICAgICovXG4gICAgQ3VzdG9taXphdGlvbnMuYXBwbHlTY29wZWRTZXR0aW5ncyA9IGZ1bmN0aW9uIChzY29wZU5hbWUsIHNldHRpbmdzKSB7XG4gICAgICAgIF9hbGxTZXR0aW5ncy5zY29wZWRTZXR0aW5nc1tzY29wZU5hbWVdID0gX19hc3NpZ24oX19hc3NpZ24oe30sIF9hbGxTZXR0aW5ncy5zY29wZWRTZXR0aW5nc1tzY29wZU5hbWVdKSwgc2V0dGluZ3MpO1xuICAgICAgICBDdXN0b21pemF0aW9ucy5fcmFpc2VDaGFuZ2UoKTtcbiAgICB9O1xuICAgIEN1c3RvbWl6YXRpb25zLmdldFNldHRpbmdzID0gZnVuY3Rpb24gKHByb3BlcnRpZXMsIHNjb3BlTmFtZSwgbG9jYWxTZXR0aW5ncykge1xuICAgICAgICBpZiAobG9jYWxTZXR0aW5ncyA9PT0gdm9pZCAwKSB7IGxvY2FsU2V0dGluZ3MgPSBOT19DVVNUT01JWkFUSU9OUzsgfVxuICAgICAgICB2YXIgc2V0dGluZ3MgPSB7fTtcbiAgICAgICAgdmFyIGxvY2FsU2NvcGVkU2V0dGluZ3MgPSAoc2NvcGVOYW1lICYmIGxvY2FsU2V0dGluZ3Muc2NvcGVkU2V0dGluZ3Nbc2NvcGVOYW1lXSkgfHwge307XG4gICAgICAgIHZhciBnbG9iYWxTY29wZWRTZXR0aW5ncyA9IChzY29wZU5hbWUgJiYgX2FsbFNldHRpbmdzLnNjb3BlZFNldHRpbmdzW3Njb3BlTmFtZV0pIHx8IHt9O1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHByb3BlcnRpZXNfMSA9IHByb3BlcnRpZXM7IF9pIDwgcHJvcGVydGllc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHByb3BlcnR5ID0gcHJvcGVydGllc18xW19pXTtcbiAgICAgICAgICAgIHNldHRpbmdzW3Byb3BlcnR5XSA9XG4gICAgICAgICAgICAgICAgbG9jYWxTY29wZWRTZXR0aW5nc1twcm9wZXJ0eV0gfHxcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTZXR0aW5ncy5zZXR0aW5nc1twcm9wZXJ0eV0gfHxcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsU2NvcGVkU2V0dGluZ3NbcHJvcGVydHldIHx8XG4gICAgICAgICAgICAgICAgICAgIF9hbGxTZXR0aW5ncy5zZXR0aW5nc1twcm9wZXJ0eV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldHRpbmdzO1xuICAgIH07XG4gICAgLyoqIFVzZWQgdG8gcnVuIHNvbWUgY29kZSB0aGF0IHNldHMgQ3VzdG9taXphdGlvbnMgd2l0aG91dCB0cmlnZ2VyaW5nIGFuIHVwZGF0ZSB1bnRpbCB0aGUgZW5kLlxuICAgICAqIFVzZWZ1bCBmb3IgYXBwbHlpbmcgQ3VzdG9taXphdGlvbnMgdGhhdCBkb24ndCBhZmZlY3QgYW55dGhpbmcgY3VycmVudGx5IHJlbmRlcmVkLCBvciBmb3JcbiAgICAgKiBhcHBseWluZyBtYW55IGN1c3RvbWl6YXRpb25zIGF0IG9uY2UuXG4gICAgICogQHBhcmFtIHN1cHByZXNzVXBkYXRlIC0gRG8gbm90IHJhaXNlIHRoZSBjaGFuZ2UgZXZlbnQgYXQgdGhlIGVuZCwgcHJldmVudGluZyBhbGwgdXBkYXRlc1xuICAgICAqL1xuICAgIEN1c3RvbWl6YXRpb25zLmFwcGx5QmF0Y2hlZFVwZGF0ZXMgPSBmdW5jdGlvbiAoY29kZSwgc3VwcHJlc3NVcGRhdGUpIHtcbiAgICAgICAgQ3VzdG9taXphdGlvbnMuX3N1cHByZXNzVXBkYXRlcyA9IHRydWU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb2RlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgICAgICAvKiBkbyBub3RoaW5nICovXG4gICAgICAgIH1cbiAgICAgICAgQ3VzdG9taXphdGlvbnMuX3N1cHByZXNzVXBkYXRlcyA9IGZhbHNlO1xuICAgICAgICBpZiAoIXN1cHByZXNzVXBkYXRlKSB7XG4gICAgICAgICAgICBDdXN0b21pemF0aW9ucy5fcmFpc2VDaGFuZ2UoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ3VzdG9taXphdGlvbnMub2JzZXJ2ZSA9IGZ1bmN0aW9uIChvbkNoYW5nZSkge1xuICAgICAgICBfZXZlbnRzLnB1c2gob25DaGFuZ2UpO1xuICAgIH07XG4gICAgQ3VzdG9taXphdGlvbnMudW5vYnNlcnZlID0gZnVuY3Rpb24gKG9uQ2hhbmdlKSB7XG4gICAgICAgIF9ldmVudHMgPSBfZXZlbnRzLmZpbHRlcihmdW5jdGlvbiAoY2IpIHsgcmV0dXJuIGNiICE9PSBvbkNoYW5nZTsgfSk7XG4gICAgfTtcbiAgICBDdXN0b21pemF0aW9ucy5fcmFpc2VDaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghQ3VzdG9taXphdGlvbnMuX3N1cHByZXNzVXBkYXRlcykge1xuICAgICAgICAgICAgX2V2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChjYikgeyByZXR1cm4gY2IoKTsgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBDdXN0b21pemF0aW9ucztcbn0oKSk7XG5leHBvcnQgeyBDdXN0b21pemF0aW9ucyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q3VzdG9taXphdGlvbnMuanMubWFwIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8vIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuLy8gU3RvcmUgdGhlIHRoZW1pbmcgc3RhdGUgaW4gX190aGVtZVN0YXRlX18gZ2xvYmFsIHNjb3BlIGZvciByZXVzZSBpbiB0aGUgY2FzZSBvZiBkdXBsaWNhdGVcbi8vIGxvYWQtdGhlbWVkLXN0eWxlcyBob3N0ZWQgb24gdGhlIHBhZ2UuXG52YXIgX3Jvb3QgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHdpbmRvdzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4vLyBOb25jZSBzdHJpbmcgdG8gaW5qZWN0IGludG8gc2NyaXB0IHRhZyBpZiBvbmUgcHJvdmlkZWQuIFRoaXMgaXMgdXNlZCBpbiBDU1AgKENvbnRlbnQgU2VjdXJpdHkgUG9saWN5KS5cbnZhciBfc3R5bGVOb25jZSA9IF9yb290ICYmIF9yb290LkNTUFNldHRpbmdzICYmIF9yb290LkNTUFNldHRpbmdzLm5vbmNlO1xudmFyIF90aGVtZVN0YXRlID0gaW5pdGlhbGl6ZVRoZW1lU3RhdGUoKTtcbi8qKlxuICogTWF0Y2hlcyB0aGVtaW5nIHRva2Vucy4gRm9yIGV4YW1wbGUsIFwiW3RoZW1lOiB0aGVtZVNsb3ROYW1lLCBkZWZhdWx0OiAjRkZGXVwiIChpbmNsdWRpbmcgdGhlIHF1b3RlcykuXG4gKi9cbnZhciBfdGhlbWVUb2tlblJlZ2V4ID0gL1tcXCdcXFwiXVxcW3RoZW1lOlxccyooXFx3KylcXHMqKD86XFwsXFxzKmRlZmF1bHQ6XFxzKihbXFxcXFwiXFwnXT9bXFwuXFwsXFwoXFwpXFwjXFwtXFxzXFx3XSpbXFwuXFwsXFwoXFwpXFwjXFwtXFx3XVtcXFwiXFwnXT8pKT9cXHMqXFxdW1xcJ1xcXCJdL2c7XG52YXIgbm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0eXBlb2YgcGVyZm9ybWFuY2UgIT09ICd1bmRlZmluZWQnICYmICEhcGVyZm9ybWFuY2Uubm93ID8gcGVyZm9ybWFuY2Uubm93KCkgOiBEYXRlLm5vdygpO1xufTtcbmZ1bmN0aW9uIG1lYXN1cmUoZnVuYykge1xuICAgIHZhciBzdGFydCA9IG5vdygpO1xuICAgIGZ1bmMoKTtcbiAgICB2YXIgZW5kID0gbm93KCk7XG4gICAgX3RoZW1lU3RhdGUucGVyZi5kdXJhdGlvbiArPSBlbmQgLSBzdGFydDtcbn1cbi8qKlxuICogaW5pdGlhbGl6ZSBnbG9iYWwgc3RhdGUgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGluaXRpYWxpemVUaGVtZVN0YXRlKCkge1xuICAgIHZhciBzdGF0ZSA9IF9yb290Ll9fdGhlbWVTdGF0ZV9fIHx8IHtcbiAgICAgICAgdGhlbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgbGFzdFN0eWxlRWxlbWVudDogdW5kZWZpbmVkLFxuICAgICAgICByZWdpc3RlcmVkU3R5bGVzOiBbXVxuICAgIH07XG4gICAgaWYgKCFzdGF0ZS5ydW5TdGF0ZSkge1xuICAgICAgICBzdGF0ZSA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBzdGF0ZSksIHsgcGVyZjoge1xuICAgICAgICAgICAgICAgIGNvdW50OiAwLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwXG4gICAgICAgICAgICB9LCBydW5TdGF0ZToge1xuICAgICAgICAgICAgICAgIGZsdXNoVGltZXI6IDAsXG4gICAgICAgICAgICAgICAgbW9kZTogMCAvKiBzeW5jICovLFxuICAgICAgICAgICAgICAgIGJ1ZmZlcjogW11cbiAgICAgICAgICAgIH0gfSk7XG4gICAgfVxuICAgIGlmICghc3RhdGUucmVnaXN0ZXJlZFRoZW1hYmxlU3R5bGVzKSB7XG4gICAgICAgIHN0YXRlID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHN0YXRlKSwgeyByZWdpc3RlcmVkVGhlbWFibGVTdHlsZXM6IFtdIH0pO1xuICAgIH1cbiAgICBfcm9vdC5fX3RoZW1lU3RhdGVfXyA9IHN0YXRlO1xuICAgIHJldHVybiBzdGF0ZTtcbn1cbi8qKlxuICogTG9hZHMgYSBzZXQgb2Ygc3R5bGUgdGV4dC4gSWYgaXQgaXMgcmVnaXN0ZXJlZCB0b28gZWFybHksIHdlIHdpbGwgcmVnaXN0ZXIgaXQgd2hlbiB0aGUgd2luZG93LmxvYWRcbiAqIGV2ZW50IGlzIGZpcmVkLlxuICogQHBhcmFtIHtzdHJpbmcgfCBUaGVtYWJsZUFycmF5fSBzdHlsZXMgVGhlbWFibGUgc3R5bGUgdGV4dCB0byByZWdpc3Rlci5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gbG9hZEFzeW5jIFdoZW4gdHJ1ZSwgYWx3YXlzIGxvYWQgc3R5bGVzIGluIGFzeW5jIG1vZGUsIGlycmVzcGVjdGl2ZSBvZiBjdXJyZW50IHN5bmMgbW9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvYWRTdHlsZXMoc3R5bGVzLCBsb2FkQXN5bmMpIHtcbiAgICBpZiAobG9hZEFzeW5jID09PSB2b2lkIDApIHsgbG9hZEFzeW5jID0gZmFsc2U7IH1cbiAgICBtZWFzdXJlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0eWxlUGFydHMgPSBBcnJheS5pc0FycmF5KHN0eWxlcykgPyBzdHlsZXMgOiBzcGxpdFN0eWxlcyhzdHlsZXMpO1xuICAgICAgICB2YXIgX2EgPSBfdGhlbWVTdGF0ZS5ydW5TdGF0ZSwgbW9kZSA9IF9hLm1vZGUsIGJ1ZmZlciA9IF9hLmJ1ZmZlciwgZmx1c2hUaW1lciA9IF9hLmZsdXNoVGltZXI7XG4gICAgICAgIGlmIChsb2FkQXN5bmMgfHwgbW9kZSA9PT0gMSAvKiBhc3luYyAqLykge1xuICAgICAgICAgICAgYnVmZmVyLnB1c2goc3R5bGVQYXJ0cyk7XG4gICAgICAgICAgICBpZiAoIWZsdXNoVGltZXIpIHtcbiAgICAgICAgICAgICAgICBfdGhlbWVTdGF0ZS5ydW5TdGF0ZS5mbHVzaFRpbWVyID0gYXN5bmNMb2FkU3R5bGVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhcHBseVRoZW1hYmxlU3R5bGVzKHN0eWxlUGFydHMpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vKipcbiAqIEFsbG93cyBmb3IgY3VzdG9taXphYmxlIGxvYWRTdHlsZXMgbG9naWMuIGUuZy4gZm9yIHNlcnZlciBzaWRlIHJlbmRlcmluZyBhcHBsaWNhdGlvblxuICogQHBhcmFtIHsocHJvY2Vzc2VkU3R5bGVzOiBzdHJpbmcsIHJhd1N0eWxlcz86IHN0cmluZyB8IFRoZW1hYmxlQXJyYXkpID0+IHZvaWR9XG4gKiBhIGxvYWRTdHlsZXMgY2FsbGJhY2sgdGhhdCBnZXRzIGNhbGxlZCB3aGVuIHN0eWxlcyBhcmUgbG9hZGVkIG9yIHJlbG9hZGVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmVMb2FkU3R5bGVzKGxvYWRTdHlsZXNGbikge1xuICAgIF90aGVtZVN0YXRlLmxvYWRTdHlsZXMgPSBsb2FkU3R5bGVzRm47XG59XG4vKipcbiAqIENvbmZpZ3VyZSBydW4gbW9kZSBvZiBsb2FkLXRoZW1hYmxlLXN0eWxlc1xuICogQHBhcmFtIG1vZGUgbG9hZC10aGVtYWJsZS1zdHlsZXMgcnVuIG1vZGUsIGFzeW5jIG9yIHN5bmNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ3VyZVJ1bk1vZGUobW9kZSkge1xuICAgIF90aGVtZVN0YXRlLnJ1blN0YXRlLm1vZGUgPSBtb2RlO1xufVxuLyoqXG4gKiBleHRlcm5hbCBjb2RlIGNhbiBjYWxsIGZsdXNoIHRvIHN5bmNocm9ub3VzbHkgZm9yY2UgcHJvY2Vzc2luZyBvZiBjdXJyZW50bHkgYnVmZmVyZWQgc3R5bGVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICBtZWFzdXJlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0eWxlQXJyYXlzID0gX3RoZW1lU3RhdGUucnVuU3RhdGUuYnVmZmVyLnNsaWNlKCk7XG4gICAgICAgIF90aGVtZVN0YXRlLnJ1blN0YXRlLmJ1ZmZlciA9IFtdO1xuICAgICAgICB2YXIgbWVyZ2VkU3R5bGVBcnJheSA9IFtdLmNvbmNhdC5hcHBseShbXSwgc3R5bGVBcnJheXMpO1xuICAgICAgICBpZiAobWVyZ2VkU3R5bGVBcnJheS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBhcHBseVRoZW1hYmxlU3R5bGVzKG1lcmdlZFN0eWxlQXJyYXkpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vKipcbiAqIHJlZ2lzdGVyIGFzeW5jIGxvYWRTdHlsZXNcbiAqL1xuZnVuY3Rpb24gYXN5bmNMb2FkU3R5bGVzKCkge1xuICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoZW1lU3RhdGUucnVuU3RhdGUuZmx1c2hUaW1lciA9IDA7XG4gICAgICAgIGZsdXNoKCk7XG4gICAgfSwgMCk7XG59XG4vKipcbiAqIExvYWRzIGEgc2V0IG9mIHN0eWxlIHRleHQuIElmIGl0IGlzIHJlZ2lzdGVyZWQgdG9vIGVhcmx5LCB3ZSB3aWxsIHJlZ2lzdGVyIGl0IHdoZW4gdGhlIHdpbmRvdy5sb2FkIGV2ZW50XG4gKiBpcyBmaXJlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHlsZVRleHQgU3R5bGUgdG8gcmVnaXN0ZXIuXG4gKiBAcGFyYW0ge0lTdHlsZVJlY29yZH0gc3R5bGVSZWNvcmQgRXhpc3Rpbmcgc3R5bGUgcmVjb3JkIHRvIHJlLWFwcGx5LlxuICovXG5mdW5jdGlvbiBhcHBseVRoZW1hYmxlU3R5bGVzKHN0eWxlc0FycmF5LCBzdHlsZVJlY29yZCkge1xuICAgIGlmIChfdGhlbWVTdGF0ZS5sb2FkU3R5bGVzKSB7XG4gICAgICAgIF90aGVtZVN0YXRlLmxvYWRTdHlsZXMocmVzb2x2ZVRoZW1hYmxlQXJyYXkoc3R5bGVzQXJyYXkpLnN0eWxlU3RyaW5nLCBzdHlsZXNBcnJheSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZWdpc3RlclN0eWxlcyhzdHlsZXNBcnJheSk7XG4gICAgfVxufVxuLyoqXG4gKiBSZWdpc3RlcnMgYSBzZXQgdGhlbWUgdG9rZW5zIHRvIGZpbmQgYW5kIHJlcGxhY2UuIElmIHN0eWxlcyB3ZXJlIGFscmVhZHkgcmVnaXN0ZXJlZCwgdGhleSB3aWxsIGJlXG4gKiByZXBsYWNlZC5cbiAqIEBwYXJhbSB7dGhlbWV9IHRoZW1lIEpTT04gb2JqZWN0IG9mIHRoZW1lIHRva2VucyB0byB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2FkVGhlbWUodGhlbWUpIHtcbiAgICBfdGhlbWVTdGF0ZS50aGVtZSA9IHRoZW1lO1xuICAgIC8vIHJlbG9hZCBzdHlsZXMuXG4gICAgcmVsb2FkU3R5bGVzKCk7XG59XG4vKipcbiAqIENsZWFyIGFscmVhZHkgcmVnaXN0ZXJlZCBzdHlsZSBlbGVtZW50cyBhbmQgc3R5bGUgcmVjb3JkcyBpbiB0aGVtZV9TdGF0ZSBvYmplY3RcbiAqIEBwYXJhbSBvcHRpb24gLSBzcGVjaWZ5IHdoaWNoIGdyb3VwIG9mIHJlZ2lzdGVyZWQgc3R5bGVzIHNob3VsZCBiZSBjbGVhcmVkLlxuICogRGVmYXVsdCB0byBiZSBib3RoIHRoZW1hYmxlIGFuZCBub24tdGhlbWFibGUgc3R5bGVzIHdpbGwgYmUgY2xlYXJlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJTdHlsZXMob3B0aW9uKSB7XG4gICAgaWYgKG9wdGlvbiA9PT0gdm9pZCAwKSB7IG9wdGlvbiA9IDMgLyogYWxsICovOyB9XG4gICAgaWYgKG9wdGlvbiA9PT0gMyAvKiBhbGwgKi8gfHwgb3B0aW9uID09PSAyIC8qIG9ubHlOb25UaGVtYWJsZSAqLykge1xuICAgICAgICBjbGVhclN0eWxlc0ludGVybmFsKF90aGVtZVN0YXRlLnJlZ2lzdGVyZWRTdHlsZXMpO1xuICAgICAgICBfdGhlbWVTdGF0ZS5yZWdpc3RlcmVkU3R5bGVzID0gW107XG4gICAgfVxuICAgIGlmIChvcHRpb24gPT09IDMgLyogYWxsICovIHx8IG9wdGlvbiA9PT0gMSAvKiBvbmx5VGhlbWFibGUgKi8pIHtcbiAgICAgICAgY2xlYXJTdHlsZXNJbnRlcm5hbChfdGhlbWVTdGF0ZS5yZWdpc3RlcmVkVGhlbWFibGVTdHlsZXMpO1xuICAgICAgICBfdGhlbWVTdGF0ZS5yZWdpc3RlcmVkVGhlbWFibGVTdHlsZXMgPSBbXTtcbiAgICB9XG59XG5mdW5jdGlvbiBjbGVhclN0eWxlc0ludGVybmFsKHJlY29yZHMpIHtcbiAgICByZWNvcmRzLmZvckVhY2goZnVuY3Rpb24gKHN0eWxlUmVjb3JkKSB7XG4gICAgICAgIHZhciBzdHlsZUVsZW1lbnQgPSBzdHlsZVJlY29yZCAmJiBzdHlsZVJlY29yZC5zdHlsZUVsZW1lbnQ7XG4gICAgICAgIGlmIChzdHlsZUVsZW1lbnQgJiYgc3R5bGVFbGVtZW50LnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHN0eWxlRWxlbWVudC5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8qKlxuICogUmVsb2FkcyBzdHlsZXMuXG4gKi9cbmZ1bmN0aW9uIHJlbG9hZFN0eWxlcygpIHtcbiAgICBpZiAoX3RoZW1lU3RhdGUudGhlbWUpIHtcbiAgICAgICAgdmFyIHRoZW1hYmxlU3R5bGVzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBfdGhlbWVTdGF0ZS5yZWdpc3RlcmVkVGhlbWFibGVTdHlsZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc3R5bGVSZWNvcmQgPSBfYVtfaV07XG4gICAgICAgICAgICB0aGVtYWJsZVN0eWxlcy5wdXNoKHN0eWxlUmVjb3JkLnRoZW1hYmxlU3R5bGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGVtYWJsZVN0eWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjbGVhclN0eWxlcygxIC8qIG9ubHlUaGVtYWJsZSAqLyk7XG4gICAgICAgICAgICBhcHBseVRoZW1hYmxlU3R5bGVzKFtdLmNvbmNhdC5hcHBseShbXSwgdGhlbWFibGVTdHlsZXMpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogRmluZCB0aGVtZSB0b2tlbnMgYW5kIHJlcGxhY2VzIHRoZW0gd2l0aCBwcm92aWRlZCB0aGVtZSB2YWx1ZXMuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3R5bGVzIFRva2VuaXplZCBzdHlsZXMgdG8gZml4LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV0b2tlbml6ZShzdHlsZXMpIHtcbiAgICBpZiAoc3R5bGVzKSB7XG4gICAgICAgIHN0eWxlcyA9IHJlc29sdmVUaGVtYWJsZUFycmF5KHNwbGl0U3R5bGVzKHN0eWxlcykpLnN0eWxlU3RyaW5nO1xuICAgIH1cbiAgICByZXR1cm4gc3R5bGVzO1xufVxuLyoqXG4gKiBSZXNvbHZlcyBUaGVtaW5nSW5zdHJ1Y3Rpb24gb2JqZWN0cyBpbiBhbiBhcnJheSBhbmQgam9pbnMgdGhlIHJlc3VsdCBpbnRvIGEgc3RyaW5nLlxuICogQHBhcmFtIHtUaGVtYWJsZUFycmF5fSBzcGxpdFN0eWxlQXJyYXkgVGhlbWFibGVBcnJheSB0byByZXNvbHZlIGFuZCBqb2luLlxuICovXG5mdW5jdGlvbiByZXNvbHZlVGhlbWFibGVBcnJheShzcGxpdFN0eWxlQXJyYXkpIHtcbiAgICB2YXIgdGhlbWUgPSBfdGhlbWVTdGF0ZS50aGVtZTtcbiAgICB2YXIgdGhlbWFibGUgPSBmYWxzZTtcbiAgICAvLyBSZXNvbHZlIHRoZSBhcnJheSBvZiB0aGVtaW5nIGluc3RydWN0aW9ucyB0byBhbiBhcnJheSBvZiBzdHJpbmdzLlxuICAgIC8vIFRoZW4gam9pbiB0aGUgYXJyYXkgdG8gcHJvZHVjZSB0aGUgZmluYWwgQ1NTIHN0cmluZy5cbiAgICB2YXIgcmVzb2x2ZWRBcnJheSA9IChzcGxpdFN0eWxlQXJyYXkgfHwgW10pLm1hcChmdW5jdGlvbiAoY3VycmVudFZhbHVlKSB7XG4gICAgICAgIHZhciB0aGVtZVNsb3QgPSBjdXJyZW50VmFsdWUudGhlbWU7XG4gICAgICAgIGlmICh0aGVtZVNsb3QpIHtcbiAgICAgICAgICAgIHRoZW1hYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIEEgdGhlbWluZyBhbm5vdGF0aW9uLiBSZXNvbHZlIGl0LlxuICAgICAgICAgICAgdmFyIHRoZW1lZFZhbHVlID0gdGhlbWUgPyB0aGVtZVt0aGVtZVNsb3RdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IGN1cnJlbnRWYWx1ZS5kZWZhdWx0VmFsdWUgfHwgJ2luaGVyaXQnO1xuICAgICAgICAgICAgLy8gV2FybiB0byBjb25zb2xlIGlmIHdlIGhpdCBhbiB1bnRoZW1lZCB2YWx1ZSBldmVuIHdoZW4gdGhlbWVzIGFyZSBwcm92aWRlZCwgYnV0IG9ubHkgaWYgXCJERUJVR1wiIGlzIHRydWUuXG4gICAgICAgICAgICAvLyBBbGxvdyB0aGUgdGhlbWVkVmFsdWUgdG8gYmUgdW5kZWZpbmVkIHRvIGV4cGxpY2l0bHkgcmVxdWVzdCB0aGUgZGVmYXVsdCB2YWx1ZS5cbiAgICAgICAgICAgIGlmICh0aGVtZSAmJlxuICAgICAgICAgICAgICAgICF0aGVtZWRWYWx1ZSAmJlxuICAgICAgICAgICAgICAgIGNvbnNvbGUgJiZcbiAgICAgICAgICAgICAgICAhKHRoZW1lU2xvdCBpbiB0aGVtZSkgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgREVCVUcgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgREVCVUcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJUaGVtaW5nIHZhbHVlIG5vdCBwcm92aWRlZCBmb3IgXFxcIlwiICsgdGhlbWVTbG90ICsgXCJcXFwiLiBGYWxsaW5nIGJhY2sgdG8gXFxcIlwiICsgZGVmYXVsdFZhbHVlICsgXCJcXFwiLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGVtZWRWYWx1ZSB8fCBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBBIG5vbi10aGVtYWJsZSBzdHJpbmcuIFByZXNlcnZlIGl0LlxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRWYWx1ZS5yYXdTdHJpbmc7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdHlsZVN0cmluZzogcmVzb2x2ZWRBcnJheS5qb2luKCcnKSxcbiAgICAgICAgdGhlbWFibGU6IHRoZW1hYmxlXG4gICAgfTtcbn1cbi8qKlxuICogU3BsaXQgdG9rZW5pemVkIENTUyBpbnRvIGFuIGFycmF5IG9mIHN0cmluZ3MgYW5kIHRoZW1lIHNwZWNpZmljYXRpb24gb2JqZWN0c1xuICogQHBhcmFtIHtzdHJpbmd9IHN0eWxlcyBUb2tlbml6ZWQgc3R5bGVzIHRvIHNwbGl0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRTdHlsZXMoc3R5bGVzKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGlmIChzdHlsZXMpIHtcbiAgICAgICAgdmFyIHBvcyA9IDA7IC8vIEN1cnJlbnQgcG9zaXRpb24gaW4gc3R5bGVzLlxuICAgICAgICB2YXIgdG9rZW5NYXRjaCA9IHZvaWQgMDtcbiAgICAgICAgd2hpbGUgKCh0b2tlbk1hdGNoID0gX3RoZW1lVG9rZW5SZWdleC5leGVjKHN0eWxlcykpKSB7XG4gICAgICAgICAgICB2YXIgbWF0Y2hJbmRleCA9IHRva2VuTWF0Y2guaW5kZXg7XG4gICAgICAgICAgICBpZiAobWF0Y2hJbmRleCA+IHBvcykge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgcmF3U3RyaW5nOiBzdHlsZXMuc3Vic3RyaW5nKHBvcywgbWF0Y2hJbmRleClcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICB0aGVtZTogdG9rZW5NYXRjaFsxXSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6IHRva2VuTWF0Y2hbMl0gLy8gTWF5IGJlIHVuZGVmaW5lZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBpbmRleCBvZiB0aGUgZmlyc3QgY2hhcmFjdGVyIGFmdGVyIHRoZSBjdXJyZW50IG1hdGNoXG4gICAgICAgICAgICBwb3MgPSBfdGhlbWVUb2tlblJlZ2V4Lmxhc3RJbmRleDtcbiAgICAgICAgfVxuICAgICAgICAvLyBQdXNoIHRoZSByZXN0IG9mIHRoZSBzdHJpbmcgYWZ0ZXIgdGhlIGxhc3QgbWF0Y2guXG4gICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgIHJhd1N0cmluZzogc3R5bGVzLnN1YnN0cmluZyhwb3MpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBSZWdpc3RlcnMgYSBzZXQgb2Ygc3R5bGUgdGV4dC4gSWYgaXQgaXMgcmVnaXN0ZXJlZCB0b28gZWFybHksIHdlIHdpbGwgcmVnaXN0ZXIgaXQgd2hlbiB0aGVcbiAqIHdpbmRvdy5sb2FkIGV2ZW50IGlzIGZpcmVkLlxuICogQHBhcmFtIHtUaGVtYWJsZUFycmF5fSBzdHlsZUFycmF5IEFycmF5IG9mIElUaGVtaW5nSW5zdHJ1Y3Rpb24gb2JqZWN0cyB0byByZWdpc3Rlci5cbiAqIEBwYXJhbSB7SVN0eWxlUmVjb3JkfSBzdHlsZVJlY29yZCBNYXkgc3BlY2lmeSBhIHN0eWxlIEVsZW1lbnQgdG8gdXBkYXRlLlxuICovXG5mdW5jdGlvbiByZWdpc3RlclN0eWxlcyhzdHlsZUFycmF5KSB7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG4gICAgdmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgdmFyIF9hID0gcmVzb2x2ZVRoZW1hYmxlQXJyYXkoc3R5bGVBcnJheSksIHN0eWxlU3RyaW5nID0gX2Euc3R5bGVTdHJpbmcsIHRoZW1hYmxlID0gX2EudGhlbWFibGU7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1sb2FkLXRoZW1lZC1zdHlsZXMnLCAndHJ1ZScpO1xuICAgIGlmIChfc3R5bGVOb25jZSkge1xuICAgICAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdub25jZScsIF9zdHlsZU5vbmNlKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHN0eWxlU3RyaW5nKSk7XG4gICAgX3RoZW1lU3RhdGUucGVyZi5jb3VudCsrO1xuICAgIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KTtcbiAgICB2YXIgZXYgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuICAgIGV2LmluaXRFdmVudCgnc3R5bGVpbnNlcnQnLCB0cnVlIC8qIGJ1YmJsZUV2ZW50ICovLCBmYWxzZSAvKiBjYW5jZWxhYmxlICovKTtcbiAgICBldi5hcmdzID0ge1xuICAgICAgICBuZXdTdHlsZTogc3R5bGVFbGVtZW50XG4gICAgfTtcbiAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGV2KTtcbiAgICB2YXIgcmVjb3JkID0ge1xuICAgICAgICBzdHlsZUVsZW1lbnQ6IHN0eWxlRWxlbWVudCxcbiAgICAgICAgdGhlbWFibGVTdHlsZTogc3R5bGVBcnJheVxuICAgIH07XG4gICAgaWYgKHRoZW1hYmxlKSB7XG4gICAgICAgIF90aGVtZVN0YXRlLnJlZ2lzdGVyZWRUaGVtYWJsZVN0eWxlcy5wdXNoKHJlY29yZCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBfdGhlbWVTdGF0ZS5yZWdpc3RlcmVkU3R5bGVzLnB1c2gocmVjb3JkKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCIvLyBXaGVuIGFkZGluZyBvciByZW1vdmluZyBhIGNvbG9yLCBtYWtlIHN1cmUgeW91IGtlZXAgdGhpcyBjb25zaXN0ZW50IHdpdGggSUNvbG9yQ2xhc3NOYW1lc1xuLy8gYnkgYWRkaW5nIHRoZSBjb2xvciB2YXJpYW50cy5cbmV4cG9ydCB2YXIgRGVmYXVsdFBhbGV0dGUgPSB7XG4gICAgdGhlbWVEYXJrZXI6ICcjMDA0NTc4JyxcbiAgICB0aGVtZURhcms6ICcjMDA1YTllJyxcbiAgICB0aGVtZURhcmtBbHQ6ICcjMTA2ZWJlJyxcbiAgICB0aGVtZVByaW1hcnk6ICcjMDA3OGQ0JyxcbiAgICB0aGVtZVNlY29uZGFyeTogJyMyYjg4ZDgnLFxuICAgIHRoZW1lVGVydGlhcnk6ICcjNzFhZmU1JyxcbiAgICB0aGVtZUxpZ2h0OiAnI2M3ZTBmNCcsXG4gICAgdGhlbWVMaWdodGVyOiAnI2RlZWNmOScsXG4gICAgdGhlbWVMaWdodGVyQWx0OiAnI2VmZjZmYycsXG4gICAgYmxhY2s6ICcjMDAwMDAwJyxcbiAgICBibGFja1RyYW5zbHVjZW50NDA6ICdyZ2JhKDAsMCwwLC40KScsXG4gICAgbmV1dHJhbERhcms6ICcjMjAxZjFlJyxcbiAgICBuZXV0cmFsUHJpbWFyeTogJyMzMjMxMzAnLFxuICAgIG5ldXRyYWxQcmltYXJ5QWx0OiAnIzNiM2EzOScsXG4gICAgbmV1dHJhbFNlY29uZGFyeTogJyM2MDVlNWMnLFxuICAgIG5ldXRyYWxTZWNvbmRhcnlBbHQ6ICcjOGE4ODg2JyxcbiAgICBuZXV0cmFsVGVydGlhcnk6ICcjYTE5ZjlkJyxcbiAgICBuZXV0cmFsVGVydGlhcnlBbHQ6ICcjYzhjNmM0JyxcbiAgICBuZXV0cmFsUXVhdGVybmFyeTogJyNkMmQwY2UnLFxuICAgIG5ldXRyYWxRdWF0ZXJuYXJ5QWx0OiAnI2UxZGZkZCcsXG4gICAgbmV1dHJhbExpZ2h0OiAnI2VkZWJlOScsXG4gICAgbmV1dHJhbExpZ2h0ZXI6ICcjZjNmMmYxJyxcbiAgICBuZXV0cmFsTGlnaHRlckFsdDogJyNmYWY5ZjgnLFxuICAgIGFjY2VudDogJyMwMDc4ZDQnLFxuICAgIHdoaXRlOiAnI2ZmZmZmZicsXG4gICAgd2hpdGVUcmFuc2x1Y2VudDQwOiAncmdiYSgyNTUsMjU1LDI1NSwuNCknLFxuICAgIHllbGxvd0Rhcms6ICcjZDI5MjAwJyxcbiAgICB5ZWxsb3c6ICcjZmZiOTAwJyxcbiAgICB5ZWxsb3dMaWdodDogJyNmZmYxMDAnLFxuICAgIG9yYW5nZTogJyNkODNiMDEnLFxuICAgIG9yYW5nZUxpZ2h0OiAnI2VhNDMwMCcsXG4gICAgb3JhbmdlTGlnaHRlcjogJyNmZjhjMDAnLFxuICAgIHJlZERhcms6ICcjYTQyNjJjJyxcbiAgICByZWQ6ICcjZTgxMTIzJyxcbiAgICBtYWdlbnRhRGFyazogJyM1YzAwNWMnLFxuICAgIG1hZ2VudGE6ICcjYjQwMDllJyxcbiAgICBtYWdlbnRhTGlnaHQ6ICcjZTMwMDhjJyxcbiAgICBwdXJwbGVEYXJrOiAnIzMyMTQ1YScsXG4gICAgcHVycGxlOiAnIzVjMmQ5MScsXG4gICAgcHVycGxlTGlnaHQ6ICcjYjRhMGZmJyxcbiAgICBibHVlRGFyazogJyMwMDIwNTAnLFxuICAgIGJsdWVNaWQ6ICcjMDAxODhmJyxcbiAgICBibHVlOiAnIzAwNzhkNCcsXG4gICAgYmx1ZUxpZ2h0OiAnIzAwYmNmMicsXG4gICAgdGVhbERhcms6ICcjMDA0YjUwJyxcbiAgICB0ZWFsOiAnIzAwODI3MicsXG4gICAgdGVhbExpZ2h0OiAnIzAwYjI5NCcsXG4gICAgZ3JlZW5EYXJrOiAnIzAwNGIxYycsXG4gICAgZ3JlZW46ICcjMTA3YzEwJyxcbiAgICBncmVlbkxpZ2h0OiAnI2JhZDgwYScsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGVmYXVsdFBhbGV0dGUuanMubWFwIiwiZXhwb3J0IHZhciBEZXB0aHM7XG4oZnVuY3Rpb24gKERlcHRocykge1xuICAgIERlcHRocy5kZXB0aDAgPSAnMCAwIDAgMCB0cmFuc3BhcmVudCc7XG4gICAgRGVwdGhzLmRlcHRoNCA9ICcwIDEuNnB4IDMuNnB4IDAgcmdiYSgwLCAwLCAwLCAwLjEzMiksIDAgMC4zcHggMC45cHggMCByZ2JhKDAsIDAsIDAsIDAuMTA4KSc7XG4gICAgRGVwdGhzLmRlcHRoOCA9ICcwIDMuMnB4IDcuMnB4IDAgcmdiYSgwLCAwLCAwLCAwLjEzMiksIDAgMC42cHggMS44cHggMCByZ2JhKDAsIDAsIDAsIDAuMTA4KSc7XG4gICAgRGVwdGhzLmRlcHRoMTYgPSAnMCA2LjRweCAxNC40cHggMCByZ2JhKDAsIDAsIDAsIDAuMTMyKSwgMCAxLjJweCAzLjZweCAwIHJnYmEoMCwgMCwgMCwgMC4xMDgpJztcbiAgICBEZXB0aHMuZGVwdGg2NCA9ICcwIDI1LjZweCA1Ny42cHggMCByZ2JhKDAsIDAsIDAsIDAuMjIpLCAwIDQuOHB4IDE0LjRweCAwIHJnYmEoMCwgMCwgMCwgMC4xOCknO1xufSkoRGVwdGhzIHx8IChEZXB0aHMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Rmx1ZW50RGVwdGhzLmpzLm1hcCIsImltcG9ydCB7IERlcHRocyB9IGZyb20gJy4vRmx1ZW50RGVwdGhzJztcbmV4cG9ydCB2YXIgRGVmYXVsdEVmZmVjdHMgPSB7XG4gICAgZWxldmF0aW9uNDogRGVwdGhzLmRlcHRoNCxcbiAgICBlbGV2YXRpb244OiBEZXB0aHMuZGVwdGg4LFxuICAgIGVsZXZhdGlvbjE2OiBEZXB0aHMuZGVwdGgxNixcbiAgICBlbGV2YXRpb242NDogRGVwdGhzLmRlcHRoNjQsXG4gICAgcm91bmRlZENvcm5lcjI6ICcycHgnLFxuICAgIHJvdW5kZWRDb3JuZXI0OiAnNHB4JyxcbiAgICByb3VuZGVkQ29ybmVyNjogJzZweCcsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGVmYXVsdEVmZmVjdHMuanMubWFwIiwiaW1wb3J0IHsgZ2V0U3R5bGVPcHRpb25zIH0gZnJvbSAnLi9TdHlsZU9wdGlvbnNTdGF0ZSc7XG5pbXBvcnQgeyBTdHlsZXNoZWV0IH0gZnJvbSAnLi9TdHlsZXNoZWV0JztcbmltcG9ydCB7IHNlcmlhbGl6ZVJ1bGVFbnRyaWVzIH0gZnJvbSAnLi9zdHlsZVRvQ2xhc3NOYW1lJztcbi8qKlxuICogUmVnaXN0ZXJzIGEgZm9udCBmYWNlLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZm9udEZhY2UoZm9udCkge1xuICAgIFN0eWxlc2hlZXQuZ2V0SW5zdGFuY2UoKS5pbnNlcnRSdWxlKFwiQGZvbnQtZmFjZXtcIiArIHNlcmlhbGl6ZVJ1bGVFbnRyaWVzKGdldFN0eWxlT3B0aW9ucygpLCBmb250KSArIFwifVwiLCB0cnVlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvbnRGYWNlLmpzLm1hcCIsImltcG9ydCB7IEZvbnRTaXplcywgRm9udFdlaWdodHMsIExvY2FsaXplZEZvbnRGYW1pbGllcywgTG9jYWxpemVkRm9udE5hbWVzIH0gZnJvbSAnLi9GbHVlbnRGb250cyc7XG4vLyBGYWxsYmFjayBmb250cywgaWYgc3BlY2lmaWVkIHN5c3RlbSBvciB3ZWIgZm9udHMgYXJlIHVuYXZhaWxhYmxlLlxudmFyIEZvbnRGYW1pbHlGYWxsYmFja3MgPSBcIidTZWdvZSBVSScsIC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgJ1JvYm90bycsICdIZWx2ZXRpY2EgTmV1ZScsIHNhbnMtc2VyaWZcIjtcbi8vIEJ5IGRlZmF1bHQsIHdlIGZhdm9yIHN5c3RlbSBmb250cyBmb3IgdGhlIGRlZmF1bHQuXG4vLyBBbGwgbG9jYWxpemVkIGZvbnRzIHVzZSBhIHdlYiBmb250IGFuZCBuZXZlciB1c2UgdGhlIHN5c3RlbSBmb250LlxudmFyIGRlZmF1bHRGb250RmFtaWx5ID0gXCInU2Vnb2UgVUknLCAnXCIgKyBMb2NhbGl6ZWRGb250TmFtZXMuV2VzdEV1cm9wZWFuICsgXCInXCI7XG4vLyBNYXBwaW5nIG9mIGxhbmd1YWdlIHByZWZpeCB0byB0byBmb250IGZhbWlseS5cbnZhciBMYW5ndWFnZVRvRm9udE1hcCA9IHtcbiAgICBhcjogTG9jYWxpemVkRm9udEZhbWlsaWVzLkFyYWJpYyxcbiAgICBiZzogTG9jYWxpemVkRm9udEZhbWlsaWVzLkN5cmlsbGljLFxuICAgIGNzOiBMb2NhbGl6ZWRGb250RmFtaWxpZXMuRWFzdEV1cm9wZWFuLFxuICAgIGVsOiBMb2NhbGl6ZWRGb250RmFtaWxpZXMuR3JlZWssXG4gICAgZXQ6IExvY2FsaXplZEZvbnRGYW1pbGllcy5FYXN0RXVyb3BlYW4sXG4gICAgaGU6IExvY2FsaXplZEZvbnRGYW1pbGllcy5IZWJyZXcsXG4gICAgaGk6IExvY2FsaXplZEZvbnRGYW1pbGllcy5IaW5kaSxcbiAgICBocjogTG9jYWxpemVkRm9udEZhbWlsaWVzLkVhc3RFdXJvcGVhbixcbiAgICBodTogTG9jYWxpemVkRm9udEZhbWlsaWVzLkVhc3RFdXJvcGVhbixcbiAgICBqYTogTG9jYWxpemVkRm9udEZhbWlsaWVzLkphcGFuZXNlLFxuICAgIGtrOiBMb2NhbGl6ZWRGb250RmFtaWxpZXMuRWFzdEV1cm9wZWFuLFxuICAgIGtvOiBMb2NhbGl6ZWRGb250RmFtaWxpZXMuS29yZWFuLFxuICAgIGx0OiBMb2NhbGl6ZWRGb250RmFtaWxpZXMuRWFzdEV1cm9wZWFuLFxuICAgIGx2OiBMb2NhbGl6ZWRGb250RmFtaWxpZXMuRWFzdEV1cm9wZWFuLFxuICAgIHBsOiBMb2NhbGl6ZWRGb250RmFtaWxpZXMuRWFzdEV1cm9wZWFuLFxuICAgIHJ1OiBMb2NhbGl6ZWRGb250RmFtaWxpZXMuQ3lyaWxsaWMsXG4gICAgc2s6IExvY2FsaXplZEZvbnRGYW1pbGllcy5FYXN0RXVyb3BlYW4sXG4gICAgJ3NyLWxhdG4nOiBMb2NhbGl6ZWRGb250RmFtaWxpZXMuRWFzdEV1cm9wZWFuLFxuICAgIHRoOiBMb2NhbGl6ZWRGb250RmFtaWxpZXMuVGhhaSxcbiAgICB0cjogTG9jYWxpemVkRm9udEZhbWlsaWVzLkVhc3RFdXJvcGVhbixcbiAgICB1azogTG9jYWxpemVkRm9udEZhbWlsaWVzLkN5cmlsbGljLFxuICAgIHZpOiBMb2NhbGl6ZWRGb250RmFtaWxpZXMuVmlldG5hbWVzZSxcbiAgICAnemgtaGFucyc6IExvY2FsaXplZEZvbnRGYW1pbGllcy5DaGluZXNlU2ltcGxpZmllZCxcbiAgICAnemgtaGFudCc6IExvY2FsaXplZEZvbnRGYW1pbGllcy5DaGluZXNlVHJhZGl0aW9uYWwsXG4gICAgaHk6IExvY2FsaXplZEZvbnRGYW1pbGllcy5Bcm1lbmlhbixcbiAgICBrYTogTG9jYWxpemVkRm9udEZhbWlsaWVzLkdlb3JnaWFuLFxufTtcbmZ1bmN0aW9uIF9mb250RmFtaWx5V2l0aEZhbGxiYWNrcyhmb250RmFtaWx5KSB7XG4gICAgcmV0dXJuIGZvbnRGYW1pbHkgKyBcIiwgXCIgKyBGb250RmFtaWx5RmFsbGJhY2tzO1xufVxuLyoqXG4gKiBJZiB0aGVyZSBpcyBhIGxvY2FsaXplZCBmb250IGZvciB0aGlzIGxhbmd1YWdlLCByZXR1cm4gdGhhdC5cbiAqIFJldHVybnMgdW5kZWZpbmVkIGlmIHRoZXJlIGlzIG5vIGxvY2FsaXplZCBmb250IGZvciB0aGF0IGxhbmd1YWdlLlxuICovXG5mdW5jdGlvbiBfZ2V0TG9jYWxpemVkRm9udEZhbWlseShsYW5ndWFnZSkge1xuICAgIGZvciAodmFyIGxhbmcgaW4gTGFuZ3VhZ2VUb0ZvbnRNYXApIHtcbiAgICAgICAgaWYgKExhbmd1YWdlVG9Gb250TWFwLmhhc093blByb3BlcnR5KGxhbmcpICYmIGxhbmd1YWdlICYmIGxhbmcuaW5kZXhPZihsYW5ndWFnZSkgPT09IDApIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICByZXR1cm4gTGFuZ3VhZ2VUb0ZvbnRNYXBbbGFuZ107XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRGb250RmFtaWx5O1xufVxuZnVuY3Rpb24gX2NyZWF0ZUZvbnQoc2l6ZSwgd2VpZ2h0LCBmb250RmFtaWx5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICAgICAgTW96T3N4Rm9udFNtb290aGluZzogJ2dyYXlzY2FsZScsXG4gICAgICAgIFdlYmtpdEZvbnRTbW9vdGhpbmc6ICdhbnRpYWxpYXNlZCcsXG4gICAgICAgIGZvbnRTaXplOiBzaXplLFxuICAgICAgICBmb250V2VpZ2h0OiB3ZWlnaHQsXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGb250U3R5bGVzKGxvY2FsZUNvZGUpIHtcbiAgICB2YXIgbG9jYWxpemVkRm9udCA9IF9nZXRMb2NhbGl6ZWRGb250RmFtaWx5KGxvY2FsZUNvZGUpO1xuICAgIHZhciBmb250RmFtaWx5V2l0aEZhbGxiYWNrID0gX2ZvbnRGYW1pbHlXaXRoRmFsbGJhY2tzKGxvY2FsaXplZEZvbnQpO1xuICAgIHZhciBmb250U3R5bGVzID0ge1xuICAgICAgICB0aW55OiBfY3JlYXRlRm9udChGb250U2l6ZXMubWluaSwgRm9udFdlaWdodHMucmVndWxhciwgZm9udEZhbWlseVdpdGhGYWxsYmFjayksXG4gICAgICAgIHhTbWFsbDogX2NyZWF0ZUZvbnQoRm9udFNpemVzLnhTbWFsbCwgRm9udFdlaWdodHMucmVndWxhciwgZm9udEZhbWlseVdpdGhGYWxsYmFjayksXG4gICAgICAgIHNtYWxsOiBfY3JlYXRlRm9udChGb250U2l6ZXMuc21hbGwsIEZvbnRXZWlnaHRzLnJlZ3VsYXIsIGZvbnRGYW1pbHlXaXRoRmFsbGJhY2spLFxuICAgICAgICBzbWFsbFBsdXM6IF9jcmVhdGVGb250KEZvbnRTaXplcy5zbWFsbFBsdXMsIEZvbnRXZWlnaHRzLnJlZ3VsYXIsIGZvbnRGYW1pbHlXaXRoRmFsbGJhY2spLFxuICAgICAgICBtZWRpdW06IF9jcmVhdGVGb250KEZvbnRTaXplcy5tZWRpdW0sIEZvbnRXZWlnaHRzLnJlZ3VsYXIsIGZvbnRGYW1pbHlXaXRoRmFsbGJhY2spLFxuICAgICAgICBtZWRpdW1QbHVzOiBfY3JlYXRlRm9udChGb250U2l6ZXMubWVkaXVtUGx1cywgRm9udFdlaWdodHMucmVndWxhciwgZm9udEZhbWlseVdpdGhGYWxsYmFjayksXG4gICAgICAgIGxhcmdlOiBfY3JlYXRlRm9udChGb250U2l6ZXMubGFyZ2UsIEZvbnRXZWlnaHRzLnJlZ3VsYXIsIGZvbnRGYW1pbHlXaXRoRmFsbGJhY2spLFxuICAgICAgICB4TGFyZ2U6IF9jcmVhdGVGb250KEZvbnRTaXplcy54TGFyZ2UsIEZvbnRXZWlnaHRzLnNlbWlib2xkLCBmb250RmFtaWx5V2l0aEZhbGxiYWNrKSxcbiAgICAgICAgeExhcmdlUGx1czogX2NyZWF0ZUZvbnQoRm9udFNpemVzLnhMYXJnZVBsdXMsIEZvbnRXZWlnaHRzLnNlbWlib2xkLCBmb250RmFtaWx5V2l0aEZhbGxiYWNrKSxcbiAgICAgICAgeHhMYXJnZTogX2NyZWF0ZUZvbnQoRm9udFNpemVzLnh4TGFyZ2UsIEZvbnRXZWlnaHRzLnNlbWlib2xkLCBmb250RmFtaWx5V2l0aEZhbGxiYWNrKSxcbiAgICAgICAgeHhMYXJnZVBsdXM6IF9jcmVhdGVGb250KEZvbnRTaXplcy54eExhcmdlUGx1cywgRm9udFdlaWdodHMuc2VtaWJvbGQsIGZvbnRGYW1pbHlXaXRoRmFsbGJhY2spLFxuICAgICAgICBzdXBlckxhcmdlOiBfY3JlYXRlRm9udChGb250U2l6ZXMuc3VwZXJMYXJnZSwgRm9udFdlaWdodHMuc2VtaWJvbGQsIGZvbnRGYW1pbHlXaXRoRmFsbGJhY2spLFxuICAgICAgICBtZWdhOiBfY3JlYXRlRm9udChGb250U2l6ZXMubWVnYSwgRm9udFdlaWdodHMuc2VtaWJvbGQsIGZvbnRGYW1pbHlXaXRoRmFsbGJhY2spLFxuICAgIH07XG4gICAgcmV0dXJuIGZvbnRTdHlsZXM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVGb250U3R5bGVzLmpzLm1hcCIsImltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnLi9kb20vZ2V0RG9jdW1lbnQnO1xuaW1wb3J0ICogYXMgbG9jYWxTdG9yYWdlIGZyb20gJy4vbG9jYWxTdG9yYWdlJztcbmltcG9ydCAqIGFzIHNlc3Npb25TdG9yYWdlIGZyb20gJy4vc2Vzc2lvblN0b3JhZ2UnO1xuLy8gRGVmYXVsdCB0byB1bmRlZmluZWQgc28gdGhhdCB3ZSBpbml0aWFsaXplIG9uIGZpcnN0IHJlYWQuXG52YXIgX2xhbmd1YWdlO1xudmFyIFNUT1JBR0VfS0VZID0gJ2xhbmd1YWdlJztcbi8qKlxuICogR2V0cyB0aGUgbGFuZ3VhZ2Ugc2V0IGZvciB0aGUgcGFnZS5cbiAqIEBwYXJhbSBwZXJzaXN0ZW5jZVR5cGUgLSBXaGVyZSB0byBwZXJzaXN0IHRoZSB2YWx1ZS4gRGVmYXVsdCBpcyBgbG9jYWxTdG9yYWdlYCBpZiBhdmFpbGFibGUuXG4gKiAoSW4gdmVyc2lvbiA4LCB0aGUgZGVmYXVsdCB3aWxsIGJlIGBzZXNzaW9uU3RvcmFnZWAuKVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGFuZ3VhZ2UocGVyc2lzdGVuY2VUeXBlKSB7XG4gICAgaWYgKHBlcnNpc3RlbmNlVHlwZSA9PT0gdm9pZCAwKSB7IHBlcnNpc3RlbmNlVHlwZSA9ICdsb2NhbFN0b3JhZ2UnOyB9XG4gICAgaWYgKF9sYW5ndWFnZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBkb2MgPSBnZXREb2N1bWVudCgpO1xuICAgICAgICB2YXIgc2F2ZWRMYW5ndWFnZSA9IHBlcnNpc3RlbmNlVHlwZSA9PT0gJ2xvY2FsU3RvcmFnZSdcbiAgICAgICAgICAgID8gbG9jYWxTdG9yYWdlLmdldEl0ZW0oU1RPUkFHRV9LRVkpXG4gICAgICAgICAgICA6IHBlcnNpc3RlbmNlVHlwZSA9PT0gJ3Nlc3Npb25TdG9yYWdlJ1xuICAgICAgICAgICAgICAgID8gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShTVE9SQUdFX0tFWSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHNhdmVkTGFuZ3VhZ2UpIHtcbiAgICAgICAgICAgIF9sYW5ndWFnZSA9IHNhdmVkTGFuZ3VhZ2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9sYW5ndWFnZSA9PT0gdW5kZWZpbmVkICYmIGRvYykge1xuICAgICAgICAgICAgX2xhbmd1YWdlID0gZG9jLmRvY3VtZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2xhbmcnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2xhbmd1YWdlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIF9sYW5ndWFnZSA9ICdlbic7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF9sYW5ndWFnZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXRMYW5ndWFnZShsYW5ndWFnZSwgcGVyc2lzdGVuY2VQYXJhbSkge1xuICAgIHZhciBkb2MgPSBnZXREb2N1bWVudCgpO1xuICAgIGlmIChkb2MpIHtcbiAgICAgICAgZG9jLmRvY3VtZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2xhbmcnLCBsYW5ndWFnZSk7XG4gICAgfVxuICAgIHZhciBwZXJzaXN0ZW5jZVR5cGUgPSBwZXJzaXN0ZW5jZVBhcmFtID09PSB0cnVlID8gJ25vbmUnIDogIXBlcnNpc3RlbmNlUGFyYW0gPyAnbG9jYWxTdG9yYWdlJyA6IHBlcnNpc3RlbmNlUGFyYW07XG4gICAgaWYgKHBlcnNpc3RlbmNlVHlwZSA9PT0gJ2xvY2FsU3RvcmFnZScpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oU1RPUkFHRV9LRVksIGxhbmd1YWdlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAocGVyc2lzdGVuY2VUeXBlID09PSAnc2Vzc2lvblN0b3JhZ2UnKSB7XG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oU1RPUkFHRV9LRVksIGxhbmd1YWdlKTtcbiAgICB9XG4gICAgX2xhbmd1YWdlID0gbGFuZ3VhZ2U7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sYW5ndWFnZS5qcy5tYXAiLCJpbXBvcnQgeyBmb250RmFjZSB9IGZyb20gJ0B1aWZhYnJpYy9tZXJnZS1zdHlsZXMnO1xuaW1wb3J0IHsgRm9udFdlaWdodHMsIExvY2FsaXplZEZvbnRGYW1pbGllcywgTG9jYWxpemVkRm9udE5hbWVzIH0gZnJvbSAnLi9GbHVlbnRGb250cyc7XG5pbXBvcnQgeyBjcmVhdGVGb250U3R5bGVzIH0gZnJvbSAnLi9jcmVhdGVGb250U3R5bGVzJztcbmltcG9ydCB7IGdldExhbmd1YWdlLCBnZXRXaW5kb3cgfSBmcm9tICdAdWlmYWJyaWMvdXRpbGl0aWVzJztcbi8vIERlZmF1bHQgdXJscy5cbnZhciBEZWZhdWx0QmFzZVVybCA9ICdodHRwczovL3N0YXRpYzIuc2hhcmVwb2ludG9ubGluZS5jb20vZmlsZXMvZmFicmljL2Fzc2V0cyc7XG4vLyBTdGFuZGFyZCBmb250IHN0eWxpbmcuXG5leHBvcnQgdmFyIERlZmF1bHRGb250U3R5bGVzID0gY3JlYXRlRm9udFN0eWxlcyhnZXRMYW5ndWFnZSgnc2Vzc2lvblN0b3JhZ2UnKSk7XG5mdW5jdGlvbiBfcmVnaXN0ZXJGb250RmFjZShmb250RmFtaWx5LCB1cmwsIGZvbnRXZWlnaHQsIGxvY2FsRm9udE5hbWUpIHtcbiAgICBmb250RmFtaWx5ID0gXCInXCIgKyBmb250RmFtaWx5ICsgXCInXCI7XG4gICAgdmFyIGxvY2FsRm9udFNyYyA9IGxvY2FsRm9udE5hbWUgIT09IHVuZGVmaW5lZCA/IFwibG9jYWwoJ1wiICsgbG9jYWxGb250TmFtZSArIFwiJyksXCIgOiAnJztcbiAgICBmb250RmFjZSh7XG4gICAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICAgIHNyYzogbG9jYWxGb250U3JjICsgKFwidXJsKCdcIiArIHVybCArIFwiLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLFwiKSArIChcInVybCgnXCIgKyB1cmwgKyBcIi53b2ZmJykgZm9ybWF0KCd3b2ZmJylcIiksXG4gICAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHQsXG4gICAgICAgIGZvbnRTdHlsZTogJ25vcm1hbCcsXG4gICAgICAgIGZvbnREaXNwbGF5OiAnc3dhcCcsXG4gICAgfSk7XG59XG5mdW5jdGlvbiBfcmVnaXN0ZXJGb250RmFjZVNldChiYXNlVXJsLCBmb250RmFtaWx5LCBjZG5Gb2xkZXIsIGNkbkZvbnROYW1lLCBsb2NhbEZvbnROYW1lKSB7XG4gICAgaWYgKGNkbkZvbnROYW1lID09PSB2b2lkIDApIHsgY2RuRm9udE5hbWUgPSAnc2Vnb2V1aSc7IH1cbiAgICB2YXIgdXJsQmFzZSA9IGJhc2VVcmwgKyBcIi9cIiArIGNkbkZvbGRlciArIFwiL1wiICsgY2RuRm9udE5hbWU7XG4gICAgX3JlZ2lzdGVyRm9udEZhY2UoZm9udEZhbWlseSwgdXJsQmFzZSArICctbGlnaHQnLCBGb250V2VpZ2h0cy5saWdodCwgbG9jYWxGb250TmFtZSAmJiBsb2NhbEZvbnROYW1lICsgJyBMaWdodCcpO1xuICAgIF9yZWdpc3RlckZvbnRGYWNlKGZvbnRGYW1pbHksIHVybEJhc2UgKyAnLXNlbWlsaWdodCcsIEZvbnRXZWlnaHRzLnNlbWlsaWdodCwgbG9jYWxGb250TmFtZSAmJiBsb2NhbEZvbnROYW1lICsgJyBTZW1pTGlnaHQnKTtcbiAgICBfcmVnaXN0ZXJGb250RmFjZShmb250RmFtaWx5LCB1cmxCYXNlICsgJy1yZWd1bGFyJywgRm9udFdlaWdodHMucmVndWxhciwgbG9jYWxGb250TmFtZSk7XG4gICAgX3JlZ2lzdGVyRm9udEZhY2UoZm9udEZhbWlseSwgdXJsQmFzZSArICctc2VtaWJvbGQnLCBGb250V2VpZ2h0cy5zZW1pYm9sZCwgbG9jYWxGb250TmFtZSAmJiBsb2NhbEZvbnROYW1lICsgJyBTZW1pQm9sZCcpO1xuICAgIF9yZWdpc3RlckZvbnRGYWNlKGZvbnRGYW1pbHksIHVybEJhc2UgKyAnLWJvbGQnLCBGb250V2VpZ2h0cy5ib2xkLCBsb2NhbEZvbnROYW1lICYmIGxvY2FsRm9udE5hbWUgKyAnIEJvbGQnKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRlZmF1bHRGb250RmFjZXMoYmFzZVVybCkge1xuICAgIGlmIChiYXNlVXJsKSB7XG4gICAgICAgIHZhciBmb250VXJsID0gYmFzZVVybCArIFwiL2ZvbnRzXCI7XG4gICAgICAgIC8vIFByb2R1Y2UgQGZvbnQtZmFjZSBkZWZpbml0aW9ucyBmb3IgYWxsIHN1cHBvcnRlZCB3ZWIgZm9udHMuXG4gICAgICAgIF9yZWdpc3RlckZvbnRGYWNlU2V0KGZvbnRVcmwsIExvY2FsaXplZEZvbnROYW1lcy5UaGFpLCAnbGVlbGF3YWRlZXVpLXRoYWknLCAnbGVlbGF3YWRlZXVpJyk7XG4gICAgICAgIF9yZWdpc3RlckZvbnRGYWNlU2V0KGZvbnRVcmwsIExvY2FsaXplZEZvbnROYW1lcy5BcmFiaWMsICdzZWdvZXVpLWFyYWJpYycpO1xuICAgICAgICBfcmVnaXN0ZXJGb250RmFjZVNldChmb250VXJsLCBMb2NhbGl6ZWRGb250TmFtZXMuQ3lyaWxsaWMsICdzZWdvZXVpLWN5cmlsbGljJyk7XG4gICAgICAgIF9yZWdpc3RlckZvbnRGYWNlU2V0KGZvbnRVcmwsIExvY2FsaXplZEZvbnROYW1lcy5FYXN0RXVyb3BlYW4sICdzZWdvZXVpLWVhc3RldXJvcGVhbicpO1xuICAgICAgICBfcmVnaXN0ZXJGb250RmFjZVNldChmb250VXJsLCBMb2NhbGl6ZWRGb250TmFtZXMuR3JlZWssICdzZWdvZXVpLWdyZWVrJyk7XG4gICAgICAgIF9yZWdpc3RlckZvbnRGYWNlU2V0KGZvbnRVcmwsIExvY2FsaXplZEZvbnROYW1lcy5IZWJyZXcsICdzZWdvZXVpLWhlYnJldycpO1xuICAgICAgICBfcmVnaXN0ZXJGb250RmFjZVNldChmb250VXJsLCBMb2NhbGl6ZWRGb250TmFtZXMuVmlldG5hbWVzZSwgJ3NlZ29ldWktdmlldG5hbWVzZScpO1xuICAgICAgICBfcmVnaXN0ZXJGb250RmFjZVNldChmb250VXJsLCBMb2NhbGl6ZWRGb250TmFtZXMuV2VzdEV1cm9wZWFuLCAnc2Vnb2V1aS13ZXN0ZXVyb3BlYW4nLCAnc2Vnb2V1aScsICdTZWdvZSBVSScpO1xuICAgICAgICBfcmVnaXN0ZXJGb250RmFjZVNldChmb250VXJsLCBMb2NhbGl6ZWRGb250RmFtaWxpZXMuU2VsYXdpaywgJ3NlbGF3aWsnLCAnc2VsYXdpaycpO1xuICAgICAgICBfcmVnaXN0ZXJGb250RmFjZVNldChmb250VXJsLCBMb2NhbGl6ZWRGb250TmFtZXMuQXJtZW5pYW4sICdzZWdvZXVpLWFybWVuaWFuJyk7XG4gICAgICAgIF9yZWdpc3RlckZvbnRGYWNlU2V0KGZvbnRVcmwsIExvY2FsaXplZEZvbnROYW1lcy5HZW9yZ2lhbiwgJ3NlZ29ldWktZ2VvcmdpYW4nKTtcbiAgICAgICAgLy8gTGVlbGF3YWRlZSBVSSAoVGhhaSkgZG9lcyBub3QgaGF2ZSBhICdsaWdodCcgd2VpZ2h0LCBzbyB3ZSBvdmVycmlkZVxuICAgICAgICAvLyB0aGUgZm9udC1mYWNlIGdlbmVyYXRlZCBhYm92ZSB0byB1c2UgdGhlICdzZW1pbGlnaHQnIHdlaWdodCBpbnN0ZWFkLlxuICAgICAgICBfcmVnaXN0ZXJGb250RmFjZSgnTGVlbGF3YWRlZSBVSSBXZWInLCBmb250VXJsICsgXCIvbGVlbGF3YWRlZXVpLXRoYWkvbGVlbGF3YWRlZXVpLXNlbWlsaWdodFwiLCBGb250V2VpZ2h0cy5saWdodCk7XG4gICAgICAgIC8vIExlZWxhd2FkZWUgVUkgKFRoYWkpIGRvZXMgbm90IGhhdmUgYSAnc2VtaWJvbGQnIHdlaWdodCwgc28gd2Ugb3ZlcnJpZGVcbiAgICAgICAgLy8gdGhlIGZvbnQtZmFjZSBnZW5lcmF0ZWQgYWJvdmUgdG8gdXNlIHRoZSAnYm9sZCcgd2VpZ2h0IGluc3RlYWQuXG4gICAgICAgIF9yZWdpc3RlckZvbnRGYWNlKCdMZWVsYXdhZGVlIFVJIFdlYicsIGZvbnRVcmwgKyBcIi9sZWVsYXdhZGVldWktdGhhaS9sZWVsYXdhZGVldWktYm9sZFwiLCBGb250V2VpZ2h0cy5zZW1pYm9sZCk7XG4gICAgfVxufVxuLyoqXG4gKiBSZWFkcyB0aGUgZm9udEJhc2VVcmwgZnJvbSB3aW5kb3cuRmFicmljQ29uZmlnLmZvbnRCYXNlVXJsIG9yIGZhbGxzIGJhY2sgdG8gYSBkZWZhdWx0LlxuICovXG5mdW5jdGlvbiBfZ2V0Rm9udEJhc2VVcmwoKSB7XG4gICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICB2YXIgZmFicmljQ29uZmlnID0gKF9hID0gZ2V0V2luZG93KCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5GYWJyaWNDb25maWc7XG4gICAgcmV0dXJuIF9jID0gKF9iID0gZmFicmljQ29uZmlnKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZm9udEJhc2VVcmwsIChfYyAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBEZWZhdWx0QmFzZVVybCk7XG59XG4vKipcbiAqIFJlZ2lzdGVyIHRoZSBmb250IGZhY2VzLlxuICovXG5yZWdpc3RlckRlZmF1bHRGb250RmFjZXMoX2dldEZvbnRCYXNlVXJsKCkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGVmYXVsdEZvbnRTdHlsZXMuanMubWFwIiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnLi9kb20vZ2V0V2luZG93Jztcbi8qKlxuICogRmV0Y2hlcyBhbiBpdGVtIGZyb20gbG9jYWwgc3RvcmFnZSB3aXRob3V0IHRocm93aW5nIGFuIGV4Y2VwdGlvblxuICogQHBhcmFtIGtleSBUaGUga2V5IG9mIHRoZSBpdGVtIHRvIGZldGNoIGZyb20gbG9jYWwgc3RvcmFnZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SXRlbShrZXkpIHtcbiAgICB2YXIgcmVzdWx0ID0gbnVsbDtcbiAgICB0cnkge1xuICAgICAgICB2YXIgd2luID0gZ2V0V2luZG93KCk7XG4gICAgICAgIHJlc3VsdCA9IHdpbiA/IHdpbi5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpIDogbnVsbDtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgLyogRWF0IHRoZSBleGNlcHRpb24gKi9cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogSW5zZXJ0cyBhbiBpdGVtIGludG8gbG9jYWwgc3RvcmFnZSB3aXRob3V0IHRocm93aW5nIGFuIGV4Y2VwdGlvblxuICogQHBhcmFtIGtleSBUaGUga2V5IG9mIHRoZSBpdGVtIHRvIGFkZCB0byBsb2NhbCBzdG9yYWdlXG4gKiBAcGFyYW0gZGF0YSBUaGUgZGF0YSB0byBwdXQgaW50byBsb2NhbCBzdG9yYWdlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRJdGVtKGtleSwgZGF0YSkge1xuICAgIHRyeSB7XG4gICAgICAgIHZhciB3aW4gPSBnZXRXaW5kb3coKTtcbiAgICAgICAgd2luICYmIHdpbi5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIGRhdGEpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAvKiBFYXQgdGhlIGV4Y2VwdGlvbiAqL1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvY2FsU3RvcmFnZS5qcy5tYXAiLCIvKipcbiAqIFNpbXBsZSBkZWVwIG1lcmdlIGZ1bmN0aW9uLiBUYWtlcyBhbGwgYXJndW1lbnRzIGFuZCByZXR1cm5zIGEgZGVlcCBjb3B5IG9mIHRoZSBvYmplY3RzIG1lcmdlZFxuICogdG9nZXRoZXIgaW4gdGhlIG9yZGVyIHByb3ZpZGVkLiBJZiBhbiBvYmplY3QgY3JlYXRlcyBhIGNpcmN1bGFyIHJlZmVyZW5jZSwgaXQgd2lsbCBhc3NpZ24gdGhlXG4gKiBvcmlnaW5hbCByZWZlcmVuY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZSh0YXJnZXQpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIGZvciAodmFyIF9hID0gMCwgYXJnc18xID0gYXJnczsgX2EgPCBhcmdzXzEubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgIHZhciBhcmcgPSBhcmdzXzFbX2FdO1xuICAgICAgICBfbWVyZ2UodGFyZ2V0IHx8IHt9LCBhcmcpO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuLyoqXG4gKiBUaGUgX21lcmdlIGhlbHBlciBpdGVyYXRlcyB0aHJvdWdoIGFsbCBwcm9wcyBvbiBzb3VyY2UgYW5kIGFzc2lnbnMgdGhlbSB0byB0YXJnZXQuXG4gKiBXaGVuIHRoZSB2YWx1ZSBpcyBhbiBvYmplY3QsIHdlIHdpbGwgY3JlYXRlIGEgZGVlcCBjbG9uZSBvZiB0aGUgb2JqZWN0LiBIb3dldmVyIGlmXG4gKiB0aGVyZSBpcyBhIGNpcmN1bGFyIHJlZmVyZW5jZSwgdGhlIHZhbHVlIHdpbGwgbm90IGJlIGRlZXAgY2xvbmVkIGFuZCB3aWxsIHBlcnNpc3RcbiAqIHRoZSByZWZlcmVuY2UuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBfbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIGNpcmN1bGFyUmVmZXJlbmNlcykge1xuICAgIGlmIChjaXJjdWxhclJlZmVyZW5jZXMgPT09IHZvaWQgMCkgeyBjaXJjdWxhclJlZmVyZW5jZXMgPSBbXTsgfVxuICAgIGNpcmN1bGFyUmVmZXJlbmNlcy5wdXNoKHNvdXJjZSk7XG4gICAgZm9yICh2YXIgbmFtZV8xIGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KG5hbWVfMSkpIHtcbiAgICAgICAgICAgIGlmIChuYW1lXzEgIT09ICdfX3Byb3RvX18nICYmIG5hbWVfMSAhPT0gJ2NvbnN0cnVjdG9yJyAmJiBuYW1lXzEgIT09ICdwcm90b3R5cGUnKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gc291cmNlW25hbWVfMV07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzQ2lyY3VsYXJSZWZlcmVuY2UgPSBjaXJjdWxhclJlZmVyZW5jZXMuaW5kZXhPZih2YWx1ZSkgPiAtMTtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W25hbWVfMV0gPSAoaXNDaXJjdWxhclJlZmVyZW5jZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBfbWVyZ2UodGFyZ2V0W25hbWVfMV0gfHwge30sIHZhbHVlLCBjaXJjdWxhclJlZmVyZW5jZXMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtuYW1lXzFdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNpcmN1bGFyUmVmZXJlbmNlcy5wb3AoKTtcbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2UuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbi8qKiBHZW5lcmF0ZXMgYWxsIHRoZSBzZW1hbnRpYyBzbG90IGNvbG9ycyBiYXNlZCBvbiB0aGUgdGhlbWUgc28gZmFyXG4gKiBXZSdsbCB1c2UgdGhlc2UgYXMgZmFsbGJhY2tzIGZvciBzZW1hbnRpYyBzbG90cyB0aGF0IHRoZSBwYXNzZWQgaW4gdGhlbWUgZGlkIG5vdCBkZWZpbmUuXG4gKiBUaGUgY2FsbGVyIG11c3Qgc3RpbGwgbWl4IGluIHRoZSBjdXN0b21pemVkIHNlbWFudGljIHNsb3RzIGF0IHRoZSBlbmQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlU2VtYW50aWNDb2xvcnMocCwgZSwgcywgaXNJbnZlcnRlZCwgZGVwQ29tbWVudHMpIHtcbiAgICBpZiAoZGVwQ29tbWVudHMgPT09IHZvaWQgMCkgeyBkZXBDb21tZW50cyA9IGZhbHNlOyB9XG4gICAgdmFyIHNlbWFudGljQ29sb3JzID0gX19hc3NpZ24oeyBwcmltYXJ5QnV0dG9uQm9yZGVyOiAndHJhbnNwYXJlbnQnLCBlcnJvclRleHQ6ICFpc0ludmVydGVkID8gJyNhNDI2MmMnIDogJyNGMTcwN0InLCBtZXNzYWdlVGV4dDogIWlzSW52ZXJ0ZWQgPyAnIzMyMzEzMCcgOiAnI0YzRjJGMScsIG1lc3NhZ2VMaW5rOiAhaXNJbnZlcnRlZCA/ICcjMDA1QTlFJyA6ICcjNkNCOEY2JywgbWVzc2FnZUxpbmtIb3ZlcmVkOiAhaXNJbnZlcnRlZCA/ICcjMDA0NTc4JyA6ICcjODJDN0ZGJywgaW5mb0ljb246ICFpc0ludmVydGVkID8gJyM2MDVlNWMnIDogJyNDOEM2QzQnLCBlcnJvckljb246ICFpc0ludmVydGVkID8gJyNBODAwMDAnIDogJyNGMTcwN0InLCBibG9ja2luZ0ljb246ICFpc0ludmVydGVkID8gJyNGREU3RTknIDogJyM0NDI3MjYnLCB3YXJuaW5nSWNvbjogIWlzSW52ZXJ0ZWQgPyAnIzc5Nzc3NScgOiAnI0M4QzZDNCcsIHNldmVyZVdhcm5pbmdJY29uOiAhaXNJbnZlcnRlZCA/ICcjRDgzQjAxJyA6ICcjRkNFMTAwJywgc3VjY2Vzc0ljb246ICFpc0ludmVydGVkID8gJyMxMDdDMTAnIDogJyM5MkMzNTMnLCBpbmZvQmFja2dyb3VuZDogIWlzSW52ZXJ0ZWQgPyAnI2YzZjJmMScgOiAnIzMyMzEzMCcsIGVycm9yQmFja2dyb3VuZDogIWlzSW52ZXJ0ZWQgPyAnI0ZERTdFOScgOiAnIzQ0MjcyNicsIGJsb2NraW5nQmFja2dyb3VuZDogIWlzSW52ZXJ0ZWQgPyAnI0ZERTdFOScgOiAnIzQ0MjcyNicsIHdhcm5pbmdCYWNrZ3JvdW5kOiAhaXNJbnZlcnRlZCA/ICcjRkZGNENFJyA6ICcjNDMzNTE5Jywgc2V2ZXJlV2FybmluZ0JhY2tncm91bmQ6ICFpc0ludmVydGVkID8gJyNGRUQ5Q0MnIDogJyM0RjJBMEYnLCBzdWNjZXNzQmFja2dyb3VuZDogIWlzSW52ZXJ0ZWQgPyAnI0RGRjZERCcgOiAnIzM5M0QxQicsIFxuICAgICAgICAvLyBkZXByZWNhdGVkXG4gICAgICAgIHdhcm5pbmdIaWdobGlnaHQ6ICFpc0ludmVydGVkID8gJyNmZmI5MDAnIDogJyNmZmYxMDAnLCBzdWNjZXNzVGV4dDogIWlzSW52ZXJ0ZWQgPyAnIzEwN0MxMCcgOiAnIzkyYzM1MycgfSwgcyk7XG4gICAgdmFyIGZ1bGxTZW1hbnRpY0NvbG9ycyA9IGdldFNlbWFudGljQ29sb3JzKHAsIGUsIHNlbWFudGljQ29sb3JzLCBpc0ludmVydGVkKTtcbiAgICByZXR1cm4gX2ZpeERlcHJlY2F0ZWRTbG90cyhmdWxsU2VtYW50aWNDb2xvcnMsIGRlcENvbW1lbnRzKTtcbn1cbi8qKlxuICogTWFwIHBhcnRpYWwgcGxhdHRlIGFuZCBlZmZlY3RzIHRvIHBhcnRpYWwgc2VtYW50aWMgY29sb3JzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VtYW50aWNDb2xvcnMocCwgZSwgcywgaXNJbnZlcnRlZCwgZGVwQ29tbWVudHMpIHtcbiAgICBpZiAoZGVwQ29tbWVudHMgPT09IHZvaWQgMCkgeyBkZXBDb21tZW50cyA9IGZhbHNlOyB9XG4gICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIC8vIG1hcCBwYWxldHRlXG4gICAgdmFyIF9kID0gcCB8fCB7fSwgd2hpdGUgPSBfZC53aGl0ZSwgYmxhY2sgPSBfZC5ibGFjaywgdGhlbWVQcmltYXJ5ID0gX2QudGhlbWVQcmltYXJ5LCB0aGVtZURhcmsgPSBfZC50aGVtZURhcmssIHRoZW1lRGFya2VyID0gX2QudGhlbWVEYXJrZXIsIHRoZW1lRGFya0FsdCA9IF9kLnRoZW1lRGFya0FsdCwgdGhlbWVMaWdodGVyID0gX2QudGhlbWVMaWdodGVyLCBuZXV0cmFsTGlnaHQgPSBfZC5uZXV0cmFsTGlnaHQsIG5ldXRyYWxMaWdodGVyID0gX2QubmV1dHJhbExpZ2h0ZXIsIG5ldXRyYWxEYXJrID0gX2QubmV1dHJhbERhcmssIG5ldXRyYWxRdWF0ZXJuYXJ5ID0gX2QubmV1dHJhbFF1YXRlcm5hcnksIG5ldXRyYWxRdWF0ZXJuYXJ5QWx0ID0gX2QubmV1dHJhbFF1YXRlcm5hcnlBbHQsIG5ldXRyYWxQcmltYXJ5ID0gX2QubmV1dHJhbFByaW1hcnksIG5ldXRyYWxTZWNvbmRhcnkgPSBfZC5uZXV0cmFsU2Vjb25kYXJ5LCBuZXV0cmFsU2Vjb25kYXJ5QWx0ID0gX2QubmV1dHJhbFNlY29uZGFyeUFsdCwgbmV1dHJhbFRlcnRpYXJ5ID0gX2QubmV1dHJhbFRlcnRpYXJ5LCBuZXV0cmFsVGVydGlhcnlBbHQgPSBfZC5uZXV0cmFsVGVydGlhcnlBbHQsIG5ldXRyYWxMaWdodGVyQWx0ID0gX2QubmV1dHJhbExpZ2h0ZXJBbHQsIGFjY2VudCA9IF9kLmFjY2VudDtcbiAgICBpZiAod2hpdGUpIHtcbiAgICAgICAgcmVzdWx0LmJvZHlCYWNrZ3JvdW5kID0gd2hpdGU7XG4gICAgICAgIHJlc3VsdC5ib2R5RnJhbWVCYWNrZ3JvdW5kID0gd2hpdGU7XG4gICAgICAgIHJlc3VsdC5hY2NlbnRCdXR0b25UZXh0ID0gd2hpdGU7XG4gICAgICAgIHJlc3VsdC5idXR0b25CYWNrZ3JvdW5kID0gd2hpdGU7XG4gICAgICAgIHJlc3VsdC5wcmltYXJ5QnV0dG9uVGV4dCA9IHdoaXRlO1xuICAgICAgICByZXN1bHQucHJpbWFyeUJ1dHRvblRleHRIb3ZlcmVkID0gd2hpdGU7XG4gICAgICAgIHJlc3VsdC5wcmltYXJ5QnV0dG9uVGV4dFByZXNzZWQgPSB3aGl0ZTtcbiAgICAgICAgcmVzdWx0LmlucHV0QmFja2dyb3VuZCA9IHdoaXRlO1xuICAgICAgICByZXN1bHQuaW5wdXRGb3JlZ3JvdW5kQ2hlY2tlZCA9IHdoaXRlO1xuICAgICAgICByZXN1bHQubGlzdEJhY2tncm91bmQgPSB3aGl0ZTtcbiAgICAgICAgcmVzdWx0Lm1lbnVCYWNrZ3JvdW5kID0gd2hpdGU7XG4gICAgICAgIHJlc3VsdC5jYXJkU3RhbmRvdXRCYWNrZ3JvdW5kID0gd2hpdGU7XG4gICAgfVxuICAgIGlmIChibGFjaykge1xuICAgICAgICByZXN1bHQuYm9keVRleHRDaGVja2VkID0gYmxhY2s7XG4gICAgICAgIHJlc3VsdC5idXR0b25UZXh0Q2hlY2tlZEhvdmVyZWQgPSBibGFjaztcbiAgICB9XG4gICAgaWYgKHRoZW1lUHJpbWFyeSkge1xuICAgICAgICByZXN1bHQubGluayA9IHRoZW1lUHJpbWFyeTtcbiAgICAgICAgcmVzdWx0LnByaW1hcnlCdXR0b25CYWNrZ3JvdW5kID0gdGhlbWVQcmltYXJ5O1xuICAgICAgICByZXN1bHQuaW5wdXRCYWNrZ3JvdW5kQ2hlY2tlZCA9IHRoZW1lUHJpbWFyeTtcbiAgICAgICAgcmVzdWx0LmlucHV0SWNvbiA9IHRoZW1lUHJpbWFyeTtcbiAgICAgICAgcmVzdWx0LmlucHV0Rm9jdXNCb3JkZXJBbHQgPSB0aGVtZVByaW1hcnk7XG4gICAgICAgIHJlc3VsdC5tZW51SWNvbiA9IHRoZW1lUHJpbWFyeTtcbiAgICAgICAgcmVzdWx0Lm1lbnVIZWFkZXIgPSB0aGVtZVByaW1hcnk7XG4gICAgICAgIHJlc3VsdC5hY2NlbnRCdXR0b25CYWNrZ3JvdW5kID0gdGhlbWVQcmltYXJ5O1xuICAgIH1cbiAgICBpZiAodGhlbWVEYXJrKSB7XG4gICAgICAgIHJlc3VsdC5wcmltYXJ5QnV0dG9uQmFja2dyb3VuZFByZXNzZWQgPSB0aGVtZURhcms7XG4gICAgICAgIHJlc3VsdC5pbnB1dEJhY2tncm91bmRDaGVja2VkSG92ZXJlZCA9IHRoZW1lRGFyaztcbiAgICAgICAgcmVzdWx0LmlucHV0SWNvbkhvdmVyZWQgPSB0aGVtZURhcms7XG4gICAgfVxuICAgIGlmICh0aGVtZURhcmtlcikge1xuICAgICAgICByZXN1bHQubGlua0hvdmVyZWQgPSB0aGVtZURhcmtlcjtcbiAgICB9XG4gICAgaWYgKHRoZW1lRGFya0FsdCkge1xuICAgICAgICByZXN1bHQucHJpbWFyeUJ1dHRvbkJhY2tncm91bmRIb3ZlcmVkID0gdGhlbWVEYXJrQWx0O1xuICAgIH1cbiAgICBpZiAodGhlbWVMaWdodGVyKSB7XG4gICAgICAgIHJlc3VsdC5pbnB1dFBsYWNlaG9sZGVyQmFja2dyb3VuZENoZWNrZWQgPSB0aGVtZUxpZ2h0ZXI7XG4gICAgfVxuICAgIGlmIChuZXV0cmFsTGlnaHQpIHtcbiAgICAgICAgcmVzdWx0LmJvZHlCYWNrZ3JvdW5kQ2hlY2tlZCA9IG5ldXRyYWxMaWdodDtcbiAgICAgICAgcmVzdWx0LmJvZHlGcmFtZURpdmlkZXIgPSBuZXV0cmFsTGlnaHQ7XG4gICAgICAgIHJlc3VsdC5ib2R5RGl2aWRlciA9IG5ldXRyYWxMaWdodDtcbiAgICAgICAgcmVzdWx0LnZhcmlhbnRCb3JkZXIgPSBuZXV0cmFsTGlnaHQ7XG4gICAgICAgIHJlc3VsdC5idXR0b25CYWNrZ3JvdW5kQ2hlY2tlZEhvdmVyZWQgPSBuZXV0cmFsTGlnaHQ7XG4gICAgICAgIHJlc3VsdC5idXR0b25CYWNrZ3JvdW5kUHJlc3NlZCA9IG5ldXRyYWxMaWdodDtcbiAgICAgICAgcmVzdWx0Lmxpc3RJdGVtQmFja2dyb3VuZENoZWNrZWQgPSBuZXV0cmFsTGlnaHQ7XG4gICAgICAgIHJlc3VsdC5saXN0SGVhZGVyQmFja2dyb3VuZFByZXNzZWQgPSBuZXV0cmFsTGlnaHQ7XG4gICAgICAgIHJlc3VsdC5tZW51SXRlbUJhY2tncm91bmRQcmVzc2VkID0gbmV1dHJhbExpZ2h0O1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgcmVzdWx0Lm1lbnVJdGVtQmFja2dyb3VuZENoZWNrZWQgPSBuZXV0cmFsTGlnaHQ7XG4gICAgfVxuICAgIGlmIChuZXV0cmFsTGlnaHRlcikge1xuICAgICAgICByZXN1bHQuYm9keUJhY2tncm91bmRIb3ZlcmVkID0gbmV1dHJhbExpZ2h0ZXI7XG4gICAgICAgIHJlc3VsdC5idXR0b25CYWNrZ3JvdW5kSG92ZXJlZCA9IG5ldXRyYWxMaWdodGVyO1xuICAgICAgICByZXN1bHQuYnV0dG9uQmFja2dyb3VuZERpc2FibGVkID0gbmV1dHJhbExpZ2h0ZXI7XG4gICAgICAgIHJlc3VsdC5idXR0b25Cb3JkZXJEaXNhYmxlZCA9IG5ldXRyYWxMaWdodGVyO1xuICAgICAgICByZXN1bHQucHJpbWFyeUJ1dHRvbkJhY2tncm91bmREaXNhYmxlZCA9IG5ldXRyYWxMaWdodGVyO1xuICAgICAgICByZXN1bHQuZGlzYWJsZWRCYWNrZ3JvdW5kID0gbmV1dHJhbExpZ2h0ZXI7XG4gICAgICAgIHJlc3VsdC5saXN0SXRlbUJhY2tncm91bmRIb3ZlcmVkID0gbmV1dHJhbExpZ2h0ZXI7XG4gICAgICAgIHJlc3VsdC5saXN0SGVhZGVyQmFja2dyb3VuZEhvdmVyZWQgPSBuZXV0cmFsTGlnaHRlcjtcbiAgICAgICAgcmVzdWx0Lm1lbnVJdGVtQmFja2dyb3VuZEhvdmVyZWQgPSBuZXV0cmFsTGlnaHRlcjtcbiAgICB9XG4gICAgaWYgKG5ldXRyYWxRdWF0ZXJuYXJ5KSB7XG4gICAgICAgIHJlc3VsdC5wcmltYXJ5QnV0dG9uVGV4dERpc2FibGVkID0gbmV1dHJhbFF1YXRlcm5hcnk7XG4gICAgICAgIHJlc3VsdC5kaXNhYmxlZFN1YnRleHQgPSBuZXV0cmFsUXVhdGVybmFyeTtcbiAgICB9XG4gICAgaWYgKG5ldXRyYWxRdWF0ZXJuYXJ5QWx0KSB7XG4gICAgICAgIHJlc3VsdC5saXN0SXRlbUJhY2tncm91bmRDaGVja2VkSG92ZXJlZCA9IG5ldXRyYWxRdWF0ZXJuYXJ5QWx0O1xuICAgIH1cbiAgICBpZiAobmV1dHJhbFRlcnRpYXJ5KSB7XG4gICAgICAgIHJlc3VsdC5kaXNhYmxlZEJvZHlUZXh0ID0gbmV1dHJhbFRlcnRpYXJ5O1xuICAgICAgICByZXN1bHQudmFyaWFudEJvcmRlckhvdmVyZWQgPSAoKF9hID0gcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnZhcmlhbnRCb3JkZXJIb3ZlcmVkKSB8fCBuZXV0cmFsVGVydGlhcnk7XG4gICAgICAgIHJlc3VsdC5idXR0b25UZXh0RGlzYWJsZWQgPSBuZXV0cmFsVGVydGlhcnk7XG4gICAgICAgIHJlc3VsdC5pbnB1dEljb25EaXNhYmxlZCA9IG5ldXRyYWxUZXJ0aWFyeTtcbiAgICAgICAgcmVzdWx0LmRpc2FibGVkVGV4dCA9IG5ldXRyYWxUZXJ0aWFyeTtcbiAgICB9XG4gICAgaWYgKG5ldXRyYWxQcmltYXJ5KSB7XG4gICAgICAgIHJlc3VsdC5ib2R5VGV4dCA9IG5ldXRyYWxQcmltYXJ5O1xuICAgICAgICByZXN1bHQuYWN0aW9uTGluayA9IG5ldXRyYWxQcmltYXJ5O1xuICAgICAgICByZXN1bHQuYnV0dG9uVGV4dCA9IG5ldXRyYWxQcmltYXJ5O1xuICAgICAgICByZXN1bHQuaW5wdXRCb3JkZXJIb3ZlcmVkID0gbmV1dHJhbFByaW1hcnk7XG4gICAgICAgIHJlc3VsdC5pbnB1dFRleHQgPSBuZXV0cmFsUHJpbWFyeTtcbiAgICAgICAgcmVzdWx0Lmxpc3RUZXh0ID0gbmV1dHJhbFByaW1hcnk7XG4gICAgICAgIHJlc3VsdC5tZW51SXRlbVRleHQgPSBuZXV0cmFsUHJpbWFyeTtcbiAgICB9XG4gICAgaWYgKG5ldXRyYWxMaWdodGVyQWx0KSB7XG4gICAgICAgIHJlc3VsdC5ib2R5U3RhbmRvdXRCYWNrZ3JvdW5kID0gbmV1dHJhbExpZ2h0ZXJBbHQ7XG4gICAgICAgIHJlc3VsdC5kZWZhdWx0U3RhdGVCYWNrZ3JvdW5kID0gbmV1dHJhbExpZ2h0ZXJBbHQ7XG4gICAgfVxuICAgIGlmIChuZXV0cmFsRGFyaykge1xuICAgICAgICByZXN1bHQuYWN0aW9uTGlua0hvdmVyZWQgPSBuZXV0cmFsRGFyaztcbiAgICAgICAgcmVzdWx0LmJ1dHRvblRleHRIb3ZlcmVkID0gbmV1dHJhbERhcms7XG4gICAgICAgIHJlc3VsdC5idXR0b25UZXh0Q2hlY2tlZCA9IG5ldXRyYWxEYXJrO1xuICAgICAgICByZXN1bHQuYnV0dG9uVGV4dFByZXNzZWQgPSBuZXV0cmFsRGFyaztcbiAgICAgICAgcmVzdWx0LmlucHV0VGV4dEhvdmVyZWQgPSBuZXV0cmFsRGFyaztcbiAgICAgICAgcmVzdWx0Lm1lbnVJdGVtVGV4dEhvdmVyZWQgPSBuZXV0cmFsRGFyaztcbiAgICB9XG4gICAgaWYgKG5ldXRyYWxTZWNvbmRhcnkpIHtcbiAgICAgICAgcmVzdWx0LmJvZHlTdWJ0ZXh0ID0gbmV1dHJhbFNlY29uZGFyeTtcbiAgICAgICAgcmVzdWx0LmZvY3VzQm9yZGVyID0gbmV1dHJhbFNlY29uZGFyeTtcbiAgICAgICAgcmVzdWx0LmlucHV0Qm9yZGVyID0gbmV1dHJhbFNlY29uZGFyeTtcbiAgICAgICAgcmVzdWx0LnNtYWxsSW5wdXRCb3JkZXIgPSBuZXV0cmFsU2Vjb25kYXJ5O1xuICAgICAgICByZXN1bHQuaW5wdXRQbGFjZWhvbGRlclRleHQgPSBuZXV0cmFsU2Vjb25kYXJ5O1xuICAgIH1cbiAgICBpZiAobmV1dHJhbFNlY29uZGFyeUFsdCkge1xuICAgICAgICByZXN1bHQuYnV0dG9uQm9yZGVyID0gbmV1dHJhbFNlY29uZGFyeUFsdDtcbiAgICB9XG4gICAgaWYgKG5ldXRyYWxUZXJ0aWFyeUFsdCkge1xuICAgICAgICByZXN1bHQuZGlzYWJsZWRCb2R5U3VidGV4dCA9IG5ldXRyYWxUZXJ0aWFyeUFsdDtcbiAgICAgICAgcmVzdWx0LmRpc2FibGVkQm9yZGVyID0gbmV1dHJhbFRlcnRpYXJ5QWx0O1xuICAgICAgICByZXN1bHQuYnV0dG9uQmFja2dyb3VuZENoZWNrZWQgPSBuZXV0cmFsVGVydGlhcnlBbHQ7XG4gICAgICAgIHJlc3VsdC5tZW51RGl2aWRlciA9IG5ldXRyYWxUZXJ0aWFyeUFsdDtcbiAgICB9XG4gICAgaWYgKGFjY2VudCkge1xuICAgICAgICByZXN1bHQuYWNjZW50QnV0dG9uQmFja2dyb3VuZCA9IGFjY2VudDtcbiAgICB9XG4gICAgLy8gbWFwIGVmZmVjdHNcbiAgICBpZiAoKF9iID0gZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmVsZXZhdGlvbjQpIHtcbiAgICAgICAgcmVzdWx0LmNhcmRTaGFkb3cgPSBlLmVsZXZhdGlvbjQ7XG4gICAgfVxuICAgIGlmICghaXNJbnZlcnRlZCAmJiAoKF9jID0gZSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmVsZXZhdGlvbjgpKSB7XG4gICAgICAgIHJlc3VsdC5jYXJkU2hhZG93SG92ZXJlZCA9IGUuZWxldmF0aW9uODtcbiAgICB9XG4gICAgZWxzZSBpZiAocmVzdWx0LnZhcmlhbnRCb3JkZXJIb3ZlcmVkKSB7XG4gICAgICAgIHJlc3VsdC5jYXJkU2hhZG93SG92ZXJlZCA9ICcwIDAgMXB4ICcgKyByZXN1bHQudmFyaWFudEJvcmRlckhvdmVyZWQ7XG4gICAgfVxuICAgIHJlc3VsdCA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCByZXN1bHQpLCBzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gX2ZpeERlcHJlY2F0ZWRTbG90cyhzLCBkZXBDb21tZW50cykge1xuICAgIC8vIEFkZCBAZGVwcmVjYXRlZCB0YWcgYXMgY29tbWVudCBpZiBlbmFibGVkXG4gICAgdmFyIGRlcCA9ICcnO1xuICAgIGlmIChkZXBDb21tZW50cyA9PT0gdHJ1ZSkge1xuICAgICAgICBkZXAgPSAnIC8qIEBkZXByZWNhdGVkICovJztcbiAgICB9XG4gICAgLyogZXNsaW50LWRpc2FibGUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb24gKi9cbiAgICBzLmxpc3RUZXh0Q29sb3IgPSBzLmxpc3RUZXh0ICsgZGVwO1xuICAgIHMubWVudUl0ZW1CYWNrZ3JvdW5kQ2hlY2tlZCArPSBkZXA7XG4gICAgcy53YXJuaW5nSGlnaGxpZ2h0ICs9IGRlcDtcbiAgICBzLndhcm5pbmdUZXh0ID0gcy5tZXNzYWdlVGV4dCArIGRlcDtcbiAgICBzLnN1Y2Nlc3NUZXh0ICs9IGRlcDtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uICovXG4gICAgcmV0dXJuIHM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYWtlU2VtYW50aWNDb2xvcnMuanMubWFwIiwiZXhwb3J0IHZhciBEZWZhdWx0U3BhY2luZyA9IHtcbiAgICBzMjogJzRweCcsXG4gICAgczE6ICc4cHgnLFxuICAgIG06ICcxNnB4JyxcbiAgICBsMTogJzIwcHgnLFxuICAgIGwyOiAnMzJweCcsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGVmYXVsdFNwYWNpbmcuanMubWFwIiwiaW1wb3J0IHsgRGVmYXVsdFBhbGV0dGUgfSBmcm9tICcuL2NvbG9ycy9pbmRleCc7XG5pbXBvcnQgeyBEZWZhdWx0RWZmZWN0cyB9IGZyb20gJy4vZWZmZWN0cy9pbmRleCc7XG5pbXBvcnQgeyBEZWZhdWx0Rm9udFN0eWxlcyB9IGZyb20gJy4vZm9udHMvaW5kZXgnO1xuaW1wb3J0IHsgbWVyZ2VUaGVtZXMgfSBmcm9tICcuL21lcmdlVGhlbWVzJztcbmltcG9ydCB7IERlZmF1bHRTcGFjaW5nIH0gZnJvbSAnLi9zcGFjaW5nL2luZGV4JztcbmltcG9ydCB7IG1ha2VTZW1hbnRpY0NvbG9ycyB9IGZyb20gJy4vdXRpbGl0aWVzL21ha2VTZW1hbnRpY0NvbG9ycyc7XG4vKipcbiAqIENyZWF0ZXMgYSBjdXN0b20gdGhlbWUgZGVmaW5pdGlvbi5cbiAqIEBwYXJhbSB0aGVtZSAtIFBhcnRpYWwgdGhlbWUgb2JqZWN0LlxuICogQHBhcmFtIGRlcENvbW1lbnRzIC0gV2hldGhlciB0byBpbmNsdWRlIGRlcHJlY2F0ZWQgdGFncyBhcyBjb21tZW50cyBmb3IgZGVwcmVjYXRlZCBzbG90cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRoZW1lKHRoZW1lLCBkZXBDb21tZW50cykge1xuICAgIGlmICh0aGVtZSA9PT0gdm9pZCAwKSB7IHRoZW1lID0ge307IH1cbiAgICBpZiAoZGVwQ29tbWVudHMgPT09IHZvaWQgMCkgeyBkZXBDb21tZW50cyA9IGZhbHNlOyB9XG4gICAgdmFyIGJhc2VUaGVtZSA9IHtcbiAgICAgICAgcGFsZXR0ZTogRGVmYXVsdFBhbGV0dGUsXG4gICAgICAgIGVmZmVjdHM6IERlZmF1bHRFZmZlY3RzLFxuICAgICAgICBmb250czogRGVmYXVsdEZvbnRTdHlsZXMsXG4gICAgICAgIHNwYWNpbmc6IERlZmF1bHRTcGFjaW5nLFxuICAgICAgICBpc0ludmVydGVkOiBmYWxzZSxcbiAgICAgICAgZGlzYWJsZUdsb2JhbENsYXNzTmFtZXM6IGZhbHNlLFxuICAgICAgICBzZW1hbnRpY0NvbG9yczogbWFrZVNlbWFudGljQ29sb3JzKERlZmF1bHRQYWxldHRlLCBEZWZhdWx0RWZmZWN0cywgdW5kZWZpbmVkLCBmYWxzZSwgZGVwQ29tbWVudHMpLFxuICAgICAgICBydGw6IHVuZGVmaW5lZCxcbiAgICB9O1xuICAgIHJldHVybiBtZXJnZVRoZW1lcyhiYXNlVGhlbWUsIHRoZW1lKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZVRoZW1lLmpzLm1hcCIsImltcG9ydCB7IG1lcmdlIH0gZnJvbSAnQHVpZmFicmljL3V0aWxpdGllcyc7XG5pbXBvcnQgeyBnZXRTZW1hbnRpY0NvbG9ycyB9IGZyb20gJy4vdXRpbGl0aWVzL21ha2VTZW1hbnRpY0NvbG9ycyc7XG4vKipcbiAqIE1lcmdlIGEgcGFydGlhbC9mdWxsIHRoZW1lIGludG8gYSBmdWxsIHRoZW1lIGFuZCByZXR1cm5zIGEgbWVyZ2VkIGZ1bGwgdGhlbWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZVRoZW1lcyh0aGVtZSwgcGFydGlhbFRoZW1lKSB7XG4gICAgaWYgKHBhcnRpYWxUaGVtZSA9PT0gdm9pZCAwKSB7IHBhcnRpYWxUaGVtZSA9IHt9OyB9XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgIHZhciBtZXJnZWRUaGVtZSA9IG1lcmdlKHt9LCB0aGVtZSwgcGFydGlhbFRoZW1lLCB7XG4gICAgICAgIHNlbWFudGljQ29sb3JzOiBnZXRTZW1hbnRpY0NvbG9ycyhwYXJ0aWFsVGhlbWUucGFsZXR0ZSwgcGFydGlhbFRoZW1lLmVmZmVjdHMsIHBhcnRpYWxUaGVtZS5zZW1hbnRpY0NvbG9ycywgcGFydGlhbFRoZW1lLmlzSW52ZXJ0ZWQgPT09IHVuZGVmaW5lZCA/IHRoZW1lLmlzSW52ZXJ0ZWQgOiBwYXJ0aWFsVGhlbWUuaXNJbnZlcnRlZCksXG4gICAgfSk7XG4gICAgaWYgKCgoX2EgPSBwYXJ0aWFsVGhlbWUucGFsZXR0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRoZW1lUHJpbWFyeSkgJiYgISgoX2IgPSBwYXJ0aWFsVGhlbWUucGFsZXR0ZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmFjY2VudCkpIHtcbiAgICAgICAgbWVyZ2VkVGhlbWUucGFsZXR0ZS5hY2NlbnQgPSBwYXJ0aWFsVGhlbWUucGFsZXR0ZS50aGVtZVByaW1hcnk7XG4gICAgfVxuICAgIGlmIChwYXJ0aWFsVGhlbWUuZGVmYXVsdEZvbnRTdHlsZSkge1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9lID0gT2JqZWN0LmtleXMobWVyZ2VkVGhlbWUuZm9udHMpOyBfaSA8IF9lLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGZvbnRTdHlsZSA9IF9lW19pXTtcbiAgICAgICAgICAgIG1lcmdlZFRoZW1lLmZvbnRzW2ZvbnRTdHlsZV0gPSBtZXJnZShtZXJnZWRUaGVtZS5mb250c1tmb250U3R5bGVdLCBwYXJ0aWFsVGhlbWUuZGVmYXVsdEZvbnRTdHlsZSwgKF9kID0gKF9jID0gcGFydGlhbFRoZW1lKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuZm9udHMpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZFtmb250U3R5bGVdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFydGlhbFRoZW1lLnN0eWxlc2hlZXRzKSB7XG4gICAgICAgIG1lcmdlZFRoZW1lLnN0eWxlc2hlZXRzID0gKHRoZW1lLnN0eWxlc2hlZXRzIHx8IFtdKS5jb25jYXQocGFydGlhbFRoZW1lLnN0eWxlc2hlZXRzKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlZFRoZW1lO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VUaGVtZXMuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEN1c3RvbWl6YXRpb25zLCBnZXRXaW5kb3cgfSBmcm9tICdAdWlmYWJyaWMvdXRpbGl0aWVzJztcbmltcG9ydCB7IGxvYWRUaGVtZSBhcyBsZWdhY3lMb2FkVGhlbWUgfSBmcm9tICdAbWljcm9zb2Z0L2xvYWQtdGhlbWVkLXN0eWxlcyc7XG5pbXBvcnQgeyBjcmVhdGVUaGVtZSB9IGZyb20gJ0BmbHVlbnR1aS90aGVtZS9saWIvY3JlYXRlVGhlbWUnO1xuZXhwb3J0IHsgY3JlYXRlVGhlbWUgfSBmcm9tICdAZmx1ZW50dWkvdGhlbWUvbGliL2NyZWF0ZVRoZW1lJztcbnZhciBfdGhlbWUgPSBjcmVhdGVUaGVtZSh7fSk7XG52YXIgX29uVGhlbWVDaGFuZ2VDYWxsYmFja3MgPSBbXTtcbmV4cG9ydCB2YXIgVGhlbWVTZXR0aW5nTmFtZSA9ICd0aGVtZSc7XG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZVRoZW1lSW5DdXN0b21pemF0aW9ucygpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIF9iLCBfYztcbiAgICBpZiAoIUN1c3RvbWl6YXRpb25zLmdldFNldHRpbmdzKFtUaGVtZVNldHRpbmdOYW1lXSkudGhlbWUpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgdmFyIHdpbiA9IGdldFdpbmRvdygpO1xuICAgICAgICBpZiAoKF9jID0gKF9iID0gd2luKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuRmFicmljQ29uZmlnKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MudGhlbWUpIHtcbiAgICAgICAgICAgIF90aGVtZSA9IGNyZWF0ZVRoZW1lKHdpbi5GYWJyaWNDb25maWcudGhlbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNldCB0aGUgZGVmYXVsdCB0aGVtZS5cbiAgICAgICAgQ3VzdG9taXphdGlvbnMuYXBwbHlTZXR0aW5ncygoX2EgPSB7fSwgX2FbVGhlbWVTZXR0aW5nTmFtZV0gPSBfdGhlbWUsIF9hKSk7XG4gICAgfVxufVxuaW5pdGlhbGl6ZVRoZW1lSW5DdXN0b21pemF0aW9ucygpO1xuLyoqXG4gKiBHZXRzIHRoZSB0aGVtZSBvYmplY3RcbiAqIEBwYXJhbSBkZXBDb21tZW50cyAtIFdoZXRoZXIgdG8gaW5jbHVkZSBkZXByZWNhdGVkIHRhZ3MgYXMgY29tbWVudHMgZm9yIGRlcHJlY2F0ZWQgc2xvdHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUaGVtZShkZXBDb21tZW50cykge1xuICAgIGlmIChkZXBDb21tZW50cyA9PT0gdm9pZCAwKSB7IGRlcENvbW1lbnRzID0gZmFsc2U7IH1cbiAgICBpZiAoZGVwQ29tbWVudHMgPT09IHRydWUpIHtcbiAgICAgICAgX3RoZW1lID0gY3JlYXRlVGhlbWUoe30sIGRlcENvbW1lbnRzKTtcbiAgICB9XG4gICAgcmV0dXJuIF90aGVtZTtcbn1cbi8qKlxuICogUmVnaXN0ZXJzIGEgY2FsbGJhY2sgdGhhdCBnZXRzIGNhbGxlZCB3aGVuZXZlciB0aGUgdGhlbWUgY2hhbmdlcy5cbiAqIFRoaXMgc2hvdWxkIG9ubHkgYmUgdXNlZCB3aGVuIHRoZSBjb21wb25lbnQgY2Fubm90IGF1dG9tYXRpY2FsbHkgZ2V0IHRoZW1lIGNoYW5nZXMgdGhyb3VnaCBpdHMgc3RhdGUuXG4gKiBUaGlzIHdpbGwgbm90IHJlZ2lzdGVyIGR1cGxpY2F0ZSBjYWxsYmFja3MuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlck9uVGhlbWVDaGFuZ2VDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIGlmIChfb25UaGVtZUNoYW5nZUNhbGxiYWNrcy5pbmRleE9mKGNhbGxiYWNrKSA9PT0gLTEpIHtcbiAgICAgICAgX29uVGhlbWVDaGFuZ2VDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgfVxufVxuLyoqXG4gKiBTZWUgcmVnaXN0ZXJPblRoZW1lQ2hhbmdlQ2FsbGJhY2soKS5cbiAqIFJlbW92ZXMgcHJldmlvdXNseSByZWdpc3RlcmVkIGNhbGxiYWNrcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZU9uVGhlbWVDaGFuZ2VDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIHZhciBpID0gX29uVGhlbWVDaGFuZ2VDYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgaWYgKGkgPT09IC0xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgX29uVGhlbWVDaGFuZ2VDYWxsYmFja3Muc3BsaWNlKGksIDEpO1xufVxuLyoqXG4gKiBBcHBsaWVzIHRoZSB0aGVtZSwgd2hpbGUgZmlsbGluZyBpbiBtaXNzaW5nIHNsb3RzLlxuICogQHBhcmFtIHRoZW1lIC0gUGFydGlhbCB0aGVtZSBvYmplY3QuXG4gKiBAcGFyYW0gZGVwQ29tbWVudHMgLSBXaGV0aGVyIHRvIGluY2x1ZGUgZGVwcmVjYXRlZCB0YWdzIGFzIGNvbW1lbnRzIGZvciBkZXByZWNhdGVkIHNsb3RzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbG9hZFRoZW1lKHRoZW1lLCBkZXBDb21tZW50cykge1xuICAgIHZhciBfYTtcbiAgICBpZiAoZGVwQ29tbWVudHMgPT09IHZvaWQgMCkgeyBkZXBDb21tZW50cyA9IGZhbHNlOyB9XG4gICAgX3RoZW1lID0gY3JlYXRlVGhlbWUodGhlbWUsIGRlcENvbW1lbnRzKTtcbiAgICAvLyBJbnZva2UgdGhlIGxlZ2FjeSBtZXRob2Qgb2YgdGhlbWluZyB0aGUgcGFnZSBhcyB3ZWxsLlxuICAgIGxlZ2FjeUxvYWRUaGVtZShfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgX3RoZW1lLnBhbGV0dGUpLCBfdGhlbWUuc2VtYW50aWNDb2xvcnMpLCBfdGhlbWUuZWZmZWN0cyksIF9sb2FkRm9udHMoX3RoZW1lKSkpO1xuICAgIEN1c3RvbWl6YXRpb25zLmFwcGx5U2V0dGluZ3MoKF9hID0ge30sIF9hW1RoZW1lU2V0dGluZ05hbWVdID0gX3RoZW1lLCBfYSkpO1xuICAgIF9vblRoZW1lQ2hhbmdlQ2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjYWxsYmFjayhfdGhlbWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBkb24ndCBsZXQgYSBiYWQgY2FsbGJhY2sgYnJlYWsgZXZlcnl0aGluZyBlbHNlXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX3RoZW1lO1xufVxuLyoqXG4gKiBMb2FkcyBmb250IHZhcmlhYmxlcyBpbnRvIGEgSlNPTiBvYmplY3QuXG4gKiBAcGFyYW0gdGhlbWUgLSBUaGUgdGhlbWUgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIF9sb2FkRm9udHModGhlbWUpIHtcbiAgICB2YXIgbGluZXMgPSB7fTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gT2JqZWN0LmtleXModGhlbWUuZm9udHMpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgZm9udE5hbWUgPSBfYVtfaV07XG4gICAgICAgIHZhciBmb250ID0gdGhlbWUuZm9udHNbZm9udE5hbWVdO1xuICAgICAgICBmb3IgKHZhciBfYiA9IDAsIF9jID0gT2JqZWN0LmtleXMoZm9udCk7IF9iIDwgX2MubGVuZ3RoOyBfYisrKSB7XG4gICAgICAgICAgICB2YXIgcHJvcE5hbWUgPSBfY1tfYl07XG4gICAgICAgICAgICB2YXIgbmFtZV8xID0gZm9udE5hbWUgKyBwcm9wTmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BOYW1lLnNsaWNlKDEpO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gZm9udFtwcm9wTmFtZV07XG4gICAgICAgICAgICBpZiAocHJvcE5hbWUgPT09ICdmb250U2l6ZScgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIC8vIGlmIGl0J3MgYSBudW1iZXIsIGNvbnZlcnQgaXQgdG8gcHggYnkgZGVmYXVsdCBsaWtlIG91ciB0aGVtaW5nIHN5c3RlbSBkb2VzXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSArICdweCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsaW5lc1tuYW1lXzFdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxpbmVzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhlbWUuanMubWFwIiwiLy8gVGhpcyBmaWxlIG1pbWljcyBzdHlsZXMgYW5kIG1peGlucyBmcm9tIF9HZW5lcmFsLk1peGlucy5zY3NzXG5leHBvcnQgdmFyIG5vcm1hbGl6ZSA9IHtcbiAgICBib3hTaGFkb3c6ICdub25lJyxcbiAgICBtYXJnaW46IDAsXG4gICAgcGFkZGluZzogMCxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94Jyxcbn07XG5leHBvcnQgdmFyIG5vV3JhcCA9IHtcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdlbmVyYWxTdHlsZXMuanMubWFwIiwiLyoqXG4gKiBHZW5lcmF0ZXMgcGxhY2Vob2xkZXIgc3R5bGUgZm9yIGVhY2ggb2YgdGhlIGJyb3dzZXJzIHN1cHBvcnRlZCBieSBvZmZpY2UtdWktZmFicmljLXJlYWN0LlxuICogQHBhcmFtIHN0eWxlcyAtIFRoZSBzdHlsZSB0byB1c2UuXG4gKiBAcmV0dXJucyBUaGUgcGxhY2Vob2xkZXIgc3R5bGUgb2JqZWN0IGZvciBlYWNoIGJyb3dzZXIgZGVwZW5kaW5nIG9uIHRoZSBwbGFjZWhvbGRlciBkaXJlY3RpdmUgaXQgdXNlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBsYWNlaG9sZGVyU3R5bGVzKHN0eWxlcykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgJzo6cGxhY2Vob2xkZXInOiBzdHlsZXMsXG4gICAgICAgICAgICAnOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHN0eWxlcyxcbiAgICAgICAgICAgICc6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHN0eWxlcyxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0UGxhY2Vob2xkZXJTdHlsZXMuanMubWFwIiwiLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xudmFyIF93YXJuaW5nQ2FsbGJhY2sgPSB1bmRlZmluZWQ7XG4vKipcbiAqIFNlbmRzIGEgd2FybmluZyB0byBjb25zb2xlLCBpZiB0aGUgYXBpIGlzIHByZXNlbnQuXG4gKlxuICogQHB1YmxpY1xuICogQHBhcmFtIG1lc3NhZ2UgLSBXYXJuaW5nIG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3YXJuKG1lc3NhZ2UpIHtcbiAgICBpZiAoX3dhcm5pbmdDYWxsYmFjayAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIF93YXJuaW5nQ2FsbGJhY2sobWVzc2FnZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICB9XG59XG4vKipcbiAqIENvbmZpZ3VyZXMgdGhlIHdhcm5pbmcgY2FsbGJhY2suIFBhc3NpbmcgaW4gdW5kZWZpbmVkIHdpbGwgcmVzZXQgaXQgdG8gdXNlIHRoZSBkZWZhdWx0XG4gKiBjb25zb2xlLndhcm4gZnVuY3Rpb24uXG4gKlxuICogQHB1YmxpY1xuICogQHBhcmFtIHdhcm5pbmdDYWxsYmFjayAtIENhbGxiYWNrIHRvIG92ZXJyaWRlIHRoZSBnZW5lcmF0ZWQgd2FybmluZ3MuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRXYXJuaW5nQ2FsbGJhY2sod2FybmluZ0NhbGxiYWNrKSB7XG4gICAgX3dhcm5pbmdDYWxsYmFjayA9IHdhcm5pbmdDYWxsYmFjaztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdhcm4uanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEdsb2JhbFNldHRpbmdzLCB3YXJuIH0gZnJvbSAnQHVpZmFicmljL3V0aWxpdGllcyc7XG5pbXBvcnQgeyBmb250RmFjZSwgbWVyZ2VTdHlsZXMsIFN0eWxlc2hlZXQgfSBmcm9tICdAdWlmYWJyaWMvbWVyZ2Utc3R5bGVzJztcbnZhciBJQ09OX1NFVFRJTkdfTkFNRSA9ICdpY29ucyc7XG52YXIgX2ljb25TZXR0aW5ncyA9IEdsb2JhbFNldHRpbmdzLmdldFZhbHVlKElDT05fU0VUVElOR19OQU1FLCB7XG4gICAgX19vcHRpb25zOiB7XG4gICAgICAgIGRpc2FibGVXYXJuaW5nczogZmFsc2UsXG4gICAgICAgIHdhcm5Pbk1pc3NpbmdJY29uczogdHJ1ZSxcbiAgICB9LFxuICAgIF9fcmVtYXBwZWQ6IHt9LFxufSk7XG4vLyBSZXNldCBpY29uIHJlZ2lzdHJhdGlvbiBvbiBzdHlsZXNoZWV0IHJlc2V0cy5cbnZhciBzdHlsZXNoZWV0ID0gU3R5bGVzaGVldC5nZXRJbnN0YW5jZSgpO1xuaWYgKHN0eWxlc2hlZXQgJiYgc3R5bGVzaGVldC5vblJlc2V0KSB7XG4gICAgc3R5bGVzaGVldC5vblJlc2V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZV8xIGluIF9pY29uU2V0dGluZ3MpIHtcbiAgICAgICAgICAgIGlmIChfaWNvblNldHRpbmdzLmhhc093blByb3BlcnR5KG5hbWVfMSkgJiYgISFfaWNvblNldHRpbmdzW25hbWVfMV0uc3Vic2V0KSB7XG4gICAgICAgICAgICAgICAgX2ljb25TZXR0aW5nc1tuYW1lXzFdLnN1YnNldC5jbGFzc05hbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8qKlxuICogTm9ybWFsaXplcyBhbiBpY29uIG5hbWUgZm9yIGNvbnNpc3RlbnQgbWFwcGluZy5cbiAqIEN1cnJlbnQgaW1wbGVtZW50YXRpb24gaXMgdG8gY29udmVydCB0aGUgaWNvbiBuYW1lIHRvIGxvd2VyIGNhc2UuXG4gKlxuICogQHBhcmFtIG5hbWUgLSBJY29uIG5hbWUgdG8gbm9ybWFsaXplLlxuICogQHJldHVybnMge3N0cmluZ30gTm9ybWFsaXplZCBpY29uIG5hbWUgdG8gdXNlIGZvciBpbmRleGluZyBhbmQgbWFwcGluZy5cbiAqL1xudmFyIG5vcm1hbGl6ZUljb25OYW1lID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKTsgfTtcbi8qKlxuICogUmVnaXN0ZXJzIGEgZ2l2ZW4gc3Vic2V0IG9mIGljb25zLlxuICpcbiAqIEBwYXJhbSBpY29uU3Vic2V0IC0gdGhlIGljb24gc3Vic2V0IGRlZmluaXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlckljb25zKGljb25TdWJzZXQsIG9wdGlvbnMpIHtcbiAgICB2YXIgc3Vic2V0ID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGljb25TdWJzZXQpLCB7IGlzUmVnaXN0ZXJlZDogZmFsc2UsIGNsYXNzTmFtZTogdW5kZWZpbmVkIH0pO1xuICAgIHZhciBpY29ucyA9IGljb25TdWJzZXQuaWNvbnM7XG4gICAgLy8gR3JhYiBvcHRpb25zLCBvcHRpb25hbGx5IG1peCB1c2VyIHByb3ZpZGVkIG9uZXMgb24gdG9wLlxuICAgIG9wdGlvbnMgPSBvcHRpb25zID8gX19hc3NpZ24oX19hc3NpZ24oe30sIF9pY29uU2V0dGluZ3MuX19vcHRpb25zKSwgb3B0aW9ucykgOiBfaWNvblNldHRpbmdzLl9fb3B0aW9ucztcbiAgICBmb3IgKHZhciBpY29uTmFtZSBpbiBpY29ucykge1xuICAgICAgICBpZiAoaWNvbnMuaGFzT3duUHJvcGVydHkoaWNvbk5hbWUpKSB7XG4gICAgICAgICAgICB2YXIgY29kZSA9IGljb25zW2ljb25OYW1lXTtcbiAgICAgICAgICAgIHZhciBub3JtYWxpemVkSWNvbk5hbWUgPSBub3JtYWxpemVJY29uTmFtZShpY29uTmFtZSk7XG4gICAgICAgICAgICBpZiAoX2ljb25TZXR0aW5nc1tub3JtYWxpemVkSWNvbk5hbWVdKSB7XG4gICAgICAgICAgICAgICAgX3dhcm5EdXBsaWNhdGVJY29uKGljb25OYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIF9pY29uU2V0dGluZ3Nbbm9ybWFsaXplZEljb25OYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogY29kZSxcbiAgICAgICAgICAgICAgICAgICAgc3Vic2V0OiBzdWJzZXQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogVW5yZWdpc3RlcnMgaWNvbnMgYnkgbmFtZS5cbiAqXG4gKiBAcGFyYW0gaWNvbk5hbWVzIC0gTGlzdCBvZiBpY29ucyB0byB1bnJlZ2lzdGVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdW5yZWdpc3Rlckljb25zKGljb25OYW1lcykge1xuICAgIHZhciBvcHRpb25zID0gX2ljb25TZXR0aW5ncy5fX29wdGlvbnM7XG4gICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoaWNvbk5hbWUpIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJY29uTmFtZSA9IG5vcm1hbGl6ZUljb25OYW1lKGljb25OYW1lKTtcbiAgICAgICAgaWYgKF9pY29uU2V0dGluZ3Nbbm9ybWFsaXplZEljb25OYW1lXSkge1xuICAgICAgICAgICAgZGVsZXRlIF9pY29uU2V0dGluZ3Nbbm9ybWFsaXplZEljb25OYW1lXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFdhcm4gdGhhdCB3ZSBhcmUgdHJ5aW5nIHRvIGRlbGV0ZSBhbiBpY29uIHRoYXQgZG9lc24ndCBleGlzdFxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmRpc2FibGVXYXJuaW5ncykge1xuICAgICAgICAgICAgICAgIHdhcm4oXCJUaGUgaWNvbiBcXFwiXCIgKyBpY29uTmFtZSArIFwiXFxcIiB0cmllZCB0byB1bnJlZ2lzdGVyIGJ1dCB3YXMgbm90IHJlZ2lzdGVyZWQuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIERlbGV0ZSBhbnkgYWxpYXNlcyBmb3IgdGhpcyBpY29uTmFtZVxuICAgICAgICBpZiAoX2ljb25TZXR0aW5ncy5fX3JlbWFwcGVkW25vcm1hbGl6ZWRJY29uTmFtZV0pIHtcbiAgICAgICAgICAgIGRlbGV0ZSBfaWNvblNldHRpbmdzLl9fcmVtYXBwZWRbbm9ybWFsaXplZEljb25OYW1lXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBEZWxldGUgYW55IGl0ZW1zIHRoYXQgd2VyZSBhbiBhbGlhcyBmb3IgdGhpcyBpY29uTmFtZVxuICAgICAgICBPYmplY3Qua2V5cyhfaWNvblNldHRpbmdzLl9fcmVtYXBwZWQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgaWYgKF9pY29uU2V0dGluZ3MuX19yZW1hcHBlZFtrZXldID09PSBub3JtYWxpemVkSWNvbk5hbWUpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgX2ljb25TZXR0aW5ncy5fX3JlbWFwcGVkW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgZm9yICh2YXIgX2kgPSAwLCBpY29uTmFtZXNfMSA9IGljb25OYW1lczsgX2kgPCBpY29uTmFtZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGljb25OYW1lID0gaWNvbk5hbWVzXzFbX2ldO1xuICAgICAgICBfbG9vcF8xKGljb25OYW1lKTtcbiAgICB9XG59XG4vKipcbiAqIFJlbWFwcyBvbmUgaWNvbiBuYW1lIHRvIGFub3RoZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlckljb25BbGlhcyhpY29uTmFtZSwgbWFwcGVkVG9OYW1lKSB7XG4gICAgX2ljb25TZXR0aW5ncy5fX3JlbWFwcGVkW25vcm1hbGl6ZUljb25OYW1lKGljb25OYW1lKV0gPSBub3JtYWxpemVJY29uTmFtZShtYXBwZWRUb05hbWUpO1xufVxuLyoqXG4gKiBHZXRzIGFuIGljb24gZGVmaW5pdGlvbi4gSWYgYW4gaWNvbiBpcyByZXF1ZXN0ZWQgYnV0IHRoZSBzdWJzZXQgaGFzIHlldCB0byBiZSByZWdpc3RlcmVkLFxuICogaXQgd2lsbCBnZXQgcmVnaXN0ZXJlZCBpbW1lZGlhdGVseS5cbiAqXG4gKiBAcHVibGljXG4gKiBAcGFyYW0gbmFtZSAtIE5hbWUgb2YgaWNvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEljb24obmFtZSkge1xuICAgIHZhciBpY29uID0gdW5kZWZpbmVkO1xuICAgIHZhciBvcHRpb25zID0gX2ljb25TZXR0aW5ncy5fX29wdGlvbnM7XG4gICAgbmFtZSA9IG5hbWUgPyBub3JtYWxpemVJY29uTmFtZShuYW1lKSA6ICcnO1xuICAgIG5hbWUgPSBfaWNvblNldHRpbmdzLl9fcmVtYXBwZWRbbmFtZV0gfHwgbmFtZTtcbiAgICBpZiAobmFtZSkge1xuICAgICAgICBpY29uID0gX2ljb25TZXR0aW5nc1tuYW1lXTtcbiAgICAgICAgaWYgKGljb24pIHtcbiAgICAgICAgICAgIHZhciBzdWJzZXQgPSBpY29uLnN1YnNldDtcbiAgICAgICAgICAgIGlmIChzdWJzZXQgJiYgc3Vic2V0LmZvbnRGYWNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzdWJzZXQuaXNSZWdpc3RlcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYWNlKHN1YnNldC5mb250RmFjZSk7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNldC5pc1JlZ2lzdGVyZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXN1YnNldC5jbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2V0LmNsYXNzTmFtZSA9IG1lcmdlU3R5bGVzKHN1YnNldC5zdHlsZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogc3Vic2V0LmZvbnRGYWNlLmZvbnRGYW1pbHksXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBzdWJzZXQuZm9udEZhY2UuZm9udFdlaWdodCB8fCAnbm9ybWFsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTdHlsZTogc3Vic2V0LmZvbnRGYWNlLmZvbnRTdHlsZSB8fCAnbm9ybWFsJyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuZGlzYWJsZVdhcm5pbmdzICYmIG9wdGlvbnMud2Fybk9uTWlzc2luZ0ljb25zKSB7XG4gICAgICAgICAgICAgICAgd2FybihcIlRoZSBpY29uIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgd2FzIHVzZWQgYnV0IG5vdCByZWdpc3RlcmVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9mbHVlbnR1aS93aWtpL1VzaW5nLWljb25zIGZvciBtb3JlIGluZm9ybWF0aW9uLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaWNvbjtcbn1cbi8qKlxuICogU2V0cyB0aGUgaWNvbiBvcHRpb25zLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEljb25PcHRpb25zKG9wdGlvbnMpIHtcbiAgICBfaWNvblNldHRpbmdzLl9fb3B0aW9ucyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBfaWNvblNldHRpbmdzLl9fb3B0aW9ucyksIG9wdGlvbnMpO1xufVxudmFyIF9taXNzaW5nSWNvbnMgPSBbXTtcbnZhciBfbWlzc2luZ0ljb25zVGltZXIgPSB1bmRlZmluZWQ7XG5mdW5jdGlvbiBfd2FybkR1cGxpY2F0ZUljb24oaWNvbk5hbWUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IF9pY29uU2V0dGluZ3MuX19vcHRpb25zO1xuICAgIHZhciB3YXJuaW5nRGVsYXkgPSAyMDAwO1xuICAgIHZhciBtYXhJY29uc0luTWVzc2FnZSA9IDEwO1xuICAgIGlmICghb3B0aW9ucy5kaXNhYmxlV2FybmluZ3MpIHtcbiAgICAgICAgX21pc3NpbmdJY29ucy5wdXNoKGljb25OYW1lKTtcbiAgICAgICAgaWYgKF9taXNzaW5nSWNvbnNUaW1lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfbWlzc2luZ0ljb25zVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB3YXJuKFwiU29tZSBpY29ucyB3ZXJlIHJlLXJlZ2lzdGVyZWQuIEFwcGxpY2F0aW9ucyBzaG91bGQgb25seSBjYWxsIHJlZ2lzdGVySWNvbnMgZm9yIGFueSBnaXZlbiBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiaWNvbiBvbmNlLiBSZWRlZmluaW5nIHdoYXQgYW4gaWNvbiBpcyBtYXkgaGF2ZSB1bmludGVuZGVkIGNvbnNlcXVlbmNlcy4gRHVwbGljYXRlcyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiaW5jbHVkZTogXFxuXCIgK1xuICAgICAgICAgICAgICAgICAgICBfbWlzc2luZ0ljb25zLnNsaWNlKDAsIG1heEljb25zSW5NZXNzYWdlKS5qb2luKCcsICcpICtcbiAgICAgICAgICAgICAgICAgICAgKF9taXNzaW5nSWNvbnMubGVuZ3RoID4gbWF4SWNvbnNJbk1lc3NhZ2UgPyBcIiAoKyBcIiArIChfbWlzc2luZ0ljb25zLmxlbmd0aCAtIG1heEljb25zSW5NZXNzYWdlKSArIFwiIG1vcmUpXCIgOiAnJykpO1xuICAgICAgICAgICAgICAgIF9taXNzaW5nSWNvbnNUaW1lciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBfbWlzc2luZ0ljb25zID0gW107XG4gICAgICAgICAgICB9LCB3YXJuaW5nRGVsYXkpO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWNvbnMuanMubWFwIiwiaW1wb3J0IHsgX19zcHJlYWRBcnJheXMgfSBmcm9tIFwidHNsaWJcIjtcbi8qKlxuICogQ29tYmluZSBhIHNldCBvZiBzdHlsZXMgdG9nZXRoZXIgKGJ1dCBkb2VzIG5vdCByZWdpc3RlciBjc3MgY2xhc3NlcykuXG4gKiBAcGFyYW0gc3R5bGVTZXRzIC0gT25lIG9yIG1vcmUgc3R5bGVzZXRzIHRvIGJlIG1lcmdlZCAoZWFjaCBwYXJhbSBjYW4gYWxzbyBiZSBmYWxzeSkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXRTdHlsZVNldHMoKSB7XG4gICAgdmFyIHN0eWxlU2V0cyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHN0eWxlU2V0c1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICBpZiAoc3R5bGVTZXRzICYmIHN0eWxlU2V0cy5sZW5ndGggPT09IDEgJiYgc3R5bGVTZXRzWzBdICYmICFzdHlsZVNldHNbMF0uc3ViQ29tcG9uZW50U3R5bGVzKSB7XG4gICAgICAgIHJldHVybiBzdHlsZVNldHNbMF07XG4gICAgfVxuICAgIHZhciBtZXJnZWRTZXQgPSB7fTtcbiAgICAvLyBXZSBwcm9jZXNzIHN1YiBjb21wb25lbnQgc3R5bGVzIGluIHR3byBwaGFzZXMuIEZpcnN0IHdlIGNvbGxlY3QgdGhlbSwgdGhlbiB3ZSBjb21iaW5lIHRoZW0gaW50byAxIHN0eWxlIGZ1bmN0aW9uLlxuICAgIHZhciB3b3JraW5nU3ViY29tcG9uZW50U3R5bGVzID0ge307XG4gICAgZm9yICh2YXIgX2EgPSAwLCBzdHlsZVNldHNfMSA9IHN0eWxlU2V0czsgX2EgPCBzdHlsZVNldHNfMS5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgdmFyIGN1cnJlbnRTZXQgPSBzdHlsZVNldHNfMVtfYV07XG4gICAgICAgIGlmIChjdXJyZW50U2V0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIGN1cnJlbnRTZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNldC5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcCA9PT0gJ3N1YkNvbXBvbmVudFN0eWxlcycgJiYgY3VycmVudFNldC5zdWJDb21wb25lbnRTdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3ViY29tcG9uZW50IHN0eWxlcyAtIHN0eWxlIGZ1bmN0aW9ucyBvciBvYmplY3RzXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudENvbXBvbmVudFN0eWxlcyA9IGN1cnJlbnRTZXQuc3ViQ29tcG9uZW50U3R5bGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgc3ViQ29tcFByb3AgaW4gY3VycmVudENvbXBvbmVudFN0eWxlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Q29tcG9uZW50U3R5bGVzLmhhc093blByb3BlcnR5KHN1YkNvbXBQcm9wKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod29ya2luZ1N1YmNvbXBvbmVudFN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdWJDb21wUHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtpbmdTdWJjb21wb25lbnRTdHlsZXNbc3ViQ29tcFByb3BdLnB1c2goY3VycmVudENvbXBvbmVudFN0eWxlc1tzdWJDb21wUHJvcF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd29ya2luZ1N1YmNvbXBvbmVudFN0eWxlc1tzdWJDb21wUHJvcF0gPSBbY3VycmVudENvbXBvbmVudFN0eWxlc1tzdWJDb21wUHJvcF1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGFzIGFueSBjYXN0cyBiZWxvdyBpcyBhIHdvcmthcm91bmQgZm9yIHRzIDIuOC5cbiAgICAgICAgICAgICAgICAgICAgLy8gdG9kbzogcmVtb3ZlIGNhc3QgdG8gYW55IGluIHRzIDIuOS5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lcmdlZFZhbHVlID0gbWVyZ2VkU2V0W3Byb3BdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFZhbHVlID0gY3VycmVudFNldFtwcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lcmdlZFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlZFNldFtwcm9wXSA9IGN1cnJlbnRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlZFNldFtwcm9wXSA9IF9fc3ByZWFkQXJyYXlzKChBcnJheS5pc0FycmF5KG1lcmdlZFZhbHVlKSA/IG1lcmdlZFZhbHVlIDogW21lcmdlZFZhbHVlXSksIChBcnJheS5pc0FycmF5KGN1cnJlbnRWYWx1ZSkgPyBjdXJyZW50VmFsdWUgOiBbY3VycmVudFZhbHVlXSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChPYmplY3Qua2V5cyh3b3JraW5nU3ViY29tcG9uZW50U3R5bGVzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIG1lcmdlZFNldC5zdWJDb21wb25lbnRTdHlsZXMgPSB7fTtcbiAgICAgICAgdmFyIG1lcmdlZFN1YlN0eWxlcyA9IG1lcmdlZFNldC5zdWJDb21wb25lbnRTdHlsZXM7XG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKHN1YkNvbXBQcm9wKSB7XG4gICAgICAgICAgICBpZiAod29ya2luZ1N1YmNvbXBvbmVudFN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdWJDb21wUHJvcCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgd29ya2luZ1NldF8xID0gd29ya2luZ1N1YmNvbXBvbmVudFN0eWxlc1tzdWJDb21wUHJvcF07XG4gICAgICAgICAgICAgICAgbWVyZ2VkU3ViU3R5bGVzW3N1YkNvbXBQcm9wXSA9IGZ1bmN0aW9uIChzdHlsZVByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25jYXRTdHlsZVNldHMuYXBwbHkodm9pZCAwLCB3b3JraW5nU2V0XzEubWFwKGZ1bmN0aW9uIChzdHlsZUZ1bmN0aW9uT3JPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2Ygc3R5bGVGdW5jdGlvbk9yT2JqZWN0ID09PSAnZnVuY3Rpb24nID8gc3R5bGVGdW5jdGlvbk9yT2JqZWN0KHN0eWxlUHJvcHMpIDogc3R5bGVGdW5jdGlvbk9yT2JqZWN0O1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gbm93IHdlIHByb2Nlc3MgdGhlIHN1YmNvbXBvbmVudCBzdHlsZXMgaWYgdGhlcmUgYXJlIGFueVxuICAgICAgICBmb3IgKHZhciBzdWJDb21wUHJvcCBpbiB3b3JraW5nU3ViY29tcG9uZW50U3R5bGVzKSB7XG4gICAgICAgICAgICBfbG9vcF8xKHN1YkNvbXBQcm9wKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkU2V0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0U3R5bGVTZXRzLmpzLm1hcCIsImltcG9ydCB7IGNvbmNhdFN0eWxlU2V0cyB9IGZyb20gJy4vY29uY2F0U3R5bGVTZXRzJztcbi8qKlxuICogQ29uY2F0ZW5hdGVzIHN0eWxlIHNldHMgaW50byBvbmUsIGJ1dCByZXNvbHZlcyBmdW5jdGlvbmFsIHNldHMgdXNpbmcgdGhlIGdpdmVuIHByb3BzLlxuICogQHBhcmFtIHN0eWxlUHJvcHMgLSBQcm9wcyB1c2VkIHRvIHJlc29sdmUgZnVuY3Rpb25hbCBzZXRzLlxuICogQHBhcmFtIGFsbFN0eWxlcyAtIFN0eWxlIHNldHMsIHdoaWNoIGNhbiBiZSBmdW5jdGlvbnMgb3Igb2JqZWN0cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdFN0eWxlU2V0c1dpdGhQcm9wcyhzdHlsZVByb3BzKSB7XG4gICAgdmFyIGFsbFN0eWxlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFsbFN0eWxlc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGZvciAodmFyIF9hID0gMCwgYWxsU3R5bGVzXzEgPSBhbGxTdHlsZXM7IF9hIDwgYWxsU3R5bGVzXzEubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgIHZhciBzdHlsZXMgPSBhbGxTdHlsZXNfMVtfYV07XG4gICAgICAgIGlmIChzdHlsZXMpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHR5cGVvZiBzdHlsZXMgPT09ICdmdW5jdGlvbicgPyBzdHlsZXMoc3R5bGVQcm9wcykgOiBzdHlsZXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChyZXN1bHQubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiByZXN1bHRbMF07XG4gICAgfVxuICAgIGVsc2UgaWYgKHJlc3VsdC5sZW5ndGgpIHtcbiAgICAgICAgLy8gY2xpZmZrb2g6IEkgY2Fubm90IGZpZ3VyZSBvdXQgaG93IHRvIGF2b2lkIHRoZSBjYXN0IHRvIGFueSBoZXJlLlxuICAgICAgICAvLyBJdCBpcyBzb21ldGhpbmcgdG8gZG8gd2l0aCB0aGUgdXNlIG9mIE9taXQgaW4gSVN0eWxlU2V0LlxuICAgICAgICAvLyBJdCBtaWdodCBub3QgYmUgbmVjZXNzYXJ5IG9uY2UgIE9taXQgYmVjb21lcyBwYXJ0IG9mIGxpYi5kLnRzICh3aGVuIHdlIHJlbW92ZSBvdXIgb3duIE9taXQgYW5kIHJlbHkgb25cbiAgICAgICAgLy8gdGhlIG9mZmljaWFsIHZlcnNpb24pLlxuICAgICAgICByZXR1cm4gY29uY2F0U3R5bGVTZXRzLmFwcGx5KHZvaWQgMCwgcmVzdWx0KTtcbiAgICB9XG4gICAgcmV0dXJuIHt9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0U3R5bGVTZXRzV2l0aFByb3BzLmpzLm1hcCIsImltcG9ydCB7IGNvbmNhdFN0eWxlU2V0cyB9IGZyb20gJy4vY29uY2F0U3R5bGVTZXRzJztcbmltcG9ydCB7IGV4dHJhY3RTdHlsZVBhcnRzIH0gZnJvbSAnLi9leHRyYWN0U3R5bGVQYXJ0cyc7XG5pbXBvcnQgeyBnZXRTdHlsZU9wdGlvbnMgfSBmcm9tICcuL1N0eWxlT3B0aW9uc1N0YXRlJztcbmltcG9ydCB7IGFwcGx5UmVnaXN0cmF0aW9uLCBzdHlsZVRvUmVnaXN0cmF0aW9uIH0gZnJvbSAnLi9zdHlsZVRvQ2xhc3NOYW1lJztcbi8qKlxuICogVGFrZXMgaW4gb25lIG9yIG1vcmUgc3R5bGUgc2V0IG9iamVjdHMsIGVhY2ggY29uc2lzdGluZyBvZiBhIHNldCBvZiBhcmVhcyxcbiAqIGVhY2ggd2hpY2ggd2lsbCBwcm9kdWNlIGEgY2xhc3MgbmFtZS4gVXNpbmcgdGhpcyBpcyBhbmFsb2dvdXMgdG8gY2FsbGluZ1xuICogYG1lcmdlU3R5bGVzYCBmb3IgZWFjaCBwcm9wZXJ0eSBpbiB0aGUgb2JqZWN0LCBidXQgZW5zdXJlcyB3ZSBtYWludGFpbiB0aGVcbiAqIHNldCBvcmRlcmluZyB3aGVuIG11bHRpcGxlIHN0eWxlIHNldHMgYXJlIG1lcmdlZC5cbiAqXG4gKiBAcGFyYW0gc3R5bGVTZXRzIC0gT25lIG9yIG1vcmUgc3R5bGUgc2V0cyB0byBiZSBtZXJnZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZVN0eWxlU2V0cygpIHtcbiAgICB2YXIgc3R5bGVTZXRzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgc3R5bGVTZXRzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBtZXJnZUNzc1NldHMoc3R5bGVTZXRzLCBnZXRTdHlsZU9wdGlvbnMoKSk7XG59XG4vKipcbiAqIFRha2VzIGluIG9uZSBvciBtb3JlIHN0eWxlIHNldCBvYmplY3RzLCBlYWNoMWNvbnNpc3Rpbmcgb2YgYSBzZXQgb2YgYXJlYXMsXG4gKiBlYWNoIHdoaWNoIHdpbGwgcHJvZHVjZSBhIGNsYXNzIG5hbWUuIFVzaW5nIHRoaXMgaXMgYW5hbG9nb3VzIHRvIGNhbGxpbmdcbiAqIGBtZXJnZUNzc2AgZm9yIGVhY2ggcHJvcGVydHkgaW4gdGhlIG9iamVjdCwgYnV0IGVuc3VyZXMgdGhlXG4gKiBzZXQgb3JkZXJpbmcgd2hlbiBtdWx0aXBsZSBzdHlsZSBzZXRzIGFyZSBtZXJnZWQuXG4gKlxuICogQHBhcmFtIHN0eWxlU2V0cyAtIE9uZSBvciBtb3JlIHN0eWxlIHNldHMgdG8gYmUgbWVyZ2VkLlxuICogQHBhcmFtIG9wdGlvbnMgLSAob3B0aW9uYWwpIE9wdGlvbnMgdG8gdXNlIHdoZW4gY3JlYXRpbmcgcnVsZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUNzc1NldHMoc3R5bGVTZXRzLCBvcHRpb25zKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICB2YXIgY2xhc3NOYW1lU2V0ID0geyBzdWJDb21wb25lbnRTdHlsZXM6IHt9IH07XG4gICAgdmFyIHN0eWxlU2V0ID0gc3R5bGVTZXRzWzBdO1xuICAgIGlmICghc3R5bGVTZXQgJiYgc3R5bGVTZXRzLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgIHJldHVybiB7IHN1YkNvbXBvbmVudFN0eWxlczoge30gfTtcbiAgICB9XG4gICAgdmFyIGNvbmNhdGVuYXRlZFN0eWxlU2V0ID0gY29uY2F0U3R5bGVTZXRzLmFwcGx5KHZvaWQgMCwgc3R5bGVTZXRzKTtcbiAgICB2YXIgcmVnaXN0cmF0aW9ucyA9IFtdO1xuICAgIGZvciAodmFyIHN0eWxlU2V0QXJlYSBpbiBjb25jYXRlbmF0ZWRTdHlsZVNldCkge1xuICAgICAgICBpZiAoY29uY2F0ZW5hdGVkU3R5bGVTZXQuaGFzT3duUHJvcGVydHkoc3R5bGVTZXRBcmVhKSkge1xuICAgICAgICAgICAgaWYgKHN0eWxlU2V0QXJlYSA9PT0gJ3N1YkNvbXBvbmVudFN0eWxlcycpIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWVTZXQuc3ViQ29tcG9uZW50U3R5bGVzID0gY29uY2F0ZW5hdGVkU3R5bGVTZXQuc3ViQ29tcG9uZW50U3R5bGVzIHx8IHt9O1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHN0eWxlcyA9IGNvbmNhdGVuYXRlZFN0eWxlU2V0W3N0eWxlU2V0QXJlYV07XG4gICAgICAgICAgICB2YXIgX2MgPSBleHRyYWN0U3R5bGVQYXJ0cyhzdHlsZXMpLCBjbGFzc2VzID0gX2MuY2xhc3Nlcywgb2JqZWN0cyA9IF9jLm9iamVjdHM7XG4gICAgICAgICAgICBpZiAoKF9hID0gb2JqZWN0cykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciByZWdpc3RyYXRpb24gPSBzdHlsZVRvUmVnaXN0cmF0aW9uKG9wdGlvbnMgfHwge30sIHsgZGlzcGxheU5hbWU6IHN0eWxlU2V0QXJlYSB9LCBvYmplY3RzKTtcbiAgICAgICAgICAgICAgICBpZiAocmVnaXN0cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZ2lzdHJhdGlvbnMucHVzaChyZWdpc3RyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWVTZXRbc3R5bGVTZXRBcmVhXSA9IGNsYXNzZXMuY29uY2F0KFtyZWdpc3RyYXRpb24uY2xhc3NOYW1lXSkuam9pbignICcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZVNldFtzdHlsZVNldEFyZWFdID0gY2xhc3Nlcy5qb2luKCcgJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2kgPSAwLCByZWdpc3RyYXRpb25zXzEgPSByZWdpc3RyYXRpb25zOyBfaSA8IHJlZ2lzdHJhdGlvbnNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHJlZ2lzdHJhdGlvbiA9IHJlZ2lzdHJhdGlvbnNfMVtfaV07XG4gICAgICAgIGlmIChyZWdpc3RyYXRpb24pIHtcbiAgICAgICAgICAgIGFwcGx5UmVnaXN0cmF0aW9uKHJlZ2lzdHJhdGlvbiwgKF9iID0gb3B0aW9ucykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnNwZWNpZmljaXR5TXVsdGlwbGllcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNsYXNzTmFtZVNldDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlU3R5bGVTZXRzLmpzLm1hcCIsIi8vIEEgcGFja2FnZXMgY2FjaGUgdGhhdCBtYWtlcyBzdXJlIHRoYXQgd2UgZG9uJ3QgaW5qZWN0IHRoZSBzYW1lIHBhY2thZ2VOYW1lIHR3aWNlIGluIHRoZSBzYW1lIGJ1bmRsZSAtXG4vLyB0aGlzIGNhY2hlIGlzIGxvY2FsIHRvIHRoZSBtb2R1bGUgY2xvc3VyZSBpbnNpZGUgdGhpcyBidW5kbGVcbnZhciBwYWNrYWdlc0NhY2hlID0ge307XG4vLyBDYWNoZSBhY2Nlc3MgdG8gd2luZG93IHRvIGF2b2lkIElFMTEgbWVtb3J5IGxlYWsuXG52YXIgX3dpbiA9IHVuZGVmaW5lZDtcbnRyeSB7XG4gICAgX3dpbiA9IHdpbmRvdztcbn1cbmNhdGNoIChlKSB7XG4gICAgLyogbm8tb3AgKi9cbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXRWZXJzaW9uKHBhY2thZ2VOYW1lLCBwYWNrYWdlVmVyc2lvbikge1xuICAgIGlmICh0eXBlb2YgX3dpbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgdmFyIHBhY2thZ2VzID0gKF93aW4uX19wYWNrYWdlc19fID0gX3dpbi5fX3BhY2thZ2VzX18gfHwge30pO1xuICAgICAgICAvLyBXZSBhbGxvdyBlaXRoZXIgdGhlIGdsb2JhbCBwYWNrYWdlcyBvciBsb2NhbCBwYWNrYWdlcyBjYWNoZXMgdG8gaW52YWxpZGF0ZSBzbyB0ZXN0aW5nIGNhblxuICAgICAgICAvLyBqdXN0IGNsZWFyIHRoZSBnbG9iYWwgdG8gc2V0IHRoaXMgc3RhdGVcbiAgICAgICAgaWYgKCFwYWNrYWdlc1twYWNrYWdlTmFtZV0gfHwgIXBhY2thZ2VzQ2FjaGVbcGFja2FnZU5hbWVdKSB7XG4gICAgICAgICAgICBwYWNrYWdlc0NhY2hlW3BhY2thZ2VOYW1lXSA9IHBhY2thZ2VWZXJzaW9uO1xuICAgICAgICAgICAgdmFyIHZlcnNpb25zID0gKHBhY2thZ2VzW3BhY2thZ2VOYW1lXSA9IHBhY2thZ2VzW3BhY2thZ2VOYW1lXSB8fCBbXSk7XG4gICAgICAgICAgICB2ZXJzaW9ucy5wdXNoKHBhY2thZ2VWZXJzaW9uKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNldFZlcnNpb24uanMubWFwIiwiaW1wb3J0IHsgc2V0VmVyc2lvbiB9IGZyb20gJy4vc2V0VmVyc2lvbic7XG5leHBvcnQgeyBzZXRWZXJzaW9uIH07XG5zZXRWZXJzaW9uKCdAdWlmYWJyaWMvc2V0LXZlcnNpb24nLCAnNi4wLjAnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIi8vIERvIG5vdCBtb2RpZnkgdGhpcyBmaWxlOyBpdCBpcyBnZW5lcmF0ZWQgYXMgcGFydCBvZiBwdWJsaXNoLlxuLy8gVGhlIGNoZWNrZWQgaW4gdmVyc2lvbiBpcyBhIHBsYWNlaG9sZGVyIG9ubHkgYW5kIHdpbGwgbm90IGJlIHVwZGF0ZWQuXG5pbXBvcnQgeyBzZXRWZXJzaW9uIH0gZnJvbSAnQHVpZmFicmljL3NldC12ZXJzaW9uJztcbnNldFZlcnNpb24oJ0B1aWZhYnJpYy9zdHlsaW5nJywgJzcuMTYuMTcnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIiwiZXhwb3J0ICogZnJvbSAnLi9jbGFzc05hbWVzL2luZGV4JztcbmV4cG9ydCAqIGZyb20gJy4vc3R5bGVzL2luZGV4JztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbGl0aWVzL2luZGV4JztcbmV4cG9ydCAqIGZyb20gJy4vTWVyZ2VTdHlsZXMnO1xuaW1wb3J0ICcuL3ZlcnNpb24nO1xuLy8gRW5zdXJlIHRoZW1lIGlzIGluaXRpYWxpemVkIHdoZW4gdGhpcyBwYWNrYWdlIGlzIHJlZmVyZW5jZWQuXG5pbXBvcnQgeyBpbml0aWFsaXplVGhlbWVJbkN1c3RvbWl6YXRpb25zIH0gZnJvbSAnLi9zdHlsZXMvdGhlbWUnO1xuaW5pdGlhbGl6ZVRoZW1lSW5DdXN0b21pemF0aW9ucygpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciBDdXN0b21pemVyQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICAgIGN1c3RvbWl6YXRpb25zOiB7XG4gICAgICAgIGluQ3VzdG9taXplckNvbnRleHQ6IGZhbHNlLFxuICAgICAgICBzZXR0aW5nczoge30sXG4gICAgICAgIHNjb3BlZFNldHRpbmdzOiB7fSxcbiAgICB9LFxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DdXN0b21pemVyQ29udGV4dC5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19zcHJlYWRBcnJheXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNvbmNhdFN0eWxlU2V0cyB9IGZyb20gJ0B1aWZhYnJpYy9zdHlsaW5nJztcbmltcG9ydCB7IEN1c3RvbWl6YXRpb25zLCBDdXN0b21pemVyQ29udGV4dCB9IGZyb20gJ0B1aWZhYnJpYy91dGlsaXRpZXMnO1xuaW1wb3J0IHsgY3JlYXRlRmFjdG9yeSB9IGZyb20gJy4vc2xvdHMnO1xuaW1wb3J0IHsgYXNzaWduIH0gZnJvbSAnLi91dGlsaXRpZXMnO1xuLyoqXG4gKiBBc3NlbWJsZXMgYSBoaWdoZXIgb3JkZXIgY29tcG9uZW50IGJhc2VkIG9uIHRoZSBmb2xsb3dpbmc6IHN0eWxlcywgdGhlbWUsIHZpZXcsIGFuZCBzdGF0ZS5cbiAqIEltcG9zZXMgYSBzZXBhcmF0aW9uIG9mIGNvbmNlcm4gYW5kIGNlbnRyYWxpemVzIHN0eWxpbmcgcHJvY2Vzc2luZyB0byBpbmNyZWFzZSBlYXNlIG9mIHVzZSBhbmQgcm9idXN0bmVzc1xuICogaW4gaG93IGNvbXBvbmVudHMgdXNlIGFuZCBhcHBseSBzdHlsaW5nIGFuZCB0aGVtaW5nLlxuICpcbiAqIEF1dG9tYXRpY2FsbHkgbWVyZ2VzIGFuZCBhcHBsaWVzIHRoZW1lcyBhbmQgc3R5bGVzIHdpdGggdGhlbWUgLyBzdHlsZXByb3BzIGhhdmluZyB0aGUgaGlnaGVzdCBwcmlvcml0eS5cbiAqIFN0YXRlIGNvbXBvbmVudCwgaWYgcHJvdmlkZWQsIGlzIHBhc3NlZCBpbiBwcm9wcyBmb3IgcHJvY2Vzc2luZy4gUHJvcHMgZnJvbSBzdGF0ZSAvIHVzZXIgYXJlIGF1dG9tYXRpY2FsbHkgcHJvY2Vzc2VkXG4gKiBhbmQgc3R5bGVkIGJlZm9yZSBmaW5hbGx5IGJlaW5nIHBhc3NlZCB0byB2aWV3LlxuICpcbiAqIFN0YXRlIGNvbXBvbmVudHMgc2hvdWxkIGNvbnRhaW4gYWxsIHN0YXRlZnVsIGJlaGF2aW9yIGFuZCBzaG91bGQgbm90IGdlbmVyYXRlIGFueSBKU1gsIGJ1dCByYXRoZXIgc2ltcGx5IGNhbGxcbiAqIHRoZSB2aWV3IHByb3AuXG4gKlxuICogVmlld3Mgc2hvdWxkIHNpbXBseSBiZSBzdGF0ZWxlc3MgcHVyZSBmdW5jdGlvbnMgdGhhdCByZWNlaXZlIGFsbCBwcm9wcyBuZWVkZWQgZm9yIHJlbmRlcmluZyB0aGVpciBvdXRwdXQuXG4gKlxuICogU3RhdGUgY29tcG9uZW50IGlzIG9wdGlvbmFsLiBJZiBzdGF0ZSBpcyBub3QgcHJvdmlkZWQsIGNyZWF0ZWQgY29tcG9uZW50IGlzIGVzc2VudGlhbGx5IGEgZnVuY3Rpb25hbFxuICogc3RhdGVsZXNzIGNvbXBvbmVudC5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyAtIGNvbXBvbmVudCBDb21wb25lbnQgb3B0aW9ucy4gU2VlIElDb21wb25lbnRPcHRpb25zIGZvciBtb3JlIGRldGFpbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCh2aWV3LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICB2YXIgX2EgPSBvcHRpb25zLmZhY3RvcnlPcHRpb25zLCBmYWN0b3J5T3B0aW9ucyA9IF9hID09PSB2b2lkIDAgPyB7fSA6IF9hO1xuICAgIHZhciBkZWZhdWx0UHJvcCA9IGZhY3RvcnlPcHRpb25zLmRlZmF1bHRQcm9wO1xuICAgIHZhciBSZXN1bHRDb21wb25lbnQgPSBmdW5jdGlvbiAoY29tcG9uZW50UHJvcHMpIHtcbiAgICAgICAgdmFyIHNldHRpbmdzID0gX2dldEN1c3RvbWl6YXRpb25zKG9wdGlvbnMuZGlzcGxheU5hbWUsIFJlYWN0LnVzZUNvbnRleHQoQ3VzdG9taXplckNvbnRleHQpLCBvcHRpb25zLmZpZWxkcyk7XG4gICAgICAgIHZhciBzdGF0ZVJlZHVjZXIgPSBvcHRpb25zLnN0YXRlO1xuICAgICAgICBpZiAoc3RhdGVSZWR1Y2VyKSB7XG4gICAgICAgICAgICAvLyBEb24ndCBhc3N1bWUgc3RhdGUgd2lsbCByZXR1cm4gYWxsIHByb3BzLCBzbyBzcHJlYWQgdXNlU3RhdGUgcmVzdWx0IG92ZXIgY29tcG9uZW50IHByb3BzLlxuICAgICAgICAgICAgY29tcG9uZW50UHJvcHMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY29tcG9uZW50UHJvcHMpLCBzdGF0ZVJlZHVjZXIoY29tcG9uZW50UHJvcHMpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhlbWUgPSBjb21wb25lbnRQcm9wcy50aGVtZSB8fCBzZXR0aW5ncy50aGVtZTtcbiAgICAgICAgdmFyIHRva2VucyA9IF9yZXNvbHZlVG9rZW5zKGNvbXBvbmVudFByb3BzLCB0aGVtZSwgb3B0aW9ucy50b2tlbnMsIHNldHRpbmdzLnRva2VucywgY29tcG9uZW50UHJvcHMudG9rZW5zKTtcbiAgICAgICAgdmFyIHN0eWxlcyA9IF9yZXNvbHZlU3R5bGVzKGNvbXBvbmVudFByb3BzLCB0aGVtZSwgdG9rZW5zLCBvcHRpb25zLnN0eWxlcywgc2V0dGluZ3Muc3R5bGVzLCBjb21wb25lbnRQcm9wcy5zdHlsZXMpO1xuICAgICAgICB2YXIgdmlld1Byb3BzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGNvbXBvbmVudFByb3BzKSwgeyBzdHlsZXM6IHN0eWxlcyxcbiAgICAgICAgICAgIHRva2VuczogdG9rZW5zLCBfZGVmYXVsdFN0eWxlczogc3R5bGVzLCB0aGVtZTogdGhlbWUgfSk7XG4gICAgICAgIHJldHVybiB2aWV3KHZpZXdQcm9wcyk7XG4gICAgfTtcbiAgICBSZXN1bHRDb21wb25lbnQuZGlzcGxheU5hbWUgPSBvcHRpb25zLmRpc3BsYXlOYW1lIHx8IHZpZXcubmFtZTtcbiAgICAvLyBJZiBhIHNob3J0aGFuZCBwcm9wIGlzIGRlZmluZWQsIGNyZWF0ZSBhIGZhY3RvcnkgZm9yIHRoZSBjb21wb25lbnQuXG4gICAgLy8gVE9ETzogVGhpcyBzaG91bGRuJ3QgYmUgYSBjb25jZXJuIG9mIGNyZWF0ZUNvbXBvbmVudC4uIGZhY3RvcnlPcHRpb25zIHNob3VsZCBqdXN0IGJlIGZvcndhcmRlZC5cbiAgICAvLyAgICAgICBOZWVkIHRvIHdlaWdoIGNyZWF0aW5nIGRlZmF1bHQgZmFjdG9yaWVzIG9uIGNvbXBvbmVudCBjcmVhdGlvbiB2cy4gbWVtb2l6aW5nIHRoZW0gb24gdXNlIGluIHNsb3RzLnRzeC5cbiAgICBpZiAoZGVmYXVsdFByb3ApIHtcbiAgICAgICAgUmVzdWx0Q29tcG9uZW50LmNyZWF0ZSA9IGNyZWF0ZUZhY3RvcnkoUmVzdWx0Q29tcG9uZW50LCB7IGRlZmF1bHRQcm9wOiBkZWZhdWx0UHJvcCB9KTtcbiAgICB9XG4gICAgYXNzaWduKFJlc3VsdENvbXBvbmVudCwgb3B0aW9ucy5zdGF0aWNzKTtcbiAgICAvLyBMYXRlciB2ZXJzaW9ucyBvZiBUeXBlU3JpcHQgc2hvdWxkIGFsbG93IHVzIHRvIG1lcmdlIG9iamVjdHMgaW4gYSB0eXBlIHNhZmUgd2F5IGFuZCBhdm9pZCB0aGlzIGNhc3QuXG4gICAgcmV0dXJuIFJlc3VsdENvbXBvbmVudDtcbn1cbi8qKlxuICogUmVzb2x2ZSBhbGwgc3R5bGVzIGZ1bmN0aW9ucyB3aXRoIGJvdGggcHJvcHMgYW5kIHRva2VucyBhbmQgZmxhdHRlbiByZXN1bHRzIGFsb25nIHdpdGggYWxsIHN0eWxlcyBvYmplY3RzLlxuICovXG5mdW5jdGlvbiBfcmVzb2x2ZVN0eWxlcyhwcm9wcywgdGhlbWUsIHRva2Vucykge1xuICAgIHZhciBhbGxTdHlsZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDM7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhbGxTdHlsZXNbX2kgLSAzXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBjb25jYXRTdHlsZVNldHMuYXBwbHkodm9pZCAwLCBhbGxTdHlsZXMubWFwKGZ1bmN0aW9uIChzdHlsZXMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBzdHlsZXMgPT09ICdmdW5jdGlvbicgPyBzdHlsZXMocHJvcHMsIHRoZW1lLCB0b2tlbnMpIDogc3R5bGVzO1xuICAgIH0pKTtcbn1cbi8qKlxuICogUmVzb2x2ZSBhbGwgdG9rZW5zIGZ1bmN0aW9ucyB3aXRoIHByb3BzIGZsYXR0ZW4gcmVzdWx0cyBhbG9uZyB3aXRoIGFsbCB0b2tlbnMgb2JqZWN0cy5cbiAqL1xuZnVuY3Rpb24gX3Jlc29sdmVUb2tlbnMocHJvcHMsIHRoZW1lKSB7XG4gICAgdmFyIGFsbFRva2VucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFsbFRva2Vuc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHRva2VucyA9IHt9O1xuICAgIGZvciAodmFyIF9hID0gMCwgYWxsVG9rZW5zXzEgPSBhbGxUb2tlbnM7IF9hIDwgYWxsVG9rZW5zXzEubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgIHZhciBjdXJyZW50VG9rZW5zID0gYWxsVG9rZW5zXzFbX2FdO1xuICAgICAgICBpZiAoY3VycmVudFRva2Vucykge1xuICAgICAgICAgICAgLy8gVE9ETzogd2h5IGlzIHRoaXMgY2FzdCBuZWVkZWQ/IFRTIHNlZW1zIHRvIHRoaW5rIHRoZXJlIGlzIGEgKFRUb2tlbiB8IEZ1bmN0aW9uKSB1bmlvbiBmcm9tIHNvbWV3aGVyZS5cbiAgICAgICAgICAgIGN1cnJlbnRUb2tlbnMgPVxuICAgICAgICAgICAgICAgIHR5cGVvZiBjdXJyZW50VG9rZW5zID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gY3VycmVudFRva2Vucyhwcm9wcywgdGhlbWUpXG4gICAgICAgICAgICAgICAgICAgIDogY3VycmVudFRva2VucztcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGN1cnJlbnRUb2tlbnMpKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFRva2VucyA9IF9yZXNvbHZlVG9rZW5zLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheXMoW3Byb3BzLCB0aGVtZV0sIGN1cnJlbnRUb2tlbnMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFzc2lnbih0b2tlbnMsIGN1cnJlbnRUb2tlbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0b2tlbnM7XG59XG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiBmb3IgY2FsbGluZyBDdXN0b21pemF0aW9ucy5nZXRTZXR0aW5ncyBmYWxsaW5nIGJhY2sgdG8gZGVmYXVsdCBmaWVsZHMuXG4gKlxuICogQHBhcmFtIGRpc3BsYXlOYW1lIERpc3BsYXlhYmxlIG5hbWUgZm9yIGNvbXBvbmVudC5cbiAqIEBwYXJhbSBjb250ZXh0IFJlYWN0IGNvbnRleHQgcGFzc2VkIHRvIGNvbXBvbmVudCBjb250YWluaW5nIGNvbnRleHR1YWwgc2V0dGluZ3MuXG4gKiBAcGFyYW0gZmllbGRzIE9wdGlvbmFsIGxpc3Qgb2YgcHJvcGVydGllcyB0byBncmFiIGZyb20gZ2xvYmFsIHN0b3JlIGFuZCBjb250ZXh0LlxuICovXG5mdW5jdGlvbiBfZ2V0Q3VzdG9taXphdGlvbnMoZGlzcGxheU5hbWUsIGNvbnRleHQsIGZpZWxkcykge1xuICAgIC8vIFRPRE86IGRvIHdlIHdhbnQgZmllbGQgcHJvcHM/IHNob3VsZCBmaWVsZHMgYmUgcGFydCBvZiBJQ29tcG9uZW50IGFuZCB1c2VkIGhlcmU/XG4gICAgLy8gVE9ETzogc2hvdWxkIHdlIGNlbnRyYWxseSBkZWZpbmUgRGVmYXVsdEZpZWxkcz8gKG5vdCBleHBvcnRlZCBmcm9tIHN0eWxpbmcpXG4gICAgLy8gVE9ETzogdGllIHRoaXMgYXJyYXkgdG8gSUN1c3RvbWl6YXRpb25Qcm9wcywgc3VjaCB0aGF0IGVhY2ggYXJyYXkgZWxlbWVudCBpcyBrZXlvZiBJQ3VzdG9taXphdGlvblByb3BzXG4gICAgdmFyIERlZmF1bHRGaWVsZHMgPSBbJ3RoZW1lJywgJ3N0eWxlcycsICd0b2tlbnMnXTtcbiAgICByZXR1cm4gQ3VzdG9taXphdGlvbnMuZ2V0U2V0dGluZ3MoZmllbGRzIHx8IERlZmF1bHRGaWVsZHMsIGRpc3BsYXlOYW1lLCBjb250ZXh0LmN1c3RvbWl6YXRpb25zKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUNvbXBvbmVudC5qcy5tYXAiLCJ2YXIgdG9PYmplY3RNYXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGl0ZW1zID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgaXRlbXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGZvciAodmFyIF9hID0gMCwgaXRlbXNfMSA9IGl0ZW1zOyBfYSA8IGl0ZW1zXzEubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgIHZhciBpdGVtID0gaXRlbXNfMVtfYV07XG4gICAgICAgIHZhciBrZXlzID0gQXJyYXkuaXNBcnJheShpdGVtKSA/IGl0ZW0gOiBPYmplY3Qua2V5cyhpdGVtKTtcbiAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBrZXlzXzEgPSBrZXlzOyBfYiA8IGtleXNfMS5sZW5ndGg7IF9iKyspIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzXzFbX2JdO1xuICAgICAgICAgICAgcmVzdWx0W2tleV0gPSAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuLyoqXG4gKiBBbiBhcnJheSBvZiBldmVudHMgdGhhdCBhcmUgYWxsb3dlZCBvbiBldmVyeSBodG1sIGVsZW1lbnQgdHlwZS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgYmFzZUVsZW1lbnRFdmVudHMgPSB0b09iamVjdE1hcChbXG4gICAgJ29uQ29weScsXG4gICAgJ29uQ3V0JyxcbiAgICAnb25QYXN0ZScsXG4gICAgJ29uQ29tcG9zaXRpb25FbmQnLFxuICAgICdvbkNvbXBvc2l0aW9uU3RhcnQnLFxuICAgICdvbkNvbXBvc2l0aW9uVXBkYXRlJyxcbiAgICAnb25Gb2N1cycsXG4gICAgJ29uRm9jdXNDYXB0dXJlJyxcbiAgICAnb25CbHVyJyxcbiAgICAnb25CbHVyQ2FwdHVyZScsXG4gICAgJ29uQ2hhbmdlJyxcbiAgICAnb25JbnB1dCcsXG4gICAgJ29uU3VibWl0JyxcbiAgICAnb25Mb2FkJyxcbiAgICAnb25FcnJvcicsXG4gICAgJ29uS2V5RG93bicsXG4gICAgJ29uS2V5RG93bkNhcHR1cmUnLFxuICAgICdvbktleVByZXNzJyxcbiAgICAnb25LZXlVcCcsXG4gICAgJ29uQWJvcnQnLFxuICAgICdvbkNhblBsYXknLFxuICAgICdvbkNhblBsYXlUaHJvdWdoJyxcbiAgICAnb25EdXJhdGlvbkNoYW5nZScsXG4gICAgJ29uRW1wdGllZCcsXG4gICAgJ29uRW5jcnlwdGVkJyxcbiAgICAnb25FbmRlZCcsXG4gICAgJ29uTG9hZGVkRGF0YScsXG4gICAgJ29uTG9hZGVkTWV0YWRhdGEnLFxuICAgICdvbkxvYWRTdGFydCcsXG4gICAgJ29uUGF1c2UnLFxuICAgICdvblBsYXknLFxuICAgICdvblBsYXlpbmcnLFxuICAgICdvblByb2dyZXNzJyxcbiAgICAnb25SYXRlQ2hhbmdlJyxcbiAgICAnb25TZWVrZWQnLFxuICAgICdvblNlZWtpbmcnLFxuICAgICdvblN0YWxsZWQnLFxuICAgICdvblN1c3BlbmQnLFxuICAgICdvblRpbWVVcGRhdGUnLFxuICAgICdvblZvbHVtZUNoYW5nZScsXG4gICAgJ29uV2FpdGluZycsXG4gICAgJ29uQ2xpY2snLFxuICAgICdvbkNsaWNrQ2FwdHVyZScsXG4gICAgJ29uQ29udGV4dE1lbnUnLFxuICAgICdvbkRvdWJsZUNsaWNrJyxcbiAgICAnb25EcmFnJyxcbiAgICAnb25EcmFnRW5kJyxcbiAgICAnb25EcmFnRW50ZXInLFxuICAgICdvbkRyYWdFeGl0JyxcbiAgICAnb25EcmFnTGVhdmUnLFxuICAgICdvbkRyYWdPdmVyJyxcbiAgICAnb25EcmFnU3RhcnQnLFxuICAgICdvbkRyb3AnLFxuICAgICdvbk1vdXNlRG93bicsXG4gICAgJ29uTW91c2VEb3duQ2FwdHVyZScsXG4gICAgJ29uTW91c2VFbnRlcicsXG4gICAgJ29uTW91c2VMZWF2ZScsXG4gICAgJ29uTW91c2VNb3ZlJyxcbiAgICAnb25Nb3VzZU91dCcsXG4gICAgJ29uTW91c2VPdmVyJyxcbiAgICAnb25Nb3VzZVVwJyxcbiAgICAnb25Nb3VzZVVwQ2FwdHVyZScsXG4gICAgJ29uU2VsZWN0JyxcbiAgICAnb25Ub3VjaENhbmNlbCcsXG4gICAgJ29uVG91Y2hFbmQnLFxuICAgICdvblRvdWNoTW92ZScsXG4gICAgJ29uVG91Y2hTdGFydCcsXG4gICAgJ29uU2Nyb2xsJyxcbiAgICAnb25XaGVlbCcsXG4gICAgJ29uUG9pbnRlckNhbmNlbCcsXG4gICAgJ29uUG9pbnRlckRvd24nLFxuICAgICdvblBvaW50ZXJFbnRlcicsXG4gICAgJ29uUG9pbnRlckxlYXZlJyxcbiAgICAnb25Qb2ludGVyTW92ZScsXG4gICAgJ29uUG9pbnRlck91dCcsXG4gICAgJ29uUG9pbnRlck92ZXInLFxuICAgICdvblBvaW50ZXJVcCcsXG4gICAgJ29uR290UG9pbnRlckNhcHR1cmUnLFxuICAgICdvbkxvc3RQb2ludGVyQ2FwdHVyZScsXG5dKTtcbi8qKlxuICogQW4gYXJyYXkgb2YgZWxlbWVudCBhdHRyaWJ1dGVzIHdoaWNoIGFyZSBhbGxvd2VkIG9uIGV2ZXJ5IGh0bWwgZWxlbWVudCB0eXBlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBiYXNlRWxlbWVudFByb3BlcnRpZXMgPSB0b09iamVjdE1hcChbXG4gICAgJ2FjY2Vzc0tleScsXG4gICAgJ2NoaWxkcmVuJyxcbiAgICAnY2xhc3NOYW1lJyxcbiAgICAnY29udGVudEVkaXRhYmxlJyxcbiAgICAnZGlyJyxcbiAgICAnZHJhZ2dhYmxlJyxcbiAgICAnaGlkZGVuJyxcbiAgICAnaHRtbEZvcicsXG4gICAgJ2lkJyxcbiAgICAnbGFuZycsXG4gICAgJ3JlZicsXG4gICAgJ3JvbGUnLFxuICAgICdzdHlsZScsXG4gICAgJ3RhYkluZGV4JyxcbiAgICAndGl0bGUnLFxuICAgICd0cmFuc2xhdGUnLFxuICAgICdzcGVsbENoZWNrJyxcbiAgICAnbmFtZScsXG5dKTtcbi8qKlxuICogQW4gYXJyYXkgb2YgSFRNTCBlbGVtZW50IHByb3BlcnRpZXMgYW5kIGV2ZW50cy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgaHRtbEVsZW1lbnRQcm9wZXJ0aWVzID0gdG9PYmplY3RNYXAoYmFzZUVsZW1lbnRQcm9wZXJ0aWVzLCBiYXNlRWxlbWVudEV2ZW50cyk7XG4vKipcbiAqIEFuIGFycmF5IG9mIExBQkVMIHRhZyBwcm9wZXJ0aWVzIGFuZCBldmVudHMuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIGxhYmVsUHJvcGVydGllcyA9IHRvT2JqZWN0TWFwKGh0bWxFbGVtZW50UHJvcGVydGllcywgW1xuICAgICdmb3JtJyxcbl0pO1xuLyoqXG4gKiBBbiBhcnJheSBvZiBBVURJTyB0YWcgcHJvcGVydGllcyBhbmQgZXZlbnRzLlxuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgYXVkaW9Qcm9wZXJ0aWVzID0gdG9PYmplY3RNYXAoaHRtbEVsZW1lbnRQcm9wZXJ0aWVzLCBbXG4gICAgJ2hlaWdodCcsXG4gICAgJ2xvb3AnLFxuICAgICdtdXRlZCcsXG4gICAgJ3ByZWxvYWQnLFxuICAgICdzcmMnLFxuICAgICd3aWR0aCcsXG5dKTtcbi8qKlxuICogQW4gYXJyYXkgb2YgVklERU8gdGFnIHByb3BlcnRpZXMgYW5kIGV2ZW50cy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgdmlkZW9Qcm9wZXJ0aWVzID0gdG9PYmplY3RNYXAoYXVkaW9Qcm9wZXJ0aWVzLCBbXG4gICAgJ3Bvc3RlcicsXG5dKTtcbi8qKlxuICogQW4gYXJyYXkgb2YgT0wgdGFnIHByb3BlcnRpZXMgYW5kIGV2ZW50cy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgb2xQcm9wZXJ0aWVzID0gdG9PYmplY3RNYXAoaHRtbEVsZW1lbnRQcm9wZXJ0aWVzLCBbXG4gICAgJ3N0YXJ0Jyxcbl0pO1xuLyoqXG4gKiBBbiBhcnJheSBvZiBMSSB0YWcgcHJvcGVydGllcyBhbmQgZXZlbnRzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBsaVByb3BlcnRpZXMgPSB0b09iamVjdE1hcChodG1sRWxlbWVudFByb3BlcnRpZXMsIFtcbiAgICAndmFsdWUnLFxuXSk7XG4vKipcbiAqIEFuIGFycmF5IG9mIEEgdGFnIHByb3BlcnRpZXMgYW5kIGV2ZW50cy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgYW5jaG9yUHJvcGVydGllcyA9IHRvT2JqZWN0TWFwKGh0bWxFbGVtZW50UHJvcGVydGllcywgW1xuICAgICdkb3dubG9hZCcsXG4gICAgJ2hyZWYnLFxuICAgICdocmVmTGFuZycsXG4gICAgJ21lZGlhJyxcbiAgICAncmVsJyxcbiAgICAndGFyZ2V0JyxcbiAgICAndHlwZScsXG5dKTtcbi8qKlxuICogQW4gYXJyYXkgb2YgQlVUVE9OIHRhZyBwcm9wZXJ0aWVzIGFuZCBldmVudHMuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIGJ1dHRvblByb3BlcnRpZXMgPSB0b09iamVjdE1hcChodG1sRWxlbWVudFByb3BlcnRpZXMsIFtcbiAgICAnYXV0b0ZvY3VzJyxcbiAgICAnZGlzYWJsZWQnLFxuICAgICdmb3JtJyxcbiAgICAnZm9ybUFjdGlvbicsXG4gICAgJ2Zvcm1FbmNUeXBlJyxcbiAgICAnZm9ybU1ldGhvZCcsXG4gICAgJ2Zvcm1Ob1ZhbGlkYXRlJyxcbiAgICAnZm9ybVRhcmdldCcsXG4gICAgJ3R5cGUnLFxuICAgICd2YWx1ZScsXG5dKTtcbi8qKlxuICogQW4gYXJyYXkgb2YgSU5QVVQgdGFnIHByb3BlcnRpZXMgYW5kIGV2ZW50cy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgaW5wdXRQcm9wZXJ0aWVzID0gdG9PYmplY3RNYXAoYnV0dG9uUHJvcGVydGllcywgW1xuICAgICdhY2NlcHQnLFxuICAgICdhbHQnLFxuICAgICdhdXRvQ2FwaXRhbGl6ZScsXG4gICAgJ2F1dG9Db21wbGV0ZScsXG4gICAgJ2NoZWNrZWQnLFxuICAgICdkaXJuYW1lJyxcbiAgICAnZm9ybScsXG4gICAgJ2hlaWdodCcsXG4gICAgJ2lucHV0TW9kZScsXG4gICAgJ2xpc3QnLFxuICAgICdtYXgnLFxuICAgICdtYXhMZW5ndGgnLFxuICAgICdtaW4nLFxuICAgICdtdWx0aXBsZScsXG4gICAgJ3BhdHRlcm4nLFxuICAgICdwbGFjZWhvbGRlcicsXG4gICAgJ3JlYWRPbmx5JyxcbiAgICAncmVxdWlyZWQnLFxuICAgICdzcmMnLFxuICAgICdzdGVwJyxcbiAgICAnc2l6ZScsXG4gICAgJ3R5cGUnLFxuICAgICd2YWx1ZScsXG4gICAgJ3dpZHRoJyxcbl0pO1xuLyoqXG4gKiBBbiBhcnJheSBvZiBURVhUQVJFQSB0YWcgcHJvcGVydGllcyBhbmQgZXZlbnRzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciB0ZXh0QXJlYVByb3BlcnRpZXMgPSB0b09iamVjdE1hcChidXR0b25Qcm9wZXJ0aWVzLCBbXG4gICAgJ2F1dG9DYXBpdGFsaXplJyxcbiAgICAnY29scycsXG4gICAgJ2Rpcm5hbWUnLFxuICAgICdmb3JtJyxcbiAgICAnbWF4TGVuZ3RoJyxcbiAgICAncGxhY2Vob2xkZXInLFxuICAgICdyZWFkT25seScsXG4gICAgJ3JlcXVpcmVkJyxcbiAgICAncm93cycsXG4gICAgJ3dyYXAnLFxuXSk7XG4vKipcbiAqIEFuIGFycmF5IG9mIFNFTEVDVCB0YWcgcHJvcGVydGllcyBhbmQgZXZlbnRzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBzZWxlY3RQcm9wZXJ0aWVzID0gdG9PYmplY3RNYXAoYnV0dG9uUHJvcGVydGllcywgW1xuICAgICdmb3JtJyxcbiAgICAnbXVsdGlwbGUnLFxuICAgICdyZXF1aXJlZCcsXG5dKTtcbmV4cG9ydCB2YXIgb3B0aW9uUHJvcGVydGllcyA9IHRvT2JqZWN0TWFwKGh0bWxFbGVtZW50UHJvcGVydGllcywgW1xuICAgICdzZWxlY3RlZCcsXG4gICAgJ3ZhbHVlJyxcbl0pO1xuLyoqXG4gKiBBbiBhcnJheSBvZiBUQUJMRSB0YWcgcHJvcGVydGllcyBhbmQgZXZlbnRzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciB0YWJsZVByb3BlcnRpZXMgPSB0b09iamVjdE1hcChodG1sRWxlbWVudFByb3BlcnRpZXMsIFtcbiAgICAnY2VsbFBhZGRpbmcnLFxuICAgICdjZWxsU3BhY2luZycsXG5dKTtcbi8qKlxuICogQW4gYXJyYXkgb2YgVFIgdGFnIHByb3BlcnRpZXMgYW5kIGV2ZW50cy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgdHJQcm9wZXJ0aWVzID0gaHRtbEVsZW1lbnRQcm9wZXJ0aWVzO1xuLyoqXG4gKiBBbiBhcnJheSBvZiBUSCB0YWcgcHJvcGVydGllcyBhbmQgZXZlbnRzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciB0aFByb3BlcnRpZXMgPSB0b09iamVjdE1hcChodG1sRWxlbWVudFByb3BlcnRpZXMsIFtcbiAgICAncm93U3BhbicsXG4gICAgJ3Njb3BlJyxcbl0pO1xuLyoqXG4gKiBBbiBhcnJheSBvZiBURCB0YWcgcHJvcGVydGllcyBhbmQgZXZlbnRzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciB0ZFByb3BlcnRpZXMgPSB0b09iamVjdE1hcChodG1sRWxlbWVudFByb3BlcnRpZXMsIFtcbiAgICAnY29sU3BhbicsXG4gICAgJ2hlYWRlcnMnLFxuICAgICdyb3dTcGFuJyxcbiAgICAnc2NvcGUnLFxuXSk7XG5leHBvcnQgdmFyIGNvbEdyb3VwUHJvcGVydGllcyA9IHRvT2JqZWN0TWFwKGh0bWxFbGVtZW50UHJvcGVydGllcywgW1xuICAgICdzcGFuJyxcbl0pO1xuZXhwb3J0IHZhciBjb2xQcm9wZXJ0aWVzID0gdG9PYmplY3RNYXAoaHRtbEVsZW1lbnRQcm9wZXJ0aWVzLCBbXG4gICAgJ3NwYW4nLFxuXSk7XG4vKipcbiAqIEFuIGFycmF5IG9mIEZPUk0gdGFnIHByb3BlcnRpZXMgYW5kIGV2ZW50cy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgZm9ybVByb3BlcnRpZXMgPSB0b09iamVjdE1hcChodG1sRWxlbWVudFByb3BlcnRpZXMsIFtcbiAgICAnYWNjZXB0Q2hhcnNldCcsXG4gICAgJ2FjdGlvbicsXG4gICAgJ2VuY1R5cGUnLFxuICAgICdlbmNUeXBlJyxcbiAgICAnbWV0aG9kJyxcbiAgICAnbm9WYWxpZGF0ZScsXG4gICAgJ3RhcmdldCcsXG5dKTtcbi8qKlxuICogQW4gYXJyYXkgb2YgSUZSQU1FIHRhZyBwcm9wZXJ0aWVzIGFuZCBldmVudHMuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIGlmcmFtZVByb3BlcnRpZXMgPSB0b09iamVjdE1hcChodG1sRWxlbWVudFByb3BlcnRpZXMsIFtcbiAgICAnYWxsb3cnLFxuICAgICdhbGxvd0Z1bGxTY3JlZW4nLFxuICAgICdhbGxvd1BheW1lbnRSZXF1ZXN0JyxcbiAgICAnYWxsb3dUcmFuc3BhcmVuY3knLFxuICAgICdjc3AnLFxuICAgICdoZWlnaHQnLFxuICAgICdpbXBvcnRhbmNlJyxcbiAgICAncmVmZXJyZXJQb2xpY3knLFxuICAgICdzYW5kYm94JyxcbiAgICAnc3JjJyxcbiAgICAnc3JjRG9jJyxcbiAgICAnd2lkdGgnLFxuXSk7XG4vKipcbiAqIEFuIGFycmF5IG9mIElNQUdFIHRhZyBwcm9wZXJ0aWVzIGFuZCBldmVudHMuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIGltZ1Byb3BlcnRpZXMgPSB0b09iamVjdE1hcChodG1sRWxlbWVudFByb3BlcnRpZXMsIFtcbiAgICAnYWx0JyxcbiAgICAnY3Jvc3NPcmlnaW4nLFxuICAgICdoZWlnaHQnLFxuICAgICdzcmMnLFxuICAgICdzcmNTZXQnLFxuICAgICd1c2VNYXAnLFxuICAgICd3aWR0aCcsXG5dKTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIGltZ1Byb3BlcnRpZXMgZm9yIGltZyBlbGVtZW50cy5cbiAqL1xuZXhwb3J0IHZhciBpbWFnZVByb3BlcnRpZXMgPSBpbWdQcm9wZXJ0aWVzO1xuLyoqXG4gKiBBbiBhcnJheSBvZiBESVYgdGFnIHByb3BlcnRpZXMgYW5kIGV2ZW50cy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgZGl2UHJvcGVydGllcyA9IGh0bWxFbGVtZW50UHJvcGVydGllcztcbi8qKlxuICogR2V0cyBuYXRpdmUgc3VwcG9ydGVkIHByb3BzIGZvciBhbiBodG1sIGVsZW1lbnQgcHJvdmlkZWQgdGhlIGFsbG93YW5jZSBzZXQuIFVzZSBvbmUgb2YgdGhlIHByb3BlcnR5XG4gKiBzZXRzIGRlZmluZWQgKGRpdlByb3BlcnRpZXMsIGJ1dHRvblByb3BlcnRlcywgZXRjKSB0byBmaWx0ZXIgb3V0IHN1cHBvcnRlZCBwcm9wZXJ0aWVzIGZyb20gYSBnaXZlblxuICogcHJvcHMgc2V0LiBOb3RlIHRoYXQgYWxsIGRhdGEtIGFuZCBhcmlhLSBwcmVmaXhlZCBhdHRyaWJ1dGVzIHdpbGwgYmUgYWxsb3dlZC5cbiAqIE5PVEU6IGdldE5hdGl2ZVByb3BzIHNob3VsZCBhbHdheXMgYmUgYXBwbGllZCBmaXJzdCB3aGVuIGFkZGluZyBwcm9wcyB0byBhIHJlYWN0IGNvbXBvbmVudC4gVGhlXG4gKiBub24tbmF0aXZlIHByb3BzIHNob3VsZCBiZSBhcHBsaWVkIHNlY29uZC4gVGhpcyB3aWxsIHByZXZlbnQgZ2V0TmF0aXZlUHJvcHMgZnJvbSBvdmVycmlkaW5nIHlvdXIgY3VzdG9tIHByb3BzLlxuICogRm9yIGV4YW1wbGUsIGlmIHByb3BzIHBhc3NlZCB0byBnZXROYXRpdmVQcm9wcyBoYXMgYW4gb25DbGljayBmdW5jdGlvbiBhbmQgZ2V0TmF0aXZlUHJvcHMgaXMgYWRkZWQgdG9cbiAqIHRoZSBjb21wb25lbnQgYWZ0ZXIgYW4gb25DbGljayBmdW5jdGlvbiBpcyBhZGRlZCwgdGhlbiB0aGUgZ2V0TmF0aXZlUHJvcHMgb25DbGljayB3aWxsIG92ZXJyaWRlIGl0LlxuICpcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSBwcm9wcyAtIFRoZSB1bmZpbHRlcmVkIGlucHV0IHByb3BzXG4gKiBAcGFyYW0gYWxsb3dlZFByb3BzTmFtZXMgLSBUaGUgYXJyYXkgb3IgcmVjb3JkIG9mIGFsbG93ZWQgcHJvcCBuYW1lcy5cbiAqIEByZXR1cm5zIFRoZSBmaWx0ZXJlZCBwcm9wc1xuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGZ1bmN0aW9uIGdldE5hdGl2ZVByb3BzKFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbnByb3BzLCBhbGxvd2VkUHJvcE5hbWVzLCBleGNsdWRlZFByb3BOYW1lcykge1xuICAgIC8vIEl0J2QgYmUgZ3JlYXQgdG8gcHJvcGVybHkgdHlwZSB0aGlzIHdoaWxlIGFsbG93aW5nICdhcmlhLWAgYW5kICdkYXRhLScgYXR0cmlidXRlcyBsaWtlIFR5cGVTY3JpcHQgZG9lcyBmb3JcbiAgICAvLyBKU1ggYXR0cmlidXRlcywgYnV0IHRoYXQgYWJpbGl0eSBpcyBoYXJkY29kZWQgaW50byB0aGUgVFMgY29tcGlsZXIgd2l0aCBubyBhbmFsb2cgaW4gVHlwZVNjcmlwdCB0eXBpbmdzLlxuICAgIC8vIFRoZW4gd2UnZCBiZSBhYmxlIHRvIGVuZm9yY2UgcHJvcHMgZXh0ZW5kcyBuYXRpdmUgcHJvcHMgKGluY2x1ZGluZyBhcmlhLSBhbmQgZGF0YS0gYXR0cmlidXRlcyksIGFuZCB0aGVuXG4gICAgLy8gcmV0dXJuIG5hdGl2ZSBwcm9wcy5cbiAgICAvLyBXZSBzaG91bGQgYmUgYWJsZSB0byBkbyB0aGlzIG9uY2UgdGhpcyBQUiBpcyBtZXJnZWQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9wdWxsLzI2Nzk3XG4gICAgdmFyIF9hO1xuICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheShhbGxvd2VkUHJvcE5hbWVzKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHByb3BzKTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIGtleXNfMiA9IGtleXM7IF9pIDwga2V5c18yLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIga2V5ID0ga2V5c18yW19pXTtcbiAgICAgICAgdmFyIGlzTmF0aXZlUHJvcCA9ICghaXNBcnJheSAmJiBhbGxvd2VkUHJvcE5hbWVzW2tleV0pIHx8XG4gICAgICAgICAgICAoaXNBcnJheSAmJiBhbGxvd2VkUHJvcE5hbWVzLmluZGV4T2Yoa2V5KSA+PSAwKSB8fFxuICAgICAgICAgICAga2V5LmluZGV4T2YoJ2RhdGEtJykgPT09IDAgfHxcbiAgICAgICAgICAgIGtleS5pbmRleE9mKCdhcmlhLScpID09PSAwO1xuICAgICAgICBpZiAoaXNOYXRpdmVQcm9wICYmICghZXhjbHVkZWRQcm9wTmFtZXMgfHwgKChfYSA9IGV4Y2x1ZGVkUHJvcE5hbWVzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaW5kZXhPZihrZXkpKSA9PT0gLTEpKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBwcm9wc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9wZXJ0aWVzLmpzLm1hcCIsIi8qKlxuICogRnVuY3Rpb25zIHVzZWQgYnkgU3RhY2sgY29tcG9uZW50cyB0byBzaW1wbGlmeSBzdHlsZS1yZWxhdGVkIGNvbXB1dGF0aW9uc1xuICovXG4vLyBIZWxwZXIgZnVuY3Rpb24gdGhhdCBjb252ZXJ0cyBhIHRoZW1lZCBzcGFjaW5nIGtleSAoaWYgZ2l2ZW4pIHRvIHRoZSBjb3JyZXNwb25kaW5nIHRoZW1lZCBzcGFjaW5nIHZhbHVlLlxudmFyIF9nZXRUaGVtZWRTcGFjaW5nID0gZnVuY3Rpb24gKHNwYWNlLCB0aGVtZSkge1xuICAgIGlmICh0aGVtZS5zcGFjaW5nLmhhc093blByb3BlcnR5KHNwYWNlKSkge1xuICAgICAgICByZXR1cm4gdGhlbWUuc3BhY2luZ1tzcGFjZV07XG4gICAgfVxuICAgIHJldHVybiBzcGFjZTtcbn07XG4vLyBIZWxwZXIgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIGdhcCBhcyBhIHN0cmluZyBhbmQgY29udmVydHMgaXQgaW50byBhIHsgdmFsdWUsIHVuaXQgfSByZXByZXNlbnRhdGlvbi5cbnZhciBfZ2V0VmFsdWVVbml0R2FwID0gZnVuY3Rpb24gKGdhcCkge1xuICAgIHZhciBudW1lcmljYWxQYXJ0ID0gcGFyc2VGbG9hdChnYXApO1xuICAgIHZhciBudW1lcmljYWxWYWx1ZSA9IGlzTmFOKG51bWVyaWNhbFBhcnQpID8gMCA6IG51bWVyaWNhbFBhcnQ7XG4gICAgdmFyIG51bWVyaWNhbFN0cmluZyA9IGlzTmFOKG51bWVyaWNhbFBhcnQpID8gJycgOiBudW1lcmljYWxQYXJ0LnRvU3RyaW5nKCk7XG4gICAgdmFyIHVuaXRQYXJ0ID0gZ2FwLnN1YnN0cmluZyhudW1lcmljYWxTdHJpbmcudG9TdHJpbmcoKS5sZW5ndGgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiBudW1lcmljYWxWYWx1ZSxcbiAgICAgICAgdW5pdDogdW5pdFBhcnQgfHwgJ3B4JyxcbiAgICB9O1xufTtcbi8qKlxuICogVGFrZXMgaW4gYSBnYXAgc2l6ZSBpbiBlaXRoZXIgYSBDU1Mtc3R5bGUgZm9ybWF0IChlLmcuIDEwIG9yIFwiMTBweFwiKVxuICogIG9yIGEga2V5IG9mIGEgdGhlbWVkIHNwYWNpbmcgdmFsdWUgKGUuZy4gXCJzMVwiKS5cbiAqIFJldHVybnMgdGhlIHNlcGFyYXRlIG51bWVyaWNhbCB2YWx1ZSBvZiB0aGUgcGFkZGluZyAoZS5nLiAxMClcbiAqICBhbmQgdGhlIENTUyB1bml0IChlLmcuIFwicHhcIikuXG4gKi9cbmV4cG9ydCB2YXIgcGFyc2VHYXAgPSBmdW5jdGlvbiAoZ2FwLCB0aGVtZSkge1xuICAgIGlmIChnYXAgPT09IHVuZGVmaW5lZCB8fCBnYXAgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByb3dHYXA6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogMCxcbiAgICAgICAgICAgICAgICB1bml0OiAncHgnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbHVtbkdhcDoge1xuICAgICAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgICAgIHVuaXQ6ICdweCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGdhcCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJvd0dhcDoge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBnYXAsXG4gICAgICAgICAgICAgICAgdW5pdDogJ3B4JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb2x1bW5HYXA6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogZ2FwLFxuICAgICAgICAgICAgICAgIHVuaXQ6ICdweCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICB2YXIgc3BsaXRHYXAgPSBnYXAuc3BsaXQoJyAnKTtcbiAgICAvLyBJZiB0aGUgYXJyYXkgaGFzIG1vcmUgdGhhbiB0d28gdmFsdWVzLCB0aGVuIHJldHVybiAwcHguXG4gICAgaWYgKHNwbGl0R2FwLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJvd0dhcDoge1xuICAgICAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgICAgIHVuaXQ6ICdweCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29sdW1uR2FwOiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgICAgICAgICAgdW5pdDogJ3B4JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIElmIHRoZSBhcnJheSBoYXMgdHdvIHZhbHVlcywgdGhlbiBwYXJzZSBlYWNoIG9uZS5cbiAgICBpZiAoc3BsaXRHYXAubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByb3dHYXA6IF9nZXRWYWx1ZVVuaXRHYXAoX2dldFRoZW1lZFNwYWNpbmcoc3BsaXRHYXBbMF0sIHRoZW1lKSksXG4gICAgICAgICAgICBjb2x1bW5HYXA6IF9nZXRWYWx1ZVVuaXRHYXAoX2dldFRoZW1lZFNwYWNpbmcoc3BsaXRHYXBbMV0sIHRoZW1lKSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIEVsc2UsIHBhcnNlIHRoZSBudW1lcmljYWwgdmFsdWUgYW5kIHBhc3MgaXQgYXMgYm90aCB0aGUgdmVydGljYWwgYW5kIGhvcml6b250YWwgZ2FwLlxuICAgIHZhciBjYWxjdWxhdGVkR2FwID0gX2dldFZhbHVlVW5pdEdhcChfZ2V0VGhlbWVkU3BhY2luZyhnYXAsIHRoZW1lKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcm93R2FwOiBjYWxjdWxhdGVkR2FwLFxuICAgICAgICBjb2x1bW5HYXA6IGNhbGN1bGF0ZWRHYXAsXG4gICAgfTtcbn07XG4vKipcbiAqIFRha2VzIGluIGEgcGFkZGluZyBpbiBhIENTUy1zdHlsZSBmb3JtYXQgKGUuZy4gMTAsIFwiMTBweFwiLCBcIjEwcHggMTBweFwiLCBldGMuKVxuICogIHdoZXJlIHRoZSBzZXBhcmF0ZSBwYWRkaW5nIHZhbHVlcyBjYW4gYWxzbyBiZSB0aGUga2V5IG9mIGEgdGhlbWVkIHNwYWNpbmcgdmFsdWVcbiAqICAoZS5nLiBcInMxIG1cIiwgXCIxMHB4IGwxIDIwcHggbDJcIiwgZXRjLikuXG4gKiBSZXR1cm5zIGEgQ1NTLXN0eWxlIHBhZGRpbmcuXG4gKi9cbmV4cG9ydCB2YXIgcGFyc2VQYWRkaW5nID0gZnVuY3Rpb24gKHBhZGRpbmcsIHRoZW1lKSB7XG4gICAgaWYgKHBhZGRpbmcgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgcGFkZGluZyA9PT0gJ251bWJlcicgfHwgcGFkZGluZyA9PT0gJycpIHtcbiAgICAgICAgcmV0dXJuIHBhZGRpbmc7XG4gICAgfVxuICAgIHZhciBwYWRkaW5nVmFsdWVzID0gcGFkZGluZy5zcGxpdCgnICcpO1xuICAgIGlmIChwYWRkaW5nVmFsdWVzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRUaGVtZWRTcGFjaW5nKHBhZGRpbmcsIHRoZW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhZGRpbmdWYWx1ZXMucmVkdWNlKGZ1bmN0aW9uIChwYWRkaW5nMSwgcGFkZGluZzIpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRUaGVtZWRTcGFjaW5nKHBhZGRpbmcxLCB0aGVtZSkgKyAnICcgKyBfZ2V0VGhlbWVkU3BhY2luZyhwYWRkaW5nMiwgdGhlbWUpO1xuICAgIH0pO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0YWNrVXRpbHMuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IHBhcnNlR2FwLCBwYXJzZVBhZGRpbmcgfSBmcm9tICcuL1N0YWNrVXRpbHMnO1xuaW1wb3J0IHsgZ2V0R2xvYmFsQ2xhc3NOYW1lcyB9IGZyb20gJy4uLy4uL1N0eWxpbmcnO1xudmFyIG5hbWVNYXAgPSB7XG4gICAgc3RhcnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICBlbmQ6ICdmbGV4LWVuZCcsXG59O1xudmFyIEdsb2JhbENsYXNzTmFtZXMgPSB7XG4gICAgcm9vdDogJ21zLVN0YWNrJyxcbiAgICBpbm5lcjogJ21zLVN0YWNrLWlubmVyJyxcbn07XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIChwcm9wcywgdGhlbWUsIHRva2Vucykge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZztcbiAgICB2YXIgdmVydGljYWxGaWxsID0gcHJvcHMudmVydGljYWxGaWxsLCBob3Jpem9udGFsID0gcHJvcHMuaG9yaXpvbnRhbCwgcmV2ZXJzZWQgPSBwcm9wcy5yZXZlcnNlZCwgZ3JvdyA9IHByb3BzLmdyb3csIHdyYXAgPSBwcm9wcy53cmFwLCBob3Jpem9udGFsQWxpZ24gPSBwcm9wcy5ob3Jpem9udGFsQWxpZ24sIHZlcnRpY2FsQWxpZ24gPSBwcm9wcy52ZXJ0aWNhbEFsaWduLCBkaXNhYmxlU2hyaW5rID0gcHJvcHMuZGlzYWJsZVNocmluaywgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lO1xuICAgIHZhciBjbGFzc05hbWVzID0gZ2V0R2xvYmFsQ2xhc3NOYW1lcyhHbG9iYWxDbGFzc05hbWVzLCB0aGVtZSk7XG4gICAgLyogZXNsaW50LWRpc2FibGUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb24gKi9cbiAgICB2YXIgY2hpbGRyZW5HYXAgPSB0b2tlbnMgJiYgdG9rZW5zLmNoaWxkcmVuR2FwID8gdG9rZW5zLmNoaWxkcmVuR2FwIDogcHJvcHMuZ2FwO1xuICAgIHZhciBtYXhIZWlnaHQgPSB0b2tlbnMgJiYgdG9rZW5zLm1heEhlaWdodCA/IHRva2Vucy5tYXhIZWlnaHQgOiBwcm9wcy5tYXhIZWlnaHQ7XG4gICAgdmFyIG1heFdpZHRoID0gdG9rZW5zICYmIHRva2Vucy5tYXhXaWR0aCA/IHRva2Vucy5tYXhXaWR0aCA6IHByb3BzLm1heFdpZHRoO1xuICAgIHZhciBwYWRkaW5nID0gdG9rZW5zICYmIHRva2Vucy5wYWRkaW5nID8gdG9rZW5zLnBhZGRpbmcgOiBwcm9wcy5wYWRkaW5nO1xuICAgIC8qIGVzbGludC1lbmFibGUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb24gKi9cbiAgICB2YXIgX2ggPSBwYXJzZUdhcChjaGlsZHJlbkdhcCwgdGhlbWUpLCByb3dHYXAgPSBfaC5yb3dHYXAsIGNvbHVtbkdhcCA9IF9oLmNvbHVtbkdhcDtcbiAgICB2YXIgaG9yaXpvbnRhbE1hcmdpbiA9IFwiXCIgKyAtMC41ICogY29sdW1uR2FwLnZhbHVlICsgY29sdW1uR2FwLnVuaXQ7XG4gICAgdmFyIHZlcnRpY2FsTWFyZ2luID0gXCJcIiArIC0wLjUgKiByb3dHYXAudmFsdWUgKyByb3dHYXAudW5pdDtcbiAgICAvLyBzdHlsZXMgdG8gYmUgYXBwbGllZCB0byBhbGwgZGlyZWN0IGNoaWxkcmVuIHJlZ2FyZGxlc3Mgb2Ygd3JhcCBvciBkaXJlY3Rpb25cbiAgICB2YXIgY2hpbGRTdHlsZXMgPSB7XG4gICAgICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgICB9O1xuICAgIC8vIHNlbGVjdG9ycyB0byBiZSBhcHBsaWVkIHJlZ2FyZGxlc3Mgb2Ygd3JhcCBvciBkaXJlY3Rpb25cbiAgICB2YXIgY29tbW9uU2VsZWN0b3JzID0ge1xuICAgICAgICAvLyBmbGV4U2hyaW5rIHN0eWxlcyBhcmUgYXBwbGllZCBieSB0aGUgU3RhY2tJdGVtXG4gICAgICAgICc+ICo6bm90KC5tcy1TdGFja0l0ZW0pJzoge1xuICAgICAgICAgICAgZmxleFNocmluazogZGlzYWJsZVNocmluayA/IDAgOiAxLFxuICAgICAgICB9LFxuICAgIH07XG4gICAgaWYgKHdyYXApIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJvb3Q6IFtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWVzLnJvb3QsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgICAgICAgICAgICAgICAgICBtYXhXaWR0aDogbWF4V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIG1heEhlaWdodDogbWF4SGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ3Zpc2libGUnLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhvcml6b250YWxBbGlnbiAmJiAoX2EgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgX2FbaG9yaXpvbnRhbCA/ICdqdXN0aWZ5Q29udGVudCcgOiAnYWxpZ25JdGVtcyddID0gbmFtZU1hcFtob3Jpem9udGFsQWxpZ25dIHx8IGhvcml6b250YWxBbGlnbixcbiAgICAgICAgICAgICAgICAgICAgX2EpLFxuICAgICAgICAgICAgICAgIHZlcnRpY2FsQWxpZ24gJiYgKF9iID0ge30sXG4gICAgICAgICAgICAgICAgICAgIF9iW2hvcml6b250YWwgPyAnYWxpZ25JdGVtcycgOiAnanVzdGlmeUNvbnRlbnQnXSA9IG5hbWVNYXBbdmVydGljYWxBbGlnbl0gfHwgdmVydGljYWxBbGlnbixcbiAgICAgICAgICAgICAgICAgICAgX2IpLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5vdCBhbGxvd2VkIHRvIGJlIG92ZXJyaWRkZW4gYnkgY2xhc3NOYW1lXG4gICAgICAgICAgICAgICAgICAgIC8vIHNpbmNlIHRoaXMgaXMgbmVjZXNzYXJ5IGluIG9yZGVyIHRvIHByZXZlbnQgY29sbGFwc2luZyBtYXJnaW5zXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhvcml6b250YWwgJiYge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHZlcnRpY2FsRmlsbCA/ICcxMDAlJyA6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGlubmVyOiBbXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lcy5pbm5lcixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICAgICAgZmxleFdyYXA6ICd3cmFwJyxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogaG9yaXpvbnRhbE1hcmdpbixcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6IGhvcml6b250YWxNYXJnaW4sXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpblRvcDogdmVydGljYWxNYXJnaW4sXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogdmVydGljYWxNYXJnaW4sXG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93OiAndmlzaWJsZScsXG4gICAgICAgICAgICAgICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBwYXJzZVBhZGRpbmcocGFkZGluZywgdGhlbWUpLFxuICAgICAgICAgICAgICAgICAgICAvLyBhdm9pZCB1bm5lY2Vzc2FyeSBjYWxjKCkgY2FsbHMgaWYgaG9yaXpvbnRhbCBnYXAgaXMgMFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogY29sdW1uR2FwLnZhbHVlID09PSAwID8gJzEwMCUnIDogXCJjYWxjKDEwMCUgKyBcIiArIGNvbHVtbkdhcC52YWx1ZSArIGNvbHVtbkdhcC51bml0ICsgXCIpXCIsXG4gICAgICAgICAgICAgICAgICAgIG1heFdpZHRoOiAnMTAwdncnLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IF9fYXNzaWduKHsgJz4gKic6IF9fYXNzaWduKHsgbWFyZ2luOiBcIlwiICsgMC41ICogcm93R2FwLnZhbHVlICsgcm93R2FwLnVuaXQgKyBcIiBcIiArIDAuNSAqIGNvbHVtbkdhcC52YWx1ZSArIGNvbHVtbkdhcC51bml0IH0sIGNoaWxkU3R5bGVzKSB9LCBjb21tb25TZWxlY3RvcnMpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaG9yaXpvbnRhbEFsaWduICYmIChfYyA9IHt9LFxuICAgICAgICAgICAgICAgICAgICBfY1tob3Jpem9udGFsID8gJ2p1c3RpZnlDb250ZW50JyA6ICdhbGlnbkl0ZW1zJ10gPSBuYW1lTWFwW2hvcml6b250YWxBbGlnbl0gfHwgaG9yaXpvbnRhbEFsaWduLFxuICAgICAgICAgICAgICAgICAgICBfYyksXG4gICAgICAgICAgICAgICAgdmVydGljYWxBbGlnbiAmJiAoX2QgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgX2RbaG9yaXpvbnRhbCA/ICdhbGlnbkl0ZW1zJyA6ICdqdXN0aWZ5Q29udGVudCddID0gbmFtZU1hcFt2ZXJ0aWNhbEFsaWduXSB8fCB2ZXJ0aWNhbEFsaWduLFxuICAgICAgICAgICAgICAgICAgICBfZCksXG4gICAgICAgICAgICAgICAgaG9yaXpvbnRhbCAmJiB7XG4gICAgICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246IHJldmVyc2VkID8gJ3Jvdy1yZXZlcnNlJyA6ICdyb3cnLFxuICAgICAgICAgICAgICAgICAgICAvLyBhdm9pZCB1bm5lY2Vzc2FyeSBjYWxjKCkgY2FsbHMgaWYgdmVydGljYWwgZ2FwIGlzIDBcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiByb3dHYXAudmFsdWUgPT09IDAgPyAnMTAwJScgOiBcImNhbGMoMTAwJSArIFwiICsgcm93R2FwLnZhbHVlICsgcm93R2FwLnVuaXQgKyBcIilcIixcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnPiAqJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFdpZHRoOiBjb2x1bW5HYXAudmFsdWUgPT09IDAgPyAnMTAwJScgOiBcImNhbGMoMTAwJSAtIFwiICsgY29sdW1uR2FwLnZhbHVlICsgY29sdW1uR2FwLnVuaXQgKyBcIilcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAhaG9yaXpvbnRhbCAmJiB7XG4gICAgICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246IHJldmVyc2VkID8gJ2NvbHVtbi1yZXZlcnNlJyA6ICdjb2x1bW4nLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IFwiY2FsYygxMDAlICsgXCIgKyByb3dHYXAudmFsdWUgKyByb3dHYXAudW5pdCArIFwiKVwiLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICc+IConOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4SGVpZ2h0OiByb3dHYXAudmFsdWUgPT09IDAgPyAnMTAwJScgOiBcImNhbGMoMTAwJSAtIFwiICsgcm93R2FwLnZhbHVlICsgcm93R2FwLnVuaXQgKyBcIilcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJvb3Q6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMucm9vdCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjogaG9yaXpvbnRhbCA/IChyZXZlcnNlZCA/ICdyb3ctcmV2ZXJzZScgOiAncm93JykgOiByZXZlcnNlZCA/ICdjb2x1bW4tcmV2ZXJzZScgOiAnY29sdW1uJyxcbiAgICAgICAgICAgICAgICBmbGV4V3JhcDogJ25vd3JhcCcsXG4gICAgICAgICAgICAgICAgd2lkdGg6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHZlcnRpY2FsRmlsbCA/ICcxMDAlJyA6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICBtYXhXaWR0aDogbWF4V2lkdGgsXG4gICAgICAgICAgICAgICAgbWF4SGVpZ2h0OiBtYXhIZWlnaHQsXG4gICAgICAgICAgICAgICAgcGFkZGluZzogcGFyc2VQYWRkaW5nKHBhZGRpbmcsIHRoZW1lKSxcbiAgICAgICAgICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IF9fYXNzaWduKChfZSA9IHsgJz4gKic6IGNoaWxkU3R5bGVzIH0sIF9lW3JldmVyc2VkID8gJz4gKjpub3QoOmxhc3QtY2hpbGQpJyA6ICc+ICo6bm90KDpmaXJzdC1jaGlsZCknXSA9IFtcbiAgICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbCAmJiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiBcIlwiICsgY29sdW1uR2FwLnZhbHVlICsgY29sdW1uR2FwLnVuaXQsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICFob3Jpem9udGFsICYmIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpblRvcDogXCJcIiArIHJvd0dhcC52YWx1ZSArIHJvd0dhcC51bml0LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sIF9lKSwgY29tbW9uU2VsZWN0b3JzKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBncm93ICYmIHtcbiAgICAgICAgICAgICAgICBmbGV4R3JvdzogZ3JvdyA9PT0gdHJ1ZSA/IDEgOiBncm93LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhvcml6b250YWxBbGlnbiAmJiAoX2YgPSB7fSxcbiAgICAgICAgICAgICAgICBfZltob3Jpem9udGFsID8gJ2p1c3RpZnlDb250ZW50JyA6ICdhbGlnbkl0ZW1zJ10gPSBuYW1lTWFwW2hvcml6b250YWxBbGlnbl0gfHwgaG9yaXpvbnRhbEFsaWduLFxuICAgICAgICAgICAgICAgIF9mKSxcbiAgICAgICAgICAgIHZlcnRpY2FsQWxpZ24gJiYgKF9nID0ge30sXG4gICAgICAgICAgICAgICAgX2dbaG9yaXpvbnRhbCA/ICdhbGlnbkl0ZW1zJyA6ICdqdXN0aWZ5Q29udGVudCddID0gbmFtZU1hcFt2ZXJ0aWNhbEFsaWduXSB8fCB2ZXJ0aWNhbEFsaWduLFxuICAgICAgICAgICAgICAgIF9nKSxcbiAgICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgXSxcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0YWNrLnN0eWxlcy5qcy5tYXAiLCJpbXBvcnQgeyBnZXRHbG9iYWxDbGFzc05hbWVzIH0gZnJvbSAnLi4vLi4vLi4vU3R5bGluZyc7XG52YXIgR2xvYmFsQ2xhc3NOYW1lcyA9IHtcbiAgICByb290OiAnbXMtU3RhY2tJdGVtJyxcbn07XG52YXIgYWxpZ25NYXAgPSB7XG4gICAgc3RhcnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICBlbmQ6ICdmbGV4LWVuZCcsXG59O1xuZXhwb3J0IHZhciBTdGFja0l0ZW1TdHlsZXMgPSBmdW5jdGlvbiAocHJvcHMsIHRoZW1lLCB0b2tlbnMpIHtcbiAgICB2YXIgZ3JvdyA9IHByb3BzLmdyb3csIHNocmluayA9IHByb3BzLnNocmluaywgZGlzYWJsZVNocmluayA9IHByb3BzLmRpc2FibGVTaHJpbmssIGFsaWduID0gcHJvcHMuYWxpZ24sIHZlcnRpY2FsRmlsbCA9IHByb3BzLnZlcnRpY2FsRmlsbCwgb3JkZXIgPSBwcm9wcy5vcmRlciwgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lO1xuICAgIHZhciBjbGFzc05hbWVzID0gZ2V0R2xvYmFsQ2xhc3NOYW1lcyhHbG9iYWxDbGFzc05hbWVzLCB0aGVtZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcm9vdDogW1xuICAgICAgICAgICAgdGhlbWUuZm9udHMubWVkaXVtLFxuICAgICAgICAgICAgY2xhc3NOYW1lcy5yb290LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG1hcmdpbjogdG9rZW5zLm1hcmdpbixcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiB0b2tlbnMucGFkZGluZyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHZlcnRpY2FsRmlsbCA/ICcxMDAlJyA6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICB3aWR0aDogJ2F1dG8nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdyb3cgJiYgeyBmbGV4R3JvdzogZ3JvdyA9PT0gdHJ1ZSA/IDEgOiBncm93IH0sXG4gICAgICAgICAgICAoZGlzYWJsZVNocmluayB8fCAoIWdyb3cgJiYgIXNocmluaykpICYmIHtcbiAgICAgICAgICAgICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNocmluayAmJlxuICAgICAgICAgICAgICAgICFkaXNhYmxlU2hyaW5rICYmIHtcbiAgICAgICAgICAgICAgICBmbGV4U2hyaW5rOiAxLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFsaWduICYmIHtcbiAgICAgICAgICAgICAgICBhbGlnblNlbGY6IGFsaWduTWFwW2FsaWduXSB8fCBhbGlnbixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcmRlciAmJiB7XG4gICAgICAgICAgICAgICAgb3JkZXI6IG9yZGVyLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgXSxcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0YWNrSXRlbS5zdHlsZXMuanMubWFwIiwiLyoqIEBqc3ggd2l0aFNsb3RzICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB3aXRoU2xvdHMsIGNyZWF0ZUNvbXBvbmVudCwgZ2V0U2xvdHMgfSBmcm9tICcuLi8uLi8uLi9Gb3VuZGF0aW9uJztcbmltcG9ydCB7IFN0YWNrSXRlbVN0eWxlcyBhcyBzdHlsZXMgfSBmcm9tICcuL1N0YWNrSXRlbS5zdHlsZXMnO1xudmFyIFN0YWNrSXRlbVZpZXcgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbjtcbiAgICBpZiAoUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pIDwgMSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIFNsb3RzID0gZ2V0U2xvdHMocHJvcHMsIHtcbiAgICAgICAgcm9vdDogJ2RpdicsXG4gICAgfSk7XG4gICAgcmV0dXJuIHdpdGhTbG90cyhTbG90cy5yb290LCBudWxsLCBjaGlsZHJlbik7XG59O1xuZXhwb3J0IHZhciBTdGFja0l0ZW0gPSBjcmVhdGVDb21wb25lbnQoU3RhY2tJdGVtVmlldywge1xuICAgIGRpc3BsYXlOYW1lOiAnU3RhY2tJdGVtJyxcbiAgICBzdHlsZXM6IHN0eWxlcyxcbn0pO1xuZXhwb3J0IGRlZmF1bHQgU3RhY2tJdGVtO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3RhY2tJdGVtLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX3Jlc3QgfSBmcm9tIFwidHNsaWJcIjtcbi8qKiBAanN4IHdpdGhTbG90cyAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgd2l0aFNsb3RzLCBjcmVhdGVDb21wb25lbnQsIGdldFNsb3RzIH0gZnJvbSAnLi4vLi4vRm91bmRhdGlvbic7XG5pbXBvcnQgeyBnZXROYXRpdmVQcm9wcywgaHRtbEVsZW1lbnRQcm9wZXJ0aWVzLCB3YXJuRGVwcmVjYXRpb25zIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IHN0eWxlcyB9IGZyb20gJy4vU3RhY2suc3R5bGVzJztcbmltcG9ydCB7IFN0YWNrSXRlbSB9IGZyb20gJy4vU3RhY2tJdGVtL1N0YWNrSXRlbSc7XG52YXIgU3RhY2tWaWV3ID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIF9hID0gcHJvcHMuYXMsIFJvb3RUeXBlID0gX2EgPT09IHZvaWQgMCA/ICdkaXYnIDogX2EsIGRpc2FibGVTaHJpbmsgPSBwcm9wcy5kaXNhYmxlU2hyaW5rLCB3cmFwID0gcHJvcHMud3JhcCwgcmVzdCA9IF9fcmVzdChwcm9wcywgW1wiYXNcIiwgXCJkaXNhYmxlU2hyaW5rXCIsIFwid3JhcFwiXSk7XG4gICAgd2FybkRlcHJlY2F0aW9ucygnU3RhY2snLCBwcm9wcywge1xuICAgICAgICBnYXA6ICd0b2tlbnMuY2hpbGRyZW5HYXAnLFxuICAgICAgICBtYXhIZWlnaHQ6ICd0b2tlbnMubWF4SGVpZ2h0JyxcbiAgICAgICAgbWF4V2lkdGg6ICd0b2tlbnMubWF4V2lkdGgnLFxuICAgICAgICBwYWRkaW5nOiAndG9rZW5zLnBhZGRpbmcnLFxuICAgIH0pO1xuICAgIHZhciBzdGFja0NoaWxkcmVuID0gUmVhY3QuQ2hpbGRyZW4ubWFwKHByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgICAgIGlmICghY2hpbGQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfaXNTdGFja0l0ZW0oY2hpbGQpKSB7XG4gICAgICAgICAgICB2YXIgZGVmYXVsdEl0ZW1Qcm9wcyA9IHtcbiAgICAgICAgICAgICAgICBzaHJpbms6ICFkaXNhYmxlU2hyaW5rLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBkZWZhdWx0SXRlbVByb3BzKSwgY2hpbGQucHJvcHMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgfSk7XG4gICAgdmFyIG5hdGl2ZVByb3BzID0gZ2V0TmF0aXZlUHJvcHMocmVzdCwgaHRtbEVsZW1lbnRQcm9wZXJ0aWVzKTtcbiAgICB2YXIgU2xvdHMgPSBnZXRTbG90cyhwcm9wcywge1xuICAgICAgICByb290OiBSb290VHlwZSxcbiAgICAgICAgaW5uZXI6ICdkaXYnLFxuICAgIH0pO1xuICAgIGlmICh3cmFwKSB7XG4gICAgICAgIHJldHVybiAod2l0aFNsb3RzKFNsb3RzLnJvb3QsIF9fYXNzaWduKHt9LCBuYXRpdmVQcm9wcyksXG4gICAgICAgICAgICB3aXRoU2xvdHMoU2xvdHMuaW5uZXIsIG51bGwsIHN0YWNrQ2hpbGRyZW4pKSk7XG4gICAgfVxuICAgIHJldHVybiB3aXRoU2xvdHMoU2xvdHMucm9vdCwgX19hc3NpZ24oe30sIG5hdGl2ZVByb3BzKSwgc3RhY2tDaGlsZHJlbik7XG59O1xuZnVuY3Rpb24gX2lzU3RhY2tJdGVtKGl0ZW0pIHtcbiAgICAvLyBJbiB0aGVvcnksIHdlIHNob3VsZCBiZSBhYmxlIHRvIGp1c3QgY2hlY2sgaXRlbS50eXBlID09PSBTdGFja0l0ZW0uXG4gICAgLy8gSG93ZXZlciwgdW5kZXIgY2VydGFpbiB1bmNsZWFyIGNpcmN1bXN0YW5jZXMgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L2ZsdWVudHVpL2lzc3Vlcy8xMDc4NSksXG4gICAgLy8gdGhlIG9iamVjdCBpZGVudGl0eSBpcyBkaWZmZXJlbnQgZGVzcGl0ZSB0aGUgZnVuY3Rpb24gaW1wbGVtZW50YXRpb24gYmVpbmcgdGhlIHNhbWUuXG4gICAgcmV0dXJuICghIWl0ZW0gJiZcbiAgICAgICAgdHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnICYmXG4gICAgICAgICEhaXRlbS50eXBlICYmXG4gICAgICAgIC8vIFN0YWNrSXRlbSBpcyBnZW5lcmF0ZWQgYnkgY3JlYXRlQ29tcG9uZW50LCBzbyB3ZSBuZWVkIHRvIGNoZWNrIGl0cyBkaXNwbGF5TmFtZSBpbnN0ZWFkIG9mIG5hbWVcbiAgICAgICAgaXRlbS50eXBlLmRpc3BsYXlOYW1lID09PSBTdGFja0l0ZW0uZGlzcGxheU5hbWUpO1xufVxudmFyIFN0YWNrU3RhdGljcyA9IHtcbiAgICBJdGVtOiBTdGFja0l0ZW0sXG59O1xuZXhwb3J0IHZhciBTdGFjayA9IGNyZWF0ZUNvbXBvbmVudChTdGFja1ZpZXcsIHtcbiAgICBkaXNwbGF5TmFtZTogJ1N0YWNrJyxcbiAgICBzdHlsZXM6IHN0eWxlcyxcbiAgICBzdGF0aWNzOiBTdGFja1N0YXRpY3MsXG59KTtcbmV4cG9ydCBkZWZhdWx0IFN0YWNrO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3RhY2suanMubWFwIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ3VzdG9taXphdGlvbnMgfSBmcm9tICcuL0N1c3RvbWl6YXRpb25zJztcbmltcG9ydCB7IEN1c3RvbWl6ZXJDb250ZXh0IH0gZnJvbSAnLi9DdXN0b21pemVyQ29udGV4dCc7XG4vKipcbiAqIEhvb2sgdG8gZ2V0IEN1c3RvbWl6YXRpb25zIHNldHRpbmdzIGZyb20gQ3VzdG9taXphdGlvbnMgc2luZ2xldG9uIG9yIEN1c3RvbWl6ZXJDb250ZXh0LlxuICogSXQgd2lsbCB0cmlnZ2VyIGNvbXBvbmVudCBzdGF0ZSB1cGRhdGUgb24gc2V0dGluZ3MgY2hhbmdlIG9ic2VydmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQ3VzdG9taXphdGlvblNldHRpbmdzKHByb3BlcnRpZXMsIHNjb3BlTmFtZSkge1xuICAgIHZhciBmb3JjZVVwZGF0ZSA9IHVzZUZvcmNlVXBkYXRlKCk7XG4gICAgdmFyIGN1c3RvbWl6YXRpb25zID0gUmVhY3QudXNlQ29udGV4dChDdXN0b21pemVyQ29udGV4dCkuY3VzdG9taXphdGlvbnM7XG4gICAgdmFyIGluQ3VzdG9taXplckNvbnRleHQgPSBjdXN0b21pemF0aW9ucy5pbkN1c3RvbWl6ZXJDb250ZXh0O1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghaW5DdXN0b21pemVyQ29udGV4dCkge1xuICAgICAgICAgICAgQ3VzdG9taXphdGlvbnMub2JzZXJ2ZShmb3JjZVVwZGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghaW5DdXN0b21pemVyQ29udGV4dCkge1xuICAgICAgICAgICAgICAgIEN1c3RvbWl6YXRpb25zLnVub2JzZXJ2ZShmb3JjZVVwZGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHMgLS0gZXhjbHVkZSBmb3JjZVVwZGF0ZVxuICAgIH0sIFtpbkN1c3RvbWl6ZXJDb250ZXh0XSk7XG4gICAgcmV0dXJuIEN1c3RvbWl6YXRpb25zLmdldFNldHRpbmdzKHByb3BlcnRpZXMsIHNjb3BlTmFtZSwgY3VzdG9taXphdGlvbnMpO1xufVxuZnVuY3Rpb24gdXNlRm9yY2VVcGRhdGUoKSB7XG4gICAgdmFyIF9hID0gUmVhY3QudXNlU3RhdGUoMCksIHNldFZhbHVlID0gX2FbMV07XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNldFZhbHVlKGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gKyt2YWx1ZTsgfSk7IH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VDdXN0b21pemF0aW9uU2V0dGluZ3MuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fcmVzdCB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY29uY2F0U3R5bGVTZXRzV2l0aFByb3BzIH0gZnJvbSAnQHVpZmFicmljL21lcmdlLXN0eWxlcyc7XG5pbXBvcnQgeyB1c2VDdXN0b21pemF0aW9uU2V0dGluZ3MgfSBmcm9tICcuL2N1c3RvbWl6YXRpb25zL3VzZUN1c3RvbWl6YXRpb25TZXR0aW5ncyc7XG52YXIgRGVmYXVsdEZpZWxkcyA9IFsndGhlbWUnLCAnc3R5bGVzJ107XG5leHBvcnQgZnVuY3Rpb24gc3R5bGVkKENvbXBvbmVudCwgYmFzZVN0eWxlcywgZ2V0UHJvcHMsIGN1c3RvbWl6YWJsZSwgcHVyZSkge1xuICAgIGN1c3RvbWl6YWJsZSA9IGN1c3RvbWl6YWJsZSB8fCB7IHNjb3BlOiAnJywgZmllbGRzOiB1bmRlZmluZWQgfTtcbiAgICB2YXIgc2NvcGUgPSBjdXN0b21pemFibGUuc2NvcGUsIF9hID0gY3VzdG9taXphYmxlLmZpZWxkcywgZmllbGRzID0gX2EgPT09IHZvaWQgMCA/IERlZmF1bHRGaWVsZHMgOiBfYTtcbiAgICB2YXIgV3JhcHBlZCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCBmb3J3YXJkZWRSZWYpIHtcbiAgICAgICAgdmFyIHN0eWxlcyA9IFJlYWN0LnVzZVJlZigpO1xuICAgICAgICB2YXIgc2V0dGluZ3MgPSB1c2VDdXN0b21pemF0aW9uU2V0dGluZ3MoZmllbGRzLCBzY29wZSk7XG4gICAgICAgIHZhciBjdXN0b21pemVkU3R5bGVzID0gc2V0dGluZ3Muc3R5bGVzLCBkaXIgPSBzZXR0aW5ncy5kaXIsIHJlc3QgPSBfX3Jlc3Qoc2V0dGluZ3MsIFtcInN0eWxlc1wiLCBcImRpclwiXSk7XG4gICAgICAgIHZhciBhZGRpdGlvbmFsUHJvcHMgPSBnZXRQcm9wcyA/IGdldFByb3BzKHByb3BzKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgdmFyIGNhY2hlID0gKHN0eWxlcy5jdXJyZW50ICYmIHN0eWxlcy5jdXJyZW50Ll9fY2FjaGVkSW5wdXRzX18pIHx8IFtdO1xuICAgICAgICBpZiAoIXN0eWxlcy5jdXJyZW50IHx8IGN1c3RvbWl6ZWRTdHlsZXMgIT09IGNhY2hlWzFdIHx8IHByb3BzLnN0eWxlcyAhPT0gY2FjaGVbMl0pIHtcbiAgICAgICAgICAgIC8vIFVzaW5nIHN0eWxlZCBjb21wb25lbnRzIGFzIHRoZSBDb21wb25lbnQgYXJnIHdpbGwgcmVzdWx0IGluIG5lc3RlZCBzdHlsaW5nIGFycmF5cy5cbiAgICAgICAgICAgIHZhciBjb25jYXRlbmF0ZWRTdHlsZXMgPSBmdW5jdGlvbiAoc3R5bGVQcm9wcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25jYXRTdHlsZVNldHNXaXRoUHJvcHMoc3R5bGVQcm9wcywgYmFzZVN0eWxlcywgY3VzdG9taXplZFN0eWxlcywgcHJvcHMuc3R5bGVzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBUaGUgX19jYWNoZWRJbnB1dHNfXyBhcnJheSBpcyBhdHRhY2hlZCB0byB0aGUgZnVuY3Rpb24gYW5kIGNvbnN1bWVkIGJ5IHRoZVxuICAgICAgICAgICAgLy8gY2xhc3NOYW1lc0Z1bmN0aW9uIGFzIGEgbGlzdCBvZiBrZXlzIHRvIGluY2x1ZGUgZm9yIG1lbW9pemluZyBjbGFzc25hbWVzLlxuICAgICAgICAgICAgY29uY2F0ZW5hdGVkU3R5bGVzLl9fY2FjaGVkSW5wdXRzX18gPSBbXG4gICAgICAgICAgICAgICAgYmFzZVN0eWxlcyxcbiAgICAgICAgICAgICAgICBjdXN0b21pemVkU3R5bGVzLFxuICAgICAgICAgICAgICAgIHByb3BzLnN0eWxlcyxcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBjb25jYXRlbmF0ZWRTdHlsZXMuX19ub1N0eWxlT3ZlcnJpZGVfXyA9XG4gICAgICAgICAgICAgICAgIWN1c3RvbWl6ZWRTdHlsZXMgJiYgIXByb3BzLnN0eWxlcztcbiAgICAgICAgICAgIHN0eWxlcy5jdXJyZW50ID0gY29uY2F0ZW5hdGVkU3R5bGVzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX19hc3NpZ24oeyByZWY6IGZvcndhcmRlZFJlZiB9LCByZXN0LCBhZGRpdGlvbmFsUHJvcHMsIHByb3BzLCB7IHN0eWxlczogc3R5bGVzLmN1cnJlbnQgfSkpO1xuICAgIH0pO1xuICAgIC8vIEZ1bmN0aW9uLnByb3RvdHlwZS5uYW1lIGlzIGFuIEVTNiBmZWF0dXJlLCBzbyB0aGUgY2FzdCB0byBhbnkgaXMgcmVxdWlyZWQgdW50aWwgd2UncmVcbiAgICAvLyBhYmxlIHRvIGRyb3AgSUUgMTEgc3VwcG9ydCBhbmQgY29tcGlsZSB3aXRoIEVTNiBsaWJzXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBXcmFwcGVkLmRpc3BsYXlOYW1lID0gXCJTdHlsZWRcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpO1xuICAgIC8vIFRoaXMgcHJlc2VydmVzIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICAgIHZhciBwdXJlQ29tcG9uZW50ID0gcHVyZSA/IFJlYWN0Lm1lbW8oV3JhcHBlZCkgOiBXcmFwcGVkO1xuICAgIC8vIENoZWNrIGlmIHRoZSB3cmFwcGVyIGhhcyBhIGRpc3BsYXlOYW1lIGFmdGVyIGl0IGhhcyBiZWVuIG1lbW9pemVkLiBUaGVuIGFzc2lnbiBpdCB0byB0aGUgcHVyZSBjb21wb25lbnQuXG4gICAgaWYgKFdyYXBwZWQuZGlzcGxheU5hbWUpIHtcbiAgICAgICAgcHVyZUNvbXBvbmVudC5kaXNwbGF5TmFtZSA9IFdyYXBwZWQuZGlzcGxheU5hbWU7XG4gICAgfVxuICAgIHJldHVybiBwdXJlQ29tcG9uZW50O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGVkLmpzLm1hcCIsImltcG9ydCB7IG1lcmdlQ3NzU2V0cywgU3R5bGVzaGVldCwgfSBmcm9tICdAdWlmYWJyaWMvbWVyZ2Utc3R5bGVzJztcbmltcG9ydCB7IGdldFJUTCB9IGZyb20gJy4vcnRsJztcbmltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJy4vZG9tJztcbnZhciBNQVhfQ0FDSEVfQ09VTlQgPSA1MDtcbnZhciBERUZBVUxUX1NQRUNJRklDSVRZX01VTFRJUExJRVIgPSA1O1xudmFyIF9tZW1vaXplZENsYXNzTmFtZXMgPSAwO1xudmFyIHN0eWxlc2hlZXQgPSBTdHlsZXNoZWV0LmdldEluc3RhbmNlKCk7XG5pZiAoc3R5bGVzaGVldCAmJiBzdHlsZXNoZWV0Lm9uUmVzZXQpIHtcbiAgICBzdHlsZXNoZWV0Lm9uUmVzZXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gX21lbW9pemVkQ2xhc3NOYW1lcysrOyB9KTtcbn1cbi8vIE5vdGUgdGhhdCBiZWNhdXNlIG9mIHRoZSBjYWNoaW5nIG5hdHVyZSB3aXRoaW4gdGhlIGNsYXNzTmFtZXMgbWVtb2l6YXRpb24sXG4vLyBJJ3ZlIGRpc2FibGVkIHRoaXMgcnVsZSB0byBzaW1wbHkgYmUgYWJsZSB0byB3b3JrIHdpdGggYW55IHR5cGVzLlxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuLy8gVGhpcyByZXByZXNlbnRzIGEgcHJvcCB3ZSBhdHRhY2ggdG8gZWFjaCBNYXAgdG8gaW5kaWNhdGUgdGhlIGNhY2hlZCByZXR1cm4gdmFsdWVcbi8vIGFzc29jaWF0ZWQgd2l0aCB0aGUgZ3JhcGggbm9kZS5cbnZhciByZXRWYWwgPSAnX19yZXR2YWxfXyc7XG4vKipcbiAqIENyZWF0ZXMgYSBnZXRDbGFzc05hbWVzIGZ1bmN0aW9uIHdoaWNoIGNhbGxzIGdldFN0eWxlcyBnaXZlbiB0aGUgcHJvcHMsIGFuZCBpbmplY3RzIHRoZW1cbiAqIGludG8gbWVyZ2VTdHlsZVNldHMuXG4gKlxuICogTm90ZSB0aGF0IHRoZSBwcm9wcyB5b3UgcGFzcyBpbiBvbiBldmVyeSByZW5kZXIgc2hvdWxkIGJlIGluIHRoZSBzYW1lIG9yZGVyIGFuZFxuICogaW1tdXRhYmxlIChudW1iZXJzLCBzdHJpbmdzLCBhbmQgYm9vbGVhbnMpLiBUaGlzIHdpbGwgYWxsb3cgdGhlIHJlc3VsdHMgdG8gYmUgbWVtb2l6ZWQuIFZpb2xhdGluZ1xuICogdGhlc2Ugd2lsbCBjYXVzZSBleHRyYSByZWNhbGNzIHRvIG9jY3VyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xhc3NOYW1lc0Z1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAvLyBXZSBidWlsZCBhIHRyaWUgd2hlcmUgZWFjaCBub2RlIGlzIGEgTWFwLiBUaGUgbWFwIGVudHJ5IGtleSByZXByZXNlbnRzIGFuIGFyZ3VtZW50XG4gICAgLy8gdmFsdWUsIGFuZCB0aGUgZW50cnkgdmFsdWUgaXMgYW5vdGhlciBub2RlIChNYXApLiBFYWNoIG5vZGUgaGFzIGEgYF9fcmV0dmFsX19gXG4gICAgLy8gcHJvcGVydHkgd2hpY2ggaXMgdXNlZCB0byBob2xkIHRoZSBjYWNoZWQgcmVzcG9uc2UuXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAvLyBUbyBkZXJpdmUgdGhlIHJlc3BvbnNlLCB3ZSBjYW4gc2ltcGx5IGVuc3VyZSB0aGUgYXJndW1lbnRzIGFyZSBhZGRlZCBvciBhbHJlYWR5XG4gICAgLy8gZXhpc3QgaW4gdGhlIHRyaWUuIEF0IHRoZSBsYXN0IG5vZGUsIGlmIHRoZXJlIGlzIGEgYF9fcmV0dmFsX19gIHdlIHJldHVybiB0aGF0LiBPdGhlcndpc2VcbiAgICAvLyB3ZSBjYWxsIHRoZSBgZ2V0U3R5bGVzYCBhcGkgdG8gZXZhbHVhdGUsIGNhY2hlIG9uIHRoZSBwcm9wZXJ0eSwgYW5kIHJldHVybiB0aGF0LlxuICAgIHZhciBtYXAgPSBuZXcgTWFwKCk7XG4gICAgdmFyIHN0eWxlQ2FsY0NvdW50ID0gMDtcbiAgICB2YXIgZ2V0Q2xhc3NOYW1lc0NvdW50ID0gMDtcbiAgICB2YXIgY3VycmVudE1lbW9pemVkQ2xhc3NOYW1lcyA9IF9tZW1vaXplZENsYXNzTmFtZXM7XG4gICAgdmFyIGdldENsYXNzTmFtZXMgPSBmdW5jdGlvbiAoc3R5bGVGdW5jdGlvbk9yT2JqZWN0LCBzdHlsZVByb3BzKSB7XG4gICAgICAgIGlmIChzdHlsZVByb3BzID09PSB2b2lkIDApIHsgc3R5bGVQcm9wcyA9IHt9OyB9XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIC8vIElmIHVzZVN0YXRpY1N0eWxlcyBpcyB0cnVlLCBzdHlsZUZ1bmN0aW9uT3JPYmplY3QgcmV0dXJucyBzbG90IHRvIGNsYXNzbmFtZSBtYXBwaW5ncy5cbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgYWxzbyBubyBzdHlsZSBvdmVycmlkZXMsIHdlIGNhbiBza2lwIG1lcmdlIHN0eWxlcyBjb21wbGV0ZWx5IGFuZFxuICAgICAgICAvLyBzaW1wbHkgcmV0dXJuIHRoZSByZXN1bHQgZnJvbSB0aGUgc3R5bGUgZnVuY2lvbi5cbiAgICAgICAgaWYgKG9wdGlvbnMudXNlU3RhdGljU3R5bGVzICYmXG4gICAgICAgICAgICB0eXBlb2Ygc3R5bGVGdW5jdGlvbk9yT2JqZWN0ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICBzdHlsZUZ1bmN0aW9uT3JPYmplY3QuX19ub1N0eWxlT3ZlcnJpZGVfXykge1xuICAgICAgICAgICAgcmV0dXJuIHN0eWxlRnVuY3Rpb25Pck9iamVjdChzdHlsZVByb3BzKTtcbiAgICAgICAgfVxuICAgICAgICBnZXRDbGFzc05hbWVzQ291bnQrKztcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBtYXA7XG4gICAgICAgIHZhciB0aGVtZSA9IHN0eWxlUHJvcHMudGhlbWU7XG4gICAgICAgIHZhciBydGwgPSB0aGVtZSAmJiB0aGVtZS5ydGwgIT09IHVuZGVmaW5lZCA/IHRoZW1lLnJ0bCA6IGdldFJUTCgpO1xuICAgICAgICB2YXIgZGlzYWJsZUNhY2hpbmcgPSBvcHRpb25zLmRpc2FibGVDYWNoaW5nO1xuICAgICAgICAvLyBPbiByZXNldCBvZiBvdXIgc3R5bGVzaGVldCwgcmVzZXQgbWVtb2l6ZWQgY2FjaGUuXG4gICAgICAgIGlmIChjdXJyZW50TWVtb2l6ZWRDbGFzc05hbWVzICE9PSBfbWVtb2l6ZWRDbGFzc05hbWVzKSB7XG4gICAgICAgICAgICBjdXJyZW50TWVtb2l6ZWRDbGFzc05hbWVzID0gX21lbW9pemVkQ2xhc3NOYW1lcztcbiAgICAgICAgICAgIG1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIHN0eWxlQ2FsY0NvdW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdGlvbnMuZGlzYWJsZUNhY2hpbmcpIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBfdHJhdmVyc2VNYXAobWFwLCBzdHlsZUZ1bmN0aW9uT3JPYmplY3QpO1xuICAgICAgICAgICAgY3VycmVudCA9IF90cmF2ZXJzZU1hcChjdXJyZW50LCBzdHlsZVByb3BzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlzYWJsZUNhY2hpbmcgfHwgIWN1cnJlbnRbcmV0VmFsXSkge1xuICAgICAgICAgICAgaWYgKHN0eWxlRnVuY3Rpb25Pck9iamVjdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFtyZXRWYWxdID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50W3JldFZhbF0gPSBtZXJnZUNzc1NldHMoW1xuICAgICAgICAgICAgICAgICAgICAodHlwZW9mIHN0eWxlRnVuY3Rpb25Pck9iamVjdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBzdHlsZUZ1bmN0aW9uT3JPYmplY3Qoc3R5bGVQcm9wcylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogc3R5bGVGdW5jdGlvbk9yT2JqZWN0KSxcbiAgICAgICAgICAgICAgICBdLCB7IHJ0bDogISFydGwsIHNwZWNpZmljaXR5TXVsdGlwbGllcjogb3B0aW9ucy51c2VTdGF0aWNTdHlsZXMgPyBERUZBVUxUX1NQRUNJRklDSVRZX01VTFRJUExJRVIgOiB1bmRlZmluZWQgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWRpc2FibGVDYWNoaW5nKSB7XG4gICAgICAgICAgICAgICAgc3R5bGVDYWxjQ291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3R5bGVDYWxjQ291bnQgPiAob3B0aW9ucy5jYWNoZVNpemUgfHwgTUFYX0NBQ0hFX0NPVU5UKSkge1xuICAgICAgICAgICAgdmFyIHdpbiA9IGdldFdpbmRvdygpO1xuICAgICAgICAgICAgaWYgKChfYiA9IChfYSA9IHdpbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLkZhYnJpY0NvbmZpZykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmVuYWJsZUNsYXNzTmFtZUNhY2hlRnVsbFdhcm5pbmcpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlN0eWxlcyBhcmUgYmVpbmcgcmVjYWxjdWxhdGVkIHRvbyBmcmVxdWVudGx5LiBDYWNoZSBtaXNzIHJhdGUgaXMgXCIgKyBzdHlsZUNhbGNDb3VudCArIFwiL1wiICsgZ2V0Q2xhc3NOYW1lc0NvdW50ICsgXCIuXCIpO1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWFwLmNsZWFyKCk7XG4gICAgICAgICAgICBzdHlsZUNhbGNDb3VudCA9IDA7XG4gICAgICAgICAgICAvLyBNdXRhdGUgdGhlIG9wdGlvbnMgcGFzc2VkIGluLCB0aGF0J3MgYWxsIHdlIGNhbiBkby5cbiAgICAgICAgICAgIG9wdGlvbnMuZGlzYWJsZUNhY2hpbmcgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIE5vdGU6IHRoZSByZXRWYWwgaXMgYW4gYXR0YWNoZWQgcHJvcGVydHkgb24gdGhlIE1hcDsgbm90IGEga2V5IGluIHRoZSBNYXAuIFdlIHVzZSB0aGlzIGF0dGFjaGVkIHByb3BlcnR5IHRvXG4gICAgICAgIC8vIGNhY2hlIHRoZSByZXR1cm4gdmFsdWUgZm9yIHRoaXMgYnJhbmNoIG9mIHRoZSBncmFwaC5cbiAgICAgICAgcmV0dXJuIGN1cnJlbnRbcmV0VmFsXTtcbiAgICB9O1xuICAgIHJldHVybiBnZXRDbGFzc05hbWVzO1xufVxuZnVuY3Rpb24gX3RyYXZlcnNlRWRnZShjdXJyZW50LCB2YWx1ZSkge1xuICAgIHZhbHVlID0gX25vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcbiAgICBpZiAoIWN1cnJlbnQuaGFzKHZhbHVlKSkge1xuICAgICAgICBjdXJyZW50LnNldCh2YWx1ZSwgbmV3IE1hcCgpKTtcbiAgICB9XG4gICAgcmV0dXJuIGN1cnJlbnQuZ2V0KHZhbHVlKTtcbn1cbmZ1bmN0aW9uIF90cmF2ZXJzZU1hcChjdXJyZW50LCBpbnB1dHMpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgY2FjaGVkSW5wdXRzRnJvbVN0eWxlZCA9IGlucHV0cy5fX2NhY2hlZElucHV0c19fO1xuICAgICAgICBpZiAoY2FjaGVkSW5wdXRzRnJvbVN0eWxlZCkge1xuICAgICAgICAgICAgLy8gVGhlIHN0eWxlZCBoZWxwZXIgd2lsbCBnZW5lcmF0ZSB0aGUgc3R5bGVzIGZ1bmN0aW9uIGFuZCB3aWxsIGF0dGFjaCB0aGUgY2FjaGVkXG4gICAgICAgICAgICAvLyBpbnB1dHMgKGNvbnNpc3Rpbmcgb2YgdGhlIGRlZmF1bHQgc3R5bGVzLCBjdXN0b216aWVkIHN0eWxlcywgYW5kIHVzZXIgcHJvdmlkZWQgc3R5bGVzLilcbiAgICAgICAgICAgIC8vIFRoZXNlIHNob3VsZCBiZSB1c2VkIGFzIGNhY2hlIGtleXMgZm9yIGRlcml2aW5nIHRoZSBtZW1vaXplZCB2YWx1ZS5cbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBpbnB1dHMuX19jYWNoZWRJbnB1dHNfXzsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IF90cmF2ZXJzZUVkZ2UoY3VycmVudCwgaW5wdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY3VycmVudCA9IF90cmF2ZXJzZUVkZ2UoY3VycmVudCwgaW5wdXRzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgaW5wdXRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBpbnB1dHMpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dHMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IF90cmF2ZXJzZUVkZ2UoY3VycmVudCwgaW5wdXRzW3Byb3BOYW1lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG59XG5mdW5jdGlvbiBfbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICAgICAgcmV0dXJuICdfX3VuZGVmaW5lZF9fJztcbiAgICAgICAgY2FzZSBudWxsOlxuICAgICAgICAgICAgcmV0dXJuICdfX251bGxfXyc7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xhc3NOYW1lc0Z1bmN0aW9uLmpzLm1hcCIsIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbi8qKlxuICogUmV0dXJucyBhIHNpbmdsZSBmdW5jdGlvbiB3aGljaCB3aWxsIGNhbGwgZWFjaCBvZiB0aGUgZ2l2ZW4gZnVuY3Rpb25zIGluIHRoZSBjb250ZXh0IG9mIHRoZVxuICogcGFyZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kRnVuY3Rpb24ocGFyZW50KSB7XG4gICAgdmFyIGZ1bmN0aW9ucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGZ1bmN0aW9uc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgaWYgKGZ1bmN0aW9ucy5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbnNbMF07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGYgJiYgZi5hcHBseShwYXJlbnQsIGFyZ3MpOyB9KTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwZW5kRnVuY3Rpb24uanMubWFwIiwiaW1wb3J0IHsgZXh0ZW5kQ29tcG9uZW50IH0gZnJvbSAnLi9leHRlbmRDb21wb25lbnQnO1xuLyoqXG4gKiBIZWxwZXIgdG8gbWFuYWdlIGNvbXBvbmVudFJlZiByZXNvbHV0aW9uLiBJbnRlcm5hbGx5IGFwcGVuZHMgbG9naWMgdG9cbiAqIGxpZmV0aW1lIG1ldGhvZHMgdG8gcmVzb2x2ZSBjb21wb25lbnRSZWYgdG8gdGhlIHBhc3NlZCBpbiBvYmplY3QuXG4gKlxuICogVXNhZ2U6IGNhbGwgaW5pdGlhbGl6ZUNvbXBvbmVudFJlZih0aGlzKSBpbiB0aGUgY29uc3RydWN0b3IsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplQ29tcG9uZW50UmVmKG9iaikge1xuICAgIGV4dGVuZENvbXBvbmVudChvYmosIHtcbiAgICAgICAgY29tcG9uZW50RGlkTW91bnQ6IF9vbk1vdW50LFxuICAgICAgICBjb21wb25lbnREaWRVcGRhdGU6IF9vblVwZGF0ZSxcbiAgICAgICAgY29tcG9uZW50V2lsbFVubW91bnQ6IF9vblVubW91bnQsXG4gICAgfSk7XG59XG5mdW5jdGlvbiBfb25Nb3VudCgpIHtcbiAgICBfc2V0Q29tcG9uZW50UmVmKHRoaXMucHJvcHMuY29tcG9uZW50UmVmLCB0aGlzKTtcbn1cbmZ1bmN0aW9uIF9vblVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAocHJldlByb3BzLmNvbXBvbmVudFJlZiAhPT0gdGhpcy5wcm9wcy5jb21wb25lbnRSZWYpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgX3NldENvbXBvbmVudFJlZihwcmV2UHJvcHMuY29tcG9uZW50UmVmLCBudWxsKTtcbiAgICAgICAgX3NldENvbXBvbmVudFJlZih0aGlzLnByb3BzLmNvbXBvbmVudFJlZiwgdGhpcyk7XG4gICAgfVxufVxuZnVuY3Rpb24gX29uVW5tb3VudCgpIHtcbiAgICBfc2V0Q29tcG9uZW50UmVmKHRoaXMucHJvcHMuY29tcG9uZW50UmVmLCBudWxsKTtcbn1cbmZ1bmN0aW9uIF9zZXRDb21wb25lbnRSZWYoY29tcG9uZW50UmVmLCB2YWx1ZSkge1xuICAgIGlmIChjb21wb25lbnRSZWYpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRSZWYgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBjb21wb25lbnRSZWYuY3VycmVudCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBjb21wb25lbnRSZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudFJlZih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbml0aWFsaXplQ29tcG9uZW50UmVmLmpzLm1hcCIsImltcG9ydCB7IGFwcGVuZEZ1bmN0aW9uIH0gZnJvbSAnLi9hcHBlbmRGdW5jdGlvbic7XG4vKipcbiAqIEV4dGVuZHMgYSBjb21wb25lbnQncyBsaWZldGltZSBtZXRob2RzIGJ5IGFwcGVuZGluZyBuZXcgZnVuY3Rpb25zIHRvIHRoZSBleGlzdGluZyBsaWZldGltZSBmdW5jdGlvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmRDb21wb25lbnQocGFyZW50LCBtZXRob2RzKSB7XG4gICAgZm9yICh2YXIgbmFtZV8xIGluIG1ldGhvZHMpIHtcbiAgICAgICAgaWYgKG1ldGhvZHMuaGFzT3duUHJvcGVydHkobmFtZV8xKSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgIHBhcmVudFtuYW1lXzFdID0gYXBwZW5kRnVuY3Rpb24ocGFyZW50LCBwYXJlbnRbbmFtZV8xXSwgbWV0aG9kc1tuYW1lXzFdKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4dGVuZENvbXBvbmVudC5qcy5tYXAiLCJleHBvcnQgdmFyIEtUUF9QUkVGSVggPSAna3RwJztcbmV4cG9ydCB2YXIgS1RQX1NFUEFSQVRPUiA9ICctJztcbmV4cG9ydCB2YXIgS1RQX0ZVTExfUFJFRklYID0gS1RQX1BSRUZJWCArIEtUUF9TRVBBUkFUT1I7XG5leHBvcnQgdmFyIERBVEFLVFBfVEFSR0VUID0gJ2RhdGEta3RwLXRhcmdldCc7XG5leHBvcnQgdmFyIERBVEFLVFBfRVhFQ1VURV9UQVJHRVQgPSAnZGF0YS1rdHAtZXhlY3V0ZS10YXJnZXQnO1xuZXhwb3J0IHZhciBEQVRBS1RQX0FSSUFfVEFSR0VUID0gJ2RhdGEta3RwLWFyaWEtdGFyZ2V0JztcbmV4cG9ydCB2YXIgS1RQX0xBWUVSX0lEID0gJ2t0cC1sYXllci1pZCc7XG5leHBvcnQgdmFyIEtUUF9BUklBX1NFUEFSQVRPUiA9ICcsICc7XG4vLyBFdmVudHNcbmV4cG9ydCB2YXIgS2V5dGlwRXZlbnRzO1xuKGZ1bmN0aW9uIChLZXl0aXBFdmVudHMpIHtcbiAgICBLZXl0aXBFdmVudHMuS0VZVElQX0FEREVEID0gJ2tleXRpcEFkZGVkJztcbiAgICBLZXl0aXBFdmVudHMuS0VZVElQX1JFTU9WRUQgPSAna2V5dGlwUmVtb3ZlZCc7XG4gICAgS2V5dGlwRXZlbnRzLktFWVRJUF9VUERBVEVEID0gJ2tleXRpcFVwZGF0ZWQnO1xuICAgIEtleXRpcEV2ZW50cy5QRVJTSVNURURfS0VZVElQX0FEREVEID0gJ3BlcnNpc3RlZEtleXRpcEFkZGVkJztcbiAgICBLZXl0aXBFdmVudHMuUEVSU0lTVEVEX0tFWVRJUF9SRU1PVkVEID0gJ3BlcnNpc3RlZEtleXRpcFJlbW92ZWQnO1xuICAgIEtleXRpcEV2ZW50cy5QRVJTSVNURURfS0VZVElQX0VYRUNVVEUgPSAncGVyc2lzdGVkS2V5dGlwRXhlY3V0ZSc7XG4gICAgS2V5dGlwRXZlbnRzLkVOVEVSX0tFWVRJUF9NT0RFID0gJ2VudGVyS2V5dGlwTW9kZSc7XG4gICAgS2V5dGlwRXZlbnRzLkVYSVRfS0VZVElQX01PREUgPSAnZXhpdEtleXRpcE1vZGUnO1xufSkoS2V5dGlwRXZlbnRzIHx8IChLZXl0aXBFdmVudHMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9S2V5dGlwQ29uc3RhbnRzLmpzLm1hcCIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogSG9vayB0byBpbml0aWFsaXplIGFuZCByZXR1cm4gYSBjb25zdGFudCB2YWx1ZS4gVW5saWtlIGBSZWFjdC51c2VNZW1vYCwgdGhpcyBpcyBndWFyYW50ZWVkIHRvXG4gKiBhbHdheXMgcmV0dXJuIHRoZSBzYW1lIHZhbHVlIChhbmQgaWYgdGhlIGluaXRpYWxpemVyIGlzIGEgZnVuY3Rpb24sIG9ubHkgY2FsbCBpdCBvbmNlKS5cbiAqIFRoaXMgaXMgc2ltaWxhciB0byBzZXR0aW5nIGEgcHJpdmF0ZSBtZW1iZXIgaW4gYSBjbGFzcyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBJZiB0aGUgdmFsdWUgc2hvdWxkIGV2ZXIgY2hhbmdlIGJhc2VkIG9uIGRlcGVuZGVuY2llcywgdXNlIGBSZWFjdC51c2VNZW1vYCBpbnN0ZWFkLlxuICpcbiAqIEBwYXJhbSBpbml0aWFsVmFsdWUgLSBJbml0aWFsIHZhbHVlLCBvciBmdW5jdGlvbiB0byBnZXQgdGhlIGluaXRpYWwgdmFsdWUuIFNpbWlsYXIgdG8gYHVzZVN0YXRlYCxcbiAqIG9ubHkgdGhlIHZhbHVlL2Z1bmN0aW9uIHBhc3NlZCBpbiB0aGUgZmlyc3QgdGltZSB0aGlzIGlzIGNhbGxlZCBpcyByZXNwZWN0ZWQuXG4gKiBAcmV0dXJucyBUaGUgdmFsdWUuIFRoZSBpZGVudGl0eSBvZiB0aGlzIHZhbHVlIHdpbGwgYWx3YXlzIGJlIHRoZSBzYW1lLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQ29uc3QoaW5pdGlhbFZhbHVlKSB7XG4gICAgLy8gVXNlIHVzZVJlZiB0byBzdG9yZSB0aGUgdmFsdWUgYmVjYXVzZSBpdCdzIHRoZSBsZWFzdCBleHBlbnNpdmUgYnVpbHQtaW4gaG9vayB0aGF0IHdvcmtzIGhlcmVcbiAgICAvLyAod2UgY291bGQgYWxzbyB1c2UgYGNvbnN0IFt2YWx1ZV0gPSBSZWFjdC51c2VTdGF0ZShpbml0aWFsVmFsdWUpYCBidXQgdGhhdCdzIG1vcmUgZXhwZW5zaXZlXG4gICAgLy8gaW50ZXJuYWxseSBkdWUgdG8gcmVkdWNlciBoYW5kbGluZyB3aGljaCB3ZSBkb24ndCBuZWVkKVxuICAgIHZhciByZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgICBpZiAocmVmLmN1cnJlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBCb3ggdGhlIHZhbHVlIGluIGFuIG9iamVjdCBzbyB3ZSBjYW4gdGVsbCBpZiBpdCdzIGluaXRpYWxpemVkIGV2ZW4gaWYgdGhlIGluaXRpYWxpemVyXG4gICAgICAgIC8vIHJldHVybnMvaXMgdW5kZWZpbmVkXG4gICAgICAgIHJlZi5jdXJyZW50ID0ge1xuICAgICAgICAgICAgdmFsdWU6IHR5cGVvZiBpbml0aWFsVmFsdWUgPT09ICdmdW5jdGlvbicgPyBpbml0aWFsVmFsdWUoKSA6IGluaXRpYWxWYWx1ZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHJlZi5jdXJyZW50LnZhbHVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlQ29uc3QuanMubWFwIiwiLyoqXG4gKiBBUklBIGhlbHBlciB0byBjb25jYXRlbmF0ZSBhdHRyaWJ1dGVzLCByZXR1cm5pbmcgdW5kZWZpbmVkIGlmIGFsbCBhdHRyaWJ1dGVzXG4gKiBhcmUgdW5kZWZpbmVkLiAoRW1wdHkgc3RyaW5ncyBhcmUgbm90IGEgdmFsaWQgQVJJQSBhdHRyaWJ1dGUgdmFsdWUuKVxuICpcbiAqIEBwYXJhbSBhcmlhQXR0cmlidXRlcyAtIEFSSUEgYXR0cmlidXRlcyB0byBtZXJnZVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VBcmlhQXR0cmlidXRlVmFsdWVzKCkge1xuICAgIHZhciBhcmlhQXR0cmlidXRlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyaWFBdHRyaWJ1dGVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBtZXJnZWRBdHRyaWJ1dGUgPSBhcmlhQXR0cmlidXRlc1xuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChhcmcpIHsgcmV0dXJuIGFyZzsgfSlcbiAgICAgICAgLmpvaW4oJyAnKVxuICAgICAgICAudHJpbSgpO1xuICAgIHJldHVybiBtZXJnZWRBdHRyaWJ1dGUgPT09ICcnID8gdW5kZWZpbmVkIDogbWVyZ2VkQXR0cmlidXRlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJpYS5qcy5tYXAiLCIvKipcbiAqIENvbXBhcmVzIGEgdG8gYiBhbmQgYiB0byBhLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBmdW5jdGlvbiBzaGFsbG93Q29tcGFyZShhLCBiKSB7XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gYSkge1xuICAgICAgICBpZiAoYS5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgICAgIGlmICghYi5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgfHwgYltwcm9wTmFtZV0gIT09IGFbcHJvcE5hbWVdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIHByb3BOYW1lIGluIGIpIHtcbiAgICAgICAgaWYgKGIuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgICAgICBpZiAoIWEuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBNYWtlcyBhIHJlc3VsdGluZyBtZXJnZSBvZiBhIGJ1bmNoIG9mIG9iamVjdHMuIFBhc3MgaW4gdGhlIHRhcmdldCBvYmplY3QgZm9sbG93ZWQgYnkgMSBvciBtb3JlXG4gKiBvYmplY3RzIGFzIGFyZ3VtZW50cyBhbmQgdGhleSB3aWxsIGJlIG1lcmdlZCBzZXF1ZW50aWFsbHkgaW50byB0aGUgdGFyZ2V0LiBOb3RlIHRoYXQgdGhpcyB3aWxsXG4gKiBzaGFsbG93IG1lcmdlOyBpdCB3aWxsIG5vdCBjcmVhdGUgbmV3IGNsb25lZCB2YWx1ZXMgZm9yIHRhcmdldCBtZW1iZXJzLlxuICpcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB0YXJnZXQgLSBUYXJnZXQgb2JqZWN0IHRvIG1lcmdlIGZvbGxvd2luZyBvYmplY3QgYXJndW1lbnRzIGludG8uXG4gKiBAcGFyYW0gYXJncyAtIE9uZSBvciBtb3JlIG9iamVjdHMgdGhhdCB3aWxsIGJlIG1peGVkIGludG8gdGhlIHRhcmdldCBpbiB0aGUgb3JkZXIgdGhleSBhcmUgcHJvdmlkZWQuXG4gKiBAcmV0dXJucyBSZXN1bHRpbmcgbWVyZ2VkIHRhcmdldC5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0KSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gZmlsdGVyZWRBc3NpZ24uYXBwbHkodGhpcywgW251bGwsIHRhcmdldF0uY29uY2F0KGFyZ3MpKTtcbn1cbi8qKlxuICogTWFrZXMgYSByZXN1bHRpbmcgbWVyZ2Ugb2YgYSBidW5jaCBvZiBvYmplY3RzLCBidXQgYWxsb3dzIGEgZmlsdGVyIGZ1bmN0aW9uIHRvIGJlIHBhc3NlZCBpbiB0byBmaWx0ZXJcbiAqIHRoZSByZXN1bHRpbmcgbWVyZ2VzLiBUaGlzIGFsbG93cyBmb3Igc2NlbmFyaW9zIHdoZXJlIHlvdSB3YW50IHRvIG1lcmdlIFwiZXZlcnl0aGluZyBleGNlcHQgdGhhdCBvbmUgdGhpbmdcIlxuICogb3IgXCJwcm9wZXJ0aWVzIHRoYXQgc3RhcnQgd2l0aCBkYXRhLVwiLiBOb3RlIHRoYXQgdGhpcyB3aWxsIHNoYWxsb3cgbWVyZ2U7IGl0IHdpbGwgbm90IGNyZWF0ZSBuZXcgY2xvbmVkXG4gKiB2YWx1ZXMgZm9yIHRhcmdldCBtZW1iZXJzLlxuICpcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSBpc0FsbG93ZWQgLSBDYWxsYmFjayB0byBkZXRlcm1pbmUgaWYgdGhlIGdpdmVuIHByb3BOYW1lIGlzIGFsbG93ZWQgaW4gdGhlIHJlc3VsdC5cbiAqIEBwYXJhbSB0YXJnZXQgLSBUYXJnZXQgb2JqZWN0IHRvIG1lcmdlIGZvbGxvd2luZyBvYmplY3QgYXJndW1lbnRzIGludG8uXG4gKiBAcGFyYW0gYXJncyAtIE9uZSBvciBtb3JlIG9iamVjdHMgdGhhdCB3aWxsIGJlIG1peGVkIGludG8gdGhlIHRhcmdldCBpbiB0aGUgb3JkZXIgdGhleSBhcmUgcHJvdmlkZWQuXG4gKiBAcmV0dXJucyBSZXN1bHRpbmcgbWVyZ2VkIHRhcmdldC5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJlZEFzc2lnbihpc0FsbG93ZWQsIHRhcmdldCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdGFyZ2V0ID0gdGFyZ2V0IHx8IHt9O1xuICAgIGZvciAodmFyIF9hID0gMCwgYXJnc18xID0gYXJnczsgX2EgPCBhcmdzXzEubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgIHZhciBzb3VyY2VPYmplY3QgPSBhcmdzXzFbX2FdO1xuICAgICAgICBpZiAoc291cmNlT2JqZWN0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBzb3VyY2VPYmplY3QpIHtcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlT2JqZWN0Lmhhc093blByb3BlcnR5KHByb3BOYW1lKSAmJiAoIWlzQWxsb3dlZCB8fCBpc0FsbG93ZWQocHJvcE5hbWUpKSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRbcHJvcE5hbWVdID0gc291cmNlT2JqZWN0W3Byb3BOYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbi8qKlxuICogVGFrZXMgYW4gZW51bSBhbmQgaXRlcmF0ZXMgb3ZlciBlYWNoIHZhbHVlIG9mIHRoZSBlbnVtIChhcyBhIHN0cmluZyksIHJ1bm5pbmcgdGhlIGNhbGxiYWNrIG9uIGVhY2gsXG4gKiByZXR1cm5pbmcgYSBtYXBwZWQgYXJyYXkuXG4gKiBAcGFyYW0gdGhlRW51bSAtIEVudW0gdG8gaXRlcmF0ZSBvdmVyXG4gKiBAcGFyYW0gY2FsbGJhY2sgLSBUaGUgZmlyc3QgcGFyYW1ldGVyIHRoZSBuYW1lIG9mIHRoZSBlbnRyeSwgYW5kIHRoZSBzZWNvbmQgcGFyYW1ldGVyIGlzIHRoZSB2YWx1ZVxuICogb2YgdGhhdCBlbnRyeSwgd2hpY2ggaXMgdGhlIHZhbHVlIHlvdSdkIG5vcm1hbGx5IHVzZSB3aGVuIHVzaW5nIHRoZSBlbnVtICh1c3VhbGx5IGEgbnVtYmVyKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcEVudW1CeU5hbWUoXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxudGhlRW51bSwgY2FsbGJhY2spIHtcbiAgICAvLyBtYXA8YW55PiB0byBzYXRpc2Z5IGNvbXBpbGVyIHNpbmNlIGl0IGRvZXNuJ3QgcmVhbGl6ZSB3ZSBzdHJpcCBvdXQgdW5kZWZpbmVkcyBpbiB0aGUgLmZpbHRlcigpIGNhbGxcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhlRW51bSlcbiAgICAgICAgLm1hcChmdW5jdGlvbiAocCkge1xuICAgICAgICAvLyBtYXAgb24gZWFjaCBwcm9wZXJ0eSBuYW1lIGFzIGEgc3RyaW5nXG4gICAgICAgIGlmIChTdHJpbmcoTnVtYmVyKHApKSAhPT0gcCkge1xuICAgICAgICAgICAgLy8gaWYgdGhlIHByb3BlcnR5IGlzIG5vdCBqdXN0IGEgbnVtYmVyIChiZWNhdXNlIGVudW1zIGluIFR5cGVTY3JpcHQgd2lsbCBtYXAgYm90aCB3YXlzKVxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHAsIHRoZUVudW1bcF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSlcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAodikgeyByZXR1cm4gISF2OyB9KTsgLy8gb25seSByZXR1cm4gZWxlbWVudHMgd2l0aCB2YWx1ZXNcbn1cbi8qKlxuICogR2V0IGFsbCB2YWx1ZXMgaW4gYW4gb2JqZWN0IGRpY3Rpb25hcnlcbiAqXG4gKiBAcGFyYW0gb2JqIC0gVGhlIGRpY3Rpb25hcnkgdG8gZ2V0IHZhbHVlcyBmb3JcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBmdW5jdGlvbiB2YWx1ZXMob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikucmVkdWNlKGZ1bmN0aW9uIChhcnIsIGtleSkge1xuICAgICAgICBhcnIucHVzaChvYmpba2V5XSk7XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgfSwgW10pO1xufVxuLyoqXG4gKiBUaW55IGhlbHBlciB0byBkbyB0aGUgbWluaW1hbCBhbW91bnQgb2Ygd29yayBpbiBkdXBsaWNhdGluZyBhbiBvYmplY3QgYnV0IG9taXR0aW5nIHNvbWVcbiAqIHByb3BzLiBUaGlzIGVuZHMgdXAgZmFzdGVyIHRoYW4gdXNpbmcgb2JqZWN0IC4uLnJlc3Qgb3IgcmVkdWNlIHRvIGZpbHRlci5cbiAqXG4gKiBUaGlzIGJlaGF2ZXMgdmVyeSBtdWNoIGxpa2UgZmlsdGVyZWRBc3NpZ24sIGJ1dCBkb2VzIG5vdCBtZXJnZSBtYW55IG9iamVjdHMgdG9nZXRoZXIsXG4gKiB1c2VzIGFuIGV4Y2x1c2lvbiBvYmplY3QgbWFwLCBhbmQgYXZvaWRzIHNwcmVhZHMgYWxsIGZvciBvcHRpbWFsIHBlcmZvcm1hbmNlLlxuICpcbiAqIFNlZSBwZXJmIHRlc3QgZm9yIGJhY2tncm91bmQ6XG4gKiBodHRwczovL2pzcGVyZi5jb20vb21pdC12cy1yZXN0LXZzLXJlZHVjZS8xXG4gKlxuICogQHBhcmFtIG9iaiAtIFRoZSBvYmplY3QgdG8gY2xvbmVcbiAqIEBwYXJhbSBleGNsdXNpb25zIC0gVGhlIGFycmF5IG9mIGtleXMgdG8gZXhjbHVkZVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGZ1bmN0aW9uIG9taXQob2JqLCBleGNsdXNpb25zKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBpZiAoZXhjbHVzaW9ucy5pbmRleE9mKGtleSkgPT09IC0xICYmIG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IG9ialtrZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYmplY3QuanMubWFwIiwiaW1wb3J0IHsgYXNzaWduIH0gZnJvbSAnLi9vYmplY3QnO1xuLyoqIEFuIGluc3RhbmNlIG9mIEV2ZW50R3JvdXAgYWxsb3dzIGFueXRoaW5nIHdpdGggYSBoYW5kbGUgdG8gaXQgdG8gdHJpZ2dlciBldmVudHMgb24gaXQuXG4gKiAgSWYgdGhlIHRhcmdldCBpcyBhbiBIVE1MRWxlbWVudCwgdGhlIGV2ZW50IHdpbGwgYmUgYXR0YWNoZWQgdG8gdGhlIGVsZW1lbnQgYW5kIGNhbiBiZVxuICogIHRyaWdnZXJlZCBhcyB1c3VhbCAobGlrZSBjbGlja2luZyBmb3Igb25DbGljaykuXG4gKiAgVGhlIGV2ZW50IGNhbiBiZSB0cmlnZ2VyZWQgYnkgY2FsbGluZyBFdmVudEdyb3VwLnJhaXNlKCkgaGVyZS4gSWYgdGhlIHRhcmdldCBpcyBhblxuICogIEhUTUxFbGVtZW50LCB0aGUgZXZlbnQgZ2V0cyByYWlzZWQgYW5kIGlzIGhhbmRsZWQgYnkgdGhlIGJyb3dzZXIuIE90aGVyd2lzZSwgaXQgZ2V0c1xuICogIGhhbmRsZWQgaGVyZSBpbiBFdmVudEdyb3VwLCBhbmQgdGhlIGhhbmRsZXIgaXMgY2FsbGVkIGluIHRoZSBjb250ZXh0IG9mIHRoZSBwYXJlbnRcbiAqICAod2hpY2ggaXMgcGFzc2VkIGluIGluIHRoZSBjb25zdHJ1Y3RvcikuXG4gKlxuICogQHB1YmxpY1xuICoge0Bkb2NDYXRlZ29yeSBFdmVudEdyb3VwfVxuICovXG52YXIgRXZlbnRHcm91cCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKiogcGFyZW50OiB0aGUgY29udGV4dCBpbiB3aGljaCBldmVudHMgYXR0YWNoZWQgdG8gbm9uLUhUTUxFbGVtZW50cyBhcmUgY2FsbGVkICovXG4gICAgZnVuY3Rpb24gRXZlbnRHcm91cChwYXJlbnQpIHtcbiAgICAgICAgdGhpcy5faWQgPSBFdmVudEdyb3VwLl91bmlxdWVJZCsrO1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMuX2V2ZW50UmVjb3JkcyA9IFtdO1xuICAgIH1cbiAgICAvKiogRm9yIElFOCwgYnViYmxlRXZlbnQgaXMgaWdub3JlZCBoZXJlIGFuZCBtdXN0IGJlIGRlYWx0IHdpdGggYnkgdGhlIGhhbmRsZXIuXG4gICAgICogIEV2ZW50cyByYWlzZWQgaGVyZSBieSBkZWZhdWx0IGhhdmUgYnViYmxpbmcgc2V0IHRvIGZhbHNlIGFuZCBjYW5jZWxhYmxlIHNldCB0byB0cnVlLlxuICAgICAqICBUaGlzIGFwcGxpZXMgYWxzbyB0byBidWlsdC1pbiBldmVudHMgYmVpbmcgcmFpc2VkIG1hbnVhbGx5IGhlcmUgb24gSFRNTEVsZW1lbnRzLFxuICAgICAqICB3aGljaCBtYXkgbGVhZCB0byB1bmV4cGVjdGVkIGJlaGF2aW9yIGlmIGl0IGRpZmZlcnMgZnJvbSB0aGUgZGVmYXVsdHMuXG4gICAgICpcbiAgICAgKi9cbiAgICBFdmVudEdyb3VwLnJhaXNlID0gZnVuY3Rpb24gKHRhcmdldCwgZXZlbnROYW1lLCBldmVudEFyZ3MsIGJ1YmJsZUV2ZW50KSB7XG4gICAgICAgIHZhciByZXRWYWw7XG4gICAgICAgIGlmIChFdmVudEdyb3VwLl9pc0VsZW1lbnQodGFyZ2V0KSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuY3JlYXRlRXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXYgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuICAgICAgICAgICAgICAgIGV2LmluaXRFdmVudChldmVudE5hbWUsIGJ1YmJsZUV2ZW50IHx8IGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBhc3NpZ24oZXYsIGV2ZW50QXJncyk7XG4gICAgICAgICAgICAgICAgcmV0VmFsID0gdGFyZ2V0LmRpc3BhdGNoRXZlbnQoZXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5jcmVhdGVFdmVudE9iamVjdCkge1xuICAgICAgICAgICAgICAgIC8vIElFOFxuICAgICAgICAgICAgICAgIHZhciBldk9iaiA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50T2JqZWN0KGV2ZW50QXJncyk7XG4gICAgICAgICAgICAgICAgLy8gY2Fubm90IHNldCBjYW5jZWxCdWJibGUgb24gZXZPYmosIGZpcmVFdmVudCB3aWxsIG92ZXJ3cml0ZSBpdFxuICAgICAgICAgICAgICAgIHRhcmdldC5maXJlRXZlbnQoJ29uJyArIGV2ZW50TmFtZSwgZXZPYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd2hpbGUgKHRhcmdldCAmJiByZXRWYWwgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50cyA9IHRhcmdldC5fX2V2ZW50c19fO1xuICAgICAgICAgICAgICAgIHZhciBldmVudFJlY29yZHMgPSBldmVudHMgPyBldmVudHNbZXZlbnROYW1lXSA6IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50UmVjb3Jkcykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpZCBpbiBldmVudFJlY29yZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudFJlY29yZHMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50UmVjb3JkTGlzdCA9IGV2ZW50UmVjb3Jkc1tpZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbGlzdEluZGV4ID0gMDsgcmV0VmFsICE9PSBmYWxzZSAmJiBsaXN0SW5kZXggPCBldmVudFJlY29yZExpc3QubGVuZ3RoOyBsaXN0SW5kZXgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVjb3JkID0gZXZlbnRSZWNvcmRMaXN0W2xpc3RJbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWNvcmQub2JqZWN0Q2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldFZhbCA9IHJlY29yZC5vYmplY3RDYWxsYmFjay5jYWxsKHJlY29yZC5wYXJlbnQsIGV2ZW50QXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHRhcmdldCBoYXMgYSBwYXJlbnQsIGJ1YmJsZSB0aGUgZXZlbnQgdXAuXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gYnViYmxlRXZlbnQgPyB0YXJnZXQucGFyZW50IDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0VmFsO1xuICAgIH07XG4gICAgRXZlbnRHcm91cC5pc09ic2VydmVkID0gZnVuY3Rpb24gKHRhcmdldCwgZXZlbnROYW1lKSB7XG4gICAgICAgIHZhciBldmVudHMgPSB0YXJnZXQgJiYgdGFyZ2V0Ll9fZXZlbnRzX187XG4gICAgICAgIHJldHVybiAhIWV2ZW50cyAmJiAhIWV2ZW50c1tldmVudE5hbWVdO1xuICAgIH07XG4gICAgLyoqIENoZWNrIHRvIHNlZSBpZiB0aGUgdGFyZ2V0IGhhcyBkZWNsYXJlZCBzdXBwb3J0IG9mIHRoZSBnaXZlbiBldmVudC4gKi9cbiAgICBFdmVudEdyb3VwLmlzRGVjbGFyZWQgPSBmdW5jdGlvbiAodGFyZ2V0LCBldmVudE5hbWUpIHtcbiAgICAgICAgdmFyIGRlY2xhcmVkRXZlbnRzID0gdGFyZ2V0ICYmIHRhcmdldC5fX2RlY2xhcmVkRXZlbnRzO1xuICAgICAgICByZXR1cm4gISFkZWNsYXJlZEV2ZW50cyAmJiAhIWRlY2xhcmVkRXZlbnRzW2V2ZW50TmFtZV07XG4gICAgfTtcbiAgICBFdmVudEdyb3VwLnN0b3BQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIElFOFxuICAgICAgICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRXZlbnRHcm91cC5faXNFbGVtZW50ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICByZXR1cm4gKCEhdGFyZ2V0ICYmICghIXRhcmdldC5hZGRFdmVudExpc3RlbmVyIHx8ICh0eXBlb2YgSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHRhcmdldCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSkpO1xuICAgIH07XG4gICAgRXZlbnRHcm91cC5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc0Rpc3Bvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLl9pc0Rpc3Bvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMub2ZmKCk7XG4gICAgICAgICAgICB0aGlzLl9wYXJlbnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiogT24gdGhlIHRhcmdldCwgYXR0YWNoIGEgc2V0IG9mIGV2ZW50cywgd2hlcmUgdGhlIGV2ZW50cyBvYmplY3QgaXMgYSBuYW1lIHRvIGZ1bmN0aW9uIG1hcHBpbmcuICovXG4gICAgRXZlbnRHcm91cC5wcm90b3R5cGUub25BbGwgPSBmdW5jdGlvbiAodGFyZ2V0LCBldmVudHMsIHVzZUNhcHR1cmUpIHtcbiAgICAgICAgZm9yICh2YXIgZXZlbnROYW1lIGluIGV2ZW50cykge1xuICAgICAgICAgICAgaWYgKGV2ZW50cy5oYXNPd25Qcm9wZXJ0eShldmVudE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbih0YXJnZXQsIGV2ZW50TmFtZSwgZXZlbnRzW2V2ZW50TmFtZV0sIHVzZUNhcHR1cmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBPbiB0aGUgdGFyZ2V0LCBhdHRhY2ggYW4gZXZlbnQgd2hvc2UgaGFuZGxlciB3aWxsIGJlIGNhbGxlZCBpbiB0aGUgY29udGV4dCBvZiB0aGUgcGFyZW50XG4gICAgICogb2YgdGhpcyBpbnN0YW5jZSBvZiBFdmVudEdyb3VwLlxuICAgICAqL1xuICAgIEV2ZW50R3JvdXAucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKHRhcmdldCwgZXZlbnROYW1lLCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoZXZlbnROYW1lLmluZGV4T2YoJywnKSA+IC0xKSB7XG4gICAgICAgICAgICB2YXIgZXZlbnRzID0gZXZlbnROYW1lLnNwbGl0KC9bICxdKy8pO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uKHRhcmdldCwgZXZlbnRzW2ldLCBjYWxsYmFjaywgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgcGFyZW50XzEgPSB0aGlzLl9wYXJlbnQ7XG4gICAgICAgICAgICB2YXIgZXZlbnRSZWNvcmQgPSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICAgICAgICAgICAgZXZlbnROYW1lOiBldmVudE5hbWUsXG4gICAgICAgICAgICAgICAgcGFyZW50OiBwYXJlbnRfMSxcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIGFuZCB3aXJlIHVwIHRoZSByZWNvcmQgb24gdGhlIHRhcmdldCwgc28gdGhhdCBpdCBjYW4gY2FsbCB0aGUgY2FsbGJhY2sgaWYgdGhlIGV2ZW50IGZpcmVzLlxuICAgICAgICAgICAgdmFyIGV2ZW50cyA9ICh0YXJnZXQuX19ldmVudHNfXyA9IHRhcmdldC5fX2V2ZW50c19fIHx8IHt9KTtcbiAgICAgICAgICAgIGV2ZW50c1tldmVudE5hbWVdID1cbiAgICAgICAgICAgICAgICBldmVudHNbZXZlbnROYW1lXSB8fFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGV2ZW50c1tldmVudE5hbWVdW3RoaXMuX2lkXSA9IGV2ZW50c1tldmVudE5hbWVdW3RoaXMuX2lkXSB8fCBbXTtcbiAgICAgICAgICAgIGV2ZW50c1tldmVudE5hbWVdW3RoaXMuX2lkXS5wdXNoKGV2ZW50UmVjb3JkKTtcbiAgICAgICAgICAgIGV2ZW50c1tldmVudE5hbWVdLmNvdW50Kys7XG4gICAgICAgICAgICBpZiAoRXZlbnRHcm91cC5faXNFbGVtZW50KHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvY2Vzc0VsZW1lbnRFdmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2lzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2suYXBwbHkocGFyZW50XzEsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UgJiYgYXJnc1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlnbm9yZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBldmVudFJlY29yZC5lbGVtZW50Q2FsbGJhY2sgPSBwcm9jZXNzRWxlbWVudEV2ZW50O1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHByb2Nlc3NFbGVtZW50RXZlbnQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0YXJnZXQuYXR0YWNoRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSUU4XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnROYW1lLCBwcm9jZXNzRWxlbWVudEV2ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvY2Vzc09iamVjdEV2ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5faXNEaXNwb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjay5hcHBseShwYXJlbnRfMSwgYXJncyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBldmVudFJlY29yZC5vYmplY3RDYWxsYmFjayA9IHByb2Nlc3NPYmplY3RFdmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFJlbWVtYmVyIHRoZSByZWNvcmQgbG9jYWxseSwgc28gdGhhdCBpdCBjYW4gYmUgcmVtb3ZlZC5cbiAgICAgICAgICAgIHRoaXMuX2V2ZW50UmVjb3Jkcy5wdXNoKGV2ZW50UmVjb3JkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRXZlbnRHcm91cC5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gKHRhcmdldCwgZXZlbnROYW1lLCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2V2ZW50UmVjb3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGV2ZW50UmVjb3JkID0gdGhpcy5fZXZlbnRSZWNvcmRzW2ldO1xuICAgICAgICAgICAgaWYgKCghdGFyZ2V0IHx8IHRhcmdldCA9PT0gZXZlbnRSZWNvcmQudGFyZ2V0KSAmJlxuICAgICAgICAgICAgICAgICghZXZlbnROYW1lIHx8IGV2ZW50TmFtZSA9PT0gZXZlbnRSZWNvcmQuZXZlbnROYW1lKSAmJlxuICAgICAgICAgICAgICAgICghY2FsbGJhY2sgfHwgY2FsbGJhY2sgPT09IGV2ZW50UmVjb3JkLmNhbGxiYWNrKSAmJlxuICAgICAgICAgICAgICAgICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ2Jvb2xlYW4nIHx8IG9wdGlvbnMgPT09IGV2ZW50UmVjb3JkLm9wdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50cyA9IGV2ZW50UmVjb3JkLnRhcmdldC5fX2V2ZW50c19fO1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRBcnJheUxvb2t1cCA9IGV2ZW50c1tldmVudFJlY29yZC5ldmVudE5hbWVdO1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRBcnJheSA9IHRhcmdldEFycmF5TG9va3VwID8gdGFyZ2V0QXJyYXlMb29rdXBbdGhpcy5faWRdIDogbnVsbDtcbiAgICAgICAgICAgICAgICAvLyBXZSBtYXkgaGF2ZSBhbHJlYWR5IHRhcmdldCdzIGVudHJpZXMsIHNvIGNoZWNrIGZvciBudWxsLlxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0QXJyYXkubGVuZ3RoID09PSAxIHx8ICFjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QXJyYXlMb29rdXAuY291bnQgLT0gdGFyZ2V0QXJyYXkubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGV2ZW50c1tldmVudFJlY29yZC5ldmVudE5hbWVdW3RoaXMuX2lkXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEFycmF5TG9va3VwLmNvdW50LS07XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRBcnJheS5zcGxpY2UodGFyZ2V0QXJyYXkuaW5kZXhPZihldmVudFJlY29yZCksIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0QXJyYXlMb29rdXAuY291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbZXZlbnRSZWNvcmQuZXZlbnROYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRSZWNvcmQuZWxlbWVudENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudFJlY29yZC50YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRSZWNvcmQudGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRSZWNvcmQuZXZlbnROYW1lLCBldmVudFJlY29yZC5lbGVtZW50Q2FsbGJhY2ssIGV2ZW50UmVjb3JkLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50UmVjb3JkLnRhcmdldC5kZXRhY2hFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSUU4XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudFJlY29yZC50YXJnZXQuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50UmVjb3JkLmV2ZW50TmFtZSwgZXZlbnRSZWNvcmQuZWxlbWVudENhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudFJlY29yZHMuc3BsaWNlKGktLSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKiBUcmlnZ2VyIHRoZSBnaXZlbiBldmVudCBpbiB0aGUgY29udGV4dCBvZiB0aGlzIGluc3RhbmNlIG9mIEV2ZW50R3JvdXAuICovXG4gICAgRXZlbnRHcm91cC5wcm90b3R5cGUucmFpc2UgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBldmVudEFyZ3MsIGJ1YmJsZUV2ZW50KSB7XG4gICAgICAgIHJldHVybiBFdmVudEdyb3VwLnJhaXNlKHRoaXMuX3BhcmVudCwgZXZlbnROYW1lLCBldmVudEFyZ3MsIGJ1YmJsZUV2ZW50KTtcbiAgICB9O1xuICAgIC8qKiBEZWNsYXJlIGFuIGV2ZW50IGFzIGJlaW5nIHN1cHBvcnRlZCBieSB0aGlzIGluc3RhbmNlIG9mIEV2ZW50R3JvdXAuICovXG4gICAgRXZlbnRHcm91cC5wcm90b3R5cGUuZGVjbGFyZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgZGVjbGFyZWRFdmVudHMgPSAodGhpcy5fcGFyZW50Ll9fZGVjbGFyZWRFdmVudHMgPSB0aGlzLl9wYXJlbnQuX19kZWNsYXJlZEV2ZW50cyB8fCB7fSk7XG4gICAgICAgIGlmICh0eXBlb2YgZXZlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBkZWNsYXJlZEV2ZW50c1tldmVudF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGRlY2xhcmVkRXZlbnRzW2V2ZW50W2ldXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV2ZW50R3JvdXAuX3VuaXF1ZUlkID0gMDtcbiAgICByZXR1cm4gRXZlbnRHcm91cDtcbn0oKSk7XG5leHBvcnQgeyBFdmVudEdyb3VwIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FdmVudEdyb3VwLmpzLm1hcCIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJy4vZG9tL2dldFdpbmRvdyc7XG5pbXBvcnQgeyBTdHlsZXNoZWV0IH0gZnJvbSAnQHVpZmFicmljL21lcmdlLXN0eWxlcyc7XG4vLyBJbml0aWFsaXplIGdsb2JhbCB3aW5kb3cgaWQuXG52YXIgQ1VSUkVOVF9JRF9QUk9QRVJUWSA9ICdfX2N1cnJlbnRJZF9fJztcbnZhciBERUZBVUxUX0lEX1NUUklORyA9ICdpZF9fJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG52YXIgX2dsb2JhbCA9IGdldFdpbmRvdygpIHx8IHt9O1xuaWYgKF9nbG9iYWxbQ1VSUkVOVF9JRF9QUk9QRVJUWV0gPT09IHVuZGVmaW5lZCkge1xuICAgIF9nbG9iYWxbQ1VSUkVOVF9JRF9QUk9QRVJUWV0gPSAwO1xufVxudmFyIF9pbml0aWFsaXplZFN0eWxlc2hlZXRSZXNldHMgPSBmYWxzZTtcbi8qKlxuICogR2VuZXJhdGVzIGEgdW5pcXVlIGlkIGluIHRoZSBnbG9iYWwgc2NvcGUgKHRoaXMgc3BhbnMgYWNyb3NzIGR1cGxpY2F0ZSBjb3BpZXMgb2YgdGhlIHNhbWUgbGlicmFyeS4pXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SWQocHJlZml4KSB7XG4gICAgaWYgKCFfaW5pdGlhbGl6ZWRTdHlsZXNoZWV0UmVzZXRzKSB7XG4gICAgICAgIC8vIENvbmZpZ3VyZSBpZHMgdG8gcmVzZXQgb24gc3R5bGVzaGVldCByZXNldHMuXG4gICAgICAgIHZhciBzdHlsZXNoZWV0ID0gU3R5bGVzaGVldC5nZXRJbnN0YW5jZSgpO1xuICAgICAgICBpZiAoc3R5bGVzaGVldCAmJiBzdHlsZXNoZWV0Lm9uUmVzZXQpIHtcbiAgICAgICAgICAgIHN0eWxlc2hlZXQub25SZXNldChyZXNldElkcyk7XG4gICAgICAgIH1cbiAgICAgICAgX2luaXRpYWxpemVkU3R5bGVzaGVldFJlc2V0cyA9IHRydWU7XG4gICAgfVxuICAgIHZhciBpbmRleCA9IF9nbG9iYWxbQ1VSUkVOVF9JRF9QUk9QRVJUWV0rKztcbiAgICByZXR1cm4gKHByZWZpeCA9PT0gdW5kZWZpbmVkID8gREVGQVVMVF9JRF9TVFJJTkcgOiBwcmVmaXgpICsgaW5kZXg7XG59XG4vKipcbiAqIFJlc2V0cyBpZCBjb3VudGVyIHRvIGFuIChvcHRpb25hbCkgbnVtYmVyLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0SWRzKGNvdW50ZXIpIHtcbiAgICBpZiAoY291bnRlciA9PT0gdm9pZCAwKSB7IGNvdW50ZXIgPSAwOyB9XG4gICAgX2dsb2JhbFtDVVJSRU5UX0lEX1BST1BFUlRZXSA9IGNvdW50ZXI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRJZC5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19zcHJlYWRBcnJheXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEV2ZW50R3JvdXAsIGdldElkIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IEtleXRpcEV2ZW50cyB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy9rZXl0aXBzL0tleXRpcENvbnN0YW50cyc7XG4vKipcbiAqIFRoaXMgY2xhc3MgaXMgcmVzcG9uc2libGUgZm9yIGhhbmRsaW5nIHJlZ2lzdGVyaW5nLCB1cGRhdGluZywgYW5kIHVucmVnaXN0ZXJpbmcgb2Yga2V5dGlwc1xuICovXG52YXIgS2V5dGlwTWFuYWdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBLZXl0aXBNYW5hZ2VyKCkge1xuICAgICAgICB0aGlzLmtleXRpcHMgPSB7fTtcbiAgICAgICAgdGhpcy5wZXJzaXN0ZWRLZXl0aXBzID0ge307XG4gICAgICAgIHRoaXMuc2VxdWVuY2VNYXBwaW5nID0ge307XG4gICAgICAgIC8vIFRoaXMgaXMgKGFuZCBzaG91bGQgYmUpIHVwZGF0ZWQgYW5kIGtlcHQgaW4gc3luY1xuICAgICAgICAvLyB3aXRoIHRoZSBpbktleXRpcE1vZGUgaW4gS2V5dGlwTGF5ZXIuXG4gICAgICAgIHRoaXMuaW5LZXl0aXBNb2RlID0gZmFsc2U7XG4gICAgICAgIC8vIEJvb2xlYW4gdGhhdCBnZXRzIGNoZWNrZWQgYmVmb3JlIGVudGVyaW5nIGtleXRpcCBtb2RlIGJ5IHRoZSBLZXl0aXBMYXllclxuICAgICAgICAvLyBVc2VkIGZvciBhbiBvdmVycmlkZSBpbiBzcGVjaWFsIGNhc2VzIChlLmcuIERpc2FibGUgZW50ZXJpbmcga2V5dGlwIG1vZGUgd2hlbiBhIG1vZGFsIGlzIHNob3duKVxuICAgICAgICB0aGlzLnNob3VsZEVudGVyS2V5dGlwTW9kZSA9IHRydWU7XG4gICAgICAgIC8vIEJvb2xlYW4gdG8gaW5kaWNhdGUgd2hldGhlciB0byBkZWxheSBmaXJpbmcgYW4gZXZlbnQgdG8gdXBkYXRlIHN1YnNjcmliZXJzIG9mXG4gICAgICAgIC8vIGtleXRpcCBkYXRhIGNoYW5nZWQuXG4gICAgICAgIHRoaXMuZGVsYXlVcGRhdGluZ0tleXRpcENoYW5nZSA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGF0aWMgZnVuY3Rpb24gdG8gZ2V0IHNpbmdsZXRvbiBLZXl0aXBNYW5hZ2VyIGluc3RhbmNlXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBTaW5nbGV0b24gS2V5dGlwTWFuYWdlciBpbnN0YW5jZVxuICAgICAqL1xuICAgIEtleXRpcE1hbmFnZXIuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemF0aW9uIGNvZGUgdG8gc2V0IHNldCBwYXJhbWV0ZXJzIHRvIGRlZmluZVxuICAgICAqIGhvdyB0aGUgS2V5dGlwTWFuYWdlciBoYW5kbGVzIGtleXRpcCBkYXRhLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRlbGF5VXBkYXRpbmdLZXl0aXBDaGFuZ2UgLSBUL0YgaWYgd2Ugc2hvdWxkIGRlbGF5IG5vdGlmaXlpbmcga2V5dGlwIHN1YnNjcmliZXJzXG4gICAgICogb2Yga2V5dGlwIGNoYW5nZXNcbiAgICAgKi9cbiAgICBLZXl0aXBNYW5hZ2VyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKGRlbGF5VXBkYXRpbmdLZXl0aXBDaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5kZWxheVVwZGF0aW5nS2V5dGlwQ2hhbmdlID0gZGVsYXlVcGRhdGluZ0tleXRpcENoYW5nZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIGtleXRpcFxuICAgICAqXG4gICAgICogQHBhcmFtIGtleXRpcFByb3BzIC0gS2V5dGlwIHRvIHJlZ2lzdGVyXG4gICAgICogQHBhcmFtIHBlcnNpc3RlZCAtIFQvRiBpZiB0aGlzIGtleXRpcCBzaG91bGQgYmUgcGVyc2lzdGVkLCBkZWZhdWx0IGlzIGZhbHNlXG4gICAgICogQHJldHVybnMgVW5pcXVlIElEIGZvciB0aGlzIGtleXRpcFxuICAgICAqL1xuICAgIEtleXRpcE1hbmFnZXIucHJvdG90eXBlLnJlZ2lzdGVyID0gZnVuY3Rpb24gKGtleXRpcFByb3BzLCBwZXJzaXN0ZWQpIHtcbiAgICAgICAgaWYgKHBlcnNpc3RlZCA9PT0gdm9pZCAwKSB7IHBlcnNpc3RlZCA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBwcm9wcyA9IGtleXRpcFByb3BzO1xuICAgICAgICBpZiAoIXBlcnNpc3RlZCkge1xuICAgICAgICAgICAgLy8gQWRkIHRoZSBvdmVyZmxvd1NldFNlcXVlbmNlIGlmIG5lY2Vzc2FyeVxuICAgICAgICAgICAgcHJvcHMgPSB0aGlzLmFkZFBhcmVudE92ZXJmbG93KGtleXRpcFByb3BzKTtcbiAgICAgICAgICAgIHRoaXMuc2VxdWVuY2VNYXBwaW5nW3Byb3BzLmtleVNlcXVlbmNlcy50b1N0cmluZygpXSA9IHByb3BzO1xuICAgICAgICB9XG4gICAgICAgIC8vIENyZWF0ZSBhIHVuaXF1ZSBrZXl0aXBcbiAgICAgICAgdmFyIHVuaXF1ZUtleXRpcCA9IHRoaXMuX2dldFVuaXF1ZUt0cChwcm9wcyk7XG4gICAgICAgIC8vIEFkZCB0byBkaWN0aW9uYXJ5XG4gICAgICAgIHBlcnNpc3RlZFxuICAgICAgICAgICAgPyAodGhpcy5wZXJzaXN0ZWRLZXl0aXBzW3VuaXF1ZUtleXRpcC51bmlxdWVJRF0gPSB1bmlxdWVLZXl0aXApXG4gICAgICAgICAgICA6ICh0aGlzLmtleXRpcHNbdW5pcXVlS2V5dGlwLnVuaXF1ZUlEXSA9IHVuaXF1ZUtleXRpcCk7XG4gICAgICAgIC8vIFdlIG9ubHkgd2FudCB0byBhZGQgc29tZXRoaW5nIG5ldyBpZiB3ZSBhcmUgY3VycmVudGx5IHNob3dpbmcga2V5dGlwIG1vZGVcbiAgICAgICAgaWYgKHRoaXMuaW5LZXl0aXBNb2RlIHx8ICF0aGlzLmRlbGF5VXBkYXRpbmdLZXl0aXBDaGFuZ2UpIHtcbiAgICAgICAgICAgIHZhciBldmVudF8xID0gcGVyc2lzdGVkID8gS2V5dGlwRXZlbnRzLlBFUlNJU1RFRF9LRVlUSVBfQURERUQgOiBLZXl0aXBFdmVudHMuS0VZVElQX0FEREVEO1xuICAgICAgICAgICAgRXZlbnRHcm91cC5yYWlzZSh0aGlzLCBldmVudF8xLCB7XG4gICAgICAgICAgICAgICAga2V5dGlwOiBwcm9wcyxcbiAgICAgICAgICAgICAgICB1bmlxdWVJRDogdW5pcXVlS2V5dGlwLnVuaXF1ZUlELFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuaXF1ZUtleXRpcC51bmlxdWVJRDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBhIGtleXRpcFxuICAgICAqXG4gICAgICogQHBhcmFtIGtleXRpcFByb3BzIC0gS2V5dGlwIHRvIHVwZGF0ZVxuICAgICAqIEBwYXJhbSB1bmlxdWVJRCAtIFVuaXF1ZSBJRCBvZiB0aGlzIGtleXRpcFxuICAgICAqL1xuICAgIEtleXRpcE1hbmFnZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChrZXl0aXBQcm9wcywgdW5pcXVlSUQpIHtcbiAgICAgICAgdmFyIG5ld0tleXRpcFByb3BzID0gdGhpcy5hZGRQYXJlbnRPdmVyZmxvdyhrZXl0aXBQcm9wcyk7XG4gICAgICAgIHZhciB1bmlxdWVLZXl0aXAgPSB0aGlzLl9nZXRVbmlxdWVLdHAobmV3S2V5dGlwUHJvcHMsIHVuaXF1ZUlEKTtcbiAgICAgICAgdmFyIG9sZEtleVRpcCA9IHRoaXMua2V5dGlwc1t1bmlxdWVJRF07XG4gICAgICAgIGlmIChvbGRLZXlUaXApIHtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBldmVyeXRoaW5nIGV4Y2VwdCAndmlzaWJsZSdcbiAgICAgICAgICAgIHVuaXF1ZUtleXRpcC5rZXl0aXAudmlzaWJsZSA9IG9sZEtleVRpcC5rZXl0aXAudmlzaWJsZTtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBrZXl0aXAgaW4gdGhpcy5rZXl0aXBzXG4gICAgICAgICAgICB0aGlzLmtleXRpcHNbdW5pcXVlSURdID0gdW5pcXVlS2V5dGlwO1xuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBzZXF1ZW5jZSB0byBiZSB1cCB0byBkYXRlXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5zZXF1ZW5jZU1hcHBpbmdbb2xkS2V5VGlwLmtleXRpcC5rZXlTZXF1ZW5jZXMudG9TdHJpbmcoKV07XG4gICAgICAgICAgICB0aGlzLnNlcXVlbmNlTWFwcGluZ1t1bmlxdWVLZXl0aXAua2V5dGlwLmtleVNlcXVlbmNlcy50b1N0cmluZygpXSA9IHVuaXF1ZUtleXRpcC5rZXl0aXA7XG4gICAgICAgICAgICAvLyBSYWlzZSBldmVudCBvbmx5IGlmIHdlIGFyZSBjdXJyZW50bHkgaW4ga2V5dGlwIG1vZGVcbiAgICAgICAgICAgIGlmICh0aGlzLmluS2V5dGlwTW9kZSB8fCAhdGhpcy5kZWxheVVwZGF0aW5nS2V5dGlwQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgRXZlbnRHcm91cC5yYWlzZSh0aGlzLCBLZXl0aXBFdmVudHMuS0VZVElQX1VQREFURUQsIHtcbiAgICAgICAgICAgICAgICAgICAga2V5dGlwOiB1bmlxdWVLZXl0aXAua2V5dGlwLFxuICAgICAgICAgICAgICAgICAgICB1bmlxdWVJRDogdW5pcXVlS2V5dGlwLnVuaXF1ZUlELFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBVbnJlZ2lzdGVycyBhIGtleXRpcFxuICAgICAqXG4gICAgICogQHBhcmFtIGtleXRpcFRvUmVtb3ZlIC0gSUtleXRpcFByb3BzIG9mIHRoZSBrZXl0aXAgdG8gcmVtb3ZlXG4gICAgICogQHBhcmFtIHVuaXF1ZUlEIC0gVW5pcXVlIElEIG9mIHRoaXMga2V5dGlwXG4gICAgICogQHBhcmFtIHBlcnNpc3RlZCAtIFQvRiBpZiB0aGlzIGtleXRpcCBzaG91bGQgYmUgcGVyc2lzdGVkLCBkZWZhdWx0IGlzIGZhbHNlXG4gICAgICovXG4gICAgS2V5dGlwTWFuYWdlci5wcm90b3R5cGUudW5yZWdpc3RlciA9IGZ1bmN0aW9uIChrZXl0aXBUb1JlbW92ZSwgdW5pcXVlSUQsIHBlcnNpc3RlZCkge1xuICAgICAgICBpZiAocGVyc2lzdGVkID09PSB2b2lkIDApIHsgcGVyc2lzdGVkID0gZmFsc2U7IH1cbiAgICAgICAgcGVyc2lzdGVkID8gZGVsZXRlIHRoaXMucGVyc2lzdGVkS2V5dGlwc1t1bmlxdWVJRF0gOiBkZWxldGUgdGhpcy5rZXl0aXBzW3VuaXF1ZUlEXTtcbiAgICAgICAgIXBlcnNpc3RlZCAmJiBkZWxldGUgdGhpcy5zZXF1ZW5jZU1hcHBpbmdba2V5dGlwVG9SZW1vdmUua2V5U2VxdWVuY2VzLnRvU3RyaW5nKCldO1xuICAgICAgICB2YXIgZXZlbnQgPSBwZXJzaXN0ZWQgPyBLZXl0aXBFdmVudHMuUEVSU0lTVEVEX0tFWVRJUF9SRU1PVkVEIDogS2V5dGlwRXZlbnRzLktFWVRJUF9SRU1PVkVEO1xuICAgICAgICAvLyBVcGRhdGUga2V5dGlwcyBvbmx5IGlmIHdlJ3JlIGluIGtleXRpcCBtb2RlXG4gICAgICAgIGlmICh0aGlzLmluS2V5dGlwTW9kZSB8fCAhdGhpcy5kZWxheVVwZGF0aW5nS2V5dGlwQ2hhbmdlKSB7XG4gICAgICAgICAgICBFdmVudEdyb3VwLnJhaXNlKHRoaXMsIGV2ZW50LCB7XG4gICAgICAgICAgICAgICAga2V5dGlwOiBrZXl0aXBUb1JlbW92ZSxcbiAgICAgICAgICAgICAgICB1bmlxdWVJRDogdW5pcXVlSUQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogTWFudWFsIGNhbGwgdG8gZW50ZXIga2V5dGlwIG1vZGVcbiAgICAgKi9cbiAgICBLZXl0aXBNYW5hZ2VyLnByb3RvdHlwZS5lbnRlcktleXRpcE1vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIEV2ZW50R3JvdXAucmFpc2UodGhpcywgS2V5dGlwRXZlbnRzLkVOVEVSX0tFWVRJUF9NT0RFKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1hbnVhbCBjYWxsIHRvIGV4aXQga2V5dGlwIG1vZGVcbiAgICAgKi9cbiAgICBLZXl0aXBNYW5hZ2VyLnByb3RvdHlwZS5leGl0S2V5dGlwTW9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgRXZlbnRHcm91cC5yYWlzZSh0aGlzLCBLZXl0aXBFdmVudHMuRVhJVF9LRVlUSVBfTU9ERSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBJS2V5dGlwUHJvcHMgZnJvbSB0aGlzLmtleXRpcHNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEFsbCBrZXl0aXBzIHN0b3JlZCBpbiB0aGUgbWFuYWdlclxuICAgICAqL1xuICAgIEtleXRpcE1hbmFnZXIucHJvdG90eXBlLmdldEtleXRpcHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmtleXRpcHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBfdGhpcy5rZXl0aXBzW2tleV0ua2V5dGlwOyB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIG92ZXJmbG93U2V0U2VxdWVuY2UgdG8gdGhlIGtleXRpcFByb3BzIGlmIGl0cyBwYXJlbnQga2V5dGlwIGFsc28gaGFzIGl0XG4gICAgICpcbiAgICAgKiBAcGFyYW0ga2V5dGlwUHJvcHMgLSBLZXl0aXAgcHJvcHMgdG8gYWRkIG92ZXJmbG93U2V0U2VxdWVuY2UgdG8gaWYgbmVjZXNzYXJ5XG4gICAgICogQHJldHVybnMgLSBNb2RpZmllZCBrZXl0aXAgcHJvcHMsIGlmIG5lZWRlZCB0byBiZSBtb2RpZmllZFxuICAgICAqL1xuICAgIEtleXRpcE1hbmFnZXIucHJvdG90eXBlLmFkZFBhcmVudE92ZXJmbG93ID0gZnVuY3Rpb24gKGtleXRpcFByb3BzKSB7XG4gICAgICAgIHZhciBmdWxsU2VxdWVuY2UgPSBfX3NwcmVhZEFycmF5cyhrZXl0aXBQcm9wcy5rZXlTZXF1ZW5jZXMpO1xuICAgICAgICBmdWxsU2VxdWVuY2UucG9wKCk7XG4gICAgICAgIGlmIChmdWxsU2VxdWVuY2UubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB2YXIgcGFyZW50S2V5dGlwID0gdGhpcy5zZXF1ZW5jZU1hcHBpbmdbZnVsbFNlcXVlbmNlLnRvU3RyaW5nKCldO1xuICAgICAgICAgICAgaWYgKHBhcmVudEtleXRpcCAmJiBwYXJlbnRLZXl0aXAub3ZlcmZsb3dTZXRTZXF1ZW5jZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwga2V5dGlwUHJvcHMpLCB7IG92ZXJmbG93U2V0U2VxdWVuY2U6IHBhcmVudEtleXRpcC5vdmVyZmxvd1NldFNlcXVlbmNlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXl0aXBQcm9wcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFB1YmxpYyBmdW5jdGlvbiB0byBiaW5kIGZvciBvdmVyZmxvdyBpdGVtcyB0aGF0IGhhdmUgYSBzdWJtZW51XG4gICAgICovXG4gICAgS2V5dGlwTWFuYWdlci5wcm90b3R5cGUubWVudUV4ZWN1dGUgPSBmdW5jdGlvbiAob3ZlcmZsb3dCdXR0b25TZXF1ZW5jZXMsIGtleXRpcFNlcXVlbmNlcykge1xuICAgICAgICBFdmVudEdyb3VwLnJhaXNlKHRoaXMsIEtleXRpcEV2ZW50cy5QRVJTSVNURURfS0VZVElQX0VYRUNVVEUsIHtcbiAgICAgICAgICAgIG92ZXJmbG93QnV0dG9uU2VxdWVuY2VzOiBvdmVyZmxvd0J1dHRvblNlcXVlbmNlcyxcbiAgICAgICAgICAgIGtleXRpcFNlcXVlbmNlczoga2V5dGlwU2VxdWVuY2VzLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gSVVuaXF1ZUtleXRpcCBvYmplY3RcbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXl0aXBQcm9wcyAtIElLZXl0aXBQcm9wc1xuICAgICAqIEBwYXJhbSB1bmlxdWVJRCAtIFVuaXF1ZSBJRCwgd2lsbCBkZWZhdWx0IHRvIHRoZSBuZXh0IHVuaXF1ZSBJRCBpZiBub3QgcGFzc2VkXG4gICAgICogQHJldHVybnMgSVVuaXF1ZUtleXRpcCBvYmplY3RcbiAgICAgKi9cbiAgICBLZXl0aXBNYW5hZ2VyLnByb3RvdHlwZS5fZ2V0VW5pcXVlS3RwID0gZnVuY3Rpb24gKGtleXRpcFByb3BzLCB1bmlxdWVJRCkge1xuICAgICAgICBpZiAodW5pcXVlSUQgPT09IHZvaWQgMCkgeyB1bmlxdWVJRCA9IGdldElkKCk7IH1cbiAgICAgICAgcmV0dXJuIHsga2V5dGlwOiBfX2Fzc2lnbih7fSwga2V5dGlwUHJvcHMpLCB1bmlxdWVJRDogdW5pcXVlSUQgfTtcbiAgICB9O1xuICAgIEtleXRpcE1hbmFnZXIuX2luc3RhbmNlID0gbmV3IEtleXRpcE1hbmFnZXIoKTtcbiAgICByZXR1cm4gS2V5dGlwTWFuYWdlcjtcbn0oKSk7XG5leHBvcnQgeyBLZXl0aXBNYW5hZ2VyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1LZXl0aXBNYW5hZ2VyLmpzLm1hcCIsIi8qKlxuICogSGVscGVyIHRvIGZpbmQgdGhlIGluZGV4IG9mIGFuIGl0ZW0gd2l0aGluIGFuIGFycmF5LCB1c2luZyBhIGNhbGxiYWNrIHRvXG4gKiBkZXRlcm1pbmUgdGhlIG1hdGNoLlxuICpcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSBhcnJheSAtIEFycmF5IHRvIHNlYXJjaC5cbiAqIEBwYXJhbSBjYiAtIENhbGxiYWNrIHdoaWNoIHJldHVybnMgdHJ1ZSBvbiBtYXRjaGVzLlxuICogQHBhcmFtIGZyb21JbmRleCAtIE9wdGlvbmFsIGluZGV4IHRvIHN0YXJ0IGZyb20gKGRlZmF1bHRzIHRvIDApXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIGNiLCBmcm9tSW5kZXgpIHtcbiAgICBpZiAoZnJvbUluZGV4ID09PSB2b2lkIDApIHsgZnJvbUluZGV4ID0gMDsgfVxuICAgIHZhciBpbmRleCA9IC0xO1xuICAgIGZvciAodmFyIGkgPSBmcm9tSW5kZXg7IGFycmF5ICYmIGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoY2IoYXJyYXlbaV0sIGkpKSB7XG4gICAgICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG59XG4vKipcbiAqIEhlbHBlciB0byBmaW5kIHRoZSBmaXJzdCBpdGVtIHdpdGhpbiBhbiBhcnJheSB0aGF0IHNhdGlzZmllcyB0aGUgY2FsbGJhY2suXG4gKiBAcGFyYW0gYXJyYXkgLSBBcnJheSB0byBzZWFyY2hcbiAqIEBwYXJhbSBjYiAtIENhbGxiYWNrIHdoaWNoIHJldHVybnMgdHJ1ZSBvbiBtYXRjaGVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kKGFycmF5LCBjYikge1xuICAgIHZhciBpbmRleCA9IGZpbmRJbmRleChhcnJheSwgY2IpO1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5W2luZGV4XTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBhIGdpdmVuIHNpemUgYW5kIGhlbHBlciBtZXRob2QgdG8gcG9wdWxhdGUuXG4gKlxuICogQHB1YmxpY1xuICogQHBhcmFtIHNpemUgLSBTaXplIG9mIGFycmF5LlxuICogQHBhcmFtIGdldEl0ZW0gLSBDYWxsYmFjayB0byBwb3B1bGF0ZSBnaXZlbiBjZWxsIGluZGV4LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQXJyYXkoc2l6ZSwgZ2V0SXRlbSkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICAgIGFycmF5LnB1c2goZ2V0SXRlbShpKSk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbn1cbi8qKlxuICogQ29udmVydCB0aGUgZ2l2ZW4gYXJyYXkgdG8gYSBtYXRyaXggd2l0aCBjb2x1bW5Db3VudCBudW1iZXJcbiAqIG9mIGNvbHVtbnMuXG4gKlxuICogQHB1YmxpY1xuICogQHBhcmFtIGl0ZW1zIC0gVGhlIGFycmF5IHRvIGNvbnZlcnRcbiAqIEBwYXJhbSBjb2x1bW5Db3VudCAtIFRoZSBudW1iZXIgb2YgY29sdW1ucyBmb3IgdGhlIHJlc3VsdGluZyBtYXRyaXhcbiAqIEByZXR1cm5zIEEgbWF0cml4IG9mIGl0ZW1zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b01hdHJpeChpdGVtcywgY29sdW1uQ291bnQpIHtcbiAgICByZXR1cm4gaXRlbXMucmVkdWNlKGZ1bmN0aW9uIChyb3dzLCBjdXJyZW50VmFsdWUsIGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCAlIGNvbHVtbkNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICByb3dzLnB1c2goW2N1cnJlbnRWYWx1ZV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcm93c1tyb3dzLmxlbmd0aCAtIDFdLnB1c2goY3VycmVudFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcm93cztcbiAgICB9LCBbXSk7XG59XG4vKipcbiAqIEdpdmVuIGFuIGFycmF5LCBpdCByZXR1cm5zIGEgbmV3IGFycmF5IHRoYXQgZG9lcyBub3QgY29udGFpbiB0aGUgaXRlbSBhdCB0aGUgZ2l2ZW4gaW5kZXguXG4gKiBAcGFyYW0gYXJyYXkgLSBUaGUgYXJyYXkgdG8gb3BlcmF0ZSBvblxuICogQHBhcmFtIGluZGV4IC0gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJlbW92ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlSW5kZXgoYXJyYXksIGluZGV4KSB7XG4gICAgcmV0dXJuIGFycmF5LmZpbHRlcihmdW5jdGlvbiAoXywgaSkgeyByZXR1cm4gaW5kZXggIT09IGk7IH0pO1xufVxuLyoqXG4gKiBHaXZlbiBhbiBhcnJheSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgbmV3IGFycmF5IHdoZXJlIHRoZSBlbGVtZW50IGF0IGEgZ2l2ZW4gaW5kZXggaGFzIGJlZW4gcmVwbGFjZWQuXG4gKiBAcGFyYW0gYXJyYXkgLSBUaGUgYXJyYXkgdG8gb3BlcmF0ZSBvblxuICogQHBhcmFtIG5ld0VsZW1lbnQgLSBUaGUgZWxlbWVudCB0aGF0IHdpbGwgYmUgcGxhY2VkIGluIHRoZSBuZXcgYXJyYXlcbiAqIEBwYXJhbSBpbmRleCAtIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0aGF0IHNob3VsZCBiZSByZXBsYWNlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZUVsZW1lbnQoYXJyYXksIG5ld0VsZW1lbnQsIGluZGV4KSB7XG4gICAgdmFyIGNvcHkgPSBhcnJheS5zbGljZSgpO1xuICAgIGNvcHlbaW5kZXhdID0gbmV3RWxlbWVudDtcbiAgICByZXR1cm4gY29weTtcbn1cbi8qKlxuICogR2l2ZW4gYW4gYXJyYXksIHRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIG5ldyBhcnJheSB3aGVyZSBhbiBlbGVtZW50IGhhcyBiZWVuIGluc2VydGVkIGF0IHRoZSBnaXZlbiBpbmRleC5cbiAqIEBwYXJhbSBhcnJheSAtIFRoZSBhcnJheSB0byBvcGVyYXRlIG9uXG4gKiBAcGFyYW0gaW5kZXggLSBUaGUgaW5kZXggd2hlcmUgYW4gZWxlbWVudCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAqIEBwYXJhbSBpdGVtVG9BZGQgLSBUaGUgZWxlbWVudCB0byBpbnNlcnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZEVsZW1lbnRBdEluZGV4KGFycmF5LCBpbmRleCwgaXRlbVRvQWRkKSB7XG4gICAgdmFyIGNvcHkgPSBhcnJheS5zbGljZSgpO1xuICAgIGNvcHkuc3BsaWNlKGluZGV4LCAwLCBpdGVtVG9BZGQpO1xuICAgIHJldHVybiBjb3B5O1xufVxuLyoqXG4gKiBHaXZlbiBhbiBhcnJheSB3aGVyZSBlYWNoIGVsZW1lbnQgaXMgb2YgdHlwZSBUIG9yIFRbXSwgZmxhdHRlbiBpdCBpbnRvIGFuIGFycmF5IG9mIFRcbiAqIEBwYXJhbSBhcnJheSAtIFRoZSBhcnJheSB3aGVyZSBlYWNoIGVsZW1lbnQgY2FuIG9wdGlvbmFsbHkgYWxzbyBiZSBhbiBhcnJheVxuICovXG5leHBvcnQgZnVuY3Rpb24gZmxhdHRlbihhcnJheSkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiAocmVzdWx0ID0gcmVzdWx0LmNvbmNhdChpdGVtKSk7IH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFJldHVybnMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIHR3byBnaXZlbiBhcnJheXMgYXJlIGVxdWFsIGluIGxlbmd0aCBhbmQgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSBhcnJheTEgLSBGaXJzdCBhcnJheSB0byBjb21wYXJlXG4gKiBAcGFyYW0gYXJyYXkyIC0gU2Vjb25kIGFycmF5IHRvIGNvbXBhcmVcbiAqIEByZXR1cm5zIFRydWUgaWYgdGhlIGFycmF5cyBhcmUgdGhlIHNhbWUgbGVuZ3RoIGFuZCBoYXZlIHRoZSBzYW1lIHZhbHVlcyBpbiB0aGUgc2FtZSBwb3NpdGlvbnMsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFycmF5c0VxdWFsKGFycmF5MSwgYXJyYXkyKSB7XG4gICAgaWYgKGFycmF5MS5sZW5ndGggIT09IGFycmF5Mi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5MS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYXJyYXkxW2ldICE9PSBhcnJheTJbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFycmF5LmpzLm1hcCIsImltcG9ydCB7IF9fc3ByZWFkQXJyYXlzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBLVFBfU0VQQVJBVE9SLCBLVFBfUFJFRklYLCBEQVRBS1RQX1RBUkdFVCwgREFUQUtUUF9FWEVDVVRFX1RBUkdFVCwgS1RQX0xBWUVSX0lEIH0gZnJvbSAnLi9LZXl0aXBDb25zdGFudHMnO1xuaW1wb3J0IHsgYWRkRWxlbWVudEF0SW5kZXggfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuLyoqXG4gKiBDb252ZXJ0cyBhIHdob2xlIHNldCBvZiBLZXlTZXF1ZW5jZXMgaW50byBvbmUga2V5dGlwIElELCB3aGljaCB3aWxsIGJlIHRoZSBJRCBmb3IgdGhlIGxhc3Qga2V5dGlwIHNlcXVlbmNlIHNwZWNpZmllZFxuICoga2V5U2VxdWVuY2VzIHNob3VsZCBub3QgaW5jbHVkZSB0aGUgaW5pdGlhbCBrZXl0aXAgJ3N0YXJ0JyBzZXF1ZW5jZS5cbiAqXG4gKiBAcGFyYW0ga2V5U2VxdWVuY2VzIC0gRnVsbCBwYXRoIG9mIElLZXlTZXF1ZW5jZXMgZm9yIG9uZSBrZXl0aXAuXG4gKiBAcmV0dXJucyBTdHJpbmcgdG8gdXNlIGZvciB0aGUga2V5dGlwIElELlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VxdWVuY2VzVG9JRChrZXlTZXF1ZW5jZXMpIHtcbiAgICByZXR1cm4ga2V5U2VxdWVuY2VzLnJlZHVjZShmdW5jdGlvbiAocHJldlZhbHVlLCBrZXlTZXF1ZW5jZSkge1xuICAgICAgICByZXR1cm4gcHJldlZhbHVlICsgS1RQX1NFUEFSQVRPUiArIGtleVNlcXVlbmNlLnNwbGl0KCcnKS5qb2luKEtUUF9TRVBBUkFUT1IpO1xuICAgIH0sIEtUUF9QUkVGSVgpO1xufVxuLyoqXG4gKiBNZXJnZXMgYW4gb3ZlcmZsb3cgc2VxdWVuY2Ugd2l0aCBhIGtleSBzZXF1ZW5jZS5cbiAqXG4gKiBAcGFyYW0ga2V5U2VxdWVuY2VzIC0gRnVsbCBzZXF1ZW5jZSBmb3Igb25lIGtleXRpcC5cbiAqIEBwYXJhbSBvdmVyZmxvd0tleVNlcXVlbmNlcyAtIEZ1bGwgb3ZlcmZsb3cga2V5dGlwIHNlcXVlbmNlLlxuICogQHJldHVybnMgU2VxdWVuY2UgdGhhdCB3aWxsIGJlIHVzZWQgYnkgdGhlIGtleXRpcCB3aGVuIGluIHRoZSBvdmVyZmxvdy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlT3ZlcmZsb3dzKGtleVNlcXVlbmNlcywgb3ZlcmZsb3dLZXlTZXF1ZW5jZXMpIHtcbiAgICB2YXIgb3ZlcmZsb3dTZXF1ZW5jZUxlbiA9IG92ZXJmbG93S2V5U2VxdWVuY2VzLmxlbmd0aDtcbiAgICB2YXIgb3ZlcmZsb3dTZXF1ZW5jZSA9IF9fc3ByZWFkQXJyYXlzKG92ZXJmbG93S2V5U2VxdWVuY2VzKS5wb3AoKTtcbiAgICB2YXIgbmV3S2V5U2VxdWVuY2VzID0gX19zcHJlYWRBcnJheXMoa2V5U2VxdWVuY2VzKTtcbiAgICByZXR1cm4gYWRkRWxlbWVudEF0SW5kZXgobmV3S2V5U2VxdWVuY2VzLCBvdmVyZmxvd1NlcXVlbmNlTGVuIC0gMSwgb3ZlcmZsb3dTZXF1ZW5jZSk7XG59XG4vKipcbiAqIENvbnN0cnVjdHMgdGhlIGRhdGEta3RwLXRhcmdldCBhdHRyaWJ1dGUgc2VsZWN0b3IgZnJvbSBhIGZ1bGwga2V5IHNlcXVlbmNlLlxuICpcbiAqIEBwYXJhbSBrZXlTZXF1ZW5jZXMgLSBGdWxsIHN0cmluZ1tdIGZvciBhIEtleXRpcC5cbiAqIEByZXR1cm5zIFN0cmluZyBzZWxlY3RvciB0byB1c2UgdG8gcXVlcnkgZm9yIHRoZSBrZXl0aXAgdGFyZ2V0LlxuICovXG5leHBvcnQgZnVuY3Rpb24ga3RwVGFyZ2V0RnJvbVNlcXVlbmNlcyhrZXlTZXF1ZW5jZXMpIHtcbiAgICByZXR1cm4gJ1snICsgREFUQUtUUF9UQVJHRVQgKyAnPVwiJyArIHNlcXVlbmNlc1RvSUQoa2V5U2VxdWVuY2VzKSArICdcIl0nO1xufVxuLyoqXG4gKiBDb25zdHJ1Y3RzIHRoZSBkYXRhLWt0cC1leGVjdXRlLXRhcmdldCBhdHRyaWJ1dGUgc2VsZWN0b3IgZnJvbSBhIGtleXRpcCBJRC5cbiAqXG4gKiBAcGFyYW0ga2V5dGlwSWQgLSBJRCBvZiB0aGUgS2V5dGlwLlxuICogQHJldHVybnMgU3RyaW5nIHNlbGVjdG9yIHRvIHVzZSB0byBxdWVyeSBmb3IgdGhlIGtleXRpcCBleGVjdXRlIHRhcmdldC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGt0cFRhcmdldEZyb21JZChrZXl0aXBJZCkge1xuICAgIHJldHVybiAnWycgKyBEQVRBS1RQX0VYRUNVVEVfVEFSR0VUICsgJz1cIicgKyBrZXl0aXBJZCArICdcIl0nO1xufVxuLyoqXG4gKiBHZXRzIHRoZSBhcmlhLWRlc2NyaWJlZGJ5IHZhbHVlIHRvIHB1dCBvbiB0aGUgY29tcG9uZW50IHdpdGggdGhpcyBrZXl0aXAuXG4gKlxuICogQHBhcmFtIGtleVNlcXVlbmNlcyAtIEtleVNlcXVlbmNlcyBvZiB0aGUga2V5dGlwLlxuICogQHJldHVybnMgVGhlIGFyaWEtZGVzY3JpYmVkYnkgdmFsdWUgdG8gc2V0IG9uIHRoZSBjb21wb25lbnQgd2l0aCB0aGlzIGtleXRpcC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFyaWFEZXNjcmliZWRCeShrZXlTZXF1ZW5jZXMpIHtcbiAgICB2YXIgZGVzY3JpYmVkYnkgPSAnICcgKyBLVFBfTEFZRVJfSUQ7XG4gICAgaWYgKCFrZXlTZXF1ZW5jZXMubGVuZ3RoKSB7XG4gICAgICAgIC8vIFJldHVybiBqdXN0IHRoZSBsYXllciBJRFxuICAgICAgICByZXR1cm4gZGVzY3JpYmVkYnk7XG4gICAgfVxuICAgIHJldHVybiBkZXNjcmliZWRieSArICcgJyArIHNlcXVlbmNlc1RvSUQoa2V5U2VxdWVuY2VzKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUtleXRpcFV0aWxzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX3NwcmVhZEFycmF5cyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlQ29uc3QsIHVzZVByZXZpb3VzIH0gZnJvbSAnQHVpZmFicmljL3JlYWN0LWhvb2tzJztcbmltcG9ydCB7IG1lcmdlQXJpYUF0dHJpYnV0ZVZhbHVlcyB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBLZXl0aXBNYW5hZ2VyLCBtZXJnZU92ZXJmbG93cywgc2VxdWVuY2VzVG9JRCwgZ2V0QXJpYURlc2NyaWJlZEJ5IH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL2tleXRpcHMvaW5kZXgnO1xuLyoqXG4gKiBIb29rIHRoYXQgY3JlYXRlcyBhdHRyaWJ1dGVzIGZvciBjb21wb25lbnRzIHdoaWNoIGFyZSBlbmFibGVkIHdpdGggS2V5dGlwLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlS2V5dGlwRGF0YShvcHRpb25zKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICB2YXIgdW5pcXVlSWQgPSBSZWFjdC51c2VSZWYoKTtcbiAgICB2YXIga2V5dGlwUHJvcHMgPSBvcHRpb25zLmtleXRpcFByb3BzXG4gICAgICAgID8gX19hc3NpZ24oeyBkaXNhYmxlZDogb3B0aW9ucy5kaXNhYmxlZCB9LCBvcHRpb25zLmtleXRpcFByb3BzKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIga2V5dGlwTWFuYWdlciA9IHVzZUNvbnN0KEtleXRpcE1hbmFnZXIuZ2V0SW5zdGFuY2UoKSk7XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gUmVnaXN0ZXIgS2V5dGlwIGluIEtleXRpcE1hbmFnZXJcbiAgICAgICAgaWYgKGtleXRpcFByb3BzKSB7XG4gICAgICAgICAgICB1bmlxdWVJZC5jdXJyZW50ID0ga2V5dGlwTWFuYWdlci5yZWdpc3RlcihrZXl0aXBQcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIFVucmVnaXN0ZXIgS2V5dGlwIGluIEtleXRpcE1hbmFnZXJcbiAgICAgICAgICAgIGtleXRpcFByb3BzICYmIGtleXRpcE1hbmFnZXIudW5yZWdpc3RlcihrZXl0aXBQcm9wcywgdW5pcXVlSWQuY3VycmVudCk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIHRoaXMgaXMgbWVhbnQgdG8gcnVuIG9ubHkgYXQgbW91bnQsIGFuZCB1cGRhdGVzIGFyZSBoYW5kbGVkIHNlcGFyYXRlbHlcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgIH0sIFtdKTtcbiAgICB2YXIgcHJldk9wdGlvbnMgPSB1c2VQcmV2aW91cyhvcHRpb25zKTtcbiAgICBpZiAodW5pcXVlSWQuY3VycmVudCAmJlxuICAgICAgICBrZXl0aXBQcm9wcyAmJlxuICAgICAgICAoKChfYSA9IHByZXZPcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eua2V5dGlwUHJvcHMpICE9PSBvcHRpb25zLmtleXRpcFByb3BzIHx8ICgoX2IgPSBwcmV2T3B0aW9ucykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmRpc2FibGVkKSAhPT0gb3B0aW9ucy5kaXNhYmxlZCkpIHtcbiAgICAgICAga2V5dGlwTWFuYWdlci51cGRhdGUoa2V5dGlwUHJvcHMsIHVuaXF1ZUlkLmN1cnJlbnQpO1xuICAgIH1cbiAgICB2YXIgbmF0aXZlS2V5dGlwUHJvcHMgPSB7XG4gICAgICAgIGFyaWFEZXNjcmliZWRCeTogdW5kZWZpbmVkLFxuICAgICAgICBrZXl0aXBJZDogdW5kZWZpbmVkLFxuICAgIH07XG4gICAgaWYgKGtleXRpcFByb3BzKSB7XG4gICAgICAgIG5hdGl2ZUtleXRpcFByb3BzID0gZ2V0S2V5dGlwRGF0YShrZXl0aXBNYW5hZ2VyLCBrZXl0aXBQcm9wcywgb3B0aW9ucy5hcmlhRGVzY3JpYmVkQnkpO1xuICAgIH1cbiAgICByZXR1cm4gbmF0aXZlS2V5dGlwUHJvcHM7XG59XG4vKipcbiAqIEdldHMgdGhlIGFyaWEtIGFuZCBkYXRhLSBhdHRyaWJ1dGVzIHRvIGF0dGFjaCB0byB0aGUgY29tcG9uZW50XG4gKiBAcGFyYW0ga2V5dGlwUHJvcHMgLSBvcHRpb25zIGZvciBLZXl0aXBcbiAqIEBwYXJhbSBkZXNjcmliZWRCeVByZXBlbmQgLSBhcmlhRGVzY3JpYmVkQnkgdmFsdWUgdG8gcHJlcGVuZFxuICovXG5mdW5jdGlvbiBnZXRLZXl0aXBEYXRhKGtleXRpcE1hbmFnZXIsIGtleXRpcFByb3BzLCBkZXNjcmliZWRCeVByZXBlbmQpIHtcbiAgICAvLyBBZGQgdGhlIHBhcmVudCBvdmVyZmxvdyBzZXF1ZW5jZSBpZiBuZWNlc3NhcnlcbiAgICB2YXIgbmV3S2V5dGlwUHJvcHMgPSBrZXl0aXBNYW5hZ2VyLmFkZFBhcmVudE92ZXJmbG93KGtleXRpcFByb3BzKTtcbiAgICAvLyBDb25zdHJ1Y3QgYXJpYS1kZXNjcmliZWRieSBhbmQgZGF0YS1rdHAtaWQgYXR0cmlidXRlc1xuICAgIHZhciBhcmlhRGVzY3JpYmVkQnkgPSBtZXJnZUFyaWFBdHRyaWJ1dGVWYWx1ZXMoZGVzY3JpYmVkQnlQcmVwZW5kLCBnZXRBcmlhRGVzY3JpYmVkQnkobmV3S2V5dGlwUHJvcHMua2V5U2VxdWVuY2VzKSk7XG4gICAgdmFyIGtleVNlcXVlbmNlcyA9IF9fc3ByZWFkQXJyYXlzKG5ld0tleXRpcFByb3BzLmtleVNlcXVlbmNlcyk7XG4gICAgaWYgKG5ld0tleXRpcFByb3BzLm92ZXJmbG93U2V0U2VxdWVuY2UpIHtcbiAgICAgICAga2V5U2VxdWVuY2VzID0gbWVyZ2VPdmVyZmxvd3Moa2V5U2VxdWVuY2VzLCBuZXdLZXl0aXBQcm9wcy5vdmVyZmxvd1NldFNlcXVlbmNlKTtcbiAgICB9XG4gICAgdmFyIGtleXRpcElkID0gc2VxdWVuY2VzVG9JRChrZXlTZXF1ZW5jZXMpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGFyaWFEZXNjcmliZWRCeTogYXJpYURlc2NyaWJlZEJ5LFxuICAgICAgICBrZXl0aXBJZDoga2V5dGlwSWQsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUtleXRpcERhdGEuanMubWFwIiwiaW1wb3J0IHsgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEhvb2sga2VlcGluZyB0cmFjayBvZiBhIGdpdmVuIHZhbHVlIGZyb20gYSBwcmV2aW91cyBleGVjdXRpb24gb2YgdGhlIGNvbXBvbmVudCB0aGUgSG9vayBpcyB1c2VkIGluLlxuICpcbiAqIFNlZSBbUmVhY3QgSG9va3MgRkFRXShodHRwczovL3JlYWN0anMub3JnL2RvY3MvaG9va3MtZmFxLmh0bWwjaG93LXRvLWdldC10aGUtcHJldmlvdXMtcHJvcHMtb3Itc3RhdGUpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VQcmV2aW91cyh2YWx1ZSkge1xuICAgIHZhciByZWYgPSB1c2VSZWYoKTtcbiAgICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZWYuY3VycmVudDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZVByZXZpb3VzLmpzLm1hcCIsImltcG9ydCB7IF9fcmVzdCB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgREFUQUtUUF9UQVJHRVQsIERBVEFLVFBfRVhFQ1VURV9UQVJHRVQgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMva2V5dGlwcy9pbmRleCc7XG5pbXBvcnQgeyB1c2VLZXl0aXBEYXRhIH0gZnJvbSAnLi91c2VLZXl0aXBEYXRhJztcbi8qKlxuICogQSBzbWFsbCBlbGVtZW50IHRvIGhlbHAgdGhlIHRhcmdldCBjb21wb25lbnQgY29ycmVjdGx5IHJlYWQgb3V0IGl0cyBhcmlhLWRlc2NyaWJlZGJ5IGZvciBpdHMgS2V5dGlwXG4gKiB7QGRvY0NhdGVnb3J5IEtleXRpcHN9XG4gKi9cbmV4cG9ydCB2YXIgS2V5dGlwRGF0YSA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBfYTtcbiAgICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbiwga2V5dGlwRGF0YVByb3BzID0gX19yZXN0KHByb3BzLCBbXCJjaGlsZHJlblwiXSk7XG4gICAgdmFyIF9iID0gdXNlS2V5dGlwRGF0YShrZXl0aXBEYXRhUHJvcHMpLCBrZXl0aXBJZCA9IF9iLmtleXRpcElkLCBhcmlhRGVzY3JpYmVkQnkgPSBfYi5hcmlhRGVzY3JpYmVkQnk7XG4gICAgcmV0dXJuIGNoaWxkcmVuKChfYSA9IHt9LFxuICAgICAgICBfYVtEQVRBS1RQX1RBUkdFVF0gPSBrZXl0aXBJZCxcbiAgICAgICAgX2FbREFUQUtUUF9FWEVDVVRFX1RBUkdFVF0gPSBrZXl0aXBJZCxcbiAgICAgICAgX2FbJ2FyaWEtZGVzY3JpYmVkYnknXSA9IGFyaWFEZXNjcmliZWRCeSxcbiAgICAgICAgX2EpKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1LZXl0aXBEYXRhLmpzLm1hcCIsInZhciBfYTtcbmltcG9ydCB7IEtleUNvZGVzIH0gZnJvbSAnLi9LZXlDb2Rlcyc7XG52YXIgRGlyZWN0aW9uYWxLZXlDb2RlcyA9IChfYSA9IHt9LFxuICAgIF9hW0tleUNvZGVzLnVwXSA9IDEsXG4gICAgX2FbS2V5Q29kZXMuZG93bl0gPSAxLFxuICAgIF9hW0tleUNvZGVzLmxlZnRdID0gMSxcbiAgICBfYVtLZXlDb2Rlcy5yaWdodF0gPSAxLFxuICAgIF9hW0tleUNvZGVzLmhvbWVdID0gMSxcbiAgICBfYVtLZXlDb2Rlcy5lbmRdID0gMSxcbiAgICBfYVtLZXlDb2Rlcy50YWJdID0gMSxcbiAgICBfYVtLZXlDb2Rlcy5wYWdlVXBdID0gMSxcbiAgICBfYVtLZXlDb2Rlcy5wYWdlRG93bl0gPSAxLFxuICAgIF9hKTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBrZXljb2RlIGlzIGEgZGlyZWN0aW9uYWwga2V5Ym9hcmQga2V5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEaXJlY3Rpb25hbEtleUNvZGUod2hpY2gpIHtcbiAgICByZXR1cm4gISFEaXJlY3Rpb25hbEtleUNvZGVzW3doaWNoXTtcbn1cbi8qKlxuICogQWRkcyBhIGtleWNvZGUgdG8gdGhlIGxpc3Qgb2Yga2V5cyB0aGF0LCB3aGVuIHByZXNzZWQsIHNob3VsZCBjYXVzZSB0aGUgZm9jdXMgb3V0bGluZXMgdG8gYmUgdmlzaWJsZS5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gYWRkIGdsb2JhbCBzaG9ydGN1dCBrZXlzIHRoYXQgZGlyZWN0aW9uYWxseSBtb3ZlIGZyb20gc2VjdGlvbiB0byBzZWN0aW9uIHdpdGhpblxuICogYW4gYXBwIG9yIGJldHdlZW4gZm9jdXMgdHJhcCB6b25lcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZERpcmVjdGlvbmFsS2V5Q29kZSh3aGljaCkge1xuICAgIERpcmVjdGlvbmFsS2V5Q29kZXNbd2hpY2hdID0gMTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtleWJvYXJkLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMsIF9fcmVzdCB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2xhc3NOYW1lc0Z1bmN0aW9uLCBpbml0aWFsaXplQ29tcG9uZW50UmVmIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IEtleXRpcERhdGEgfSBmcm9tICcuLi8uLi9LZXl0aXBEYXRhJztcbnZhciBnZXRDbGFzc05hbWVzID0gY2xhc3NOYW1lc0Z1bmN0aW9uKCk7XG52YXIgTGlua0Jhc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKExpbmtCYXNlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIExpbmtCYXNlKHByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fbGluayA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgICAgICBfdGhpcy5fcmVuZGVyQ29udGVudCA9IGZ1bmN0aW9uIChrZXl0aXBBdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICBpZiAoa2V5dGlwQXR0cmlidXRlcyA9PT0gdm9pZCAwKSB7IGtleXRpcEF0dHJpYnV0ZXMgPSB7fTsgfVxuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIGRpc2FibGVkID0gX2EuZGlzYWJsZWQsIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSwgaHJlZiA9IF9hLmhyZWYsIHRoZW1lID0gX2EudGhlbWUsIHN0eWxlcyA9IF9hLnN0eWxlcztcbiAgICAgICAgICAgIHZhciBjbGFzc05hbWVzID0gZ2V0Q2xhc3NOYW1lcyhzdHlsZXMsIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgICBpc0J1dHRvbjogIWhyZWYsXG4gICAgICAgICAgICAgICAgaXNEaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgICAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgUm9vdFR5cGUgPSBfdGhpcy5fZ2V0Um9vdFR5cGUoX3RoaXMucHJvcHMpO1xuICAgICAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFJvb3RUeXBlLCBfX2Fzc2lnbih7fSwga2V5dGlwQXR0cmlidXRlcywgX3RoaXMuX2FkanVzdFByb3BzRm9yUm9vdFR5cGUoUm9vdFR5cGUsIF90aGlzLnByb3BzKSwgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMucm9vdCwgb25DbGljazogX3RoaXMuX29uQ2xpY2ssIHJlZjogX3RoaXMuX2xpbmssIFwiYXJpYS1kaXNhYmxlZFwiOiBkaXNhYmxlZCB9KSwgY2hpbGRyZW4pKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uQ2xpY2sgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLCBvbkNsaWNrID0gX2Eub25DbGljaywgZGlzYWJsZWQgPSBfYS5kaXNhYmxlZDtcbiAgICAgICAgICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChvbkNsaWNrKSB7XG4gICAgICAgICAgICAgICAgb25DbGljayhldik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGluaXRpYWxpemVDb21wb25lbnRSZWYoX3RoaXMpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIExpbmtCYXNlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIGRpc2FibGVkID0gX2EuZGlzYWJsZWQsIGtleXRpcFByb3BzID0gX2Eua2V5dGlwUHJvcHM7XG4gICAgICAgIGlmIChrZXl0aXBQcm9wcykge1xuICAgICAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KEtleXRpcERhdGEsIHsga2V5dGlwUHJvcHM6IGtleXRpcFByb3BzLCBhcmlhRGVzY3JpYmVkQnk6IHRoaXMucHJvcHNbJ2FyaWEtZGVzY3JpYmVkYnknXSwgZGlzYWJsZWQ6IGRpc2FibGVkIH0sIGZ1bmN0aW9uIChrZXl0aXBBdHRyaWJ1dGVzKSB7IHJldHVybiBfdGhpcy5fcmVuZGVyQ29udGVudChrZXl0aXBBdHRyaWJ1dGVzKTsgfSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9yZW5kZXJDb250ZW50KCk7XG4gICAgfTtcbiAgICBMaW5rQmFzZS5wcm90b3R5cGUuZm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5fbGluay5jdXJyZW50O1xuICAgICAgICBpZiAoY3VycmVudCAmJiBjdXJyZW50LmZvY3VzKSB7XG4gICAgICAgICAgICBjdXJyZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExpbmtCYXNlLnByb3RvdHlwZS5fYWRqdXN0UHJvcHNGb3JSb290VHlwZSA9IGZ1bmN0aW9uIChSb290VHlwZSwgcHJvcHMpIHtcbiAgICAgICAgLy8gRGVjb25zdHJ1Y3QgdGhlIHByb3BzIHNvIHdlIHJlbW92ZSBwcm9wcyBsaWtlIGBhc2AsIGB0aGVtZWAgYW5kIGBzdHlsZXNgXG4gICAgICAgIC8vIGFzIHRob3NlIHdpbGwgYWx3YXlzIGJlIHJlbW92ZWQuIFdlIGFsc28gdGFrZSBzb21lIHByb3BzIHRoYXQgYXJlIG9wdGlvbmFsXG4gICAgICAgIC8vIGJhc2VkIG9uIHRoZSBSb290VHlwZS5cbiAgICAgICAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sIGFzID0gcHJvcHMuYXMsIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsIHRhcmdldCA9IHByb3BzLnRhcmdldCwgaHJlZiA9IHByb3BzLmhyZWYsIHRoZW1lID0gcHJvcHMudGhlbWUsIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcywgc3R5bGVzID0gcHJvcHMuc3R5bGVzLCBjb21wb25lbnRSZWYgPSBwcm9wcy5jb21wb25lbnRSZWYsIGtleXRpcFByb3BzID0gcHJvcHMua2V5dGlwUHJvcHMsIHJlc3RQcm9wcyA9IF9fcmVzdChwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJhc1wiLCBcImRpc2FibGVkXCIsIFwidGFyZ2V0XCIsIFwiaHJlZlwiLCBcInRoZW1lXCIsIFwiZ2V0U3R5bGVzXCIsIFwic3R5bGVzXCIsIFwiY29tcG9uZW50UmVmXCIsIFwia2V5dGlwUHJvcHNcIl0pO1xuICAgICAgICAvLyBSb290VHlwZSB3aWxsIGJlIGEgc3RyaW5nIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhbiBodG1sIGNvbXBvbmVudFxuICAgICAgICBpZiAodHlwZW9mIFJvb3RUeXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBkaXNhYmxlZCBwcm9wIGZvciBhbmNob3IgZWxlbWVudHNcbiAgICAgICAgICAgIGlmIChSb290VHlwZSA9PT0gJ2EnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKHsgdGFyZ2V0OiB0YXJnZXQsIGhyZWY6IGRpc2FibGVkID8gdW5kZWZpbmVkIDogaHJlZiB9LCByZXN0UHJvcHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQWRkIHRoZSB0eXBlPSdidXR0b24nIHByb3AgZm9yIGJ1dHRvbiBlbGVtZW50c1xuICAgICAgICAgICAgaWYgKFJvb3RUeXBlID09PSAnYnV0dG9uJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbih7IHR5cGU6ICdidXR0b24nLCBkaXNhYmxlZDogZGlzYWJsZWQgfSwgcmVzdFByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgdGFyZ2V0IGFuZCBocmVmIHByb3BzIGZvciBhbGwgb3RoZXIgbm9uIGFuY2hvciBlbGVtZW50c1xuICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCByZXN0UHJvcHMpLCB7IGRpc2FibGVkOiBkaXNhYmxlZCB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXRhaW4gYWxsIHByb3BzIGV4Y2VwdCAnYXMnIGZvciBSZWFjdENvbXBvbmVudHNcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKHsgdGFyZ2V0OiB0YXJnZXQsIGhyZWY6IGhyZWYsIGRpc2FibGVkOiBkaXNhYmxlZCB9LCByZXN0UHJvcHMpO1xuICAgIH07XG4gICAgTGlua0Jhc2UucHJvdG90eXBlLl9nZXRSb290VHlwZSA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICBpZiAocHJvcHMuYXMpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9wcy5hcztcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcHMuaHJlZikge1xuICAgICAgICAgICAgcmV0dXJuICdhJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ2J1dHRvbic7XG4gICAgfTtcbiAgICByZXR1cm4gTGlua0Jhc2U7XG59KFJlYWN0LkNvbXBvbmVudCkpO1xuZXhwb3J0IHsgTGlua0Jhc2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUxpbmsuYmFzZS5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgZ2V0RWRnZUNocm9taXVtTm9IaWdoQ29udHJhc3RBZGp1c3RTZWxlY3RvciwgZ2V0R2xvYmFsQ2xhc3NOYW1lcywgSGlnaENvbnRyYXN0U2VsZWN0b3IgfSBmcm9tICcuLi8uLi9TdHlsaW5nJztcbnZhciBHbG9iYWxDbGFzc05hbWVzID0ge1xuICAgIHJvb3Q6ICdtcy1MaW5rJyxcbn07XG5leHBvcnQgdmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mO1xuICAgIHZhciBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsIGlzQnV0dG9uID0gcHJvcHMuaXNCdXR0b24sIGlzRGlzYWJsZWQgPSBwcm9wcy5pc0Rpc2FibGVkLCB0aGVtZSA9IHByb3BzLnRoZW1lO1xuICAgIHZhciBzZW1hbnRpY0NvbG9ycyA9IHRoZW1lLnNlbWFudGljQ29sb3JzO1xuICAgIC8vIFRva2Vuc1xuICAgIHZhciBsaW5rQ29sb3IgPSBzZW1hbnRpY0NvbG9ycy5saW5rO1xuICAgIHZhciBsaW5rSW50ZXJhY3RlZENvbG9yID0gc2VtYW50aWNDb2xvcnMubGlua0hvdmVyZWQ7XG4gICAgdmFyIGxpbmtEaXNhYmxlZENvbG9yID0gc2VtYW50aWNDb2xvcnMuZGlzYWJsZWRUZXh0O1xuICAgIHZhciBmb2N1c0JvcmRlckNvbG9yID0gc2VtYW50aWNDb2xvcnMuZm9jdXNCb3JkZXI7XG4gICAgdmFyIGNsYXNzTmFtZXMgPSBnZXRHbG9iYWxDbGFzc05hbWVzKEdsb2JhbENsYXNzTmFtZXMsIHRoZW1lKTtcbiAgICByZXR1cm4ge1xuICAgICAgICByb290OiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLnJvb3QsXG4gICAgICAgICAgICB0aGVtZS5mb250cy5tZWRpdW0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29sb3I6IGxpbmtDb2xvcixcbiAgICAgICAgICAgICAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgZm9udFNpemU6ICdpbmhlcml0JyxcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiAnaW5oZXJpdCcsXG4gICAgICAgICAgICAgICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfYSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICcubXMtRmFicmljLS1pc0ZvY3VzVmlzaWJsZSAmOmZvY3VzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhbid0IHVzZSBnZXRGb2N1c1N0eWxlIGJlY2F1c2UgaXQgZG9lc24ndCBzdXBwb3J0IHdyYXBwaW5nIGxpbmtzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9mbHVlbnR1aS9pc3N1ZXMvNDg4MyNpc3N1ZWNvbW1lbnQtNDA2NzQzNTQzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXNpbmcgYm94LXNoYWRvdyBhbmQgb3V0bGluZSBhbGxvd3MgdGhlIGZvY3VzIHJlY3QgdG8gd3JhcCBsaW5rcyB0aGF0IHNwYW4gbXVsdGlwbGUgbGluZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgaGVscHMgdGhlIGZvY3VzIHJlY3QgYXZvaWQgZ2V0dGluZyBjbGlwcGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveFNoYWRvdzogXCIwIDAgMCAxcHggXCIgKyBmb2N1c0JvcmRlckNvbG9yICsgXCIgaW5zZXRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRsaW5lOiBcIjFweCBhdXRvIFwiICsgZm9jdXNCb3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfYiA9IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYltIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRsaW5lOiAnMXB4IHNvbGlkIFdpbmRvd1RleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYiksXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF9hW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvciBJRSBoaWdoIGNvbnRyYXN0IG1vZGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckJvdHRvbTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBfYSksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNCdXR0b24gJiYge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICdub25lJyxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2lubGluZScsXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgICAgICAgIG92ZXJmbG93OiAnaW5oZXJpdCcsXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICAgICAgICAgICAgICB0ZXh0T3ZlcmZsb3c6ICdpbmhlcml0JyxcbiAgICAgICAgICAgICAgICB1c2VyU2VsZWN0OiAndGV4dCcsXG4gICAgICAgICAgICAgICAgYm9yZGVyQm90dG9tOiAnMXB4IHNvbGlkIHRyYW5zcGFyZW50JyxcbiAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IF9fYXNzaWduKChfYyA9IHt9LCBfY1tIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnTGlua1RleHQnLFxuICAgICAgICAgICAgICAgIH0sIF9jKSwgZ2V0RWRnZUNocm9taXVtTm9IaWdoQ29udHJhc3RBZGp1c3RTZWxlY3RvcigpKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAhaXNCdXR0b24gJiYge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9kID0ge30sXG4gICAgICAgICAgICAgICAgICAgIF9kW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgbWFpbmx5IGZvciBNZXNzYWdlQmFyLCB3aGljaCBzZXRzIE1zSGlnaENvbnRyYXN0QWRqdXN0OiBub25lIGJ5IGRlZmF1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgIE1zSGlnaENvbnRyYXN0QWRqdXN0OiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF9kKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc0Rpc2FibGVkICYmIFtcbiAgICAgICAgICAgICAgICAnaXMtZGlzYWJsZWQnLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGxpbmtEaXNhYmxlZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnJjpsaW5rLCAmOnZpc2l0ZWQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICFpc0Rpc2FibGVkICYmIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgJyY6YWN0aXZlLCAmOmhvdmVyLCAmOmFjdGl2ZTpob3Zlcic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBsaW5rSW50ZXJhY3RlZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dERlY29yYXRpb246ICd1bmRlcmxpbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2UgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZVtIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnTGlua1RleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2UpLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnJjpmb2N1cyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBsaW5rQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfZiA9IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9mW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdMaW5rVGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZiksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGFzc05hbWVzLnJvb3QsXG4gICAgICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIF0sXG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1MaW5rLnN0eWxlcy5qcy5tYXAiLCJpbXBvcnQgeyBzdHlsZWQgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgTGlua0Jhc2UgfSBmcm9tICcuL0xpbmsuYmFzZSc7XG5pbXBvcnQgeyBnZXRTdHlsZXMgfSBmcm9tICcuL0xpbmsuc3R5bGVzJztcbmV4cG9ydCB2YXIgTGluayA9IHN0eWxlZChMaW5rQmFzZSwgZ2V0U3R5bGVzLCB1bmRlZmluZWQsIHtcbiAgICBzY29wZTogJ0xpbmsnLFxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1MaW5rLmpzLm1hcCIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJy4vZG9tL2dldFdpbmRvdyc7XG5pbXBvcnQgeyBpc0RpcmVjdGlvbmFsS2V5Q29kZSB9IGZyb20gJy4va2V5Ym9hcmQnO1xuaW1wb3J0IHsgc2V0Rm9jdXNWaXNpYmlsaXR5IH0gZnJvbSAnLi9zZXRGb2N1c1Zpc2liaWxpdHknO1xuLyoqXG4gKiBDb3VudGVyIGZvciBtb3VudGVkIGNvbXBvbmVudCB0aGF0IHVzZXMgZm9jdXMgcmVjdGFuZ2xlLlxuICogV2Ugd2FudCB0byBjbGVhbnVwIHRoZSBsaXN0bmVycyBiZWZvcmUgbGFzdCBjb21wb25lbnQgdGhhdCB1c2VzIGZvY3VzIHJlY3RhbmdsZSB1bm1vdW50cy5cbiAqL1xudmFyIG1vdW50Q291bnRlcnMgPSBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gc2V0TW91bnRDb3VudGVycyhrZXksIGRlbHRhKSB7XG4gICAgdmFyIG5ld1ZhbHVlO1xuICAgIHZhciBjdXJyVmFsdWUgPSBtb3VudENvdW50ZXJzLmdldChrZXkpO1xuICAgIGlmIChjdXJyVmFsdWUpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBjdXJyVmFsdWUgKyBkZWx0YTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG5ld1ZhbHVlID0gMTtcbiAgICB9XG4gICAgbW91bnRDb3VudGVycy5zZXQoa2V5LCBuZXdWYWx1ZSk7XG4gICAgcmV0dXJuIG5ld1ZhbHVlO1xufVxuLyoqXG4gKiBJbml0aWFsaXplcyB0aGUgbG9naWMgd2hpY2g6XG4gKlxuICogMS4gU3Vic2NyaWJlcyBrZXlkb3duIGFuZCBtb3VzZWRvd24gZXZlbnRzLiAoSXQgd2lsbCBvbmx5IGRvIGl0IG9uY2UgcGVyIHdpbmRvdyxcbiAqICAgIHNvIGl0J3Mgc2FmZSB0byBjYWxsIHRoaXMgbWV0aG9kIG11bHRpcGxlIHRpbWVzLilcbiAqIDIuIFdoZW4gdGhlIHVzZXIgcHJlc3NlcyBkaXJlY3Rpb25hbCBrZXlib2FyZCBrZXlzLCBhZGRzIHRoZSAnbXMtRmFicmljLS1pc0ZvY3VzVmlzaWJsZScgY2xhc3NuYW1lXG4gKiAgICB0byB0aGUgZG9jdW1lbnQgYm9keSwgcmVtb3ZlcyB0aGUgJ21zLUZhYnJpYy1pc0ZvY3VzSGlkZGVuJyBjbGFzc25hbWUuXG4gKiAzLiBXaGVuIHRoZSB1c2VyIGNsaWNrcyBhIG1vdXNlIGJ1dHRvbiwgYWRkcyB0aGUgJ21zLUZhYnJpYy1pc0ZvY3VzSGlkZGVuJyBjbGFzc25hbWUgdG8gdGhlXG4gKiAgICBkb2N1bWVudCBib2R5LCByZW1vdmVzIHRoZSAnbXMtRmFicmljLS1pc0ZvY3VzVmlzaWJsZScgY2xhc3NuYW1lLlxuICpcbiAqIFRoaXMgbG9naWMgYWxsb3dzIGNvbXBvbmVudHMgb24gdGhlIHBhZ2UgdG8gY29uZGl0aW9uYWxseSByZW5kZXIgZm9jdXMgdHJlYXRtZW50cyBiYXNlZCBvblxuICogdGhlIGV4aXN0ZW5jZSBvZiBnbG9iYWwgY2xhc3NuYW1lcywgd2hpY2ggc2ltcGxpZmllcyBsb2dpYyBvdmVyYWxsLlxuICpcbiAqIEBwYXJhbSByb290UmVmIC0gQSBSZWYgb2JqZWN0LiBGb2N1cyByZWN0YW5nbGUgY2FuIGJlIGFwcGxpZWQgb24gaXRzZWxmIGFuZCBhbGwgaXRzIGNoaWxkcmVuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlRm9jdXNSZWN0cyhyb290UmVmKSB7XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdmFyIHdpbiA9IGdldFdpbmRvdygoX2EgPSByb290UmVmKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY3VycmVudCk7XG4gICAgICAgIGlmICghd2luIHx8ICgoX2IgPSB3aW4uRmFicmljQ29uZmlnKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZGlzYWJsZUZvY3VzUmVjdHMpID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb3VudCA9IHNldE1vdW50Q291bnRlcnMod2luLCAxKTtcbiAgICAgICAgaWYgKGNvdW50IDw9IDEpIHtcbiAgICAgICAgICAgIHdpbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBfb25Nb3VzZURvd24sIHRydWUpO1xuICAgICAgICAgICAgd2luLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgX29uUG9pbnRlckRvd24sIHRydWUpO1xuICAgICAgICAgICAgd2luLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBfb25LZXlEb3duLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgaWYgKCF3aW4gfHwgKChfYSA9IHdpbi5GYWJyaWNDb25maWcpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kaXNhYmxlRm9jdXNSZWN0cykgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb3VudCA9IHNldE1vdW50Q291bnRlcnMod2luLCAtMSk7XG4gICAgICAgICAgICBpZiAoY291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICB3aW4ucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgX29uTW91c2VEb3duLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB3aW4ucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBfb25Qb2ludGVyRG93biwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgd2luLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBfb25LZXlEb3duLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9LCBbcm9vdFJlZl0pO1xufVxuLyoqXG4gKiBGdW5jdGlvbiBDb21wb25lbnQgd3JhcHBlciB3aGljaCBlbmFibGVzIGNhbGxpbmcgYHVzZUZvY3VzUmVjdHNgIGhvb2suXG4gKiBSZW5kZXJzIG5vdGhpbmcuXG4gKi9cbmV4cG9ydCB2YXIgRm9jdXNSZWN0cyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHVzZUZvY3VzUmVjdHMocHJvcHMucm9vdFJlZik7XG4gICAgcmV0dXJuIG51bGw7XG59O1xuZnVuY3Rpb24gX29uTW91c2VEb3duKGV2KSB7XG4gICAgc2V0Rm9jdXNWaXNpYmlsaXR5KGZhbHNlLCBldi50YXJnZXQpO1xufVxuZnVuY3Rpb24gX29uUG9pbnRlckRvd24oZXYpIHtcbiAgICBpZiAoZXYucG9pbnRlclR5cGUgIT09ICdtb3VzZScpIHtcbiAgICAgICAgc2V0Rm9jdXNWaXNpYmlsaXR5KGZhbHNlLCBldi50YXJnZXQpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIF9vbktleURvd24oZXYpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBpZiAoaXNEaXJlY3Rpb25hbEtleUNvZGUoZXYud2hpY2gpKSB7XG4gICAgICAgIHNldEZvY3VzVmlzaWJpbGl0eSh0cnVlLCBldi50YXJnZXQpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUZvY3VzUmVjdHMuanMubWFwIiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnLi9kb20vZ2V0V2luZG93Jztcbi8qKlxuICogQnVncyBvZnRlbiBhcHBlYXIgaW4gYXN5bmMgY29kZSB3aGVuIHN0dWZmIGdldHMgZGlzcG9zZWQsIGJ1dCBhc3luYyBvcGVyYXRpb25zIGRvbid0IGdldCBjYW5jZWxlZC5cbiAqIFRoaXMgQXN5bmMgaGVscGVyIGNsYXNzIHNvbHZlcyB0aGVzZSBpc3N1ZXMgYnkgdHlpbmcgYXN5bmMgY29kZSB0byB0aGUgbGlmZXRpbWUgb2YgYSBkaXNwb3NhYmxlIG9iamVjdC5cbiAqXG4gKiBVc2FnZTogQW55dGhpbmcgY2xhc3MgZXh0ZW5kaW5nIGZyb20gQmFzZU1vZGVsIGNhbiBhY2Nlc3MgdGhpcyBoZWxwZXIgdmlhIHRoaXMuYXN5bmMuIE90aGVyd2lzZSBjcmVhdGUgYVxuICogbmV3IGluc3RhbmNlIG9mIHRoZSBjbGFzcyBhbmQgcmVtZW1iZXIgdG8gY2FsbCBkaXNwb3NlKCkgZHVyaW5nIHlvdXIgY29kZSdzIGRpc3Bvc2UgaGFuZGxlci5cbiAqXG4gKiBAcHVibGljXG4gKi9cbnZhciBBc3luYyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGZ1bmN0aW9uIEFzeW5jKHBhcmVudCwgb25FcnJvcikge1xuICAgICAgICB0aGlzLl90aW1lb3V0SWRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5faW1tZWRpYXRlSWRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5faW50ZXJ2YWxJZHMgPSBudWxsO1xuICAgICAgICB0aGlzLl9hbmltYXRpb25GcmFtZUlkcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2lzRGlzcG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gcGFyZW50IHx8IG51bGw7XG4gICAgICAgIHRoaXMuX29uRXJyb3JIYW5kbGVyID0gb25FcnJvcjtcbiAgICAgICAgdGhpcy5fbm9vcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8qIGRvIG5vdGhpbmcgKi9cbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGlzcG9zZSBmdW5jdGlvbiwgY2xlYXJzIGFsbCBhc3luYyBvcGVyYXRpb25zLlxuICAgICAqL1xuICAgIEFzeW5jLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaWQ7XG4gICAgICAgIHRoaXMuX2lzRGlzcG9zZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSBudWxsO1xuICAgICAgICAvLyBDbGVhciB0aW1lb3V0cy5cbiAgICAgICAgaWYgKHRoaXMuX3RpbWVvdXRJZHMpIHtcbiAgICAgICAgICAgIGZvciAoaWQgaW4gdGhpcy5fdGltZW91dElkcykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90aW1lb3V0SWRzLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyVGltZW91dChwYXJzZUludChpZCwgMTApKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl90aW1lb3V0SWRzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBDbGVhciBpbW1lZGlhdGVzLlxuICAgICAgICBpZiAodGhpcy5faW1tZWRpYXRlSWRzKSB7XG4gICAgICAgICAgICBmb3IgKGlkIGluIHRoaXMuX2ltbWVkaWF0ZUlkcykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pbW1lZGlhdGVJZHMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJJbW1lZGlhdGUocGFyc2VJbnQoaWQsIDEwKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5faW1tZWRpYXRlSWRzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBDbGVhciBpbnRlcnZhbHMuXG4gICAgICAgIGlmICh0aGlzLl9pbnRlcnZhbElkcykge1xuICAgICAgICAgICAgZm9yIChpZCBpbiB0aGlzLl9pbnRlcnZhbElkcykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pbnRlcnZhbElkcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckludGVydmFsKHBhcnNlSW50KGlkLCAxMCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2ludGVydmFsSWRzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBDbGVhciBhbmltYXRpb24gZnJhbWVzLlxuICAgICAgICBpZiAodGhpcy5fYW5pbWF0aW9uRnJhbWVJZHMpIHtcbiAgICAgICAgICAgIGZvciAoaWQgaW4gdGhpcy5fYW5pbWF0aW9uRnJhbWVJZHMpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYW5pbWF0aW9uRnJhbWVJZHMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FuY2VsQW5pbWF0aW9uRnJhbWUocGFyc2VJbnQoaWQsIDEwKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uRnJhbWVJZHMgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRUaW1lb3V0IG92ZXJyaWRlLCB3aGljaCB3aWxsIGF1dG8gY2FuY2VsIHRoZSB0aW1lb3V0IGR1cmluZyBkaXNwb3NlLlxuICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIENhbGxiYWNrIHRvIGV4ZWN1dGUuXG4gICAgICogQHBhcmFtIGR1cmF0aW9uIC0gRHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzLlxuICAgICAqIEByZXR1cm5zIFRoZSBzZXRUaW1lb3V0IGlkLlxuICAgICAqL1xuICAgIEFzeW5jLnByb3RvdHlwZS5zZXRUaW1lb3V0ID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBkdXJhdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgdGltZW91dElkID0gMDtcbiAgICAgICAgaWYgKCF0aGlzLl9pc0Rpc3Bvc2VkKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3RpbWVvdXRJZHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90aW1lb3V0SWRzID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBUaW1lIHRvIGV4ZWN1dGUgdGhlIHRpbWVvdXQsIGVucXVldWUgaXQgYXMgYSBmb3JlZ3JvdW5kIHRhc2sgdG8gYmUgZXhlY3V0ZWQuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTm93IGRlbGV0ZSB0aGUgcmVjb3JkIGFuZCBjYWxsIHRoZSBjYWxsYmFjay5cbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl90aW1lb3V0SWRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgX3RoaXMuX3RpbWVvdXRJZHNbdGltZW91dElkXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5hcHBseShfdGhpcy5fcGFyZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9vbkVycm9ySGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX29uRXJyb3JIYW5kbGVyKGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgICAgICAgdGhpcy5fdGltZW91dElkc1t0aW1lb3V0SWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGltZW91dElkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSBpZCAtIElkIHRvIGNhbmNlbC5cbiAgICAgKi9cbiAgICBBc3luYy5wcm90b3R5cGUuY2xlYXJUaW1lb3V0ID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIGlmICh0aGlzLl90aW1lb3V0SWRzICYmIHRoaXMuX3RpbWVvdXRJZHNbaWRdKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoaWQpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3RpbWVvdXRJZHNbaWRdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRJbW1lZGlhdGUgb3ZlcnJpZGUsIHdoaWNoIHdpbGwgYXV0byBjYW5jZWwgdGhlIGltbWVkaWF0ZSBkdXJpbmcgZGlzcG9zZS5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBDYWxsYmFjayB0byBleGVjdXRlLlxuICAgICAqIEBwYXJhbSB0YXJnZXRFbGVtZW50IC0gT3B0aW9uYWwgdGFyZ2V0IGVsZW1lbnQgdG8gdXNlIGZvciBpZGVudGlmeWluZyB0aGUgY29ycmVjdCB3aW5kb3cuXG4gICAgICogQHJldHVybnMgVGhlIHNldFRpbWVvdXQgaWQuXG4gICAgICovXG4gICAgQXN5bmMucHJvdG90eXBlLnNldEltbWVkaWF0ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgdGFyZ2V0RWxlbWVudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgaW1tZWRpYXRlSWQgPSAwO1xuICAgICAgICB2YXIgd2luID0gZ2V0V2luZG93KHRhcmdldEVsZW1lbnQpO1xuICAgICAgICBpZiAoIXRoaXMuX2lzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5faW1tZWRpYXRlSWRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faW1tZWRpYXRlSWRzID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc2V0SW1tZWRpYXRlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gVGltZSB0byBleGVjdXRlIHRoZSB0aW1lb3V0LCBlbnF1ZXVlIGl0IGFzIGEgZm9yZWdyb3VuZCB0YXNrIHRvIGJlIGV4ZWN1dGVkLlxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdyBkZWxldGUgdGhlIHJlY29yZCBhbmQgY2FsbCB0aGUgY2FsbGJhY2suXG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5faW1tZWRpYXRlSWRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgX3RoaXMuX2ltbWVkaWF0ZUlkc1tpbW1lZGlhdGVJZF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkoX3RoaXMuX3BhcmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9sb2dFcnJvcihlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaW1tZWRpYXRlSWQgPSB3aW4uc2V0VGltZW91dChzZXRJbW1lZGlhdGVDYWxsYmFjaywgMCk7XG4gICAgICAgICAgICB0aGlzLl9pbW1lZGlhdGVJZHNbaW1tZWRpYXRlSWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW1tZWRpYXRlSWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDbGVhcnMgdGhlIGltbWVkaWF0ZS5cbiAgICAgKiBAcGFyYW0gaWQgLSBJZCB0byBjYW5jZWwuXG4gICAgICogQHBhcmFtIHRhcmdldEVsZW1lbnQgLSBPcHRpb25hbCB0YXJnZXQgZWxlbWVudCB0byB1c2UgZm9yIGlkZW50aWZ5aW5nIHRoZSBjb3JyZWN0IHdpbmRvdy5cbiAgICAgKi9cbiAgICBBc3luYy5wcm90b3R5cGUuY2xlYXJJbW1lZGlhdGUgPSBmdW5jdGlvbiAoaWQsIHRhcmdldEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHdpbiA9IGdldFdpbmRvdyh0YXJnZXRFbGVtZW50KTtcbiAgICAgICAgaWYgKHRoaXMuX2ltbWVkaWF0ZUlkcyAmJiB0aGlzLl9pbW1lZGlhdGVJZHNbaWRdKSB7XG4gICAgICAgICAgICB3aW4uY2xlYXJUaW1lb3V0KGlkKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9pbW1lZGlhdGVJZHNbaWRdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRJbnRlcnZhbCBvdmVycmlkZSwgd2hpY2ggd2lsbCBhdXRvIGNhbmNlbCB0aGUgdGltZW91dCBkdXJpbmcgZGlzcG9zZS5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBDYWxsYmFjayB0byBleGVjdXRlLlxuICAgICAqIEBwYXJhbSBkdXJhdGlvbiAtIER1cmF0aW9uIGluIG1pbGxpc2Vjb25kcy5cbiAgICAgKiBAcmV0dXJucyBUaGUgc2V0VGltZW91dCBpZC5cbiAgICAgKi9cbiAgICBBc3luYy5wcm90b3R5cGUuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGR1cmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBpbnRlcnZhbElkID0gMDtcbiAgICAgICAgaWYgKCF0aGlzLl9pc0Rpc3Bvc2VkKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2ludGVydmFsSWRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faW50ZXJ2YWxJZHMgPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGludGVydmFsSWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gVGltZSB0byBleGVjdXRlIHRoZSBpbnRlcnZhbCBjYWxsYmFjaywgZW5xdWV1ZSBpdCBhcyBhIGZvcmVncm91bmQgdGFzayB0byBiZSBleGVjdXRlZC5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5hcHBseShfdGhpcy5fcGFyZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2xvZ0Vycm9yKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuX2ludGVydmFsSWRzW2ludGVydmFsSWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW50ZXJ2YWxJZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENsZWFycyB0aGUgaW50ZXJ2YWwuXG4gICAgICogQHBhcmFtIGlkIC0gSWQgdG8gY2FuY2VsLlxuICAgICAqL1xuICAgIEFzeW5jLnByb3RvdHlwZS5jbGVhckludGVydmFsID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbnRlcnZhbElkcyAmJiB0aGlzLl9pbnRlcnZhbElkc1tpZF0pIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaWQpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2ludGVydmFsSWRzW2lkXTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gZXhlY3V0ZWQsIHdpbGwgb25seSBjYWxsIHRoZSBmdW5jIGZ1bmN0aW9uIGF0IG1vc3Qgb25jZSBwZXJcbiAgICAgKiBldmVyeSB3YWl0IG1pbGxpc2Vjb25kcy4gUHJvdmlkZSBhbiBvcHRpb25zIG9iamVjdCB0byBpbmRpY2F0ZSB0aGF0IGZ1bmMgc2hvdWxkIGJlIGludm9rZWRcbiAgICAgKiBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgd2FpdCB0aW1lb3V0LiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWRcbiAgICAgKiBmdW5jdGlvbiB3aWxsIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGZ1bmMgY2FsbC5cbiAgICAgKlxuICAgICAqIE5vdGU6IElmIGxlYWRpbmcgYW5kIHRyYWlsaW5nIG9wdGlvbnMgYXJlIHRydWUgZnVuYyB3aWxsIGJlIGNhbGxlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZlxuICAgICAqIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRocm90dGxlZCBmdW5jdGlvbiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgd2FpdCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIGZ1bmMgLSBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gICAgICogQHBhcmFtIHdhaXQgLSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSBleGVjdXRpb25zIHRvLiBEZWZhdWx0cyB0byAwLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIFRoZSBuZXcgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgQXN5bmMucHJvdG90eXBlLnRocm90dGxlID0gZnVuY3Rpb24gKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX2lzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9ub29wO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3YWl0TVMgPSB3YWl0IHx8IDA7XG4gICAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZTtcbiAgICAgICAgdmFyIHRyYWlsaW5nID0gdHJ1ZTtcbiAgICAgICAgdmFyIGxhc3RFeGVjdXRlVGltZSA9IDA7XG4gICAgICAgIHZhciBsYXN0UmVzdWx0O1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB2YXIgbGFzdEFyZ3M7XG4gICAgICAgIHZhciB0aW1lb3V0SWQgPSBudWxsO1xuICAgICAgICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5sZWFkaW5nID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGxlYWRpbmcgPSBvcHRpb25zLmxlYWRpbmc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMudHJhaWxpbmcgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgdHJhaWxpbmcgPSBvcHRpb25zLnRyYWlsaW5nO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uICh1c2VyQ2FsbCkge1xuICAgICAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgICAgICB2YXIgZGVsdGEgPSBub3cgLSBsYXN0RXhlY3V0ZVRpbWU7XG4gICAgICAgICAgICB2YXIgd2FpdExlbmd0aCA9IGxlYWRpbmcgPyB3YWl0TVMgLSBkZWx0YSA6IHdhaXRNUztcbiAgICAgICAgICAgIGlmIChkZWx0YSA+PSB3YWl0TVMgJiYgKCF1c2VyQ2FsbCB8fCBsZWFkaW5nKSkge1xuICAgICAgICAgICAgICAgIGxhc3RFeGVjdXRlVGltZSA9IG5vdztcbiAgICAgICAgICAgICAgICBpZiAodGltZW91dElkKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgICAgICAgICAgICAgICB0aW1lb3V0SWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsYXN0UmVzdWx0ID0gZnVuYy5hcHBseShfdGhpcy5fcGFyZW50LCBsYXN0QXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aW1lb3V0SWQgPT09IG51bGwgJiYgdHJhaWxpbmcpIHtcbiAgICAgICAgICAgICAgICB0aW1lb3V0SWQgPSBfdGhpcy5zZXRUaW1lb3V0KGNhbGxiYWNrLCB3YWl0TGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB2YXIgcmVzdWx0RnVuY3Rpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdEFyZ3MgPSBhcmdzO1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdEZ1bmN0aW9uO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBkZWxheSB0aGUgZXhlY3V0aW9uIG9mIGZ1bmMgdW50aWwgYWZ0ZXIgd2FpdCBtaWxsaXNlY29uZHMgaGF2ZVxuICAgICAqIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSBpdCB3YXMgaW52b2tlZC4gUHJvdmlkZSBhbiBvcHRpb25zIG9iamVjdCB0byBpbmRpY2F0ZSB0aGF0IGZ1bmNcbiAgICAgKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgd2FpdCB0aW1lb3V0LiBTdWJzZXF1ZW50IGNhbGxzXG4gICAgICogdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3aWxsIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGZ1bmMgY2FsbC5cbiAgICAgKlxuICAgICAqIE5vdGU6IElmIGxlYWRpbmcgYW5kIHRyYWlsaW5nIG9wdGlvbnMgYXJlIHRydWUgZnVuYyB3aWxsIGJlIGNhbGxlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZlxuICAgICAqIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgd2FpdFxuICAgICAqIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZnVuYyAtIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAgICAgKiBAcGFyYW0gd2FpdCAtIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIFRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgQXN5bmMucHJvdG90eXBlLmRlYm91bmNlID0gZnVuY3Rpb24gKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX2lzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgIHZhciBub09wRnVuY3Rpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8qKiBEbyBub3RoaW5nICovXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG5vT3BGdW5jdGlvbi5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG5vT3BGdW5jdGlvbi5mbHVzaCA9IChmdW5jdGlvbiAoKSB7IHJldHVybiBudWxsOyB9KTtcbiAgICAgICAgICAgIG5vT3BGdW5jdGlvbi5wZW5kaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH07XG4gICAgICAgICAgICByZXR1cm4gbm9PcEZ1bmN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3YWl0TVMgPSB3YWl0IHx8IDA7XG4gICAgICAgIHZhciBsZWFkaW5nID0gZmFsc2U7XG4gICAgICAgIHZhciB0cmFpbGluZyA9IHRydWU7XG4gICAgICAgIHZhciBtYXhXYWl0ID0gbnVsbDtcbiAgICAgICAgdmFyIGxhc3RDYWxsVGltZSA9IDA7XG4gICAgICAgIHZhciBsYXN0RXhlY3V0ZVRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICB2YXIgbGFzdFJlc3VsdDtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgdmFyIGxhc3RBcmdzO1xuICAgICAgICB2YXIgdGltZW91dElkID0gbnVsbDtcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMubGVhZGluZyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBsZWFkaW5nID0gb3B0aW9ucy5sZWFkaW5nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLnRyYWlsaW5nID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHRyYWlsaW5nID0gb3B0aW9ucy50cmFpbGluZztcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5tYXhXYWl0ID09PSAnbnVtYmVyJyAmJiAhaXNOYU4ob3B0aW9ucy5tYXhXYWl0KSkge1xuICAgICAgICAgICAgbWF4V2FpdCA9IG9wdGlvbnMubWF4V2FpdDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWFya0V4ZWN1dGVkID0gZnVuY3Rpb24gKHRpbWUpIHtcbiAgICAgICAgICAgIGlmICh0aW1lb3V0SWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgICAgICAgICB0aW1lb3V0SWQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdEV4ZWN1dGVUaW1lID0gdGltZTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGludm9rZUZ1bmN0aW9uID0gZnVuY3Rpb24gKHRpbWUpIHtcbiAgICAgICAgICAgIG1hcmtFeGVjdXRlZCh0aW1lKTtcbiAgICAgICAgICAgIGxhc3RSZXN1bHQgPSBmdW5jLmFwcGx5KF90aGlzLl9wYXJlbnQsIGxhc3RBcmdzKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gKHVzZXJDYWxsKSB7XG4gICAgICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIHZhciBleGVjdXRlSW1tZWRpYXRlbHkgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh1c2VyQ2FsbCkge1xuICAgICAgICAgICAgICAgIGlmIChsZWFkaW5nICYmIG5vdyAtIGxhc3RDYWxsVGltZSA+PSB3YWl0TVMpIHtcbiAgICAgICAgICAgICAgICAgICAgZXhlY3V0ZUltbWVkaWF0ZWx5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGFzdENhbGxUaW1lID0gbm93O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRlbHRhID0gbm93IC0gbGFzdENhbGxUaW1lO1xuICAgICAgICAgICAgdmFyIHdhaXRMZW5ndGggPSB3YWl0TVMgLSBkZWx0YTtcbiAgICAgICAgICAgIHZhciBtYXhXYWl0RGVsdGEgPSBub3cgLSBsYXN0RXhlY3V0ZVRpbWU7XG4gICAgICAgICAgICB2YXIgbWF4V2FpdEV4cGlyZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChtYXhXYWl0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gbWF4V2FpdCBvbmx5IG1hdHRlcnMgd2hlbiB0aGVyZSBpcyBhIHBlbmRpbmcgY2FsbGJhY2tcbiAgICAgICAgICAgICAgICBpZiAobWF4V2FpdERlbHRhID49IG1heFdhaXQgJiYgdGltZW91dElkKSB7XG4gICAgICAgICAgICAgICAgICAgIG1heFdhaXRFeHBpcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHdhaXRMZW5ndGggPSBNYXRoLm1pbih3YWl0TGVuZ3RoLCBtYXhXYWl0IC0gbWF4V2FpdERlbHRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGVsdGEgPj0gd2FpdE1TIHx8IG1heFdhaXRFeHBpcmVkIHx8IGV4ZWN1dGVJbW1lZGlhdGVseSkge1xuICAgICAgICAgICAgICAgIGludm9rZUZ1bmN0aW9uKG5vdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgodGltZW91dElkID09PSBudWxsIHx8ICF1c2VyQ2FsbCkgJiYgdHJhaWxpbmcpIHtcbiAgICAgICAgICAgICAgICB0aW1lb3V0SWQgPSBfdGhpcy5zZXRUaW1lb3V0KGNhbGxiYWNrLCB3YWl0TGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgICB2YXIgcGVuZGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAhIXRpbWVvdXRJZDtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChwZW5kaW5nKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBNYXJrIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gYXMgaGF2aW5nIGV4ZWN1dGVkXG4gICAgICAgICAgICAgICAgbWFya0V4ZWN1dGVkKERhdGUubm93KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAocGVuZGluZygpKSB7XG4gICAgICAgICAgICAgICAgaW52b2tlRnVuY3Rpb24oRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgdmFyIHJlc3VsdEZ1bmN0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RBcmdzID0gYXJncztcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdEZ1bmN0aW9uLmNhbmNlbCA9IGNhbmNlbDtcbiAgICAgICAgcmVzdWx0RnVuY3Rpb24uZmx1c2ggPSBmbHVzaDtcbiAgICAgICAgcmVzdWx0RnVuY3Rpb24ucGVuZGluZyA9IHBlbmRpbmc7XG4gICAgICAgIHJldHVybiByZXN1bHRGdW5jdGlvbjtcbiAgICB9O1xuICAgIEFzeW5jLnByb3RvdHlwZS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHRhcmdldEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGFuaW1hdGlvbkZyYW1lSWQgPSAwO1xuICAgICAgICB2YXIgd2luID0gZ2V0V2luZG93KHRhcmdldEVsZW1lbnQpO1xuICAgICAgICBpZiAoIXRoaXMuX2lzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fYW5pbWF0aW9uRnJhbWVJZHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hbmltYXRpb25GcmFtZUlkcyA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGFuaW1hdGlvbkZyYW1lQ2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTm93IGRlbGV0ZSB0aGUgcmVjb3JkIGFuZCBjYWxsIHRoZSBjYWxsYmFjay5cbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9hbmltYXRpb25GcmFtZUlkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF90aGlzLl9hbmltYXRpb25GcmFtZUlkc1thbmltYXRpb25GcmFtZUlkXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5hcHBseShfdGhpcy5fcGFyZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2xvZ0Vycm9yKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhbmltYXRpb25GcmFtZUlkID0gd2luLnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgICAgICAgICAgICAgID8gd2luLnJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRpb25GcmFtZUNhbGxiYWNrKVxuICAgICAgICAgICAgICAgIDogd2luLnNldFRpbWVvdXQoYW5pbWF0aW9uRnJhbWVDYWxsYmFjaywgMCk7XG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb25GcmFtZUlkc1thbmltYXRpb25GcmFtZUlkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbkZyYW1lSWQ7XG4gICAgfTtcbiAgICBBc3luYy5wcm90b3R5cGUuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoaWQsIHRhcmdldEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHdpbiA9IGdldFdpbmRvdyh0YXJnZXRFbGVtZW50KTtcbiAgICAgICAgaWYgKHRoaXMuX2FuaW1hdGlvbkZyYW1lSWRzICYmIHRoaXMuX2FuaW1hdGlvbkZyYW1lSWRzW2lkXSkge1xuICAgICAgICAgICAgd2luLmNhbmNlbEFuaW1hdGlvbkZyYW1lID8gd2luLmNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKSA6IHdpbi5jbGVhclRpbWVvdXQoaWQpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2FuaW1hdGlvbkZyYW1lSWRzW2lkXTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBBc3luYy5wcm90b3R5cGUuX2xvZ0Vycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX29uRXJyb3JIYW5kbGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9vbkVycm9ySGFuZGxlcihlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFzeW5jO1xufSgpKTtcbmV4cG9ydCB7IEFzeW5jIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc3luYy5qcy5tYXAiLCIvKipcbiAqIEVudW0gdG8gZGVzY3JpYmUgaG93IGEgcGFydGljdWxhciBjb2x1bW4gaGVhZGVyIGJlaGF2ZXMuXG4gKiBUaGlzIGlzIHVzZWQgdG8gdG8gc3BlY2lmeSB0aGUgcHJvcGVydHkgYElDb2x1bW4uY29sdW1uQWN0aW9uc01vZGVgLlxuICogSWYgYElDb2x1bW4uY29sdW1uQWN0aW9uc01vZGVgIGlzIHVuZGVmaW5lZCwgaXQncyBlcXVpdmFsZW50IHRvIGBDb2x1bW5BY3Rpb25zTW9kZS5jbGlja2FibGVgLlxuICoge0Bkb2NDYXRlZ29yeSBEZXRhaWxzTGlzdH1cbiAqL1xuZXhwb3J0IHZhciBDb2x1bW5BY3Rpb25zTW9kZTtcbihmdW5jdGlvbiAoQ29sdW1uQWN0aW9uc01vZGUpIHtcbiAgICAvKiogUmVuZGVycyB0aGUgY29sdW1uIGhlYWRlciBhcyBkaXNhYmxlZC4gKi9cbiAgICBDb2x1bW5BY3Rpb25zTW9kZVtDb2x1bW5BY3Rpb25zTW9kZVtcImRpc2FibGVkXCJdID0gMF0gPSBcImRpc2FibGVkXCI7XG4gICAgLyoqIFJlbmRlcnMgdGhlIGNvbHVtbiBoZWFkZXIgYXMgY2xpY2thYmxlLiBEZWZhdWx0IHZhbHVlLiAqL1xuICAgIENvbHVtbkFjdGlvbnNNb2RlW0NvbHVtbkFjdGlvbnNNb2RlW1wiY2xpY2thYmxlXCJdID0gMV0gPSBcImNsaWNrYWJsZVwiO1xuICAgIC8qKiBSZW5kZXJzIHRoZSBjb2x1bW4gaGVhZGVyIGFzIGNsaWNrYWJsZSBhbmQgZGlzcGxheXMgdGhlIGRyb3Bkb3duIGNoZXZyb24uICovXG4gICAgQ29sdW1uQWN0aW9uc01vZGVbQ29sdW1uQWN0aW9uc01vZGVbXCJoYXNEcm9wZG93blwiXSA9IDJdID0gXCJoYXNEcm9wZG93blwiO1xufSkoQ29sdW1uQWN0aW9uc01vZGUgfHwgKENvbHVtbkFjdGlvbnNNb2RlID0ge30pKTtcbi8qKlxuICoge0Bkb2NDYXRlZ29yeSBEZXRhaWxzTGlzdH1cbiAqL1xuZXhwb3J0IHZhciBDb25zdHJhaW5Nb2RlO1xuKGZ1bmN0aW9uIChDb25zdHJhaW5Nb2RlKSB7XG4gICAgLyoqIExldHMgdGhlIGNvbnRlbnQgZ3JvdyB3aGljaCBhbGxvd3MgdGhlIHBhZ2UgdG8gbWFuYWdlIHNjcm9sbGluZy4gKi9cbiAgICBDb25zdHJhaW5Nb2RlW0NvbnN0cmFpbk1vZGVbXCJ1bmNvbnN0cmFpbmVkXCJdID0gMF0gPSBcInVuY29uc3RyYWluZWRcIjtcbiAgICAvKiogQ29uc3RyYWlucyB0aGUgbGlzdCB0byB0aGUgZ2l2ZW4gbGF5b3V0IHNwYWNlLiAqL1xuICAgIENvbnN0cmFpbk1vZGVbQ29uc3RyYWluTW9kZVtcImhvcml6b250YWxDb25zdHJhaW5lZFwiXSA9IDFdID0gXCJob3Jpem9udGFsQ29uc3RyYWluZWRcIjtcbn0pKENvbnN0cmFpbk1vZGUgfHwgKENvbnN0cmFpbk1vZGUgPSB7fSkpO1xuLyoqXG4gKiBFbnVtIHRvIGRlc2NyaWJlIHdoZXJlIHRoZSBjb2x1bW4gaGFzIGJlZW4gZHJvcHBlZCwgYWZ0ZXIgc3RhcnRpbmcgdGhlIGRyYWdcbiAqIHtAZG9jQ2F0ZWdvcnkgRGV0YWlsc0xpc3R9XG4gKi9cbmV4cG9ydCB2YXIgQ29sdW1uRHJhZ0VuZExvY2F0aW9uO1xuKGZ1bmN0aW9uIChDb2x1bW5EcmFnRW5kTG9jYXRpb24pIHtcbiAgICAvKiogRHJhZyBlbmRlZCBvdXRzaWRlIG9mIGN1cnJlbnQgbGlzdCAqL1xuICAgIENvbHVtbkRyYWdFbmRMb2NhdGlvbltDb2x1bW5EcmFnRW5kTG9jYXRpb25bXCJvdXRzaWRlXCJdID0gMF0gPSBcIm91dHNpZGVcIjtcbiAgICAvKiogRHJhZyBlbmRlZCB3aXRoaW4gY3VycmVudCBsaXN0ICovXG4gICAgQ29sdW1uRHJhZ0VuZExvY2F0aW9uW0NvbHVtbkRyYWdFbmRMb2NhdGlvbltcInN1cmZhY2VcIl0gPSAxXSA9IFwic3VyZmFjZVwiO1xuICAgIC8qKiBEcmFnIGVuZGVkIG9uIGhlYWRlciAqL1xuICAgIENvbHVtbkRyYWdFbmRMb2NhdGlvbltDb2x1bW5EcmFnRW5kTG9jYXRpb25bXCJoZWFkZXJcIl0gPSAyXSA9IFwiaGVhZGVyXCI7XG59KShDb2x1bW5EcmFnRW5kTG9jYXRpb24gfHwgKENvbHVtbkRyYWdFbmRMb2NhdGlvbiA9IHt9KSk7XG4vKipcbiAqIHtAZG9jQ2F0ZWdvcnkgRGV0YWlsc0xpc3R9XG4gKi9cbmV4cG9ydCB2YXIgRGV0YWlsc0xpc3RMYXlvdXRNb2RlO1xuKGZ1bmN0aW9uIChEZXRhaWxzTGlzdExheW91dE1vZGUpIHtcbiAgICAvKipcbiAgICAgKiBMZXRzIHRoZSB1c2VyIHJlc2l6ZSBjb2x1bW5zIGFuZCBtYWtlcyBub3QgYXR0ZW1wdCB0byBmaXQgdGhlbS5cbiAgICAgKi9cbiAgICBEZXRhaWxzTGlzdExheW91dE1vZGVbRGV0YWlsc0xpc3RMYXlvdXRNb2RlW1wiZml4ZWRDb2x1bW5zXCJdID0gMF0gPSBcImZpeGVkQ29sdW1uc1wiO1xuICAgIC8qKlxuICAgICAqIE1hbmFnZXMgd2hpY2ggY29sdW1ucyBhcmUgdmlzaWJsZSwgdHJpZXMgdG8gc2l6ZSB0aGVtIGFjY29yZGluZyB0byB0aGVpciBtaW4vbWF4IHJ1bGVzIGFuZCBkcm9wc1xuICAgICAqIG9mZiBjb2x1bW5zIHRoYXQgY2FuJ3QgZml0IGFuZCBoYXZlIGlzQ29sbGFwc2libGUgc2V0LlxuICAgICAqL1xuICAgIERldGFpbHNMaXN0TGF5b3V0TW9kZVtEZXRhaWxzTGlzdExheW91dE1vZGVbXCJqdXN0aWZpZWRcIl0gPSAxXSA9IFwianVzdGlmaWVkXCI7XG59KShEZXRhaWxzTGlzdExheW91dE1vZGUgfHwgKERldGFpbHNMaXN0TGF5b3V0TW9kZSA9IHt9KSk7XG4vKipcbiAqIHtAZG9jQ2F0ZWdvcnkgRGV0YWlsc0xpc3R9XG4gKi9cbmV4cG9ydCB2YXIgQ2hlY2tib3hWaXNpYmlsaXR5O1xuKGZ1bmN0aW9uIChDaGVja2JveFZpc2liaWxpdHkpIHtcbiAgICAvKiogVmlzaWJsZSBvbiBob3Zlci4gKi9cbiAgICBDaGVja2JveFZpc2liaWxpdHlbQ2hlY2tib3hWaXNpYmlsaXR5W1wib25Ib3ZlclwiXSA9IDBdID0gXCJvbkhvdmVyXCI7XG4gICAgLyoqIFZpc2libGUgYWx3YXlzLiAqL1xuICAgIENoZWNrYm94VmlzaWJpbGl0eVtDaGVja2JveFZpc2liaWxpdHlbXCJhbHdheXNcIl0gPSAxXSA9IFwiYWx3YXlzXCI7XG4gICAgLyoqIEhpZGUgY2hlY2tib3hlcy4gKi9cbiAgICBDaGVja2JveFZpc2liaWxpdHlbQ2hlY2tib3hWaXNpYmlsaXR5W1wiaGlkZGVuXCJdID0gMl0gPSBcImhpZGRlblwiO1xufSkoQ2hlY2tib3hWaXNpYmlsaXR5IHx8IChDaGVja2JveFZpc2liaWxpdHkgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGV0YWlsc0xpc3QudHlwZXMuanMubWFwIiwiaW1wb3J0IHsgZ2V0VmlydHVhbFBhcmVudCB9IGZyb20gJy4vZ2V0VmlydHVhbFBhcmVudCc7XG4vKipcbiAqIEdldHMgdGhlIGVsZW1lbnQgd2hpY2ggaXMgdGhlIHBhcmVudCBvZiBhIGdpdmVuIGVsZW1lbnQuXG4gKiBJZiBgYWxsb3dWaXJ0dWFQYXJlbnRzYCBpcyBgdHJ1ZWAsIHRoaXMgbWV0aG9kIHByZWZlcnMgdGhlIHZpcnR1YWwgcGFyZW50IG92ZXJcbiAqIHJlYWwgRE9NIHBhcmVudCB3aGVuIHByZXNlbnQuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFyZW50KGNoaWxkLCBhbGxvd1ZpcnR1YWxQYXJlbnRzKSB7XG4gICAgaWYgKGFsbG93VmlydHVhbFBhcmVudHMgPT09IHZvaWQgMCkgeyBhbGxvd1ZpcnR1YWxQYXJlbnRzID0gdHJ1ZTsgfVxuICAgIHJldHVybiAoY2hpbGQgJiZcbiAgICAgICAgKChhbGxvd1ZpcnR1YWxQYXJlbnRzICYmIGdldFZpcnR1YWxQYXJlbnQoY2hpbGQpKSB8fCAoY2hpbGQucGFyZW50Tm9kZSAmJiBjaGlsZC5wYXJlbnROb2RlKSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0UGFyZW50LmpzLm1hcCIsImltcG9ydCB7IGlzVmlydHVhbEVsZW1lbnQgfSBmcm9tICcuL2lzVmlydHVhbEVsZW1lbnQnO1xuLyoqXG4gKiBHZXRzIHRoZSB2aXJ0dWFsIHBhcmVudCBnaXZlbiB0aGUgY2hpbGQgZWxlbWVudCwgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFZpcnR1YWxQYXJlbnQoY2hpbGQpIHtcbiAgICB2YXIgcGFyZW50O1xuICAgIGlmIChjaGlsZCAmJiBpc1ZpcnR1YWxFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICBwYXJlbnQgPSBjaGlsZC5fdmlydHVhbC5wYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiBwYXJlbnQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRWaXJ0dWFsUGFyZW50LmpzLm1hcCIsIi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCBhbiBlbGVtZW50IGhhcyB0aGUgdmlydHVhbCBoaWVyYXJjaHkgZXh0ZW5zaW9uLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVmlydHVhbEVsZW1lbnQoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50ICYmICEhZWxlbWVudC5fdmlydHVhbDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzVmlydHVhbEVsZW1lbnQuanMubWFwIiwiaW1wb3J0IHsgZ2V0UGFyZW50IH0gZnJvbSAnLi9nZXRQYXJlbnQnO1xuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IGEgcGFyZW50IGVsZW1lbnQgY29udGFpbnMgYSBnaXZlbiBjaGlsZCBlbGVtZW50LlxuICogSWYgYGFsbG93VmlydHVhbFBhcmVudHNgIGlzIHRydWUsIHRoaXMgbWV0aG9kIG1heSByZXR1cm4gYHRydWVgIGlmIHRoZSBjaGlsZFxuICogaGFzIHRoZSBwYXJlbnQgaW4gaXRzIHZpcnR1YWwgZWxlbWVudCBoaWVyYXJjaHkuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZWxlbWVudENvbnRhaW5zKHBhcmVudCwgY2hpbGQsIGFsbG93VmlydHVhbFBhcmVudHMpIHtcbiAgICBpZiAoYWxsb3dWaXJ0dWFsUGFyZW50cyA9PT0gdm9pZCAwKSB7IGFsbG93VmlydHVhbFBhcmVudHMgPSB0cnVlOyB9XG4gICAgdmFyIGlzQ29udGFpbmVkID0gZmFsc2U7XG4gICAgaWYgKHBhcmVudCAmJiBjaGlsZCkge1xuICAgICAgICBpZiAoYWxsb3dWaXJ0dWFsUGFyZW50cykge1xuICAgICAgICAgICAgaWYgKHBhcmVudCA9PT0gY2hpbGQpIHtcbiAgICAgICAgICAgICAgICBpc0NvbnRhaW5lZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpc0NvbnRhaW5lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dFBhcmVudCA9IGdldFBhcmVudChjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0UGFyZW50ID09PSBwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQ29udGFpbmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkID0gbmV4dFBhcmVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFyZW50LmNvbnRhaW5zKSB7XG4gICAgICAgICAgICBpc0NvbnRhaW5lZCA9IHBhcmVudC5jb250YWlucyhjaGlsZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGlzQ29udGFpbmVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWxlbWVudENvbnRhaW5zLmpzLm1hcCIsIi8qKlxuICogQ29uY2F0aW5hdGlvbiBoZWxwZXIsIHdoaWNoIGNhbiBtZXJnZSBjbGFzcyBuYW1lcyB0b2dldGhlci4gU2tpcHMgb3ZlciBmYWxzZXkgdmFsdWVzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNzcygpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIGNsYXNzZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfYSA9IDAsIGFyZ3NfMSA9IGFyZ3M7IF9hIDwgYXJnc18xLmxlbmd0aDsgX2ErKykge1xuICAgICAgICB2YXIgYXJnID0gYXJnc18xW19hXTtcbiAgICAgICAgaWYgKGFyZykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKGFyZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhcmcuaGFzT3duUHJvcGVydHkoJ3RvU3RyaW5nJykgJiYgdHlwZW9mIGFyZy50b1N0cmluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNsYXNzZXMucHVzaChhcmcudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBhcmcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jc3MuanMubWFwIiwiaW1wb3J0IHsgYXJyYXlzRXF1YWwgfSBmcm9tICcuL2FycmF5Jztcbi8qKlxuICogU2V0IHVwIGEgcmVmIHJlc29sdmVyIGZ1bmN0aW9uIGdpdmVuIGludGVybmFsIHN0YXRlIG1hbmFnZWQgZm9yIHRoZSByZWYuXG4gKiBAcGFyYW0gbG9jYWwgU2V0XG4gKi9cbnZhciBjcmVhdGVSZXNvbHZlciA9IGZ1bmN0aW9uIChsb2NhbCkgeyByZXR1cm4gZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGxvY2FsLnJlZnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciByZWYgPSBfYVtfaV07XG4gICAgICAgIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZWYobmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJlZikge1xuICAgICAgICAgICAgLy8gd29yayBhcm91bmQgdGhlIGltbXV0YWJpbGl0eSBvZiB0aGUgUmVhY3QuUmVmIHR5cGVcbiAgICAgICAgICAgIHJlZi5jdXJyZW50ID0gbmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59OyB9O1xuLyoqXG4gKiBIZWxwZXIgdG8gbWVyZ2UgcmVmcyBmcm9tIHdpdGhpbiBjbGFzcyBjb21wb25lbnRzLlxuICovXG5leHBvcnQgdmFyIGNyZWF0ZU1lcmdlZFJlZiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciBsb2NhbCA9IHtcbiAgICAgICAgcmVmczogW10sXG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV3UmVmcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgbmV3UmVmc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbG9jYWwucmVzb2x2ZXIgfHwgIWFycmF5c0VxdWFsKGxvY2FsLnJlZnMsIG5ld1JlZnMpKSB7XG4gICAgICAgICAgICBsb2NhbC5yZXNvbHZlciA9IGNyZWF0ZVJlc29sdmVyKGxvY2FsKTtcbiAgICAgICAgfVxuICAgICAgICBsb2NhbC5yZWZzID0gbmV3UmVmcztcbiAgICAgICAgcmV0dXJuIGxvY2FsLnJlc29sdmVyO1xuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlTWVyZ2VkUmVmLmpzLm1hcCIsImltcG9ydCB7IGdldFBhcmVudCB9IGZyb20gJy4vZ2V0UGFyZW50Jztcbi8qKlxuICogRmluZHMgdGhlIGZpcnN0IHBhcmVudCBlbGVtZW50IHdoZXJlIHRoZSBtYXRjaEZ1bmN0aW9uIHJldHVybnMgdHJ1ZVxuICogQHBhcmFtIGVsZW1lbnQgLSBlbGVtZW50IHRvIHN0YXJ0IHNlYXJjaGluZyBhdFxuICogQHBhcmFtIG1hdGNoRnVuY3Rpb24gLSB0aGUgZnVuY3Rpb24gdGhhdCBkZXRlcm1pbmVzIGlmIHRoZSBlbGVtZW50IGlzIGEgbWF0Y2hcbiAqIEByZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQgb3IgbnVsbCBubyBtYXRjaCB3YXMgZm91bmRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRFbGVtZW50UmVjdXJzaXZlKGVsZW1lbnQsIG1hdGNoRnVuY3Rpb24pIHtcbiAgICBpZiAoIWVsZW1lbnQgfHwgZWxlbWVudCA9PT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG1hdGNoRnVuY3Rpb24oZWxlbWVudCkgPyBlbGVtZW50IDogZmluZEVsZW1lbnRSZWN1cnNpdmUoZ2V0UGFyZW50KGVsZW1lbnQpLCBtYXRjaEZ1bmN0aW9uKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbmRFbGVtZW50UmVjdXJzaXZlLmpzLm1hcCIsImltcG9ydCB7IGVsZW1lbnRDb250YWluc0F0dHJpYnV0ZSB9IGZyb20gJy4vZG9tL2VsZW1lbnRDb250YWluc0F0dHJpYnV0ZSc7XG5pbXBvcnQgeyBlbGVtZW50Q29udGFpbnMgfSBmcm9tICcuL2RvbS9lbGVtZW50Q29udGFpbnMnO1xuaW1wb3J0IHsgZ2V0UGFyZW50IH0gZnJvbSAnLi9kb20vZ2V0UGFyZW50JztcbmltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJy4vZG9tL2dldFdpbmRvdyc7XG5pbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJy4vZG9tL2dldERvY3VtZW50JztcbnZhciBJU19GT0NVU0FCTEVfQVRUUklCVVRFID0gJ2RhdGEtaXMtZm9jdXNhYmxlJztcbnZhciBJU19WSVNJQkxFX0FUVFJJQlVURSA9ICdkYXRhLWlzLXZpc2libGUnO1xudmFyIEZPQ1VTWk9ORV9JRF9BVFRSSUJVVEUgPSAnZGF0YS1mb2N1c3pvbmUtaWQnO1xudmFyIEZPQ1VTWk9ORV9TVUJfQVRUUklCVVRFID0gJ2RhdGEtaXMtc3ViLWZvY3Vzem9uZSc7XG4vKipcbiAqIEdldHMgdGhlIGZpcnN0IGZvY3VzYWJsZSBlbGVtZW50LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZpcnN0Rm9jdXNhYmxlKHJvb3RFbGVtZW50LCBjdXJyZW50RWxlbWVudCwgaW5jbHVkZUVsZW1lbnRzSW5Gb2N1c1pvbmVzKSB7XG4gICAgcmV0dXJuIGdldE5leHRFbGVtZW50KHJvb3RFbGVtZW50LCBjdXJyZW50RWxlbWVudCwgdHJ1ZSAvKmNoZWNrTm9kZSovLCBmYWxzZSAvKnN1cHByZXNzUGFyZW50VHJhdmVyc2FsKi8sIGZhbHNlIC8qc3VwcHJlc3NDaGlsZFRyYXZlcnNhbCovLCBpbmNsdWRlRWxlbWVudHNJbkZvY3VzWm9uZXMpO1xufVxuLyoqXG4gKiBHZXRzIHRoZSBsYXN0IGZvY3VzYWJsZSBlbGVtZW50LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldExhc3RGb2N1c2FibGUocm9vdEVsZW1lbnQsIGN1cnJlbnRFbGVtZW50LCBpbmNsdWRlRWxlbWVudHNJbkZvY3VzWm9uZXMpIHtcbiAgICByZXR1cm4gZ2V0UHJldmlvdXNFbGVtZW50KHJvb3RFbGVtZW50LCBjdXJyZW50RWxlbWVudCwgdHJ1ZSAvKmNoZWNrTm9kZSovLCBmYWxzZSAvKnN1cHByZXNzUGFyZW50VHJhdmVyc2FsKi8sIHRydWUgLyp0cmF2ZXJzZUNoaWxkcmVuKi8sIGluY2x1ZGVFbGVtZW50c0luRm9jdXNab25lcyk7XG59XG4vKipcbiAqIEdldHMgdGhlIGZpcnN0IHRhYmJhYmxlIGVsZW1lbnQuIChUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIGZvY3VzYWJsZSBhbmQgdGFiYmFibGUgaXMgdGhhdCB0YWJiYWJsZSBlbGVtZW50cyBhcmVcbiAqIGZvY3VzYWJsZSBlbGVtZW50cyB0aGF0IGFsc28gaGF2ZSB0YWJJbmRleCAhPSAtMS4pXG4gKiBAcGFyYW0gcm9vdEVsZW1lbnQgLSBUaGUgcGFyZW50IGVsZW1lbnQgdG8gc2VhcmNoIGJlbmVhdGguXG4gKiBAcGFyYW0gY3VycmVudEVsZW1lbnQgLSBUaGUgZGVzY2VuZGFudCBvZiByb290RWxlbWVudCB0byBzdGFydCB0aGUgc2VhcmNoIGF0LiAgVGhpcyBlbGVtZW50IGlzIHRoZSBmaXJzdCBvbmUgY2hlY2tlZCxcbiAqIGFuZCBpdGVyYXRpb24gY29udGludWVzIGZvcndhcmQuICBUeXBpY2FsIHVzZSBwYXNzZXMgcm9vdEVsZW1lbnQuZmlyc3RDaGlsZC5cbiAqIEBwYXJhbSBpbmNsdWRlRWxlbWVudHNJbkZvY3VzWm9uZXMgLSB0cnVlIGlmIHRyYXZlcnNhbCBzaG91bGQgZ28gaW50byBGb2N1c1pvbmUgZGVzY2VuZGFudHMuXG4gKiBAcGFyYW0gY2hlY2tOb2RlIC0gSW5jbHVkZSBjdXJyZW50RWxlbWVudCBpbiBzZWFyY2ggd2hlbiB0cnVlLiBEZWZhdWx0cyB0byB0cnVlLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rmlyc3RUYWJiYWJsZShyb290RWxlbWVudCwgY3VycmVudEVsZW1lbnQsIGluY2x1ZGVFbGVtZW50c0luRm9jdXNab25lcywgY2hlY2tOb2RlKSB7XG4gICAgaWYgKGNoZWNrTm9kZSA9PT0gdm9pZCAwKSB7IGNoZWNrTm9kZSA9IHRydWU7IH1cbiAgICByZXR1cm4gZ2V0TmV4dEVsZW1lbnQocm9vdEVsZW1lbnQsIGN1cnJlbnRFbGVtZW50LCBjaGVja05vZGUsIGZhbHNlIC8qc3VwcHJlc3NQYXJlbnRUcmF2ZXJzYWwqLywgZmFsc2UgLypzdXBwcmVzc0NoaWxkVHJhdmVyc2FsKi8sIGluY2x1ZGVFbGVtZW50c0luRm9jdXNab25lcywgZmFsc2UgLyphbGxvd0ZvY3VzUm9vdCovLCB0cnVlIC8qdGFiYmFibGUqLyk7XG59XG4vKipcbiAqIEdldHMgdGhlIGxhc3QgdGFiYmFibGUgZWxlbWVudC4gKFRoZSBkaWZmZXJlbmNlIGJldHdlZW4gZm9jdXNhYmxlIGFuZCB0YWJiYWJsZSBpcyB0aGF0IHRhYmJhYmxlIGVsZW1lbnRzIGFyZVxuICogZm9jdXNhYmxlIGVsZW1lbnRzIHRoYXQgYWxzbyBoYXZlIHRhYkluZGV4ICE9IC0xLilcbiAqIEBwYXJhbSByb290RWxlbWVudCAtIFRoZSBwYXJlbnQgZWxlbWVudCB0byBzZWFyY2ggYmVuZWF0aC5cbiAqIEBwYXJhbSBjdXJyZW50RWxlbWVudCAtIFRoZSBkZXNjZW5kYW50IG9mIHJvb3RFbGVtZW50IHRvIHN0YXJ0IHRoZSBzZWFyY2ggYXQuICBUaGlzIGVsZW1lbnQgaXMgdGhlIGZpcnN0IG9uZSBjaGVja2VkLFxuICogYW5kIGl0ZXJhdGlvbiBjb250aW51ZXMgaW4gcmV2ZXJzZS4gIFR5cGljYWwgdXNlIHBhc3NlcyByb290RWxlbWVudC5sYXN0Q2hpbGQuXG4gKiBAcGFyYW0gaW5jbHVkZUVsZW1lbnRzSW5Gb2N1c1pvbmVzIC0gdHJ1ZSBpZiB0cmF2ZXJzYWwgc2hvdWxkIGdvIGludG8gRm9jdXNab25lIGRlc2NlbmRhbnRzLlxuICogQHBhcmFtIGNoZWNrTm9kZSAtIEluY2x1ZGUgY3VycmVudEVsZW1lbnQgaW4gc2VhcmNoIHdoZW4gdHJ1ZS4gRGVmYXVsdHMgdG8gdHJ1ZS5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldExhc3RUYWJiYWJsZShyb290RWxlbWVudCwgY3VycmVudEVsZW1lbnQsIGluY2x1ZGVFbGVtZW50c0luRm9jdXNab25lcywgY2hlY2tOb2RlKSB7XG4gICAgaWYgKGNoZWNrTm9kZSA9PT0gdm9pZCAwKSB7IGNoZWNrTm9kZSA9IHRydWU7IH1cbiAgICByZXR1cm4gZ2V0UHJldmlvdXNFbGVtZW50KHJvb3RFbGVtZW50LCBjdXJyZW50RWxlbWVudCwgY2hlY2tOb2RlLCBmYWxzZSAvKnN1cHByZXNzUGFyZW50VHJhdmVyc2FsKi8sIHRydWUgLyp0cmF2ZXJzZUNoaWxkcmVuKi8sIGluY2x1ZGVFbGVtZW50c0luRm9jdXNab25lcywgZmFsc2UgLyphbGxvd0ZvY3VzUm9vdCovLCB0cnVlIC8qdGFiYmFibGUqLyk7XG59XG4vKipcbiAqIEF0dGVtcHRzIHRvIGZvY3VzIHRoZSBmaXJzdCBmb2N1c2FibGUgZWxlbWVudCB0aGF0IGlzIGEgY2hpbGQgb3IgY2hpbGQncyBjaGlsZCBvZiB0aGUgcm9vdEVsZW1lbnQuXG4gKlxuICogQHB1YmxpY1xuICogQHBhcmFtIHJvb3RFbGVtZW50IC0gRWxlbWVudCB0byBzdGFydCB0aGUgc2VhcmNoIGZvciBhIGZvY3VzYWJsZSBjaGlsZC5cbiAqIEByZXR1cm5zIFRydWUgaWYgZm9jdXMgd2FzIHNldCwgZmFsc2UgaWYgaXQgd2FzIG5vdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvY3VzRmlyc3RDaGlsZChyb290RWxlbWVudCkge1xuICAgIHZhciBlbGVtZW50ID0gZ2V0TmV4dEVsZW1lbnQocm9vdEVsZW1lbnQsIHJvb3RFbGVtZW50LCB0cnVlLCBmYWxzZSwgZmFsc2UsIHRydWUpO1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgIGZvY3VzQXN5bmMoZWxlbWVudCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIFRyYXZlcnNlIHRvIGZpbmQgdGhlIHByZXZpb3VzIGVsZW1lbnQuXG4gKiBJZiB0YWJiYWJsZSBpcyB0cnVlLCB0aGUgZWxlbWVudCBtdXN0IGhhdmUgdGFiSW5kZXggIT0gLTEuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJldmlvdXNFbGVtZW50KHJvb3RFbGVtZW50LCBjdXJyZW50RWxlbWVudCwgY2hlY2tOb2RlLCBzdXBwcmVzc1BhcmVudFRyYXZlcnNhbCwgdHJhdmVyc2VDaGlsZHJlbiwgaW5jbHVkZUVsZW1lbnRzSW5Gb2N1c1pvbmVzLCBhbGxvd0ZvY3VzUm9vdCwgdGFiYmFibGUpIHtcbiAgICBpZiAoIWN1cnJlbnRFbGVtZW50IHx8ICghYWxsb3dGb2N1c1Jvb3QgJiYgY3VycmVudEVsZW1lbnQgPT09IHJvb3RFbGVtZW50KSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGlzQ3VycmVudEVsZW1lbnRWaXNpYmxlID0gaXNFbGVtZW50VmlzaWJsZShjdXJyZW50RWxlbWVudCk7XG4gICAgLy8gQ2hlY2sgaXRzIGNoaWxkcmVuLlxuICAgIGlmICh0cmF2ZXJzZUNoaWxkcmVuICYmXG4gICAgICAgIGlzQ3VycmVudEVsZW1lbnRWaXNpYmxlICYmXG4gICAgICAgIChpbmNsdWRlRWxlbWVudHNJbkZvY3VzWm9uZXMgfHwgIShpc0VsZW1lbnRGb2N1c1pvbmUoY3VycmVudEVsZW1lbnQpIHx8IGlzRWxlbWVudEZvY3VzU3ViWm9uZShjdXJyZW50RWxlbWVudCkpKSkge1xuICAgICAgICB2YXIgY2hpbGRNYXRjaCA9IGdldFByZXZpb3VzRWxlbWVudChyb290RWxlbWVudCwgY3VycmVudEVsZW1lbnQubGFzdEVsZW1lbnRDaGlsZCwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgaW5jbHVkZUVsZW1lbnRzSW5Gb2N1c1pvbmVzLCBhbGxvd0ZvY3VzUm9vdCwgdGFiYmFibGUpO1xuICAgICAgICBpZiAoY2hpbGRNYXRjaCkge1xuICAgICAgICAgICAgaWYgKCh0YWJiYWJsZSAmJiBpc0VsZW1lbnRUYWJiYWJsZShjaGlsZE1hdGNoLCB0cnVlKSkgfHwgIXRhYmJhYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkTWF0Y2g7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY2hpbGRNYXRjaFNpYmxpbmdNYXRjaCA9IGdldFByZXZpb3VzRWxlbWVudChyb290RWxlbWVudCwgY2hpbGRNYXRjaC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLCB0cnVlLCB0cnVlLCB0cnVlLCBpbmNsdWRlRWxlbWVudHNJbkZvY3VzWm9uZXMsIGFsbG93Rm9jdXNSb290LCB0YWJiYWJsZSk7XG4gICAgICAgICAgICBpZiAoY2hpbGRNYXRjaFNpYmxpbmdNYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZE1hdGNoU2libGluZ01hdGNoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNoaWxkTWF0Y2hQYXJlbnQgPSBjaGlsZE1hdGNoLnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50IGlmIHdlIGhhdmUgbm90IGZvdW5kIGFueSBwb3RlbnRpYWwgbWF0Y2hlc1xuICAgICAgICAgICAgLy8gc3RhcnQgbG9va2luZyBhdCB0aGUgcmVzdCBvZiB0aGUgc3VidHJlZSB1bmRlciB0aGUgY3VycmVudFBhcmVudC5cbiAgICAgICAgICAgIC8vIE5PVEU6IFdlIGRvIG5vdCB3YW50IHRvIHJlY3Vyc2UgaGVyZSBiZWNhdXNlIGRvaW5nIHNvIGNvdWxkXG4gICAgICAgICAgICAvLyBjYXVzZSBlbGVtZW50cyB0byBnZXQgc2tpcHBlZC5cbiAgICAgICAgICAgIHdoaWxlIChjaGlsZE1hdGNoUGFyZW50ICYmIGNoaWxkTWF0Y2hQYXJlbnQgIT09IGN1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkTWF0Y2hQYXJlbnRNYXRjaCA9IGdldFByZXZpb3VzRWxlbWVudChyb290RWxlbWVudCwgY2hpbGRNYXRjaFBhcmVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLCB0cnVlLCB0cnVlLCB0cnVlLCBpbmNsdWRlRWxlbWVudHNJbkZvY3VzWm9uZXMsIGFsbG93Rm9jdXNSb290LCB0YWJiYWJsZSk7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkTWF0Y2hQYXJlbnRNYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGRNYXRjaFBhcmVudE1hdGNoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjaGlsZE1hdGNoUGFyZW50ID0gY2hpbGRNYXRjaFBhcmVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIENoZWNrIHRoZSBjdXJyZW50IG5vZGUsIGlmIGl0J3Mgbm90IHRoZSBmaXJzdCB0cmF2ZXJzYWwuXG4gICAgaWYgKGNoZWNrTm9kZSAmJiBpc0N1cnJlbnRFbGVtZW50VmlzaWJsZSAmJiBpc0VsZW1lbnRUYWJiYWJsZShjdXJyZW50RWxlbWVudCwgdGFiYmFibGUpKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50RWxlbWVudDtcbiAgICB9XG4gICAgLy8gQ2hlY2sgaXRzIHByZXZpb3VzIHNpYmxpbmcuXG4gICAgdmFyIHNpYmxpbmdNYXRjaCA9IGdldFByZXZpb3VzRWxlbWVudChyb290RWxlbWVudCwgY3VycmVudEVsZW1lbnQucHJldmlvdXNFbGVtZW50U2libGluZywgdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgaW5jbHVkZUVsZW1lbnRzSW5Gb2N1c1pvbmVzLCBhbGxvd0ZvY3VzUm9vdCwgdGFiYmFibGUpO1xuICAgIGlmIChzaWJsaW5nTWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHNpYmxpbmdNYXRjaDtcbiAgICB9XG4gICAgLy8gQ2hlY2sgaXRzIHBhcmVudC5cbiAgICBpZiAoIXN1cHByZXNzUGFyZW50VHJhdmVyc2FsKSB7XG4gICAgICAgIHJldHVybiBnZXRQcmV2aW91c0VsZW1lbnQocm9vdEVsZW1lbnQsIGN1cnJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQsIHRydWUsIGZhbHNlLCBmYWxzZSwgaW5jbHVkZUVsZW1lbnRzSW5Gb2N1c1pvbmVzLCBhbGxvd0ZvY3VzUm9vdCwgdGFiYmFibGUpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogVHJhdmVyc2UgdG8gZmluZCB0aGUgbmV4dCBmb2N1c2FibGUgZWxlbWVudC5cbiAqIElmIHRhYmJhYmxlIGlzIHRydWUsIHRoZSBlbGVtZW50IG11c3QgaGF2ZSB0YWJJbmRleCAhPSAtMS5cbiAqXG4gKiBAcHVibGljXG4gKiBAcGFyYW0gY2hlY2tOb2RlIC0gSW5jbHVkZSBjdXJyZW50RWxlbWVudCBpbiBzZWFyY2ggd2hlbiB0cnVlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV4dEVsZW1lbnQocm9vdEVsZW1lbnQsIGN1cnJlbnRFbGVtZW50LCBjaGVja05vZGUsIHN1cHByZXNzUGFyZW50VHJhdmVyc2FsLCBzdXBwcmVzc0NoaWxkVHJhdmVyc2FsLCBpbmNsdWRlRWxlbWVudHNJbkZvY3VzWm9uZXMsIGFsbG93Rm9jdXNSb290LCB0YWJiYWJsZSkge1xuICAgIGlmICghY3VycmVudEVsZW1lbnQgfHwgKGN1cnJlbnRFbGVtZW50ID09PSByb290RWxlbWVudCAmJiBzdXBwcmVzc0NoaWxkVHJhdmVyc2FsICYmICFhbGxvd0ZvY3VzUm9vdCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBpc0N1cnJlbnRFbGVtZW50VmlzaWJsZSA9IGlzRWxlbWVudFZpc2libGUoY3VycmVudEVsZW1lbnQpO1xuICAgIC8vIENoZWNrIHRoZSBjdXJyZW50IG5vZGUsIGlmIGl0J3Mgbm90IHRoZSBmaXJzdCB0cmF2ZXJzYWwuXG4gICAgaWYgKGNoZWNrTm9kZSAmJiBpc0N1cnJlbnRFbGVtZW50VmlzaWJsZSAmJiBpc0VsZW1lbnRUYWJiYWJsZShjdXJyZW50RWxlbWVudCwgdGFiYmFibGUpKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50RWxlbWVudDtcbiAgICB9XG4gICAgLy8gQ2hlY2sgaXRzIGNoaWxkcmVuLlxuICAgIGlmICghc3VwcHJlc3NDaGlsZFRyYXZlcnNhbCAmJlxuICAgICAgICBpc0N1cnJlbnRFbGVtZW50VmlzaWJsZSAmJlxuICAgICAgICAoaW5jbHVkZUVsZW1lbnRzSW5Gb2N1c1pvbmVzIHx8ICEoaXNFbGVtZW50Rm9jdXNab25lKGN1cnJlbnRFbGVtZW50KSB8fCBpc0VsZW1lbnRGb2N1c1N1YlpvbmUoY3VycmVudEVsZW1lbnQpKSkpIHtcbiAgICAgICAgdmFyIGNoaWxkTWF0Y2ggPSBnZXROZXh0RWxlbWVudChyb290RWxlbWVudCwgY3VycmVudEVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQsIHRydWUsIHRydWUsIGZhbHNlLCBpbmNsdWRlRWxlbWVudHNJbkZvY3VzWm9uZXMsIGFsbG93Rm9jdXNSb290LCB0YWJiYWJsZSk7XG4gICAgICAgIGlmIChjaGlsZE1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRNYXRjaDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoY3VycmVudEVsZW1lbnQgPT09IHJvb3RFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBDaGVjayBpdHMgc2libGluZy5cbiAgICB2YXIgc2libGluZ01hdGNoID0gZ2V0TmV4dEVsZW1lbnQocm9vdEVsZW1lbnQsIGN1cnJlbnRFbGVtZW50Lm5leHRFbGVtZW50U2libGluZywgdHJ1ZSwgdHJ1ZSwgZmFsc2UsIGluY2x1ZGVFbGVtZW50c0luRm9jdXNab25lcywgYWxsb3dGb2N1c1Jvb3QsIHRhYmJhYmxlKTtcbiAgICBpZiAoc2libGluZ01hdGNoKSB7XG4gICAgICAgIHJldHVybiBzaWJsaW5nTWF0Y2g7XG4gICAgfVxuICAgIGlmICghc3VwcHJlc3NQYXJlbnRUcmF2ZXJzYWwpIHtcbiAgICAgICAgcmV0dXJuIGdldE5leHRFbGVtZW50KHJvb3RFbGVtZW50LCBjdXJyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LCBmYWxzZSwgZmFsc2UsIHRydWUsIGluY2x1ZGVFbGVtZW50c0luRm9jdXNab25lcywgYWxsb3dGb2N1c1Jvb3QsIHRhYmJhYmxlKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgYW4gZWxlbWVudCBpcyB2aXNpYmxlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRWxlbWVudFZpc2libGUoZWxlbWVudCkge1xuICAgIC8vIElmIHRoZSBlbGVtZW50IGlzIG5vdCB2YWxpZCwgcmV0dXJuIGZhbHNlLlxuICAgIGlmICghZWxlbWVudCB8fCAhZWxlbWVudC5nZXRBdHRyaWJ1dGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgdmlzaWJpbGl0eUF0dHJpYnV0ZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKElTX1ZJU0lCTEVfQVRUUklCVVRFKTtcbiAgICAvLyBJZiB0aGUgZWxlbWVudCBpcyBleHBsaWNpdGx5IG1hcmtlZCB3aXRoIHRoZSB2aXNpYmlsaXR5IGF0dHJpYnV0ZSwgcmV0dXJuIHRoYXQgdmFsdWUgYXMgYm9vbGVhbi5cbiAgICBpZiAodmlzaWJpbGl0eUF0dHJpYnV0ZSAhPT0gbnVsbCAmJiB2aXNpYmlsaXR5QXR0cmlidXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHZpc2liaWxpdHlBdHRyaWJ1dGUgPT09ICd0cnVlJztcbiAgICB9XG4gICAgLy8gRmFsbGJhY2sgdG8gb3RoZXIgbWV0aG9kcyBvZiBkZXRlcm1pbmluZyBhY3R1YWwgdmlzaWJpbGl0eS5cbiAgICByZXR1cm4gKGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICE9PSAwIHx8XG4gICAgICAgIGVsZW1lbnQub2Zmc2V0UGFyZW50ICE9PSBudWxsIHx8XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIGVsZW1lbnQuaXNWaXNpYmxlID09PSB0cnVlKTsgLy8gdXNlZCBhcyBhIHdvcmthcm91bmQgZm9yIHRlc3RpbmcuXG59XG4vKipcbiAqIERldGVybWluZXMgaWYgYW4gZWxlbWVudCBjYW4gcmVjZWl2ZSBmb2N1cyBwcm9ncmFtbWF0aWNhbGx5IG9yIHZpYSBhIG1vdXNlIGNsaWNrLlxuICogSWYgY2hlY2tUYWJJbmRleCBpcyB0cnVlLCBhZGRpdGlvbmFsbHkgY2hlY2tzIHRvIGVuc3VyZSB0aGUgZWxlbWVudCBjYW4gYmUgZm9jdXNlZCB3aXRoIHRoZSB0YWIga2V5LFxuICogbWVhbmluZyB0YWJJbmRleCAhPSAtMS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VsZW1lbnRUYWJiYWJsZShlbGVtZW50LCBjaGVja1RhYkluZGV4KSB7XG4gICAgLy8gSWYgdGhpcyBlbGVtZW50IGlzIG51bGwgb3IgaXMgZGlzYWJsZWQsIGl0IGlzIG5vdCBjb25zaWRlcmVkIHRhYmJhYmxlLlxuICAgIGlmICghZWxlbWVudCB8fCBlbGVtZW50LmRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHRhYkluZGV4ID0gMDtcbiAgICB2YXIgdGFiSW5kZXhBdHRyaWJ1dGVWYWx1ZSA9IG51bGw7XG4gICAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUpIHtcbiAgICAgICAgdGFiSW5kZXhBdHRyaWJ1dGVWYWx1ZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0YWJJbmRleCcpO1xuICAgICAgICBpZiAodGFiSW5kZXhBdHRyaWJ1dGVWYWx1ZSkge1xuICAgICAgICAgICAgdGFiSW5kZXggPSBwYXJzZUludCh0YWJJbmRleEF0dHJpYnV0ZVZhbHVlLCAxMCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGlzRm9jdXNhYmxlQXR0cmlidXRlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUgPyBlbGVtZW50LmdldEF0dHJpYnV0ZShJU19GT0NVU0FCTEVfQVRUUklCVVRFKSA6IG51bGw7XG4gICAgdmFyIGlzVGFiSW5kZXhTZXQgPSB0YWJJbmRleEF0dHJpYnV0ZVZhbHVlICE9PSBudWxsICYmIHRhYkluZGV4ID49IDA7XG4gICAgdmFyIHJlc3VsdCA9ICEhZWxlbWVudCAmJlxuICAgICAgICBpc0ZvY3VzYWJsZUF0dHJpYnV0ZSAhPT0gJ2ZhbHNlJyAmJlxuICAgICAgICAoZWxlbWVudC50YWdOYW1lID09PSAnQScgfHxcbiAgICAgICAgICAgIGVsZW1lbnQudGFnTmFtZSA9PT0gJ0JVVFRPTicgfHxcbiAgICAgICAgICAgIGVsZW1lbnQudGFnTmFtZSA9PT0gJ0lOUFVUJyB8fFxuICAgICAgICAgICAgZWxlbWVudC50YWdOYW1lID09PSAnVEVYVEFSRUEnIHx8XG4gICAgICAgICAgICBlbGVtZW50LnRhZ05hbWUgPT09ICdTRUxFQ1QnIHx8XG4gICAgICAgICAgICBpc0ZvY3VzYWJsZUF0dHJpYnV0ZSA9PT0gJ3RydWUnIHx8XG4gICAgICAgICAgICBpc1RhYkluZGV4U2V0KTtcbiAgICByZXR1cm4gY2hlY2tUYWJJbmRleCA/IHRhYkluZGV4ICE9PSAtMSAmJiByZXN1bHQgOiByZXN1bHQ7XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgYSBnaXZlbiBlbGVtZW50IGlzIGEgZm9jdXMgem9uZS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VsZW1lbnRGb2N1c1pvbmUoZWxlbWVudCkge1xuICAgIHJldHVybiAhIShlbGVtZW50ICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlICYmICEhZWxlbWVudC5nZXRBdHRyaWJ1dGUoRk9DVVNaT05FX0lEX0FUVFJJQlVURSkpO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgZ2l2ZW4gZWxlbWVudCBpcyBhIGZvY3VzIHN1YiB6b25lLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRWxlbWVudEZvY3VzU3ViWm9uZShlbGVtZW50KSB7XG4gICAgcmV0dXJuICEhKGVsZW1lbnQgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUoRk9DVVNaT05FX1NVQl9BVFRSSUJVVEUpID09PSAndHJ1ZScpO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGFuIGVsZW1lbnQsIG9yIGFueSBvZiBpdHMgY2hpbGRyZW4sIGNvbnRhaW4gZm9jdXMuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZG9lc0VsZW1lbnRDb250YWluRm9jdXMoZWxlbWVudCkge1xuICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KGVsZW1lbnQpO1xuICAgIHZhciBjdXJyZW50QWN0aXZlRWxlbWVudCA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgaWYgKGN1cnJlbnRBY3RpdmVFbGVtZW50ICYmIGVsZW1lbnRDb250YWlucyhlbGVtZW50LCBjdXJyZW50QWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhbiwgb3IgYW55IG9mIGl0cyBhbmNlc3RvcnMsIHNlcGNpZmljaWVzIHRoYXQgaXQgZG9lc24ndCB3YW50IGZvY3VzIHRvIHdyYXBcbiAqIEBwYXJhbSBlbGVtZW50IC0gZWxlbWVudCB0byBzdGFydCBzZWFyY2hpbmcgZnJvbVxuICogQHBhcmFtIG5vV3JhcERhdGFBdHRyaWJ1dGUgLSB0aGUgbm8gd3JhcCBkYXRhIGF0dHJpYnV0ZSB0byBtYXRjaCAoZWl0aGVyKVxuICogQHJldHVybnMgdHJ1ZSBpZiBmb2N1cyBzaG91bGQgd3JhcCwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRXcmFwRm9jdXMoZWxlbWVudCwgbm9XcmFwRGF0YUF0dHJpYnV0ZSkge1xuICAgIHJldHVybiBlbGVtZW50Q29udGFpbnNBdHRyaWJ1dGUoZWxlbWVudCwgbm9XcmFwRGF0YUF0dHJpYnV0ZSkgPT09ICd0cnVlJyA/IGZhbHNlIDogdHJ1ZTtcbn1cbnZhciB0YXJnZXRUb0ZvY3VzT25OZXh0UmVwYWludCA9IHVuZGVmaW5lZDtcbi8qKlxuICogU2V0cyBmb2N1cyB0byBhbiBlbGVtZW50IGFzeW5jaHJvbm91c2x5LiBUaGUgZm9jdXMgd2lsbCBiZSBzZXQgYXQgdGhlIG5leHQgYnJvd3NlciByZXBhaW50LFxuICogbWVhbmluZyBpdCB3b24ndCBjYXVzZSBhbnkgZXh0cmEgcmVjYWxjdWxhdGlvbnMuIElmIG1vcmUgdGhhbiBvbmUgZm9jdXNBc3luYyBpcyBjYWxsZWQgZHVyaW5nIG9uZSBmcmFtZSxcbiAqIG9ubHkgdGhlIGxhdGVzdCBjYWxsZWQgZm9jdXNBc3luYyBlbGVtZW50IHdpbGwgYWN0dWFsbHkgYmUgZm9jdXNlZFxuICogQHBhcmFtIGVsZW1lbnQgLSBUaGUgZWxlbWVudCB0byBmb2N1c1xuICovXG5leHBvcnQgZnVuY3Rpb24gZm9jdXNBc3luYyhlbGVtZW50KSB7XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgLy8gQW4gZWxlbWVudCB3YXMgYWxyZWFkeSBxdWV1ZWQgdG8gYmUgZm9jdXNlZCwgc28gcmVwbGFjZSB0aGF0IG9uZSB3aXRoIHRoZSBuZXcgZWxlbWVudFxuICAgICAgICBpZiAodGFyZ2V0VG9Gb2N1c09uTmV4dFJlcGFpbnQpIHtcbiAgICAgICAgICAgIHRhcmdldFRvRm9jdXNPbk5leHRSZXBhaW50ID0gZWxlbWVudDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXRUb0ZvY3VzT25OZXh0UmVwYWludCA9IGVsZW1lbnQ7XG4gICAgICAgIHZhciB3aW4gPSBnZXRXaW5kb3coZWxlbWVudCk7XG4gICAgICAgIGlmICh3aW4pIHtcbiAgICAgICAgICAgIC8vIGVsZW1lbnQuZm9jdXMoKSBpcyBhIG5vLW9wIGlmIHRoZSBlbGVtZW50IGlzIG5vIGxvbmdlciBpbiB0aGUgRE9NLCBtZWFuaW5nIHRoaXMgaXMgYWx3YXlzIHNhZmVcbiAgICAgICAgICAgIHdpbi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBmb2N1c2FibGVFbGVtZW50ID0gdGFyZ2V0VG9Gb2N1c09uTmV4dFJlcGFpbnQ7XG4gICAgICAgICAgICAgICAgLy8gV2UgYXJlIGRvbmUgZm9jdXNpbmcgZm9yIHRoaXMgZnJhbWUsIHNvIHJlc2V0IHRoZSBxdWV1ZWQgZm9jdXMgZWxlbWVudFxuICAgICAgICAgICAgICAgIHRhcmdldFRvRm9jdXNPbk5leHRSZXBhaW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGlmIChmb2N1c2FibGVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmb2N1c2FibGVFbGVtZW50LmdldEF0dHJpYnV0ZSAmJiBmb2N1c2FibGVFbGVtZW50LmdldEF0dHJpYnV0ZShJU19GT0NVU0FCTEVfQVRUUklCVVRFKSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3JtYWxseSwgYSBGb2N1c1pvbmUgd291bGQgYmUgcmVzcG9uc2libGUgZm9yIHNldHRpbmcgdGhlIHRhYmluZGV4IHZhbHVlcyBvbiBhbGwgaXRzIGRlc2NlbmRhbnRzLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSG93ZXZlciwgZXZlbiB0aGlzIGFuaW1hdGlvbiBmcmFtZSBjYWxsYmFjayBjYW4gcHJlLWVtcHQgdGhlIHJlbmRlcmluZyBvZiBhIEZvY3VzWm9uZSdzIGNoaWxkIGVsZW1lbnRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc28gaXQgbWF5IGJlIG5lY2Vzc2FyeSB0byBzZXQgdGhlIHRhYmluZGV4IGRpcmVjdGx5IGhlcmUuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZvY3VzYWJsZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0YWJpbmRleCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNhYmxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJzAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmb2N1c2FibGVFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEZpbmRzIHRoZSBjbG9zZXN0IGZvY3VzYWJsZSBlbGVtZW50IHZpYSBhbiBpbmRleCBwYXRoIGZyb20gYSBwYXJlbnQuIFNlZVxuICogYGdldEVsZW1lbnRJbmRleFBhdGhgIGZvciBnZXR0aW5nIGFuIGluZGV4IHBhdGggZnJvbSBhbiBlbGVtZW50IHRvIGEgY2hpbGQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRGb2N1c2FibGVCeUluZGV4UGF0aChwYXJlbnQsIHBhdGgpIHtcbiAgICB2YXIgZWxlbWVudCA9IHBhcmVudDtcbiAgICBmb3IgKHZhciBfaSA9IDAsIHBhdGhfMSA9IHBhdGg7IF9pIDwgcGF0aF8xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgaW5kZXggPSBwYXRoXzFbX2ldO1xuICAgICAgICB2YXIgbmV4dENoaWxkID0gZWxlbWVudC5jaGlsZHJlbltNYXRoLm1pbihpbmRleCwgZWxlbWVudC5jaGlsZHJlbi5sZW5ndGggLSAxKV07XG4gICAgICAgIGlmICghbmV4dENoaWxkKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50ID0gbmV4dENoaWxkO1xuICAgIH1cbiAgICBlbGVtZW50ID1cbiAgICAgICAgaXNFbGVtZW50VGFiYmFibGUoZWxlbWVudCkgJiYgaXNFbGVtZW50VmlzaWJsZShlbGVtZW50KVxuICAgICAgICAgICAgPyBlbGVtZW50XG4gICAgICAgICAgICA6IGdldE5leHRFbGVtZW50KHBhcmVudCwgZWxlbWVudCwgdHJ1ZSkgfHwgZ2V0UHJldmlvdXNFbGVtZW50KHBhcmVudCwgZWxlbWVudCk7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG59XG4vKipcbiAqIEZpbmRzIHRoZSBlbGVtZW50IGluZGV4IHBhdGggZnJvbSBhIHBhcmVudCBlbGVtZW50IHRvIGEgY2hpbGQgZWxlbWVudC5cbiAqXG4gKiBJZiB5b3UgaGFkIHRoaXMgbm9kZSBzdHJ1Y3R1cmU6IFwiQSBoYXMgY2hpbGRyZW4gW0IsIENdIGFuZCBDIGhhcyBjaGlsZCBEXCIsXG4gKiB0aGUgaW5kZXggcGF0aCBmcm9tIEEgdG8gRCB3b3VsZCBiZSBbMSwgMF0sIG9yIGBwYXJlbnQuY2hpZHJlblsxXS5jaGlsZHJlblswXWAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbGVtZW50SW5kZXhQYXRoKGZyb21FbGVtZW50LCB0b0VsZW1lbnQpIHtcbiAgICB2YXIgcGF0aCA9IFtdO1xuICAgIHdoaWxlICh0b0VsZW1lbnQgJiYgZnJvbUVsZW1lbnQgJiYgdG9FbGVtZW50ICE9PSBmcm9tRWxlbWVudCkge1xuICAgICAgICB2YXIgcGFyZW50XzEgPSBnZXRQYXJlbnQodG9FbGVtZW50LCB0cnVlKTtcbiAgICAgICAgaWYgKHBhcmVudF8xID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgcGF0aC51bnNoaWZ0KEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwocGFyZW50XzEuY2hpbGRyZW4sIHRvRWxlbWVudCkpO1xuICAgICAgICB0b0VsZW1lbnQgPSBwYXJlbnRfMTtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGg7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb2N1cy5qcy5tYXAiLCJpbXBvcnQgeyBmaW5kRWxlbWVudFJlY3Vyc2l2ZSB9IGZyb20gJy4vZmluZEVsZW1lbnRSZWN1cnNpdmUnO1xuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGFuIGVsZW1lbnQsIG9yIGFueSBvZiBpdHMgYW5jZXN0b3JzLCBjb250YWluIHRoZSBnaXZlbiBhdHRyaWJ1dGVcbiAqIEBwYXJhbSBlbGVtZW50IC0gZWxlbWVudCB0byBzdGFydCBzZWFyY2hpbmcgYXRcbiAqIEBwYXJhbSBhdHRyaWJ1dGUgLSB0aGUgYXR0cmlidXRlIHRvIHNlYXJjaCBmb3JcbiAqIEByZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgaW5zdGFuY2UgZm91bmRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVsZW1lbnRDb250YWluc0F0dHJpYnV0ZShlbGVtZW50LCBhdHRyaWJ1dGUpIHtcbiAgICB2YXIgZWxlbWVudE1hdGNoID0gZmluZEVsZW1lbnRSZWN1cnNpdmUoZWxlbWVudCwgZnVuY3Rpb24gKHRlc3RFbGVtZW50KSB7IHJldHVybiB0ZXN0RWxlbWVudC5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlKTsgfSk7XG4gICAgcmV0dXJuIGVsZW1lbnRNYXRjaCAmJiBlbGVtZW50TWF0Y2guZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbGVtZW50Q29udGFpbnNBdHRyaWJ1dGUuanMubWFwIiwiaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICcuL2RvbS9nZXREb2N1bWVudCc7XG5pbXBvcnQgeyBtZXJnZVN0eWxlcyB9IGZyb20gJ0B1aWZhYnJpYy9tZXJnZS1zdHlsZXMnO1xuaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnLi9kb20vZ2V0V2luZG93JztcbnZhciBfc2Nyb2xsYmFyV2lkdGg7XG52YXIgX2JvZHlTY3JvbGxEaXNhYmxlZENvdW50ID0gMDtcbnZhciBEaXNhYmxlZFNjcm9sbENsYXNzTmFtZSA9IG1lcmdlU3R5bGVzKHtcbiAgICBvdmVyZmxvdzogJ2hpZGRlbiAhaW1wb3J0YW50Jyxcbn0pO1xuLyoqXG4gKiBQbGFjaW5nIHRoaXMgYXR0cmlidXRlIG9uIHNjcm9sbGFibGUgZGl2cyBvcHRpbWl6ZXMgZGV0ZWN0aW9uIHRvIGtub3dcbiAqIGlmIHRoZSBkaXYgaXMgc2Nyb2xsYWJsZSBvciBub3QgKGdpdmVuIHdlIGNhbiBhdm9pZCBleHBlbnNpdmUgb3BlcmF0aW9uc1xuICogbGlrZSBnZXRDb21wdXRlZFN0eWxlLilcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgREFUQV9JU19TQ1JPTExBQkxFX0FUVFJJQlVURSA9ICdkYXRhLWlzLXNjcm9sbGFibGUnO1xuLyoqXG4gKiBBbGxvd3MgdGhlIHVzZXIgdG8gc2Nyb2xsIHdpdGhpbiBhIGVsZW1lbnQsXG4gKiB3aGlsZSBwcmV2ZW50aW5nIHRoZSB1c2VyIGZyb20gc2Nyb2xsaW5nIHRoZSBib2R5XG4gKi9cbmV4cG9ydCB2YXIgYWxsb3dTY3JvbGxPbkVsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbWVudCwgZXZlbnRzKSB7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIF9wcmV2aW91c0NsaWVudFkgPSAwO1xuICAgIHZhciBfZWxlbWVudCA9IG51bGw7XG4gICAgLy8gcmVtZW1iZXIgdGhlIGNsaWVudFkgZm9yIGZ1dHVyZSBjYWxscyBvZiBfcHJldmVudE92ZXJzY3JvbGxpbmdcbiAgICB2YXIgX3NhdmVDbGllbnRZID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC50YXJnZXRUb3VjaGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgX3ByZXZpb3VzQ2xpZW50WSA9IGV2ZW50LnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gcHJldmVudCB0aGUgYm9keSBmcm9tIHNjcm9sbGluZyB3aGVuIHRoZSB1c2VyIGF0dGVtcHRzXG4gICAgLy8gdG8gc2Nyb2xsIHBhc3QgdGhlIHRvcCBvciBib3R0b20gb2YgdGhlIGVsZW1lbnRcbiAgICB2YXIgX3ByZXZlbnRPdmVyc2Nyb2xsaW5nID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIG9ubHkgcmVzcG9uZCB0byBhIHNpbmdsZS1maW5nZXIgdG91Y2hcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldFRvdWNoZXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gcHJldmVudCB0aGUgYm9keSB0b3VjaG1vdmUgaGFuZGxlciBmcm9tIGZpcmluZ1xuICAgICAgICAvLyBzbyB0aGF0IHNjcm9sbGluZyBpcyBhbGxvd2VkIHdpdGhpbiB0aGUgZWxlbWVudFxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgaWYgKCFfZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjbGllbnRZID0gZXZlbnQudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRZIC0gX3ByZXZpb3VzQ2xpZW50WTtcbiAgICAgICAgdmFyIHNjcm9sbGFibGVQYXJlbnQgPSBmaW5kU2Nyb2xsYWJsZVBhcmVudChldmVudC50YXJnZXQpO1xuICAgICAgICBpZiAoc2Nyb2xsYWJsZVBhcmVudCkge1xuICAgICAgICAgICAgX2VsZW1lbnQgPSBzY3JvbGxhYmxlUGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIHRoZSBlbGVtZW50IGlzIHNjcm9sbGVkIHRvIHRoZSB0b3AsXG4gICAgICAgIC8vIHByZXZlbnQgdGhlIHVzZXIgZnJvbSBzY3JvbGxpbmcgdXBcbiAgICAgICAgaWYgKF9lbGVtZW50LnNjcm9sbFRvcCA9PT0gMCAmJiBjbGllbnRZID4gMCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiB0aGUgZWxlbWVudCBpcyBzY3JvbGxlZCB0byB0aGUgYm90dG9tLFxuICAgICAgICAvLyBwcmV2ZW50IHRoZSB1c2VyIGZyb20gc2Nyb2xsaW5nIGRvd25cbiAgICAgICAgaWYgKF9lbGVtZW50LnNjcm9sbEhlaWdodCAtIE1hdGguY2VpbChfZWxlbWVudC5zY3JvbGxUb3ApIDw9IF9lbGVtZW50LmNsaWVudEhlaWdodCAmJiBjbGllbnRZIDwgMCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgZXZlbnRzLm9uKGVsZW1lbnQsICd0b3VjaHN0YXJ0JywgX3NhdmVDbGllbnRZLCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xuICAgIGV2ZW50cy5vbihlbGVtZW50LCAndG91Y2htb3ZlJywgX3ByZXZlbnRPdmVyc2Nyb2xsaW5nLCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xuICAgIF9lbGVtZW50ID0gZWxlbWVudDtcbn07XG4vKipcbiAqIFNhbWUgYXMgYWxsb3dTY3JvbGxPbkVsZW1lbnQgYnV0IGRvZXMgbm90IHByZXZlbnQgb3ZlcnNjcm9sbGluZy5cbiAqL1xuZXhwb3J0IHZhciBhbGxvd092ZXJzY3JvbGxPbkVsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbWVudCwgZXZlbnRzKSB7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIF9hbGxvd0VsZW1lbnRTY3JvbGwgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfTtcbiAgICBldmVudHMub24oZWxlbWVudCwgJ3RvdWNobW92ZScsIF9hbGxvd0VsZW1lbnRTY3JvbGwsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XG59O1xudmFyIF9kaXNhYmxlSW9zQm9keVNjcm9sbCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG59O1xuLyoqXG4gKiBEaXNhYmxlcyB0aGUgYm9keSBzY3JvbGxpbmcuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGlzYWJsZUJvZHlTY3JvbGwoKSB7XG4gICAgdmFyIGRvYyA9IGdldERvY3VtZW50KCk7XG4gICAgaWYgKGRvYyAmJiBkb2MuYm9keSAmJiAhX2JvZHlTY3JvbGxEaXNhYmxlZENvdW50KSB7XG4gICAgICAgIGRvYy5ib2R5LmNsYXNzTGlzdC5hZGQoRGlzYWJsZWRTY3JvbGxDbGFzc05hbWUpO1xuICAgICAgICBkb2MuYm9keS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBfZGlzYWJsZUlvc0JvZHlTY3JvbGwsIHsgcGFzc2l2ZTogZmFsc2UsIGNhcHR1cmU6IGZhbHNlIH0pO1xuICAgIH1cbiAgICBfYm9keVNjcm9sbERpc2FibGVkQ291bnQrKztcbn1cbi8qKlxuICogRW5hYmxlcyB0aGUgYm9keSBzY3JvbGxpbmcuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlQm9keVNjcm9sbCgpIHtcbiAgICBpZiAoX2JvZHlTY3JvbGxEaXNhYmxlZENvdW50ID4gMCkge1xuICAgICAgICB2YXIgZG9jID0gZ2V0RG9jdW1lbnQoKTtcbiAgICAgICAgaWYgKGRvYyAmJiBkb2MuYm9keSAmJiBfYm9keVNjcm9sbERpc2FibGVkQ291bnQgPT09IDEpIHtcbiAgICAgICAgICAgIGRvYy5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoRGlzYWJsZWRTY3JvbGxDbGFzc05hbWUpO1xuICAgICAgICAgICAgZG9jLmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgX2Rpc2FibGVJb3NCb2R5U2Nyb2xsKTtcbiAgICAgICAgfVxuICAgICAgICBfYm9keVNjcm9sbERpc2FibGVkQ291bnQtLTtcbiAgICB9XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHdpZHRoIG9mIGEgc2Nyb2xsYmFyIGZvciB0aGUgYnJvd3Nlci9vcy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY3JvbGxiYXJXaWR0aCgpIHtcbiAgICBpZiAoX3Njcm9sbGJhcldpZHRoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBzY3JvbGxEaXYuc3R5bGUuc2V0UHJvcGVydHkoJ3dpZHRoJywgJzEwMHB4Jyk7XG4gICAgICAgIHNjcm9sbERpdi5zdHlsZS5zZXRQcm9wZXJ0eSgnaGVpZ2h0JywgJzEwMHB4Jyk7XG4gICAgICAgIHNjcm9sbERpdi5zdHlsZS5zZXRQcm9wZXJ0eSgnb3ZlcmZsb3cnLCAnc2Nyb2xsJyk7XG4gICAgICAgIHNjcm9sbERpdi5zdHlsZS5zZXRQcm9wZXJ0eSgncG9zaXRpb24nLCAnYWJzb2x1dGUnKTtcbiAgICAgICAgc2Nyb2xsRGl2LnN0eWxlLnNldFByb3BlcnR5KCd0b3AnLCAnLTk5OTlweCcpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdik7XG4gICAgICAgIC8vIEdldCB0aGUgc2Nyb2xsYmFyIHdpZHRoXG4gICAgICAgIF9zY3JvbGxiYXJXaWR0aCA9IHNjcm9sbERpdi5vZmZzZXRXaWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aDtcbiAgICAgICAgLy8gRGVsZXRlIHRoZSBESVZcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xuICAgIH1cbiAgICByZXR1cm4gX3Njcm9sbGJhcldpZHRoO1xufVxuLyoqXG4gKiBUcmF2ZXJzZXMgdXAgdGhlIERPTSBmb3IgdGhlIGVsZW1lbnQgd2l0aCB0aGUgZGF0YS1pcy1zY3JvbGxhYmxlPXRydWUgYXR0cmlidXRlLCBvciByZXR1cm5zXG4gKiBkb2N1bWVudC5ib2R5LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRTY3JvbGxhYmxlUGFyZW50KHN0YXJ0aW5nRWxlbWVudCkge1xuICAgIHZhciBlbCA9IHN0YXJ0aW5nRWxlbWVudDtcbiAgICB2YXIgZG9jID0gZ2V0RG9jdW1lbnQoc3RhcnRpbmdFbGVtZW50KTtcbiAgICAvLyBGaXJzdCBkbyBhIHF1aWNrIHNjYW4gZm9yIHRoZSBzY3JvbGxhYmxlIGF0dHJpYnV0ZS5cbiAgICB3aGlsZSAoZWwgJiYgZWwgIT09IGRvYy5ib2R5KSB7XG4gICAgICAgIGlmIChlbC5nZXRBdHRyaWJ1dGUoREFUQV9JU19TQ1JPTExBQkxFX0FUVFJJQlVURSkgPT09ICd0cnVlJykge1xuICAgICAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgICB9XG4gICAgICAgIGVsID0gZWwucGFyZW50RWxlbWVudDtcbiAgICB9XG4gICAgLy8gSWYgd2UgaGF2ZW4ndCBmb3VuZCBpdCwgdGhlIHVzZSB0aGUgc2xvd2VyIG1ldGhvZDogY29tcHV0ZSBzdHlsZXMgdG8gZXZhbHVhdGUgaWYgb3ZlcmZsb3cgaXMgc2V0LlxuICAgIGVsID0gc3RhcnRpbmdFbGVtZW50O1xuICAgIHdoaWxlIChlbCAmJiBlbCAhPT0gZG9jLmJvZHkpIHtcbiAgICAgICAgaWYgKGVsLmdldEF0dHJpYnV0ZShEQVRBX0lTX1NDUk9MTEFCTEVfQVRUUklCVVRFKSAhPT0gJ2ZhbHNlJykge1xuICAgICAgICAgICAgdmFyIGNvbXB1dGVkU3R5bGVzID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gICAgICAgICAgICB2YXIgb3ZlcmZsb3dZID0gY29tcHV0ZWRTdHlsZXMgPyBjb21wdXRlZFN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdvdmVyZmxvdy15JykgOiAnJztcbiAgICAgICAgICAgIGlmIChvdmVyZmxvd1kgJiYgKG92ZXJmbG93WSA9PT0gJ3Njcm9sbCcgfHwgb3ZlcmZsb3dZID09PSAnYXV0bycpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsID0gZWwucGFyZW50RWxlbWVudDtcbiAgICB9XG4gICAgLy8gRmFsbCBiYWNrIHRvIHdpbmRvdyBzY3JvbGwuXG4gICAgaWYgKCFlbCB8fCBlbCA9PT0gZG9jLmJvZHkpIHtcbiAgICAgICAgZWwgPSBnZXRXaW5kb3coc3RhcnRpbmdFbGVtZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIGVsO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2Nyb2xsLmpzLm1hcCIsIi8qKiBSYWlzZXMgYSBjbGljayBldmVudC4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYWlzZUNsaWNrKHRhcmdldCkge1xuICAgIHZhciBldmVudCA9IGNyZWF0ZU5ld0V2ZW50KCdNb3VzZUV2ZW50cycpO1xuICAgIGV2ZW50LmluaXRFdmVudCgnY2xpY2snLCB0cnVlLCB0cnVlKTtcbiAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudChldmVudCk7XG59XG5mdW5jdGlvbiBjcmVhdGVOZXdFdmVudChldmVudE5hbWUpIHtcbiAgICB2YXIgZXZlbnQ7XG4gICAgaWYgKHR5cGVvZiBFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBDaHJvbWUsIE9wZXJhLCBGaXJlZm94XG4gICAgICAgIGV2ZW50ID0gbmV3IEV2ZW50KGV2ZW50TmFtZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBJRVxuICAgICAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgICAgICBldmVudC5pbml0RXZlbnQoZXZlbnROYW1lLCB0cnVlLCB0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmFpc2VDbGljay5qcy5tYXAiLCJleHBvcnQgdmFyIERBVEFfUE9SVEFMX0FUVFJJQlVURSA9ICdkYXRhLXBvcnRhbC1lbGVtZW50Jztcbi8qKlxuICogSWRlbnRpZnkgZWxlbWVudCBhcyBhIHBvcnRhbCBieSBzZXR0aW5nIGFuIGF0dHJpYnV0ZS5cbiAqIEBwYXJhbSBlbGVtZW50IC0gRWxlbWVudCB0byBtYXJrIGFzIGEgcG9ydGFsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0UG9ydGFsQXR0cmlidXRlKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShEQVRBX1BPUlRBTF9BVFRSSUJVVEUsICd0cnVlJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXRQb3J0YWxBdHRyaWJ1dGUuanMubWFwIiwiaW1wb3J0IHsgZmluZEVsZW1lbnRSZWN1cnNpdmUgfSBmcm9tICcuL2ZpbmRFbGVtZW50UmVjdXJzaXZlJztcbmltcG9ydCB7IERBVEFfUE9SVEFMX0FUVFJJQlVURSB9IGZyb20gJy4vc2V0UG9ydGFsQXR0cmlidXRlJztcbi8qKlxuICogRGV0ZXJtaW5lIHdoZXRoZXIgYSB0YXJnZXQgaXMgd2l0aGluIGEgcG9ydGFsIGZyb20gcGVyc3BlY3RpdmUgb2Ygcm9vdCBvciBvcHRpb25hbCBwYXJlbnQuXG4gKiBUaGlzIGZ1bmN0aW9uIG9ubHkgd29ya3MgYWdhaW5zdCBwb3J0YWwgY29tcG9uZW50cyB0aGF0IHVzZSB0aGUgc2V0UG9ydGFsQXR0cmlidXRlIGZ1bmN0aW9uLlxuICogSWYgYm90aCBwYXJlbnQgYW5kIGNoaWxkIGFyZSB3aXRoaW4gdGhlIHNhbWUgcG9ydGFsIHRoaXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gZmFsc2UuXG4gKiBAcGFyYW0gdGFyZ2V0IC0gRWxlbWVudCB0byBxdWVyeSBwb3J0YWwgY29udGFpbm1lbnQgc3RhdHVzIG9mLlxuICogQHBhcmFtIHBhcmVudCAtIE9wdGlvbmFsIHBhcmVudCBwZXJzcGVjdGl2ZS4gU2VhcmNoIGZvciBjb250YWluaW5nIHBvcnRhbCBzdG9wcyBhdCBwYXJlbnRcbiAqIChvciByb290IGlmIHBhcmVudCBpcyB1bmRlZmluZWQgb3IgaW52YWxpZC4pXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwb3J0YWxDb250YWluc0VsZW1lbnQodGFyZ2V0LCBwYXJlbnQpIHtcbiAgICB2YXIgZWxlbWVudE1hdGNoID0gZmluZEVsZW1lbnRSZWN1cnNpdmUodGFyZ2V0LCBmdW5jdGlvbiAodGVzdEVsZW1lbnQpIHsgcmV0dXJuIHBhcmVudCA9PT0gdGVzdEVsZW1lbnQgfHwgdGVzdEVsZW1lbnQuaGFzQXR0cmlidXRlKERBVEFfUE9SVEFMX0FUVFJJQlVURSk7IH0pO1xuICAgIHJldHVybiBlbGVtZW50TWF0Y2ggIT09IG51bGwgJiYgZWxlbWVudE1hdGNoLmhhc0F0dHJpYnV0ZShEQVRBX1BPUlRBTF9BVFRSSUJVVEUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9ydGFsQ29udGFpbnNFbGVtZW50LmpzLm1hcCIsIi8qKlxuICoge0Bkb2NDYXRlZ29yeSBGb2N1c1pvbmV9XG4gKi9cbmV4cG9ydCB2YXIgRm9jdXNab25lVGFiYmFibGVFbGVtZW50cyA9IHtcbiAgICAvKiogVGFiYmluZyBpcyBub3QgYWxsb3dlZCAqL1xuICAgIG5vbmU6IDAsXG4gICAgLyoqIEFsbCB0YWJiaW5nIGFjdGlvbiBpcyBhbGxvd2VkICovXG4gICAgYWxsOiAxLFxuICAgIC8qKiBUYWJiaW5nIGlzIGFsbG93ZWQgb25seSBvbiBpbnB1dCBlbGVtZW50cyAqL1xuICAgIGlucHV0T25seTogMixcbn07XG4vKipcbiAqIHtAZG9jQ2F0ZWdvcnkgRm9jdXNab25lfVxuICovXG5leHBvcnQgdmFyIEZvY3VzWm9uZURpcmVjdGlvbjtcbihmdW5jdGlvbiAoRm9jdXNab25lRGlyZWN0aW9uKSB7XG4gICAgLyoqIE9ubHkgcmVhY3QgdG8gdXAvZG93biBhcnJvd3MuICovXG4gICAgRm9jdXNab25lRGlyZWN0aW9uW0ZvY3VzWm9uZURpcmVjdGlvbltcInZlcnRpY2FsXCJdID0gMF0gPSBcInZlcnRpY2FsXCI7XG4gICAgLyoqIE9ubHkgcmVhY3QgdG8gbGVmdC9yaWdodCBhcnJvd3MuICovXG4gICAgRm9jdXNab25lRGlyZWN0aW9uW0ZvY3VzWm9uZURpcmVjdGlvbltcImhvcml6b250YWxcIl0gPSAxXSA9IFwiaG9yaXpvbnRhbFwiO1xuICAgIC8qKiBSZWFjdCB0byBhbGwgYXJyb3dzLiAqL1xuICAgIEZvY3VzWm9uZURpcmVjdGlvbltGb2N1c1pvbmVEaXJlY3Rpb25bXCJiaWRpcmVjdGlvbmFsXCJdID0gMl0gPSBcImJpZGlyZWN0aW9uYWxcIjtcbiAgICAvKipcbiAgICAgKiBSZWFjdCB0byBhbGwgYXJyb3dzLiBOYXZpZ2F0ZSBuZXh0IGl0ZW0gaW4gRE9NIG9uIHJpZ2h0L2Rvd24gYXJyb3cga2V5cyBhbmQgcHJldmlvdXMgLSBsZWZ0L3VwIGFycm93IGtleXMuXG4gICAgICogUmlnaHQgYW5kIExlZnQgYXJyb3cga2V5cyBhcmUgc3dhcHBlZCBpbiBSVEwgbW9kZS5cbiAgICAgKi9cbiAgICBGb2N1c1pvbmVEaXJlY3Rpb25bRm9jdXNab25lRGlyZWN0aW9uW1wiZG9tT3JkZXJcIl0gPSAzXSA9IFwiZG9tT3JkZXJcIjtcbn0pKEZvY3VzWm9uZURpcmVjdGlvbiB8fCAoRm9jdXNab25lRGlyZWN0aW9uID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZvY3VzWm9uZS50eXBlcy5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBtZXJnZVN0eWxlcyB9IGZyb20gJ0B1aWZhYnJpYy9tZXJnZS1zdHlsZXMnO1xuaW1wb3J0IHsgZ2V0VGhlbWUgfSBmcm9tICdAdWlmYWJyaWMvc3R5bGluZyc7XG5pbXBvcnQgeyBLZXlDb2RlcywgY3NzLCBlbGVtZW50Q29udGFpbnMsIGdldERvY3VtZW50LCBnZXRFbGVtZW50SW5kZXhQYXRoLCBnZXRGb2N1c2FibGVCeUluZGV4UGF0aCwgZ2V0SWQsIGdldE5hdGl2ZVByb3BzLCBnZXROZXh0RWxlbWVudCwgZ2V0UGFyZW50LCBnZXRQcmV2aW91c0VsZW1lbnQsIGdldFJUTCwgaHRtbEVsZW1lbnRQcm9wZXJ0aWVzLCBpbml0aWFsaXplQ29tcG9uZW50UmVmLCBpc0VsZW1lbnRGb2N1c1N1YlpvbmUsIGlzRWxlbWVudEZvY3VzWm9uZSwgaXNFbGVtZW50VGFiYmFibGUsIHJhaXNlQ2xpY2ssIHNob3VsZFdyYXBGb2N1cywgd2FybkRlcHJlY2F0aW9ucywgcG9ydGFsQ29udGFpbnNFbGVtZW50LCBnZXRXaW5kb3csIGZpbmRTY3JvbGxhYmxlUGFyZW50LCBjcmVhdGVNZXJnZWRSZWYsIH0gZnJvbSAnQHVpZmFicmljL3V0aWxpdGllcyc7XG5pbXBvcnQgeyBGb2N1c1pvbmVEaXJlY3Rpb24sIEZvY3VzWm9uZVRhYmJhYmxlRWxlbWVudHMgfSBmcm9tICcuL0ZvY3VzWm9uZS50eXBlcyc7XG52YXIgSVNfRk9DVVNBQkxFX0FUVFJJQlVURSA9ICdkYXRhLWlzLWZvY3VzYWJsZSc7XG52YXIgSVNfRU5URVJfRElTQUJMRURfQVRUUklCVVRFID0gJ2RhdGEtZGlzYWJsZS1jbGljay1vbi1lbnRlcic7XG52YXIgRk9DVVNaT05FX0lEX0FUVFJJQlVURSA9ICdkYXRhLWZvY3Vzem9uZS1pZCc7XG52YXIgVEFCSU5ERVggPSAndGFiaW5kZXgnO1xudmFyIE5PX1ZFUlRJQ0FMX1dSQVAgPSAnZGF0YS1uby12ZXJ0aWNhbC13cmFwJztcbnZhciBOT19IT1JJWk9OVEFMX1dSQVAgPSAnZGF0YS1uby1ob3Jpem9udGFsLXdyYXAnO1xudmFyIExBUkdFX0RJU1RBTkNFX0ZST01fQ0VOVEVSID0gOTk5OTk5OTk5O1xudmFyIExBUkdFX05FR0FUSVZFX0RJU1RBTkNFX0ZST01fQ0VOVEVSID0gLTk5OTk5OTk5OTtcbnZhciBmb2N1c1pvbmVTdHlsZXM7XG52YXIgZm9jdXNab25lQ2xhc3MgPSAnbXMtRm9jdXNab25lJztcbi8vIEhlbHBlciBmdW5jdGlvbiB0aGF0IHdpbGwgcmV0dXJuIGEgY2xhc3MgZm9yIHdoZW4gdGhlIHJvb3QgaXMgZm9jdXNlZFxuZnVuY3Rpb24gZ2V0Um9vdENsYXNzKCkge1xuICAgIGlmICghZm9jdXNab25lU3R5bGVzKSB7XG4gICAgICAgIGZvY3VzWm9uZVN0eWxlcyA9IG1lcmdlU3R5bGVzKHtcbiAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICc6Zm9jdXMnOiB7XG4gICAgICAgICAgICAgICAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSwgZm9jdXNab25lQ2xhc3MpO1xuICAgIH1cbiAgICByZXR1cm4gZm9jdXNab25lU3R5bGVzO1xufVxudmFyIF9hbGxJbnN0YW5jZXMgPSB7fTtcbnZhciBfb3V0ZXJab25lcyA9IG5ldyBTZXQoKTtcbnZhciBBTExPV0VEX0lOUFVUX1RZUEVTID0gWyd0ZXh0JywgJ251bWJlcicsICdwYXNzd29yZCcsICdlbWFpbCcsICd0ZWwnLCAndXJsJywgJ3NlYXJjaCddO1xudmFyIEFMTE9XX1ZJUlRVQUxfRUxFTUVOVFMgPSBmYWxzZTtcbnZhciBGb2N1c1pvbmUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZvY3VzWm9uZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGb2N1c1pvbmUocHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9yb290ID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgICAgIF90aGlzLl9tZXJnZWRSZWYgPSBjcmVhdGVNZXJnZWRSZWYoKTtcbiAgICAgICAgX3RoaXMuX29uRm9jdXMgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5fcG9ydGFsQ29udGFpbnNFbGVtZW50KGV2LnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgZXZlbnQgdGFyZ2V0IGlzIGluc2lkZSBhIHBvcnRhbCBkbyBub3QgcHJvY2VzcyB0aGUgZXZlbnQuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIG9uQWN0aXZlRWxlbWVudENoYW5nZWQgPSBfYS5vbkFjdGl2ZUVsZW1lbnRDaGFuZ2VkLCBcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgZG9Ob3RBbGxvd0ZvY3VzRXZlbnRUb1Byb3BhZ2F0ZSA9IF9hLmRvTm90QWxsb3dGb2N1c0V2ZW50VG9Qcm9wYWdhdGUsIHN0b3BGb2N1c1Byb3BhZ2F0aW9uID0gX2Euc3RvcEZvY3VzUHJvcGFnYXRpb24sIFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICBvbkZvY3VzTm90aWZpY2F0aW9uID0gX2Eub25Gb2N1c05vdGlmaWNhdGlvbiwgb25Gb2N1cyA9IF9hLm9uRm9jdXMsIHNob3VsZEZvY3VzSW5uZXJFbGVtZW50V2hlblJlY2VpdmVkRm9jdXMgPSBfYS5zaG91bGRGb2N1c0lubmVyRWxlbWVudFdoZW5SZWNlaXZlZEZvY3VzLCBkZWZhdWx0VGFiYmFibGVFbGVtZW50ID0gX2EuZGVmYXVsdFRhYmJhYmxlRWxlbWVudDtcbiAgICAgICAgICAgIHZhciBpc0ltbWVkaWF0ZURlc2NlbmRhbnQgPSBfdGhpcy5faXNJbW1lZGlhdGVEZXNjZW5kYW50T2Zab25lKGV2LnRhcmdldCk7XG4gICAgICAgICAgICB2YXIgbmV3QWN0aXZlRWxlbWVudDtcbiAgICAgICAgICAgIGlmIChpc0ltbWVkaWF0ZURlc2NlbmRhbnQpIHtcbiAgICAgICAgICAgICAgICBuZXdBY3RpdmVFbGVtZW50ID0gZXYudGFyZ2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudEVsZW1lbnQgPSBldi50YXJnZXQ7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHBhcmVudEVsZW1lbnQgJiYgcGFyZW50RWxlbWVudCAhPT0gX3RoaXMuX3Jvb3QuY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNFbGVtZW50VGFiYmFibGUocGFyZW50RWxlbWVudCkgJiYgX3RoaXMuX2lzSW1tZWRpYXRlRGVzY2VuZGFudE9mWm9uZShwYXJlbnRFbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3QWN0aXZlRWxlbWVudCA9IHBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwYXJlbnRFbGVtZW50ID0gZ2V0UGFyZW50KHBhcmVudEVsZW1lbnQsIEFMTE9XX1ZJUlRVQUxfRUxFTUVOVFMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIGFuIGlubmVyIGZvY3VzYWJsZSBlbGVtZW50IHNob3VsZCBiZSBmb2N1c2VkIHdoZW4gRm9jdXNab25lIGNvbnRhaW5lciByZWNlaXZlcyBmb2N1c1xuICAgICAgICAgICAgaWYgKHNob3VsZEZvY3VzSW5uZXJFbGVtZW50V2hlblJlY2VpdmVkRm9jdXMgJiYgZXYudGFyZ2V0ID09PSBfdGhpcy5fcm9vdC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIG1heWJlRWxlbWVudFRvRm9jdXMgPSBkZWZhdWx0VGFiYmFibGVFbGVtZW50ICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBkZWZhdWx0VGFiYmFibGVFbGVtZW50ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRUYWJiYWJsZUVsZW1lbnQoX3RoaXMuX3Jvb3QuY3VycmVudCk7XG4gICAgICAgICAgICAgICAgLy8gdHJ5IHRvIGZvY3VzIGRlZmF1bHRUYWJiYWJsZSBlbGVtZW50XG4gICAgICAgICAgICAgICAgaWYgKG1heWJlRWxlbWVudFRvRm9jdXMgJiYgaXNFbGVtZW50VGFiYmFibGUobWF5YmVFbGVtZW50VG9Gb2N1cykpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3QWN0aXZlRWxlbWVudCA9IG1heWJlRWxlbWVudFRvRm9jdXM7XG4gICAgICAgICAgICAgICAgICAgIG1heWJlRWxlbWVudFRvRm9jdXMuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGZvcmNlIGZvY3VzIG9uIGZpcnN0IGZvY3VzYWJsZSBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmZvY3VzKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2FjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCB0byBudWxsIGFzIG5ldyBhY3RpdmUgZWxlbWVudCB3YXMgaGFuZGxlZCBpbiBtZXRob2QgYWJvdmVcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0FjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGluaXRpYWxFbGVtZW50Rm9jdXNlZCA9ICFfdGhpcy5fYWN0aXZlRWxlbWVudDtcbiAgICAgICAgICAgIC8vIElmIHRoZSBuZXcgYWN0aXZlIGVsZW1lbnQgaXMgYSBjaGlsZCBvZiB0aGlzIHpvbmUgYW5kIHJlY2VpdmVkIGZvY3VzLFxuICAgICAgICAgICAgLy8gdXBkYXRlIGFsaWdubWVudCBhbiBpbW1lZGlhdGUgZGVzY2VuZGFudFxuICAgICAgICAgICAgaWYgKG5ld0FjdGl2ZUVsZW1lbnQgJiYgbmV3QWN0aXZlRWxlbWVudCAhPT0gX3RoaXMuX2FjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNJbW1lZGlhdGVEZXNjZW5kYW50IHx8IGluaXRpYWxFbGVtZW50Rm9jdXNlZCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc2V0Rm9jdXNBbGlnbm1lbnQobmV3QWN0aXZlRWxlbWVudCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLl9hY3RpdmVFbGVtZW50ID0gbmV3QWN0aXZlRWxlbWVudDtcbiAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbEVsZW1lbnRGb2N1c2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl91cGRhdGVUYWJJbmRleGVzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9uQWN0aXZlRWxlbWVudENoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICBvbkFjdGl2ZUVsZW1lbnRDaGFuZ2VkKF90aGlzLl9hY3RpdmVFbGVtZW50LCBldik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RvcEZvY3VzUHJvcGFnYXRpb24gfHwgZG9Ob3RBbGxvd0ZvY3VzRXZlbnRUb1Byb3BhZ2F0ZSkge1xuICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9uRm9jdXMpIHtcbiAgICAgICAgICAgICAgICBvbkZvY3VzKGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG9uRm9jdXNOb3RpZmljYXRpb24pIHtcbiAgICAgICAgICAgICAgICBvbkZvY3VzTm90aWZpY2F0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbkJsdXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5fc2V0UGFya2VkRm9jdXMoZmFsc2UpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25Nb3VzZURvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5fcG9ydGFsQ29udGFpbnNFbGVtZW50KGV2LnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgZXZlbnQgdGFyZ2V0IGlzIGluc2lkZSBhIHBvcnRhbCBkbyBub3QgcHJvY2VzcyB0aGUgZXZlbnQuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRpc2FibGVkID0gX3RoaXMucHJvcHMuZGlzYWJsZWQ7XG4gICAgICAgICAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZXYudGFyZ2V0O1xuICAgICAgICAgICAgdmFyIHBhdGggPSBbXTtcbiAgICAgICAgICAgIHdoaWxlICh0YXJnZXQgJiYgdGFyZ2V0ICE9PSBfdGhpcy5fcm9vdC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgcGF0aC5wdXNoKHRhcmdldCk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gZ2V0UGFyZW50KHRhcmdldCwgQUxMT1dfVklSVFVBTF9FTEVNRU5UUyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAocGF0aC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSBwYXRoLnBvcCgpO1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgJiYgaXNFbGVtZW50VGFiYmFibGUodGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc2V0QWN0aXZlRWxlbWVudCh0YXJnZXQsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNFbGVtZW50Rm9jdXNab25lKHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3RvcCBoZXJlIHNpbmNlIHRoZSBmb2N1cyB6b25lIHdpbGwgdGFrZSBjYXJlIG9mIGl0cyBvd24gY2hpbGRyZW4uXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhhbmRsZSB0aGUga2V5c3Ryb2tlcy5cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLl9vbktleURvd24gPSBmdW5jdGlvbiAoZXYsIHRoZW1lKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuX3BvcnRhbENvbnRhaW5zRWxlbWVudChldi50YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGV2ZW50IHRhcmdldCBpcyBpbnNpZGUgYSBwb3J0YWwgZG8gbm90IHByb2Nlc3MgdGhlIGV2ZW50LlxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIGRpcmVjdGlvbiA9IF9hLmRpcmVjdGlvbiwgZGlzYWJsZWQgPSBfYS5kaXNhYmxlZCwgaXNJbm5lclpvbmVLZXlzdHJva2UgPSBfYS5pc0lubmVyWm9uZUtleXN0cm9rZSwgcGFnaW5nU3VwcG9ydERpc2FibGVkID0gX2EucGFnaW5nU3VwcG9ydERpc2FibGVkLCBzaG91bGRFbnRlcklubmVyWm9uZSA9IF9hLnNob3VsZEVudGVySW5uZXJab25lO1xuICAgICAgICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF90aGlzLnByb3BzLm9uS2V5RG93bikge1xuICAgICAgICAgICAgICAgIF90aGlzLnByb3BzLm9uS2V5RG93bihldik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiB0aGUgZGVmYXVsdCBoYXMgYmVlbiBwcmV2ZW50ZWQsIGRvIG5vdCBwcm9jZXNzIGtleWJvYXJkIGV2ZW50cy5cbiAgICAgICAgICAgIGlmIChldi5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfdGhpcy5fZ2V0RG9jdW1lbnQoKS5hY3RpdmVFbGVtZW50ID09PSBfdGhpcy5fcm9vdC5jdXJyZW50ICYmIF90aGlzLl9pc0lubmVyWm9uZSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgZWxlbWVudCBoYXMgZm9jdXMsIGl0IGlzIGJlaW5nIGNvbnRyb2xsZWQgYnkgYSBwYXJlbnQuXG4gICAgICAgICAgICAgICAgLy8gSWdub3JlIHRoZSBrZXlzdHJva2UuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCgoc2hvdWxkRW50ZXJJbm5lclpvbmUgJiYgc2hvdWxkRW50ZXJJbm5lclpvbmUoZXYpKSB8fCAoaXNJbm5lclpvbmVLZXlzdHJva2UgJiYgaXNJbm5lclpvbmVLZXlzdHJva2UoZXYpKSkgJiZcbiAgICAgICAgICAgICAgICBfdGhpcy5faXNJbW1lZGlhdGVEZXNjZW5kYW50T2Zab25lKGV2LnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAvLyBUcnkgdG8gZm9jdXNcbiAgICAgICAgICAgICAgICB2YXIgaW5uZXJab25lID0gX3RoaXMuX2dldEZpcnN0SW5uZXJab25lKCk7XG4gICAgICAgICAgICAgICAgaWYgKGlubmVyWm9uZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlubmVyWm9uZS5mb2N1cyh0cnVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzRWxlbWVudEZvY3VzU3ViWm9uZShldi50YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX3RoaXMuZm9jdXNFbGVtZW50KGdldE5leHRFbGVtZW50KGV2LnRhcmdldCwgZXYudGFyZ2V0LmZpcnN0Q2hpbGQsIHRydWUpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZXYuYWx0S2V5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBmbHVlbnR1aS9kZXByZWNhdGVkLWtleWJvYXJkLWV2ZW50LXByb3BzXG4gICAgICAgICAgICAgICAgc3dpdGNoIChldi53aGljaCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEtleUNvZGVzLnNwYWNlOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl90cnlJbnZva2VDbGlja0ZvckZvY3VzYWJsZShldi50YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgS2V5Q29kZXMubGVmdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gIT09IEZvY3VzWm9uZURpcmVjdGlvbi52ZXJ0aWNhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9wcmV2ZW50RGVmYXVsdFdoZW5IYW5kbGVkKGV2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX21vdmVGb2N1c0xlZnQodGhlbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBLZXlDb2Rlcy5yaWdodDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gIT09IEZvY3VzWm9uZURpcmVjdGlvbi52ZXJ0aWNhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9wcmV2ZW50RGVmYXVsdFdoZW5IYW5kbGVkKGV2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX21vdmVGb2N1c1JpZ2h0KHRoZW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgS2V5Q29kZXMudXA6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uICE9PSBGb2N1c1pvbmVEaXJlY3Rpb24uaG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9wcmV2ZW50RGVmYXVsdFdoZW5IYW5kbGVkKGV2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX21vdmVGb2N1c1VwKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEtleUNvZGVzLmRvd246XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uICE9PSBGb2N1c1pvbmVEaXJlY3Rpb24uaG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9wcmV2ZW50RGVmYXVsdFdoZW5IYW5kbGVkKGV2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX21vdmVGb2N1c0Rvd24oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgS2V5Q29kZXMucGFnZURvd246XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBhZ2luZ1N1cHBvcnREaXNhYmxlZCAmJiBfdGhpcy5fbW92ZUZvY3VzUGFnaW5nKHRydWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgS2V5Q29kZXMucGFnZVVwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwYWdpbmdTdXBwb3J0RGlzYWJsZWQgJiYgX3RoaXMuX21vdmVGb2N1c1BhZ2luZyhmYWxzZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBLZXlDb2Rlcy50YWI6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnByb3BzLmFsbG93VGFiS2V5IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJvcHMuaGFuZGxlVGFiS2V5ID09PSBGb2N1c1pvbmVUYWJiYWJsZUVsZW1lbnRzLmFsbCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfdGhpcy5wcm9wcy5oYW5kbGVUYWJLZXkgPT09IEZvY3VzWm9uZVRhYmJhYmxlRWxlbWVudHMuaW5wdXRPbmx5ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9pc0VsZW1lbnRJbnB1dChldi50YXJnZXQpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmb2N1c0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcHJvY2Vzc2luZ1RhYktleSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gRm9jdXNab25lRGlyZWN0aW9uLnZlcnRpY2FsIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFfdGhpcy5fc2hvdWxkV3JhcEZvY3VzKF90aGlzLl9hY3RpdmVFbGVtZW50LCBOT19IT1JJWk9OVEFMX1dSQVApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzQ2hhbmdlZCA9IGV2LnNoaWZ0S2V5ID8gX3RoaXMuX21vdmVGb2N1c1VwKCkgOiBfdGhpcy5fbW92ZUZvY3VzRG93bigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYldpdGhEaXJlY3Rpb24gPSBnZXRSVEwodGhlbWUpID8gIWV2LnNoaWZ0S2V5IDogZXYuc2hpZnRLZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzQ2hhbmdlZCA9IHRhYldpdGhEaXJlY3Rpb24gPyBfdGhpcy5fbW92ZUZvY3VzTGVmdCh0aGVtZSkgOiBfdGhpcy5fbW92ZUZvY3VzUmlnaHQodGhlbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcHJvY2Vzc2luZ1RhYktleSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb2N1c0NoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKF90aGlzLnByb3BzLnNob3VsZFJlc2V0QWN0aXZlRWxlbWVudFdoZW5UYWJGcm9tWm9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEtleUNvZGVzLmhvbWU6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2lzQ29udGVudEVkaXRhYmxlRWxlbWVudChldi50YXJnZXQpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKF90aGlzLl9pc0VsZW1lbnRJbnB1dChldi50YXJnZXQpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFfdGhpcy5fc2hvdWxkSW5wdXRMb3NlRm9jdXMoZXYudGFyZ2V0LCBmYWxzZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0Q2hpbGQgPSBfdGhpcy5fcm9vdC5jdXJyZW50ICYmIF90aGlzLl9yb290LmN1cnJlbnQuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fcm9vdC5jdXJyZW50ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RDaGlsZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmZvY3VzRWxlbWVudChnZXROZXh0RWxlbWVudChfdGhpcy5fcm9vdC5jdXJyZW50LCBmaXJzdENoaWxkLCB0cnVlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBLZXlDb2Rlcy5lbmQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2lzQ29udGVudEVkaXRhYmxlRWxlbWVudChldi50YXJnZXQpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKF90aGlzLl9pc0VsZW1lbnRJbnB1dChldi50YXJnZXQpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFfdGhpcy5fc2hvdWxkSW5wdXRMb3NlRm9jdXMoZXYudGFyZ2V0LCB0cnVlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdENoaWxkID0gX3RoaXMuX3Jvb3QuY3VycmVudCAmJiBfdGhpcy5fcm9vdC5jdXJyZW50Lmxhc3RDaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fcm9vdC5jdXJyZW50ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZm9jdXNFbGVtZW50KGdldFByZXZpb3VzRWxlbWVudChfdGhpcy5fcm9vdC5jdXJyZW50LCBsYXN0Q2hpbGQsIHRydWUsIHRydWUsIHRydWUpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEtleUNvZGVzLmVudGVyOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl90cnlJbnZva2VDbGlja0ZvckZvY3VzYWJsZShldi50YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fZ2V0SG9yaXpvbnRhbERpc3RhbmNlRnJvbUNlbnRlciA9IGZ1bmN0aW9uIChpc0ZvcndhcmQsIGFjdGl2ZVJlY3QsIHRhcmdldFJlY3QpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgdmFyIGxlZnRBbGlnbm1lbnQgPSBfdGhpcy5fZm9jdXNBbGlnbm1lbnQubGVmdCB8fCBfdGhpcy5fZm9jdXNBbGlnbm1lbnQueCB8fCAwO1xuICAgICAgICAgICAgLy8gQ2xpZW50UmVjdCB2YWx1ZXMgY2FuIGJlIGZsb2F0cyB0aGF0IGRpZmZlciBieSB2ZXJ5IHNtYWxsIGZyYWN0aW9ucyBvZiBhIGRlY2ltYWwuXG4gICAgICAgICAgICAvLyBJZiB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRvcCBhbmQgYm90dG9tIGFyZSB3aXRoaW4gYSBwaXhlbCB0aGVuIHdlIHNob3VsZCB0cmVhdFxuICAgICAgICAgICAgLy8gdGhlbSBhcyBlcXVpdmFsZW50IGJ5IHVzaW5nIE1hdGguZmxvb3IuIEZvciBpbnN0YW5jZSA1LjIyMjIgYW5kIDUuMjIyMjIxIHNob3VsZCBiZSBlcXVpdmFsZW50LFxuICAgICAgICAgICAgLy8gYnV0IHdpdGhvdXQgTWF0aC5GbG9vciB0aGV5IHdpbGwgYmUgaGFuZGxlZCBpbmNvcnJlY3RseS5cbiAgICAgICAgICAgIHZhciB0YXJnZXRSZWN0VG9wID0gTWF0aC5mbG9vcih0YXJnZXRSZWN0LnRvcCk7XG4gICAgICAgICAgICB2YXIgYWN0aXZlUmVjdEJvdHRvbSA9IE1hdGguZmxvb3IoYWN0aXZlUmVjdC5ib3R0b20pO1xuICAgICAgICAgICAgdmFyIHRhcmdldFJlY3RCb3R0b20gPSBNYXRoLmZsb29yKHRhcmdldFJlY3QuYm90dG9tKTtcbiAgICAgICAgICAgIHZhciBhY3RpdmVSZWN0VG9wID0gTWF0aC5mbG9vcihhY3RpdmVSZWN0LnRvcCk7XG4gICAgICAgICAgICB2YXIgaXNWYWxpZENhbmRpZGF0ZU9ucGFnaW5nRG93biA9IGlzRm9yd2FyZCAmJiB0YXJnZXRSZWN0VG9wID4gYWN0aXZlUmVjdEJvdHRvbTtcbiAgICAgICAgICAgIHZhciBpc1ZhbGlkQ2FuZGlkYXRlT25wYWdpbmdVcCA9ICFpc0ZvcndhcmQgJiYgdGFyZ2V0UmVjdEJvdHRvbSA8IGFjdGl2ZVJlY3RUb3A7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZENhbmRpZGF0ZU9ucGFnaW5nRG93biB8fCBpc1ZhbGlkQ2FuZGlkYXRlT25wYWdpbmdVcCkge1xuICAgICAgICAgICAgICAgIGlmIChsZWZ0QWxpZ25tZW50ID49IHRhcmdldFJlY3QubGVmdCAmJiBsZWZ0QWxpZ25tZW50IDw9IHRhcmdldFJlY3QubGVmdCArIHRhcmdldFJlY3Qud2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmFicyh0YXJnZXRSZWN0LmxlZnQgKyB0YXJnZXRSZWN0LndpZHRoIC8gMiAtIGxlZnRBbGlnbm1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFfdGhpcy5fc2hvdWxkV3JhcEZvY3VzKF90aGlzLl9hY3RpdmVFbGVtZW50LCBOT19WRVJUSUNBTF9XUkFQKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBMQVJHRV9ORUdBVElWRV9ESVNUQU5DRV9GUk9NX0NFTlRFUjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBMQVJHRV9ESVNUQU5DRV9GUk9NX0NFTlRFUjtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gTWFuYWdlIGNvbXBvbmVudFJlZiByZXNvbHV0aW9uLlxuICAgICAgICBpbml0aWFsaXplQ29tcG9uZW50UmVmKF90aGlzKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5EZXByZWNhdGlvbnMoJ0ZvY3VzWm9uZScsIHByb3BzLCB7XG4gICAgICAgICAgICAgICAgcm9vdFByb3BzOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgYWxsb3dUYWJLZXk6ICdoYW5kbGVUYWJLZXknLFxuICAgICAgICAgICAgICAgIGVsZW1lbnRUeXBlOiAnYXMnLFxuICAgICAgICAgICAgICAgIGFyaWFEZXNjcmliZWRCeTogJ2FyaWEtZGVzY3JpYmVkYnknLFxuICAgICAgICAgICAgICAgIGFyaWFMYWJlbGxlZEJ5OiAnYXJpYS1sYWJlbGxlZGJ5JyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLl9pZCA9IGdldElkKCdGb2N1c1pvbmUnKTtcbiAgICAgICAgX3RoaXMuX2ZvY3VzQWxpZ25tZW50ID0ge1xuICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX3Byb2Nlc3NpbmdUYWJLZXkgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKiogVXNlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LiAqL1xuICAgIEZvY3VzWm9uZS5nZXRPdXRlclpvbmVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX291dGVyWm9uZXMuc2l6ZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEhhbmRsZSBnbG9iYWwgdGFiIHByZXNzZXMgc28gdGhhdCB3ZSBjYW4gcGF0Y2ggdGFiaW5kZXhlcyBvbiB0aGUgZmx5LlxuICAgICAqIEhFQURTIFVQOiBUaGlzIG11c3Qgbm90IGJlIGFuIGFycm93IGZ1bmN0aW9uIGluIG9yZGVyIHRvIGJlIHJlZmVyZW50aWFsbHkgZXF1YWwgYW1vbmcgaW5zdGFuY2VzXG4gICAgICogZm9yIHJlZiBjb3VudGluZyB0byB3b3JrIGNvcnJlY3RseSFcbiAgICAgKi9cbiAgICBGb2N1c1pvbmUuX29uS2V5RG93bkNhcHR1cmUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uLCBAZmx1ZW50dWkvZGVwcmVjYXRlZC1rZXlib2FyZC1ldmVudC1wcm9wc1xuICAgICAgICBpZiAoZXYud2hpY2ggPT09IEtleUNvZGVzLnRhYikge1xuICAgICAgICAgICAgX291dGVyWm9uZXMuZm9yRWFjaChmdW5jdGlvbiAoem9uZSkgeyByZXR1cm4gem9uZS5fdXBkYXRlVGFiSW5kZXhlcygpOyB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRm9jdXNab25lLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJvb3QgPSB0aGlzLl9yb290LmN1cnJlbnQ7XG4gICAgICAgIF9hbGxJbnN0YW5jZXNbdGhpcy5faWRdID0gdGhpcztcbiAgICAgICAgaWYgKHJvb3QpIHtcbiAgICAgICAgICAgIHRoaXMuX3dpbmRvd0VsZW1lbnQgPSBnZXRXaW5kb3cocm9vdCk7XG4gICAgICAgICAgICB2YXIgcGFyZW50RWxlbWVudCA9IGdldFBhcmVudChyb290LCBBTExPV19WSVJUVUFMX0VMRU1FTlRTKTtcbiAgICAgICAgICAgIHdoaWxlIChwYXJlbnRFbGVtZW50ICYmIHBhcmVudEVsZW1lbnQgIT09IHRoaXMuX2dldERvY3VtZW50KCkuYm9keSAmJiBwYXJlbnRFbGVtZW50Lm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzRWxlbWVudEZvY3VzWm9uZShwYXJlbnRFbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc0lubmVyWm9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXJlbnRFbGVtZW50ID0gZ2V0UGFyZW50KHBhcmVudEVsZW1lbnQsIEFMTE9XX1ZJUlRVQUxfRUxFTUVOVFMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pc0lubmVyWm9uZSkge1xuICAgICAgICAgICAgICAgIF9vdXRlclpvbmVzLmFkZCh0aGlzKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fd2luZG93RWxlbWVudCAmJiBfb3V0ZXJab25lcy5zaXplID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3dpbmRvd0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIEZvY3VzWm9uZS5fb25LZXlEb3duQ2FwdHVyZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcm9vdC5jdXJyZW50ICYmIHRoaXMuX3Jvb3QuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgdGhpcy5fb25CbHVyLCB0cnVlKTtcbiAgICAgICAgICAgIC8vIEFzc2lnbiBpbml0aWFsIHRhYiBpbmRleGVzIHNvIHRoYXQgd2UgY2FuIHNldCBpbml0aWFsIGZvY3VzIGFzIGFwcHJvcHJpYXRlLlxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlVGFiSW5kZXhlcygpO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuZGVmYXVsdFRhYmJhYmxlRWxlbWVudCAmJiB0eXBlb2YgdGhpcy5wcm9wcy5kZWZhdWx0VGFiYmFibGVFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSB0aGlzLl9nZXREb2N1bWVudCgpLnF1ZXJ5U2VsZWN0b3IodGhpcy5wcm9wcy5kZWZhdWx0VGFiYmFibGVFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMucHJvcHMuZGVmYXVsdEFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gdGhpcy5fZ2V0RG9jdW1lbnQoKS5xdWVyeVNlbGVjdG9yKHRoaXMucHJvcHMuZGVmYXVsdEFjdGl2ZUVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuc2hvdWxkRm9jdXNPbk1vdW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBGb2N1c1pvbmUucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJvb3QgPSB0aGlzLl9yb290LmN1cnJlbnQ7XG4gICAgICAgIHZhciBkb2MgPSB0aGlzLl9nZXREb2N1bWVudCgpO1xuICAgICAgICBpZiAoZG9jICYmXG4gICAgICAgICAgICB0aGlzLl9sYXN0SW5kZXhQYXRoICYmXG4gICAgICAgICAgICAoZG9jLmFjdGl2ZUVsZW1lbnQgPT09IGRvYy5ib2R5IHx8XG4gICAgICAgICAgICAgICAgZG9jLmFjdGl2ZUVsZW1lbnQgPT09IG51bGwgfHxcbiAgICAgICAgICAgICAgICAoIXRoaXMucHJvcHMucHJldmVudEZvY3VzUmVzdG9yYXRpb24gJiYgZG9jLmFjdGl2ZUVsZW1lbnQgPT09IHJvb3QpKSkge1xuICAgICAgICAgICAgLy8gVGhlIGVsZW1lbnQgaGFzIGJlZW4gcmVtb3ZlZCBhZnRlciB0aGUgcmVuZGVyLCBhdHRlbXB0IHRvIHJlc3RvcmUgZm9jdXMuXG4gICAgICAgICAgICB2YXIgZWxlbWVudFRvRm9jdXMgPSBnZXRGb2N1c2FibGVCeUluZGV4UGF0aChyb290LCB0aGlzLl9sYXN0SW5kZXhQYXRoKTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50VG9Gb2N1cykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldEFjdGl2ZUVsZW1lbnQoZWxlbWVudFRvRm9jdXMsIHRydWUpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnRUb0ZvY3VzLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0UGFya2VkRm9jdXMoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgaGFkIGEgZm9jdXMgcGF0aCB0byByZXN0b3JlLCBidXQgbm93IHRoYXQgcGF0aCBpcyB1bnJlc29sdmFibGUuIFBhcmsgZm9jdXNcbiAgICAgICAgICAgICAgICAvLyBvbiB0aGUgY29udGFpbmVyIHVudGlsIHdlIGNhbiB0cnkgYWdhaW4uXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0UGFya2VkRm9jdXModHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEZvY3VzWm9uZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlbGV0ZSBfYWxsSW5zdGFuY2VzW3RoaXMuX2lkXTtcbiAgICAgICAgaWYgKCF0aGlzLl9pc0lubmVyWm9uZSkge1xuICAgICAgICAgICAgX291dGVyWm9uZXMuZGVsZXRlKHRoaXMpO1xuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgbGFzdCBvdXRlciB6b25lLCByZW1vdmUgdGhlIGtleWRvd24gbGlzdGVuZXIuXG4gICAgICAgICAgICBpZiAodGhpcy5fd2luZG93RWxlbWVudCAmJiBfb3V0ZXJab25lcy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2luZG93RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgRm9jdXNab25lLl9vbktleURvd25DYXB0dXJlLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcm9vdC5jdXJyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9yb290LmN1cnJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmx1cicsIHRoaXMuX29uQmx1ciwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2RlZmF1bHRGb2N1c0VsZW1lbnQgPSBudWxsO1xuICAgIH07XG4gICAgRm9jdXNab25lLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCB0YWcgPSBfYS5hcywgZWxlbWVudFR5cGUgPSBfYS5lbGVtZW50VHlwZSwgcm9vdFByb3BzID0gX2Eucm9vdFByb3BzLCBhcmlhRGVzY3JpYmVkQnkgPSBfYS5hcmlhRGVzY3JpYmVkQnksIGFyaWFMYWJlbGxlZEJ5ID0gX2EuYXJpYUxhYmVsbGVkQnksIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZTtcbiAgICAgICAgdmFyIGRpdlByb3BzID0gZ2V0TmF0aXZlUHJvcHModGhpcy5wcm9wcywgaHRtbEVsZW1lbnRQcm9wZXJ0aWVzKTtcbiAgICAgICAgdmFyIFRhZyA9IHRhZyB8fCBlbGVtZW50VHlwZSB8fCAnZGl2JztcbiAgICAgICAgLy8gTm90ZSwgcmlnaHQgYmVmb3JlIHJlbmRlcmluZy9yZWNvbmNpbGluZyBwcm9jZWVkcywgd2UgbmVlZCB0byByZWNvcmQgaWYgZm9jdXNcbiAgICAgICAgLy8gd2FzIGluIHRoZSB6b25lIGJlZm9yZSB0aGUgdXBkYXRlLiBUaGlzIGhlbHBlciB3aWxsIHRyYWNrIHRoaXMgYW5kLCBpZiBmb2N1c1xuICAgICAgICAvLyB3YXMgYWN0dWFsbHkgaW4gdGhlIHpvbmUsIHdoYXQgdGhlIGluZGV4IHBhdGggdG8gdGhlIGVsZW1lbnQgaXMgYXQgdGhpcyB0aW1lLlxuICAgICAgICAvLyBUaGVuLCBsYXRlciBpbiBjb21wb25lbnREaWRVcGRhdGUsIHdlIGNhbiBldmFsdWF0ZSBpZiB3ZSBuZWVkIHRvIHJlc3RvcmUgaXQgaW5cbiAgICAgICAgLy8gdGhlIGNhc2UgdGhlIGVsZW1lbnQgd2FzIHJlbW92ZWQuXG4gICAgICAgIHRoaXMuX2V2YWx1YXRlRm9jdXNCZWZvcmVSZW5kZXIoKTtcbiAgICAgICAgLy8gT25seSBzdXBwb3J0IFJUTCBkZWZpbmVkIGluIGdsb2JhbCB0aGVtZSwgbm90IGNvbnRleHR1YWwgdGhlbWUvUlRMLlxuICAgICAgICB2YXIgdGhlbWUgPSBnZXRUaGVtZSgpO1xuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFnLCBfX2Fzc2lnbih7IFwiYXJpYS1sYWJlbGxlZGJ5XCI6IGFyaWFMYWJlbGxlZEJ5LCBcImFyaWEtZGVzY3JpYmVkYnlcIjogYXJpYURlc2NyaWJlZEJ5IH0sIGRpdlByb3BzLCByb290UHJvcHMsIHsgXG4gICAgICAgICAgICAvLyBPbmNlIHRoZSBnZXRDbGFzc05hbWUgY29ycmVjdGx5IG1lbW9pemVzIGlucHV0cyB0aGlzIHNob3VsZFxuICAgICAgICAgICAgLy8gYmUgcmVwbGFjZWQgc28gdGhhdCBjbGFzc05hbWUgaXMgcGFzc2VkIHRvIGdldFJvb3RDbGFzcyBhbmQgaXMgaW5jbHVkZWQgdGhlcmUgc29cbiAgICAgICAgICAgIC8vIHRoZSBjbGFzcyBuYW1lcyB3aWxsIGFsd2F5cyBiZSBpbiB0aGUgc2FtZSBvcmRlci5cbiAgICAgICAgICAgIGNsYXNzTmFtZTogY3NzKGdldFJvb3RDbGFzcygpLCBjbGFzc05hbWUpLCBcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgcmVmOiB0aGlzLl9tZXJnZWRSZWYodGhpcy5wcm9wcy5lbGVtZW50UmVmLCB0aGlzLl9yb290KSwgXCJkYXRhLWZvY3Vzem9uZS1pZFwiOiB0aGlzLl9pZCwgXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvanN4LW5vLWJpbmRcbiAgICAgICAgICAgIG9uS2V5RG93bjogZnVuY3Rpb24gKGV2KSB7IHJldHVybiBfdGhpcy5fb25LZXlEb3duKGV2LCB0aGVtZSk7IH0sIG9uRm9jdXM6IHRoaXMuX29uRm9jdXMsIG9uTW91c2VEb3duQ2FwdHVyZTogdGhpcy5fb25Nb3VzZURvd24gfSksIHRoaXMucHJvcHMuY2hpbGRyZW4pKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgZm9jdXMgdG8gdGhlIGZpcnN0IHRhYmJhYmxlIGl0ZW0gaW4gdGhlIHpvbmUuXG4gICAgICogQHBhcmFtIGZvcmNlSW50b0ZpcnN0RWxlbWVudCAtIElmIHRydWUsIGZvY3VzIHdpbGwgYmUgZm9yY2VkIGludG8gdGhlIGZpcnN0IGVsZW1lbnQsIGV2ZW5cbiAgICAgKiBpZiBmb2N1cyBpcyBhbHJlYWR5IGluIHRoZSBmb2N1cyB6b25lLlxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgZm9jdXMgY291bGQgYmUgc2V0IHRvIGFuIGFjdGl2ZSBlbGVtZW50LCBmYWxzZSBpZiBubyBvcGVyYXRpb24gd2FzIHRha2VuLlxuICAgICAqL1xuICAgIEZvY3VzWm9uZS5wcm90b3R5cGUuZm9jdXMgPSBmdW5jdGlvbiAoZm9yY2VJbnRvRmlyc3RFbGVtZW50KSB7XG4gICAgICAgIGlmIChmb3JjZUludG9GaXJzdEVsZW1lbnQgPT09IHZvaWQgMCkgeyBmb3JjZUludG9GaXJzdEVsZW1lbnQgPSBmYWxzZTsgfVxuICAgICAgICBpZiAodGhpcy5fcm9vdC5jdXJyZW50KSB7XG4gICAgICAgICAgICBpZiAoIWZvcmNlSW50b0ZpcnN0RWxlbWVudCAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3QuY3VycmVudC5nZXRBdHRyaWJ1dGUoSVNfRk9DVVNBQkxFX0FUVFJJQlVURSkgPT09ICd0cnVlJyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX2lzSW5uZXJab25lKSB7XG4gICAgICAgICAgICAgICAgdmFyIG93bmVyWm9uZUVsZW1lbnQgPSB0aGlzLl9nZXRPd25lclpvbmUodGhpcy5fcm9vdC5jdXJyZW50KTtcbiAgICAgICAgICAgICAgICBpZiAob3duZXJab25lRWxlbWVudCAhPT0gdGhpcy5fcm9vdC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvd25lclpvbmUgPSBfYWxsSW5zdGFuY2VzW293bmVyWm9uZUVsZW1lbnQuZ2V0QXR0cmlidXRlKEZPQ1VTWk9ORV9JRF9BVFRSSUJVVEUpXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhb3duZXJab25lICYmIG93bmVyWm9uZS5mb2N1c0VsZW1lbnQodGhpcy5fcm9vdC5jdXJyZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWZvcmNlSW50b0ZpcnN0RWxlbWVudCAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgJiZcbiAgICAgICAgICAgICAgICBlbGVtZW50Q29udGFpbnModGhpcy5fcm9vdC5jdXJyZW50LCB0aGlzLl9hY3RpdmVFbGVtZW50KSAmJlxuICAgICAgICAgICAgICAgIGlzRWxlbWVudFRhYmJhYmxlKHRoaXMuX2FjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGZpcnN0Q2hpbGQgPSB0aGlzLl9yb290LmN1cnJlbnQuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mb2N1c0VsZW1lbnQoZ2V0TmV4dEVsZW1lbnQodGhpcy5fcm9vdC5jdXJyZW50LCBmaXJzdENoaWxkLCB0cnVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0cyBmb2N1cyB0byB0aGUgbGFzdCB0YWJiYWJsZSBpdGVtIGluIHRoZSB6b25lLlxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgZm9jdXMgY291bGQgYmUgc2V0IHRvIGFuIGFjdGl2ZSBlbGVtZW50LCBmYWxzZSBpZiBubyBvcGVyYXRpb24gd2FzIHRha2VuLlxuICAgICAqL1xuICAgIEZvY3VzWm9uZS5wcm90b3R5cGUuZm9jdXNMYXN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fcm9vdC5jdXJyZW50KSB7XG4gICAgICAgICAgICB2YXIgbGFzdENoaWxkID0gdGhpcy5fcm9vdC5jdXJyZW50ICYmIHRoaXMuX3Jvb3QuY3VycmVudC5sYXN0Q2hpbGQ7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb2N1c0VsZW1lbnQoZ2V0UHJldmlvdXNFbGVtZW50KHRoaXMuX3Jvb3QuY3VycmVudCwgbGFzdENoaWxkLCB0cnVlLCB0cnVlLCB0cnVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0cyBmb2N1cyB0byBhIHNwZWNpZmljIGNoaWxkIGVsZW1lbnQgd2l0aGluIHRoZSB6b25lLiBUaGlzIGNhbiBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGhcbiAgICAgKiBzaG91bGRSZWNlaXZlRm9jdXMgdG8gY3JlYXRlIGRlbGF5ZWQgZm9jdXMgc2NlbmFyaW9zIChsaWtlIGFuaW1hdGUgdGhlIHNjcm9sbCBwb3NpdGlvbiB0byB0aGUgY29ycmVjdFxuICAgICAqIGxvY2F0aW9uIGFuZCB0aGVuIGZvY3VzLilcbiAgICAgKiBAcGFyYW0gZWxlbWVudCAtIFRoZSBjaGlsZCBlbGVtZW50IHdpdGhpbiB0aGUgem9uZSB0byBmb2N1cy5cbiAgICAgKiBAcGFyYW0gZm9yY2VBbGlnbm1lbnQgLSBJZiB0cnVlLCBmb2N1cyBhbGlnbm1lbnQgd2lsbCBiZSBzZXQgYWNjb3JkaW5nIHRvIHRoZSBlbGVtZW50IHByb3ZpZGVkLlxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgZm9jdXMgY291bGQgYmUgc2V0IHRvIGFuIGFjdGl2ZSBlbGVtZW50LCBmYWxzZSBpZiBubyBvcGVyYXRpb24gd2FzIHRha2VuLlxuICAgICAqL1xuICAgIEZvY3VzWm9uZS5wcm90b3R5cGUuZm9jdXNFbGVtZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQsIGZvcmNlQWxpZ25tZW50KSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBvbkJlZm9yZUZvY3VzID0gX2Eub25CZWZvcmVGb2N1cywgc2hvdWxkUmVjZWl2ZUZvY3VzID0gX2Euc2hvdWxkUmVjZWl2ZUZvY3VzO1xuICAgICAgICBpZiAoKHNob3VsZFJlY2VpdmVGb2N1cyAmJiAhc2hvdWxkUmVjZWl2ZUZvY3VzKGVsZW1lbnQpKSB8fCAob25CZWZvcmVGb2N1cyAmJiAhb25CZWZvcmVGb2N1cyhlbGVtZW50KSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgLy8gd2hlbiB3ZSBzZXQgZm9jdXMgdG8gYSBzcGVjaWZpYyBjaGlsZCwgd2Ugc2hvdWxkIHJlY2FsY3VsYXRlIHRoZSBhbGlnbm1lbnQgZGVwZW5kaW5nIG9uIGl0cyBwb3NpdGlvbi5cbiAgICAgICAgICAgIHRoaXMuX3NldEFjdGl2ZUVsZW1lbnQoZWxlbWVudCwgZm9yY2VBbGlnbm1lbnQpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBGb3JjZXMgaG9yaXpvbnRhbCBhbGlnbm1lbnQgaW4gdGhlIGNvbnRleHQgb2YgdmVydGljYWwgYXJyb3dpbmcgdG8gdXNlIHNwZWNpZmljIHBvaW50IGFzIHRoZSByZWZlcmVuY2UsXG4gICAgICogcmF0aGVyIHRoYW4gYSBjZW50ZXIgYmFzZWQgb24gdGhlIGxhc3QgaG9yaXpvbnRhbCBtb3Rpb24uXG4gICAgICogQHBhcmFtIHBvaW50IC0gdGhlIG5ldyByZWZlcmVuY2UgcG9pbnQuXG4gICAgICovXG4gICAgRm9jdXNab25lLnByb3RvdHlwZS5zZXRGb2N1c0FsaWdubWVudCA9IGZ1bmN0aW9uIChwb2ludCkge1xuICAgICAgICB0aGlzLl9mb2N1c0FsaWdubWVudCA9IHBvaW50O1xuICAgIH07XG4gICAgRm9jdXNab25lLnByb3RvdHlwZS5fZXZhbHVhdGVGb2N1c0JlZm9yZVJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJvb3QgPSB0aGlzLl9yb290LmN1cnJlbnQ7XG4gICAgICAgIHZhciBkb2MgPSB0aGlzLl9nZXREb2N1bWVudCgpO1xuICAgICAgICBpZiAoZG9jKSB7XG4gICAgICAgICAgICB2YXIgZm9jdXNlZEVsZW1lbnQgPSBkb2MuYWN0aXZlRWxlbWVudDtcbiAgICAgICAgICAgIC8vIE9ubHkgdXBkYXRlIHRoZSBpbmRleCBwYXRoIGlmIHdlIGFyZSBub3QgcGFya2VkIG9uIHRoZSByb290LlxuICAgICAgICAgICAgaWYgKGZvY3VzZWRFbGVtZW50ICE9PSByb290KSB7XG4gICAgICAgICAgICAgICAgdmFyIHNob3VsZFJlc3RvcmVGb2N1cyA9IGVsZW1lbnRDb250YWlucyhyb290LCBmb2N1c2VkRWxlbWVudCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RJbmRleFBhdGggPSBzaG91bGRSZXN0b3JlRm9jdXMgPyBnZXRFbGVtZW50SW5kZXhQYXRoKHJvb3QsIGZvY3VzZWRFbGVtZW50KSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogV2hlbiBmb2N1cyBpcyBpbiB0aGUgem9uZSBhdCByZW5kZXIgdGltZSBidXQgdGhlbiBhbGwgZm9jdXNhYmxlIGVsZW1lbnRzIGFyZSByZW1vdmVkLFxuICAgICAqIHdlIFwicGFya1wiIGZvY3VzIHRlbXBvcmFyaWx5IG9uIHRoZSByb290LiBPbmNlIHdlIHVwZGF0ZSB3aXRoIGZvY3VzYWJsZSBjaGlsZHJlbiwgd2UgcmVzdG9yZVxuICAgICAqIGZvY3VzIHRvIHRoZSBjbG9zZXN0IHBhdGggZnJvbSBwcmV2aW91cy4gSWYgdGhlIHVzZXIgdGFicyBhd2F5IGZyb20gdGhlIHBhcmtlZCBjb250YWluZXIsXG4gICAgICogd2UgcmVzdG9yZSBmb2N1c2FiaWxpdHkgdG8gdGhlIHByZS1wYXJrZWQgc3RhdGUuXG4gICAgICovXG4gICAgRm9jdXNab25lLnByb3RvdHlwZS5fc2V0UGFya2VkRm9jdXMgPSBmdW5jdGlvbiAoaXNQYXJrZWQpIHtcbiAgICAgICAgdmFyIHJvb3QgPSB0aGlzLl9yb290LmN1cnJlbnQ7XG4gICAgICAgIGlmIChyb290ICYmIHRoaXMuX2lzUGFya2VkICE9PSBpc1BhcmtlZCkge1xuICAgICAgICAgICAgdGhpcy5faXNQYXJrZWQgPSBpc1BhcmtlZDtcbiAgICAgICAgICAgIGlmIChpc1BhcmtlZCkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5wcm9wcy5hbGxvd0ZvY3VzUm9vdCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXJrZWRUYWJJbmRleCA9IHJvb3QuZ2V0QXR0cmlidXRlKCd0YWJpbmRleCcpO1xuICAgICAgICAgICAgICAgICAgICByb290LnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcm9vdC5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIXRoaXMucHJvcHMuYWxsb3dGb2N1c1Jvb3QpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcGFya2VkVGFiSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcm9vdC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgdGhpcy5fcGFya2VkVGFiSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXJrZWRUYWJJbmRleCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJvb3QucmVtb3ZlQXR0cmlidXRlKCd0YWJpbmRleCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgRm9jdXNab25lLnByb3RvdHlwZS5fc2V0QWN0aXZlRWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtZW50LCBmb3JjZUFsaWdubWVudCkge1xuICAgICAgICB2YXIgcHJldmlvdXNBY3RpdmVFbGVtZW50ID0gdGhpcy5fYWN0aXZlRWxlbWVudDtcbiAgICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIGlmIChwcmV2aW91c0FjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChpc0VsZW1lbnRGb2N1c1pvbmUocHJldmlvdXNBY3RpdmVFbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVRhYkluZGV4ZXMocHJldmlvdXNBY3RpdmVFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXZpb3VzQWN0aXZlRWxlbWVudC50YWJJbmRleCA9IC0xO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2ZvY3VzQWxpZ25tZW50IHx8IGZvcmNlQWxpZ25tZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0Rm9jdXNBbGlnbm1lbnQoZWxlbWVudCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmVFbGVtZW50LnRhYkluZGV4ID0gMDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRm9jdXNab25lLnByb3RvdHlwZS5fcHJldmVudERlZmF1bHRXaGVuSGFuZGxlZCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICB0aGlzLnByb3BzLnByZXZlbnREZWZhdWx0V2hlbkhhbmRsZWQgJiYgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFdhbGsgdXAgdGhlIGRvbSB0cnkgdG8gZmluZCBhIGZvY3VzYWJsZSBlbGVtZW50LlxuICAgICAqL1xuICAgIEZvY3VzWm9uZS5wcm90b3R5cGUuX3RyeUludm9rZUNsaWNrRm9yRm9jdXNhYmxlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICBpZiAodGFyZ2V0ID09PSB0aGlzLl9yb290LmN1cnJlbnQgfHwgIXRoaXMucHJvcHMuc2hvdWxkUmFpc2VDbGlja3MpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAodGFyZ2V0LnRhZ05hbWUgPT09ICdCVVRUT04nIHx8XG4gICAgICAgICAgICAgICAgdGFyZ2V0LnRhZ05hbWUgPT09ICdBJyB8fFxuICAgICAgICAgICAgICAgIHRhcmdldC50YWdOYW1lID09PSAnSU5QVVQnIHx8XG4gICAgICAgICAgICAgICAgdGFyZ2V0LnRhZ05hbWUgPT09ICdURVhUQVJFQScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5faXNJbW1lZGlhdGVEZXNjZW5kYW50T2Zab25lKHRhcmdldCkgJiZcbiAgICAgICAgICAgICAgICB0YXJnZXQuZ2V0QXR0cmlidXRlKElTX0ZPQ1VTQUJMRV9BVFRSSUJVVEUpID09PSAndHJ1ZScgJiZcbiAgICAgICAgICAgICAgICB0YXJnZXQuZ2V0QXR0cmlidXRlKElTX0VOVEVSX0RJU0FCTEVEX0FUVFJJQlVURSkgIT09ICd0cnVlJykge1xuICAgICAgICAgICAgICAgIHJhaXNlQ2xpY2sodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRhcmdldCA9IGdldFBhcmVudCh0YXJnZXQsIEFMTE9XX1ZJUlRVQUxfRUxFTUVOVFMpO1xuICAgICAgICB9IHdoaWxlICh0YXJnZXQgIT09IHRoaXMuX3Jvb3QuY3VycmVudCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRyYXZlcnNlIHRvIGZpbmQgZmlyc3QgY2hpbGQgem9uZS5cbiAgICAgKi9cbiAgICBGb2N1c1pvbmUucHJvdG90eXBlLl9nZXRGaXJzdElubmVyWm9uZSA9IGZ1bmN0aW9uIChyb290RWxlbWVudCkge1xuICAgICAgICByb290RWxlbWVudCA9IHJvb3RFbGVtZW50IHx8IHRoaXMuX2FjdGl2ZUVsZW1lbnQgfHwgdGhpcy5fcm9vdC5jdXJyZW50O1xuICAgICAgICBpZiAoIXJvb3RFbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNFbGVtZW50Rm9jdXNab25lKHJvb3RFbGVtZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIF9hbGxJbnN0YW5jZXNbcm9vdEVsZW1lbnQuZ2V0QXR0cmlidXRlKEZPQ1VTWk9ORV9JRF9BVFRSSUJVVEUpXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hpbGQgPSByb290RWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgICAgICBpZiAoaXNFbGVtZW50Rm9jdXNab25lKGNoaWxkKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfYWxsSW5zdGFuY2VzW2NoaWxkLmdldEF0dHJpYnV0ZShGT0NVU1pPTkVfSURfQVRUUklCVVRFKV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbWF0Y2ggPSB0aGlzLl9nZXRGaXJzdElubmVyWm9uZShjaGlsZCk7XG4gICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGlsZCA9IGNoaWxkLm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIEZvY3VzWm9uZS5wcm90b3R5cGUuX21vdmVGb2N1cyA9IGZ1bmN0aW9uIChpc0ZvcndhcmQsIGdldERpc3RhbmNlRnJvbUNlbnRlciwgZXYsIHVzZURlZmF1bHRXcmFwKSB7XG4gICAgICAgIGlmICh1c2VEZWZhdWx0V3JhcCA9PT0gdm9pZCAwKSB7IHVzZURlZmF1bHRXcmFwID0gdHJ1ZTsgfVxuICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuX2FjdGl2ZUVsZW1lbnQ7XG4gICAgICAgIHZhciBjYW5kaWRhdGVEaXN0YW5jZSA9IC0xO1xuICAgICAgICB2YXIgY2FuZGlkYXRlRWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGNoYW5nZWRGb2N1cyA9IGZhbHNlO1xuICAgICAgICB2YXIgaXNCaWRpcmVjdGlvbmFsID0gdGhpcy5wcm9wcy5kaXJlY3Rpb24gPT09IEZvY3VzWm9uZURpcmVjdGlvbi5iaWRpcmVjdGlvbmFsO1xuICAgICAgICBpZiAoIWVsZW1lbnQgfHwgIXRoaXMuX3Jvb3QuY3VycmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9pc0VsZW1lbnRJbnB1dChlbGVtZW50KSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9zaG91bGRJbnB1dExvc2VGb2N1cyhlbGVtZW50LCBpc0ZvcndhcmQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBhY3RpdmVSZWN0ID0gaXNCaWRpcmVjdGlvbmFsID8gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IG51bGw7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSAoaXNGb3J3YXJkXG4gICAgICAgICAgICAgICAgPyBnZXROZXh0RWxlbWVudCh0aGlzLl9yb290LmN1cnJlbnQsIGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgOiBnZXRQcmV2aW91c0VsZW1lbnQodGhpcy5fcm9vdC5jdXJyZW50LCBlbGVtZW50KSk7XG4gICAgICAgICAgICBpZiAoaXNCaWRpcmVjdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldFJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudERpc3RhbmNlID0gZ2V0RGlzdGFuY2VGcm9tQ2VudGVyKGFjdGl2ZVJlY3QsIHRhcmdldFJlY3QpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudERpc3RhbmNlID09PSAtMSAmJiBjYW5kaWRhdGVEaXN0YW5jZSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZUVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnREaXN0YW5jZSA+IC0xICYmIChjYW5kaWRhdGVEaXN0YW5jZSA9PT0gLTEgfHwgZWxlbWVudERpc3RhbmNlIDwgY2FuZGlkYXRlRGlzdGFuY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGVEaXN0YW5jZSA9IGVsZW1lbnREaXN0YW5jZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZUVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYW5kaWRhdGVEaXN0YW5jZSA+PSAwICYmIGVsZW1lbnREaXN0YW5jZSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FuZGlkYXRlRWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKGVsZW1lbnQpO1xuICAgICAgICAvLyBGb2N1cyB0aGUgY2xvc2VzdCBjYW5kaWRhdGVcbiAgICAgICAgaWYgKGNhbmRpZGF0ZUVsZW1lbnQgJiYgY2FuZGlkYXRlRWxlbWVudCAhPT0gdGhpcy5fYWN0aXZlRWxlbWVudCkge1xuICAgICAgICAgICAgY2hhbmdlZEZvY3VzID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuZm9jdXNFbGVtZW50KGNhbmRpZGF0ZUVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMucHJvcHMuaXNDaXJjdWxhck5hdmlnYXRpb24gJiYgdXNlRGVmYXVsdFdyYXApIHtcbiAgICAgICAgICAgIGlmIChpc0ZvcndhcmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mb2N1c0VsZW1lbnQoZ2V0TmV4dEVsZW1lbnQodGhpcy5fcm9vdC5jdXJyZW50LCB0aGlzLl9yb290LmN1cnJlbnQuZmlyc3RFbGVtZW50Q2hpbGQsIHRydWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZvY3VzRWxlbWVudChnZXRQcmV2aW91c0VsZW1lbnQodGhpcy5fcm9vdC5jdXJyZW50LCB0aGlzLl9yb290LmN1cnJlbnQubGFzdEVsZW1lbnRDaGlsZCwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGFuZ2VkRm9jdXM7XG4gICAgfTtcbiAgICBGb2N1c1pvbmUucHJvdG90eXBlLl9tb3ZlRm9jdXNEb3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgdGFyZ2V0VG9wID0gLTE7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICB2YXIgbGVmdEFsaWdubWVudCA9IHRoaXMuX2ZvY3VzQWxpZ25tZW50LmxlZnQgfHwgdGhpcy5fZm9jdXNBbGlnbm1lbnQueCB8fCAwO1xuICAgICAgICBpZiAodGhpcy5fbW92ZUZvY3VzKHRydWUsIGZ1bmN0aW9uIChhY3RpdmVSZWN0LCB0YXJnZXRSZWN0KSB7XG4gICAgICAgICAgICB2YXIgZGlzdGFuY2UgPSAtMTtcbiAgICAgICAgICAgIC8vIENsaWVudFJlY3QgdmFsdWVzIGNhbiBiZSBmbG9hdHMgdGhhdCBkaWZmZXIgYnkgdmVyeSBzbWFsbCBmcmFjdGlvbnMgb2YgYSBkZWNpbWFsLlxuICAgICAgICAgICAgLy8gSWYgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0b3AgYW5kIGJvdHRvbSBhcmUgd2l0aGluIGEgcGl4ZWwgdGhlbiB3ZSBzaG91bGQgdHJlYXRcbiAgICAgICAgICAgIC8vIHRoZW0gYXMgZXF1aXZhbGVudCBieSB1c2luZyBNYXRoLmZsb29yLiBGb3IgaW5zdGFuY2UgNS4yMjIyIGFuZCA1LjIyMjIyMSBzaG91bGQgYmUgZXF1aXZhbGVudCxcbiAgICAgICAgICAgIC8vIGJ1dCB3aXRob3V0IE1hdGguRmxvb3IgdGhleSB3aWxsIGJlIGhhbmRsZWQgaW5jb3JyZWN0bHkuXG4gICAgICAgICAgICB2YXIgdGFyZ2V0UmVjdFRvcCA9IE1hdGguZmxvb3IodGFyZ2V0UmVjdC50b3ApO1xuICAgICAgICAgICAgdmFyIGFjdGl2ZVJlY3RCb3R0b20gPSBNYXRoLmZsb29yKGFjdGl2ZVJlY3QuYm90dG9tKTtcbiAgICAgICAgICAgIGlmICh0YXJnZXRSZWN0VG9wIDwgYWN0aXZlUmVjdEJvdHRvbSkge1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuX3Nob3VsZFdyYXBGb2N1cyhfdGhpcy5fYWN0aXZlRWxlbWVudCwgTk9fVkVSVElDQUxfV1JBUCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIExBUkdFX05FR0FUSVZFX0RJU1RBTkNFX0ZST01fQ0VOVEVSO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gTEFSR0VfRElTVEFOQ0VfRlJPTV9DRU5URVI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhcmdldFRvcCA9PT0gLTEgJiYgdGFyZ2V0UmVjdFRvcCA+PSBhY3RpdmVSZWN0Qm90dG9tKSB8fCB0YXJnZXRSZWN0VG9wID09PSB0YXJnZXRUb3ApIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRUb3AgPSB0YXJnZXRSZWN0VG9wO1xuICAgICAgICAgICAgICAgIGlmIChsZWZ0QWxpZ25tZW50ID49IHRhcmdldFJlY3QubGVmdCAmJiBsZWZ0QWxpZ25tZW50IDw9IHRhcmdldFJlY3QubGVmdCArIHRhcmdldFJlY3Qud2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBNYXRoLmFicyh0YXJnZXRSZWN0LmxlZnQgKyB0YXJnZXRSZWN0LndpZHRoIC8gMiAtIGxlZnRBbGlnbm1lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkaXN0YW5jZTtcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldEZvY3VzQWxpZ25tZW50KHRoaXMuX2FjdGl2ZUVsZW1lbnQsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIEZvY3VzWm9uZS5wcm90b3R5cGUuX21vdmVGb2N1c1VwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgdGFyZ2V0VG9wID0gLTE7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICB2YXIgbGVmdEFsaWdubWVudCA9IHRoaXMuX2ZvY3VzQWxpZ25tZW50LmxlZnQgfHwgdGhpcy5fZm9jdXNBbGlnbm1lbnQueCB8fCAwO1xuICAgICAgICBpZiAodGhpcy5fbW92ZUZvY3VzKGZhbHNlLCBmdW5jdGlvbiAoYWN0aXZlUmVjdCwgdGFyZ2V0UmVjdCkge1xuICAgICAgICAgICAgdmFyIGRpc3RhbmNlID0gLTE7XG4gICAgICAgICAgICAvLyBDbGllbnRSZWN0IHZhbHVlcyBjYW4gYmUgZmxvYXRzIHRoYXQgZGlmZmVyIGJ5IHZlcnkgc21hbGwgZnJhY3Rpb25zIG9mIGEgZGVjaW1hbC5cbiAgICAgICAgICAgIC8vIElmIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdG9wIGFuZCBib3R0b20gYXJlIHdpdGhpbiBhIHBpeGVsIHRoZW4gd2Ugc2hvdWxkIHRyZWF0XG4gICAgICAgICAgICAvLyB0aGVtIGFzIGVxdWl2YWxlbnQgYnkgdXNpbmcgTWF0aC5mbG9vci4gRm9yIGluc3RhbmNlIDUuMjIyMiBhbmQgNS4yMjIyMjEgc2hvdWxkIGJlIGVxdWl2YWxlbnQsXG4gICAgICAgICAgICAvLyBidXQgd2l0aG91dCBNYXRoLkZsb29yIHRoZXkgd2lsbCBiZSBoYW5kbGVkIGluY29ycmVjdGx5LlxuICAgICAgICAgICAgdmFyIHRhcmdldFJlY3RCb3R0b20gPSBNYXRoLmZsb29yKHRhcmdldFJlY3QuYm90dG9tKTtcbiAgICAgICAgICAgIHZhciB0YXJnZXRSZWN0VG9wID0gTWF0aC5mbG9vcih0YXJnZXRSZWN0LnRvcCk7XG4gICAgICAgICAgICB2YXIgYWN0aXZlUmVjdFRvcCA9IE1hdGguZmxvb3IoYWN0aXZlUmVjdC50b3ApO1xuICAgICAgICAgICAgaWYgKHRhcmdldFJlY3RCb3R0b20gPiBhY3RpdmVSZWN0VG9wKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5fc2hvdWxkV3JhcEZvY3VzKF90aGlzLl9hY3RpdmVFbGVtZW50LCBOT19WRVJUSUNBTF9XUkFQKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTEFSR0VfTkVHQVRJVkVfRElTVEFOQ0VfRlJPTV9DRU5URVI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBMQVJHRV9ESVNUQU5DRV9GUk9NX0NFTlRFUjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFyZ2V0VG9wID09PSAtMSAmJiB0YXJnZXRSZWN0Qm90dG9tIDw9IGFjdGl2ZVJlY3RUb3ApIHx8IHRhcmdldFJlY3RUb3AgPT09IHRhcmdldFRvcCkge1xuICAgICAgICAgICAgICAgIHRhcmdldFRvcCA9IHRhcmdldFJlY3RUb3A7XG4gICAgICAgICAgICAgICAgaWYgKGxlZnRBbGlnbm1lbnQgPj0gdGFyZ2V0UmVjdC5sZWZ0ICYmIGxlZnRBbGlnbm1lbnQgPD0gdGFyZ2V0UmVjdC5sZWZ0ICsgdGFyZ2V0UmVjdC53aWR0aCkge1xuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IE1hdGguYWJzKHRhcmdldFJlY3QubGVmdCArIHRhcmdldFJlY3Qud2lkdGggLyAyIC0gbGVmdEFsaWdubWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRpc3RhbmNlO1xuICAgICAgICB9KSkge1xuICAgICAgICAgICAgdGhpcy5fc2V0Rm9jdXNBbGlnbm1lbnQodGhpcy5fYWN0aXZlRWxlbWVudCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgRm9jdXNab25lLnByb3RvdHlwZS5fbW92ZUZvY3VzTGVmdCA9IGZ1bmN0aW9uICh0aGVtZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgc2hvdWxkV3JhcCA9IHRoaXMuX3Nob3VsZFdyYXBGb2N1cyh0aGlzLl9hY3RpdmVFbGVtZW50LCBOT19IT1JJWk9OVEFMX1dSQVApO1xuICAgICAgICBpZiAodGhpcy5fbW92ZUZvY3VzKGdldFJUTCh0aGVtZSksIGZ1bmN0aW9uIChhY3RpdmVSZWN0LCB0YXJnZXRSZWN0KSB7XG4gICAgICAgICAgICB2YXIgZGlzdGFuY2UgPSAtMTtcbiAgICAgICAgICAgIHZhciB0b3BCb3R0b21Db21wYXJpc29uO1xuICAgICAgICAgICAgaWYgKGdldFJUTCh0aGVtZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBXaGVuIGluIFJUTCwgdGhpcyBjb21wYXJpc29uIHNob3VsZCBiZSB0aGUgc2FtZSBhcyB0aGUgb25lIGluIF9tb3ZlRm9jdXNSaWdodCBmb3IgTFRSLlxuICAgICAgICAgICAgICAgIC8vIEdvaW5nIGxlZnQgYXQgYSBsZWZ0bW9zdCByZWN0YW5nbGUgd2lsbCBnbyBkb3duIGEgbGluZSBpbnN0ZWFkIG9mIHVwIGEgbGluZSBsaWtlIGluIExUUi5cbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGltcG9ydGFudCwgYmVjYXVzZSB3ZSB3YW50IHRvIGJlIGNvbXBhcmluZyB0aGUgdG9wIG9mIHRoZSB0YXJnZXQgcmVjdFxuICAgICAgICAgICAgICAgIC8vIHdpdGggdGhlIGJvdHRvbSBvZiB0aGUgYWN0aXZlIHJlY3QuXG4gICAgICAgICAgICAgICAgdG9wQm90dG9tQ29tcGFyaXNvbiA9IHBhcnNlRmxvYXQodGFyZ2V0UmVjdC50b3AudG9GaXhlZCgzKSkgPCBwYXJzZUZsb2F0KGFjdGl2ZVJlY3QuYm90dG9tLnRvRml4ZWQoMykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdG9wQm90dG9tQ29tcGFyaXNvbiA9IHBhcnNlRmxvYXQodGFyZ2V0UmVjdC5ib3R0b20udG9GaXhlZCgzKSkgPiBwYXJzZUZsb2F0KGFjdGl2ZVJlY3QudG9wLnRvRml4ZWQoMykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRvcEJvdHRvbUNvbXBhcmlzb24gJiZcbiAgICAgICAgICAgICAgICB0YXJnZXRSZWN0LnJpZ2h0IDw9IGFjdGl2ZVJlY3QucmlnaHQgJiZcbiAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5kaXJlY3Rpb24gIT09IEZvY3VzWm9uZURpcmVjdGlvbi52ZXJ0aWNhbCkge1xuICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gYWN0aXZlUmVjdC5yaWdodCAtIHRhcmdldFJlY3QucmlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghc2hvdWxkV3JhcCkge1xuICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gTEFSR0VfTkVHQVRJVkVfRElTVEFOQ0VfRlJPTV9DRU5URVI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGlzdGFuY2U7XG4gICAgICAgIH0sIHVuZGVmaW5lZCAvKmV2Ki8sIHNob3VsZFdyYXApKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRGb2N1c0FsaWdubWVudCh0aGlzLl9hY3RpdmVFbGVtZW50LCB0cnVlLCBmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBGb2N1c1pvbmUucHJvdG90eXBlLl9tb3ZlRm9jdXNSaWdodCA9IGZ1bmN0aW9uICh0aGVtZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgc2hvdWxkV3JhcCA9IHRoaXMuX3Nob3VsZFdyYXBGb2N1cyh0aGlzLl9hY3RpdmVFbGVtZW50LCBOT19IT1JJWk9OVEFMX1dSQVApO1xuICAgICAgICBpZiAodGhpcy5fbW92ZUZvY3VzKCFnZXRSVEwodGhlbWUpLCBmdW5jdGlvbiAoYWN0aXZlUmVjdCwgdGFyZ2V0UmVjdCkge1xuICAgICAgICAgICAgdmFyIGRpc3RhbmNlID0gLTE7XG4gICAgICAgICAgICB2YXIgdG9wQm90dG9tQ29tcGFyaXNvbjtcbiAgICAgICAgICAgIGlmIChnZXRSVEwodGhlbWUpKSB7XG4gICAgICAgICAgICAgICAgLy8gV2hlbiBpbiBSVEwsIHRoaXMgY29tcGFyaXNvbiBzaG91bGQgYmUgdGhlIHNhbWUgYXMgdGhlIG9uZSBpbiBfbW92ZUZvY3VzTGVmdCBmb3IgTFRSLlxuICAgICAgICAgICAgICAgIC8vIEdvaW5nIHJpZ2h0IGF0IGEgcmlnaHRtb3N0IHJlY3RhbmdsZSB3aWxsIGdvIHVwIGEgbGluZSBpbnN0ZWFkIG9mIGRvd24gYSBsaW5lIGxpa2UgaW4gTFRSLlxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgaW1wb3J0YW50LCBiZWNhdXNlIHdlIHdhbnQgdG8gYmUgY29tcGFyaW5nIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldCByZWN0XG4gICAgICAgICAgICAgICAgLy8gd2l0aCB0aGUgdG9wIG9mIHRoZSBhY3RpdmUgcmVjdC5cbiAgICAgICAgICAgICAgICB0b3BCb3R0b21Db21wYXJpc29uID0gcGFyc2VGbG9hdCh0YXJnZXRSZWN0LmJvdHRvbS50b0ZpeGVkKDMpKSA+IHBhcnNlRmxvYXQoYWN0aXZlUmVjdC50b3AudG9GaXhlZCgzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0b3BCb3R0b21Db21wYXJpc29uID0gcGFyc2VGbG9hdCh0YXJnZXRSZWN0LnRvcC50b0ZpeGVkKDMpKSA8IHBhcnNlRmxvYXQoYWN0aXZlUmVjdC5ib3R0b20udG9GaXhlZCgzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodG9wQm90dG9tQ29tcGFyaXNvbiAmJlxuICAgICAgICAgICAgICAgIHRhcmdldFJlY3QubGVmdCA+PSBhY3RpdmVSZWN0LmxlZnQgJiZcbiAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5kaXJlY3Rpb24gIT09IEZvY3VzWm9uZURpcmVjdGlvbi52ZXJ0aWNhbCkge1xuICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gdGFyZ2V0UmVjdC5sZWZ0IC0gYWN0aXZlUmVjdC5sZWZ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIXNob3VsZFdyYXApIHtcbiAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IExBUkdFX05FR0FUSVZFX0RJU1RBTkNFX0ZST01fQ0VOVEVSO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRpc3RhbmNlO1xuICAgICAgICB9LCB1bmRlZmluZWQgLypldiovLCBzaG91bGRXcmFwKSkge1xuICAgICAgICAgICAgdGhpcy5fc2V0Rm9jdXNBbGlnbm1lbnQodGhpcy5fYWN0aXZlRWxlbWVudCwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgRm9jdXNab25lLnByb3RvdHlwZS5fbW92ZUZvY3VzUGFnaW5nID0gZnVuY3Rpb24gKGlzRm9yd2FyZCwgdXNlRGVmYXVsdFdyYXApIHtcbiAgICAgICAgaWYgKHVzZURlZmF1bHRXcmFwID09PSB2b2lkIDApIHsgdXNlRGVmYXVsdFdyYXAgPSB0cnVlOyB9XG4gICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5fYWN0aXZlRWxlbWVudDtcbiAgICAgICAgaWYgKCFlbGVtZW50IHx8ICF0aGlzLl9yb290LmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faXNFbGVtZW50SW5wdXQoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fc2hvdWxkSW5wdXRMb3NlRm9jdXMoZWxlbWVudCwgaXNGb3J3YXJkKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgc2Nyb2xsYWJsZVBhcmVudCA9IGZpbmRTY3JvbGxhYmxlUGFyZW50KGVsZW1lbnQpO1xuICAgICAgICBpZiAoIXNjcm9sbGFibGVQYXJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FuZGlkYXRlRGlzdGFuY2UgPSAtMTtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZUVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciB0YXJnZXRUb3AgPSAtMTtcbiAgICAgICAgdmFyIHRhcmdldEJvdHRvbSA9IC0xO1xuICAgICAgICB2YXIgcGFnZXNpemUgPSBzY3JvbGxhYmxlUGFyZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgdmFyIGFjdGl2ZVJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBlbGVtZW50ID0gaXNGb3J3YXJkXG4gICAgICAgICAgICAgICAgPyBnZXROZXh0RWxlbWVudCh0aGlzLl9yb290LmN1cnJlbnQsIGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgOiBnZXRQcmV2aW91c0VsZW1lbnQodGhpcy5fcm9vdC5jdXJyZW50LCBlbGVtZW50KTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldFJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRSZWN0VG9wID0gTWF0aC5mbG9vcih0YXJnZXRSZWN0LnRvcCk7XG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZVJlY3RCb3R0b20gPSBNYXRoLmZsb29yKGFjdGl2ZVJlY3QuYm90dG9tKTtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0UmVjdEJvdHRvbSA9IE1hdGguZmxvb3IodGFyZ2V0UmVjdC5ib3R0b20pO1xuICAgICAgICAgICAgICAgIHZhciBhY3RpdmVSZWN0VG9wID0gTWF0aC5mbG9vcihhY3RpdmVSZWN0LnRvcCk7XG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnREaXN0YW5jZSA9IHRoaXMuX2dldEhvcml6b250YWxEaXN0YW5jZUZyb21DZW50ZXIoaXNGb3J3YXJkLCBhY3RpdmVSZWN0LCB0YXJnZXRSZWN0KTtcbiAgICAgICAgICAgICAgICB2YXIgaXNFbGVtZW50UGFzc2VkUGFnZVNpemVPblBhZ2luZ0Rvd24gPSBpc0ZvcndhcmQgJiYgdGFyZ2V0UmVjdFRvcCA+IGFjdGl2ZVJlY3RCb3R0b20gKyBwYWdlc2l6ZTtcbiAgICAgICAgICAgICAgICB2YXIgaXNFbGVtZW50UGFzc2VkUGFnZVNpemVPblBhZ2luZ1VwID0gIWlzRm9yd2FyZCAmJiB0YXJnZXRSZWN0Qm90dG9tIDwgYWN0aXZlUmVjdFRvcCAtIHBhZ2VzaXplO1xuICAgICAgICAgICAgICAgIGlmIChpc0VsZW1lbnRQYXNzZWRQYWdlU2l6ZU9uUGFnaW5nRG93biB8fCBpc0VsZW1lbnRQYXNzZWRQYWdlU2l6ZU9uUGFnaW5nVXApIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50RGlzdGFuY2UgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBmb3IgcGFnaW5nIGRvd25cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRm9yd2FyZCAmJiB0YXJnZXRSZWN0VG9wID4gdGFyZ2V0VG9wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRUb3AgPSB0YXJnZXRSZWN0VG9wO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlRGlzdGFuY2UgPSBlbGVtZW50RGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGVFbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICghaXNGb3J3YXJkICYmIHRhcmdldFJlY3RCb3R0b20gPCB0YXJnZXRCb3R0b20pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvciBwYWdpbmcgdXBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJvdHRvbSA9IHRhcmdldFJlY3RCb3R0b207XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGVEaXN0YW5jZSA9IGVsZW1lbnREaXN0YW5jZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZUVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNhbmRpZGF0ZURpc3RhbmNlID09PSAtMSB8fCBlbGVtZW50RGlzdGFuY2UgPD0gY2FuZGlkYXRlRGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZURpc3RhbmNlID0gZWxlbWVudERpc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlRWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKGVsZW1lbnQpO1xuICAgICAgICB2YXIgY2hhbmdlZEZvY3VzID0gZmFsc2U7XG4gICAgICAgIC8vIEZvY3VzIHRoZSBjbG9zZXN0IGNhbmRpZGF0ZVxuICAgICAgICBpZiAoY2FuZGlkYXRlRWxlbWVudCAmJiBjYW5kaWRhdGVFbGVtZW50ICE9PSB0aGlzLl9hY3RpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICBjaGFuZ2VkRm9jdXMgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5mb2N1c0VsZW1lbnQoY2FuZGlkYXRlRWxlbWVudCk7XG4gICAgICAgICAgICB0aGlzLl9zZXRGb2N1c0FsaWdubWVudChjYW5kaWRhdGVFbGVtZW50LCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5wcm9wcy5pc0NpcmN1bGFyTmF2aWdhdGlvbiAmJiB1c2VEZWZhdWx0V3JhcCkge1xuICAgICAgICAgICAgaWYgKGlzRm9yd2FyZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZvY3VzRWxlbWVudChnZXROZXh0RWxlbWVudCh0aGlzLl9yb290LmN1cnJlbnQsIHRoaXMuX3Jvb3QuY3VycmVudC5maXJzdEVsZW1lbnRDaGlsZCwgdHJ1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9jdXNFbGVtZW50KGdldFByZXZpb3VzRWxlbWVudCh0aGlzLl9yb290LmN1cnJlbnQsIHRoaXMuX3Jvb3QuY3VycmVudC5sYXN0RWxlbWVudENoaWxkLCB0cnVlLCB0cnVlLCB0cnVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoYW5nZWRGb2N1cztcbiAgICB9O1xuICAgIEZvY3VzWm9uZS5wcm90b3R5cGUuX3NldEZvY3VzQWxpZ25tZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQsIGlzSG9yaXpvbnRhbCwgaXNWZXJ0aWNhbCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5kaXJlY3Rpb24gPT09IEZvY3VzWm9uZURpcmVjdGlvbi5iaWRpcmVjdGlvbmFsICYmXG4gICAgICAgICAgICAoIXRoaXMuX2ZvY3VzQWxpZ25tZW50IHx8IGlzSG9yaXpvbnRhbCB8fCBpc1ZlcnRpY2FsKSkge1xuICAgICAgICAgICAgdmFyIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgdmFyIGxlZnQgPSByZWN0LmxlZnQgKyByZWN0LndpZHRoIC8gMjtcbiAgICAgICAgICAgIHZhciB0b3BfMSA9IHJlY3QudG9wICsgcmVjdC5oZWlnaHQgLyAyO1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9mb2N1c0FsaWdubWVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZvY3VzQWxpZ25tZW50ID0geyBsZWZ0OiBsZWZ0LCB0b3A6IHRvcF8xIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZm9jdXNBbGlnbm1lbnQubGVmdCA9IGxlZnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNWZXJ0aWNhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZvY3VzQWxpZ25tZW50LnRvcCA9IHRvcF8xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBGb2N1c1pvbmUucHJvdG90eXBlLl9pc0ltbWVkaWF0ZURlc2NlbmRhbnRPZlpvbmUgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0T3duZXJab25lKGVsZW1lbnQpID09PSB0aGlzLl9yb290LmN1cnJlbnQ7XG4gICAgfTtcbiAgICBGb2N1c1pvbmUucHJvdG90eXBlLl9nZXRPd25lclpvbmUgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICB2YXIgcGFyZW50RWxlbWVudCA9IGdldFBhcmVudChlbGVtZW50LCBBTExPV19WSVJUVUFMX0VMRU1FTlRTKTtcbiAgICAgICAgd2hpbGUgKHBhcmVudEVsZW1lbnQgJiYgcGFyZW50RWxlbWVudCAhPT0gdGhpcy5fcm9vdC5jdXJyZW50ICYmIHBhcmVudEVsZW1lbnQgIT09IHRoaXMuX2dldERvY3VtZW50KCkuYm9keSkge1xuICAgICAgICAgICAgaWYgKGlzRWxlbWVudEZvY3VzWm9uZShwYXJlbnRFbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyZW50RWxlbWVudCA9IGdldFBhcmVudChwYXJlbnRFbGVtZW50LCBBTExPV19WSVJUVUFMX0VMRU1FTlRTKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyZW50RWxlbWVudDtcbiAgICB9O1xuICAgIEZvY3VzWm9uZS5wcm90b3R5cGUuX3VwZGF0ZVRhYkluZGV4ZXMgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICBpZiAoIXRoaXMuX2FjdGl2ZUVsZW1lbnQgJiZcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZGVmYXVsdFRhYmJhYmxlRWxlbWVudCAmJlxuICAgICAgICAgICAgdHlwZW9mIHRoaXMucHJvcHMuZGVmYXVsdFRhYmJhYmxlRWxlbWVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IHRoaXMucHJvcHMuZGVmYXVsdFRhYmJhYmxlRWxlbWVudCh0aGlzLl9yb290LmN1cnJlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZWxlbWVudCAmJiB0aGlzLl9yb290LmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2RlZmF1bHRGb2N1c0VsZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgZWxlbWVudCA9IHRoaXMuX3Jvb3QuY3VycmVudDtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hY3RpdmVFbGVtZW50ICYmICFlbGVtZW50Q29udGFpbnMoZWxlbWVudCwgdGhpcy5fYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBhY3RpdmUgZWxlbWVudCBjaGFuZ2VzIHN0YXRlIHRvIGRpc2FibGVkLCBzZXQgaXQgdG8gbnVsbC5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSBsb3NlIGtleWJvYXJkIGFjY2Vzc2liaWxpdHkgdG8gb3RoZXIgZWxlbWVudHMgaW4gZm9jdXMgem9uZS5cbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZUVsZW1lbnQgJiYgIWlzRWxlbWVudFRhYmJhYmxlKHRoaXMuX2FjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hpbGROb2RlcyA9IGVsZW1lbnQgJiYgZWxlbWVudC5jaGlsZHJlbjtcbiAgICAgICAgZm9yICh2YXIgY2hpbGRJbmRleCA9IDA7IGNoaWxkTm9kZXMgJiYgY2hpbGRJbmRleCA8IGNoaWxkTm9kZXMubGVuZ3RoOyBjaGlsZEluZGV4KyspIHtcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IGNoaWxkTm9kZXNbY2hpbGRJbmRleF07XG4gICAgICAgICAgICBpZiAoIWlzRWxlbWVudEZvY3VzWm9uZShjaGlsZCkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgaXRlbSBpcyBleHBsaWNpdGx5IHNldCB0byBub3QgYmUgZm9jdXNhYmxlIHRoZW4gVEFCSU5ERVggbmVlZHMgdG8gYmUgc2V0IHRvIC0xLlxuICAgICAgICAgICAgICAgIGlmIChjaGlsZC5nZXRBdHRyaWJ1dGUgJiYgY2hpbGQuZ2V0QXR0cmlidXRlKElTX0ZPQ1VTQUJMRV9BVFRSSUJVVEUpID09PSAnZmFsc2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLnNldEF0dHJpYnV0ZShUQUJJTkRFWCwgJy0xJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc0VsZW1lbnRUYWJiYWJsZShjaGlsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLnNldEF0dHJpYnV0ZShUQUJJTkRFWCwgJy0xJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIXRoaXMuX2lzSW5uZXJab25lICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoKCF0aGlzLl9hY3RpdmVFbGVtZW50ICYmICF0aGlzLl9kZWZhdWx0Rm9jdXNFbGVtZW50KSB8fCB0aGlzLl9hY3RpdmVFbGVtZW50ID09PSBjaGlsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlZmF1bHRGb2N1c0VsZW1lbnQgPSBjaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5nZXRBdHRyaWJ1dGUoVEFCSU5ERVgpICE9PSAnMCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5zZXRBdHRyaWJ1dGUoVEFCSU5ERVgsICcwJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY2hpbGQuZ2V0QXR0cmlidXRlKFRBQklOREVYKSAhPT0gJy0xJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQuc2V0QXR0cmlidXRlKFRBQklOREVYLCAnLTEnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaGlsZC50YWdOYW1lID09PSAnc3ZnJyAmJiBjaGlsZC5nZXRBdHRyaWJ1dGUoJ2ZvY3VzYWJsZScpICE9PSAnZmFsc2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIERpc2d1c3RpbmcgSUUgaGFjay4gU2FkIGZhY2UuXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLnNldEF0dHJpYnV0ZSgnZm9jdXNhYmxlJywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hpbGQuZ2V0QXR0cmlidXRlKElTX0ZPQ1VTQUJMRV9BVFRSSUJVVEUpID09PSAndHJ1ZScpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2lzSW5uZXJab25lICYmXG4gICAgICAgICAgICAgICAgICAgICgoIXRoaXMuX2FjdGl2ZUVsZW1lbnQgJiYgIXRoaXMuX2RlZmF1bHRGb2N1c0VsZW1lbnQpIHx8IHRoaXMuX2FjdGl2ZUVsZW1lbnQgPT09IGNoaWxkKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWZhdWx0Rm9jdXNFbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5nZXRBdHRyaWJ1dGUoVEFCSU5ERVgpICE9PSAnMCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLnNldEF0dHJpYnV0ZShUQUJJTkRFWCwgJzAnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaGlsZC5nZXRBdHRyaWJ1dGUoVEFCSU5ERVgpICE9PSAnLTEnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLnNldEF0dHJpYnV0ZShUQUJJTkRFWCwgJy0xJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlVGFiSW5kZXhlcyhjaGlsZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEZvY3VzWm9uZS5wcm90b3R5cGUuX2lzQ29udGVudEVkaXRhYmxlRWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnKSA9PT0gJ3RydWUnO1xuICAgIH07XG4gICAgRm9jdXNab25lLnByb3RvdHlwZS5faXNFbGVtZW50SW5wdXQgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICBpZiAoZWxlbWVudCAmJlxuICAgICAgICAgICAgZWxlbWVudC50YWdOYW1lICYmXG4gICAgICAgICAgICAoZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcgfHwgZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd0ZXh0YXJlYScpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBGb2N1c1pvbmUucHJvdG90eXBlLl9zaG91bGRJbnB1dExvc2VGb2N1cyA9IGZ1bmN0aW9uIChlbGVtZW50LCBpc0ZvcndhcmQpIHtcbiAgICAgICAgLy8gSWYgYSB0YWIgd2FzIHVzZWQsIHdlIHdhbnQgdG8gZm9jdXMgb24gdGhlIG5leHQgZWxlbWVudC5cbiAgICAgICAgaWYgKCF0aGlzLl9wcm9jZXNzaW5nVGFiS2V5ICYmXG4gICAgICAgICAgICBlbGVtZW50ICYmXG4gICAgICAgICAgICBlbGVtZW50LnR5cGUgJiZcbiAgICAgICAgICAgIEFMTE9XRURfSU5QVVRfVFlQRVMuaW5kZXhPZihlbGVtZW50LnR5cGUudG9Mb3dlckNhc2UoKSkgPiAtMSkge1xuICAgICAgICAgICAgdmFyIHNlbGVjdGlvblN0YXJ0ID0gZWxlbWVudC5zZWxlY3Rpb25TdGFydDtcbiAgICAgICAgICAgIHZhciBzZWxlY3Rpb25FbmQgPSBlbGVtZW50LnNlbGVjdGlvbkVuZDtcbiAgICAgICAgICAgIHZhciBpc1JhbmdlU2VsZWN0ZWQgPSBzZWxlY3Rpb25TdGFydCAhPT0gc2VsZWN0aW9uRW5kO1xuICAgICAgICAgICAgdmFyIGlucHV0VmFsdWUgPSBlbGVtZW50LnZhbHVlO1xuICAgICAgICAgICAgdmFyIGlzUmVhZG9ubHkgPSBlbGVtZW50LnJlYWRPbmx5O1xuICAgICAgICAgICAgLy8gV2Ugc2hvdWxkbid0IGxvc2UgZm9jdXMgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcbiAgICAgICAgICAgIC8vIDEuIFRoZXJlIGlzIHJhbmdlIHNlbGVjdGVkLlxuICAgICAgICAgICAgLy8gMi4gV2hlbiBzZWxlY3Rpb24gc3RhcnQgaXMgbGFyZ2VyIHRoYW4gMCBhbmQgaXQgaXMgYmFja3dhcmQgYW5kIG5vdCByZWFkT25seS5cbiAgICAgICAgICAgIC8vIDMuIHdoZW4gc2VsZWN0aW9uIHN0YXJ0IGlzIG5vdCB0aGUgZW5kIG9mIGxlbmd0aCwgaXQgaXMgZm9yd2FyZCBhbmQgbm90IHJlYWRPbmx5LlxuICAgICAgICAgICAgLy8gNC4gV2UgcHJlc3MgYW55IG9mIHRoZSBhcnJvdyBrZXlzIHdoZW4gb3VyIGhhbmRsZVRhYktleSBpc24ndCBub25lIG9yIHVuZGVmaW5lZCAob25seSBsb3NpbmcgZm9jdXMgaWYgd2UgaGl0XG4gICAgICAgICAgICAvLyB0YWIpIGFuZCBpZiBzaG91bGRJbnB1dExvc2VGb2N1c09uQXJyb3dLZXkgaXMgZGVmaW5lZCwgaWYgc2NlbmFyaW8gcHJlZmVycyB0byBub3QgbG9vc2UgdGhlIGZvY3VzIHdoaWNoIGlzXG4gICAgICAgICAgICAvLyBkZXRlcm1pbmVkIGJ5IGNhbGxpbmcgdGhlIGNhbGxiYWNrIHNob3VsZElucHV0TG9zZUZvY3VzT25BcnJvd0tleVxuICAgICAgICAgICAgaWYgKGlzUmFuZ2VTZWxlY3RlZCB8fFxuICAgICAgICAgICAgICAgIChzZWxlY3Rpb25TdGFydCA+IDAgJiYgIWlzRm9yd2FyZCAmJiAhaXNSZWFkb25seSkgfHxcbiAgICAgICAgICAgICAgICAoc2VsZWN0aW9uU3RhcnQgIT09IGlucHV0VmFsdWUubGVuZ3RoICYmIGlzRm9yd2FyZCAmJiAhaXNSZWFkb25seSkgfHxcbiAgICAgICAgICAgICAgICAoISF0aGlzLnByb3BzLmhhbmRsZVRhYktleSAmJlxuICAgICAgICAgICAgICAgICAgICAhKHRoaXMucHJvcHMuc2hvdWxkSW5wdXRMb3NlRm9jdXNPbkFycm93S2V5ICYmIHRoaXMucHJvcHMuc2hvdWxkSW5wdXRMb3NlRm9jdXNPbkFycm93S2V5KGVsZW1lbnQpKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBGb2N1c1pvbmUucHJvdG90eXBlLl9zaG91bGRXcmFwRm9jdXMgPSBmdW5jdGlvbiAoZWxlbWVudCwgbm9XcmFwRGF0YUF0dHJpYnV0ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGVja0Zvck5vV3JhcCA/IHNob3VsZFdyYXBGb2N1cyhlbGVtZW50LCBub1dyYXBEYXRhQXR0cmlidXRlKSA6IHRydWU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGVsZW1lbnQgaXMgYSBkZXNjZW5kYW50IG9mIHRoZSBGb2N1c1pvbmUgdGhyb3VnaCBhIFJlYWN0IHBvcnRhbC5cbiAgICAgKi9cbiAgICBGb2N1c1pvbmUucHJvdG90eXBlLl9wb3J0YWxDb250YWluc0VsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudCAmJiAhIXRoaXMuX3Jvb3QuY3VycmVudCAmJiBwb3J0YWxDb250YWluc0VsZW1lbnQoZWxlbWVudCwgdGhpcy5fcm9vdC5jdXJyZW50KTtcbiAgICB9O1xuICAgIEZvY3VzWm9uZS5wcm90b3R5cGUuX2dldERvY3VtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZ2V0RG9jdW1lbnQodGhpcy5fcm9vdC5jdXJyZW50KTtcbiAgICB9O1xuICAgIEZvY3VzWm9uZS5kZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGlzQ2lyY3VsYXJOYXZpZ2F0aW9uOiBmYWxzZSxcbiAgICAgICAgZGlyZWN0aW9uOiBGb2N1c1pvbmVEaXJlY3Rpb24uYmlkaXJlY3Rpb25hbCxcbiAgICAgICAgc2hvdWxkUmFpc2VDbGlja3M6IHRydWUsXG4gICAgfTtcbiAgICByZXR1cm4gRm9jdXNab25lO1xufShSZWFjdC5Db21wb25lbnQpKTtcbmV4cG9ydCB7IEZvY3VzWm9uZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Rm9jdXNab25lLmpzLm1hcCIsIi8qKlxuICogQGRlcHJlY2F0ZWQgSWNvbiB0eXBlIGlzIGluZmVycmVkIGJhc2VkIG9uIHByZXNlbmNlIG9mIGBJSWNvblByb3BzLmltYWdlUHJvcHNgXG4gKiB7QGRvY0NhdGVnb3J5IEljb259XG4gKi9cbmV4cG9ydCB2YXIgSWNvblR5cGU7XG4oZnVuY3Rpb24gKEljb25UeXBlKSB7XG4gICAgLyoqXG4gICAgICogUmVuZGVyIHVzaW5nIHRoZSBmYWJyaWMgaWNvbiBmb250LlxuICAgICAqIEBkZXByZWNhdGVkIEljb24gdHlwZSBpcyBpbmZlcnJlZCBiYXNlZCBvbiBwcmVzZW5jZSBvZiBgSUljb25Qcm9wcy5pbWFnZVByb3BzYFxuICAgICAqL1xuICAgIEljb25UeXBlW0ljb25UeXBlW1wiZGVmYXVsdFwiXSA9IDBdID0gXCJkZWZhdWx0XCI7XG4gICAgLyoqXG4gICAgICogUmVuZGVyIHVzaW5nIGFuIGltYWdlLCB3aGVyZSBpbWFnZVByb3BzIHdvdWxkIGJlIHVzZWQuXG4gICAgICogQGRlcHJlY2F0ZWQgSWNvbiB0eXBlIGlzIGluZmVycmVkIGJhc2VkIG9uIHByZXNlbmNlIG9mIGBJSWNvblByb3BzLmltYWdlUHJvcHNgXG4gICAgICovXG4gICAgSWNvblR5cGVbSWNvblR5cGVbXCJpbWFnZVwiXSA9IDFdID0gXCJpbWFnZVwiO1xuICAgIC8qKlxuICAgICAqIERlcHJlY2F0ZWQsIHVzZSBgZGVmYXVsdGAuXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIGBkZWZhdWx0YC5cbiAgICAgKi9cbiAgICBJY29uVHlwZVtJY29uVHlwZVtcIkRlZmF1bHRcIl0gPSAxMDAwMDBdID0gXCJEZWZhdWx0XCI7XG4gICAgLyoqXG4gICAgICogRGVwcmVjYXRlZCwgdXNlIGBpbWFnZWAuXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIGBpbWFnZWAuXG4gICAgICovXG4gICAgSWNvblR5cGVbSWNvblR5cGVbXCJJbWFnZVwiXSA9IDEwMDAwMV0gPSBcIkltYWdlXCI7XG59KShJY29uVHlwZSB8fCAoSWNvblR5cGUgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SWNvbi50eXBlcy5qcy5tYXAiLCIvKipcbiAqIFRoZSBwb3NzaWJsZSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgdG8gZml0IHRoZSBpbWFnZS5cbiAqIHtAZG9jQ2F0ZWdvcnkgSW1hZ2V9XG4gKi9cbmV4cG9ydCB2YXIgSW1hZ2VGaXQ7XG4oZnVuY3Rpb24gKEltYWdlRml0KSB7XG4gICAgLyoqXG4gICAgICogVGhlIGltYWdlIGlzIG5vdCBzY2FsZWQuIFRoZSBpbWFnZSBpcyBjZW50ZXJlZCBhbmQgY3JvcHBlZCB3aXRoaW4gdGhlIGNvbnRlbnQgYm94LlxuICAgICAqL1xuICAgIEltYWdlRml0W0ltYWdlRml0W1wiY2VudGVyXCJdID0gMF0gPSBcImNlbnRlclwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBpbWFnZSBpcyBzY2FsZWQgdG8gbWFpbnRhaW4gaXRzIGFzcGVjdCByYXRpbyB3aGlsZSBiZWluZyBmdWxseSBjb250YWluZWQgd2l0aGluIHRoZSBmcmFtZS4gVGhlIGltYWdlIHdpbGxcbiAgICAgKiBiZSBjZW50ZXJlZCBob3Jpem9udGFsbHkgYW5kIHZlcnRpY2FsbHkgd2l0aGluIHRoZSBmcmFtZS4gVGhlIHNwYWNlIGluIHRoZSB0b3AgYW5kIGJvdHRvbSBvciBpbiB0aGUgc2lkZXMgb2ZcbiAgICAgKiB0aGUgZnJhbWUgd2lsbCBiZSBlbXB0eSBkZXBlbmRpbmcgb24gdGhlIGRpZmZlcmVuY2UgaW4gYXNwZWN0IHJhdGlvIGJldHdlZW4gdGhlIGltYWdlIGFuZCB0aGUgZnJhbWUuXG4gICAgICovXG4gICAgSW1hZ2VGaXRbSW1hZ2VGaXRbXCJjb250YWluXCJdID0gMV0gPSBcImNvbnRhaW5cIjtcbiAgICAvKipcbiAgICAgKiBUaGUgaW1hZ2UgaXMgc2NhbGVkIHRvIG1haW50YWluIGl0cyBhc3BlY3QgcmF0aW8gd2hpbGUgZmlsbGluZyB0aGUgZnJhbWUuIFBvcnRpb25zIG9mIHRoZSBpbWFnZSB3aWxsIGJlIGNyb3BwZWRcbiAgICAgKiBmcm9tIHRoZSB0b3AgYW5kIGJvdHRvbSwgb3IgdGhlIHNpZGVzLCBkZXBlbmRpbmcgb24gdGhlIGRpZmZlcmVuY2UgaW4gYXNwZWN0IHJhdGlvIGJldHdlZW4gdGhlIGltYWdlIGFuZCB0aGUgZnJhbWUuXG4gICAgICovXG4gICAgSW1hZ2VGaXRbSW1hZ2VGaXRbXCJjb3ZlclwiXSA9IDJdID0gXCJjb3ZlclwiO1xuICAgIC8qKlxuICAgICAqIE5laXRoZXIgdGhlIGltYWdlIG5vciB0aGUgZnJhbWUgYXJlIHNjYWxlZC4gSWYgdGhlaXIgc2l6ZXMgZG8gbm90IG1hdGNoLCB0aGUgaW1hZ2Ugd2lsbCBlaXRoZXIgYmUgY3JvcHBlZCBvciB0aGVcbiAgICAgKiBmcmFtZSB3aWxsIGhhdmUgZW1wdHkgc3BhY2UuXG4gICAgICovXG4gICAgSW1hZ2VGaXRbSW1hZ2VGaXRbXCJub25lXCJdID0gM10gPSBcIm5vbmVcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgaW1hZ2Ugd2lsbCBiZSBjZW50ZXJlZCBob3Jpem9udGFsbHkgYW5kIHZlcnRpY2FsbHkgd2l0aGluIHRoZSBmcmFtZSBhbmQgbWFpbnRhaW5zIGl0cyBhc3BlY3QgcmF0aW8uIEl0IHdpbGxcbiAgICAgKiBiZWhhdmUgYXMgSW1hZ2VGaXQuY2VudGVyIGlmIHRoZSBpbWFnZSdzIG5hdHVyYWwgaGVpZ2h0IG9yIHdpZHRoIGlzIGxlc3MgdGhhbiB0aGUgSW1hZ2UgZnJhbWUncyBoZWlnaHQgb3Igd2lkdGgsXG4gICAgICogYnV0IGlmIGJvdGggbmF0dXJhbCBoZWlnaHQgYW5kIHdpZHRoIGFyZSBsYXJnZXIgdGhhbiB0aGUgZnJhbWUgaXQgd2lsbCBiZWhhdmUgYXMgSW1hZ2VGaXQuY292ZXIuXG4gICAgICovXG4gICAgSW1hZ2VGaXRbSW1hZ2VGaXRbXCJjZW50ZXJDb3ZlclwiXSA9IDRdID0gXCJjZW50ZXJDb3ZlclwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBpbWFnZSB3aWxsIGJlIGNlbnRlcmVkIGhvcml6b250YWxseSBhbmQgdmVydGljYWxseSB3aXRoaW4gdGhlIGZyYW1lIGFuZCBtYWludGFpbnMgaXRzIGFzcGVjdCByYXRpby4gSXQgd2lsbFxuICAgICAqIGJlaGF2ZSBhcyBJbWFnZUZpdC5jZW50ZXIgaWYgdGhlIGltYWdlJ3MgbmF0dXJhbCBoZWlnaHQgYW5kIHdpZHRoIGlzIGxlc3MgdGhhbiB0aGUgSW1hZ2UgZnJhbWUncyBoZWlnaHQgYW5kIHdpZHRoLFxuICAgICAqIGJ1dCBpZiBlaXRoZXIgbmF0dXJhbCBoZWlnaHQgb3Igd2lkdGggYXJlIGxhcmdlciB0aGFuIHRoZSBmcmFtZSBpdCB3aWxsIGJlaGF2ZSBhcyBJbWFnZUZpdC5jb250YWluLlxuICAgICAqL1xuICAgIEltYWdlRml0W0ltYWdlRml0W1wiY2VudGVyQ29udGFpblwiXSA9IDVdID0gXCJjZW50ZXJDb250YWluXCI7XG59KShJbWFnZUZpdCB8fCAoSW1hZ2VGaXQgPSB7fSkpO1xuLyoqXG4gKiBUaGUgY292ZXIgc3R5bGUgdG8gYmUgdXNlZCBvbiB0aGUgaW1hZ2VcbiAqIHtAZG9jQ2F0ZWdvcnkgSW1hZ2V9XG4gKi9cbmV4cG9ydCB2YXIgSW1hZ2VDb3ZlclN0eWxlO1xuKGZ1bmN0aW9uIChJbWFnZUNvdmVyU3R5bGUpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgaW1hZ2Ugd2lsbCBiZSBzaG93biBhdCAxMDAlIGhlaWdodCBvZiBjb250YWluZXIgYW5kIHRoZSB3aWR0aCB3aWxsIGJlIHNjYWxlZCBhY2NvcmRpbmdseVxuICAgICAqL1xuICAgIEltYWdlQ292ZXJTdHlsZVtJbWFnZUNvdmVyU3R5bGVbXCJsYW5kc2NhcGVcIl0gPSAwXSA9IFwibGFuZHNjYXBlXCI7XG4gICAgLyoqXG4gICAgICogVGhlIGltYWdlIHdpbGwgYmUgc2hvd24gYXQgMTAwJSB3aWR0aCBvZiBjb250YWluZXIgYW5kIHRoZSBoZWlnaHQgd2lsbCBiZSBzY2FsZWQgYWNjb3JkaW5nbHlcbiAgICAgKi9cbiAgICBJbWFnZUNvdmVyU3R5bGVbSW1hZ2VDb3ZlclN0eWxlW1wicG9ydHJhaXRcIl0gPSAxXSA9IFwicG9ydHJhaXRcIjtcbn0pKEltYWdlQ292ZXJTdHlsZSB8fCAoSW1hZ2VDb3ZlclN0eWxlID0ge30pKTtcbi8qKlxuICoge0Bkb2NDYXRlZ29yeSBJbWFnZX1cbiAqL1xuZXhwb3J0IHZhciBJbWFnZUxvYWRTdGF0ZTtcbihmdW5jdGlvbiAoSW1hZ2VMb2FkU3RhdGUpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgaW1hZ2UgaGFzIG5vdCB5ZXQgYmVlbiBsb2FkZWQsIGFuZCB0aGVyZSBpcyBubyBlcnJvciB5ZXQuXG4gICAgICovXG4gICAgSW1hZ2VMb2FkU3RhdGVbSW1hZ2VMb2FkU3RhdGVbXCJub3RMb2FkZWRcIl0gPSAwXSA9IFwibm90TG9hZGVkXCI7XG4gICAgLyoqXG4gICAgICogVGhlIGltYWdlIGhhcyBiZWVuIGxvYWRlZCBzdWNjZXNzZnVsbHkuXG4gICAgICovXG4gICAgSW1hZ2VMb2FkU3RhdGVbSW1hZ2VMb2FkU3RhdGVbXCJsb2FkZWRcIl0gPSAxXSA9IFwibG9hZGVkXCI7XG4gICAgLyoqXG4gICAgICogQW4gZXJyb3IgaGFzIGJlZW4gZW5jb3VudGVyZWQgd2hpbGUgbG9hZGluZyB0aGUgaW1hZ2UuXG4gICAgICovXG4gICAgSW1hZ2VMb2FkU3RhdGVbSW1hZ2VMb2FkU3RhdGVbXCJlcnJvclwiXSA9IDJdID0gXCJlcnJvclwiO1xuICAgIC8qKlxuICAgICAqIERlcHJlY2F0ZWQgYXQgdjEuMy42LCB0byByZXBsYWNlIHRoZSBzcmMgaW4gY2FzZSBvZiBlcnJvcnMsIHVzZSBgb25Mb2FkaW5nU3RhdGVDaGFuZ2VgIGluc3RlYWRcbiAgICAgKiBhbmQgcmVyZW5kZXIgdGhlIEltYWdlIHdpdGggYSBkaWZmZXJlbmNlIHNyYy5cbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgYG9uTG9hZGluZ1N0YXRlQ2hhbmdlYCBpbnN0ZWFkXG4gICAgICogYW5kIHJlcmVuZGVyIHRoZSBJbWFnZSB3aXRoIGEgZGlmZmVyZW5jZSBzcmMuXG4gICAgICovXG4gICAgSW1hZ2VMb2FkU3RhdGVbSW1hZ2VMb2FkU3RhdGVbXCJlcnJvckxvYWRlZFwiXSA9IDNdID0gXCJlcnJvckxvYWRlZFwiO1xufSkoSW1hZ2VMb2FkU3RhdGUgfHwgKEltYWdlTG9hZFN0YXRlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUltYWdlLnR5cGVzLmpzLm1hcCIsImltcG9ydCB7IG1lcmdlU3R5bGVTZXRzIH0gZnJvbSAnLi4vLi4vU3R5bGluZyc7XG4vKiogQ2xhc3MgbmFtZXMgdXNlZCBpbiB0aGVtZWFibGUgYW5kIG5vbi10aGVtZWFibGUgSWNvbiBjb21wb25lbnRzICovXG5leHBvcnQgdmFyIGNsYXNzTmFtZXMgPSBtZXJnZVN0eWxlU2V0cyh7XG4gICAgcm9vdDoge1xuICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICB9LFxuICAgIHBsYWNlaG9sZGVyOiBbXG4gICAgICAgICdtcy1JY29uLXBsYWNlSG9sZGVyJyxcbiAgICAgICAge1xuICAgICAgICAgICAgd2lkdGg6ICcxZW0nLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgaW1hZ2U6IFtcbiAgICAgICAgJ21zLUljb24taW1hZ2VDb250YWluZXInLFxuICAgICAgICB7XG4gICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIH0sXG4gICAgXSxcbn0pO1xuLyoqIENsYXNzIG5hbWUgdXNlZCBvbmx5IGluIG5vbi10aGVtZWFibGUgSWNvbiBjb21wb25lbnRzICovXG5leHBvcnQgdmFyIE1TX0lDT04gPSAnbXMtSWNvbic7XG5leHBvcnQgdmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsIGljb25DbGFzc05hbWUgPSBwcm9wcy5pY29uQ2xhc3NOYW1lLCBpc1BsYWNlaG9sZGVyID0gcHJvcHMuaXNQbGFjZWhvbGRlciwgaXNJbWFnZSA9IHByb3BzLmlzSW1hZ2UsIHN0eWxlcyA9IHByb3BzLnN0eWxlcztcbiAgICByZXR1cm4ge1xuICAgICAgICByb290OiBbXG4gICAgICAgICAgICBpc1BsYWNlaG9sZGVyICYmIGNsYXNzTmFtZXMucGxhY2Vob2xkZXIsXG4gICAgICAgICAgICBjbGFzc05hbWVzLnJvb3QsXG4gICAgICAgICAgICBpc0ltYWdlICYmIGNsYXNzTmFtZXMuaW1hZ2UsXG4gICAgICAgICAgICBpY29uQ2xhc3NOYW1lLFxuICAgICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICAgICAgc3R5bGVzICYmIHN0eWxlcy5yb290LFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICBzdHlsZXMgJiYgc3R5bGVzLmltYWdlQ29udGFpbmVyLFxuICAgICAgICBdLFxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SWNvbi5zdHlsZXMuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNsYXNzTmFtZXMsIE1TX0lDT04gfSBmcm9tICcuL0ljb24uc3R5bGVzJztcbmltcG9ydCB7IGNzcywgZ2V0TmF0aXZlUHJvcHMsIGh0bWxFbGVtZW50UHJvcGVydGllcywgbWVtb2l6ZUZ1bmN0aW9uIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IGdldEljb24gfSBmcm9tICcuLi8uLi9TdHlsaW5nJztcbmV4cG9ydCB2YXIgZ2V0SWNvbkNvbnRlbnQgPSBtZW1vaXplRnVuY3Rpb24oZnVuY3Rpb24gKGljb25OYW1lKSB7XG4gICAgdmFyIF9hID0gZ2V0SWNvbihpY29uTmFtZSkgfHwge1xuICAgICAgICBzdWJzZXQ6IHt9LFxuICAgICAgICBjb2RlOiB1bmRlZmluZWQsXG4gICAgfSwgY29kZSA9IF9hLmNvZGUsIHN1YnNldCA9IF9hLnN1YnNldDtcbiAgICBpZiAoIWNvZGUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGNoaWxkcmVuOiBjb2RlLFxuICAgICAgICBpY29uQ2xhc3NOYW1lOiBzdWJzZXQuY2xhc3NOYW1lLFxuICAgICAgICBmb250RmFtaWx5OiBzdWJzZXQuZm9udEZhY2UgJiYgc3Vic2V0LmZvbnRGYWNlLmZvbnRGYW1pbHksXG4gICAgfTtcbn0sIHVuZGVmaW5lZCwgdHJ1ZSAvKmlnbm9yZU51bGxPclVuZGVmaW5lZFJlc3VsdCAqLyk7XG4vKipcbiAqIEZhc3QgaWNvbiBjb21wb25lbnQgd2hpY2ggb25seSBzdXBwb3J0cyBmb250IGdseXBocyAobm90IGltYWdlcykgYW5kIGNhbid0IGJlIHRhcmdldGVkIGJ5IGN1c3RvbWl6YXRpb25zLlxuICogVG8gc3R5bGUgdGhlIGljb24sIHVzZSBgY2xhc3NOYW1lYCBvciByZWZlcmVuY2UgYG1zLUljb25gIGluIENTUy5cbiAqIHtAZG9jQ2F0ZWdvcnkgSWNvbn1cbiAqL1xuZXhwb3J0IHZhciBGb250SWNvbiA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBpY29uTmFtZSA9IHByb3BzLmljb25OYW1lLCBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsIF9hID0gcHJvcHMuc3R5bGUsIHN0eWxlID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2E7XG4gICAgdmFyIGljb25Db250ZW50ID0gZ2V0SWNvbkNvbnRlbnQoaWNvbk5hbWUpIHx8IHt9O1xuICAgIHZhciBpY29uQ2xhc3NOYW1lID0gaWNvbkNvbnRlbnQuaWNvbkNsYXNzTmFtZSwgY2hpbGRyZW4gPSBpY29uQ29udGVudC5jaGlsZHJlbiwgZm9udEZhbWlseSA9IGljb25Db250ZW50LmZvbnRGYW1pbHk7XG4gICAgdmFyIG5hdGl2ZVByb3BzID0gZ2V0TmF0aXZlUHJvcHMocHJvcHMsIGh0bWxFbGVtZW50UHJvcGVydGllcyk7XG4gICAgdmFyIGNvbnRhaW5lclByb3BzID0gcHJvcHNbJ2FyaWEtbGFiZWwnXVxuICAgICAgICA/IHt9XG4gICAgICAgIDoge1xuICAgICAgICAgICAgcm9sZTogJ3ByZXNlbnRhdGlvbicsXG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiB0cnVlLFxuICAgICAgICB9O1xuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImlcIiwgX19hc3NpZ24oeyBcImRhdGEtaWNvbi1uYW1lXCI6IGljb25OYW1lIH0sIGNvbnRhaW5lclByb3BzLCBuYXRpdmVQcm9wcywgeyBjbGFzc05hbWU6IGNzcyhNU19JQ09OLCBjbGFzc05hbWVzLnJvb3QsIGljb25DbGFzc05hbWUsICFpY29uTmFtZSAmJiBjbGFzc05hbWVzLnBsYWNlaG9sZGVyLCBjbGFzc05hbWUpLCBcbiAgICAgICAgLy8gQXBwbHkgdGhlIGZvbnQgZmFtaWx5IHRoaXMgd2F5IHRvIGVuc3VyZSBpdCBkb2Vzbid0IGdldCBvdmVycmlkZGVuIGJ5IEZhYnJpYyBDb3JlIG1zLUljb24gc3R5bGVzXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvZmx1ZW50dWkvaXNzdWVzLzEwNDQ5XG4gICAgICAgIHN0eWxlOiBfX2Fzc2lnbih7IGZvbnRGYW1pbHk6IGZvbnRGYW1pbHkgfSwgc3R5bGUpIH0pLCBjaGlsZHJlbikpO1xufTtcbi8qKlxuICogTWVtb2l6ZWQgaGVscGVyIGZvciByZW5kZXJpbmcgYSBGb250SWNvbi5cbiAqIEBwYXJhbSBpY29uTmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBpY29uIHRvIHVzZSBmcm9tIHRoZSBpY29uIGZvbnQuXG4gKiBAcGFyYW0gY2xhc3NOYW1lIC0gQ2xhc3MgbmFtZSBmb3Igc3R5bGluZyB0aGUgaWNvbi5cbiAqIEBwYXJhbSBhcmlhTGFiZWwgLSBMYWJlbCBmb3IgdGhlIGljb24gZm9yIHRoZSBiZW5lZml0IG9mIHNjcmVlbiByZWFkZXJzLlxuICoge0Bkb2NDYXRlZ29yeSBJY29ufVxuICovXG5leHBvcnQgdmFyIGdldEZvbnRJY29uID0gbWVtb2l6ZUZ1bmN0aW9uKGZ1bmN0aW9uIChpY29uTmFtZSwgY2xhc3NOYW1lLCBhcmlhTGFiZWwpIHtcbiAgICByZXR1cm4gRm9udEljb24oeyBpY29uTmFtZTogaWNvbk5hbWUsIGNsYXNzTmFtZTogY2xhc3NOYW1lLCAnYXJpYS1sYWJlbCc6IGFyaWFMYWJlbCB9KTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Rm9udEljb24uanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2xhc3NOYW1lc0Z1bmN0aW9uLCBnZXROYXRpdmVQcm9wcywgaW1nUHJvcGVydGllcyB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBJbWFnZUNvdmVyU3R5bGUsIEltYWdlRml0LCBJbWFnZUxvYWRTdGF0ZSB9IGZyb20gJy4vSW1hZ2UudHlwZXMnO1xudmFyIGdldENsYXNzTmFtZXMgPSBjbGFzc05hbWVzRnVuY3Rpb24oKTtcbnZhciBLRVlfUFJFRklYID0gJ2ZhYnJpY0ltYWdlJztcbnZhciBJbWFnZUJhc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEltYWdlQmFzZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJbWFnZUJhc2UocHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICAgIC8vIE1ha2UgYW4gaW5pdGlhbCBhc3N1bXB0aW9uIGFib3V0IHRoZSBpbWFnZSBsYXlvdXQgdW50aWwgd2UgY2FuXG4gICAgICAgIC8vIGNoZWNrIHRoZSByZW5kZXJlZCBlbGVtZW50LiBUaGUgdmFsdWUgaGVyZSBvbmx5IHRha2VzIGVmZmVjdCB3aGVuXG4gICAgICAgIC8vIHNob3VsZFN0YXJ0VmlzaWJsZSBpcyB0cnVlLlxuICAgICAgICBfdGhpcy5fY292ZXJTdHlsZSA9IEltYWdlQ292ZXJTdHlsZS5wb3J0cmFpdDtcbiAgICAgICAgX3RoaXMuX2ltYWdlRWxlbWVudCA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgICAgICBfdGhpcy5fZnJhbWVFbGVtZW50ID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgICAgIF90aGlzLl9vbkltYWdlTG9hZGVkID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgc3JjID0gX2Euc3JjLCBvbkxvYWQgPSBfYS5vbkxvYWQ7XG4gICAgICAgICAgICBpZiAob25Mb2FkKSB7XG4gICAgICAgICAgICAgICAgb25Mb2FkKGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLl9jb21wdXRlQ292ZXJTdHlsZShfdGhpcy5wcm9wcyk7XG4gICAgICAgICAgICBpZiAoc3JjKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBsb2FkU3RhdGU6IEltYWdlTG9hZFN0YXRlLmxvYWRlZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uSW1hZ2VFcnJvciA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKF90aGlzLnByb3BzLm9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5vbkVycm9yKGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBsb2FkU3RhdGU6IEltYWdlTG9hZFN0YXRlLmVycm9yLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgbG9hZFN0YXRlOiBJbWFnZUxvYWRTdGF0ZS5ub3RMb2FkZWQsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgSW1hZ2VCYXNlLnByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIChuZXh0UHJvcHMpIHtcbiAgICAgICAgaWYgKG5leHRQcm9wcy5zcmMgIT09IHRoaXMucHJvcHMuc3JjKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBsb2FkU3RhdGU6IEltYWdlTG9hZFN0YXRlLm5vdExvYWRlZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc3RhdGUubG9hZFN0YXRlID09PSBJbWFnZUxvYWRTdGF0ZS5sb2FkZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbXB1dGVDb3ZlclN0eWxlKG5leHRQcm9wcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEltYWdlQmFzZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrSW1hZ2VMb2FkZWQoKTtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMub25Mb2FkaW5nU3RhdGVDaGFuZ2UgJiYgcHJldlN0YXRlLmxvYWRTdGF0ZSAhPT0gdGhpcy5zdGF0ZS5sb2FkU3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25Mb2FkaW5nU3RhdGVDaGFuZ2UodGhpcy5zdGF0ZS5sb2FkU3RhdGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbWFnZUJhc2UucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGltYWdlUHJvcHMgPSBnZXROYXRpdmVQcm9wcyh0aGlzLnByb3BzLCBpbWdQcm9wZXJ0aWVzLCBbXG4gICAgICAgICAgICAnd2lkdGgnLFxuICAgICAgICAgICAgJ2hlaWdodCcsXG4gICAgICAgIF0pO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBzcmMgPSBfYS5zcmMsIGFsdCA9IF9hLmFsdCwgd2lkdGggPSBfYS53aWR0aCwgaGVpZ2h0ID0gX2EuaGVpZ2h0LCBzaG91bGRGYWRlSW4gPSBfYS5zaG91bGRGYWRlSW4sIHNob3VsZFN0YXJ0VmlzaWJsZSA9IF9hLnNob3VsZFN0YXJ0VmlzaWJsZSwgY2xhc3NOYW1lID0gX2EuY2xhc3NOYW1lLCBpbWFnZUZpdCA9IF9hLmltYWdlRml0LCByb2xlID0gX2Eucm9sZSwgbWF4aW1pemVGcmFtZSA9IF9hLm1heGltaXplRnJhbWUsIHN0eWxlcyA9IF9hLnN0eWxlcywgdGhlbWUgPSBfYS50aGVtZTtcbiAgICAgICAgdmFyIGxvYWRTdGF0ZSA9IHRoaXMuc3RhdGUubG9hZFN0YXRlO1xuICAgICAgICB2YXIgY292ZXJTdHlsZSA9IHRoaXMucHJvcHMuY292ZXJTdHlsZSAhPT0gdW5kZWZpbmVkID8gdGhpcy5wcm9wcy5jb3ZlclN0eWxlIDogdGhpcy5fY292ZXJTdHlsZTtcbiAgICAgICAgdmFyIGNsYXNzTmFtZXMgPSBnZXRDbGFzc05hbWVzKHN0eWxlcywge1xuICAgICAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgIG1heGltaXplRnJhbWU6IG1heGltaXplRnJhbWUsXG4gICAgICAgICAgICBzaG91bGRGYWRlSW46IHNob3VsZEZhZGVJbixcbiAgICAgICAgICAgIHNob3VsZFN0YXJ0VmlzaWJsZTogc2hvdWxkU3RhcnRWaXNpYmxlLFxuICAgICAgICAgICAgaXNMb2FkZWQ6IGxvYWRTdGF0ZSA9PT0gSW1hZ2VMb2FkU3RhdGUubG9hZGVkIHx8XG4gICAgICAgICAgICAgICAgKGxvYWRTdGF0ZSA9PT0gSW1hZ2VMb2FkU3RhdGUubm90TG9hZGVkICYmIHRoaXMucHJvcHMuc2hvdWxkU3RhcnRWaXNpYmxlKSxcbiAgICAgICAgICAgIGlzTGFuZHNjYXBlOiBjb3ZlclN0eWxlID09PSBJbWFnZUNvdmVyU3R5bGUubGFuZHNjYXBlLFxuICAgICAgICAgICAgaXNDZW50ZXI6IGltYWdlRml0ID09PSBJbWFnZUZpdC5jZW50ZXIsXG4gICAgICAgICAgICBpc0NlbnRlckNvbnRhaW46IGltYWdlRml0ID09PSBJbWFnZUZpdC5jZW50ZXJDb250YWluLFxuICAgICAgICAgICAgaXNDZW50ZXJDb3ZlcjogaW1hZ2VGaXQgPT09IEltYWdlRml0LmNlbnRlckNvdmVyLFxuICAgICAgICAgICAgaXNDb250YWluOiBpbWFnZUZpdCA9PT0gSW1hZ2VGaXQuY29udGFpbixcbiAgICAgICAgICAgIGlzQ292ZXI6IGltYWdlRml0ID09PSBJbWFnZUZpdC5jb3ZlcixcbiAgICAgICAgICAgIGlzTm9uZTogaW1hZ2VGaXQgPT09IEltYWdlRml0Lm5vbmUsXG4gICAgICAgICAgICBpc0Vycm9yOiBsb2FkU3RhdGUgPT09IEltYWdlTG9hZFN0YXRlLmVycm9yLFxuICAgICAgICAgICAgaXNOb3RJbWFnZUZpdDogaW1hZ2VGaXQgPT09IHVuZGVmaW5lZCxcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIElmIGltYWdlIGRpbWVuc2lvbnMgYXJlbid0IHNwZWNpZmllZCwgdGhlIG5hdHVyYWwgc2l6ZSBvZiB0aGUgaW1hZ2UgaXMgdXNlZC5cbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzLnJvb3QsIHN0eWxlOiB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfSwgcmVmOiB0aGlzLl9mcmFtZUVsZW1lbnQgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIiwgX19hc3NpZ24oe30sIGltYWdlUHJvcHMsIHsgb25Mb2FkOiB0aGlzLl9vbkltYWdlTG9hZGVkLCBvbkVycm9yOiB0aGlzLl9vbkltYWdlRXJyb3IsIGtleTogS0VZX1BSRUZJWCArIHRoaXMucHJvcHMuc3JjIHx8ICcnLCBjbGFzc05hbWU6IGNsYXNzTmFtZXMuaW1hZ2UsIHJlZjogdGhpcy5faW1hZ2VFbGVtZW50LCBzcmM6IHNyYywgYWx0OiBhbHQsIHJvbGU6IHJvbGUgfSkpKSk7XG4gICAgfTtcbiAgICBJbWFnZUJhc2UucHJvdG90eXBlLl9jaGVja0ltYWdlTG9hZGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3JjID0gdGhpcy5wcm9wcy5zcmM7XG4gICAgICAgIHZhciBsb2FkU3RhdGUgPSB0aGlzLnN0YXRlLmxvYWRTdGF0ZTtcbiAgICAgICAgaWYgKGxvYWRTdGF0ZSA9PT0gSW1hZ2VMb2FkU3RhdGUubm90TG9hZGVkKSB7XG4gICAgICAgICAgICAvLyB0ZXN0aW5nIGlmIG5hdHVyYWxXaWR0aCBhbmQgbmF0dXJhbEhlaWdodCBhcmUgZ3JlYXRlciB0aGFuIHplcm8gaXMgYmV0dGVyIHRoYW4gY2hlY2tpbmdcbiAgICAgICAgICAgIC8vIC5jb21wbGV0ZSwgYmVjYXVzZSAuY29tcGxldGUgd2lsbCBhbHNvIGJlIHNldCB0byB0cnVlIGlmIHRoZSBpbWFnZSBicmVha3MuIEhvd2V2ZXIsXG4gICAgICAgICAgICAvLyBmb3Igc29tZSBicm93c2VycywgU1ZHIGltYWdlcyBkbyBub3QgaGF2ZSBhIG5hdHVyYWxXaWR0aCBvciBuYXR1cmFsSGVpZ2h0LCBzbyBmYWxsIGJhY2tcbiAgICAgICAgICAgIC8vIHRvIGNoZWNraW5nIC5jb21wbGV0ZSBmb3IgdGhlc2UgaW1hZ2VzLlxuICAgICAgICAgICAgdmFyIGlzTG9hZGVkID0gdGhpcy5faW1hZ2VFbGVtZW50LmN1cnJlbnRcbiAgICAgICAgICAgICAgICA/IChzcmMgJiYgdGhpcy5faW1hZ2VFbGVtZW50LmN1cnJlbnQubmF0dXJhbFdpZHRoID4gMCAmJiB0aGlzLl9pbWFnZUVsZW1lbnQuY3VycmVudC5uYXR1cmFsSGVpZ2h0ID4gMCkgfHxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuX2ltYWdlRWxlbWVudC5jdXJyZW50LmNvbXBsZXRlICYmIEltYWdlQmFzZS5fc3ZnUmVnZXgudGVzdChzcmMpKVxuICAgICAgICAgICAgICAgIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoaXNMb2FkZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb21wdXRlQ292ZXJTdHlsZSh0aGlzLnByb3BzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgbG9hZFN0YXRlOiBJbWFnZUxvYWRTdGF0ZS5sb2FkZWQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEltYWdlQmFzZS5wcm90b3R5cGUuX2NvbXB1dGVDb3ZlclN0eWxlID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHZhciBpbWFnZUZpdCA9IHByb3BzLmltYWdlRml0LCB3aWR0aCA9IHByb3BzLndpZHRoLCBoZWlnaHQgPSBwcm9wcy5oZWlnaHQ7XG4gICAgICAgIC8vIERvIG5vdCBjb21wdXRlIGNvdmVyIHN0eWxlIGlmIGl0IHdhcyBhbHJlYWR5IHNwZWNpZmllZCBpbiBwcm9wc1xuICAgICAgICBpZiAoKGltYWdlRml0ID09PSBJbWFnZUZpdC5jb3ZlciB8fFxuICAgICAgICAgICAgaW1hZ2VGaXQgPT09IEltYWdlRml0LmNvbnRhaW4gfHxcbiAgICAgICAgICAgIGltYWdlRml0ID09PSBJbWFnZUZpdC5jZW50ZXJDb250YWluIHx8XG4gICAgICAgICAgICBpbWFnZUZpdCA9PT0gSW1hZ2VGaXQuY2VudGVyQ292ZXIpICYmXG4gICAgICAgICAgICB0aGlzLnByb3BzLmNvdmVyU3R5bGUgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgdGhpcy5faW1hZ2VFbGVtZW50LmN1cnJlbnQgJiZcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lRWxlbWVudC5jdXJyZW50KSB7XG4gICAgICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIGRlc2lyZWQgcmF0aW8gdXNpbmcgdGhlIHdpZHRoIGFuZCBoZWlnaHQgcHJvcHMuXG4gICAgICAgICAgICAvLyBJZiB0aG9zZSBwcm9wcyBhcmVuJ3QgYXZhaWxhYmxlLCBtZWFzdXJlIG1lYXN1cmUgdGhlIGZyYW1lLlxuICAgICAgICAgICAgdmFyIGRlc2lyZWRSYXRpbyA9IHZvaWQgMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2lkdGggPT09ICdudW1iZXInICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGhlaWdodCA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgICAgICAgICBpbWFnZUZpdCAhPT0gSW1hZ2VGaXQuY2VudGVyQ29udGFpbiAmJlxuICAgICAgICAgICAgICAgIGltYWdlRml0ICE9PSBJbWFnZUZpdC5jZW50ZXJDb3Zlcikge1xuICAgICAgICAgICAgICAgIGRlc2lyZWRSYXRpbyA9IHdpZHRoIC8gaGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVzaXJlZFJhdGlvID0gdGhpcy5fZnJhbWVFbGVtZW50LmN1cnJlbnQuY2xpZW50V2lkdGggLyB0aGlzLl9mcmFtZUVsZW1lbnQuY3VycmVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBFeGFtaW5lIHRoZSBzb3VyY2UgaW1hZ2UgdG8gZGV0ZXJtaW5lIGl0cyBvcmlnaW5hbCByYXRpby5cbiAgICAgICAgICAgIHZhciBuYXR1cmFsUmF0aW8gPSB0aGlzLl9pbWFnZUVsZW1lbnQuY3VycmVudC5uYXR1cmFsV2lkdGggLyB0aGlzLl9pbWFnZUVsZW1lbnQuY3VycmVudC5uYXR1cmFsSGVpZ2h0O1xuICAgICAgICAgICAgLy8gU2hvdWxkIHdlIGNyb3AgZnJvbSB0aGUgdG9wIG9yIHRoZSBzaWRlcz9cbiAgICAgICAgICAgIGlmIChuYXR1cmFsUmF0aW8gPiBkZXNpcmVkUmF0aW8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb3ZlclN0eWxlID0gSW1hZ2VDb3ZlclN0eWxlLmxhbmRzY2FwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvdmVyU3R5bGUgPSBJbWFnZUNvdmVyU3R5bGUucG9ydHJhaXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEltYWdlQmFzZS5kZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIHNob3VsZEZhZGVJbjogdHJ1ZSxcbiAgICB9O1xuICAgIEltYWdlQmFzZS5fc3ZnUmVnZXggPSAvXFwuc3ZnJC9pO1xuICAgIHJldHVybiBJbWFnZUJhc2U7XG59KFJlYWN0LkNvbXBvbmVudCkpO1xuZXhwb3J0IHsgSW1hZ2VCYXNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JbWFnZS5iYXNlLmpzLm1hcCIsImltcG9ydCB7IEFuaW1hdGlvbkNsYXNzTmFtZXMsIGdldEdsb2JhbENsYXNzTmFtZXMgfSBmcm9tICcuLi8uLi9TdHlsaW5nJztcbmltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG52YXIgR2xvYmFsQ2xhc3NOYW1lcyA9IHtcbiAgICByb290OiAnbXMtSW1hZ2UnLFxuICAgIHJvb3RNYXhpbWl6ZUZyYW1lOiAnbXMtSW1hZ2UtLW1heGltaXplRnJhbWUnLFxuICAgIGltYWdlOiAnbXMtSW1hZ2UtaW1hZ2UnLFxuICAgIGltYWdlQ2VudGVyOiAnbXMtSW1hZ2UtaW1hZ2UtLWNlbnRlcicsXG4gICAgaW1hZ2VDb250YWluOiAnbXMtSW1hZ2UtaW1hZ2UtLWNvbnRhaW4nLFxuICAgIGltYWdlQ292ZXI6ICdtcy1JbWFnZS1pbWFnZS0tY292ZXInLFxuICAgIGltYWdlQ2VudGVyQ29udGFpbjogJ21zLUltYWdlLWltYWdlLS1jZW50ZXJDb250YWluJyxcbiAgICBpbWFnZUNlbnRlckNvdmVyOiAnbXMtSW1hZ2UtaW1hZ2UtLWNlbnRlckNvdmVyJyxcbiAgICBpbWFnZU5vbmU6ICdtcy1JbWFnZS1pbWFnZS0tbm9uZScsXG4gICAgaW1hZ2VMYW5kc2NhcGU6ICdtcy1JbWFnZS1pbWFnZS0tbGFuZHNjYXBlJyxcbiAgICBpbWFnZVBvcnRyYWl0OiAnbXMtSW1hZ2UtaW1hZ2UtLXBvcnRyYWl0Jyxcbn07XG5leHBvcnQgdmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsIHdpZHRoID0gcHJvcHMud2lkdGgsIGhlaWdodCA9IHByb3BzLmhlaWdodCwgbWF4aW1pemVGcmFtZSA9IHByb3BzLm1heGltaXplRnJhbWUsIGlzTG9hZGVkID0gcHJvcHMuaXNMb2FkZWQsIHNob3VsZEZhZGVJbiA9IHByb3BzLnNob3VsZEZhZGVJbiwgc2hvdWxkU3RhcnRWaXNpYmxlID0gcHJvcHMuc2hvdWxkU3RhcnRWaXNpYmxlLCBpc0xhbmRzY2FwZSA9IHByb3BzLmlzTGFuZHNjYXBlLCBpc0NlbnRlciA9IHByb3BzLmlzQ2VudGVyLCBpc0NvbnRhaW4gPSBwcm9wcy5pc0NvbnRhaW4sIGlzQ292ZXIgPSBwcm9wcy5pc0NvdmVyLCBpc0NlbnRlckNvbnRhaW4gPSBwcm9wcy5pc0NlbnRlckNvbnRhaW4sIGlzQ2VudGVyQ292ZXIgPSBwcm9wcy5pc0NlbnRlckNvdmVyLCBpc05vbmUgPSBwcm9wcy5pc05vbmUsIGlzRXJyb3IgPSBwcm9wcy5pc0Vycm9yLCBpc05vdEltYWdlRml0ID0gcHJvcHMuaXNOb3RJbWFnZUZpdCwgdGhlbWUgPSBwcm9wcy50aGVtZTtcbiAgICB2YXIgY2xhc3NOYW1lcyA9IGdldEdsb2JhbENsYXNzTmFtZXMoR2xvYmFsQ2xhc3NOYW1lcywgdGhlbWUpO1xuICAgIHZhciBJbWFnZUZpdFN0eWxlcyA9IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIGxlZnQ6ICc1MCUgLyogQG5vZmxpcCAqLycsXG4gICAgICAgIHRvcDogJzUwJScsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtNTAlLC01MCUpJyxcbiAgICB9O1xuICAgIC8vIEN1dCB0aGUgbXVzdGFyZCB1c2luZyBtc01heFRvdWNoUG9pbnRzIHRvIGRldGVjdCBJRTExIHdoaWNoIGRvZXMgbm90IHN1cHBvcnQgQ1NTIG9iamVjdC1maXRcbiAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgdmFyIHN1cHBvcnRzT2JqZWN0Rml0ID0gd2luZG93ICE9PSB1bmRlZmluZWQgJiYgd2luZG93Lm5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzID09PSB1bmRlZmluZWQ7XG4gICAgdmFyIGZhbGxiYWNrT2JqZWN0Rml0U3R5bGVzID0gKGlzQ29udGFpbiAmJiBpc0xhbmRzY2FwZSkgfHwgKGlzQ292ZXIgJiYgIWlzTGFuZHNjYXBlKVxuICAgICAgICA/IHsgd2lkdGg6ICcxMDAlJywgaGVpZ2h0OiAnYXV0bycgfVxuICAgICAgICA6IHsgd2lkdGg6ICdhdXRvJywgaGVpZ2h0OiAnMTAwJScgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICByb290OiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLnJvb3QsXG4gICAgICAgICAgICB0aGVtZS5mb250cy5tZWRpdW0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1heGltaXplRnJhbWUgJiYgW1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZXMucm9vdE1heGltaXplRnJhbWUsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGlzTG9hZGVkICYmIHNob3VsZEZhZGVJbiAmJiAhc2hvdWxkU3RhcnRWaXNpYmxlICYmIEFuaW1hdGlvbkNsYXNzTmFtZXMuZmFkZUluNDAwLFxuICAgICAgICAgICAgKGlzQ2VudGVyIHx8IGlzQ29udGFpbiB8fCBpc0NvdmVyIHx8IGlzQ2VudGVyQ29udGFpbiB8fCBpc0NlbnRlckNvdmVyKSAmJiB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBdLFxuICAgICAgICBpbWFnZTogW1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5pbWFnZSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNMb2FkZWQgJiYgW1xuICAgICAgICAgICAgICAgICdpcy1sb2FkZWQnLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGlzQ2VudGVyICYmIFtjbGFzc05hbWVzLmltYWdlQ2VudGVyLCBJbWFnZUZpdFN0eWxlc10sXG4gICAgICAgICAgICBpc0NvbnRhaW4gJiYgW1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZXMuaW1hZ2VDb250YWluLFxuICAgICAgICAgICAgICAgIHN1cHBvcnRzT2JqZWN0Rml0ICYmIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdEZpdDogJ2NvbnRhaW4nLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgIXN1cHBvcnRzT2JqZWN0Rml0ICYmIGZhbGxiYWNrT2JqZWN0Rml0U3R5bGVzLFxuICAgICAgICAgICAgICAgIEltYWdlRml0U3R5bGVzLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGlzQ292ZXIgJiYgW1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZXMuaW1hZ2VDb3ZlcixcbiAgICAgICAgICAgICAgICBzdXBwb3J0c09iamVjdEZpdCAmJiB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICBvYmplY3RGaXQ6ICdjb3ZlcicsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAhc3VwcG9ydHNPYmplY3RGaXQgJiYgZmFsbGJhY2tPYmplY3RGaXRTdHlsZXMsXG4gICAgICAgICAgICAgICAgSW1hZ2VGaXRTdHlsZXMsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaXNDZW50ZXJDb250YWluICYmIFtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWVzLmltYWdlQ2VudGVyQ29udGFpbixcbiAgICAgICAgICAgICAgICBpc0xhbmRzY2FwZSAmJiB7XG4gICAgICAgICAgICAgICAgICAgIG1heFdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAhaXNMYW5kc2NhcGUgJiYge1xuICAgICAgICAgICAgICAgICAgICBtYXhIZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIEltYWdlRml0U3R5bGVzLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGlzQ2VudGVyQ292ZXIgJiYgW1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZXMuaW1hZ2VDZW50ZXJDb3ZlcixcbiAgICAgICAgICAgICAgICBpc0xhbmRzY2FwZSAmJiB7XG4gICAgICAgICAgICAgICAgICAgIG1heEhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgIWlzTGFuZHNjYXBlICYmIHtcbiAgICAgICAgICAgICAgICAgICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIEltYWdlRml0U3R5bGVzLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGlzTm9uZSAmJiBbXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lcy5pbWFnZU5vbmUsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGlzTm90SW1hZ2VGaXQgJiYgW1xuICAgICAgICAgICAgICAgICEhd2lkdGggJiZcbiAgICAgICAgICAgICAgICAgICAgIWhlaWdodCAmJiB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgIXdpZHRoICYmXG4gICAgICAgICAgICAgICAgICAgICEhaGVpZ2h0ICYmIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAhIXdpZHRoICYmXG4gICAgICAgICAgICAgICAgICAgICEhaGVpZ2h0ICYmIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpc0xhbmRzY2FwZSAmJiBjbGFzc05hbWVzLmltYWdlTGFuZHNjYXBlLFxuICAgICAgICAgICAgIWlzTGFuZHNjYXBlICYmIGNsYXNzTmFtZXMuaW1hZ2VQb3J0cmFpdCxcbiAgICAgICAgICAgICFpc0xvYWRlZCAmJiAnaXMtbm90TG9hZGVkJyxcbiAgICAgICAgICAgIHNob3VsZEZhZGVJbiAmJiAnaXMtZmFkZUluJyxcbiAgICAgICAgICAgIGlzRXJyb3IgJiYgJ2lzLWVycm9yJyxcbiAgICAgICAgXSxcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUltYWdlLnN0eWxlcy5qcy5tYXAiLCJpbXBvcnQgeyBzdHlsZWQgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgSW1hZ2VCYXNlIH0gZnJvbSAnLi9JbWFnZS5iYXNlJztcbmltcG9ydCB7IGdldFN0eWxlcyB9IGZyb20gJy4vSW1hZ2Uuc3R5bGVzJztcbmV4cG9ydCB2YXIgSW1hZ2UgPSBzdHlsZWQoSW1hZ2VCYXNlLCBnZXRTdHlsZXMsIHVuZGVmaW5lZCwge1xuICAgIHNjb3BlOiAnSW1hZ2UnLFxufSwgdHJ1ZSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JbWFnZS5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJY29uVHlwZSB9IGZyb20gJy4vSWNvbi50eXBlcyc7XG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uL0ltYWdlL0ltYWdlJztcbmltcG9ydCB7IEltYWdlTG9hZFN0YXRlIH0gZnJvbSAnLi4vSW1hZ2UvSW1hZ2UudHlwZXMnO1xuaW1wb3J0IHsgZ2V0TmF0aXZlUHJvcHMsIGh0bWxFbGVtZW50UHJvcGVydGllcywgY2xhc3NOYW1lc0Z1bmN0aW9uIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IGdldEljb25Db250ZW50IH0gZnJvbSAnLi9Gb250SWNvbic7XG52YXIgZ2V0Q2xhc3NOYW1lcyA9IGNsYXNzTmFtZXNGdW5jdGlvbih7XG4gICAgLy8gSWNvbiBpcyB1c2VkIGEgbG90IGJ5IG90aGVyIGNvbXBvbmVudHMuXG4gICAgLy8gSXQncyBsaWtlbHkgdG8gc2VlIGV4cGVjdGVkIGNhc2VzIHdoaWNoIHBhc3MgZGlmZmVyZW50IGNsYXNzTmFtZSB0byB0aGUgSWNvbi5cbiAgICAvLyBUaGVyZWZvcmUgc2V0dGluZyBhIGxhcmdlciBjYWNoZSBzaXplLlxuICAgIGNhY2hlU2l6ZTogMTAwLFxufSk7XG52YXIgSWNvbkJhc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEljb25CYXNlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEljb25CYXNlKHByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fb25JbWFnZUxvYWRpbmdTdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICAgICAgaWYgKF90aGlzLnByb3BzLmltYWdlUHJvcHMgJiYgX3RoaXMucHJvcHMuaW1hZ2VQcm9wcy5vbkxvYWRpbmdTdGF0ZUNoYW5nZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnByb3BzLmltYWdlUHJvcHMub25Mb2FkaW5nU3RhdGVDaGFuZ2Uoc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlID09PSBJbWFnZUxvYWRTdGF0ZS5lcnJvcikge1xuICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgaW1hZ2VMb2FkRXJyb3I6IHRydWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgaW1hZ2VMb2FkRXJyb3I6IGZhbHNlLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEljb25CYXNlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSwgc3R5bGVzID0gX2Euc3R5bGVzLCBpY29uTmFtZSA9IF9hLmljb25OYW1lLCBpbWFnZUVycm9yQXMgPSBfYS5pbWFnZUVycm9yQXMsIHRoZW1lID0gX2EudGhlbWU7XG4gICAgICAgIHZhciBpc1BsYWNlaG9sZGVyID0gdHlwZW9mIGljb25OYW1lID09PSAnc3RyaW5nJyAmJiBpY29uTmFtZS5sZW5ndGggPT09IDA7XG4gICAgICAgIHZhciBpc0ltYWdlID0gXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAhIXRoaXMucHJvcHMuaW1hZ2VQcm9wcyB8fCB0aGlzLnByb3BzLmljb25UeXBlID09PSBJY29uVHlwZS5pbWFnZSB8fCB0aGlzLnByb3BzLmljb25UeXBlID09PSBJY29uVHlwZS5JbWFnZTtcbiAgICAgICAgdmFyIGljb25Db250ZW50ID0gZ2V0SWNvbkNvbnRlbnQoaWNvbk5hbWUpIHx8IHt9O1xuICAgICAgICB2YXIgaWNvbkNsYXNzTmFtZSA9IGljb25Db250ZW50Lmljb25DbGFzc05hbWUsIGljb25Db250ZW50Q2hpbGRyZW4gPSBpY29uQ29udGVudC5jaGlsZHJlbjtcbiAgICAgICAgdmFyIGNsYXNzTmFtZXMgPSBnZXRDbGFzc05hbWVzKHN0eWxlcywge1xuICAgICAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgICAgICBpY29uQ2xhc3NOYW1lOiBpY29uQ2xhc3NOYW1lLFxuICAgICAgICAgICAgaXNJbWFnZTogaXNJbWFnZSxcbiAgICAgICAgICAgIGlzUGxhY2Vob2xkZXI6IGlzUGxhY2Vob2xkZXIsXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgUm9vdFR5cGUgPSBpc0ltYWdlID8gJ3NwYW4nIDogJ2knO1xuICAgICAgICB2YXIgbmF0aXZlUHJvcHMgPSBnZXROYXRpdmVQcm9wcyh0aGlzLnByb3BzLCBodG1sRWxlbWVudFByb3BlcnRpZXMsIFtcbiAgICAgICAgICAgICdhcmlhLWxhYmVsJyxcbiAgICAgICAgXSk7XG4gICAgICAgIHZhciBpbWFnZUxvYWRFcnJvciA9IHRoaXMuc3RhdGUuaW1hZ2VMb2FkRXJyb3I7XG4gICAgICAgIHZhciBpbWFnZVByb3BzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMucHJvcHMuaW1hZ2VQcm9wcyksIHsgb25Mb2FkaW5nU3RhdGVDaGFuZ2U6IHRoaXMuX29uSW1hZ2VMb2FkaW5nU3RhdGVDaGFuZ2UgfSk7XG4gICAgICAgIHZhciBJbWFnZVR5cGUgPSAoaW1hZ2VMb2FkRXJyb3IgJiYgaW1hZ2VFcnJvckFzKSB8fCBJbWFnZTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIHZhciBhcmlhTGFiZWwgPSB0aGlzLnByb3BzWydhcmlhLWxhYmVsJ10gfHwgdGhpcy5wcm9wcy5hcmlhTGFiZWw7XG4gICAgICAgIHZhciBjb250YWluZXJQcm9wcyA9IGFyaWFMYWJlbFxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgJ2FyaWEtbGFiZWwnOiBhcmlhTGFiZWwsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiB0aGlzLnByb3BzWydhcmlhLWxhYmVsbGVkYnknXSB8fCBpbWFnZVByb3BzWydhcmlhLWxhYmVsbGVkYnknXSA/IGZhbHNlIDogdHJ1ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChSb290VHlwZSwgX19hc3NpZ24oeyBcImRhdGEtaWNvbi1uYW1lXCI6IGljb25OYW1lIH0sIGNvbnRhaW5lclByb3BzLCBuYXRpdmVQcm9wcywgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMucm9vdCB9KSwgaXNJbWFnZSA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW1hZ2VUeXBlLCBfX2Fzc2lnbih7fSwgaW1hZ2VQcm9wcykpIDogY2hpbGRyZW4gfHwgaWNvbkNvbnRlbnRDaGlsZHJlbikpO1xuICAgIH07XG4gICAgcmV0dXJuIEljb25CYXNlO1xufShSZWFjdC5Db21wb25lbnQpKTtcbmV4cG9ydCB7IEljb25CYXNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JY29uLmJhc2UuanMubWFwIiwiaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IEljb25CYXNlIH0gZnJvbSAnLi9JY29uLmJhc2UnO1xuaW1wb3J0IHsgZ2V0U3R5bGVzIH0gZnJvbSAnLi9JY29uLnN0eWxlcyc7XG4vKipcbiAqIExlZ2FjeSBJY29uIGNvbXBvbmVudCB3aGljaCBjYW4gYmUgdGFyZ2V0ZWQgYnkgY3VzdG9taXphdGlvbi4gSXQncyByZWNvbW1lbmRlZCB0byB1c2UgYEZvbnRJY29uYFxuICogb3IgYEltYWdlSWNvbmAgaW5zdGVhZCwgZXNwZWNpYWxseSBpbiBzY2VuYXJpb3Mgd2hlcmUgcmVuZGVyaW5nIHBlcmZvcm1hbmNlIGlzIGltcG9ydGFudC5cbiAqIHtAZG9jQ2F0ZWdvcnkgSWNvbn1cbiAqL1xuZXhwb3J0IHZhciBJY29uID0gc3R5bGVkKEljb25CYXNlLCBnZXRTdHlsZXMsIHVuZGVmaW5lZCwge1xuICAgIHNjb3BlOiAnSWNvbicsXG59LCB0cnVlKTtcbkljb24uZGlzcGxheU5hbWUgPSAnSWNvbic7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JY29uLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG4vKipcbiAqIE1lcmdlIG5ldyBhbmQgb2xkIHNldHRpbmdzLCBnaXZpbmcgcHJpb3JpdHkgdG8gbmV3IHNldHRpbmdzLlxuICogTmV3IHNldHRpbmdzIGlzIG9wdGlvbmFsIGluIHdoaWNoIGNhc2Ugb2xkU2V0dGluZ3MgaXMgcmV0dXJuZWQgYXMtaXMuXG4gKiBAcGFyYW0gb2xkU2V0dGluZ3MgLSBPbGQgc2V0dGluZ3MgdG8gZmFsbCBiYWNrIHRvLlxuICogQHBhcmFtIG5ld1NldHRpbmdzIC0gTmV3IHNldHRpbmdzIHRoYXQgd2lsbCBiZSBtZXJnZWQgb3ZlciBvbGRTZXR0aW5ncy5cbiAqIEByZXR1cm5zIE1lcmdlZCBzZXR0aW5ncy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlU2V0dGluZ3Mob2xkU2V0dGluZ3MsIG5ld1NldHRpbmdzKSB7XG4gICAgaWYgKG9sZFNldHRpbmdzID09PSB2b2lkIDApIHsgb2xkU2V0dGluZ3MgPSB7fTsgfVxuICAgIHZhciBtZXJnZVNldHRpbmdzV2l0aCA9IF9pc1NldHRpbmdzRnVuY3Rpb24obmV3U2V0dGluZ3MpID8gbmV3U2V0dGluZ3MgOiBfc2V0dGluZ3NNZXJnZVdpdGgobmV3U2V0dGluZ3MpO1xuICAgIHJldHVybiBtZXJnZVNldHRpbmdzV2l0aChvbGRTZXR0aW5ncyk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VTY29wZWRTZXR0aW5ncyhvbGRTZXR0aW5ncywgbmV3U2V0dGluZ3MpIHtcbiAgICBpZiAob2xkU2V0dGluZ3MgPT09IHZvaWQgMCkgeyBvbGRTZXR0aW5ncyA9IHt9OyB9XG4gICAgdmFyIG1lcmdlU2V0dGluZ3NXaXRoID0gX2lzU2V0dGluZ3NGdW5jdGlvbihuZXdTZXR0aW5ncykgPyBuZXdTZXR0aW5ncyA6IF9zY29wZWRTZXR0aW5nc01lcmdlV2l0aChuZXdTZXR0aW5ncyk7XG4gICAgcmV0dXJuIG1lcmdlU2V0dGluZ3NXaXRoKG9sZFNldHRpbmdzKTtcbn1cbmZ1bmN0aW9uIF9pc1NldHRpbmdzRnVuY3Rpb24oc2V0dGluZ3MpIHtcbiAgICByZXR1cm4gdHlwZW9mIHNldHRpbmdzID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gX3NldHRpbmdzTWVyZ2VXaXRoKG5ld1NldHRpbmdzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzZXR0aW5ncykgeyByZXR1cm4gKG5ld1NldHRpbmdzID8gX19hc3NpZ24oX19hc3NpZ24oe30sIHNldHRpbmdzKSwgbmV3U2V0dGluZ3MpIDogc2V0dGluZ3MpOyB9O1xufVxuZnVuY3Rpb24gX3Njb3BlZFNldHRpbmdzTWVyZ2VXaXRoKHNjb3BlZFNldHRpbmdzRnJvbVByb3BzKSB7XG4gICAgaWYgKHNjb3BlZFNldHRpbmdzRnJvbVByb3BzID09PSB2b2lkIDApIHsgc2NvcGVkU2V0dGluZ3NGcm9tUHJvcHMgPSB7fTsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAob2xkU2NvcGVkU2V0dGluZ3MpIHtcbiAgICAgICAgdmFyIG5ld1Njb3BlZFNldHRpbmdzID0gX19hc3NpZ24oe30sIG9sZFNjb3BlZFNldHRpbmdzKTtcbiAgICAgICAgZm9yICh2YXIgc2NvcGVOYW1lIGluIHNjb3BlZFNldHRpbmdzRnJvbVByb3BzKSB7XG4gICAgICAgICAgICBpZiAoc2NvcGVkU2V0dGluZ3NGcm9tUHJvcHMuaGFzT3duUHJvcGVydHkoc2NvcGVOYW1lKSkge1xuICAgICAgICAgICAgICAgIG5ld1Njb3BlZFNldHRpbmdzW3Njb3BlTmFtZV0gPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb2xkU2NvcGVkU2V0dGluZ3Nbc2NvcGVOYW1lXSksIHNjb3BlZFNldHRpbmdzRnJvbVByb3BzW3Njb3BlTmFtZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdTY29wZWRTZXR0aW5ncztcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VTZXR0aW5ncy5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEN1c3RvbWl6YXRpb25zIH0gZnJvbSAnLi9DdXN0b21pemF0aW9ucyc7XG5pbXBvcnQgeyBDdXN0b21pemVyQ29udGV4dCB9IGZyb20gJy4vQ3VzdG9taXplckNvbnRleHQnO1xuaW1wb3J0IHsgbWVyZ2VDdXN0b21pemF0aW9ucyB9IGZyb20gJy4vbWVyZ2VDdXN0b21pemF0aW9ucyc7XG4vKipcbiAqIFRoZSBDdXN0b21pemVyIGNvbXBvbmVudCBhbGxvd3MgZm9yIGRlZmF1bHQgcHJvcHMgdG8gYmUgbWl4ZWQgaW50byBjb21wb25lbnRzIHdoaWNoXG4gKiBhcmUgZGVjb3JhdGVkIHdpdGggdGhlIGN1c3RvbWl6YWJsZSgpIGRlY29yYXRvciwgb3IgdXNlIHRoZSBzdHlsZWQgSE9DLiBUaGlzIGVuYWJsZXNcbiAqIGluamVjdGlvbiBzY2VuYXJpb3MgbGlrZTpcbiAqXG4gKiAxLiByZW5kZXIgc3ZnIGljb25zIGluc3RlYWQgb2YgdGhlIGljb24gZm9udCB3aXRoaW4gYWxsIGJ1dHRvbnNcbiAqIDIuIGluamVjdCBhIGN1c3RvbSB0aGVtZSBvYmplY3QgaW50byBhIGNvbXBvbmVudFxuICpcbiAqIFByb3BzIGFyZSBwcm92aWRlZCB2aWEgdGhlIHNldHRpbmdzIHByb3Agd2hpY2ggc2hvdWxkIGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nOlxuICogLSBBIGpzb24gbWFwIHdoaWNoIGNvbnRhaW5zIDEgb3IgbW9yZSBuYW1lL3ZhbHVlIHBhaXJzIHJlcHJlc2VudGluZyBpbmplY3RhYmxlIHByb3BzLlxuICogLSBBIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgdGhlIGN1cnJlbnQgc2V0dGluZ3MgYW5kIHJldHVybnMgdGhlIG5ldyBvbmVzIHRoYXQgYXBwbHkgdG8gdGhlIHNjb3BlXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgQ3VzdG9taXplciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ3VzdG9taXplciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDdXN0b21pemVyKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX29uQ3VzdG9taXphdGlvbkNoYW5nZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmZvcmNlVXBkYXRlKCk7IH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ3VzdG9taXplci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIEN1c3RvbWl6YXRpb25zLm9ic2VydmUodGhpcy5fb25DdXN0b21pemF0aW9uQ2hhbmdlKTtcbiAgICB9O1xuICAgIEN1c3RvbWl6ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBDdXN0b21pemF0aW9ucy51bm9ic2VydmUodGhpcy5fb25DdXN0b21pemF0aW9uQ2hhbmdlKTtcbiAgICB9O1xuICAgIEN1c3RvbWl6ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGNvbnRleHRUcmFuc2Zvcm0gPSB0aGlzLnByb3BzLmNvbnRleHRUcmFuc2Zvcm07XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChDdXN0b21pemVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKHBhcmVudENvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBuZXdDb250ZXh0ID0gbWVyZ2VDdXN0b21pemF0aW9ucyhfdGhpcy5wcm9wcywgcGFyZW50Q29udGV4dCk7XG4gICAgICAgICAgICBpZiAoY29udGV4dFRyYW5zZm9ybSkge1xuICAgICAgICAgICAgICAgIG5ld0NvbnRleHQgPSBjb250ZXh0VHJhbnNmb3JtKG5ld0NvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ3VzdG9taXplckNvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IG5ld0NvbnRleHQgfSwgX3RoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICByZXR1cm4gQ3VzdG9taXplcjtcbn0oUmVhY3QuQ29tcG9uZW50KSk7XG5leHBvcnQgeyBDdXN0b21pemVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DdXN0b21pemVyLmpzLm1hcCIsImltcG9ydCB7IG1lcmdlU2V0dGluZ3MsIG1lcmdlU2NvcGVkU2V0dGluZ3MgfSBmcm9tICcuL21lcmdlU2V0dGluZ3MnO1xuLyoqXG4gKiBNZXJnZSBwcm9wcyBhbmQgY3VzdG9taXphdGlvbnMgZ2l2aW5nIHByaW9yaXR5IHRvIHByb3BzIG92ZXIgY29udGV4dC5cbiAqIE5PVEU6IFRoaXMgZnVuY3Rpb24gd2lsbCBhbHdheXMgcGVyZm9ybSBtdWx0aXBsZSBtZXJnZSBvcGVyYXRpb25zLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICogQHBhcmFtIHByb3BzIC0gTmV3IHNldHRpbmdzIHRvIG1lcmdlIGluLlxuICogQHBhcmFtIHBhcmVudENvbnRleHQgLSBDb250ZXh0IGNvbnRhaW5pbmcgY3VycmVudCBzZXR0aW5ncy5cbiAqIEByZXR1cm5zIE1lcmdlZCBjdXN0b21pemF0aW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQ3VzdG9taXphdGlvbnMocHJvcHMsIHBhcmVudENvbnRleHQpIHtcbiAgICB2YXIgX2EgPSAocGFyZW50Q29udGV4dCB8fCB7fSkuY3VzdG9taXphdGlvbnMsIGN1c3RvbWl6YXRpb25zID0gX2EgPT09IHZvaWQgMCA/IHsgc2V0dGluZ3M6IHt9LCBzY29wZWRTZXR0aW5nczoge30gfSA6IF9hO1xuICAgIHJldHVybiB7XG4gICAgICAgIGN1c3RvbWl6YXRpb25zOiB7XG4gICAgICAgICAgICBzZXR0aW5nczogbWVyZ2VTZXR0aW5ncyhjdXN0b21pemF0aW9ucy5zZXR0aW5ncywgcHJvcHMuc2V0dGluZ3MpLFxuICAgICAgICAgICAgc2NvcGVkU2V0dGluZ3M6IG1lcmdlU2NvcGVkU2V0dGluZ3MoY3VzdG9taXphdGlvbnMuc2NvcGVkU2V0dGluZ3MsIHByb3BzLnNjb3BlZFNldHRpbmdzKSxcbiAgICAgICAgICAgIGluQ3VzdG9taXplckNvbnRleHQ6IHRydWUsXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlQ3VzdG9taXphdGlvbnMuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ3VzdG9taXplciwgZ2V0TmF0aXZlUHJvcHMsIGRpdlByb3BlcnRpZXMsIGNsYXNzTmFtZXNGdW5jdGlvbiwgZ2V0RG9jdW1lbnQsIG1lbW9pemVGdW5jdGlvbiwgZ2V0UlRMLCBGb2N1c1JlY3RzLCB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBjcmVhdGVUaGVtZSB9IGZyb20gJy4uLy4uL1N0eWxpbmcnO1xudmFyIGdldENsYXNzTmFtZXMgPSBjbGFzc05hbWVzRnVuY3Rpb24oKTtcbnZhciBnZXRGYWJyaWNUaGVtZSA9IG1lbW9pemVGdW5jdGlvbihmdW5jdGlvbiAodGhlbWUsIGlzUlRMKSB7IHJldHVybiBjcmVhdGVUaGVtZShfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhlbWUpLCB7IHJ0bDogaXNSVEwgfSkpOyB9KTtcbnZhciBnZXREaXIgPSBmdW5jdGlvbiAodGhlbWUsIGRpcikge1xuICAgIHZhciBjb250ZXh0RGlyID0gZ2V0UlRMKHRoZW1lKSA/ICdydGwnIDogJ2x0cic7XG4gICAgdmFyIHBhZ2VEaXIgPSBnZXRSVEwoKSA/ICdydGwnIDogJ2x0cic7XG4gICAgdmFyIGNvbXBvbmVudERpciA9IGRpciA/IGRpciA6IGNvbnRleHREaXI7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy8gSWYgRmFicmljIGRpciAhPT0gY29udGV4dERpclxuICAgICAgICAvLyBPciBJZiBjb250ZXh0RGlyICE9PSBwYWdlRGlyXG4gICAgICAgIC8vIFRoZW4gd2UgbmVlZCB0byBzZXQgZGlyIG9mIHRoZSBGYWJyaWMgcm9vdFxuICAgICAgICByb290RGlyOiBjb21wb25lbnREaXIgIT09IGNvbnRleHREaXIgfHwgY29tcG9uZW50RGlyICE9PSBwYWdlRGlyID8gY29tcG9uZW50RGlyIDogZGlyLFxuICAgICAgICAvLyBJZiBkaXIgIT09IGNvbnRleHREaXIgfHwgcGFnZURpclxuICAgICAgICAvLyB0aGVuIHNldCBjb250ZXh0dWFsIHRoZW1lIGFyb3VuZCBjb250ZW50XG4gICAgICAgIG5lZWRzVGhlbWU6IGNvbXBvbmVudERpciAhPT0gY29udGV4dERpcixcbiAgICB9O1xufTtcbnZhciBGYWJyaWNCYXNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhGYWJyaWNCYXNlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZhYnJpY0Jhc2UoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fcm9vdEVsZW1lbnQgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICAgICAgX3RoaXMuX3JlbW92ZUNsYXNzTmFtZUZyb21Cb2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEZhYnJpY0Jhc2UucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgX2IgPSBfYS5hcywgUm9vdCA9IF9iID09PSB2b2lkIDAgPyAnZGl2JyA6IF9iLCB0aGVtZSA9IF9hLnRoZW1lLCBkaXIgPSBfYS5kaXI7XG4gICAgICAgIHZhciBjbGFzc05hbWVzID0gdGhpcy5fZ2V0Q2xhc3NOYW1lcygpO1xuICAgICAgICB2YXIgZGl2UHJvcHMgPSBnZXROYXRpdmVQcm9wcyh0aGlzLnByb3BzLCBkaXZQcm9wZXJ0aWVzLCBbJ2RpciddKTtcbiAgICAgICAgdmFyIF9jID0gZ2V0RGlyKHRoZW1lLCBkaXIpLCByb290RGlyID0gX2Mucm9vdERpciwgbmVlZHNUaGVtZSA9IF9jLm5lZWRzVGhlbWU7XG4gICAgICAgIHZhciByZW5kZXJlZENvbnRlbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFJvb3QsIF9fYXNzaWduKHsgZGlyOiByb290RGlyIH0sIGRpdlByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcy5yb290LCByZWY6IHRoaXMuX3Jvb3RFbGVtZW50IH0pKTtcbiAgICAgICAgaWYgKG5lZWRzVGhlbWUpIHtcbiAgICAgICAgICAgIHJlbmRlcmVkQ29udGVudCA9IChSZWFjdC5jcmVhdGVFbGVtZW50KEN1c3RvbWl6ZXIsIHsgc2V0dGluZ3M6IHsgdGhlbWU6IGdldEZhYnJpY1RoZW1lKHRoZW1lLCBkaXIgPT09ICdydGwnKSB9IH0sIHJlbmRlcmVkQ29udGVudCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCxcbiAgICAgICAgICAgIHJlbmRlcmVkQ29udGVudCxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9jdXNSZWN0cywgeyByb290UmVmOiB0aGlzLl9yb290RWxlbWVudCB9KSkpO1xuICAgIH07XG4gICAgRmFicmljQmFzZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2FkZENsYXNzTmFtZVRvQm9keSgpO1xuICAgIH07XG4gICAgRmFicmljQmFzZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZW1vdmVDbGFzc05hbWVGcm9tQm9keSkge1xuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlQ2xhc3NOYW1lRnJvbUJvZHkoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRmFicmljQmFzZS5wcm90b3R5cGUuX2dldENsYXNzTmFtZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSwgdGhlbWUgPSBfYS50aGVtZSwgYXBwbHlUaGVtZSA9IF9hLmFwcGx5VGhlbWUsIHN0eWxlcyA9IF9hLnN0eWxlcztcbiAgICAgICAgdmFyIGNsYXNzTmFtZXMgPSBnZXRDbGFzc05hbWVzKHN0eWxlcywge1xuICAgICAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICAgICAgYXBwbHlUaGVtZTogYXBwbHlUaGVtZSxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNsYXNzTmFtZXM7XG4gICAgfTtcbiAgICBGYWJyaWNCYXNlLnByb3RvdHlwZS5fYWRkQ2xhc3NOYW1lVG9Cb2R5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5hcHBseVRoZW1lVG9Cb2R5KSB7XG4gICAgICAgICAgICB2YXIgY2xhc3NOYW1lc18xID0gdGhpcy5fZ2V0Q2xhc3NOYW1lcygpO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnREb2NfMSA9IGdldERvY3VtZW50KHRoaXMuX3Jvb3RFbGVtZW50LmN1cnJlbnQpO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnREb2NfMSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnREb2NfMS5ib2R5LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lc18xLmJvZHlUaGVtZWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZUNsYXNzTmFtZUZyb21Cb2R5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50RG9jXzEuYm9keS5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZXNfMS5ib2R5VGhlbWVkKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRmFicmljQmFzZTtcbn0oUmVhY3QuQ29tcG9uZW50KSk7XG5leHBvcnQgeyBGYWJyaWNCYXNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1GYWJyaWMuYmFzZS5qcy5tYXAiLCJpbXBvcnQgeyBnZXRHbG9iYWxDbGFzc05hbWVzIH0gZnJvbSAnLi4vLi4vU3R5bGluZyc7XG52YXIgaW5oZXJpdEZvbnQgPSB7IGZvbnRGYW1pbHk6ICdpbmhlcml0JyB9O1xudmFyIEdsb2JhbENsYXNzTmFtZXMgPSB7XG4gICAgcm9vdDogJ21zLUZhYnJpYycsXG4gICAgYm9keVRoZW1lZDogJ21zLUZhYnJpYy1ib2R5VGhlbWVkJyxcbn07XG5leHBvcnQgdmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciB0aGVtZSA9IHByb3BzLnRoZW1lLCBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsIGFwcGx5VGhlbWUgPSBwcm9wcy5hcHBseVRoZW1lO1xuICAgIHZhciBjbGFzc05hbWVzID0gZ2V0R2xvYmFsQ2xhc3NOYW1lcyhHbG9iYWxDbGFzc05hbWVzLCB0aGVtZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcm9vdDogW1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5yb290LFxuICAgICAgICAgICAgdGhlbWUuZm9udHMubWVkaXVtLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLm5ldXRyYWxQcmltYXJ5LFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAnJiBidXR0b24nOiBpbmhlcml0Rm9udCxcbiAgICAgICAgICAgICAgICAgICAgJyYgaW5wdXQnOiBpbmhlcml0Rm9udCxcbiAgICAgICAgICAgICAgICAgICAgJyYgdGV4dGFyZWEnOiBpbmhlcml0Rm9udCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIGFwcGx5IHRoZW1lIHRvIG9ubHkgaWYgYXBwbHlUaGVtZSBpcyB0cnVlXG4gICAgICAgICAgICBhcHBseVRoZW1lICYmIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogdGhlbWUuc2VtYW50aWNDb2xvcnMuYm9keVRleHQsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5zZW1hbnRpY0NvbG9ycy5ib2R5QmFja2dyb3VuZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIF0sXG4gICAgICAgIGJvZHlUaGVtZWQ6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnNlbWFudGljQ29sb3JzLmJvZHlCYWNrZ3JvdW5kLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZhYnJpYy5zdHlsZXMuanMubWFwIiwiaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IEZhYnJpY0Jhc2UgfSBmcm9tICcuL0ZhYnJpYy5iYXNlJztcbmltcG9ydCB7IGdldFN0eWxlcyB9IGZyb20gJy4vRmFicmljLnN0eWxlcyc7XG5leHBvcnQgdmFyIEZhYnJpYyA9IHN0eWxlZChGYWJyaWNCYXNlLCBnZXRTdHlsZXMsIHVuZGVmaW5lZCwge1xuICAgIHNjb3BlOiAnRmFicmljJyxcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RmFicmljLmpzLm1hcCIsIi8qKlxuICogU2V0cyB0aGUgdmlydHVhbCBwYXJlbnQgb2YgYW4gZWxlbWVudC5cbiAqIFBhc3MgYHVuZGVmaW5lZGAgYXMgdGhlIGBwYXJlbnRgIHRvIGNsZWFyIHRoZSB2aXJ0dWFsIHBhcmVudC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRWaXJ0dWFsUGFyZW50KGNoaWxkLCBwYXJlbnQpIHtcbiAgICB2YXIgdmlydHVhbENoaWxkID0gY2hpbGQ7XG4gICAgdmFyIHZpcnR1YWxQYXJlbnQgPSBwYXJlbnQ7XG4gICAgaWYgKCF2aXJ0dWFsQ2hpbGQuX3ZpcnR1YWwpIHtcbiAgICAgICAgdmlydHVhbENoaWxkLl92aXJ0dWFsID0ge1xuICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICB9O1xuICAgIH1cbiAgICB2YXIgb2xkUGFyZW50ID0gdmlydHVhbENoaWxkLl92aXJ0dWFsLnBhcmVudDtcbiAgICBpZiAob2xkUGFyZW50ICYmIG9sZFBhcmVudCAhPT0gcGFyZW50KSB7XG4gICAgICAgIC8vIFJlbW92ZSB0aGUgY2hpbGQgZnJvbSBpdHMgb2xkIHBhcmVudC5cbiAgICAgICAgdmFyIGluZGV4ID0gb2xkUGFyZW50Ll92aXJ0dWFsLmNoaWxkcmVuLmluZGV4T2YodmlydHVhbENoaWxkKTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIG9sZFBhcmVudC5fdmlydHVhbC5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZpcnR1YWxDaGlsZC5fdmlydHVhbC5wYXJlbnQgPSB2aXJ0dWFsUGFyZW50IHx8IHVuZGVmaW5lZDtcbiAgICBpZiAodmlydHVhbFBhcmVudCkge1xuICAgICAgICBpZiAoIXZpcnR1YWxQYXJlbnQuX3ZpcnR1YWwpIHtcbiAgICAgICAgICAgIHZpcnR1YWxQYXJlbnQuX3ZpcnR1YWwgPSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB2aXJ0dWFsUGFyZW50Ll92aXJ0dWFsLmNoaWxkcmVuLnB1c2godmlydHVhbENoaWxkKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXRWaXJ0dWFsUGFyZW50LmpzLm1hcCIsIi8qKlxuICogQWxsb3dzIHlvdSB0byBob2lzdCBzdGF0aWMgZnVuY3Rpb25zIGluIGNvbXBvbmVudHMuXG4gKiBDcmVhdGVkIGZvciB0aGUgcHVycG9zZSBvZiBmaXhpbmcgYnJva2VuIHN0YXRpYyBmdW5jdGlvbnMgaW4gY2xhc3Nlc1xuICogdGhhdCB1dGlsaXplIGRlY29yYXRvcnMuXG4gKlxuICogQHB1YmxpY1xuICogQHBhcmFtIHNvdXJjZSAtIFRoZSBvYmplY3Qgd2hlcmUgdGhlIG1ldGhvZHMgYXJlIGhvaXN0ZWQgZnJvbS5cbiAqIEBwYXJhbSBkZXN0IC0gVGhlIG9iamVjdCB0byBob2lzdCB0aGUgbWV0aG9kcyBvbnRvLlxuICogQHJldHVybnMgVGhlIGRlc3Qgb2JqZWN0IHdpdGggbWV0aG9kcyBhZGRlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gaG9pc3RTdGF0aWNzKHNvdXJjZSwgZGVzdCkge1xuICAgIGZvciAodmFyIG5hbWVfMSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShuYW1lXzEpKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgZGVzdFtuYW1lXzFdID0gc291cmNlW25hbWVfMV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlc3Q7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ob2lzdFN0YXRpY3MuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ3VzdG9taXphdGlvbnMgfSBmcm9tICcuL0N1c3RvbWl6YXRpb25zJztcbmltcG9ydCB7IGhvaXN0U3RhdGljcyB9IGZyb20gJy4uL2hvaXN0U3RhdGljcyc7XG5pbXBvcnQgeyBDdXN0b21pemVyQ29udGV4dCB9IGZyb20gJy4vQ3VzdG9taXplckNvbnRleHQnO1xuaW1wb3J0IHsgY29uY2F0U3R5bGVTZXRzIH0gZnJvbSAnQHVpZmFicmljL21lcmdlLXN0eWxlcyc7XG5leHBvcnQgZnVuY3Rpb24gY3VzdG9taXphYmxlKHNjb3BlLCBmaWVsZHMsIGNvbmNhdFN0eWxlcykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGN1c3RvbWl6YWJsZUZhY3RvcnkoQ29tcG9zZWRDb21wb25lbnQpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgcmVzdWx0Q2xhc3MgPSAoX2EgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgX19leHRlbmRzKENvbXBvbmVudFdpdGhJbmplY3RlZFByb3BzLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIENvbXBvbmVudFdpdGhJbmplY3RlZFByb3BzKHByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3R5bGVDYWNoZSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fb25TZXR0aW5nQ2hhbmdlZCA9IF90aGlzLl9vblNldHRpbmdDaGFuZ2VkLmJpbmQoX3RoaXMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIENvbXBvbmVudFdpdGhJbmplY3RlZFByb3BzLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgQ3VzdG9taXphdGlvbnMub2JzZXJ2ZSh0aGlzLl9vblNldHRpbmdDaGFuZ2VkKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIENvbXBvbmVudFdpdGhJbmplY3RlZFByb3BzLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgQ3VzdG9taXphdGlvbnMudW5vYnNlcnZlKHRoaXMuX29uU2V0dGluZ0NoYW5nZWQpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgQ29tcG9uZW50V2l0aEluamVjdGVkUHJvcHMucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KEN1c3RvbWl6ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRQcm9wcyA9IEN1c3RvbWl6YXRpb25zLmdldFNldHRpbmdzKGZpZWxkcywgc2NvcGUsIGNvbnRleHQuY3VzdG9taXphdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb21wb25lbnRQcm9wcyA9IF90aGlzLnByb3BzO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgZGVmYXVsdFByb3BzLnN0eWxlcyBpcyBhIGZ1bmN0aW9uLCBldmFsdWF0ZSBpdCBiZWZvcmUgY2FsbGluZyBjb25jYXRTdHlsZVNldHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0UHJvcHMuc3R5bGVzICYmIHR5cGVvZiBkZWZhdWx0UHJvcHMuc3R5bGVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFByb3BzLnN0eWxlcyA9IGRlZmF1bHRQcm9wcy5zdHlsZXMoX19hc3NpZ24oX19hc3NpZ24oe30sIGRlZmF1bHRQcm9wcyksIGNvbXBvbmVudFByb3BzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBjb25jYXRTdHlsZXMgaXMgdHJ1ZSBhbmQgY3VzdG9tIHN0eWxlcyBoYXZlIGJlZW4gZGVmaW5lZCBjb21wdXRlIHRob3NlIHN0eWxlc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmNhdFN0eWxlcyAmJiBkZWZhdWx0UHJvcHMuc3R5bGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9zdHlsZUNhY2hlLmRlZmF1bHQgIT09IGRlZmF1bHRQcm9wcy5zdHlsZXMgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3N0eWxlQ2FjaGUuY29tcG9uZW50ICE9PSBjb21wb25lbnRQcm9wcy5zdHlsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1lcmdlZFN0eWxlcyA9IGNvbmNhdFN0eWxlU2V0cyhkZWZhdWx0UHJvcHMuc3R5bGVzLCBjb21wb25lbnRQcm9wcy5zdHlsZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3R5bGVDYWNoZS5kZWZhdWx0ID0gZGVmYXVsdFByb3BzLnN0eWxlcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3N0eWxlQ2FjaGUuY29tcG9uZW50ID0gY29tcG9uZW50UHJvcHMuc3R5bGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3R5bGVDYWNoZS5tZXJnZWQgPSBtZXJnZWRTdHlsZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvc2VkQ29tcG9uZW50LCBfX2Fzc2lnbih7fSwgZGVmYXVsdFByb3BzLCBjb21wb25lbnRQcm9wcywgeyBzdHlsZXM6IF90aGlzLl9zdHlsZUNhY2hlLm1lcmdlZCB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb3NlZENvbXBvbmVudCwgX19hc3NpZ24oe30sIGRlZmF1bHRQcm9wcywgY29tcG9uZW50UHJvcHMpKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgQ29tcG9uZW50V2l0aEluamVjdGVkUHJvcHMucHJvdG90eXBlLl9vblNldHRpbmdDaGFuZ2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29tcG9uZW50V2l0aEluamVjdGVkUHJvcHM7XG4gICAgICAgICAgICB9KFJlYWN0LkNvbXBvbmVudCkpLFxuICAgICAgICAgICAgX2EuZGlzcGxheU5hbWUgPSAnQ3VzdG9taXplZCcgKyBzY29wZSxcbiAgICAgICAgICAgIF9hKTtcbiAgICAgICAgcmV0dXJuIGhvaXN0U3RhdGljcyhDb21wb3NlZENvbXBvbmVudCwgcmVzdWx0Q2xhc3MpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jdXN0b21pemFibGUuanMubWFwIiwidmFyIF9sYXllcnNCeUhvc3RJZCA9IHt9O1xudmFyIF9kZWZhdWx0SG9zdFNlbGVjdG9yO1xuLyoqXG4gKiBSZWdpc3RlciBhIGxheWVyIGZvciBhIGdpdmVuIGhvc3QgaWRcbiAqIEBwYXJhbSBob3N0SWQgSWQgb2YgdGhlIGxheWVyIGhvc3RcbiAqIEBwYXJhbSBsYXllciBMYXllciBpbnN0YW5jZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJMYXllcihob3N0SWQsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFfbGF5ZXJzQnlIb3N0SWRbaG9zdElkXSkge1xuICAgICAgICBfbGF5ZXJzQnlIb3N0SWRbaG9zdElkXSA9IFtdO1xuICAgIH1cbiAgICBfbGF5ZXJzQnlIb3N0SWRbaG9zdElkXS5wdXNoKGNhbGxiYWNrKTtcbn1cbi8qKlxuICogVW5yZWdpc3RlciBhIGxheWVyIGZvciBhIGdpdmVuIGhvc3QgaWRcbiAqIEBwYXJhbSBob3N0SWQgSWQgb2YgdGhlIGxheWVyIGhvc3RcbiAqIEBwYXJhbSBsYXllciBMYXllciBpbnN0YW5jZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdW5yZWdpc3RlckxheWVyKGhvc3RJZCwgY2FsbGJhY2spIHtcbiAgICBpZiAoX2xheWVyc0J5SG9zdElkW2hvc3RJZF0pIHtcbiAgICAgICAgdmFyIGlkeCA9IF9sYXllcnNCeUhvc3RJZFtob3N0SWRdLmluZGV4T2YoY2FsbGJhY2spO1xuICAgICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgICAgIF9sYXllcnNCeUhvc3RJZFtob3N0SWRdLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgICAgaWYgKF9sYXllcnNCeUhvc3RJZFtob3N0SWRdLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBfbGF5ZXJzQnlIb3N0SWRbaG9zdElkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogVXNlZCBmb3Igbm90aWZ5aW5nIGFwcGxpY2FibGUgTGF5ZXJzIHRoYXQgYSBob3N0IGlzIGF2YWlsYWJsZS91bmF2YWlsYWJsZSBhbmQgdG8gcmUtZXZhbHVhdGUgTGF5ZXJzIHRoYXRcbiAqIGNhcmUgYWJvdXQgdGhlIHNwZWNpZmljIGhvc3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3RpZnlIb3N0Q2hhbmdlZChpZCkge1xuICAgIGlmIChfbGF5ZXJzQnlIb3N0SWRbaWRdKSB7XG4gICAgICAgIF9sYXllcnNCeUhvc3RJZFtpZF0uZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHsgcmV0dXJuIGNhbGxiYWNrKCk7IH0pO1xuICAgIH1cbn1cbi8qKlxuICogU2V0cyB0aGUgZGVmYXVsdCB0YXJnZXQgc2VsZWN0b3IgdG8gdXNlIHdoZW4gZGV0ZXJtaW5pbmcgdGhlIGhvc3QgaW4gd2hpY2hcbiAqIExheWVyZWQgY29udGVudCB3aWxsIGJlIGluamVjdGVkIGludG8uIElmIG5vdCBwcm92aWRlZCwgYW4gZWxlbWVudCB3aWxsIGJlXG4gKiBjcmVhdGVkIGF0IHRoZSBlbmQgb2YgdGhlIGRvY3VtZW50IGJvZHkuXG4gKlxuICogUGFzc2luZyBpbiBhIGZhbHNleSB2YWx1ZSB3aWxsIGNsZWFyIHRoZSBkZWZhdWx0IHRhcmdldCBhbmQgcmVzZXQgYmFjayB0b1xuICogdXNpbmcgYSBjcmVhdGVkIGVsZW1lbnQgYXQgdGhlIGVuZCBvZiBkb2N1bWVudCBib2R5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0RGVmYXVsdFRhcmdldChzZWxlY3Rvcikge1xuICAgIF9kZWZhdWx0SG9zdFNlbGVjdG9yID0gc2VsZWN0b3I7XG59XG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCB0YXJnZXQgc2VsZWN0b3Igd2hlbiBkZXRlcm1pbmluZyBhIGhvc3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRUYXJnZXQoKSB7XG4gICAgcmV0dXJuIF9kZWZhdWx0SG9zdFNlbGVjdG9yO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TGF5ZXIubm90aWZpY2F0aW9uLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX2RlY29yYXRlLCBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBGYWJyaWMgfSBmcm9tICcuLi8uLi9GYWJyaWMnO1xuaW1wb3J0IHsgY2xhc3NOYW1lc0Z1bmN0aW9uLCBjdXN0b21pemFibGUsIGdldERvY3VtZW50LCBzZXRQb3J0YWxBdHRyaWJ1dGUsIHNldFZpcnR1YWxQYXJlbnQsIHdhcm5EZXByZWNhdGlvbnMsIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IHJlZ2lzdGVyTGF5ZXIsIGdldERlZmF1bHRUYXJnZXQsIHVucmVnaXN0ZXJMYXllciB9IGZyb20gJy4vTGF5ZXIubm90aWZpY2F0aW9uJztcbnZhciBnZXRDbGFzc05hbWVzID0gY2xhc3NOYW1lc0Z1bmN0aW9uKCk7XG52YXIgTGF5ZXJCYXNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhMYXllckJhc2UsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTGF5ZXJCYXNlKHByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fcm9vdFJlZiA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgICAgICBfdGhpcy5fY3JlYXRlTGF5ZXJFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGhvc3RJZCA9IF90aGlzLnByb3BzLmhvc3RJZDtcbiAgICAgICAgICAgIHZhciBkb2MgPSBnZXREb2N1bWVudChfdGhpcy5fcm9vdFJlZi5jdXJyZW50KTtcbiAgICAgICAgICAgIHZhciBob3N0ID0gX3RoaXMuX2dldEhvc3QoKTtcbiAgICAgICAgICAgIGlmICghZG9jIHx8ICFob3N0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgb25lIHdhcyBhbHJlYWR5IGV4aXN0aW5nLCByZW1vdmUuXG4gICAgICAgICAgICBfdGhpcy5fcmVtb3ZlTGF5ZXJFbGVtZW50KCk7XG4gICAgICAgICAgICB2YXIgbGF5ZXJFbGVtZW50ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgdmFyIGNsYXNzTmFtZXMgPSBfdGhpcy5fZ2V0Q2xhc3NOYW1lcygpO1xuICAgICAgICAgICAgbGF5ZXJFbGVtZW50LmNsYXNzTmFtZSA9IGNsYXNzTmFtZXMucm9vdDtcbiAgICAgICAgICAgIHNldFBvcnRhbEF0dHJpYnV0ZShsYXllckVsZW1lbnQpO1xuICAgICAgICAgICAgc2V0VmlydHVhbFBhcmVudChsYXllckVsZW1lbnQsIF90aGlzLl9yb290UmVmLmN1cnJlbnQpO1xuICAgICAgICAgICAgX3RoaXMucHJvcHMuaW5zZXJ0Rmlyc3QgPyBob3N0Lmluc2VydEJlZm9yZShsYXllckVsZW1lbnQsIGhvc3QuZmlyc3RDaGlsZCkgOiBob3N0LmFwcGVuZENoaWxkKGxheWVyRWxlbWVudCk7XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgaG9zdElkOiBob3N0SWQsXG4gICAgICAgICAgICAgICAgbGF5ZXJFbGVtZW50OiBsYXllckVsZW1lbnQsXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIG9uTGF5ZXJEaWRNb3VudCA9IF9hLm9uTGF5ZXJEaWRNb3VudCwgb25MYXllck1vdW50ZWQgPSBfYS5vbkxheWVyTW91bnRlZDtcbiAgICAgICAgICAgICAgICBpZiAob25MYXllck1vdW50ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgb25MYXllck1vdW50ZWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9uTGF5ZXJEaWRNb3VudCkge1xuICAgICAgICAgICAgICAgICAgICBvbkxheWVyRGlkTW91bnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7fTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5EZXByZWNhdGlvbnMoJ0xheWVyJywgcHJvcHMsIHtcbiAgICAgICAgICAgICAgICBvbkxheWVyTW91bnRlZDogJ29uTGF5ZXJEaWRNb3VudCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIExheWVyQmFzZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBob3N0SWQgPSB0aGlzLnByb3BzLmhvc3RJZDtcbiAgICAgICAgdGhpcy5fY3JlYXRlTGF5ZXJFbGVtZW50KCk7XG4gICAgICAgIGlmIChob3N0SWQpIHtcbiAgICAgICAgICAgIHJlZ2lzdGVyTGF5ZXIoaG9zdElkLCB0aGlzLl9jcmVhdGVMYXllckVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBMYXllckJhc2UucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxheWVyRWxlbWVudCA9IHRoaXMuc3RhdGUubGF5ZXJFbGVtZW50O1xuICAgICAgICB2YXIgY2xhc3NOYW1lcyA9IHRoaXMuX2dldENsYXNzTmFtZXMoKTtcbiAgICAgICAgdmFyIGV2ZW50QnViYmxpbmdFbmFibGVkID0gdGhpcy5wcm9wcy5ldmVudEJ1YmJsaW5nRW5hYmxlZDtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogXCJtcy1sYXllclwiLCByZWY6IHRoaXMuX3Jvb3RSZWYgfSwgbGF5ZXJFbGVtZW50ICYmXG4gICAgICAgICAgICBSZWFjdERPTS5jcmVhdGVQb3J0YWwoUmVhY3QuY3JlYXRlRWxlbWVudChGYWJyaWMsIF9fYXNzaWduKHt9LCAoIWV2ZW50QnViYmxpbmdFbmFibGVkICYmIF9nZXRGaWx0ZXJlZEV2ZW50cygpKSwgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMuY29udGVudCB9KSwgdGhpcy5wcm9wcy5jaGlsZHJlbiksIGxheWVyRWxlbWVudCkpKTtcbiAgICB9O1xuICAgIExheWVyQmFzZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5ob3N0SWQgIT09IHRoaXMuc3RhdGUuaG9zdElkKSB7XG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVMYXllckVsZW1lbnQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGF5ZXJCYXNlLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGhvc3RJZCA9IHRoaXMucHJvcHMuaG9zdElkO1xuICAgICAgICB0aGlzLl9yZW1vdmVMYXllckVsZW1lbnQoKTtcbiAgICAgICAgaWYgKGhvc3RJZCkge1xuICAgICAgICAgICAgdW5yZWdpc3RlckxheWVyKGhvc3RJZCwgdGhpcy5fY3JlYXRlTGF5ZXJFbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGF5ZXJCYXNlLnByb3RvdHlwZS5fcmVtb3ZlTGF5ZXJFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb25MYXllcldpbGxVbm1vdW50ID0gdGhpcy5wcm9wcy5vbkxheWVyV2lsbFVubW91bnQ7XG4gICAgICAgIHZhciBsYXllckVsZW1lbnQgPSB0aGlzLnN0YXRlLmxheWVyRWxlbWVudDtcbiAgICAgICAgaWYgKGxheWVyRWxlbWVudCkge1xuICAgICAgICAgICAgc2V0VmlydHVhbFBhcmVudChsYXllckVsZW1lbnQsIG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvbkxheWVyV2lsbFVubW91bnQpIHtcbiAgICAgICAgICAgIG9uTGF5ZXJXaWxsVW5tb3VudCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsYXllckVsZW1lbnQgJiYgbGF5ZXJFbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIHZhciBwYXJlbnROb2RlID0gbGF5ZXJFbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICAgICAgICBpZiAocGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGF5ZXJFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgTGF5ZXJCYXNlLnByb3RvdHlwZS5fZ2V0Q2xhc3NOYW1lcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgY2xhc3NOYW1lID0gX2EuY2xhc3NOYW1lLCBzdHlsZXMgPSBfYS5zdHlsZXMsIHRoZW1lID0gX2EudGhlbWU7XG4gICAgICAgIHZhciBjbGFzc05hbWVzID0gZ2V0Q2xhc3NOYW1lcyhzdHlsZXMsIHtcbiAgICAgICAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICAgICAgaXNOb3RIb3N0OiAhdGhpcy5wcm9wcy5ob3N0SWQsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY2xhc3NOYW1lcztcbiAgICB9O1xuICAgIExheWVyQmFzZS5wcm90b3R5cGUuX2dldEhvc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBob3N0SWQgPSB0aGlzLnByb3BzLmhvc3RJZDtcbiAgICAgICAgdmFyIGRvYyA9IGdldERvY3VtZW50KHRoaXMuX3Jvb3RSZWYuY3VycmVudCk7XG4gICAgICAgIGlmICghZG9jKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChob3N0SWQpIHtcbiAgICAgICAgICAgIHJldHVybiBkb2MuZ2V0RWxlbWVudEJ5SWQoaG9zdElkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBkZWZhdWx0SG9zdFNlbGVjdG9yID0gZ2V0RGVmYXVsdFRhcmdldCgpO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRIb3N0U2VsZWN0b3IgPyBkb2MucXVlcnlTZWxlY3RvcihkZWZhdWx0SG9zdFNlbGVjdG9yKSA6IGRvYy5ib2R5O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBMYXllckJhc2UuZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBvbkxheWVyRGlkTW91bnQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgb25MYXllcldpbGxVbm1vdW50OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgfTtcbiAgICBMYXllckJhc2UgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY3VzdG9taXphYmxlKCdMYXllcicsIFsndGhlbWUnLCAnaG9zdElkJ10pXG4gICAgXSwgTGF5ZXJCYXNlKTtcbiAgICByZXR1cm4gTGF5ZXJCYXNlO1xufShSZWFjdC5Db21wb25lbnQpKTtcbmV4cG9ydCB7IExheWVyQmFzZSB9O1xudmFyIF9vbkZpbHRlckV2ZW50ID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgLy8gV2Ugc2hvdWxkIGp1c3QgYmUgYWJsZSB0byBjaGVjayBldi5idWJibGUgaGVyZSBhbmQgb25seSBzdG9wIGV2ZW50cyB0aGF0IGFyZSBidWJibGluZyB1cC4gSG93ZXZlciwgZXZlbiB0aG91Z2hcbiAgICAvLyBtb3VzZWVudGVyIGFuZCBtb3VzZWxlYXZlIGRvIE5PVCBidWJibGUgdXAsIHRoZXkgYXJlIHNob3dpbmcgdXAgYXMgYnViYmxpbmcuIFRoZXJlZm9yZSB3ZSBzdG9wIGV2ZW50cyBiYXNlZCBvblxuICAgIC8vIGV2ZW50IG5hbWUgcmF0aGVyIHRoYW4gZXYuYnViYmxlLlxuICAgIGlmIChldi5ldmVudFBoYXNlID09PSBFdmVudC5CVUJCTElOR19QSEFTRSAmJlxuICAgICAgICBldi50eXBlICE9PSAnbW91c2VlbnRlcicgJiZcbiAgICAgICAgZXYudHlwZSAhPT0gJ21vdXNlbGVhdmUnICYmXG4gICAgICAgIGV2LnR5cGUgIT09ICd0b3VjaHN0YXJ0JyAmJlxuICAgICAgICBldi50eXBlICE9PSAndG91Y2hlbmQnKSB7XG4gICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbn07XG52YXIgX2ZpbHRlcmVkRXZlbnRQcm9wcztcbmZ1bmN0aW9uIF9nZXRGaWx0ZXJlZEV2ZW50cygpIHtcbiAgICBpZiAoIV9maWx0ZXJlZEV2ZW50UHJvcHMpIHtcbiAgICAgICAgX2ZpbHRlcmVkRXZlbnRQcm9wcyA9IHt9O1xuICAgICAgICBbXG4gICAgICAgICAgICAnb25DbGljaycsXG4gICAgICAgICAgICAnb25Db250ZXh0TWVudScsXG4gICAgICAgICAgICAnb25Eb3VibGVDbGljaycsXG4gICAgICAgICAgICAnb25EcmFnJyxcbiAgICAgICAgICAgICdvbkRyYWdFbmQnLFxuICAgICAgICAgICAgJ29uRHJhZ0VudGVyJyxcbiAgICAgICAgICAgICdvbkRyYWdFeGl0JyxcbiAgICAgICAgICAgICdvbkRyYWdMZWF2ZScsXG4gICAgICAgICAgICAnb25EcmFnT3ZlcicsXG4gICAgICAgICAgICAnb25EcmFnU3RhcnQnLFxuICAgICAgICAgICAgJ29uRHJvcCcsXG4gICAgICAgICAgICAnb25Nb3VzZURvd24nLFxuICAgICAgICAgICAgJ29uTW91c2VFbnRlcicsXG4gICAgICAgICAgICAnb25Nb3VzZUxlYXZlJyxcbiAgICAgICAgICAgICdvbk1vdXNlTW92ZScsXG4gICAgICAgICAgICAnb25Nb3VzZU92ZXInLFxuICAgICAgICAgICAgJ29uTW91c2VPdXQnLFxuICAgICAgICAgICAgJ29uTW91c2VVcCcsXG4gICAgICAgICAgICAnb25Ub3VjaE1vdmUnLFxuICAgICAgICAgICAgJ29uVG91Y2hTdGFydCcsXG4gICAgICAgICAgICAnb25Ub3VjaENhbmNlbCcsXG4gICAgICAgICAgICAnb25Ub3VjaEVuZCcsXG4gICAgICAgICAgICAnb25LZXlEb3duJyxcbiAgICAgICAgICAgICdvbktleVByZXNzJyxcbiAgICAgICAgICAgICdvbktleVVwJyxcbiAgICAgICAgICAgICdvbkZvY3VzJyxcbiAgICAgICAgICAgICdvbkJsdXInLFxuICAgICAgICAgICAgJ29uQ2hhbmdlJyxcbiAgICAgICAgICAgICdvbklucHV0JyxcbiAgICAgICAgICAgICdvbkludmFsaWQnLFxuICAgICAgICAgICAgJ29uU3VibWl0JyxcbiAgICAgICAgXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAoX2ZpbHRlcmVkRXZlbnRQcm9wc1tuYW1lXSA9IF9vbkZpbHRlckV2ZW50KTsgfSk7XG4gICAgfVxuICAgIHJldHVybiBfZmlsdGVyZWRFdmVudFByb3BzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TGF5ZXIuYmFzZS5qcy5tYXAiLCJpbXBvcnQgeyBaSW5kZXhlcywgZ2V0R2xvYmFsQ2xhc3NOYW1lcyB9IGZyb20gJy4uLy4uL1N0eWxpbmcnO1xudmFyIEdsb2JhbENsYXNzTmFtZXMgPSB7XG4gICAgcm9vdDogJ21zLUxheWVyJyxcbiAgICByb290Tm9Ib3N0OiAnbXMtTGF5ZXItLWZpeGVkJyxcbiAgICBjb250ZW50OiAnbXMtTGF5ZXItY29udGVudCcsXG59O1xuZXhwb3J0IHZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLCBpc05vdEhvc3QgPSBwcm9wcy5pc05vdEhvc3QsIHRoZW1lID0gcHJvcHMudGhlbWU7XG4gICAgdmFyIGNsYXNzTmFtZXMgPSBnZXRHbG9iYWxDbGFzc05hbWVzKEdsb2JhbENsYXNzTmFtZXMsIHRoZW1lKTtcbiAgICByZXR1cm4ge1xuICAgICAgICByb290OiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLnJvb3QsXG4gICAgICAgICAgICB0aGVtZS5mb250cy5tZWRpdW0sXG4gICAgICAgICAgICBpc05vdEhvc3QgJiYgW1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZXMucm9vdE5vSG9zdCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IFpJbmRleGVzLkxheWVyLFxuICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBdLFxuICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLmNvbnRlbnQsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogJ3Zpc2libGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUxheWVyLnN0eWxlcy5qcy5tYXAiLCIvKipcbiAqIHtAZG9jQ2F0ZWdvcnkgR3JvdXBlZExpc3R9XG4gKi9cbmV4cG9ydCB2YXIgQ29sbGFwc2VBbGxWaXNpYmlsaXR5O1xuKGZ1bmN0aW9uIChDb2xsYXBzZUFsbFZpc2liaWxpdHkpIHtcbiAgICBDb2xsYXBzZUFsbFZpc2liaWxpdHlbQ29sbGFwc2VBbGxWaXNpYmlsaXR5W1wiaGlkZGVuXCJdID0gMF0gPSBcImhpZGRlblwiO1xuICAgIENvbGxhcHNlQWxsVmlzaWJpbGl0eVtDb2xsYXBzZUFsbFZpc2liaWxpdHlbXCJ2aXNpYmxlXCJdID0gMV0gPSBcInZpc2libGVcIjtcbn0pKENvbGxhcHNlQWxsVmlzaWJpbGl0eSB8fCAoQ29sbGFwc2VBbGxWaXNpYmlsaXR5ID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdyb3VwZWRMaXN0LnR5cGVzLmpzLm1hcCIsImltcG9ydCB7IHN0eWxlZCB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBMYXllckJhc2UgfSBmcm9tICcuL0xheWVyLmJhc2UnO1xuaW1wb3J0IHsgZ2V0U3R5bGVzIH0gZnJvbSAnLi9MYXllci5zdHlsZXMnO1xuZXhwb3J0IHZhciBMYXllciA9IHN0eWxlZChMYXllckJhc2UsIGdldFN0eWxlcywgdW5kZWZpbmVkLCB7XG4gICAgc2NvcGU6ICdMYXllcicsXG4gICAgZmllbGRzOiBbJ2hvc3RJZCcsICd0aGVtZScsICdzdHlsZXMnXSxcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TGF5ZXIuanMubWFwIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciBTUEFDRVJfV0lEVEggPSAzNjtcbmV4cG9ydCB2YXIgR3JvdXBTcGFjZXIgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgY291bnQgPSBwcm9wcy5jb3VudCwgX2EgPSBwcm9wcy5pbmRlbnRXaWR0aCwgaW5kZW50V2lkdGggPSBfYSA9PT0gdm9pZCAwID8gU1BBQ0VSX1dJRFRIIDogX2EsIF9iID0gcHJvcHMucm9sZSwgcm9sZSA9IF9iID09PSB2b2lkIDAgPyAncHJlc2VudGF0aW9uJyA6IF9iO1xuICAgIHZhciB3aWR0aCA9IGNvdW50ICogaW5kZW50V2lkdGg7XG4gICAgcmV0dXJuIGNvdW50ID4gMCA/IChSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogJ21zLUdyb3VwU3BhY2VyJywgc3R5bGU6IHsgZGlzcGxheTogJ2lubGluZS1ibG9jaycsIHdpZHRoOiB3aWR0aCB9LCByb2xlOiByb2xlIH0pKSA6IG51bGw7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R3JvdXBTcGFjZXIuanMubWFwIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSWNvbiwgRm9udEljb24gfSBmcm9tICcuLi8uLi9JY29uJztcbmltcG9ydCB7IGNsYXNzTmFtZXNGdW5jdGlvbiB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG52YXIgZ2V0Q2xhc3NOYW1lcyA9IGNsYXNzTmFtZXNGdW5jdGlvbigpO1xuZXhwb3J0IHZhciBDaGVja0Jhc2UgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgX2EgPSBwcm9wcy5jaGVja2VkLCBjaGVja2VkID0gX2EgPT09IHZvaWQgMCA/IGZhbHNlIDogX2EsIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSwgdGhlbWUgPSBwcm9wcy50aGVtZSwgc3R5bGVzID0gcHJvcHMuc3R5bGVzLCBfYiA9IHByb3BzLnVzZUZhc3RJY29ucywgdXNlRmFzdEljb25zID0gX2IgPT09IHZvaWQgMCA/IHRydWUgOiBfYjtcbiAgICB2YXIgY2xhc3NOYW1lcyA9IGdldENsYXNzTmFtZXMoc3R5bGVzLCB7IHRoZW1lOiB0aGVtZSwgY2xhc3NOYW1lOiBjbGFzc05hbWUsIGNoZWNrZWQ6IGNoZWNrZWQgfSk7XG4gICAgdmFyIEljb25Db21wb25lbnQgPSB1c2VGYXN0SWNvbnMgPyBGb250SWNvbiA6IEljb247XG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzLnJvb3QgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJY29uQ29tcG9uZW50LCB7IGljb25OYW1lOiBcIkNpcmNsZVJpbmdcIiwgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmNpcmNsZSB9KSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJY29uQ29tcG9uZW50LCB7IGljb25OYW1lOiBcIlN0YXR1c0NpcmNsZUNoZWNrbWFya1wiLCBjbGFzc05hbWU6IGNsYXNzTmFtZXMuY2hlY2sgfSkpKTtcbn07XG5DaGVja0Jhc2UuZGlzcGxheU5hbWUgPSAnQ2hlY2tCYXNlJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNoZWNrLmJhc2UuanMubWFwIiwiaW1wb3J0IHsgSGlnaENvbnRyYXN0U2VsZWN0b3IsIGdldEdsb2JhbENsYXNzTmFtZXMsIEljb25Gb250U2l6ZXMgfSBmcm9tICcuLi8uLi9TdHlsaW5nJztcbmltcG9ydCB7IGdldFJUTCB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5leHBvcnQgdmFyIENoZWNrR2xvYmFsQ2xhc3NOYW1lcyA9IHtcbiAgICByb290OiAnbXMtQ2hlY2snLFxuICAgIGNpcmNsZTogJ21zLUNoZWNrLWNpcmNsZScsXG4gICAgY2hlY2s6ICdtcy1DaGVjay1jaGVjaycsXG4gICAgLyoqIE11c3QgYmUgbWFudWFsbHkgYXBwbGllZCB0byB0aGUgcGFyZW50IGVsZW1lbnQgb2YgdGhlIGNoZWNrLiAqL1xuICAgIGNoZWNrSG9zdDogJ21zLUNoZWNrLWNoZWNrSG9zdCcsXG59O1xuZXhwb3J0IHZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIHZhciBfZiA9IHByb3BzLmhlaWdodCwgaGVpZ2h0ID0gX2YgPT09IHZvaWQgMCA/IHByb3BzLmNoZWNrQm94SGVpZ2h0IHx8ICcxOHB4JyA6IF9mLCBjaGVja2VkID0gcHJvcHMuY2hlY2tlZCwgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLCB0aGVtZSA9IHByb3BzLnRoZW1lO1xuICAgIHZhciBwYWxldHRlID0gdGhlbWUucGFsZXR0ZSwgc2VtYW50aWNDb2xvcnMgPSB0aGVtZS5zZW1hbnRpY0NvbG9ycywgZm9udHMgPSB0aGVtZS5mb250cztcbiAgICB2YXIgaXNSVEwgPSBnZXRSVEwodGhlbWUpO1xuICAgIHZhciBjbGFzc05hbWVzID0gZ2V0R2xvYmFsQ2xhc3NOYW1lcyhDaGVja0dsb2JhbENsYXNzTmFtZXMsIHRoZW1lKTtcbiAgICB2YXIgc2hhcmVkQ2lyY2xlQ2hlY2sgPSB7XG4gICAgICAgIGZvbnRTaXplOiBoZWlnaHQsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIHdpZHRoOiBoZWlnaHQsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHJvb3Q6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMucm9vdCxcbiAgICAgICAgICAgIGZvbnRzLm1lZGl1bSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAvLyBsaW5lSGVpZ2h0IGN1cnJlbnRseSBuZWVkcyB0byBiZSBhIHN0cmluZyB0byBvdXRwdXQgd2l0aG91dCAncHgnXG4gICAgICAgICAgICAgICAgbGluZUhlaWdodDogJzEnLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9hID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgJzpiZWZvcmUnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogJ1wiXCInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogJzFweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6ICcxcHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogJzFweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogJzFweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHNlbWFudGljQ29sb3JzLmJvZHlCYWNrZ3JvdW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBfYVtcIi5cIiArIGNsYXNzTmFtZXMuY2hlY2tIb3N0ICsgXCI6aG92ZXIgJiwgLlwiICsgY2xhc3NOYW1lcy5jaGVja0hvc3QgKyBcIjpmb2N1cyAmLCAmOmhvdmVyLCAmOmZvY3VzXCJdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgX2EpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNoZWNrZWQgJiYgW1xuICAgICAgICAgICAgICAgICdpcy1jaGVja2VkJyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJzpiZWZvcmUnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogcGFsZXR0ZS50aGVtZVByaW1hcnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfYiA9IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYltIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAnV2luZG93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2IpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgXSxcbiAgICAgICAgY2lyY2xlOiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLmNpcmNsZSxcbiAgICAgICAgICAgIHNoYXJlZENpcmNsZUNoZWNrLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBwYWxldHRlLm5ldXRyYWxTZWNvbmRhcnksXG4gICAgICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2MgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgX2NbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdXaW5kb3dUZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgX2MpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNoZWNrZWQgJiYge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBwYWxldHRlLndoaXRlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgY2hlY2s6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMuY2hlY2ssXG4gICAgICAgICAgICBzaGFyZWRDaXJjbGVDaGVjayxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBwYWxldHRlLm5ldXRyYWxTZWNvbmRhcnksXG4gICAgICAgICAgICAgICAgZm9udFNpemU6IEljb25Gb250U2l6ZXMubWVkaXVtLFxuICAgICAgICAgICAgICAgIGxlZnQ6IGlzUlRMID8gJy0wLjVweCcgOiAnLjVweCcsXG4gICAgICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2QgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnOmhvdmVyJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF9kW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIE1zSGlnaENvbnRyYXN0QWRqdXN0OiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF9kKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGVja2VkICYmIHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBwYWxldHRlLndoaXRlLFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDkwMCxcbiAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfZSA9IHt9LFxuICAgICAgICAgICAgICAgICAgICBfZVtIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnV2luZG93VGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF9lKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGNoZWNrSG9zdDogY2xhc3NOYW1lcy5jaGVja0hvc3QsXG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DaGVjay5zdHlsZXMuanMubWFwIiwiaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IENoZWNrQmFzZSB9IGZyb20gJy4vQ2hlY2suYmFzZSc7XG5pbXBvcnQgeyBnZXRTdHlsZXMgfSBmcm9tICcuL0NoZWNrLnN0eWxlcyc7XG5leHBvcnQgdmFyIENoZWNrID0gc3R5bGVkKENoZWNrQmFzZSwgZ2V0U3R5bGVzLCB1bmRlZmluZWQsIHtcbiAgICBzY29wZTogJ0NoZWNrJyxcbn0sIHRydWUpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2hlY2suanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEFuaW1hdGlvbkNsYXNzTmFtZXMsIEFuaW1hdGlvblN0eWxlcywgSGlnaENvbnRyYXN0U2VsZWN0b3IsIGdldEZvY3VzU3R5bGUsIGdldEdsb2JhbENsYXNzTmFtZXMsIEZvbnRXZWlnaHRzLCB9IGZyb20gJy4uLy4uL1N0eWxpbmcnO1xuaW1wb3J0IHsgSXNGb2N1c1Zpc2libGVDbGFzc05hbWUgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuZXhwb3J0IHZhciBEZXRhaWxzUm93R2xvYmFsQ2xhc3NOYW1lcyA9IHtcbiAgICByb290OiAnbXMtRGV0YWlsc1JvdycsXG4gICAgLy8gVE9ETzogaW4gRmFicmljIDcuMCBsb3dlcmNhc2UgdGhlICdDb21wYWN0JyBmb3IgY29uc2lzdGVuY3kgYWNyb3NzIG90aGVyIGNvbXBvbmVudHMuXG4gICAgY29tcGFjdDogJ21zLURldGFpbHNMaXN0LS1Db21wYWN0JyxcbiAgICBjZWxsOiAnbXMtRGV0YWlsc1Jvdy1jZWxsJyxcbiAgICBjZWxsQW5pbWF0aW9uOiAnbXMtRGV0YWlsc1Jvdy1jZWxsQW5pbWF0aW9uJyxcbiAgICBjZWxsQ2hlY2s6ICdtcy1EZXRhaWxzUm93LWNlbGxDaGVjaycsXG4gICAgY2hlY2s6ICdtcy1EZXRhaWxzUm93LWNoZWNrJyxcbiAgICBjZWxsTWVhc3VyZXI6ICdtcy1EZXRhaWxzUm93LWNlbGxNZWFzdXJlcicsXG4gICAgbGlzdENlbGxGaXJzdENoaWxkOiAnbXMtTGlzdC1jZWxsOmZpcnN0LWNoaWxkJyxcbiAgICBpc0NvbnRlbnRVbnNlbGVjdGFibGU6ICdpcy1jb250ZW50VW5zZWxlY3RhYmxlJyxcbiAgICBpc1NlbGVjdGVkOiAnaXMtc2VsZWN0ZWQnLFxuICAgIGlzQ2hlY2tWaXNpYmxlOiAnaXMtY2hlY2stdmlzaWJsZScsXG4gICAgaXNSb3dIZWFkZXI6ICdpcy1yb3ctaGVhZGVyJyxcbiAgICBmaWVsZHM6ICdtcy1EZXRhaWxzUm93LWZpZWxkcycsXG59O1xudmFyIElzRm9jdXNhYmxlU2VsZWN0b3IgPSBcIltkYXRhLWlzLWZvY3VzYWJsZT0ndHJ1ZSddXCI7XG5leHBvcnQgdmFyIERFRkFVTFRfQ0VMTF9TVFlMRV9QUk9QUyA9IHtcbiAgICBjZWxsTGVmdFBhZGRpbmc6IDEyLFxuICAgIGNlbGxSaWdodFBhZGRpbmc6IDgsXG4gICAgY2VsbEV4dHJhUmlnaHRQYWRkaW5nOiAyNCxcbn07XG4vLyBTb3VyY2Ugb2YgZGVmYXVsdCByb3cgaGVpZ2h0cyB0byBzaGFyZS5cbmV4cG9ydCB2YXIgREVGQVVMVF9ST1dfSEVJR0hUUyA9IHtcbiAgICByb3dIZWlnaHQ6IDQyLFxuICAgIGNvbXBhY3RSb3dIZWlnaHQ6IDMyLFxufTtcbi8vIENvbnN0YW50IHZhbHVlc1xudmFyIHZhbHVlcyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBERUZBVUxUX1JPV19IRUlHSFRTKSwgeyByb3dWZXJ0aWNhbFBhZGRpbmc6IDExLCBjb21wYWN0Um93VmVydGljYWxQYWRkaW5nOiA2IH0pO1xuZXhwb3J0IHZhciBnZXREZXRhaWxzUm93U3R5bGVzID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2osIF9rLCBfbCwgX207XG4gICAgdmFyIHRoZW1lID0gcHJvcHMudGhlbWUsIGlzU2VsZWN0ZWQgPSBwcm9wcy5pc1NlbGVjdGVkLCBjYW5TZWxlY3QgPSBwcm9wcy5jYW5TZWxlY3QsIGRyb3BwaW5nQ2xhc3NOYW1lID0gcHJvcHMuZHJvcHBpbmdDbGFzc05hbWUsIGFueVNlbGVjdGVkID0gcHJvcHMuYW55U2VsZWN0ZWQsIGlzQ2hlY2tWaXNpYmxlID0gcHJvcHMuaXNDaGVja1Zpc2libGUsIGNoZWNrYm94Q2VsbENsYXNzTmFtZSA9IHByb3BzLmNoZWNrYm94Q2VsbENsYXNzTmFtZSwgY29tcGFjdCA9IHByb3BzLmNvbXBhY3QsIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSwgX28gPSBwcm9wcy5jZWxsU3R5bGVQcm9wcywgY2VsbFN0eWxlUHJvcHMgPSBfbyA9PT0gdm9pZCAwID8gREVGQVVMVF9DRUxMX1NUWUxFX1BST1BTIDogX28sIGVuYWJsZVVwZGF0ZUFuaW1hdGlvbnMgPSBwcm9wcy5lbmFibGVVcGRhdGVBbmltYXRpb25zO1xuICAgIHZhciBwYWxldHRlID0gdGhlbWUucGFsZXR0ZSwgZm9udHMgPSB0aGVtZS5mb250cztcbiAgICB2YXIgbmV1dHJhbFByaW1hcnkgPSBwYWxldHRlLm5ldXRyYWxQcmltYXJ5LCB3aGl0ZSA9IHBhbGV0dGUud2hpdGUsIG5ldXRyYWxTZWNvbmRhcnkgPSBwYWxldHRlLm5ldXRyYWxTZWNvbmRhcnksIG5ldXRyYWxMaWdodGVyID0gcGFsZXR0ZS5uZXV0cmFsTGlnaHRlciwgbmV1dHJhbExpZ2h0ID0gcGFsZXR0ZS5uZXV0cmFsTGlnaHQsIG5ldXRyYWxEYXJrID0gcGFsZXR0ZS5uZXV0cmFsRGFyaywgbmV1dHJhbFF1YXRlcm5hcnlBbHQgPSBwYWxldHRlLm5ldXRyYWxRdWF0ZXJuYXJ5QWx0O1xuICAgIHZhciBmb2N1c0JvcmRlciA9IHRoZW1lLnNlbWFudGljQ29sb3JzLmZvY3VzQm9yZGVyO1xuICAgIHZhciBjbGFzc05hbWVzID0gZ2V0R2xvYmFsQ2xhc3NOYW1lcyhEZXRhaWxzUm93R2xvYmFsQ2xhc3NOYW1lcywgdGhlbWUpO1xuICAgIHZhciBjb2xvcnMgPSB7XG4gICAgICAgIC8vIERlZmF1bHRcbiAgICAgICAgZGVmYXVsdEhlYWRlclRleHQ6IG5ldXRyYWxQcmltYXJ5LFxuICAgICAgICBkZWZhdWx0TWV0YVRleHQ6IG5ldXRyYWxTZWNvbmRhcnksXG4gICAgICAgIGRlZmF1bHRCYWNrZ3JvdW5kOiB3aGl0ZSxcbiAgICAgICAgLy8gRGVmYXVsdCBIb3ZlclxuICAgICAgICBkZWZhdWx0SG92ZXJIZWFkZXJUZXh0OiBuZXV0cmFsRGFyayxcbiAgICAgICAgZGVmYXVsdEhvdmVyTWV0YVRleHQ6IG5ldXRyYWxQcmltYXJ5LFxuICAgICAgICBkZWZhdWx0SG92ZXJCYWNrZ3JvdW5kOiBuZXV0cmFsTGlnaHRlcixcbiAgICAgICAgLy8gU2VsZWN0ZWRcbiAgICAgICAgc2VsZWN0ZWRIZWFkZXJUZXh0OiBuZXV0cmFsRGFyayxcbiAgICAgICAgc2VsZWN0ZWRNZXRhVGV4dDogbmV1dHJhbFByaW1hcnksXG4gICAgICAgIHNlbGVjdGVkQmFja2dyb3VuZDogbmV1dHJhbExpZ2h0LFxuICAgICAgICAvLyBTZWxlY3RlZCBIb3ZlclxuICAgICAgICBzZWxlY3RlZEhvdmVySGVhZGVyVGV4dDogbmV1dHJhbERhcmssXG4gICAgICAgIHNlbGVjdGVkSG92ZXJNZXRhVGV4dDogbmV1dHJhbFByaW1hcnksXG4gICAgICAgIHNlbGVjdGVkSG92ZXJCYWNrZ3JvdW5kOiBuZXV0cmFsUXVhdGVybmFyeUFsdCxcbiAgICAgICAgLy8gRm9jdXNcbiAgICAgICAgZm9jdXNIZWFkZXJUZXh0OiBuZXV0cmFsRGFyayxcbiAgICAgICAgZm9jdXNNZXRhVGV4dDogbmV1dHJhbFByaW1hcnksXG4gICAgICAgIGZvY3VzQmFja2dyb3VuZDogbmV1dHJhbExpZ2h0LFxuICAgICAgICBmb2N1c0hvdmVyQmFja2dyb3VuZDogbmV1dHJhbFF1YXRlcm5hcnlBbHQsXG4gICAgfTtcbiAgICAvLyBTZWxlY3RlZCByb3cgc3R5bGVzXG4gICAgdmFyIHNlbGVjdGVkU3R5bGVzID0gW1xuICAgICAgICBnZXRGb2N1c1N0eWxlKHRoZW1lLCB7IGluc2V0OiAtMSwgYm9yZGVyQ29sb3I6IGZvY3VzQm9yZGVyLCBvdXRsaW5lQ29sb3I6IHdoaXRlIH0pLFxuICAgICAgICBjbGFzc05hbWVzLmlzU2VsZWN0ZWQsXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbG9yOiBjb2xvcnMuc2VsZWN0ZWRNZXRhVGV4dCxcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IGNvbG9ycy5zZWxlY3RlZEJhY2tncm91bmQsXG4gICAgICAgICAgICBib3JkZXJCb3R0b206IFwiMXB4IHNvbGlkIFwiICsgd2hpdGUsXG4gICAgICAgICAgICBzZWxlY3RvcnM6IChfYSA9IHtcbiAgICAgICAgICAgICAgICAgICAgJyY6YmVmb3JlJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAtMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyVG9wOiBcIjFweCBzb2xpZCBcIiArIHdoaXRlLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAvLyBTZWxlY3RlZCBTdGF0ZSBob3ZlclxuICAgICAgICAgICAgICAgICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IGNvbG9ycy5zZWxlY3RlZEhvdmVyQmFja2dyb3VuZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBjb2xvcnMuc2VsZWN0ZWRIb3Zlck1ldGFUZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2IgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZWxlY3RlZCBTdGF0ZSBob3ZlciBtZXRhIGNlbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYltcIi5cIiArIGNsYXNzTmFtZXMuY2VsbCArIFwiIFwiICsgSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ0hpZ2hsaWdodFRleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc+IGEnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdIaWdobGlnaHRUZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZWxlY3RlZCBTdGF0ZSBob3ZlciBIZWFkZXIgY2VsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iW1wiLlwiICsgY2xhc3NOYW1lcy5pc1Jvd0hlYWRlcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBjb2xvcnMuc2VsZWN0ZWRIb3ZlckhlYWRlclRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9jID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY1tIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdIaWdobGlnaHRUZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFbnN1cmUgaGlnaC1jb250cmFzdCBtb2RlIG92ZXJyaWRlcyBkZWZhdWx0IGhvdmVyIGJhY2tncm91bmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYltIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICdIaWdobGlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2IpLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAvLyBGb2N1cyBzdGF0ZVxuICAgICAgICAgICAgICAgICAgICAnJjpmb2N1cyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IGNvbG9ycy5mb2N1c0JhY2tncm91bmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfZCA9IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNlbGVjdGVkIFN0YXRlIGhvdmVyIG1ldGEgY2VsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kW1wiLlwiICsgY2xhc3NOYW1lcy5jZWxsXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGNvbG9ycy5mb2N1c01ldGFUZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfZSA9IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2VbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnSGlnaGxpZ2h0VGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc+IGEnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ0hpZ2hsaWdodFRleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2UpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUm93IGhlYWRlciBjZWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2RbXCIuXCIgKyBjbGFzc05hbWVzLmlzUm93SGVhZGVyXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGNvbG9ycy5mb2N1c0hlYWRlclRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9mID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZltIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdIaWdobGlnaHRUZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFbnN1cmUgaGlnaC1jb250cmFzdCBtb2RlIG92ZXJyaWRlcyBkZWZhdWx0IGZvY3VzIGJhY2tncm91bmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZFtIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICdIaWdobGlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2QpLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfYVtIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICdIaWdobGlnaHQnLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ0hpZ2hsaWdodFRleHQnLFxuICAgICAgICAgICAgICAgICAgICBNc0hpZ2hDb250cmFzdEFkanVzdDogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ0hpZ2hsaWdodFRleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC8vIEZvY3VzIGFuZCBob3ZlciBzdGF0ZVxuICAgICAgICAgICAgICAgIF9hWycmOmZvY3VzOmhvdmVyJ10gPSB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IGNvbG9ycy5mb2N1c0hvdmVyQmFja2dyb3VuZCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9hKSxcbiAgICAgICAgfSxcbiAgICBdO1xuICAgIHZhciBjYW5ub3RTZWxlY3RTdHlsZXMgPSBbXG4gICAgICAgIGNsYXNzTmFtZXMuaXNDb250ZW50VW5zZWxlY3RhYmxlLFxuICAgICAgICB7XG4gICAgICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICAgICAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICAgICAgfSxcbiAgICBdO1xuICAgIHZhciByb290Q29tcGFjdFN0eWxlcyA9IHtcbiAgICAgICAgbWluSGVpZ2h0OiB2YWx1ZXMuY29tcGFjdFJvd0hlaWdodCxcbiAgICAgICAgYm9yZGVyOiAwLFxuICAgIH07XG4gICAgdmFyIGNlbGxDb21wYWN0U3R5bGVzID0ge1xuICAgICAgICBtaW5IZWlnaHQ6IHZhbHVlcy5jb21wYWN0Um93SGVpZ2h0LFxuICAgICAgICBwYWRkaW5nVG9wOiB2YWx1ZXMuY29tcGFjdFJvd1ZlcnRpY2FsUGFkZGluZyxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogdmFsdWVzLmNvbXBhY3RSb3dWZXJ0aWNhbFBhZGRpbmcsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiBjZWxsU3R5bGVQcm9wcy5jZWxsTGVmdFBhZGRpbmcgKyBcInB4XCIsXG4gICAgfTtcbiAgICB2YXIgZGVmYXVsdENlbGxTdHlsZXMgPSBbXG4gICAgICAgIGdldEZvY3VzU3R5bGUodGhlbWUsIHsgaW5zZXQ6IC0xIH0pLFxuICAgICAgICBjbGFzc05hbWVzLmNlbGwsXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgICAgIG1pbkhlaWdodDogdmFsdWVzLnJvd0hlaWdodCxcbiAgICAgICAgICAgIHZlcnRpY2FsQWxpZ246ICd0b3AnLFxuICAgICAgICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICAgICAgICBwYWRkaW5nVG9wOiB2YWx1ZXMucm93VmVydGljYWxQYWRkaW5nLFxuICAgICAgICAgICAgcGFkZGluZ0JvdHRvbTogdmFsdWVzLnJvd1ZlcnRpY2FsUGFkZGluZyxcbiAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiBjZWxsU3R5bGVQcm9wcy5jZWxsTGVmdFBhZGRpbmcgKyBcInB4XCIsXG4gICAgICAgICAgICBzZWxlY3RvcnM6IChfZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgJyYgPiBidXR0b24nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhXaWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfZ1tJc0ZvY3VzYWJsZVNlbGVjdG9yXSA9IGdldEZvY3VzU3R5bGUodGhlbWUsIHsgaW5zZXQ6IC0xLCBib3JkZXJDb2xvcjogbmV1dHJhbFNlY29uZGFyeSwgb3V0bGluZUNvbG9yOiB3aGl0ZSB9KSxcbiAgICAgICAgICAgICAgICBfZyksXG4gICAgICAgIH0sXG4gICAgICAgIGlzU2VsZWN0ZWQgJiYge1xuICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2ggPSB7fSxcbiAgICAgICAgICAgICAgICBfaFtIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICdIaWdobGlnaHQnLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ0hpZ2hsaWdodFRleHQnLFxuICAgICAgICAgICAgICAgICAgICBNc0hpZ2hDb250cmFzdEFkanVzdDogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ0hpZ2hsaWdodFRleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9oKSxcbiAgICAgICAgfSxcbiAgICAgICAgY29tcGFjdCAmJiBjZWxsQ29tcGFjdFN0eWxlcyxcbiAgICBdO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJvb3Q6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMucm9vdCxcbiAgICAgICAgICAgIEFuaW1hdGlvbkNsYXNzTmFtZXMuZmFkZUluNDAwLFxuICAgICAgICAgICAgZHJvcHBpbmdDbGFzc05hbWUsXG4gICAgICAgICAgICB0aGVtZS5mb250cy5zbWFsbCxcbiAgICAgICAgICAgIGlzQ2hlY2tWaXNpYmxlICYmIGNsYXNzTmFtZXMuaXNDaGVja1Zpc2libGUsXG4gICAgICAgICAgICBnZXRGb2N1c1N0eWxlKHRoZW1lLCB7IGJvcmRlckNvbG9yOiBmb2N1c0JvcmRlciwgb3V0bGluZUNvbG9yOiB3aGl0ZSB9KSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBib3JkZXJCb3R0b206IFwiMXB4IHNvbGlkIFwiICsgbmV1dHJhbExpZ2h0ZXIsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogY29sb3JzLmRlZmF1bHRCYWNrZ3JvdW5kLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBjb2xvcnMuZGVmYXVsdE1ldGFUZXh0LFxuICAgICAgICAgICAgICAgIC8vIFRoaXMgZW5zdXJlcyB0aGF0IHRoZSByb3cgYWx3YXlzIHRyaWVzIHRvIGNvbnN1bWUgaXMgbWluaW11bSB3aWR0aCBhbmQgZG9lcyBub3QgY29tcHJlc3MuXG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICAgICAgICAgICAgICBtaW5XaWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIG1pbkhlaWdodDogdmFsdWVzLnJvd0hlaWdodCxcbiAgICAgICAgICAgICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICAgICAgICAgIHZlcnRpY2FsQWxpZ246ICd0b3AnLFxuICAgICAgICAgICAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9qID0ge30sXG4gICAgICAgICAgICAgICAgICAgIF9qW1wiLlwiICsgY2xhc3NOYW1lcy5saXN0Q2VsbEZpcnN0Q2hpbGQgKyBcIiAmOmJlZm9yZVwiXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgX2pbJyY6aG92ZXInXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IGNvbG9ycy5kZWZhdWx0SG92ZXJCYWNrZ3JvdW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGNvbG9ycy5kZWZhdWx0SG92ZXJNZXRhVGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9rID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2tbXCIuXCIgKyBjbGFzc05hbWVzLmlzUm93SGVhZGVyXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGNvbG9ycy5kZWZhdWx0SG92ZXJIZWFkZXJUZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2spLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBfaltcIiY6aG92ZXIgLlwiICsgY2xhc3NOYW1lcy5jaGVja10gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBfaltcIi5cIiArIElzRm9jdXNWaXNpYmxlQ2xhc3NOYW1lICsgXCIgJjpmb2N1cyAuXCIgKyBjbGFzc05hbWVzLmNoZWNrXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF9qKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1NlbGVjdGVkICYmIHNlbGVjdGVkU3R5bGVzLFxuICAgICAgICAgICAgIWNhblNlbGVjdCAmJiBjYW5ub3RTZWxlY3RTdHlsZXMsXG4gICAgICAgICAgICBjb21wYWN0ICYmIHJvb3RDb21wYWN0U3R5bGVzLFxuICAgICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBdLFxuICAgICAgICBjZWxsVW5wYWRkZWQ6IHtcbiAgICAgICAgICAgIHBhZGRpbmdSaWdodDogY2VsbFN0eWxlUHJvcHMuY2VsbFJpZ2h0UGFkZGluZyArIFwicHhcIixcbiAgICAgICAgfSxcbiAgICAgICAgY2VsbFBhZGRlZDoge1xuICAgICAgICAgICAgcGFkZGluZ1JpZ2h0OiBjZWxsU3R5bGVQcm9wcy5jZWxsRXh0cmFSaWdodFBhZGRpbmcgKyBjZWxsU3R5bGVQcm9wcy5jZWxsUmlnaHRQYWRkaW5nICsgXCJweFwiLFxuICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2wgPSB7fSxcbiAgICAgICAgICAgICAgICBfbFtcIiYuXCIgKyBjbGFzc05hbWVzLmNlbGxDaGVja10gPSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdSaWdodDogMCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9sKSxcbiAgICAgICAgfSxcbiAgICAgICAgY2VsbDogZGVmYXVsdENlbGxTdHlsZXMsXG4gICAgICAgIGNlbGxBbmltYXRpb246IGVuYWJsZVVwZGF0ZUFuaW1hdGlvbnMgJiYgQW5pbWF0aW9uU3R5bGVzLnNsaWRlTGVmdEluNDAsXG4gICAgICAgIGNlbGxNZWFzdXJlcjogW1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5jZWxsTWVhc3VyZXIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6ICd2aXNpYmxlJyxcbiAgICAgICAgICAgICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGNoZWNrQ2VsbDogW1xuICAgICAgICAgICAgZGVmYXVsdENlbGxTdHlsZXMsXG4gICAgICAgICAgICBjbGFzc05hbWVzLmNlbGxDaGVjayxcbiAgICAgICAgICAgIGNoZWNrYm94Q2VsbENsYXNzTmFtZSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgICAgIC8vIEVuc3VyZSB0aGF0IHRoZSBjaGVjayBjZWxsIGNvdmVycyB0aGUgdG9wIGJvcmRlciBvZiB0aGUgY2VsbC5cbiAgICAgICAgICAgICAgICAvLyBUaGlzIGVuc3VyZXMgdGhlIGNsaWNrIHRhcmdldCBkb2VzIG5vdCBsZWF2ZSBhIHNwb3Qgd2hpY2ggd291bGRcbiAgICAgICAgICAgICAgICAvLyBjYXVzZSBvdGhlciBpdGVtcyB0byBiZSBkZXNlbGVjdGVkLlxuICAgICAgICAgICAgICAgIHBhZGRpbmdUb3A6IDEsXG4gICAgICAgICAgICAgICAgbWFyZ2luVG9wOiAtMSxcbiAgICAgICAgICAgICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgY2hlY2tDb3Zlcjoge1xuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICB0b3A6IC0xLFxuICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgICAgZGlzcGxheTogYW55U2VsZWN0ZWQgPyAnYmxvY2snIDogJ25vbmUnLFxuICAgICAgICB9LFxuICAgICAgICBmaWVsZHM6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMuZmllbGRzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnc3RyZXRjaCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpc1Jvd0hlYWRlcjogW1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5pc1Jvd0hlYWRlcixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogY29sb3JzLmRlZmF1bHRIZWFkZXJUZXh0LFxuICAgICAgICAgICAgICAgIGZvbnRTaXplOiBmb250cy5tZWRpdW0uZm9udFNpemUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNTZWxlY3RlZCAmJiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IGNvbG9ycy5zZWxlY3RlZEhlYWRlclRleHQsXG4gICAgICAgICAgICAgICAgZm9udFdlaWdodDogRm9udFdlaWdodHMuc2VtaWJvbGQsXG4gICAgICAgICAgICAgICAgc2VsZWN0b3JzOiAoX20gPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgX21bSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdIaWdobGlnaHRUZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgX20pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaXNNdWx0aWxpbmU6IFtcbiAgICAgICAgICAgIGRlZmF1bHRDZWxsU3R5bGVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHdoaXRlU3BhY2U6ICdub3JtYWwnLFxuICAgICAgICAgICAgICAgIHdvcmRCcmVhazogJ2JyZWFrLXdvcmQnLFxuICAgICAgICAgICAgICAgIHRleHRPdmVyZmxvdzogJ2NsaXAnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgY2hlY2s6IFtjbGFzc05hbWVzLmNoZWNrXSxcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURldGFpbHNSb3cuc3R5bGVzLmpzLm1hcCIsImltcG9ydCB7IGdldEZvY3VzU3R5bGUsIGZvY3VzQ2xlYXIsIGdldEdsb2JhbENsYXNzTmFtZXMsIEhpZ2hDb250cmFzdFNlbGVjdG9yLCBoaWRkZW5Db250ZW50U3R5bGUsIH0gZnJvbSAnLi4vLi4vU3R5bGluZyc7XG5pbXBvcnQgeyBnZXRSVEwsIElzRm9jdXNWaXNpYmxlQ2xhc3NOYW1lIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IERFRkFVTFRfQ0VMTF9TVFlMRV9QUk9QUyB9IGZyb20gJy4vRGV0YWlsc1Jvdy5zdHlsZXMnO1xuLy8gRm9yIGV2ZXJ5IGdyb3VwIGxldmVsIHRoZXJlIGlzIGEgR3JvdXBTcGFjZXIgYWRkZWQuIEltcG9ydGluZyB0aGlzIGNvbnN0IHRvIGhhdmUgdGhlIHNvdXJjZSB2YWx1ZSBpbiBvbmUgcGxhY2UuXG5pbXBvcnQgeyBTUEFDRVJfV0lEVEggYXMgR1JPVVBfRVhQQU5ERVJfV0lEVEggfSBmcm9tICcuLi9Hcm91cGVkTGlzdC9Hcm91cFNwYWNlcic7XG52YXIgR2xvYmFsQ2xhc3NOYW1lcyA9IHtcbiAgICB0b29sdGlwSG9zdDogJ21zLVRvb2x0aXBIb3N0JyxcbiAgICByb290OiAnbXMtRGV0YWlsc0hlYWRlcicsXG4gICAgY2VsbDogJ21zLURldGFpbHNIZWFkZXItY2VsbCcsXG4gICAgY2VsbElzQ2hlY2s6ICdtcy1EZXRhaWxzSGVhZGVyLWNlbGxJc0NoZWNrJyxcbiAgICBjb2xsYXBzZUJ1dHRvbjogJ21zLURldGFpbHNIZWFkZXItY29sbGFwc2VCdXR0b24nLFxuICAgIGlzQ29sbGFwc2VkOiAnaXMtY29sbGFwc2VkJyxcbiAgICBpc0FsbFNlbGVjdGVkOiAnaXMtYWxsU2VsZWN0ZWQnLFxuICAgIGlzU2VsZWN0QWxsSGlkZGVuOiAnaXMtc2VsZWN0QWxsSGlkZGVuJyxcbiAgICBpc1Jlc2l6aW5nQ29sdW1uOiAnaXMtcmVzaXppbmdDb2x1bW4nLFxuICAgIGNlbGxTaXplcjogJ21zLURldGFpbHNIZWFkZXItY2VsbFNpemVyJyxcbiAgICBpc1Jlc2l6aW5nOiAnaXMtcmVzaXppbmcnLFxuICAgIGRyb3BIaW50Q2lyY2xlU3R5bGU6ICdtcy1EZXRhaWxzSGVhZGVyLWRyb3BIaW50Q2lyY2xlU3R5bGUnLFxuICAgIGRyb3BIaW50Q2FyZXRTdHlsZTogJ21zLURldGFpbHNIZWFkZXItZHJvcEhpbnRDYXJldFN0eWxlJyxcbiAgICBkcm9wSGludExpbmVTdHlsZTogJ21zLURldGFpbHNIZWFkZXItZHJvcEhpbnRMaW5lU3R5bGUnLFxuICAgIGNlbGxUaXRsZTogJ21zLURldGFpbHNIZWFkZXItY2VsbFRpdGxlJyxcbiAgICBjZWxsTmFtZTogJ21zLURldGFpbHNIZWFkZXItY2VsbE5hbWUnLFxuICAgIGZpbHRlckNoZXZyb246ICdtcy1EZXRhaWxzSGVhZGVyLWZpbHRlckNoZXZyb24nLFxuICAgIGdyaXBwZXJCYXJWZXJ0aWNhbDogJ21zLURldGFpbHNDb2x1bW4tZ3JpcHBlckJhclZlcnRpY2FsJyxcbiAgICBjaGVja1Rvb2x0aXA6ICdtcy1EZXRhaWxzSGVhZGVyLWNoZWNrVG9vbHRpcCcsXG4gICAgY2hlY2s6ICdtcy1EZXRhaWxzSGVhZGVyLWNoZWNrJyxcbn07XG5leHBvcnQgdmFyIEhFQURFUl9IRUlHSFQgPSA0MjtcbmV4cG9ydCB2YXIgZ2V0Q2VsbFN0eWxlcyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciB0aGVtZSA9IHByb3BzLnRoZW1lLCBfYSA9IHByb3BzLmNlbGxTdHlsZVByb3BzLCBjZWxsU3R5bGVQcm9wcyA9IF9hID09PSB2b2lkIDAgPyBERUZBVUxUX0NFTExfU1RZTEVfUFJPUFMgOiBfYTtcbiAgICB2YXIgc2VtYW50aWNDb2xvcnMgPSB0aGVtZS5zZW1hbnRpY0NvbG9ycztcbiAgICB2YXIgY2xhc3NOYW1lcyA9IGdldEdsb2JhbENsYXNzTmFtZXMoR2xvYmFsQ2xhc3NOYW1lcywgdGhlbWUpO1xuICAgIHJldHVybiBbXG4gICAgICAgIGNsYXNzTmFtZXMuY2VsbCxcbiAgICAgICAgZ2V0Rm9jdXNTdHlsZSh0aGVtZSksXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbG9yOiBzZW1hbnRpY0NvbG9ycy5ib2R5VGV4dCxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgICAgIHBhZGRpbmc6IFwiMCBcIiArIGNlbGxTdHlsZVByb3BzLmNlbGxSaWdodFBhZGRpbmcgKyBcInB4IDAgXCIgKyBjZWxsU3R5bGVQcm9wcy5jZWxsTGVmdFBhZGRpbmcgKyBcInB4XCIsXG4gICAgICAgICAgICBsaW5lSGVpZ2h0OiAnaW5oZXJpdCcsXG4gICAgICAgICAgICBtYXJnaW46ICcwJyxcbiAgICAgICAgICAgIGhlaWdodDogSEVBREVSX0hFSUdIVCxcbiAgICAgICAgICAgIHZlcnRpY2FsQWxpZ246ICd0b3AnLFxuICAgICAgICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICAgICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICAgICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICAgICAgfSxcbiAgICBdO1xufTtcbmV4cG9ydCB2YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgIHZhciB0aGVtZSA9IHByb3BzLnRoZW1lLCBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsIGlzQWxsU2VsZWN0ZWQgPSBwcm9wcy5pc0FsbFNlbGVjdGVkLCBpc1Jlc2l6aW5nQ29sdW1uID0gcHJvcHMuaXNSZXNpemluZ0NvbHVtbiwgaXNTaXppbmcgPSBwcm9wcy5pc1NpemluZywgaXNBbGxDb2xsYXBzZWQgPSBwcm9wcy5pc0FsbENvbGxhcHNlZCwgX2UgPSBwcm9wcy5jZWxsU3R5bGVQcm9wcywgY2VsbFN0eWxlUHJvcHMgPSBfZSA9PT0gdm9pZCAwID8gREVGQVVMVF9DRUxMX1NUWUxFX1BST1BTIDogX2U7XG4gICAgdmFyIHNlbWFudGljQ29sb3JzID0gdGhlbWUuc2VtYW50aWNDb2xvcnMsIHBhbGV0dGUgPSB0aGVtZS5wYWxldHRlLCBmb250cyA9IHRoZW1lLmZvbnRzO1xuICAgIHZhciBjbGFzc05hbWVzID0gZ2V0R2xvYmFsQ2xhc3NOYW1lcyhHbG9iYWxDbGFzc05hbWVzLCB0aGVtZSk7XG4gICAgdmFyIGNvbG9ycyA9IHtcbiAgICAgICAgaWNvbkZvcmVncm91bmRDb2xvcjogc2VtYW50aWNDb2xvcnMuYm9keVN1YnRleHQsXG4gICAgICAgIGhlYWRlckZvcmVncm91bmRDb2xvcjogc2VtYW50aWNDb2xvcnMuYm9keVRleHQsXG4gICAgICAgIGhlYWRlckJhY2tncm91bmRDb2xvcjogc2VtYW50aWNDb2xvcnMuYm9keUJhY2tncm91bmQsXG4gICAgICAgIGRyb3Bkb3duQ2hldnJvbkZvcmVncm91bmRDb2xvcjogcGFsZXR0ZS5uZXV0cmFsVGVydGlhcnksXG4gICAgICAgIHJlc2l6ZXJDb2xvcjogcGFsZXR0ZS5uZXV0cmFsVGVydGlhcnlBbHQsXG4gICAgfTtcbiAgICB2YXIgY2VsbFNpemVyRmFkZUluU3R5bGVzID0ge1xuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAwLjNzIGxpbmVhcicsXG4gICAgfTtcbiAgICB2YXIgY2VsbFN0eWxlcyA9IGdldENlbGxTdHlsZXMocHJvcHMpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJvb3Q6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMucm9vdCxcbiAgICAgICAgICAgIGZvbnRzLnNtYWxsLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IGNvbG9ycy5oZWFkZXJCYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICAgICAgbWluV2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbEFsaWduOiAndG9wJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IEhFQURFUl9IRUlHSFQsXG4gICAgICAgICAgICAgICAgbGluZUhlaWdodDogSEVBREVSX0hFSUdIVCxcbiAgICAgICAgICAgICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgICAgICAgICAgICBib3hTaXppbmc6ICdjb250ZW50LWJveCcsXG4gICAgICAgICAgICAgICAgcGFkZGluZ0JvdHRvbTogJzFweCcsXG4gICAgICAgICAgICAgICAgcGFkZGluZ1RvcDogJzE2cHgnLFxuICAgICAgICAgICAgICAgIGJvcmRlckJvdHRvbTogXCIxcHggc29saWQgXCIgKyBzZW1hbnRpY0NvbG9ycy5ib2R5RGl2aWRlcixcbiAgICAgICAgICAgICAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICAgICAgICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2EgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgX2FbXCImOmhvdmVyIC5cIiArIGNsYXNzTmFtZXMuY2hlY2tdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgX2FbXCImIC5cIiArIGNsYXNzTmFtZXMudG9vbHRpcEhvc3QgKyBcIiAuXCIgKyBjbGFzc05hbWVzLmNoZWNrVG9vbHRpcF0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBfYSksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNBbGxTZWxlY3RlZCAmJiBjbGFzc05hbWVzLmlzQWxsU2VsZWN0ZWQsXG4gICAgICAgICAgICBpc1Jlc2l6aW5nQ29sdW1uICYmIGNsYXNzTmFtZXMuaXNSZXNpemluZ0NvbHVtbixcbiAgICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgXSxcbiAgICAgICAgY2hlY2s6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMuY2hlY2ssXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBIRUFERVJfSEVJR0hULFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfYiA9IHt9LFxuICAgICAgICAgICAgICAgICAgICBfYltcIi5cIiArIElzRm9jdXNWaXNpYmxlQ2xhc3NOYW1lICsgXCIgJjpmb2N1c1wiXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF9iKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGNlbGxXcmFwcGVyUGFkZGVkOiB7XG4gICAgICAgICAgICBwYWRkaW5nUmlnaHQ6IGNlbGxTdHlsZVByb3BzLmNlbGxFeHRyYVJpZ2h0UGFkZGluZyArIGNlbGxTdHlsZVByb3BzLmNlbGxSaWdodFBhZGRpbmcsXG4gICAgICAgIH0sXG4gICAgICAgIGNlbGxJc0NoZWNrOiBbXG4gICAgICAgICAgICBjZWxsU3R5bGVzLFxuICAgICAgICAgICAgY2xhc3NOYW1lcy5jZWxsSXNDaGVjayxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzQWxsU2VsZWN0ZWQgJiYge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBjZWxsSXNHcm91cEV4cGFuZGVyOiBbXG4gICAgICAgICAgICBjZWxsU3R5bGVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIGZvbnRTaXplOiBmb250cy5zbWFsbC5mb250U2l6ZSxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBHUk9VUF9FWFBBTkRFUl9XSURUSCxcbiAgICAgICAgICAgICAgICBjb2xvcjogcGFsZXR0ZS5uZXV0cmFsU2Vjb25kYXJ5LFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAnOmhvdmVyJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBwYWxldHRlLm5ldXRyYWxMaWdodGVyLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnOmFjdGl2ZSc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcGFsZXR0ZS5uZXV0cmFsTGlnaHQsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGNlbGxJc0FjdGlvbmFibGU6IHtcbiAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICc6aG92ZXInOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBzZW1hbnRpY0NvbG9ycy5ib2R5VGV4dCxcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogc2VtYW50aWNDb2xvcnMubGlzdEhlYWRlckJhY2tncm91bmRIb3ZlcmVkLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJzphY3RpdmUnOiB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHNlbWFudGljQ29sb3JzLmxpc3RIZWFkZXJCYWNrZ3JvdW5kUHJlc3NlZCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgY2VsbElzRW1wdHk6IHtcbiAgICAgICAgICAgIHRleHRPdmVyZmxvdzogJ2NsaXAnLFxuICAgICAgICB9LFxuICAgICAgICBjZWxsU2l6ZXI6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMuY2VsbFNpemVyLFxuICAgICAgICAgICAgZm9jdXNDbGVhcigpLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgIGN1cnNvcjogJ2V3LXJlc2l6ZScsXG4gICAgICAgICAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnaW5oZXJpdCcsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IDEsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDE2LFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9jID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgJzphZnRlcic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnXCJcIicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvcnMucmVzaXplckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogJzUwJScsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgJzpmb2N1czphZnRlcic6IGNlbGxTaXplckZhZGVJblN0eWxlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc6aG92ZXI6YWZ0ZXInOiBjZWxsU2l6ZXJGYWRlSW5TdHlsZXNcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgX2NbXCImLlwiICsgY2xhc3NOYW1lcy5pc1Jlc2l6aW5nICsgXCI6YWZ0ZXJcIl0gPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsU2l6ZXJGYWRlSW5TdHlsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94U2hhZG93OiAnMCAwIDVweCAwIHJnYmEoMCwgMCwgMCwgMC40KScsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBfYyksXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBjZWxsSXNSZXNpemluZzogY2xhc3NOYW1lcy5pc1Jlc2l6aW5nLFxuICAgICAgICBjZWxsU2l6ZXJTdGFydDoge1xuICAgICAgICAgICAgbWFyZ2luOiAnMCAtOHB4JyxcbiAgICAgICAgfSxcbiAgICAgICAgY2VsbFNpemVyRW5kOiB7XG4gICAgICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgICAgICBtYXJnaW5MZWZ0OiAtMTYsXG4gICAgICAgIH0sXG4gICAgICAgIGNvbGxhcHNlQnV0dG9uOiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLmNvbGxhcHNlQnV0dG9uLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzUwJSA1MCUnLFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb246ICd0cmFuc2Zvcm0gLjFzIGxpbmVhcicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNBbGxDb2xsYXBzZWRcbiAgICAgICAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lcy5pc0NvbGxhcHNlZCxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDBkZWcpJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogZ2V0UlRMKHRoZW1lKSA/ICdyb3RhdGUoLTkwZGVnKScgOiAncm90YXRlKDkwZGVnKScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgY2hlY2tUb29sdGlwOiBjbGFzc05hbWVzLmNoZWNrVG9vbHRpcCxcbiAgICAgICAgc2l6aW5nT3ZlcmxheTogaXNTaXppbmcgJiYge1xuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICBib3R0b206IDAsXG4gICAgICAgICAgICBjdXJzb3I6ICdldy1yZXNpemUnLFxuICAgICAgICAgICAgYmFja2dyb3VuZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMCknLFxuICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2QgPSB7fSxcbiAgICAgICAgICAgICAgICBfZFtIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICd0cmFuc3BhcmVudCcsXG4gICAgICAgICAgICAgICAgICAgIE1zSGlnaENvbnRyYXN0QWRqdXN0OiAnbm9uZScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfZCksXG4gICAgICAgIH0sXG4gICAgICAgIGFjY2Vzc2libGVMYWJlbDogaGlkZGVuQ29udGVudFN0eWxlLFxuICAgICAgICBkcm9wSGludENpcmNsZVN0eWxlOiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLmRyb3BIaW50Q2lyY2xlU3R5bGUsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogOSxcbiAgICAgICAgICAgICAgICB3aWR0aDogOSxcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IC01LFxuICAgICAgICAgICAgICAgIHRvcDogMzQsXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6ICd2aXNpYmxlJyxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IDEwLFxuICAgICAgICAgICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIgKyBwYWxldHRlLnRoZW1lUHJpbWFyeSxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBwYWxldHRlLndoaXRlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgZHJvcEhpbnRDYXJldFN0eWxlOiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLmRyb3BIaW50Q2FyZXRTdHlsZSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnbm9uZScsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgICAgdG9wOiAtMjgsXG4gICAgICAgICAgICAgICAgbGVmdDogLTYuNSxcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogZm9udHMubWVkaXVtLmZvbnRTaXplLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBwYWxldHRlLnRoZW1lUHJpbWFyeSxcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ3Zpc2libGUnLFxuICAgICAgICAgICAgICAgIHpJbmRleDogMTAsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBkcm9wSGludExpbmVTdHlsZTogW1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5kcm9wSGludExpbmVTdHlsZSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnbm9uZScsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA0MixcbiAgICAgICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBwYWxldHRlLnRoZW1lUHJpbWFyeSxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IDEwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgZHJvcEhpbnRTdHlsZToge1xuICAgICAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURldGFpbHNIZWFkZXIuc3R5bGVzLmpzLm1hcCIsImltcG9ydCB7IGdldEdsb2JhbENsYXNzTmFtZXMsIGdldEZvY3VzU3R5bGUgfSBmcm9tICcuLi8uLi9TdHlsaW5nJztcbmltcG9ydCB7IERFRkFVTFRfUk9XX0hFSUdIVFMgfSBmcm9tICcuL0RldGFpbHNSb3cuc3R5bGVzJztcbmltcG9ydCB7IEhFQURFUl9IRUlHSFQgfSBmcm9tICcuL0RldGFpbHNIZWFkZXIuc3R5bGVzJztcbmltcG9ydCB7IENoZWNrR2xvYmFsQ2xhc3NOYW1lcyB9IGZyb20gJy4uL0NoZWNrL0NoZWNrLnN0eWxlcyc7XG52YXIgR2xvYmFsQ2xhc3NOYW1lcyA9IHtcbiAgICByb290OiAnbXMtRGV0YWlsc1Jvdy1jaGVjaycsXG4gICAgaXNEaXNhYmxlZDogJ21zLURldGFpbHNSb3ctY2hlY2stLWlzRGlzYWJsZWQnLFxuICAgIGlzSGVhZGVyOiAnbXMtRGV0YWlsc1Jvdy1jaGVjay0taXNIZWFkZXInLFxufTtcbmV4cG9ydCB2YXIgQ0hFQ0tfQ0VMTF9XSURUSCA9IDQ4O1xuZXhwb3J0IHZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgdGhlbWUgPSBwcm9wcy50aGVtZSwgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLCBpc0hlYWRlciA9IHByb3BzLmlzSGVhZGVyLCBzZWxlY3RlZCA9IHByb3BzLnNlbGVjdGVkLCBhbnlTZWxlY3RlZCA9IHByb3BzLmFueVNlbGVjdGVkLCBjYW5TZWxlY3QgPSBwcm9wcy5jYW5TZWxlY3QsIGNvbXBhY3QgPSBwcm9wcy5jb21wYWN0LCBpc1Zpc2libGUgPSBwcm9wcy5pc1Zpc2libGU7XG4gICAgdmFyIGNsYXNzTmFtZXMgPSBnZXRHbG9iYWxDbGFzc05hbWVzKEdsb2JhbENsYXNzTmFtZXMsIHRoZW1lKTtcbiAgICB2YXIgcm93SGVpZ2h0ID0gREVGQVVMVF9ST1dfSEVJR0hUUy5yb3dIZWlnaHQsIGNvbXBhY3RSb3dIZWlnaHQgPSBERUZBVUxUX1JPV19IRUlHSFRTLmNvbXBhY3RSb3dIZWlnaHQ7XG4gICAgdmFyIGhlaWdodCA9IGlzSGVhZGVyID8gSEVBREVSX0hFSUdIVCA6IGNvbXBhY3QgPyBjb21wYWN0Um93SGVpZ2h0IDogcm93SGVpZ2h0O1xuICAgIHZhciBpc0NoZWNrVmlzaWJsZSA9IGlzVmlzaWJsZSB8fCBzZWxlY3RlZCB8fCBhbnlTZWxlY3RlZDtcbiAgICByZXR1cm4ge1xuICAgICAgICByb290OiBbY2xhc3NOYW1lcy5yb290LCBjbGFzc05hbWVdLFxuICAgICAgICBjaGVjazogW1xuICAgICAgICAgICAgIWNhblNlbGVjdCAmJiBjbGFzc05hbWVzLmlzRGlzYWJsZWQsXG4gICAgICAgICAgICBpc0hlYWRlciAmJiBjbGFzc05hbWVzLmlzSGVhZGVyLFxuICAgICAgICAgICAgZ2V0Rm9jdXNTdHlsZSh0aGVtZSksXG4gICAgICAgICAgICB0aGVtZS5mb250cy5zbWFsbCxcbiAgICAgICAgICAgIENoZWNrR2xvYmFsQ2xhc3NOYW1lcy5jaGVja0hvc3QsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICAgICAgICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbEFsaWduOiAndG9wJyxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICAgICAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IGlzQ2hlY2tWaXNpYmxlID8gMSA6IDAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgd2lkdGg6IENIRUNLX0NFTExfV0lEVEgsXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpc0Rpc2FibGVkOiBbXSxcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURldGFpbHNSb3dDaGVjay5zdHlsZXMuanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlTWVtb2l6ZXIgfSBmcm9tICcuLi9tZW1vaXplJztcbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvc2VkUmVuZGVyRnVuY3Rpb24ob3V0ZXIpIHtcbiAgICB2YXIgb3V0ZXJNZW1vaXplciA9IGNyZWF0ZU1lbW9pemVyKGZ1bmN0aW9uIChpbm5lcikge1xuICAgICAgICB2YXIgaW5uZXJNZW1vaXplciA9IGNyZWF0ZU1lbW9pemVyKGZ1bmN0aW9uIChkZWZhdWx0UmVuZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGlubmVyUHJvcHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5uZXIoaW5uZXJQcm9wcywgZGVmYXVsdFJlbmRlcik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChvdXRlclByb3BzLCBkZWZhdWx0UmVuZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gb3V0ZXIob3V0ZXJQcm9wcywgZGVmYXVsdFJlbmRlciA/IGlubmVyTWVtb2l6ZXIoZGVmYXVsdFJlbmRlcikgOiBpbm5lcik7XG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIG91dGVyTWVtb2l6ZXI7XG59XG52YXIgbWVtb2l6ZXIgPSBjcmVhdGVNZW1vaXplcihjcmVhdGVDb21wb3NlZFJlbmRlckZ1bmN0aW9uKTtcbi8qKlxuICogQ29tcG9zZXMgdHdvICdyZW5kZXIgZnVuY3Rpb25zJyB0byBwcm9kdWNlIGEgZmluYWwgcmVuZGVyIGZ1bmN0aW9uIHRoYXQgcmVuZGVyc1xuICogdGhlIG91dGVyIGZ1bmN0aW9uLCBwYXNzaW5nIHRoZSBpbm5lciBmdW5jdGlvbiBhcyAnZGVmYXVsdCByZW5kZXInLiBUaGUgaW5uZXIgZnVuY3Rpb25cbiAqIGlzIHRoZW4gcGFzc2VkIHRoZSBvcmlnaW5hbCAnZGVmYXVsdCByZW5kZXInIHByb3AuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wb3NlUmVuZGVyRnVuY3Rpb24ob3V0ZXIsIGlubmVyKSB7XG4gICAgcmV0dXJuIG1lbW9pemVyKG91dGVyKShpbm5lcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wb3NlUmVuZGVyRnVuY3Rpb24uanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fcmVzdCB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3NzLCBzdHlsZWQsIGNsYXNzTmFtZXNGdW5jdGlvbiB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBDaGVjayB9IGZyb20gJy4uLy4uL0NoZWNrJztcbmltcG9ydCB7IGdldFN0eWxlcyB9IGZyb20gJy4vRGV0YWlsc1Jvd0NoZWNrLnN0eWxlcyc7XG5pbXBvcnQgeyBjb21wb3NlUmVuZGVyRnVuY3Rpb24gfSBmcm9tICdAdWlmYWJyaWMvdXRpbGl0aWVzJztcbnZhciBnZXRDbGFzc05hbWVzID0gY2xhc3NOYW1lc0Z1bmN0aW9uKCk7XG52YXIgRGV0YWlsc1Jvd0NoZWNrQmFzZSA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBfYSA9IHByb3BzLmlzVmlzaWJsZSwgaXNWaXNpYmxlID0gX2EgPT09IHZvaWQgMCA/IGZhbHNlIDogX2EsIF9iID0gcHJvcHMuY2FuU2VsZWN0LCBjYW5TZWxlY3QgPSBfYiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYiwgX2MgPSBwcm9wcy5hbnlTZWxlY3RlZCwgYW55U2VsZWN0ZWQgPSBfYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYywgX2QgPSBwcm9wcy5zZWxlY3RlZCwgc2VsZWN0ZWQgPSBfZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfZCwgX2UgPSBwcm9wcy5pc0hlYWRlciwgaXNIZWFkZXIgPSBfZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfZSwgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLCBjaGVja0NsYXNzTmFtZSA9IHByb3BzLmNoZWNrQ2xhc3NOYW1lLCBzdHlsZXMgPSBwcm9wcy5zdHlsZXMsIHRoZW1lID0gcHJvcHMudGhlbWUsIGNvbXBhY3QgPSBwcm9wcy5jb21wYWN0LCBvblJlbmRlckRldGFpbHNDaGVja2JveCA9IHByb3BzLm9uUmVuZGVyRGV0YWlsc0NoZWNrYm94LCBfZiA9IHByb3BzLnVzZUZhc3RJY29ucywgdXNlRmFzdEljb25zID0gX2YgPT09IHZvaWQgMCA/IHRydWUgOiBfZiwgLy8gbXVzdCBiZSByZW1vdmVkIGZyb20gYnV0dG9uUHJvcHNcbiAgICBidXR0b25Qcm9wcyA9IF9fcmVzdChwcm9wcywgW1wiaXNWaXNpYmxlXCIsIFwiY2FuU2VsZWN0XCIsIFwiYW55U2VsZWN0ZWRcIiwgXCJzZWxlY3RlZFwiLCBcImlzSGVhZGVyXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hlY2tDbGFzc05hbWVcIiwgXCJzdHlsZXNcIiwgXCJ0aGVtZVwiLCBcImNvbXBhY3RcIiwgXCJvblJlbmRlckRldGFpbHNDaGVja2JveFwiLCBcInVzZUZhc3RJY29uc1wiXSk7XG4gICAgdmFyIGRlZmF1bHRDaGVja2JveFJlbmRlciA9IHVzZUZhc3RJY29ucyA/IF9mYXN0RGVmYXVsdENoZWNrYm94UmVuZGVyIDogX2RlZmF1bHRDaGVja2JveFJlbmRlcjtcbiAgICB2YXIgb25SZW5kZXJDaGVja2JveCA9IG9uUmVuZGVyRGV0YWlsc0NoZWNrYm94XG4gICAgICAgID8gY29tcG9zZVJlbmRlckZ1bmN0aW9uKG9uUmVuZGVyRGV0YWlsc0NoZWNrYm94LCBkZWZhdWx0Q2hlY2tib3hSZW5kZXIpXG4gICAgICAgIDogZGVmYXVsdENoZWNrYm94UmVuZGVyO1xuICAgIHZhciBjbGFzc05hbWVzID0gZ2V0Q2xhc3NOYW1lcyhzdHlsZXMsIHtcbiAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICBjYW5TZWxlY3Q6IGNhblNlbGVjdCxcbiAgICAgICAgc2VsZWN0ZWQ6IHNlbGVjdGVkLFxuICAgICAgICBhbnlTZWxlY3RlZDogYW55U2VsZWN0ZWQsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICBpc0hlYWRlcjogaXNIZWFkZXIsXG4gICAgICAgIGlzVmlzaWJsZTogaXNWaXNpYmxlLFxuICAgICAgICBjb21wYWN0OiBjb21wYWN0LFxuICAgIH0pO1xuICAgIHZhciBkZXRhaWxzQ2hlY2tib3hQcm9wcyA9IHtcbiAgICAgICAgY2hlY2tlZDogc2VsZWN0ZWQsXG4gICAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICB9O1xuICAgIHJldHVybiBjYW5TZWxlY3QgPyAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfX2Fzc2lnbih7fSwgYnV0dG9uUHJvcHMsIHsgcm9sZTogXCJjaGVja2JveFwiLCBcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIGNsYXNzTmFtZTogY3NzKGNsYXNzTmFtZXMucm9vdCwgY2xhc3NOYW1lcy5jaGVjayksIFwiYXJpYS1jaGVja2VkXCI6IHNlbGVjdGVkLCBcImRhdGEtc2VsZWN0aW9uLXRvZ2dsZVwiOiB0cnVlLCBcImRhdGEtYXV0b21hdGlvbmlkXCI6IFwiRGV0YWlsc1Jvd0NoZWNrXCIgfSksIG9uUmVuZGVyQ2hlY2tib3goZGV0YWlsc0NoZWNrYm94UHJvcHMpKSkgOiAoXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfX2Fzc2lnbih7fSwgYnV0dG9uUHJvcHMsIHsgY2xhc3NOYW1lOiBjc3MoY2xhc3NOYW1lcy5yb290LCBjbGFzc05hbWVzLmNoZWNrKSB9KSkpO1xufTtcbnZhciBGYXN0Q2hlY2sgPSBSZWFjdC5tZW1vKGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENoZWNrLCB7IHRoZW1lOiBwcm9wcy50aGVtZSwgY2hlY2tlZDogcHJvcHMuY2hlY2tlZCwgY2xhc3NOYW1lOiBwcm9wcy5jbGFzc05hbWUsIHVzZUZhc3RJY29uczogdHJ1ZSB9KTtcbn0pO1xuZnVuY3Rpb24gX2RlZmF1bHRDaGVja2JveFJlbmRlcihjaGVja2JveFByb3BzKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2hlY2ssIHsgY2hlY2tlZDogY2hlY2tib3hQcm9wcy5jaGVja2VkIH0pO1xufVxuZnVuY3Rpb24gX2Zhc3REZWZhdWx0Q2hlY2tib3hSZW5kZXIoY2hlY2tib3hQcm9wcykge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEZhc3RDaGVjaywgeyB0aGVtZTogY2hlY2tib3hQcm9wcy50aGVtZSwgY2hlY2tlZDogY2hlY2tib3hQcm9wcy5jaGVja2VkIH0pO1xufVxuZXhwb3J0IHZhciBEZXRhaWxzUm93Q2hlY2sgPSBzdHlsZWQoRGV0YWlsc1Jvd0NoZWNrQmFzZSwgZ2V0U3R5bGVzLCB1bmRlZmluZWQsIHsgc2NvcGU6ICdEZXRhaWxzUm93Q2hlY2snIH0sIHRydWUpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGV0YWlsc1Jvd0NoZWNrLmpzLm1hcCIsImV4cG9ydCB2YXIgU0VMRUNUSU9OX0NIQU5HRSA9ICdjaGFuZ2UnO1xuLyoqXG4gKiB7QGRvY0NhdGVnb3J5IFNlbGVjdGlvbn1cbiAqL1xuZXhwb3J0IHZhciBTZWxlY3Rpb25Nb2RlO1xuKGZ1bmN0aW9uIChTZWxlY3Rpb25Nb2RlKSB7XG4gICAgU2VsZWN0aW9uTW9kZVtTZWxlY3Rpb25Nb2RlW1wibm9uZVwiXSA9IDBdID0gXCJub25lXCI7XG4gICAgU2VsZWN0aW9uTW9kZVtTZWxlY3Rpb25Nb2RlW1wic2luZ2xlXCJdID0gMV0gPSBcInNpbmdsZVwiO1xuICAgIFNlbGVjdGlvbk1vZGVbU2VsZWN0aW9uTW9kZVtcIm11bHRpcGxlXCJdID0gMl0gPSBcIm11bHRpcGxlXCI7XG59KShTZWxlY3Rpb25Nb2RlIHx8IChTZWxlY3Rpb25Nb2RlID0ge30pKTtcbi8qKlxuICoge0Bkb2NDYXRlZ29yeSBTZWxlY3Rpb259XG4gKi9cbmV4cG9ydCB2YXIgU2VsZWN0aW9uRGlyZWN0aW9uO1xuKGZ1bmN0aW9uIChTZWxlY3Rpb25EaXJlY3Rpb24pIHtcbiAgICBTZWxlY3Rpb25EaXJlY3Rpb25bU2VsZWN0aW9uRGlyZWN0aW9uW1wiaG9yaXpvbnRhbFwiXSA9IDBdID0gXCJob3Jpem9udGFsXCI7XG4gICAgU2VsZWN0aW9uRGlyZWN0aW9uW1NlbGVjdGlvbkRpcmVjdGlvbltcInZlcnRpY2FsXCJdID0gMV0gPSBcInZlcnRpY2FsXCI7XG59KShTZWxlY3Rpb25EaXJlY3Rpb24gfHwgKFNlbGVjdGlvbkRpcmVjdGlvbiA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TZWxlY3Rpb24udHlwZXMuanMubWFwIiwiaW1wb3J0IHsgRXZlbnRHcm91cCwgZ2V0RG9jdW1lbnQgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xudmFyIE1PVVNFRE9XTl9QUklNQVJZX0JVVFRPTiA9IDA7IC8vIGZvciBtb3VzZSBkb3duIGV2ZW50IHdlIGFyZSB1c2luZyBldi5idXR0b24gcHJvcGVydHksIDAgbWVhbnMgbGVmdCBidXR0b25cbnZhciBNT1VTRU1PVkVfUFJJTUFSWV9CVVRUT04gPSAxOyAvLyBmb3IgbW91c2UgbW92ZSBldmVudCB3ZSBhcmUgdXNpbmcgZXYuYnV0dG9ucyBwcm9wZXJ0eSwgMSBtZWFucyBsZWZ0IGJ1dHRvblxudmFyIERyYWdEcm9wSGVscGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERyYWdEcm9wSGVscGVyKHBhcmFtcykge1xuICAgICAgICB0aGlzLl9zZWxlY3Rpb24gPSBwYXJhbXMuc2VsZWN0aW9uO1xuICAgICAgICB0aGlzLl9kcmFnRW50ZXJDb3VudHMgPSB7fTtcbiAgICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0cyA9IHt9O1xuICAgICAgICB0aGlzLl9sYXN0SWQgPSAwO1xuICAgICAgICAvLyBUbyBtYWtlIHRoaXMgY2xhc3MgY2hlYXAgdG8gY3JlYXRlLCB3aGljaCBhbGxvd3Mgc2ltcGxpZnlpbmcgc29tZSBsb2dpYyBlbHNld2hlcmUsXG4gICAgICAgIC8vIG9ubHkgaW5pdGlhbGl6ZSB0aGUgZXZlbnQgZ3JvdXAgYW5kIGdsb2JhbCBldmVudCBoYW5kbGVycyBhcyBuZWVkZWQuXG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgfVxuICAgIERyYWdEcm9wSGVscGVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fZXZlbnRzKSB7XG4gICAgICAgICAgICB0aGlzLl9ldmVudHMuZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEcmFnRHJvcEhlbHBlci5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKHJvb3QsIGV2ZW50cywgZHJhZ0Ryb3BPcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEdyb3VwKHRoaXMpO1xuICAgICAgICAgICAgdmFyIGRvYyA9IGdldERvY3VtZW50KCk7XG4gICAgICAgICAgICAvLyBjbGVhciBkcmFnIGRhdGEgd2hlbiBtb3VzZSB1cCwgdXNlIGNhcHR1cmUgZXZlbnQgdG8gZW5zdXJlIGl0IHdpbGwgYmUgcnVuXG4gICAgICAgICAgICBpZiAoZG9jKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzLm9uKGRvYy5ib2R5LCAnbW91c2V1cCcsIHRoaXMuX29uTW91c2VVcC5iaW5kKHRoaXMpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMub24oZG9jLCAnbW91c2V1cCcsIHRoaXMuX29uRG9jdW1lbnRNb3VzZVVwLmJpbmQodGhpcyksIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfYSA9IGRyYWdEcm9wT3B0aW9ucy5rZXksIGtleSA9IF9hID09PSB2b2lkIDAgPyBcIlwiICsgKyt0aGlzLl9sYXN0SWQgOiBfYTtcbiAgICAgICAgdmFyIGhhbmRsZXJzID0gW107XG4gICAgICAgIHZhciBvbkRyYWdTdGFydDtcbiAgICAgICAgdmFyIG9uRHJhZ0xlYXZlO1xuICAgICAgICB2YXIgb25EcmFnRW50ZXI7XG4gICAgICAgIHZhciBvbkRyYWdFbmQ7XG4gICAgICAgIHZhciBvbkRyb3A7XG4gICAgICAgIHZhciBvbkRyYWdPdmVyO1xuICAgICAgICB2YXIgb25Nb3VzZURvd247XG4gICAgICAgIHZhciBpc0RyYWdnYWJsZTtcbiAgICAgICAgdmFyIGlzRHJvcHBhYmxlO1xuICAgICAgICB2YXIgYWN0aXZlVGFyZ2V0O1xuICAgICAgICBpZiAoZHJhZ0Ryb3BPcHRpb25zICYmIHJvb3QpIHtcbiAgICAgICAgICAgIHZhciBldmVudE1hcCA9IGRyYWdEcm9wT3B0aW9ucy5ldmVudE1hcCwgY29udGV4dCA9IGRyYWdEcm9wT3B0aW9ucy5jb250ZXh0LCB1cGRhdGVEcm9wU3RhdGVfMSA9IGRyYWdEcm9wT3B0aW9ucy51cGRhdGVEcm9wU3RhdGU7XG4gICAgICAgICAgICB2YXIgZHJhZ0Ryb3BUYXJnZXQgPSB7XG4gICAgICAgICAgICAgICAgcm9vdDogcm9vdCxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBkcmFnRHJvcE9wdGlvbnMsXG4gICAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaXNEcmFnZ2FibGUgPSB0aGlzLl9pc0RyYWdnYWJsZShkcmFnRHJvcFRhcmdldCk7XG4gICAgICAgICAgICBpc0Ryb3BwYWJsZSA9IHRoaXMuX2lzRHJvcHBhYmxlKGRyYWdEcm9wVGFyZ2V0KTtcbiAgICAgICAgICAgIGlmIChpc0RyYWdnYWJsZSB8fCBpc0Ryb3BwYWJsZSkge1xuICAgICAgICAgICAgICAgIGlmIChldmVudE1hcCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGV2ZW50TWFwXzEgPSBldmVudE1hcDsgX2kgPCBldmVudE1hcF8xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50XzEgPSBldmVudE1hcF8xW19pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGVyID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBldmVudF8xLmNhbGxiYWNrLmJpbmQobnVsbCwgY29udGV4dCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lOiBldmVudF8xLmV2ZW50TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzLm9uKHJvb3QsIGhhbmRsZXIuZXZlbnROYW1lLCBoYW5kbGVyLmNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0Ryb3BwYWJsZSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSB0YXJnZXQgaXMgZHJvcHBhYmxlLCB3aXJlIHVwIGdsb2JhbCBldmVudCBsaXN0ZW5lcnMgdG8gdHJhY2sgZHJvcC1yZWxhdGVkIGV2ZW50cy5cbiAgICAgICAgICAgICAgICBvbkRyYWdMZWF2ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWV2ZW50LmlzSGFuZGxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuaXNIYW5kbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9kcmFnRW50ZXJDb3VudHNba2V5XS0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9kcmFnRW50ZXJDb3VudHNba2V5XSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZURyb3BTdGF0ZV8xKGZhbHNlIC8qIGlzRHJvcHBpbmcgKi8sIGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgb25EcmFnRW50ZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gbmVlZGVkIGZvciBJRVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWV2ZW50LmlzSGFuZGxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuaXNIYW5kbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9kcmFnRW50ZXJDb3VudHNba2V5XSsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9kcmFnRW50ZXJDb3VudHNba2V5XSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZURyb3BTdGF0ZV8xKHRydWUgLyogaXNEcm9wcGluZyAqLywgZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBvbkRyYWdFbmQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2RyYWdFbnRlckNvdW50c1trZXldID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlRHJvcFN0YXRlXzEoZmFsc2UgLyogaXNEcm9wcGluZyAqLywgZXZlbnQpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgb25Ecm9wID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9kcmFnRW50ZXJDb3VudHNba2V5XSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZURyb3BTdGF0ZV8xKGZhbHNlIC8qIGlzRHJvcHBpbmcgKi8sIGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRyYWdEcm9wT3B0aW9ucy5vbkRyb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdEcm9wT3B0aW9ucy5vbkRyb3AoZHJhZ0Ryb3BPcHRpb25zLmNvbnRleHQuZGF0YSwgZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBvbkRyYWdPdmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkcmFnRHJvcE9wdGlvbnMub25EcmFnT3Zlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ0Ryb3BPcHRpb25zLm9uRHJhZ092ZXIoZHJhZ0Ryb3BPcHRpb25zLmNvbnRleHQuZGF0YSwgZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLl9kcmFnRW50ZXJDb3VudHNba2V5XSA9IDA7XG4gICAgICAgICAgICAgICAgLy8gZHJhZ2VudGVyIGFuZCBkcmFnbGVhdmUgd2lsbCBiZSBmaXJlZCB3aGVuIGhvdmVyIHRvIHRoZSBjaGlsZCBlbGVtZW50XG4gICAgICAgICAgICAgICAgLy8gYnV0IHdlIG9ubHkgd2FudCB0byBjaGFuZ2Ugc3RhdGUgd2hlbiBlbnRlciBvciBsZWF2ZSB0aGUgY3VycmVudCBlbGVtZW50XG4gICAgICAgICAgICAgICAgLy8gdXNlIHRoZSBjb3VudCB0byBlbnN1cmUgaXQuXG4gICAgICAgICAgICAgICAgZXZlbnRzLm9uKHJvb3QsICdkcmFnZW50ZXInLCBvbkRyYWdFbnRlcik7XG4gICAgICAgICAgICAgICAgZXZlbnRzLm9uKHJvb3QsICdkcmFnbGVhdmUnLCBvbkRyYWdMZWF2ZSk7XG4gICAgICAgICAgICAgICAgZXZlbnRzLm9uKHJvb3QsICdkcmFnZW5kJywgb25EcmFnRW5kKTtcbiAgICAgICAgICAgICAgICBldmVudHMub24ocm9vdCwgJ2Ryb3AnLCBvbkRyb3ApO1xuICAgICAgICAgICAgICAgIGV2ZW50cy5vbihyb290LCAnZHJhZ292ZXInLCBvbkRyYWdPdmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0RyYWdnYWJsZSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSB0YXJnZXQgaXMgZHJhZ2dhYmxlLCB3aXJlIHVwIGxvY2FsIGV2ZW50IGxpc3RlbmVycyBmb3IgbW91c2UgZXZlbnRzLlxuICAgICAgICAgICAgICAgIG9uTW91c2VEb3duID0gdGhpcy5fb25Nb3VzZURvd24uYmluZCh0aGlzLCBkcmFnRHJvcFRhcmdldCk7XG4gICAgICAgICAgICAgICAgb25EcmFnRW5kID0gdGhpcy5fb25EcmFnRW5kLmJpbmQodGhpcywgZHJhZ0Ryb3BUYXJnZXQpO1xuICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gYWRkIGluIGRhdGEgc28gdGhhdCBvbiBGaXJlZm94IHdlIHNob3cgdGhlIGdob3N0IGVsZW1lbnQgd2hlbiBkcmFnZ2luZ1xuICAgICAgICAgICAgICAgIG9uRHJhZ1N0YXJ0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gZHJhZ0Ryb3BPcHRpb25zO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm9uRHJhZ1N0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uRHJhZ1N0YXJ0KG9wdGlvbnMuY29udGV4dC5kYXRhLCBvcHRpb25zLmNvbnRleHQuaW5kZXgsIF90aGlzLl9zZWxlY3Rpb24uZ2V0U2VsZWN0aW9uKCksIGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5faXNEcmFnZ2luZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5kYXRhVHJhbnNmZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5zZXREYXRhKCdpZCcsIHJvb3QuaWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBldmVudHMub24ocm9vdCwgJ2RyYWdzdGFydCcsIG9uRHJhZ1N0YXJ0KTtcbiAgICAgICAgICAgICAgICBldmVudHMub24ocm9vdCwgJ21vdXNlZG93bicsIG9uTW91c2VEb3duKTtcbiAgICAgICAgICAgICAgICBldmVudHMub24ocm9vdCwgJ2RyYWdlbmQnLCBvbkRyYWdFbmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWN0aXZlVGFyZ2V0ID0ge1xuICAgICAgICAgICAgICAgIHRhcmdldDogZHJhZ0Ryb3BUYXJnZXQsXG4gICAgICAgICAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2FjdGl2ZVRhcmdldHNba2V5XSA9PT0gYWN0aXZlVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgX3RoaXMuX2FjdGl2ZVRhcmdldHNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocm9vdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBoYW5kbGVyc18xID0gaGFuZGxlcnM7IF9pIDwgaGFuZGxlcnNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFuZGxlciA9IGhhbmRsZXJzXzFbX2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9ldmVudHMub2ZmKHJvb3QsIGhhbmRsZXIuZXZlbnROYW1lLCBoYW5kbGVyLmNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Ryb3BwYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50cy5vZmYocm9vdCwgJ2RyYWdlbnRlcicsIG9uRHJhZ0VudGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudHMub2ZmKHJvb3QsICdkcmFnbGVhdmUnLCBvbkRyYWdMZWF2ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzLm9mZihyb290LCAnZHJhZ2VuZCcsIG9uRHJhZ0VuZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzLm9mZihyb290LCAnZHJhZ292ZXInLCBvbkRyYWdPdmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudHMub2ZmKHJvb3QsICdkcm9wJywgb25Ecm9wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0RyYWdnYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50cy5vZmYocm9vdCwgJ2RyYWdzdGFydCcsIG9uRHJhZ1N0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudHMub2ZmKHJvb3QsICdtb3VzZWRvd24nLCBvbk1vdXNlRG93bik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzLm9mZihyb290LCAnZHJhZ2VuZCcsIG9uRHJhZ0VuZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldHNba2V5XSA9IGFjdGl2ZVRhcmdldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICBkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZVRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmVUYXJnZXQuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBEcmFnRHJvcEhlbHBlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAocm9vdCwga2V5KSB7XG4gICAgICAgIHZhciBhY3RpdmVUYXJnZXQgPSB0aGlzLl9hY3RpdmVUYXJnZXRzW2tleV07XG4gICAgICAgIGlmIChhY3RpdmVUYXJnZXQpIHtcbiAgICAgICAgICAgIGFjdGl2ZVRhcmdldC5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERyYWdEcm9wSGVscGVyLnByb3RvdHlwZS5fb25EcmFnRW5kID0gZnVuY3Rpb24gKHRhcmdldCwgZXZlbnQpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0YXJnZXQub3B0aW9ucztcbiAgICAgICAgaWYgKG9wdGlvbnMub25EcmFnRW5kKSB7XG4gICAgICAgICAgICBvcHRpb25zLm9uRHJhZ0VuZChvcHRpb25zLmNvbnRleHQuZGF0YSwgZXZlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBjbGVhciBkcmFnIGRhdGEgd2hlbiBtb3VzZSB1cCBvbiBib2R5XG4gICAgICovXG4gICAgRHJhZ0Ryb3BIZWxwZXIucHJvdG90eXBlLl9vbk1vdXNlVXAgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5faXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5fZHJhZ0RhdGEpIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3Qua2V5cyh0aGlzLl9hY3RpdmVUYXJnZXRzKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgIHZhciBhY3RpdmVUYXJnZXQgPSB0aGlzLl9hY3RpdmVUYXJnZXRzW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZVRhcmdldC50YXJnZXQucm9vdCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMub2ZmKGFjdGl2ZVRhcmdldC50YXJnZXQucm9vdCwgJ21vdXNlbW92ZScpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMub2ZmKGFjdGl2ZVRhcmdldC50YXJnZXQucm9vdCwgJ21vdXNlbGVhdmUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fZHJhZ0RhdGEuZHJvcFRhcmdldCkge1xuICAgICAgICAgICAgICAgIC8vIHJhaXNlIGRyYWdsZWF2ZSBldmVudCB0byBsZXQgZHJvcFRhcmdldCBrbm93IGl0IG5lZWQgdG8gcmVtb3ZlIGRyb3BwaW5nIHN0eWxlXG4gICAgICAgICAgICAgICAgRXZlbnRHcm91cC5yYWlzZSh0aGlzLl9kcmFnRGF0YS5kcm9wVGFyZ2V0LnJvb3QsICdkcmFnbGVhdmUnKTtcbiAgICAgICAgICAgICAgICBFdmVudEdyb3VwLnJhaXNlKHRoaXMuX2RyYWdEYXRhLmRyb3BUYXJnZXQucm9vdCwgJ2Ryb3AnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kcmFnRGF0YSA9IG51bGw7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBjbGVhciBkcmFnIGRhdGEgd2hlbiBtb3VzZSB1cCBvdXRzaWRlIG9mIHRoZSBkb2N1bWVudFxuICAgICAqL1xuICAgIERyYWdEcm9wSGVscGVyLnByb3RvdHlwZS5fb25Eb2N1bWVudE1vdXNlVXAgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIGRvYyA9IGdldERvY3VtZW50KCk7XG4gICAgICAgIGlmIChkb2MgJiYgZXZlbnQudGFyZ2V0ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9vbk1vdXNlVXAoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiB3aGVuIG1vdXNlIG1vdmUgb3ZlciBhIG5ldyBkcm9wIHRhcmdldCB3aGlsZSBkcmFnZ2luZyBzb21lIGl0ZW1zLFxuICAgICAqIGZpcmUgZHJhZ2xlYXZlIG9uIHRoZSBvbGQgdGFyZ2V0IGFuZCBmaXJlIGRyYWdlbnRlciB0byB0aGUgbmV3IHRhcmdldFxuICAgICAqIFRoZSB0YXJnZXQgd2lsbCBoYW5kbGUgc3R5bGUgY2hhbmdlIG9uIGRyYWdlbnRlciBhbmQgZHJhZ2xlYXZlIGV2ZW50cy5cbiAgICAgKi9cbiAgICBEcmFnRHJvcEhlbHBlci5wcm90b3R5cGUuX29uTW91c2VNb3ZlID0gZnVuY3Rpb24gKHRhcmdldCwgZXZlbnQpIHtcbiAgICAgICAgdmFyIFxuICAgICAgICAvLyB1c2UgYnV0dG9ucyBwcm9wZXJ0eSBoZXJlIHNpbmNlIGV2LmJ1dHRvbiBpbiBzb21lIGVkZ2UgY2FzZSBpcyBub3QgdXBkYXRpbmcgd2VsbCBkdXJpbmcgdGhlIG1vdmUuXG4gICAgICAgIC8vIGJ1dCBmaXJlZm94IGRvZXNuJ3Qgc3VwcG9ydCBpdCwgc28gd2Ugc2V0IHRoZSBkZWZhdWx0IHZhbHVlIHdoZW4gaXQgaXMgbm90IGRlZmluZWQuXG4gICAgICAgIF9hID0gZXZlbnQuYnV0dG9ucywgXG4gICAgICAgIC8vIHVzZSBidXR0b25zIHByb3BlcnR5IGhlcmUgc2luY2UgZXYuYnV0dG9uIGluIHNvbWUgZWRnZSBjYXNlIGlzIG5vdCB1cGRhdGluZyB3ZWxsIGR1cmluZyB0aGUgbW92ZS5cbiAgICAgICAgLy8gYnV0IGZpcmVmb3ggZG9lc24ndCBzdXBwb3J0IGl0LCBzbyB3ZSBzZXQgdGhlIGRlZmF1bHQgdmFsdWUgd2hlbiBpdCBpcyBub3QgZGVmaW5lZC5cbiAgICAgICAgYnV0dG9ucyA9IF9hID09PSB2b2lkIDAgPyBNT1VTRU1PVkVfUFJJTUFSWV9CVVRUT04gOiBfYTtcbiAgICAgICAgaWYgKHRoaXMuX2RyYWdEYXRhICYmIGJ1dHRvbnMgIT09IE1PVVNFTU9WRV9QUklNQVJZX0JVVFRPTikge1xuICAgICAgICAgICAgLy8gY2FuY2VsIG1vdXNlIGRvd24gZXZlbnQgYW5kIHJldHVybiBlYXJseSB3aGVuIHRoZSBwcmltYXJ5IGJ1dHRvbiBpcyBub3QgcHJlc3NlZFxuICAgICAgICAgICAgdGhpcy5fb25Nb3VzZVVwKGV2ZW50KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcm9vdCA9IHRhcmdldC5yb290LCBrZXkgPSB0YXJnZXQua2V5O1xuICAgICAgICBpZiAodGhpcy5faXNEcmFnZ2luZykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2lzRHJvcHBhYmxlKHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAvLyB3ZSBjYW4gaGF2ZSBuZXN0ZWQgZHJvcCB0YXJnZXRzIGluIHRoZSBET00sIGxpa2UgYSBmb2xkZXIgaW5zaWRlIGEgZ3JvdXAuIEluIHRoYXQgY2FzZSwgd2hlbiB3ZSBkcmFnIGludG9cbiAgICAgICAgICAgICAgICAvLyB0aGUgaW5uZXIgdGFyZ2V0IChmb2xkZXIpLCB3ZSBmaXJzdCBzZXQgZHJvcFRhcmdldCB0byB0aGUgaW5uZXIgZWxlbWVudC4gQnV0IHRoZSBzYW1lIGV2ZW50IGlzIGJ1YmJsZWQgdG8gdGhlXG4gICAgICAgICAgICAgICAgLy8gb3V0ZXIgdGFyZ2V0IHRvbywgYW5kIHdlIG5lZWQgdG8gcHJldmVudCB0aGUgb3V0ZXIgb25lIGZyb20gdGFraW5nIG92ZXIuXG4gICAgICAgICAgICAgICAgLy8gU28sIGNoZWNrIGlmIHRoZSBsYXN0IGRyb3BUYXJnZXQgaXMgbm90IGEgY2hpbGQgb2YgdGhlIGN1cnJlbnQuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2RyYWdEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kcmFnRGF0YS5kcm9wVGFyZ2V0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kcmFnRGF0YS5kcm9wVGFyZ2V0LmtleSAhPT0ga2V5ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhdGhpcy5faXNDaGlsZChyb290LCB0aGlzLl9kcmFnRGF0YS5kcm9wVGFyZ2V0LnJvb3QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZHJhZ0VudGVyQ291bnRzW3RoaXMuX2RyYWdEYXRhLmRyb3BUYXJnZXQua2V5XSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFdmVudEdyb3VwLnJhaXNlKHRoaXMuX2RyYWdEYXRhLmRyb3BUYXJnZXQucm9vdCwgJ2RyYWdsZWF2ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50R3JvdXAucmFpc2Uocm9vdCwgJ2RyYWdlbnRlcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RyYWdEYXRhLmRyb3BUYXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIHdoZW4gbW91c2UgbGVhdmUgYSB0YXJnZXQgd2hpbGUgZHJhZ2dpbmcgc29tZSBpdGVtcywgZmlyZSBkcmFnbGVhdmUgdG8gdGhlIHRhcmdldFxuICAgICAqL1xuICAgIERyYWdEcm9wSGVscGVyLnByb3RvdHlwZS5fb25Nb3VzZUxlYXZlID0gZnVuY3Rpb24gKHRhcmdldCwgZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9kcmFnRGF0YSAmJiB0aGlzLl9kcmFnRGF0YS5kcm9wVGFyZ2V0ICYmIHRoaXMuX2RyYWdEYXRhLmRyb3BUYXJnZXQua2V5ID09PSB0YXJnZXQua2V5KSB7XG4gICAgICAgICAgICAgICAgRXZlbnRHcm91cC5yYWlzZSh0YXJnZXQucm9vdCwgJ2RyYWdsZWF2ZScpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2RyYWdEYXRhLmRyb3BUYXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIHdoZW4gbW91c2UgZG93biBvbiBhIGRyYWdnYWJsZSBpdGVtLCB3ZSBzdGFydCB0byB0cmFjayBkcmFnZGF0YS5cbiAgICAgKi9cbiAgICBEcmFnRHJvcEhlbHBlci5wcm90b3R5cGUuX29uTW91c2VEb3duID0gZnVuY3Rpb24gKHRhcmdldCwgZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmJ1dHRvbiAhPT0gTU9VU0VET1dOX1BSSU1BUllfQlVUVE9OKSB7XG4gICAgICAgICAgICAvLyBJZ25vcmUgYW55dGhpbmcgZXhjZXB0IHRoZSBwcmltYXJ5IGJ1dHRvbi5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faXNEcmFnZ2FibGUodGFyZ2V0KSkge1xuICAgICAgICAgICAgdGhpcy5fZHJhZ0RhdGEgPSB7XG4gICAgICAgICAgICAgICAgY2xpZW50WDogZXZlbnQuY2xpZW50WCxcbiAgICAgICAgICAgICAgICBjbGllbnRZOiBldmVudC5jbGllbnRZLFxuICAgICAgICAgICAgICAgIGV2ZW50VGFyZ2V0OiBldmVudC50YXJnZXQsXG4gICAgICAgICAgICAgICAgZHJhZ1RhcmdldDogdGFyZ2V0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3Qua2V5cyh0aGlzLl9hY3RpdmVUYXJnZXRzKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgIHZhciBhY3RpdmVUYXJnZXQgPSB0aGlzLl9hY3RpdmVUYXJnZXRzW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZVRhcmdldC50YXJnZXQucm9vdCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMub24oYWN0aXZlVGFyZ2V0LnRhcmdldC5yb290LCAnbW91c2Vtb3ZlJywgdGhpcy5fb25Nb3VzZU1vdmUuYmluZCh0aGlzLCBhY3RpdmVUYXJnZXQudGFyZ2V0KSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50cy5vbihhY3RpdmVUYXJnZXQudGFyZ2V0LnJvb3QsICdtb3VzZWxlYXZlJywgdGhpcy5fb25Nb3VzZUxlYXZlLmJpbmQodGhpcywgYWN0aXZlVGFyZ2V0LnRhcmdldCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2RyYWdEYXRhID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGNoaWxkIHRhcmdldCBpcyBhIGRlc2NlbmRhbnQgb2YgdGhlIHBhcmVudFxuICAgICAqL1xuICAgIERyYWdEcm9wSGVscGVyLnByb3RvdHlwZS5faXNDaGlsZCA9IGZ1bmN0aW9uIChwYXJlbnRFbGVtZW50LCBjaGlsZEVsZW1lbnQpIHtcbiAgICAgICAgd2hpbGUgKGNoaWxkRWxlbWVudCAmJiBjaGlsZEVsZW1lbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkRWxlbWVudC5wYXJlbnRFbGVtZW50ID09PSBwYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGlsZEVsZW1lbnQgPSBjaGlsZEVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBEcmFnRHJvcEhlbHBlci5wcm90b3R5cGUuX2lzRHJhZ2dhYmxlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRhcmdldC5vcHRpb25zO1xuICAgICAgICByZXR1cm4gISEob3B0aW9ucy5jYW5EcmFnICYmIG9wdGlvbnMuY2FuRHJhZyhvcHRpb25zLmNvbnRleHQuZGF0YSkpO1xuICAgIH07XG4gICAgRHJhZ0Ryb3BIZWxwZXIucHJvdG90eXBlLl9pc0Ryb3BwYWJsZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgLy8gVE9ETzogdGFrZSB0aGUgZHJhZyBpdGVtIGludG8gY29uc2lkZXJhdGlvbiB0byBwcmV2ZW50IGRyYWdnaW5nIGFuIGl0ZW0gaW50byB0aGUgc2FtZSBncm91cFxuICAgICAgICB2YXIgb3B0aW9ucyA9IHRhcmdldC5vcHRpb25zO1xuICAgICAgICB2YXIgZHJhZ0NvbnRleHQgPSB0aGlzLl9kcmFnRGF0YSAmJiB0aGlzLl9kcmFnRGF0YS5kcmFnVGFyZ2V0ID8gdGhpcy5fZHJhZ0RhdGEuZHJhZ1RhcmdldC5vcHRpb25zLmNvbnRleHQgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiAhIShvcHRpb25zLmNhbkRyb3AgJiYgb3B0aW9ucy5jYW5Ecm9wKG9wdGlvbnMuY29udGV4dCwgZHJhZ0NvbnRleHQpKTtcbiAgICB9O1xuICAgIHJldHVybiBEcmFnRHJvcEhlbHBlcjtcbn0oKSk7XG5leHBvcnQgeyBEcmFnRHJvcEhlbHBlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RHJhZ0Ryb3BIZWxwZXIuanMubWFwIiwiLyoqXG4gKiB7QGRvY0NhdGVnb3J5IERldGFpbHNMaXN0fVxuICovXG5leHBvcnQgdmFyIFNlbGVjdEFsbFZpc2liaWxpdHk7XG4oZnVuY3Rpb24gKFNlbGVjdEFsbFZpc2liaWxpdHkpIHtcbiAgICBTZWxlY3RBbGxWaXNpYmlsaXR5W1NlbGVjdEFsbFZpc2liaWxpdHlbXCJub25lXCJdID0gMF0gPSBcIm5vbmVcIjtcbiAgICBTZWxlY3RBbGxWaXNpYmlsaXR5W1NlbGVjdEFsbFZpc2liaWxpdHlbXCJoaWRkZW5cIl0gPSAxXSA9IFwiaGlkZGVuXCI7XG4gICAgU2VsZWN0QWxsVmlzaWJpbGl0eVtTZWxlY3RBbGxWaXNpYmlsaXR5W1widmlzaWJsZVwiXSA9IDJdID0gXCJ2aXNpYmxlXCI7XG59KShTZWxlY3RBbGxWaXNpYmlsaXR5IHx8IChTZWxlY3RBbGxWaXNpYmlsaXR5ID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURldGFpbHNIZWFkZXIudHlwZXMuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJY29uLCBGb250SWNvbiB9IGZyb20gJy4uLy4uL0ljb24nO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUNvbXBvbmVudFJlZiwgRXZlbnRHcm91cCwgQXN5bmMsIGNsYXNzTmFtZXNGdW5jdGlvbiB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBDb2x1bW5BY3Rpb25zTW9kZSB9IGZyb20gJy4vRGV0YWlsc0xpc3QudHlwZXMnO1xuaW1wb3J0IHsgREVGQVVMVF9DRUxMX1NUWUxFX1BST1BTIH0gZnJvbSAnLi9EZXRhaWxzUm93LnN0eWxlcyc7XG52YXIgTU9VU0VET1dOX1BSSU1BUllfQlVUVE9OID0gMDsgLy8gZm9yIG1vdXNlIGRvd24gZXZlbnQgd2UgYXJlIHVzaW5nIGV2LmJ1dHRvbiBwcm9wZXJ0eSwgMCBtZWFucyBsZWZ0IGJ1dHRvblxudmFyIGdldENsYXNzTmFtZXMgPSBjbGFzc05hbWVzRnVuY3Rpb24oKTtcbnZhciBUUkFOU0lUSU9OX0RVUkFUSU9OX0RSQUcgPSAyMDA7IC8vIG1zXG52YXIgVFJBTlNJVElPTl9EVVJBVElPTl9EUk9QID0gMTUwMDsgLy8gbXNcbnZhciBDTEFTU05BTUVfQUREX0lOVEVSVkFMID0gMjA7IC8vIG1zXG4vKipcbiAqIENvbXBvbmVudCBmb3IgcmVuZGVyaW5nIGNvbHVtbnMgaW4gYSBgRGV0YWlsc0xpc3RgLlxuICpcbiAqIHtAZG9jQ2F0ZWdvcnkgRGV0YWlsc0xpc3R9XG4gKi9cbnZhciBEZXRhaWxzQ29sdW1uQmFzZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGV0YWlsc0NvbHVtbkJhc2UsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGV0YWlsc0NvbHVtbkJhc2UocHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9yb290ID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgICAgIF90aGlzLl9vblJlbmRlckNvbHVtbkhlYWRlclRvb2x0aXAgPSBmdW5jdGlvbiAodG9vbHRpcEhvc3RQcm9wcykge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiB0b29sdGlwSG9zdFByb3BzLmhvc3RDbGFzc05hbWUgfSwgdG9vbHRpcEhvc3RQcm9wcy5jaGlsZHJlbik7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbkNvbHVtbkNsaWNrID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgb25Db2x1bW5DbGljayA9IF9hLm9uQ29sdW1uQ2xpY2ssIGNvbHVtbiA9IF9hLmNvbHVtbjtcbiAgICAgICAgICAgIGlmIChjb2x1bW4uY29sdW1uQWN0aW9uc01vZGUgPT09IENvbHVtbkFjdGlvbnNNb2RlLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbHVtbi5vbkNvbHVtbkNsaWNrKSB7XG4gICAgICAgICAgICAgICAgY29sdW1uLm9uQ29sdW1uQ2xpY2soZXYsIGNvbHVtbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob25Db2x1bW5DbGljaykge1xuICAgICAgICAgICAgICAgIG9uQ29sdW1uQ2xpY2soZXYsIGNvbHVtbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbkRyYWdTdGFydCA9IGZ1bmN0aW9uIChpdGVtLCBpdGVtSW5kZXgsIHNlbGVjdGVkSXRlbXMsIGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgY2xhc3NOYW1lcyA9IF90aGlzLl9jbGFzc05hbWVzO1xuICAgICAgICAgICAgaWYgKGl0ZW1JbmRleCkge1xuICAgICAgICAgICAgICAgIF90aGlzLl91cGRhdGVIZWFkZXJEcmFnSW5mbyhpdGVtSW5kZXgpO1xuICAgICAgICAgICAgICAgIF90aGlzLl9yb290LmN1cnJlbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWVzLmJvcmRlcldoaWxlRHJhZ2dpbmcpO1xuICAgICAgICAgICAgICAgIF90aGlzLl9hc3luYy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9yb290LmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9yb290LmN1cnJlbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWVzLm5vQm9yZGVyV2hpbGVEcmFnZ2luZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBDTEFTU05BTUVfQUREX0lOVEVSVkFMKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uRHJhZ0VuZCA9IGZ1bmN0aW9uIChpdGVtLCBldmVudCkge1xuICAgICAgICAgICAgdmFyIGNsYXNzTmFtZXMgPSBfdGhpcy5fY2xhc3NOYW1lcztcbiAgICAgICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgICAgIF90aGlzLl91cGRhdGVIZWFkZXJEcmFnSW5mbygtMSwgZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuX3Jvb3QuY3VycmVudC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZXMuYm9yZGVyV2hpbGVEcmFnZ2luZyk7XG4gICAgICAgICAgICBfdGhpcy5fcm9vdC5jdXJyZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lcy5ub0JvcmRlcldoaWxlRHJhZ2dpbmcpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fdXBkYXRlSGVhZGVyRHJhZ0luZm8gPSBmdW5jdGlvbiAoaXRlbUluZGV4LCBldmVudCkge1xuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb24gKi9cbiAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5zZXREcmFnZ2VkSXRlbUluZGV4KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJvcHMuc2V0RHJhZ2dlZEl0ZW1JbmRleChpdGVtSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvbiAqL1xuICAgICAgICAgICAgaWYgKF90aGlzLnByb3BzLnVwZGF0ZURyYWdJbmZvKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJvcHMudXBkYXRlRHJhZ0luZm8oeyBpdGVtSW5kZXg6IGl0ZW1JbmRleCB9LCBldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbkNvbHVtbkNvbnRleHRNZW51ID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgb25Db2x1bW5Db250ZXh0TWVudSA9IF9hLm9uQ29sdW1uQ29udGV4dE1lbnUsIGNvbHVtbiA9IF9hLmNvbHVtbjtcbiAgICAgICAgICAgIGlmIChjb2x1bW4ub25Db2x1bW5Db250ZXh0TWVudSkge1xuICAgICAgICAgICAgICAgIGNvbHVtbi5vbkNvbHVtbkNvbnRleHRNZW51KGNvbHVtbiwgZXYpO1xuICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob25Db2x1bW5Db250ZXh0TWVudSkge1xuICAgICAgICAgICAgICAgIG9uQ29sdW1uQ29udGV4dE1lbnUoY29sdW1uLCBldik7XG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uUm9vdE1vdXNlRG93biA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIGlzRHJhZ2dhYmxlID0gX3RoaXMucHJvcHMuaXNEcmFnZ2FibGU7XG4gICAgICAgICAgICAvLyBJZ25vcmUgYW55dGhpbmcgZXhjZXB0IHRoZSBwcmltYXJ5IGJ1dHRvbi5cbiAgICAgICAgICAgIGlmIChpc0RyYWdnYWJsZSAmJiBldi5idXR0b24gPT09IE1PVVNFRE9XTl9QUklNQVJZX0JVVFRPTikge1xuICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpbml0aWFsaXplQ29tcG9uZW50UmVmKF90aGlzKTtcbiAgICAgICAgX3RoaXMuX2FzeW5jID0gbmV3IEFzeW5jKF90aGlzKTtcbiAgICAgICAgX3RoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEdyb3VwKF90aGlzKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEZXRhaWxzQ29sdW1uQmFzZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBjb2x1bW4gPSBfYS5jb2x1bW4sIGNvbHVtbkluZGV4ID0gX2EuY29sdW1uSW5kZXgsIHBhcmVudElkID0gX2EucGFyZW50SWQsIGlzRHJhZ2dhYmxlID0gX2EuaXNEcmFnZ2FibGUsIHN0eWxlcyA9IF9hLnN0eWxlcywgdGhlbWUgPSBfYS50aGVtZSwgX2IgPSBfYS5jZWxsU3R5bGVQcm9wcywgY2VsbFN0eWxlUHJvcHMgPSBfYiA9PT0gdm9pZCAwID8gREVGQVVMVF9DRUxMX1NUWUxFX1BST1BTIDogX2IsIF9jID0gX2EudXNlRmFzdEljb25zLCB1c2VGYXN0SWNvbnMgPSBfYyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9jO1xuICAgICAgICB2YXIgX2QgPSB0aGlzLnByb3BzLm9uUmVuZGVyQ29sdW1uSGVhZGVyVG9vbHRpcCwgb25SZW5kZXJDb2x1bW5IZWFkZXJUb29sdGlwID0gX2QgPT09IHZvaWQgMCA/IHRoaXMuX29uUmVuZGVyQ29sdW1uSGVhZGVyVG9vbHRpcCA6IF9kO1xuICAgICAgICB0aGlzLl9jbGFzc05hbWVzID0gZ2V0Q2xhc3NOYW1lcyhzdHlsZXMsIHtcbiAgICAgICAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgICAgICAgIGhlYWRlckNsYXNzTmFtZTogY29sdW1uLmhlYWRlckNsYXNzTmFtZSxcbiAgICAgICAgICAgIGljb25DbGFzc05hbWU6IGNvbHVtbi5pY29uQ2xhc3NOYW1lLFxuICAgICAgICAgICAgaXNBY3Rpb25hYmxlOiBjb2x1bW4uY29sdW1uQWN0aW9uc01vZGUgIT09IENvbHVtbkFjdGlvbnNNb2RlLmRpc2FibGVkLFxuICAgICAgICAgICAgaXNFbXB0eTogIWNvbHVtbi5uYW1lLFxuICAgICAgICAgICAgaXNJY29uVmlzaWJsZTogY29sdW1uLmlzU29ydGVkIHx8IGNvbHVtbi5pc0dyb3VwZWQgfHwgY29sdW1uLmlzRmlsdGVyZWQsXG4gICAgICAgICAgICBpc1BhZGRlZDogY29sdW1uLmlzUGFkZGVkLFxuICAgICAgICAgICAgaXNJY29uT25seTogY29sdW1uLmlzSWNvbk9ubHksXG4gICAgICAgICAgICBjZWxsU3R5bGVQcm9wczogY2VsbFN0eWxlUHJvcHMsXG4gICAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb25EcmFnOiBUUkFOU0lUSU9OX0RVUkFUSU9OX0RSQUcsXG4gICAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb25Ecm9wOiBUUkFOU0lUSU9OX0RVUkFUSU9OX0RST1AsXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgY2xhc3NOYW1lcyA9IHRoaXMuX2NsYXNzTmFtZXM7XG4gICAgICAgIHZhciBJY29uQ29tcG9uZW50ID0gdXNlRmFzdEljb25zID8gRm9udEljb24gOiBJY29uO1xuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsga2V5OiBjb2x1bW4ua2V5LCByZWY6IHRoaXMuX3Jvb3QsIHJvbGU6ICdjb2x1bW5oZWFkZXInLCBcImFyaWEtc29ydFwiOiBjb2x1bW4uaXNTb3J0ZWQgPyAoY29sdW1uLmlzU29ydGVkRGVzY2VuZGluZyA/ICdkZXNjZW5kaW5nJyA6ICdhc2NlbmRpbmcnKSA6ICdub25lJywgXCJhcmlhLWNvbGluZGV4XCI6IGNvbHVtbkluZGV4LCBjbGFzc05hbWU6IGNsYXNzTmFtZXMucm9vdCwgXCJkYXRhLWlzLWRyYWdnYWJsZVwiOiBpc0RyYWdnYWJsZSwgZHJhZ2dhYmxlOiBpc0RyYWdnYWJsZSwgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGNvbHVtbi5jYWxjdWxhdGVkV2lkdGggK1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbFN0eWxlUHJvcHMuY2VsbExlZnRQYWRkaW5nICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxTdHlsZVByb3BzLmNlbGxSaWdodFBhZGRpbmcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKGNvbHVtbi5pc1BhZGRlZCA/IGNlbGxTdHlsZVByb3BzLmNlbGxFeHRyYVJpZ2h0UGFkZGluZyA6IDApLFxuICAgICAgICAgICAgICAgIH0sIFwiZGF0YS1hdXRvbWF0aW9uaWRcIjogJ0NvbHVtbnNIZWFkZXJDb2x1bW4nLCBcImRhdGEtaXRlbS1rZXlcIjogY29sdW1uLmtleSB9LFxuICAgICAgICAgICAgICAgIGlzRHJhZ2dhYmxlICYmIChSZWFjdC5jcmVhdGVFbGVtZW50KEljb25Db21wb25lbnQsIHsgaWNvbk5hbWU6IFwiR3JpcHBlckJhclZlcnRpY2FsXCIsIGNsYXNzTmFtZTogY2xhc3NOYW1lcy5ncmlwcGVyQmFyVmVydGljYWxTdHlsZSB9KSksXG4gICAgICAgICAgICAgICAgb25SZW5kZXJDb2x1bW5IZWFkZXJUb29sdGlwKHtcbiAgICAgICAgICAgICAgICAgICAgaG9zdENsYXNzTmFtZTogY2xhc3NOYW1lcy5jZWxsVG9vbHRpcCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHBhcmVudElkICsgXCItXCIgKyBjb2x1bW4ua2V5ICsgXCItdG9vbHRpcFwiLFxuICAgICAgICAgICAgICAgICAgICBzZXRBcmlhRGVzY3JpYmVkQnk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW46IGNvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29sdW1uLmNvbHVtbkFjdGlvbnNNb2RlICE9PSBDb2x1bW5BY3Rpb25zTW9kZS5kaXNhYmxlZCA/IGNvbHVtbi5hcmlhTGFiZWwgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IChSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGlkOiBwYXJlbnRJZCArIFwiLVwiICsgY29sdW1uLmtleSwgXCJhcmlhLWxhYmVsXCI6IGNvbHVtbi5pc0ljb25Pbmx5ID8gY29sdW1uLm5hbWUgOiB1bmRlZmluZWQsIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IGNvbHVtbi5pc0ljb25Pbmx5ID8gdW5kZWZpbmVkIDogcGFyZW50SWQgKyBcIi1cIiArIGNvbHVtbi5rZXkgKyBcIi1uYW1lXCIsIGNsYXNzTmFtZTogY2xhc3NOYW1lcy5jZWxsVGl0bGUsIFwiZGF0YS1pcy1mb2N1c2FibGVcIjogY29sdW1uLmNvbHVtbkFjdGlvbnNNb2RlICE9PSBDb2x1bW5BY3Rpb25zTW9kZS5kaXNhYmxlZCwgcm9sZTogY29sdW1uLmNvbHVtbkFjdGlvbnNNb2RlICE9PSBDb2x1bW5BY3Rpb25zTW9kZS5kaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjb2x1bW4ub25Db2x1bW5DbGljayAhPT0gdW5kZWZpbmVkIHx8IHRoaXMucHJvcHMub25Db2x1bW5DbGljayAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ2J1dHRvbidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCwgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6ICF0aGlzLnByb3BzLm9uUmVuZGVyQ29sdW1uSGVhZGVyVG9vbHRpcCAmJiB0aGlzLl9oYXNBY2Nlc3NpYmxlTGFiZWwoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcGFyZW50SWQgKyBcIi1cIiArIGNvbHVtbi5rZXkgKyBcIi10b29sdGlwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCwgb25Db250ZXh0TWVudTogdGhpcy5fb25Db2x1bW5Db250ZXh0TWVudSwgb25DbGljazogdGhpcy5fb25Db2x1bW5DbGljaywgXCJhcmlhLWhhc3BvcHVwXCI6IGNvbHVtbi5jb2x1bW5BY3Rpb25zTW9kZSA9PT0gQ29sdW1uQWN0aW9uc01vZGUuaGFzRHJvcGRvd24sIFwiYXJpYS1leHBhbmRlZFwiOiBjb2x1bW4uY29sdW1uQWN0aW9uc01vZGUgPT09IENvbHVtbkFjdGlvbnNNb2RlLmhhc0Ryb3Bkb3duID8gISFjb2x1bW4uaXNNZW51T3BlbiA6IHVuZGVmaW5lZCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBpZDogcGFyZW50SWQgKyBcIi1cIiArIGNvbHVtbi5rZXkgKyBcIi1uYW1lXCIsIGNsYXNzTmFtZTogY2xhc3NOYW1lcy5jZWxsTmFtZSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjb2x1bW4uaWNvbk5hbWUgfHwgY29sdW1uLmljb25DbGFzc05hbWUpICYmIChSZWFjdC5jcmVhdGVFbGVtZW50KEljb25Db21wb25lbnQsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmljb25DbGFzc05hbWUsIGljb25OYW1lOiBjb2x1bW4uaWNvbk5hbWUgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbi5pc0ljb25Pbmx5ID8gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmFjY2Vzc2libGVMYWJlbCB9LCBjb2x1bW4ubmFtZSkpIDogKGNvbHVtbi5uYW1lKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW4uaXNGaWx0ZXJlZCAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KEljb25Db21wb25lbnQsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzLm5lYXJJY29uLCBpY29uTmFtZTogXCJGaWx0ZXJcIiB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbi5pc1NvcnRlZCAmJiAoUmVhY3QuY3JlYXRlRWxlbWVudChJY29uQ29tcG9uZW50LCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcy5zb3J0SWNvbiwgaWNvbk5hbWU6IGNvbHVtbi5pc1NvcnRlZERlc2NlbmRpbmcgPyAnU29ydERvd24nIDogJ1NvcnRVcCcgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uLmlzR3JvdXBlZCAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KEljb25Db21wb25lbnQsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzLm5lYXJJY29uLCBpY29uTmFtZTogXCJHcm91cGVkRGVzY2VuZGluZ1wiIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uLmNvbHVtbkFjdGlvbnNNb2RlID09PSBDb2x1bW5BY3Rpb25zTW9kZS5oYXNEcm9wZG93biAmJiAhY29sdW1uLmlzSWNvbk9ubHkgJiYgKFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbkNvbXBvbmVudCwgeyBcImFyaWEtaGlkZGVuXCI6IHRydWUsIGNsYXNzTmFtZTogY2xhc3NOYW1lcy5maWx0ZXJDaGV2cm9uLCBpY29uTmFtZTogXCJDaGV2cm9uRG93blwiIH0pKSkpLFxuICAgICAgICAgICAgICAgIH0sIHRoaXMuX29uUmVuZGVyQ29sdW1uSGVhZGVyVG9vbHRpcCkpLFxuICAgICAgICAgICAgIXRoaXMucHJvcHMub25SZW5kZXJDb2x1bW5IZWFkZXJUb29sdGlwID8gdGhpcy5fcmVuZGVyQWNjZXNzaWJsZUxhYmVsKCkgOiBudWxsKSk7XG4gICAgfTtcbiAgICBEZXRhaWxzQ29sdW1uQmFzZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmRyYWdEcm9wSGVscGVyICYmIHRoaXMucHJvcHMuaXNEcmFnZ2FibGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZERyYWdEcm9wSGFuZGxpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2xhc3NOYW1lcyA9IHRoaXMuX2NsYXNzTmFtZXM7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmlzRHJvcHBlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3Jvb3QuY3VycmVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3QuY3VycmVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZXMuYm9yZGVyQWZ0ZXJEcm9wcGluZyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fYXN5bmMuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fcm9vdC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcm9vdC5jdXJyZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lcy5ub0JvcmRlckFmdGVyRHJvcHBpbmcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgQ0xBU1NOQU1FX0FERF9JTlRFUlZBTCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9hc3luYy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX3Jvb3QuY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcm9vdC5jdXJyZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lcy5ib3JkZXJBZnRlckRyb3BwaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3Jvb3QuY3VycmVudC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZXMubm9Cb3JkZXJBZnRlckRyb3BwaW5nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBUUkFOU0lUSU9OX0RVUkFUSU9OX0RST1AgKyBDTEFTU05BTUVfQUREX0lOVEVSVkFMKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGV0YWlsc0NvbHVtbkJhc2UucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fZHJhZ0Ryb3BTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuX2RyYWdEcm9wU3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9kcmFnRHJvcFN1YnNjcmlwdGlvbjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hc3luYy5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuX2V2ZW50cy5kaXNwb3NlKCk7XG4gICAgfTtcbiAgICBEZXRhaWxzQ29sdW1uQmFzZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2RyYWdEcm9wU3Vic2NyaXB0aW9uICYmIHRoaXMucHJvcHMuZHJhZ0Ryb3BIZWxwZXIgJiYgdGhpcy5wcm9wcy5pc0RyYWdnYWJsZSkge1xuICAgICAgICAgICAgdGhpcy5fYWRkRHJhZ0Ryb3BIYW5kbGluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9kcmFnRHJvcFN1YnNjcmlwdGlvbiAmJiAhdGhpcy5wcm9wcy5pc0RyYWdnYWJsZSkge1xuICAgICAgICAgICAgdGhpcy5fZHJhZ0Ryb3BTdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRzLm9mZih0aGlzLl9yb290LmN1cnJlbnQsICdtb3VzZWRvd24nKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9kcmFnRHJvcFN1YnNjcmlwdGlvbjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGV0YWlsc0NvbHVtbkJhc2UucHJvdG90eXBlLl9nZXRDb2x1bW5EcmFnRHJvcE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBjb2x1bW5JbmRleCA9IHRoaXMucHJvcHMuY29sdW1uSW5kZXg7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgc2VsZWN0aW9uSW5kZXg6IGNvbHVtbkluZGV4LFxuICAgICAgICAgICAgY29udGV4dDogeyBkYXRhOiBjb2x1bW5JbmRleCwgaW5kZXg6IGNvbHVtbkluZGV4IH0sXG4gICAgICAgICAgICBjYW5EcmFnOiBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5wcm9wcy5pc0RyYWdnYWJsZTsgfSxcbiAgICAgICAgICAgIGNhbkRyb3A6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9LFxuICAgICAgICAgICAgb25EcmFnU3RhcnQ6IHRoaXMuX29uRHJhZ1N0YXJ0LFxuICAgICAgICAgICAgdXBkYXRlRHJvcFN0YXRlOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICBvbkRyb3A6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgIG9uRHJhZ0VuZDogdGhpcy5fb25EcmFnRW5kLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9O1xuICAgIERldGFpbHNDb2x1bW5CYXNlLnByb3RvdHlwZS5faGFzQWNjZXNzaWJsZUxhYmVsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29sdW1uID0gdGhpcy5wcm9wcy5jb2x1bW47XG4gICAgICAgIHJldHVybiAhIShjb2x1bW4uYXJpYUxhYmVsIHx8XG4gICAgICAgICAgICBjb2x1bW4uZmlsdGVyQXJpYUxhYmVsIHx8XG4gICAgICAgICAgICBjb2x1bW4uc29ydEFzY2VuZGluZ0FyaWFMYWJlbCB8fFxuICAgICAgICAgICAgY29sdW1uLnNvcnREZXNjZW5kaW5nQXJpYUxhYmVsIHx8XG4gICAgICAgICAgICBjb2x1bW4uZ3JvdXBBcmlhTGFiZWwpO1xuICAgIH07XG4gICAgRGV0YWlsc0NvbHVtbkJhc2UucHJvdG90eXBlLl9yZW5kZXJBY2Nlc3NpYmxlTGFiZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIGNvbHVtbiA9IF9hLmNvbHVtbiwgcGFyZW50SWQgPSBfYS5wYXJlbnRJZDtcbiAgICAgICAgdmFyIGNsYXNzTmFtZXMgPSB0aGlzLl9jbGFzc05hbWVzO1xuICAgICAgICByZXR1cm4gdGhpcy5faGFzQWNjZXNzaWJsZUxhYmVsKCkgJiYgIXRoaXMucHJvcHMub25SZW5kZXJDb2x1bW5IZWFkZXJUb29sdGlwID8gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiLCB7IGtleTogY29sdW1uLmtleSArIFwiX2xhYmVsXCIsIGlkOiBwYXJlbnRJZCArIFwiLVwiICsgY29sdW1uLmtleSArIFwiLXRvb2x0aXBcIiwgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmFjY2Vzc2libGVMYWJlbCB9LFxuICAgICAgICAgICAgY29sdW1uLmFyaWFMYWJlbCxcbiAgICAgICAgICAgIChjb2x1bW4uaXNGaWx0ZXJlZCAmJiBjb2x1bW4uZmlsdGVyQXJpYUxhYmVsKSB8fCBudWxsLFxuICAgICAgICAgICAgKGNvbHVtbi5pc1NvcnRlZCAmJlxuICAgICAgICAgICAgICAgIChjb2x1bW4uaXNTb3J0ZWREZXNjZW5kaW5nID8gY29sdW1uLnNvcnREZXNjZW5kaW5nQXJpYUxhYmVsIDogY29sdW1uLnNvcnRBc2NlbmRpbmdBcmlhTGFiZWwpKSB8fFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAoY29sdW1uLmlzR3JvdXBlZCAmJiBjb2x1bW4uZ3JvdXBBcmlhTGFiZWwpIHx8IG51bGwpKSA6IG51bGw7XG4gICAgfTtcbiAgICBEZXRhaWxzQ29sdW1uQmFzZS5wcm90b3R5cGUuX2FkZERyYWdEcm9wSGFuZGxpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2RyYWdEcm9wU3Vic2NyaXB0aW9uID0gdGhpcy5wcm9wcy5kcmFnRHJvcEhlbHBlci5zdWJzY3JpYmUodGhpcy5fcm9vdC5jdXJyZW50LCB0aGlzLl9ldmVudHMsIHRoaXMuX2dldENvbHVtbkRyYWdEcm9wT3B0aW9ucygpKTtcbiAgICAgICAgLy8gV2UgbmVlZCB0byB1c2UgbmF0aXZlIG9uIHRoaXMgdG8gcHJldmVudCBNYXJxdWVlU2VsZWN0aW9uIGZyb20gaGFuZGxpbmcgdGhlIGV2ZW50IGJlZm9yZSB1cy5cbiAgICAgICAgdGhpcy5fZXZlbnRzLm9uKHRoaXMuX3Jvb3QuY3VycmVudCwgJ21vdXNlZG93bicsIHRoaXMuX29uUm9vdE1vdXNlRG93bik7XG4gICAgfTtcbiAgICByZXR1cm4gRGV0YWlsc0NvbHVtbkJhc2U7XG59KFJlYWN0LkNvbXBvbmVudCkpO1xuZXhwb3J0IHsgRGV0YWlsc0NvbHVtbkJhc2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURldGFpbHNDb2x1bW4uYmFzZS5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgZ2V0Rm9jdXNTdHlsZSwgZ2V0R2xvYmFsQ2xhc3NOYW1lcywgaGlkZGVuQ29udGVudFN0eWxlLCBGb250V2VpZ2h0cyB9IGZyb20gJy4uLy4uL1N0eWxpbmcnO1xuaW1wb3J0IHsgREVGQVVMVF9DRUxMX1NUWUxFX1BST1BTIH0gZnJvbSAnLi9EZXRhaWxzUm93LnN0eWxlcyc7XG5pbXBvcnQgeyBnZXRDZWxsU3R5bGVzIH0gZnJvbSAnLi9EZXRhaWxzSGVhZGVyLnN0eWxlcyc7XG52YXIgR2xvYmFsQ2xhc3NOYW1lcyA9IHtcbiAgICBpc0FjdGlvbmFibGU6ICdpcy1hY3Rpb25hYmxlJyxcbiAgICBjZWxsSXNDaGVjazogJ21zLURldGFpbHNIZWFkZXItY2VsbElzQ2hlY2snLFxuICAgIGNvbGxhcHNlQnV0dG9uOiAnbXMtRGV0YWlsc0hlYWRlci1jb2xsYXBzZUJ1dHRvbicsXG4gICAgaXNDb2xsYXBzZWQ6ICdpcy1jb2xsYXBzZWQnLFxuICAgIGlzQWxsU2VsZWN0ZWQ6ICdpcy1hbGxTZWxlY3RlZCcsXG4gICAgaXNTZWxlY3RBbGxIaWRkZW46ICdpcy1zZWxlY3RBbGxIaWRkZW4nLFxuICAgIGlzUmVzaXppbmdDb2x1bW46ICdpcy1yZXNpemluZ0NvbHVtbicsXG4gICAgaXNFbXB0eTogJ2lzLWVtcHR5JyxcbiAgICBpc0ljb25WaXNpYmxlOiAnaXMtaWNvbi12aXNpYmxlJyxcbiAgICBjZWxsU2l6ZXI6ICdtcy1EZXRhaWxzSGVhZGVyLWNlbGxTaXplcicsXG4gICAgaXNSZXNpemluZzogJ2lzLXJlc2l6aW5nJyxcbiAgICBkcm9wSGludENpcmNsZVN0eWxlOiAnbXMtRGV0YWlsc0hlYWRlci1kcm9wSGludENpcmNsZVN0eWxlJyxcbiAgICBkcm9wSGludExpbmVTdHlsZTogJ21zLURldGFpbHNIZWFkZXItZHJvcEhpbnRMaW5lU3R5bGUnLFxuICAgIGNlbGxUaXRsZTogJ21zLURldGFpbHNIZWFkZXItY2VsbFRpdGxlJyxcbiAgICBjZWxsTmFtZTogJ21zLURldGFpbHNIZWFkZXItY2VsbE5hbWUnLFxuICAgIGZpbHRlckNoZXZyb246ICdtcy1EZXRhaWxzSGVhZGVyLWZpbHRlckNoZXZyb24nLFxuICAgIGdyaXBwZXJCYXJWZXJ0aWNhbFN0eWxlOiAnbXMtRGV0YWlsc0NvbHVtbi1ncmlwcGVyQmFyJyxcbiAgICBuZWFySWNvbjogJ21zLURldGFpbHNDb2x1bW4tbmVhckljb24nLFxufTtcbmV4cG9ydCB2YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciB0aGVtZSA9IHByb3BzLnRoZW1lLCBoZWFkZXJDbGFzc05hbWUgPSBwcm9wcy5oZWFkZXJDbGFzc05hbWUsIGljb25DbGFzc05hbWUgPSBwcm9wcy5pY29uQ2xhc3NOYW1lLCBpc0FjdGlvbmFibGUgPSBwcm9wcy5pc0FjdGlvbmFibGUsIGlzRW1wdHkgPSBwcm9wcy5pc0VtcHR5LCBpc0ljb25WaXNpYmxlID0gcHJvcHMuaXNJY29uVmlzaWJsZSwgaXNQYWRkZWQgPSBwcm9wcy5pc1BhZGRlZCwgaXNJY29uT25seSA9IHByb3BzLmlzSWNvbk9ubHksIF9iID0gcHJvcHMuY2VsbFN0eWxlUHJvcHMsIGNlbGxTdHlsZVByb3BzID0gX2IgPT09IHZvaWQgMCA/IERFRkFVTFRfQ0VMTF9TVFlMRV9QUk9QUyA6IF9iLCB0cmFuc2l0aW9uRHVyYXRpb25EcmFnID0gcHJvcHMudHJhbnNpdGlvbkR1cmF0aW9uRHJhZywgdHJhbnNpdGlvbkR1cmF0aW9uRHJvcCA9IHByb3BzLnRyYW5zaXRpb25EdXJhdGlvbkRyb3A7XG4gICAgdmFyIHNlbWFudGljQ29sb3JzID0gdGhlbWUuc2VtYW50aWNDb2xvcnMsIHBhbGV0dGUgPSB0aGVtZS5wYWxldHRlLCBmb250cyA9IHRoZW1lLmZvbnRzO1xuICAgIHZhciBjbGFzc05hbWVzID0gZ2V0R2xvYmFsQ2xhc3NOYW1lcyhHbG9iYWxDbGFzc05hbWVzLCB0aGVtZSk7XG4gICAgdmFyIGNvbG9ycyA9IHtcbiAgICAgICAgaWNvbkZvcmVncm91bmRDb2xvcjogc2VtYW50aWNDb2xvcnMuYm9keVN1YnRleHQsXG4gICAgICAgIGhlYWRlckZvcmVncm91bmRDb2xvcjogc2VtYW50aWNDb2xvcnMuYm9keVRleHQsXG4gICAgICAgIGhlYWRlckJhY2tncm91bmRDb2xvcjogc2VtYW50aWNDb2xvcnMuYm9keUJhY2tncm91bmQsXG4gICAgICAgIGRyb3Bkb3duQ2hldnJvbkZvcmVncm91bmRDb2xvcjogcGFsZXR0ZS5uZXV0cmFsVGVydGlhcnksXG4gICAgICAgIHJlc2l6ZXJDb2xvcjogcGFsZXR0ZS5uZXV0cmFsVGVydGlhcnlBbHQsXG4gICAgfTtcbiAgICB2YXIgbmVhckljb25TdHlsZSA9IHtcbiAgICAgICAgY29sb3I6IGNvbG9ycy5pY29uRm9yZWdyb3VuZENvbG9yLFxuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICBwYWRkaW5nTGVmdDogOCxcbiAgICB9O1xuICAgIHZhciBib3JkZXJXaGlsZURyYWdnaW5nID0ge1xuICAgICAgICBvdXRsaW5lOiBcIjFweCBzb2xpZCBcIiArIHBhbGV0dGUudGhlbWVQcmltYXJ5LFxuICAgIH07XG4gICAgdmFyIGJvcmRlckFmdGVyRHJhZ09yRHJvcCA9IHtcbiAgICAgICAgb3V0bGluZUNvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcm9vdDogW1xuICAgICAgICAgICAgZ2V0Q2VsbFN0eWxlcyhwcm9wcyksXG4gICAgICAgICAgICBmb250cy5zbWFsbCxcbiAgICAgICAgICAgIGlzQWN0aW9uYWJsZSAmJiBbXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lcy5pc0FjdGlvbmFibGUsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICc6aG92ZXInOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHNlbWFudGljQ29sb3JzLmJvZHlUZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHNlbWFudGljQ29sb3JzLmxpc3RIZWFkZXJCYWNrZ3JvdW5kSG92ZXJlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAnOmFjdGl2ZSc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBzZW1hbnRpY0NvbG9ycy5saXN0SGVhZGVyQmFja2dyb3VuZFByZXNzZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaXNFbXB0eSAmJiBbXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lcy5pc0VtcHR5LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dE92ZXJmbG93OiAnY2xpcCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpc0ljb25WaXNpYmxlICYmIGNsYXNzTmFtZXMuaXNJY29uVmlzaWJsZSxcbiAgICAgICAgICAgIGlzUGFkZGVkICYmIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQ6IGNlbGxTdHlsZVByb3BzLmNlbGxFeHRyYVJpZ2h0UGFkZGluZyArIGNlbGxTdHlsZVByb3BzLmNlbGxSaWdodFBhZGRpbmcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAnOmhvdmVyIGlbZGF0YS1pY29uLW5hbWU9XCJHcmlwcGVyQmFyVmVydGljYWxcIl0nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGVhZGVyQ2xhc3NOYW1lLFxuICAgICAgICBdLFxuICAgICAgICBncmlwcGVyQmFyVmVydGljYWxTdHlsZToge1xuICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnLFxuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICAgICAgICAgIGNvbG9yOiBwYWxldHRlLm5ldXRyYWxUZXJ0aWFyeSxcbiAgICAgICAgICAgIGxlZnQ6IDEsXG4gICAgICAgIH0sXG4gICAgICAgIG5lYXJJY29uOiBbY2xhc3NOYW1lcy5uZWFySWNvbiwgbmVhckljb25TdHlsZV0sXG4gICAgICAgIHNvcnRJY29uOiBbXG4gICAgICAgICAgICBuZWFySWNvblN0eWxlLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiA0LFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgIHRvcDogMSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGljb25DbGFzc05hbWU6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogY29sb3JzLmljb25Gb3JlZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpY29uQ2xhc3NOYW1lLFxuICAgICAgICBdLFxuICAgICAgICBmaWx0ZXJDaGV2cm9uOiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLmZpbHRlckNoZXZyb24sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29sb3I6IGNvbG9ycy5kcm9wZG93bkNoZXZyb25Gb3JlZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgcGFkZGluZ0xlZnQ6IDYsXG4gICAgICAgICAgICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgICAgICAgICAgICAgZm9udFNpemU6IGZvbnRzLnNtYWxsLmZvbnRTaXplLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgY2VsbFRpdGxlOiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLmNlbGxUaXRsZSxcbiAgICAgICAgICAgIGdldEZvY3VzU3R5bGUodGhlbWUpLFxuICAgICAgICAgICAgX19hc3NpZ24oeyBkaXNwbGF5OiAnZmxleCcsIGZsZXhEaXJlY3Rpb246ICdyb3cnLCBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLCBhbGlnbkl0ZW1zOiAnc3RyZXRjaCcsIGJveFNpemluZzogJ2JvcmRlci1ib3gnLCBvdmVyZmxvdzogJ2hpZGRlbicsIHBhZGRpbmc6IFwiMCBcIiArIGNlbGxTdHlsZVByb3BzLmNlbGxSaWdodFBhZGRpbmcgKyBcInB4IDAgXCIgKyBjZWxsU3R5bGVQcm9wcy5jZWxsTGVmdFBhZGRpbmcgKyBcInB4XCIgfSwgKGlzSWNvbk9ubHlcbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgYWxpZ25Db250ZW50OiAnZmxleC1lbmQnLFxuICAgICAgICAgICAgICAgICAgICBtYXhIZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAgICAgZmxleFdyYXA6ICd3cmFwLXJldmVyc2UnLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IHt9KSksXG4gICAgICAgIF0sXG4gICAgICAgIGNlbGxOYW1lOiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLmNlbGxOYW1lLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZsZXg6ICcwIDEgYXV0bycsXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICAgICAgICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBGb250V2VpZ2h0cy5zZW1pYm9sZCxcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogZm9udHMubWVkaXVtLmZvbnRTaXplLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzSWNvbk9ubHkgJiYge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9hID0ge30sXG4gICAgICAgICAgICAgICAgICAgIF9hW1wiLlwiICsgY2xhc3NOYW1lcy5uZWFySWNvbl0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nTGVmdDogMCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgX2EpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgY2VsbFRvb2x0aXA6IHtcbiAgICAgICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICBib3R0b206IDAsXG4gICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgfSxcbiAgICAgICAgYWNjZXNzaWJsZUxhYmVsOiBoaWRkZW5Db250ZW50U3R5bGUsXG4gICAgICAgIGJvcmRlcldoaWxlRHJhZ2dpbmc6IGJvcmRlcldoaWxlRHJhZ2dpbmcsXG4gICAgICAgIG5vQm9yZGVyV2hpbGVEcmFnZ2luZzogW2JvcmRlckFmdGVyRHJhZ09yRHJvcCwgeyB0cmFuc2l0aW9uOiBcIm91dGxpbmUgXCIgKyB0cmFuc2l0aW9uRHVyYXRpb25EcmFnICsgXCJtcyBlYXNlXCIgfV0sXG4gICAgICAgIGJvcmRlckFmdGVyRHJvcHBpbmc6IGJvcmRlcldoaWxlRHJhZ2dpbmcsXG4gICAgICAgIG5vQm9yZGVyQWZ0ZXJEcm9wcGluZzogW2JvcmRlckFmdGVyRHJhZ09yRHJvcCwgeyB0cmFuc2l0aW9uOiBcIm91dGxpbmUgIFwiICsgdHJhbnNpdGlvbkR1cmF0aW9uRHJvcCArIFwibXMgZWFzZVwiIH1dLFxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGV0YWlsc0NvbHVtbi5zdHlsZXMuanMubWFwIiwiaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IERldGFpbHNDb2x1bW5CYXNlIH0gZnJvbSAnLi9EZXRhaWxzQ29sdW1uLmJhc2UnO1xuaW1wb3J0IHsgZ2V0U3R5bGVzIH0gZnJvbSAnLi9EZXRhaWxzQ29sdW1uLnN0eWxlcyc7XG5leHBvcnQgdmFyIERldGFpbHNDb2x1bW4gPSBzdHlsZWQoRGV0YWlsc0NvbHVtbkJhc2UsIGdldFN0eWxlcywgdW5kZWZpbmVkLCB7IHNjb3BlOiAnRGV0YWlsc0NvbHVtbicgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1EZXRhaWxzQ29sdW1uLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGluaXRpYWxpemVDb21wb25lbnRSZWYsIEV2ZW50R3JvdXAsIGNzcywgZ2V0UlRMLCBnZXRJZCwgS2V5Q29kZXMsIGNsYXNzTmFtZXNGdW5jdGlvbiwgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgQ29sdW1uRHJhZ0VuZExvY2F0aW9uLCBDaGVja2JveFZpc2liaWxpdHksIH0gZnJvbSAnLi9EZXRhaWxzTGlzdC50eXBlcyc7XG5pbXBvcnQgeyBGb2N1c1pvbmUsIEZvY3VzWm9uZURpcmVjdGlvbiB9IGZyb20gJy4uLy4uL0ZvY3VzWm9uZSc7XG5pbXBvcnQgeyBJY29uLCBGb250SWNvbiB9IGZyb20gJy4uLy4uL0ljb24nO1xuaW1wb3J0IHsgTGF5ZXIgfSBmcm9tICcuLi8uLi9MYXllcic7XG5pbXBvcnQgeyBHcm91cFNwYWNlciB9IGZyb20gJy4uL0dyb3VwZWRMaXN0L0dyb3VwU3BhY2VyJztcbmltcG9ydCB7IENvbGxhcHNlQWxsVmlzaWJpbGl0eSB9IGZyb20gJy4uLy4uL0dyb3VwZWRMaXN0JztcbmltcG9ydCB7IERldGFpbHNSb3dDaGVjayB9IGZyb20gJy4vRGV0YWlsc1Jvd0NoZWNrJztcbmltcG9ydCB7IFNlbGVjdGlvbk1vZGUsIFNFTEVDVElPTl9DSEFOR0UgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvc2VsZWN0aW9uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgRHJhZ0Ryb3BIZWxwZXIgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvZHJhZ2Ryb3AvaW5kZXgnO1xuaW1wb3J0IHsgRGV0YWlsc0NvbHVtbiB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvRGV0YWlsc0xpc3QvRGV0YWlsc0NvbHVtbic7XG5pbXBvcnQgeyBTZWxlY3RBbGxWaXNpYmlsaXR5LCB9IGZyb20gJy4vRGV0YWlsc0hlYWRlci50eXBlcyc7XG52YXIgZ2V0Q2xhc3NOYW1lcyA9IGNsYXNzTmFtZXNGdW5jdGlvbigpO1xudmFyIE1PVVNFRE9XTl9QUklNQVJZX0JVVFRPTiA9IDA7IC8vIGZvciBtb3VzZSBkb3duIGV2ZW50IHdlIGFyZSB1c2luZyBldi5idXR0b24gcHJvcGVydHksIDAgbWVhbnMgbGVmdCBidXR0b25cbnZhciBNT1VTRU1PVkVfUFJJTUFSWV9CVVRUT04gPSAxOyAvLyBmb3IgbW91c2UgbW92ZSBldmVudCB3ZSBhcmUgdXNpbmcgZXYuYnV0dG9ucyBwcm9wZXJ0eSwgMSBtZWFucyBsZWZ0IGJ1dHRvblxudmFyIE5PX0NPTFVNTlMgPSBbXTtcbnZhciBEZXRhaWxzSGVhZGVyQmFzZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGV0YWlsc0hlYWRlckJhc2UsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGV0YWlsc0hlYWRlckJhc2UocHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9yb290RWxlbWVudCA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgICAgICBfdGhpcy5fcm9vdENvbXBvbmVudCA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgICAgICBfdGhpcy5fZHJhZ2dlZENvbHVtbkluZGV4ID0gLTE7XG4gICAgICAgIF90aGlzLl9kcm9wSGludERldGFpbHMgPSB7fTtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZURyb3BwaW5nU3RhdGUgPSBmdW5jdGlvbiAobmV3VmFsdWUsIGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuX2RyYWdnZWRDb2x1bW5JbmRleCA+PSAwICYmIGV2ZW50LnR5cGUgIT09ICdkcm9wJyAmJiAhbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fcmVzZXREcm9wSGludHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uRHJhZ092ZXIgPSBmdW5jdGlvbiAoaXRlbSwgZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5fZHJhZ2dlZENvbHVtbkluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5fY29tcHV0ZURyb3BIaW50VG9CZVNob3duKGV2ZW50LmNsaWVudFgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25Ecm9wID0gZnVuY3Rpb24gKGl0ZW0sIGV2ZW50KSB7XG4gICAgICAgICAgICAvLyBTYWZlIHRvIGFzc3VtZSB0aGlzIGlzIGRlZmluZWQgc2luY2Ugd2UncmUgaGFuZGxpbmcgYSBkcm9wIGV2ZW50XG4gICAgICAgICAgICB2YXIgY29sdW1uUmVvcmRlclByb3BzID0gX3RoaXMuX2dldENvbHVtblJlb3JkZXJQcm9wcygpO1xuICAgICAgICAgICAgLy8gVGFyZ2V0IGluZGV4IHdpbGwgbm90IGdldCBjaGFuZ2VkIGlmIGRyYWdnZWRpdGVtIGlzIGFmdGVyIHRhcmdldCBpdGVtLlxuICAgICAgICAgICAgaWYgKF90aGlzLl9kcmFnZ2VkQ29sdW1uSW5kZXggPj0gMCAmJiBldmVudCkge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRJbmRleCA9IF90aGlzLl9kcmFnZ2VkQ29sdW1uSW5kZXggPiBfdGhpcy5fY3VycmVudERyb3BIaW50SW5kZXhcbiAgICAgICAgICAgICAgICAgICAgPyBfdGhpcy5fY3VycmVudERyb3BIaW50SW5kZXhcbiAgICAgICAgICAgICAgICAgICAgOiBfdGhpcy5fY3VycmVudERyb3BIaW50SW5kZXggLSAxO1xuICAgICAgICAgICAgICAgIHZhciBpc1ZhbGlkRHJvcCA9IF90aGlzLl9pc1ZhbGlkQ3VycmVudERyb3BIaW50SW5kZXgoKTtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZERyb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX29uRHJvcEluZGV4SW5mby5zb3VyY2VJbmRleCA9IF90aGlzLl9kcmFnZ2VkQ29sdW1uSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9vbkRyb3BJbmRleEluZm8udGFyZ2V0SW5kZXggPSB0YXJnZXRJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtblJlb3JkZXJQcm9wcy5vbkNvbHVtbkRyb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkcmFnRHJvcERldGFpbHMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ2dlZEluZGV4OiBfdGhpcy5fZHJhZ2dlZENvbHVtbkluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEluZGV4OiB0YXJnZXRJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5SZW9yZGVyUHJvcHMub25Db2x1bW5Ecm9wKGRyYWdEcm9wRGV0YWlscyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvbiAqL1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvbHVtblJlb3JkZXJQcm9wcy5oYW5kbGVDb2x1bW5SZW9yZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5SZW9yZGVyUHJvcHMuaGFuZGxlQ29sdW1uUmVvcmRlcihfdGhpcy5fZHJhZ2dlZENvbHVtbkluZGV4LCB0YXJnZXRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uICovXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5fcmVzZXREcm9wSGludHMoKTtcbiAgICAgICAgICAgIF90aGlzLl9kcm9wSGludERldGFpbHMgPSB7fTtcbiAgICAgICAgICAgIF90aGlzLl9kcmFnZ2VkQ29sdW1uSW5kZXggPSAtMTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZURyYWdJbmZvID0gZnVuY3Rpb24gKHByb3BzLCBldmVudCkge1xuICAgICAgICAgICAgLy8gU2FmZSB0byBhc3N1bWUgdGhpcyBpcyBkZWZpbmVkIHNpbmNlIHdlJ3JlIGhhbmRsaW5nIGEgZHJhZyBldmVudFxuICAgICAgICAgICAgdmFyIGNvbHVtblJlb3JkZXJQcm9wcyA9IF90aGlzLl9nZXRDb2x1bW5SZW9yZGVyUHJvcHMoKTtcbiAgICAgICAgICAgIHZhciBpdGVtSW5kZXggPSBwcm9wcy5pdGVtSW5kZXg7XG4gICAgICAgICAgICBpZiAoaXRlbUluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAvLyBDb2x1bW4gaW5kZXggaXMgc2V0IGJhc2VkIG9uIHRoZSBjaGVja2JveFxuICAgICAgICAgICAgICAgIF90aGlzLl9kcmFnZ2VkQ29sdW1uSW5kZXggPSBfdGhpcy5faXNDaGVja2JveENvbHVtbkhpZGRlbigpID8gaXRlbUluZGV4IC0gMSA6IGl0ZW1JbmRleCAtIDI7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2dldERyb3BIaW50UG9zaXRpb25zKCk7XG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtblJlb3JkZXJQcm9wcy5vbkNvbHVtbkRyYWdTdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBjb2x1bW5SZW9yZGVyUHJvcHMub25Db2x1bW5EcmFnU3RhcnQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnQgJiYgX3RoaXMuX2RyYWdnZWRDb2x1bW5JbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3Jlc2V0RHJvcEhpbnRzKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2RyYWdnZWRDb2x1bW5JbmRleCA9IC0xO1xuICAgICAgICAgICAgICAgIF90aGlzLl9kcm9wSGludERldGFpbHMgPSB7fTtcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uUmVvcmRlclByb3BzLm9uQ29sdW1uRHJhZ0VuZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29sdW1uRHJhZ0VuZExvY2F0aW9uID0gX3RoaXMuX2lzRXZlbnRPbkhlYWRlcihldmVudCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbHVtblJlb3JkZXJQcm9wcy5vbkNvbHVtbkRyYWdFbmQoeyBkcm9wTG9jYXRpb246IGNvbHVtbkRyYWdFbmRMb2NhdGlvbiB9LCBldmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fZ2V0RHJvcEhpbnRQb3NpdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcy5jb2x1bW5zLCBjb2x1bW5zID0gX2EgPT09IHZvaWQgMCA/IE5PX0NPTFVNTlMgOiBfYTtcbiAgICAgICAgICAgIC8vIFNhZmUgdG8gYXNzdW1lIHRoaXMgaXMgZGVmaW5lZCBzaW5jZSB3ZSdyZSBoYW5kbGluZyBhIGRyYWcvZHJvcCBldmVudFxuICAgICAgICAgICAgdmFyIGNvbHVtblJlb3JkZXJQcm9wcyA9IF90aGlzLl9nZXRDb2x1bW5SZW9yZGVyUHJvcHMoKTtcbiAgICAgICAgICAgIHZhciBwcmV2WCA9IDA7XG4gICAgICAgICAgICB2YXIgcHJldk1pZCA9IDA7XG4gICAgICAgICAgICB2YXIgcHJldlJlZjtcbiAgICAgICAgICAgIHZhciBmcm96ZW5Db2x1bW5Db3VudEZyb21TdGFydCA9IGNvbHVtblJlb3JkZXJQcm9wcy5mcm96ZW5Db2x1bW5Db3VudEZyb21TdGFydCB8fCAwO1xuICAgICAgICAgICAgdmFyIGZyb3plbkNvbHVtbkNvdW50RnJvbUVuZCA9IGNvbHVtblJlb3JkZXJQcm9wcy5mcm96ZW5Db2x1bW5Db3VudEZyb21FbmQgfHwgMDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBmcm96ZW5Db2x1bW5Db3VudEZyb21TdGFydDsgaSA8IGNvbHVtbnMubGVuZ3RoIC0gZnJvemVuQ29sdW1uQ291bnRGcm9tRW5kICsgMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLl9yb290RWxlbWVudC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkcm9wSGludEVsZW1lbnQgPSBfdGhpcy5fcm9vdEVsZW1lbnQuY3VycmVudC5xdWVyeVNlbGVjdG9yQWxsKCcjY29sdW1uRHJvcEhpbnRfJyArIGkpWzBdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZHJvcEhpbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gZnJvemVuQ29sdW1uQ291bnRGcm9tU3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2WCA9IGRyb3BIaW50RWxlbWVudC5vZmZzZXRMZWZ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZNaWQgPSBkcm9wSGludEVsZW1lbnQub2Zmc2V0TGVmdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2UmVmID0gZHJvcEhpbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld01pZCA9IChkcm9wSGludEVsZW1lbnQub2Zmc2V0TGVmdCArIHByZXZYKSAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2Ryb3BIaW50RGV0YWlsc1tpIC0gMV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpblg6IHByZXZYLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydFg6IHByZXZNaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZFg6IG5ld01pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcEhpbnRFbGVtZW50UmVmOiBwcmV2UmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk1pZCA9IG5ld01pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2UmVmID0gZHJvcEhpbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZYID0gZHJvcEhpbnRFbGVtZW50Lm9mZnNldExlZnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IGNvbHVtbnMubGVuZ3RoIC0gZnJvemVuQ29sdW1uQ291bnRGcm9tRW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9kcm9wSGludERldGFpbHNbaV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5YOiBwcmV2WCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0WDogcHJldk1pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZFg6IGRyb3BIaW50RWxlbWVudC5vZmZzZXRMZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcEhpbnRFbGVtZW50UmVmOiBwcmV2UmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJhc2VkIG9uIHRoZSBnaXZlbiBjdXJzb3IgcG9zaXRpb24sIGZpbmRzIHRoZSBuZWFyZXN0IGRyb3AgaGludCBhbmQgdXBkYXRlcyB0aGUgc3RhdGUgdG8gbWFrZSBpdCB2aXNpYmxlXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5fY29tcHV0ZURyb3BIaW50VG9CZVNob3duID0gZnVuY3Rpb24gKGNsaWVudFgpIHtcbiAgICAgICAgICAgIHZhciBpc1J0bCA9IGdldFJUTChfdGhpcy5wcm9wcy50aGVtZSk7XG4gICAgICAgICAgICBpZiAoX3RoaXMuX3Jvb3RFbGVtZW50LmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2xpZW50UmVjdCA9IF90aGlzLl9yb290RWxlbWVudC5jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgIHZhciBoZWFkZXJPcmlnaW5YID0gY2xpZW50UmVjdC5sZWZ0O1xuICAgICAgICAgICAgICAgIHZhciBldmVudFhSZWxhdGl2ZVBvc2l0aW9uID0gY2xpZW50WCAtIGhlYWRlck9yaWdpblg7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnREcm9wSGludEluZGV4ID0gX3RoaXMuX2N1cnJlbnREcm9wSGludEluZGV4O1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5faXNWYWxpZEN1cnJlbnREcm9wSGludEluZGV4KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9saWVzQmV0d2Vlbihpc1J0bCwgZXZlbnRYUmVsYXRpdmVQb3NpdGlvbiwgX3RoaXMuX2Ryb3BIaW50RGV0YWlsc1tjdXJyZW50RHJvcEhpbnRJbmRleF0uc3RhcnRYLCBfdGhpcy5fZHJvcEhpbnREZXRhaWxzW2N1cnJlbnREcm9wSGludEluZGV4XS5lbmRYKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLmNvbHVtbnMsIGNvbHVtbnMgPSBfYSA9PT0gdm9pZCAwID8gTk9fQ09MVU1OUyA6IF9hO1xuICAgICAgICAgICAgICAgIC8vIFNhZmUgdG8gYXNzdW1lIHRoaXMgaXMgZGVmaW5lZCBzaW5jZSB3ZSdyZSBoYW5kbGluZyBhIGRyYWcvZHJvcCBldmVudFxuICAgICAgICAgICAgICAgIHZhciBjb2x1bW5SZW9yZGVyUHJvcHMgPSBfdGhpcy5fZ2V0Q29sdW1uUmVvcmRlclByb3BzKCk7XG4gICAgICAgICAgICAgICAgdmFyIGZyb3plbkNvbHVtbkNvdW50RnJvbVN0YXJ0ID0gY29sdW1uUmVvcmRlclByb3BzLmZyb3plbkNvbHVtbkNvdW50RnJvbVN0YXJ0IHx8IDA7XG4gICAgICAgICAgICAgICAgdmFyIGZyb3plbkNvbHVtbkNvdW50RnJvbUVuZCA9IGNvbHVtblJlb3JkZXJQcm9wcy5mcm96ZW5Db2x1bW5Db3VudEZyb21FbmQgfHwgMDtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudEluZGV4ID0gZnJvemVuQ29sdW1uQ291bnRGcm9tU3RhcnQ7XG4gICAgICAgICAgICAgICAgdmFyIGxhc3RWYWxpZENvbHVtbiA9IGNvbHVtbnMubGVuZ3RoIC0gZnJvemVuQ29sdW1uQ291bnRGcm9tRW5kO1xuICAgICAgICAgICAgICAgIHZhciBpbmRleFRvVXBkYXRlID0gLTE7XG4gICAgICAgICAgICAgICAgaWYgKF9pc0JlZm9yZShpc1J0bCwgZXZlbnRYUmVsYXRpdmVQb3NpdGlvbiwgX3RoaXMuX2Ryb3BIaW50RGV0YWlsc1tjdXJyZW50SW5kZXhdLmVuZFgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4VG9VcGRhdGUgPSBjdXJyZW50SW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKF9pc0FmdGVyKGlzUnRsLCBldmVudFhSZWxhdGl2ZVBvc2l0aW9uLCBfdGhpcy5fZHJvcEhpbnREZXRhaWxzW2xhc3RWYWxpZENvbHVtbl0uc3RhcnRYKSkge1xuICAgICAgICAgICAgICAgICAgICBpbmRleFRvVXBkYXRlID0gbGFzdFZhbGlkQ29sdW1uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChfdGhpcy5faXNWYWxpZEN1cnJlbnREcm9wSGludEluZGV4KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9kcm9wSGludERldGFpbHNbY3VycmVudERyb3BIaW50SW5kZXggKyAxXSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgX2xpZXNCZXR3ZWVuKGlzUnRsLCBldmVudFhSZWxhdGl2ZVBvc2l0aW9uLCBfdGhpcy5fZHJvcEhpbnREZXRhaWxzW2N1cnJlbnREcm9wSGludEluZGV4ICsgMV0uc3RhcnRYLCBfdGhpcy5fZHJvcEhpbnREZXRhaWxzW2N1cnJlbnREcm9wSGludEluZGV4ICsgMV0uZW5kWCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4VG9VcGRhdGUgPSBjdXJyZW50RHJvcEhpbnRJbmRleCArIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoX3RoaXMuX2Ryb3BIaW50RGV0YWlsc1tjdXJyZW50RHJvcEhpbnRJbmRleCAtIDFdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBfbGllc0JldHdlZW4oaXNSdGwsIGV2ZW50WFJlbGF0aXZlUG9zaXRpb24sIF90aGlzLl9kcm9wSGludERldGFpbHNbY3VycmVudERyb3BIaW50SW5kZXggLSAxXS5zdGFydFgsIF90aGlzLl9kcm9wSGludERldGFpbHNbY3VycmVudERyb3BIaW50SW5kZXggLSAxXS5lbmRYKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhUb1VwZGF0ZSA9IGN1cnJlbnREcm9wSGludEluZGV4IC0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaW5kZXhUb1VwZGF0ZSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0SW5kZXggPSBmcm96ZW5Db2x1bW5Db3VudEZyb21TdGFydDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVuZEluZGV4ID0gbGFzdFZhbGlkQ29sdW1uO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoc3RhcnRJbmRleCA8IGVuZEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWlkZGxlSW5kZXggPSBNYXRoLmNlaWwoKGVuZEluZGV4ICsgc3RhcnRJbmRleCkgLyAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfbGllc0JldHdlZW4oaXNSdGwsIGV2ZW50WFJlbGF0aXZlUG9zaXRpb24sIF90aGlzLl9kcm9wSGludERldGFpbHNbbWlkZGxlSW5kZXhdLnN0YXJ0WCwgX3RoaXMuX2Ryb3BIaW50RGV0YWlsc1ttaWRkbGVJbmRleF0uZW5kWCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleFRvVXBkYXRlID0gbWlkZGxlSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChfaXNCZWZvcmUoaXNSdGwsIGV2ZW50WFJlbGF0aXZlUG9zaXRpb24sIF90aGlzLl9kcm9wSGludERldGFpbHNbbWlkZGxlSW5kZXhdLm9yaWdpblgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kSW5kZXggPSBtaWRkbGVJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKF9pc0FmdGVyKGlzUnRsLCBldmVudFhSZWxhdGl2ZVBvc2l0aW9uLCBfdGhpcy5fZHJvcEhpbnREZXRhaWxzW21pZGRsZUluZGV4XS5vcmlnaW5YKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0SW5kZXggPSBtaWRkbGVJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaW5kZXhUb1VwZGF0ZSA9PT0gX3RoaXMuX2RyYWdnZWRDb2x1bW5JbmRleCB8fCBpbmRleFRvVXBkYXRlID09PSBfdGhpcy5fZHJhZ2dlZENvbHVtbkluZGV4ICsgMSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2lzVmFsaWRDdXJyZW50RHJvcEhpbnRJbmRleCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcmVzZXREcm9wSGludHMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjdXJyZW50RHJvcEhpbnRJbmRleCAhPT0gaW5kZXhUb1VwZGF0ZSAmJiBpbmRleFRvVXBkYXRlID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3Jlc2V0RHJvcEhpbnRzKCk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl91cGRhdGVEcm9wSGludEVsZW1lbnQoX3RoaXMuX2Ryb3BIaW50RGV0YWlsc1tpbmRleFRvVXBkYXRlXS5kcm9wSGludEVsZW1lbnRSZWYsICdpbmxpbmUtYmxvY2snKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2N1cnJlbnREcm9wSGludEluZGV4ID0gaW5kZXhUb1VwZGF0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9yZW5kZXJDb2x1bW5TaXplciA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIF9iO1xuICAgICAgICAgICAgdmFyIGNvbHVtbkluZGV4ID0gX2EuY29sdW1uSW5kZXg7XG4gICAgICAgICAgICB2YXIgX2MgPSBfdGhpcy5wcm9wcy5jb2x1bW5zLCBjb2x1bW5zID0gX2MgPT09IHZvaWQgMCA/IE5PX0NPTFVNTlMgOiBfYztcbiAgICAgICAgICAgIHZhciBjb2x1bW4gPSBjb2x1bW5zW2NvbHVtbkluZGV4XTtcbiAgICAgICAgICAgIHZhciBjb2x1bW5SZXNpemVEZXRhaWxzID0gX3RoaXMuc3RhdGUuY29sdW1uUmVzaXplRGV0YWlscztcbiAgICAgICAgICAgIHZhciBjbGFzc05hbWVzID0gX3RoaXMuX2NsYXNzTmFtZXM7XG4gICAgICAgICAgICByZXR1cm4gY29sdW1uLmlzUmVzaXphYmxlID8gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBrZXk6IGNvbHVtbi5rZXkgKyBcIl9zaXplclwiLCBcImFyaWEtaGlkZGVuXCI6IHRydWUsIHJvbGU6IFwiYnV0dG9uXCIsIFwiZGF0YS1pcy1mb2N1c2FibGVcIjogZmFsc2UsIG9uQ2xpY2s6IF9zdG9wUHJvcGFnYXRpb24sIFwiZGF0YS1zaXplci1pbmRleFwiOiBjb2x1bW5JbmRleCwgb25CbHVyOiBfdGhpcy5fb25TaXplckJsdXIsIGNsYXNzTmFtZTogY3NzKGNsYXNzTmFtZXMuY2VsbFNpemVyLCBjb2x1bW5JbmRleCA8IGNvbHVtbnMubGVuZ3RoIC0gMSA/IGNsYXNzTmFtZXMuY2VsbFNpemVyU3RhcnQgOiBjbGFzc05hbWVzLmNlbGxTaXplckVuZCwgKF9iID0ge30sXG4gICAgICAgICAgICAgICAgICAgIF9iW2NsYXNzTmFtZXMuY2VsbElzUmVzaXppbmddID0gY29sdW1uUmVzaXplRGV0YWlscyAmJiBjb2x1bW5SZXNpemVEZXRhaWxzLmNvbHVtbkluZGV4ID09PSBjb2x1bW5JbmRleCxcbiAgICAgICAgICAgICAgICAgICAgX2IpKSwgb25Eb3VibGVDbGljazogX3RoaXMuX29uU2l6ZXJEb3VibGVDbGljay5iaW5kKF90aGlzLCBjb2x1bW5JbmRleCkgfSkpIDogbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uUmVuZGVyQ29sdW1uSGVhZGVyVG9vbHRpcCA9IGZ1bmN0aW9uICh0b29sdGlwSG9zdFByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IHRvb2x0aXBIb3N0UHJvcHMuaG9zdENsYXNzTmFtZSB9LCB0b29sdGlwSG9zdFByb3BzLmNoaWxkcmVuKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGxlZCB3aGVuIHRoZSBzZWxlY3QgYWxsIHRvZ2dsZSBpcyBjbGlja2VkLlxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuX29uU2VsZWN0QWxsQ2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxlY3Rpb24gPSBfdGhpcy5wcm9wcy5zZWxlY3Rpb247XG4gICAgICAgICAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uLnRvZ2dsZUFsbFNlbGVjdGVkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblJvb3RNb3VzZURvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBjb2x1bW5JbmRleEF0dHIgPSBldi50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXNpemVyLWluZGV4Jyk7XG4gICAgICAgICAgICB2YXIgY29sdW1uSW5kZXggPSBOdW1iZXIoY29sdW1uSW5kZXhBdHRyKTtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLmNvbHVtbnMsIGNvbHVtbnMgPSBfYSA9PT0gdm9pZCAwID8gTk9fQ09MVU1OUyA6IF9hO1xuICAgICAgICAgICAgaWYgKGNvbHVtbkluZGV4QXR0ciA9PT0gbnVsbCB8fCBldi5idXR0b24gIT09IE1PVVNFRE9XTl9QUklNQVJZX0JVVFRPTikge1xuICAgICAgICAgICAgICAgIC8vIElnbm9yZSBhbnl0aGluZyBleGNlcHQgdGhlIHByaW1hcnkgYnV0dG9uLlxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBjb2x1bW5SZXNpemVEZXRhaWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbkluZGV4OiBjb2x1bW5JbmRleCxcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uTWluV2lkdGg6IGNvbHVtbnNbY29sdW1uSW5kZXhdLmNhbGN1bGF0ZWRXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luWDogZXYuY2xpZW50WCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblJvb3RNb3VzZU1vdmUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLnN0YXRlLCBjb2x1bW5SZXNpemVEZXRhaWxzID0gX2EuY29sdW1uUmVzaXplRGV0YWlscywgaXNTaXppbmcgPSBfYS5pc1NpemluZztcbiAgICAgICAgICAgIGlmIChjb2x1bW5SZXNpemVEZXRhaWxzICYmICFpc1NpemluZyAmJiBldi5jbGllbnRYICE9PSBjb2x1bW5SZXNpemVEZXRhaWxzLm9yaWdpblgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGlzU2l6aW5nOiB0cnVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25Sb290S2V5RG93biA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMuc3RhdGUsIGNvbHVtblJlc2l6ZURldGFpbHMgPSBfYS5jb2x1bW5SZXNpemVEZXRhaWxzLCBpc1NpemluZyA9IF9hLmlzU2l6aW5nO1xuICAgICAgICAgICAgdmFyIF9iID0gX3RoaXMucHJvcHMsIF9jID0gX2IuY29sdW1ucywgY29sdW1ucyA9IF9jID09PSB2b2lkIDAgPyBOT19DT0xVTU5TIDogX2MsIG9uQ29sdW1uUmVzaXplZCA9IF9iLm9uQ29sdW1uUmVzaXplZDtcbiAgICAgICAgICAgIHZhciBjb2x1bW5JbmRleEF0dHIgPSBldi50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXNpemVyLWluZGV4Jyk7XG4gICAgICAgICAgICBpZiAoIWNvbHVtbkluZGV4QXR0ciB8fCBpc1NpemluZykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjb2x1bW5JbmRleCA9IE51bWJlcihjb2x1bW5JbmRleEF0dHIpO1xuICAgICAgICAgICAgaWYgKCFjb2x1bW5SZXNpemVEZXRhaWxzKSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICAgICAgaWYgKGV2LndoaWNoID09PSBLZXlDb2Rlcy5lbnRlcikge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5SZXNpemVEZXRhaWxzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uSW5kZXg6IGNvbHVtbkluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbk1pbldpZHRoOiBjb2x1bW5zW2NvbHVtbkluZGV4XS5jYWxjdWxhdGVkV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGluY3JlbWVudCA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgICAgICBpZiAoZXYud2hpY2ggPT09IEtleUNvZGVzLmVudGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtblJlc2l6ZURldGFpbHM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZXYud2hpY2ggPT09IEtleUNvZGVzLmxlZnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5jcmVtZW50ID0gZ2V0UlRMKF90aGlzLnByb3BzLnRoZW1lKSA/IDEgOiAtMTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGV2LndoaWNoID09PSBLZXlDb2Rlcy5yaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBpbmNyZW1lbnQgPSBnZXRSVEwoX3RoaXMucHJvcHMudGhlbWUpID8gLTEgOiAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaW5jcmVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZXYuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY3JlbWVudCAqPSAxMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5SZXNpemVEZXRhaWxzOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY29sdW1uUmVzaXplRGV0YWlscyksIHsgY29sdW1uTWluV2lkdGg6IGNvbHVtblJlc2l6ZURldGFpbHMuY29sdW1uTWluV2lkdGggKyBpbmNyZW1lbnQgfSksXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAob25Db2x1bW5SZXNpemVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNvbHVtblJlc2l6ZWQoY29sdW1uc1tjb2x1bW5JbmRleF0sIGNvbHVtblJlc2l6ZURldGFpbHMuY29sdW1uTWluV2lkdGggKyBpbmNyZW1lbnQsIGNvbHVtbkluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBtb3VzZSBtb3ZlIGV2ZW50IGhhbmRsZXIgaW4gdGhlIGhlYWRlclxuICAgICAgICAgKiBpdCB3aWxsIHNldCBpc1NpemluZyBzdGF0ZSB0byB0cnVlIHdoZW4gdXNlciBjbGlja2VkIG9uIHRoZSBzaXplciBhbmQgbW92ZSB0aGUgbW91c2UuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBldiAtIG1vdXNlIG1vdmUgZXZlbnRcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLl9vblNpemVyTW91c2VNb3ZlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgXG4gICAgICAgICAgICAvLyB1c2UgYnV0dG9ucyBwcm9wZXJ0eSBoZXJlIHNpbmNlIGV2LmJ1dHRvbiBpbiBzb21lIGVkZ2UgY2FzZSBpcyBub3QgdXBkaW5nIHdlbGwgZHVyaW5nIHRoZSBtb3ZlLlxuICAgICAgICAgICAgLy8gYnV0IGZpcmVmb3ggZG9lc24ndCBzdXBwb3J0IGl0LCBzbyB3ZSBzZXQgdGhlIGRlZmF1bHQgdmFsdWUgd2hlbiBpdCBpcyBub3QgZGVmaW5lZC5cbiAgICAgICAgICAgIGJ1dHRvbnMgPSBldi5idXR0b25zO1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIG9uQ29sdW1uSXNTaXppbmdDaGFuZ2VkID0gX2Eub25Db2x1bW5Jc1NpemluZ0NoYW5nZWQsIG9uQ29sdW1uUmVzaXplZCA9IF9hLm9uQ29sdW1uUmVzaXplZCwgX2IgPSBfYS5jb2x1bW5zLCBjb2x1bW5zID0gX2IgPT09IHZvaWQgMCA/IE5PX0NPTFVNTlMgOiBfYjtcbiAgICAgICAgICAgIHZhciBjb2x1bW5SZXNpemVEZXRhaWxzID0gX3RoaXMuc3RhdGUuY29sdW1uUmVzaXplRGV0YWlscztcbiAgICAgICAgICAgIGlmIChidXR0b25zICE9PSB1bmRlZmluZWQgJiYgYnV0dG9ucyAhPT0gTU9VU0VNT1ZFX1BSSU1BUllfQlVUVE9OKSB7XG4gICAgICAgICAgICAgICAgLy8gY2FuY2VsIG1vdXNlIGRvd24gZXZlbnQgYW5kIHJldHVybiBlYXJseSB3aGVuIHRoZSBwcmltYXJ5IGJ1dHRvbiBpcyBub3QgcHJlc3NlZFxuICAgICAgICAgICAgICAgIF90aGlzLl9vblNpemVyTW91c2VVcChldik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV2LmNsaWVudFggIT09IGNvbHVtblJlc2l6ZURldGFpbHMub3JpZ2luWCkge1xuICAgICAgICAgICAgICAgIGlmIChvbkNvbHVtbklzU2l6aW5nQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgICBvbkNvbHVtbklzU2l6aW5nQ2hhbmdlZChjb2x1bW5zW2NvbHVtblJlc2l6ZURldGFpbHMuY29sdW1uSW5kZXhdLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob25Db2x1bW5SZXNpemVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1vdmVtZW50ID0gZXYuY2xpZW50WCAtIGNvbHVtblJlc2l6ZURldGFpbHMub3JpZ2luWDtcbiAgICAgICAgICAgICAgICBpZiAoZ2V0UlRMKF90aGlzLnByb3BzLnRoZW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBtb3ZlbWVudCA9IC1tb3ZlbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb25Db2x1bW5SZXNpemVkKGNvbHVtbnNbY29sdW1uUmVzaXplRGV0YWlscy5jb2x1bW5JbmRleF0sIGNvbHVtblJlc2l6ZURldGFpbHMuY29sdW1uTWluV2lkdGggKyBtb3ZlbWVudCwgY29sdW1uUmVzaXplRGV0YWlscy5jb2x1bW5JbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblNpemVyQmx1ciA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIGNvbHVtblJlc2l6ZURldGFpbHMgPSBfdGhpcy5zdGF0ZS5jb2x1bW5SZXNpemVEZXRhaWxzO1xuICAgICAgICAgICAgaWYgKGNvbHVtblJlc2l6ZURldGFpbHMpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGNvbHVtblJlc2l6ZURldGFpbHM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgaXNTaXppbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogbW91c2UgdXAgZXZlbnQgaGFuZGxlciBpbiB0aGUgaGVhZGVyXG4gICAgICAgICAqIGNsZWFyIHRoZSByZXNpemUgcmVsYXRlZCBzdGF0ZS5cbiAgICAgICAgICogVGhpcyBpcyB0byBlbnN1cmUgd2UgY2FuIGNhdGNoIGRvdWJsZSBjbGljayBldmVudFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gZXYgLSBtb3VzZSB1cCBldmVudFxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuX29uU2l6ZXJNb3VzZVVwID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgX2IgPSBfYS5jb2x1bW5zLCBjb2x1bW5zID0gX2IgPT09IHZvaWQgMCA/IE5PX0NPTFVNTlMgOiBfYiwgb25Db2x1bW5Jc1NpemluZ0NoYW5nZWQgPSBfYS5vbkNvbHVtbklzU2l6aW5nQ2hhbmdlZDtcbiAgICAgICAgICAgIHZhciBjb2x1bW5SZXNpemVEZXRhaWxzID0gX3RoaXMuc3RhdGUuY29sdW1uUmVzaXplRGV0YWlscztcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBjb2x1bW5SZXNpemVEZXRhaWxzOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgaXNTaXppbmc6IGZhbHNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAob25Db2x1bW5Jc1NpemluZ0NoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICBvbkNvbHVtbklzU2l6aW5nQ2hhbmdlZChjb2x1bW5zW2NvbHVtblJlc2l6ZURldGFpbHMuY29sdW1uSW5kZXhdLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblRvZ2dsZUNvbGxhcHNlQWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG9uVG9nZ2xlQ29sbGFwc2VBbGwgPSBfdGhpcy5wcm9wcy5vblRvZ2dsZUNvbGxhcHNlQWxsO1xuICAgICAgICAgICAgdmFyIG5ld0NvbGxhcHNlZCA9ICFfdGhpcy5zdGF0ZS5pc0FsbENvbGxhcHNlZDtcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBpc0FsbENvbGxhcHNlZDogbmV3Q29sbGFwc2VkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAob25Ub2dnbGVDb2xsYXBzZUFsbCkge1xuICAgICAgICAgICAgICAgIG9uVG9nZ2xlQ29sbGFwc2VBbGwobmV3Q29sbGFwc2VkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaW5pdGlhbGl6ZUNvbXBvbmVudFJlZihfdGhpcyk7XG4gICAgICAgIF90aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRHcm91cChfdGhpcyk7XG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgY29sdW1uUmVzaXplRGV0YWlsczogdW5kZWZpbmVkLFxuICAgICAgICAgICAgaXNBbGxDb2xsYXBzZWQ6IF90aGlzLnByb3BzLmlzQWxsQ29sbGFwc2VkLFxuICAgICAgICAgICAgaXNBbGxTZWxlY3RlZDogISFfdGhpcy5wcm9wcy5zZWxlY3Rpb24gJiYgX3RoaXMucHJvcHMuc2VsZWN0aW9uLmlzQWxsU2VsZWN0ZWQoKSxcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uRHJvcEluZGV4SW5mbyA9IHtcbiAgICAgICAgICAgIHNvdXJjZUluZGV4OiAtMSxcbiAgICAgICAgICAgIHRhcmdldEluZGV4OiAtMSxcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX2lkID0gZ2V0SWQoJ2hlYWRlcicpO1xuICAgICAgICBfdGhpcy5fY3VycmVudERyb3BIaW50SW5kZXggPSAtMTtcbiAgICAgICAgLy8gVGhlIGRyYWcgZHJvcCBoYW5kbGVyIHdvbid0IGRvIGFueSB3b3JrIHVudGlsIHN1YnNjcmliZSgpIGlzIGNhbGxlZCxcbiAgICAgICAgLy8gc28gYWx3YXlzIHNldCBpdCB1cCBmb3IgY29udmVuaWVuY2VcbiAgICAgICAgX3RoaXMuX2RyYWdEcm9wSGVscGVyID0gbmV3IERyYWdEcm9wSGVscGVyKHtcbiAgICAgICAgICAgIHNlbGVjdGlvbjoge1xuICAgICAgICAgICAgICAgIGdldFNlbGVjdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtaW5pbXVtUGl4ZWxzRm9yRHJhZzogX3RoaXMucHJvcHMubWluaW11bVBpeGVsc0ZvckRyYWcsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIERldGFpbHNIZWFkZXJCYXNlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNlbGVjdGlvbiA9IHRoaXMucHJvcHMuc2VsZWN0aW9uO1xuICAgICAgICB0aGlzLl9ldmVudHMub24oc2VsZWN0aW9uLCBTRUxFQ1RJT05fQ0hBTkdFLCB0aGlzLl9vblNlbGVjdGlvbkNoYW5nZWQpO1xuICAgICAgICAvLyB0aGlzLl9yb290RWxlbWVudC5jdXJyZW50IHdpbGwgYmUgbnVsbCBpbiB0ZXN0cyB1c2luZyByZWFjdC10ZXN0LXJlbmRlcmVyXG4gICAgICAgIGlmICh0aGlzLl9yb290RWxlbWVudC5jdXJyZW50KSB7XG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIHVzZSBuYXRpdmUgb24gdGhpcyB0byBwcmV2ZW50IE1hcnF1ZWVTZWxlY3Rpb24gZnJvbSBoYW5kbGluZyB0aGUgZXZlbnQgYmVmb3JlIHVzLlxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzLm9uKHRoaXMuX3Jvb3RFbGVtZW50LmN1cnJlbnQsICdtb3VzZWRvd24nLCB0aGlzLl9vblJvb3RNb3VzZURvd24pO1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRzLm9uKHRoaXMuX3Jvb3RFbGVtZW50LmN1cnJlbnQsICdrZXlkb3duJywgdGhpcy5fb25Sb290S2V5RG93bik7XG4gICAgICAgICAgICBpZiAodGhpcy5fZ2V0Q29sdW1uUmVvcmRlclByb3BzKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25PYmplY3QgPSB0aGlzLl9kcmFnRHJvcEhlbHBlci5zdWJzY3JpYmUodGhpcy5fcm9vdEVsZW1lbnQuY3VycmVudCwgdGhpcy5fZXZlbnRzLCB0aGlzLl9nZXRIZWFkZXJEcmFnRHJvcE9wdGlvbnMoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERldGFpbHNIZWFkZXJCYXNlLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgICAgIGlmICh0aGlzLl9nZXRDb2x1bW5SZW9yZGVyUHJvcHMoKSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9zdWJzY3JpcHRpb25PYmplY3QgJiYgdGhpcy5fcm9vdEVsZW1lbnQuY3VycmVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbk9iamVjdCA9IHRoaXMuX2RyYWdEcm9wSGVscGVyLnN1YnNjcmliZSh0aGlzLl9yb290RWxlbWVudC5jdXJyZW50LCB0aGlzLl9ldmVudHMsIHRoaXMuX2dldEhlYWRlckRyYWdEcm9wT3B0aW9ucygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9zdWJzY3JpcHRpb25PYmplY3QpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbk9iamVjdC5kaXNwb3NlKCk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fc3Vic2NyaXB0aW9uT2JqZWN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnByb3BzICE9PSBwcmV2UHJvcHMgJiYgdGhpcy5fb25Ecm9wSW5kZXhJbmZvLnNvdXJjZUluZGV4ID49IDAgJiYgdGhpcy5fb25Ecm9wSW5kZXhJbmZvLnRhcmdldEluZGV4ID49IDApIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHByZXZQcm9wcy5jb2x1bW5zLCBwcmV2aW91c0NvbHVtbnMgPSBfYSA9PT0gdm9pZCAwID8gTk9fQ09MVU1OUyA6IF9hO1xuICAgICAgICAgICAgdmFyIF9iID0gdGhpcy5wcm9wcy5jb2x1bW5zLCBjb2x1bW5zID0gX2IgPT09IHZvaWQgMCA/IE5PX0NPTFVNTlMgOiBfYjtcbiAgICAgICAgICAgIGlmIChwcmV2aW91c0NvbHVtbnNbdGhpcy5fb25Ecm9wSW5kZXhJbmZvLnNvdXJjZUluZGV4XS5rZXkgPT09IGNvbHVtbnNbdGhpcy5fb25Ecm9wSW5kZXhJbmZvLnRhcmdldEluZGV4XS5rZXkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkRyb3BJbmRleEluZm8gPSB7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUluZGV4OiAtMSxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0SW5kZXg6IC0xLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuaXNBbGxDb2xsYXBzZWQgIT09IHByZXZQcm9wcy5pc0FsbENvbGxhcHNlZCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzQWxsQ29sbGFwc2VkOiB0aGlzLnByb3BzLmlzQWxsQ29sbGFwc2VkIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEZXRhaWxzSGVhZGVyQmFzZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdWJzY3JpcHRpb25PYmplY3QpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbk9iamVjdC5kaXNwb3NlKCk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fc3Vic2NyaXB0aW9uT2JqZWN0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2RyYWdEcm9wSGVscGVyLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzLmRpc3Bvc2UoKTtcbiAgICB9O1xuICAgIERldGFpbHNIZWFkZXJCYXNlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIF9iID0gX2EuY29sdW1ucywgY29sdW1ucyA9IF9iID09PSB2b2lkIDAgPyBOT19DT0xVTU5TIDogX2IsIGFyaWFMYWJlbCA9IF9hLmFyaWFMYWJlbCwgYXJpYUxhYmVsRm9yVG9nZ2xlQWxsR3JvdXBzQnV0dG9uID0gX2EuYXJpYUxhYmVsRm9yVG9nZ2xlQWxsR3JvdXBzQnV0dG9uLCBhcmlhTGFiZWxGb3JTZWxlY3RBbGxDaGVja2JveCA9IF9hLmFyaWFMYWJlbEZvclNlbGVjdEFsbENoZWNrYm94LCBzZWxlY3RBbGxWaXNpYmlsaXR5ID0gX2Euc2VsZWN0QWxsVmlzaWJpbGl0eSwgYXJpYUxhYmVsRm9yU2VsZWN0aW9uQ29sdW1uID0gX2EuYXJpYUxhYmVsRm9yU2VsZWN0aW9uQ29sdW1uLCBpbmRlbnRXaWR0aCA9IF9hLmluZGVudFdpZHRoLCBvbkNvbHVtbkNsaWNrID0gX2Eub25Db2x1bW5DbGljaywgb25Db2x1bW5Db250ZXh0TWVudSA9IF9hLm9uQ29sdW1uQ29udGV4dE1lbnUsIF9jID0gX2Eub25SZW5kZXJDb2x1bW5IZWFkZXJUb29sdGlwLCBvblJlbmRlckNvbHVtbkhlYWRlclRvb2x0aXAgPSBfYyA9PT0gdm9pZCAwID8gdGhpcy5fb25SZW5kZXJDb2x1bW5IZWFkZXJUb29sdGlwIDogX2MsIHN0eWxlcyA9IF9hLnN0eWxlcywgc2VsZWN0aW9uTW9kZSA9IF9hLnNlbGVjdGlvbk1vZGUsIHRoZW1lID0gX2EudGhlbWUsIG9uUmVuZGVyRGV0YWlsc0NoZWNrYm94ID0gX2Eub25SZW5kZXJEZXRhaWxzQ2hlY2tib3gsIGdyb3VwTmVzdGluZ0RlcHRoID0gX2EuZ3JvdXBOZXN0aW5nRGVwdGgsIHVzZUZhc3RJY29ucyA9IF9hLnVzZUZhc3RJY29ucywgY2hlY2tib3hWaXNpYmlsaXR5ID0gX2EuY2hlY2tib3hWaXNpYmlsaXR5LCBjbGFzc05hbWUgPSBfYS5jbGFzc05hbWU7XG4gICAgICAgIHZhciBfZCA9IHRoaXMuc3RhdGUsIGlzQWxsU2VsZWN0ZWQgPSBfZC5pc0FsbFNlbGVjdGVkLCBjb2x1bW5SZXNpemVEZXRhaWxzID0gX2QuY29sdW1uUmVzaXplRGV0YWlscywgaXNTaXppbmcgPSBfZC5pc1NpemluZywgaXNBbGxDb2xsYXBzZWQgPSBfZC5pc0FsbENvbGxhcHNlZDtcbiAgICAgICAgdmFyIHNob3dDaGVja2JveCA9IHNlbGVjdEFsbFZpc2liaWxpdHkgIT09IFNlbGVjdEFsbFZpc2liaWxpdHkubm9uZTtcbiAgICAgICAgdmFyIGlzQ2hlY2tib3hIaWRkZW4gPSBzZWxlY3RBbGxWaXNpYmlsaXR5ID09PSBTZWxlY3RBbGxWaXNpYmlsaXR5LmhpZGRlbjtcbiAgICAgICAgdmFyIGlzQ2hlY2tib3hBbHdheXNWaXNpYmxlID0gY2hlY2tib3hWaXNpYmlsaXR5ID09PSBDaGVja2JveFZpc2liaWxpdHkuYWx3YXlzO1xuICAgICAgICB2YXIgY29sdW1uUmVvcmRlclByb3BzID0gdGhpcy5fZ2V0Q29sdW1uUmVvcmRlclByb3BzKCk7XG4gICAgICAgIHZhciBmcm96ZW5Db2x1bW5Db3VudEZyb21TdGFydCA9IGNvbHVtblJlb3JkZXJQcm9wcyAmJiBjb2x1bW5SZW9yZGVyUHJvcHMuZnJvemVuQ29sdW1uQ291bnRGcm9tU3RhcnRcbiAgICAgICAgICAgID8gY29sdW1uUmVvcmRlclByb3BzLmZyb3plbkNvbHVtbkNvdW50RnJvbVN0YXJ0XG4gICAgICAgICAgICA6IDA7XG4gICAgICAgIHZhciBmcm96ZW5Db2x1bW5Db3VudEZyb21FbmQgPSBjb2x1bW5SZW9yZGVyUHJvcHMgJiYgY29sdW1uUmVvcmRlclByb3BzLmZyb3plbkNvbHVtbkNvdW50RnJvbUVuZFxuICAgICAgICAgICAgPyBjb2x1bW5SZW9yZGVyUHJvcHMuZnJvemVuQ29sdW1uQ291bnRGcm9tRW5kXG4gICAgICAgICAgICA6IDA7XG4gICAgICAgIHRoaXMuX2NsYXNzTmFtZXMgPSBnZXRDbGFzc05hbWVzKHN0eWxlcywge1xuICAgICAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICAgICAgaXNBbGxTZWxlY3RlZDogaXNBbGxTZWxlY3RlZCxcbiAgICAgICAgICAgIGlzU2VsZWN0QWxsSGlkZGVuOiBzZWxlY3RBbGxWaXNpYmlsaXR5ID09PSBTZWxlY3RBbGxWaXNpYmlsaXR5LmhpZGRlbixcbiAgICAgICAgICAgIGlzUmVzaXppbmdDb2x1bW46ICEhY29sdW1uUmVzaXplRGV0YWlscyAmJiBpc1NpemluZyxcbiAgICAgICAgICAgIGlzU2l6aW5nOiBpc1NpemluZyxcbiAgICAgICAgICAgIGlzQWxsQ29sbGFwc2VkOiBpc0FsbENvbGxhcHNlZCxcbiAgICAgICAgICAgIGlzQ2hlY2tib3hIaWRkZW46IGlzQ2hlY2tib3hIaWRkZW4sXG4gICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBjbGFzc05hbWVzID0gdGhpcy5fY2xhc3NOYW1lcztcbiAgICAgICAgdmFyIEljb25Db21wb25lbnQgPSB1c2VGYXN0SWNvbnMgPyBGb250SWNvbiA6IEljb247XG4gICAgICAgIHZhciBpc1JUTCA9IGdldFJUTCh0aGVtZSk7XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChGb2N1c1pvbmUsIHsgcm9sZTogXCJyb3dcIiwgXCJhcmlhLWxhYmVsXCI6IGFyaWFMYWJlbCwgY2xhc3NOYW1lOiBjbGFzc05hbWVzLnJvb3QsIGNvbXBvbmVudFJlZjogdGhpcy5fcm9vdENvbXBvbmVudCwgZWxlbWVudFJlZjogdGhpcy5fcm9vdEVsZW1lbnQsIG9uTW91c2VNb3ZlOiB0aGlzLl9vblJvb3RNb3VzZU1vdmUsIFwiZGF0YS1hdXRvbWF0aW9uaWRcIjogXCJEZXRhaWxzSGVhZGVyXCIsIGRpcmVjdGlvbjogRm9jdXNab25lRGlyZWN0aW9uLmhvcml6b250YWwgfSxcbiAgICAgICAgICAgIHNob3dDaGVja2JveFxuICAgICAgICAgICAgICAgID8gW1xuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsga2V5OiBcIl9fY2hlY2tib3hcIiwgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmNlbGxJc0NoZWNrLCBcImFyaWEtbGFiZWxsZWRieVwiOiB0aGlzLl9pZCArIFwiLWNoZWNrXCIsIG9uQ2xpY2s6ICFpc0NoZWNrYm94SGlkZGVuID8gdGhpcy5fb25TZWxlY3RBbGxDbGlja2VkIDogdW5kZWZpbmVkLCBcImFyaWEtY29saW5kZXhcIjogMSwgcm9sZTogJ2NvbHVtbmhlYWRlcicgfSwgb25SZW5kZXJDb2x1bW5IZWFkZXJUb29sdGlwKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3RDbGFzc05hbWU6IGNsYXNzTmFtZXMuY2hlY2tUb29sdGlwLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHRoaXMuX2lkICsgXCItY2hlY2tUb29sdGlwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRBcmlhRGVzY3JpYmVkQnk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogYXJpYUxhYmVsRm9yU2VsZWN0QWxsQ2hlY2tib3gsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogKFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGV0YWlsc1Jvd0NoZWNrLCB7IGlkOiB0aGlzLl9pZCArIFwiLWNoZWNrXCIsIFwiYXJpYS1sYWJlbFwiOiBzZWxlY3Rpb25Nb2RlID09PSBTZWxlY3Rpb25Nb2RlLm11bHRpcGxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gYXJpYUxhYmVsRm9yU2VsZWN0QWxsQ2hlY2tib3hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhcmlhTGFiZWxGb3JTZWxlY3Rpb25Db2x1bW4sIFwiYXJpYS1kZXNjcmliZWRieVwiOiAhaXNDaGVja2JveEhpZGRlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGFyaWFMYWJlbEZvclNlbGVjdEFsbENoZWNrYm94ICYmICF0aGlzLnByb3BzLm9uUmVuZGVyQ29sdW1uSGVhZGVyVG9vbHRpcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLl9pZCArIFwiLWNoZWNrVG9vbHRpcFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGFyaWFMYWJlbEZvclNlbGVjdGlvbkNvbHVtbiAmJiAhdGhpcy5wcm9wcy5vblJlbmRlckNvbHVtbkhlYWRlclRvb2x0aXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5faWQgKyBcIi1jaGVja1Rvb2x0aXBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsIFwiZGF0YS1pcy1mb2N1c2FibGVcIjogIWlzQ2hlY2tib3hIaWRkZW4gfHwgdW5kZWZpbmVkLCBpc0hlYWRlcjogdHJ1ZSwgc2VsZWN0ZWQ6IGlzQWxsU2VsZWN0ZWQsIGFueVNlbGVjdGVkOiBmYWxzZSwgY2FuU2VsZWN0OiAhaXNDaGVja2JveEhpZGRlbiwgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmNoZWNrLCBvblJlbmRlckRldGFpbHNDaGVja2JveDogb25SZW5kZXJEZXRhaWxzQ2hlY2tib3gsIHVzZUZhc3RJY29uczogdXNlRmFzdEljb25zLCBpc1Zpc2libGU6IGlzQ2hlY2tib3hBbHdheXNWaXNpYmxlIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5fb25SZW5kZXJDb2x1bW5IZWFkZXJUb29sdGlwKSksXG4gICAgICAgICAgICAgICAgICAgICF0aGlzLnByb3BzLm9uUmVuZGVyQ29sdW1uSGVhZGVyVG9vbHRpcCA/IChhcmlhTGFiZWxGb3JTZWxlY3RBbGxDaGVja2JveCAmJiAhaXNDaGVja2JveEhpZGRlbiA/IChSZWFjdC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIiwgeyBrZXk6IFwiX19jaGVja2JveExhYmVsXCIsIGlkOiB0aGlzLl9pZCArIFwiLWNoZWNrVG9vbHRpcFwiLCBjbGFzc05hbWU6IGNsYXNzTmFtZXMuYWNjZXNzaWJsZUxhYmVsLCBcImFyaWEtaGlkZGVuXCI6IHRydWUgfSwgYXJpYUxhYmVsRm9yU2VsZWN0QWxsQ2hlY2tib3gpKSA6IGFyaWFMYWJlbEZvclNlbGVjdGlvbkNvbHVtbiAmJiBpc0NoZWNrYm94SGlkZGVuID8gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiLCB7IGtleTogXCJfX2NoZWNrYm94TGFiZWxcIiwgaWQ6IHRoaXMuX2lkICsgXCItY2hlY2tUb29sdGlwXCIsIGNsYXNzTmFtZTogY2xhc3NOYW1lcy5hY2Nlc3NpYmxlTGFiZWwsIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSB9LCBhcmlhTGFiZWxGb3JTZWxlY3Rpb25Db2x1bW4pKSA6IG51bGwpIDogbnVsbCxcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgOiBudWxsLFxuICAgICAgICAgICAgZ3JvdXBOZXN0aW5nRGVwdGggPiAwICYmIHRoaXMucHJvcHMuY29sbGFwc2VBbGxWaXNpYmlsaXR5ID09PSBDb2xsYXBzZUFsbFZpc2liaWxpdHkudmlzaWJsZSA/IChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmNlbGxJc0dyb3VwRXhwYW5kZXIsIG9uQ2xpY2s6IHRoaXMuX29uVG9nZ2xlQ29sbGFwc2VBbGwsIFwiZGF0YS1pcy1mb2N1c2FibGVcIjogdHJ1ZSwgXCJhcmlhLWxhYmVsXCI6IGFyaWFMYWJlbEZvclRvZ2dsZUFsbEdyb3Vwc0J1dHRvbiwgXCJhcmlhLWV4cGFuZGVkXCI6ICFpc0FsbENvbGxhcHNlZCwgcm9sZTogXCJjb2x1bW5oZWFkZXJcIiB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbkNvbXBvbmVudCwgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMuY29sbGFwc2VCdXR0b24sIGljb25OYW1lOiBpc1JUTCA/ICdDaGV2cm9uTGVmdE1lZCcgOiAnQ2hldnJvblJpZ2h0TWVkJyB9KSkpIDogbnVsbCxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR3JvdXBTcGFjZXIsIHsgaW5kZW50V2lkdGg6IGluZGVudFdpZHRoLCByb2xlOiBcImdyaWRjZWxsXCIsIGNvdW50OiBncm91cE5lc3RpbmdEZXB0aCAtIDEgfSksXG4gICAgICAgICAgICBjb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sdW1uLCBjb2x1bW5JbmRleCkge1xuICAgICAgICAgICAgICAgIHZhciBfaXNEcmFnZ2FibGUgPSBjb2x1bW5SZW9yZGVyUHJvcHNcbiAgICAgICAgICAgICAgICAgICAgPyBjb2x1bW5JbmRleCA+PSBmcm96ZW5Db2x1bW5Db3VudEZyb21TdGFydCAmJiBjb2x1bW5JbmRleCA8IGNvbHVtbnMubGVuZ3RoIC0gZnJvemVuQ29sdW1uQ291bnRGcm9tRW5kXG4gICAgICAgICAgICAgICAgICAgIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uUmVvcmRlclByb3BzICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoX2lzRHJhZ2dhYmxlIHx8IGNvbHVtbkluZGV4ID09PSBjb2x1bW5zLmxlbmd0aCAtIGZyb3plbkNvbHVtbkNvdW50RnJvbUVuZCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9yZW5kZXJEcm9wSGludChjb2x1bW5JbmRleCksXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGV0YWlsc0NvbHVtbiwgeyBjb2x1bW46IGNvbHVtbiwgc3R5bGVzOiBjb2x1bW4uc3R5bGVzLCBrZXk6IGNvbHVtbi5rZXksIGNvbHVtbkluZGV4OiAoc2hvd0NoZWNrYm94ID8gMiA6IDEpICsgY29sdW1uSW5kZXgsIHBhcmVudElkOiBfdGhpcy5faWQsIGlzRHJhZ2dhYmxlOiBfaXNEcmFnZ2FibGUsIHVwZGF0ZURyYWdJbmZvOiBfdGhpcy5fdXBkYXRlRHJhZ0luZm8sIGRyYWdEcm9wSGVscGVyOiBfdGhpcy5fZHJhZ0Ryb3BIZWxwZXIsIG9uQ29sdW1uQ2xpY2s6IG9uQ29sdW1uQ2xpY2ssIG9uQ29sdW1uQ29udGV4dE1lbnU6IG9uQ29sdW1uQ29udGV4dE1lbnUsIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90IHJlbmRlciB0b29sdGlwcyBieSBkZWZhdWx0LCBidXQgYWxsb3cgZm9yIG92ZXJyaWRlIHZpYSBwcm9wcy5cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uUmVuZGVyQ29sdW1uSGVhZGVyVG9vbHRpcDogX3RoaXMucHJvcHMub25SZW5kZXJDb2x1bW5IZWFkZXJUb29sdGlwLCBpc0Ryb3BwZWQ6IF90aGlzLl9vbkRyb3BJbmRleEluZm8udGFyZ2V0SW5kZXggPT09IGNvbHVtbkluZGV4LCBjZWxsU3R5bGVQcm9wczogX3RoaXMucHJvcHMuY2VsbFN0eWxlUHJvcHMsIHVzZUZhc3RJY29uczogdXNlRmFzdEljb25zIH0pLFxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcmVuZGVyQ29sdW1uRGl2aWRlcihjb2x1bW5JbmRleCksXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgY29sdW1uUmVvcmRlclByb3BzICYmIGZyb3plbkNvbHVtbkNvdW50RnJvbUVuZCA9PT0gMCAmJiB0aGlzLl9yZW5kZXJEcm9wSGludChjb2x1bW5zLmxlbmd0aCksXG4gICAgICAgICAgICBpc1NpemluZyAmJiAoUmVhY3QuY3JlYXRlRWxlbWVudChMYXllciwgbnVsbCxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzLnNpemluZ092ZXJsYXksIG9uTW91c2VNb3ZlOiB0aGlzLl9vblNpemVyTW91c2VNb3ZlLCBvbk1vdXNlVXA6IHRoaXMuX29uU2l6ZXJNb3VzZVVwIH0pKSkpKTtcbiAgICB9O1xuICAgIC8qKiBTZXQgZm9jdXMgdG8gdGhlIGFjdGl2ZSB0aGluZyBpbiB0aGUgZm9jdXMgYXJlYS4gKi9cbiAgICBEZXRhaWxzSGVhZGVyQmFzZS5wcm90b3R5cGUuZm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuICEhKChfYSA9IHRoaXMuX3Jvb3RDb21wb25lbnQuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvY3VzKCkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0cyBjb2x1bW4gcmVvcmRlciBwcm9wcyBmcm9tIHRoaXMucHJvcHMuIElmIHRoZSBjYWxsaW5nIGNvZGUgaXMgcGFydCBvZiBzZXR0aW5nIHVwIG9yXG4gICAgICogaGFuZGxpbmcgZHJhZy9kcm9wIGV2ZW50cywgaXQncyBzYWZlIHRvIGFzc3VtZSB0aGF0IHRoaXMgbWV0aG9kJ3MgcmV0dXJuIHZhbHVlIGlzIGRlZmluZWRcbiAgICAgKiAoYmVjYXVzZSBkcmFnL2Ryb3AgaGFuZGxpbmcgd2lsbCBvbmx5IGJlIHNldCB1cCBpZiByZW9yZGVyIHByb3BzIGFyZSBnaXZlbikuXG4gICAgICovXG4gICAgRGV0YWlsc0hlYWRlckJhc2UucHJvdG90eXBlLl9nZXRDb2x1bW5SZW9yZGVyUHJvcHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIGNvbHVtblJlb3JkZXJPcHRpb25zID0gX2EuY29sdW1uUmVvcmRlck9wdGlvbnMsIGNvbHVtblJlb3JkZXJQcm9wcyA9IF9hLmNvbHVtblJlb3JkZXJQcm9wcztcbiAgICAgICAgcmV0dXJuIGNvbHVtblJlb3JkZXJQcm9wcyB8fCAoY29sdW1uUmVvcmRlck9wdGlvbnMgJiYgX19hc3NpZ24oX19hc3NpZ24oe30sIGNvbHVtblJlb3JkZXJPcHRpb25zKSwgeyBvbkNvbHVtbkRyYWdFbmQ6IHVuZGVmaW5lZCB9KSk7XG4gICAgfTtcbiAgICBEZXRhaWxzSGVhZGVyQmFzZS5wcm90b3R5cGUuX2dldEhlYWRlckRyYWdEcm9wT3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBzZWxlY3Rpb25JbmRleDogMSxcbiAgICAgICAgICAgIGNvbnRleHQ6IHsgZGF0YTogdGhpcywgaW5kZXg6IDAgfSxcbiAgICAgICAgICAgIGNhbkRyYWc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9LFxuICAgICAgICAgICAgY2FuRHJvcDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICAgICAgICAgIG9uRHJhZ1N0YXJ0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICB1cGRhdGVEcm9wU3RhdGU6IHRoaXMuX3VwZGF0ZURyb3BwaW5nU3RhdGUsXG4gICAgICAgICAgICBvbkRyb3A6IHRoaXMuX29uRHJvcCxcbiAgICAgICAgICAgIG9uRHJhZ0VuZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgb25EcmFnT3ZlcjogdGhpcy5fb25EcmFnT3ZlcixcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfTtcbiAgICBEZXRhaWxzSGVhZGVyQmFzZS5wcm90b3R5cGUuX2lzVmFsaWRDdXJyZW50RHJvcEhpbnRJbmRleCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnREcm9wSGludEluZGV4ID49IDA7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgXCJTZWxlY3QgQWxsXCIgY2hlY2tib3ggY29sdW1uIGlzIGhpZGRlbi5cbiAgICAgKi9cbiAgICBEZXRhaWxzSGVhZGVyQmFzZS5wcm90b3R5cGUuX2lzQ2hlY2tib3hDb2x1bW5IaWRkZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIHNlbGVjdGlvbk1vZGUgPSBfYS5zZWxlY3Rpb25Nb2RlLCBjaGVja2JveFZpc2liaWxpdHkgPSBfYS5jaGVja2JveFZpc2liaWxpdHk7XG4gICAgICAgIHJldHVybiBzZWxlY3Rpb25Nb2RlID09PSBTZWxlY3Rpb25Nb2RlLm5vbmUgfHwgY2hlY2tib3hWaXNpYmlsaXR5ID09PSBDaGVja2JveFZpc2liaWxpdHkuaGlkZGVuO1xuICAgIH07XG4gICAgRGV0YWlsc0hlYWRlckJhc2UucHJvdG90eXBlLl9yZXNldERyb3BIaW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnREcm9wSGludEluZGV4ID49IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZURyb3BIaW50RWxlbWVudCh0aGlzLl9kcm9wSGludERldGFpbHNbdGhpcy5fY3VycmVudERyb3BIaW50SW5kZXhdLmRyb3BIaW50RWxlbWVudFJlZiwgJ25vbmUnKTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnREcm9wSGludEluZGV4ID0gLTE7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERldGFpbHNIZWFkZXJCYXNlLnByb3RvdHlwZS5fdXBkYXRlRHJvcEhpbnRFbGVtZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQsIGRpc3BsYXlQcm9wZXJ0eSkge1xuICAgICAgICBlbGVtZW50LmNoaWxkTm9kZXNbMV0uc3R5bGUuZGlzcGxheSA9IGRpc3BsYXlQcm9wZXJ0eTtcbiAgICAgICAgZWxlbWVudC5jaGlsZE5vZGVzWzBdLnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5UHJvcGVydHk7XG4gICAgfTtcbiAgICBEZXRhaWxzSGVhZGVyQmFzZS5wcm90b3R5cGUuX2lzRXZlbnRPbkhlYWRlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAodGhpcy5fcm9vdEVsZW1lbnQuY3VycmVudCkge1xuICAgICAgICAgICAgdmFyIGNsaWVudFJlY3QgPSB0aGlzLl9yb290RWxlbWVudC5jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgaWYgKGV2ZW50LmNsaWVudFggPiBjbGllbnRSZWN0LmxlZnQgJiZcbiAgICAgICAgICAgICAgICBldmVudC5jbGllbnRYIDwgY2xpZW50UmVjdC5yaWdodCAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmNsaWVudFkgPiBjbGllbnRSZWN0LnRvcCAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmNsaWVudFkgPCBjbGllbnRSZWN0LmJvdHRvbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBDb2x1bW5EcmFnRW5kTG9jYXRpb24uaGVhZGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBEZXRhaWxzSGVhZGVyQmFzZS5wcm90b3R5cGUuX3JlbmRlckNvbHVtbkRpdmlkZXIgPSBmdW5jdGlvbiAoY29sdW1uSW5kZXgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcy5jb2x1bW5zLCBjb2x1bW5zID0gX2EgPT09IHZvaWQgMCA/IE5PX0NPTFVNTlMgOiBfYTtcbiAgICAgICAgdmFyIGNvbHVtbiA9IGNvbHVtbnNbY29sdW1uSW5kZXhdO1xuICAgICAgICB2YXIgb25SZW5kZXJEaXZpZGVyID0gY29sdW1uLm9uUmVuZGVyRGl2aWRlcjtcbiAgICAgICAgcmV0dXJuIG9uUmVuZGVyRGl2aWRlclxuICAgICAgICAgICAgPyBvblJlbmRlckRpdmlkZXIoeyBjb2x1bW46IGNvbHVtbiwgY29sdW1uSW5kZXg6IGNvbHVtbkluZGV4IH0sIHRoaXMuX3JlbmRlckNvbHVtblNpemVyKVxuICAgICAgICAgICAgOiB0aGlzLl9yZW5kZXJDb2x1bW5TaXplcih7IGNvbHVtbjogY29sdW1uLCBjb2x1bW5JbmRleDogY29sdW1uSW5kZXggfSk7XG4gICAgfTtcbiAgICBEZXRhaWxzSGVhZGVyQmFzZS5wcm90b3R5cGUuX3JlbmRlckRyb3BIaW50ID0gZnVuY3Rpb24gKGRyb3BIaW50SW5kZXgpIHtcbiAgICAgICAgdmFyIGNsYXNzTmFtZXMgPSB0aGlzLl9jbGFzc05hbWVzO1xuICAgICAgICB2YXIgSWNvbkNvbXBvbmVudCA9IHRoaXMucHJvcHMudXNlRmFzdEljb25zID8gRm9udEljb24gOiBJY29uO1xuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBrZXk6ICdkcm9wSGludEtleScsIGNsYXNzTmFtZTogY2xhc3NOYW1lcy5kcm9wSGludFN0eWxlLCBpZDogXCJjb2x1bW5Ecm9wSGludF9cIiArIGRyb3BIaW50SW5kZXggfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyByb2xlOiBcInByZXNlbnRhdGlvblwiLCBrZXk6IFwiZHJvcEhpbnRDaXJjbGVLZXlcIiwgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmRyb3BIaW50Q2FyZXRTdHlsZSwgXCJkYXRhLWlzLWZvY3VzYWJsZVwiOiBmYWxzZSwgXCJkYXRhLXNpemVyLWluZGV4XCI6IGRyb3BIaW50SW5kZXgsIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbkNvbXBvbmVudCwgeyBpY29uTmFtZTogJ0NpcmNsZVNoYXBlU29saWQnIH0pKSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBrZXk6IFwiZHJvcEhpbnRMaW5lS2V5XCIsIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSwgXCJkYXRhLWlzLWZvY3VzYWJsZVwiOiBmYWxzZSwgXCJkYXRhLXNpemVyLWluZGV4XCI6IGRyb3BIaW50SW5kZXgsIGNsYXNzTmFtZTogY2xhc3NOYW1lcy5kcm9wSGludExpbmVTdHlsZSB9KSkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogZG91YmxlIGNsaWNrIG9uIHRoZSBjb2x1bW4gc2l6ZXIgd2lsbCBhdXRvIGFqdXN0IGNvbHVtbiB3aWR0aFxuICAgICAqIHRvIGZpdCB0aGUgbG9uZ2VzdCBjb250ZW50IGFtb25nIGN1cnJlbnQgcmVuZGVyZWQgcm93cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2x1bW5JbmRleCAtIGluZGV4IG9mIHRoZSBjb2x1bW4gdXNlciBkb3VibGUgY2xpY2tlZFxuICAgICAqIEBwYXJhbSBldiAtIG1vdXNlIGRvdWJsZSBjbGljayBldmVudFxuICAgICAqL1xuICAgIERldGFpbHNIZWFkZXJCYXNlLnByb3RvdHlwZS5fb25TaXplckRvdWJsZUNsaWNrID0gZnVuY3Rpb24gKGNvbHVtbkluZGV4LCBldikge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBvbkNvbHVtbkF1dG9SZXNpemVkID0gX2Eub25Db2x1bW5BdXRvUmVzaXplZCwgX2IgPSBfYS5jb2x1bW5zLCBjb2x1bW5zID0gX2IgPT09IHZvaWQgMCA/IE5PX0NPTFVNTlMgOiBfYjtcbiAgICAgICAgaWYgKG9uQ29sdW1uQXV0b1Jlc2l6ZWQpIHtcbiAgICAgICAgICAgIG9uQ29sdW1uQXV0b1Jlc2l6ZWQoY29sdW1uc1tjb2x1bW5JbmRleF0sIGNvbHVtbkluZGV4KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGV0YWlsc0hlYWRlckJhc2UucHJvdG90eXBlLl9vblNlbGVjdGlvbkNoYW5nZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpc0FsbFNlbGVjdGVkID0gISF0aGlzLnByb3BzLnNlbGVjdGlvbiAmJiB0aGlzLnByb3BzLnNlbGVjdGlvbi5pc0FsbFNlbGVjdGVkKCk7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmlzQWxsU2VsZWN0ZWQgIT09IGlzQWxsU2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGlzQWxsU2VsZWN0ZWQ6IGlzQWxsU2VsZWN0ZWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGV0YWlsc0hlYWRlckJhc2UuZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBzZWxlY3RBbGxWaXNpYmlsaXR5OiBTZWxlY3RBbGxWaXNpYmlsaXR5LnZpc2libGUsXG4gICAgICAgIGNvbGxhcHNlQWxsVmlzaWJpbGl0eTogQ29sbGFwc2VBbGxWaXNpYmlsaXR5LnZpc2libGUsXG4gICAgICAgIHVzZUZhc3RJY29uczogdHJ1ZSxcbiAgICB9O1xuICAgIHJldHVybiBEZXRhaWxzSGVhZGVyQmFzZTtcbn0oUmVhY3QuQ29tcG9uZW50KSk7XG5leHBvcnQgeyBEZXRhaWxzSGVhZGVyQmFzZSB9O1xuZnVuY3Rpb24gX2xpZXNCZXR3ZWVuKHJ0bCwgdGFyZ2V0LCBsZWZ0LCByaWdodCkge1xuICAgIHJldHVybiBydGwgPyB0YXJnZXQgPD0gbGVmdCAmJiB0YXJnZXQgPj0gcmlnaHQgOiB0YXJnZXQgPj0gbGVmdCAmJiB0YXJnZXQgPD0gcmlnaHQ7XG59XG5mdW5jdGlvbiBfaXNCZWZvcmUocnRsLCBhLCBiKSB7XG4gICAgcmV0dXJuIHJ0bCA/IGEgPj0gYiA6IGEgPD0gYjtcbn1cbmZ1bmN0aW9uIF9pc0FmdGVyKHJ0bCwgYSwgYikge1xuICAgIHJldHVybiBydGwgPyBhIDw9IGIgOiBhID49IGI7XG59XG5mdW5jdGlvbiBfc3RvcFByb3BhZ2F0aW9uKGV2KSB7XG4gICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1EZXRhaWxzSGVhZGVyLmJhc2UuanMubWFwIiwiaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IERldGFpbHNIZWFkZXJCYXNlIH0gZnJvbSAnLi9EZXRhaWxzSGVhZGVyLmJhc2UnO1xuaW1wb3J0IHsgZ2V0U3R5bGVzIH0gZnJvbSAnLi9EZXRhaWxzSGVhZGVyLnN0eWxlcyc7XG5leHBvcnQgdmFyIERldGFpbHNIZWFkZXIgPSBzdHlsZWQoRGV0YWlsc0hlYWRlckJhc2UsIGdldFN0eWxlcywgdW5kZWZpbmVkLCB7IHNjb3BlOiAnRGV0YWlsc0hlYWRlcicgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1EZXRhaWxzSGVhZGVyLmpzLm1hcCIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBERUZBVUxUX0NFTExfU1RZTEVfUFJPUFMgfSBmcm9tICcuL0RldGFpbHNSb3cuc3R5bGVzJztcbnZhciBnZXRDZWxsVGV4dCA9IGZ1bmN0aW9uIChpdGVtLCBjb2x1bW4pIHtcbiAgICB2YXIgdmFsdWUgPSBpdGVtICYmIGNvbHVtbiAmJiBjb2x1bW4uZmllbGROYW1lID8gaXRlbVtjb2x1bW4uZmllbGROYW1lXSA6ICcnO1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhbHVlID0gJyc7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufTtcbi8qKlxuICogQ29tcG9uZW50IGZvciByZW5kZXJpbmcgYSByb3cncyBjZWxscyBpbiBhIGBEZXRhaWxzTGlzdGAuXG4gKlxuICoge0Bkb2NDYXRlZ29yeSBEZXRhaWxzTGlzdH1cbiAqL1xuZXhwb3J0IHZhciBEZXRhaWxzUm93RmllbGRzID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIGNvbHVtbnMgPSBwcm9wcy5jb2x1bW5zLCBjb2x1bW5TdGFydEluZGV4ID0gcHJvcHMuY29sdW1uU3RhcnRJbmRleCwgcm93Q2xhc3NOYW1lcyA9IHByb3BzLnJvd0NsYXNzTmFtZXMsIF9hID0gcHJvcHMuY2VsbFN0eWxlUHJvcHMsIGNlbGxTdHlsZVByb3BzID0gX2EgPT09IHZvaWQgMCA/IERFRkFVTFRfQ0VMTF9TVFlMRV9QUk9QUyA6IF9hLCBpdGVtID0gcHJvcHMuaXRlbSwgaXRlbUluZGV4ID0gcHJvcHMuaXRlbUluZGV4LCBvblJlbmRlckl0ZW1Db2x1bW4gPSBwcm9wcy5vblJlbmRlckl0ZW1Db2x1bW4sIGdldENlbGxWYWx1ZUtleSA9IHByb3BzLmdldENlbGxWYWx1ZUtleSwgY2VsbHNCeUNvbHVtbiA9IHByb3BzLmNlbGxzQnlDb2x1bW4sIGVuYWJsZVVwZGF0ZUFuaW1hdGlvbnMgPSBwcm9wcy5lbmFibGVVcGRhdGVBbmltYXRpb25zO1xuICAgIHZhciBjZWxsVmFsdWVLZXlzUmVmID0gUmVhY3QudXNlUmVmKCk7XG4gICAgdmFyIGNlbGxWYWx1ZUtleXMgPSBjZWxsVmFsdWVLZXlzUmVmLmN1cnJlbnQgfHwgKGNlbGxWYWx1ZUtleXNSZWYuY3VycmVudCA9IHt9KTtcbiAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IHJvd0NsYXNzTmFtZXMuZmllbGRzLCBcImRhdGEtYXV0b21hdGlvbmlkXCI6IFwiRGV0YWlsc1Jvd0ZpZWxkc1wiLCByb2xlOiBcInByZXNlbnRhdGlvblwiIH0sIGNvbHVtbnMubWFwKGZ1bmN0aW9uIChjb2x1bW4sIGNvbHVtbkluZGV4KSB7XG4gICAgICAgIHZhciB3aWR0aCA9IHR5cGVvZiBjb2x1bW4uY2FsY3VsYXRlZFdpZHRoID09PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgPyAnYXV0bydcbiAgICAgICAgICAgIDogY29sdW1uLmNhbGN1bGF0ZWRXaWR0aCArXG4gICAgICAgICAgICAgICAgY2VsbFN0eWxlUHJvcHMuY2VsbExlZnRQYWRkaW5nICtcbiAgICAgICAgICAgICAgICBjZWxsU3R5bGVQcm9wcy5jZWxsUmlnaHRQYWRkaW5nICtcbiAgICAgICAgICAgICAgICAoY29sdW1uLmlzUGFkZGVkID8gY2VsbFN0eWxlUHJvcHMuY2VsbEV4dHJhUmlnaHRQYWRkaW5nIDogMCk7XG4gICAgICAgIHZhciBfYSA9IGNvbHVtbi5vblJlbmRlciwgb25SZW5kZXIgPSBfYSA9PT0gdm9pZCAwID8gb25SZW5kZXJJdGVtQ29sdW1uIDogX2EsIF9iID0gY29sdW1uLmdldFZhbHVlS2V5LCBnZXRWYWx1ZUtleSA9IF9iID09PSB2b2lkIDAgPyBnZXRDZWxsVmFsdWVLZXkgOiBfYjtcbiAgICAgICAgdmFyIGNlbGxDb250ZW50c1JlbmRlciA9IGNlbGxzQnlDb2x1bW4gJiYgY29sdW1uLmtleSBpbiBjZWxsc0J5Q29sdW1uXG4gICAgICAgICAgICA/IGNlbGxzQnlDb2x1bW5bY29sdW1uLmtleV1cbiAgICAgICAgICAgIDogb25SZW5kZXJcbiAgICAgICAgICAgICAgICA/IG9uUmVuZGVyKGl0ZW0sIGl0ZW1JbmRleCwgY29sdW1uKVxuICAgICAgICAgICAgICAgIDogZ2V0Q2VsbFRleHQoaXRlbSwgY29sdW1uKTtcbiAgICAgICAgdmFyIHByZXZpb3VzVmFsdWVLZXkgPSBjZWxsVmFsdWVLZXlzW2NvbHVtbi5rZXldO1xuICAgICAgICB2YXIgY2VsbFZhbHVlS2V5ID0gZW5hYmxlVXBkYXRlQW5pbWF0aW9ucyAmJiBnZXRWYWx1ZUtleSA/IGdldFZhbHVlS2V5KGl0ZW0sIGl0ZW1JbmRleCwgY29sdW1uKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHNob3dBbmltYXRpb24gPSBmYWxzZTtcbiAgICAgICAgaWYgKGNlbGxWYWx1ZUtleSAhPT0gdW5kZWZpbmVkICYmIHByZXZpb3VzVmFsdWVLZXkgIT09IHVuZGVmaW5lZCAmJiBjZWxsVmFsdWVLZXkgIT09IHByZXZpb3VzVmFsdWVLZXkpIHtcbiAgICAgICAgICAgIHNob3dBbmltYXRpb24gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNlbGxWYWx1ZUtleXNbY29sdW1uLmtleV0gPSBjZWxsVmFsdWVLZXk7XG4gICAgICAgIC8vIGdlbmVyYXRlIGEga2V5IHRoYXQgYXV0by1kaXJ0aWVzIHdoZW4gY29udGVudCBjaGFuZ2VzLCB0byBmb3JjZSB0aGUgY29udGFpbmVyIHRvIHJlLXJlbmRlcixcbiAgICAgICAgLy8gdG8gdHJpZ2dlciBhbmltYXRpb25cbiAgICAgICAgdmFyIGtleSA9IFwiXCIgKyBjb2x1bW4ua2V5ICsgKGNlbGxWYWx1ZUtleSAhPT0gdW5kZWZpbmVkID8gXCItXCIgKyBjZWxsVmFsdWVLZXkgOiAnJyk7XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGtleToga2V5LCByb2xlOiBjb2x1bW4uaXNSb3dIZWFkZXIgPyAncm93aGVhZGVyJyA6ICdncmlkY2VsbCcsIFwiYXJpYS1yZWFkb25seVwiOiB0cnVlLCBcImFyaWEtY29saW5kZXhcIjogY29sdW1uSW5kZXggKyBjb2x1bW5TdGFydEluZGV4ICsgMSwgY2xhc3NOYW1lOiBjc3MoY29sdW1uLmNsYXNzTmFtZSwgY29sdW1uLmlzTXVsdGlsaW5lICYmIHJvd0NsYXNzTmFtZXMuaXNNdWx0aWxpbmUsIGNvbHVtbi5pc1Jvd0hlYWRlciAmJiByb3dDbGFzc05hbWVzLmlzUm93SGVhZGVyLCByb3dDbGFzc05hbWVzLmNlbGwsIGNvbHVtbi5pc1BhZGRlZCA/IHJvd0NsYXNzTmFtZXMuY2VsbFBhZGRlZCA6IHJvd0NsYXNzTmFtZXMuY2VsbFVucGFkZGVkLCBzaG93QW5pbWF0aW9uICYmIHJvd0NsYXNzTmFtZXMuY2VsbEFuaW1hdGlvbiksIHN0eWxlOiB7IHdpZHRoOiB3aWR0aCB9LCBcImRhdGEtYXV0b21hdGlvbmlkXCI6IFwiRGV0YWlsc1Jvd0NlbGxcIiwgXCJkYXRhLWF1dG9tYXRpb24ta2V5XCI6IGNvbHVtbi5rZXkgfSwgY2VsbENvbnRlbnRzUmVuZGVyKSk7XG4gICAgfSkpKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1EZXRhaWxzUm93RmllbGRzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGluaXRpYWxpemVDb21wb25lbnRSZWYsIEV2ZW50R3JvdXAsIGNzcywgc2hhbGxvd0NvbXBhcmUsIGdldE5hdGl2ZVByb3BzLCBkaXZQcm9wZXJ0aWVzLCB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBDaGVja2JveFZpc2liaWxpdHkgfSBmcm9tICcuL0RldGFpbHNMaXN0LnR5cGVzJztcbmltcG9ydCB7IERldGFpbHNSb3dDaGVjayB9IGZyb20gJy4vRGV0YWlsc1Jvd0NoZWNrJztcbmltcG9ydCB7IEdyb3VwU3BhY2VyIH0gZnJvbSAnLi4vR3JvdXBlZExpc3QvR3JvdXBTcGFjZXInO1xuaW1wb3J0IHsgRGV0YWlsc1Jvd0ZpZWxkcyB9IGZyb20gJy4vRGV0YWlsc1Jvd0ZpZWxkcyc7XG5pbXBvcnQgeyBGb2N1c1pvbmUsIEZvY3VzWm9uZURpcmVjdGlvbiB9IGZyb20gJy4uLy4uL0ZvY3VzWm9uZSc7XG5pbXBvcnQgeyBTZWxlY3Rpb25Nb2RlLCBTRUxFQ1RJT05fQ0hBTkdFIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL3NlbGVjdGlvbi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IENvbGxhcHNlQWxsVmlzaWJpbGl0eSB9IGZyb20gJy4uLy4uL0dyb3VwZWRMaXN0JztcbmltcG9ydCB7IGNsYXNzTmFtZXNGdW5jdGlvbiB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG52YXIgZ2V0Q2xhc3NOYW1lcyA9IGNsYXNzTmFtZXNGdW5jdGlvbigpO1xudmFyIERFRkFVTFRfRFJPUFBJTkdfQ1NTX0NMQVNTID0gJ2lzLWRyb3BwaW5nJztcbnZhciBOT19DT0xVTU5TID0gW107XG52YXIgRGV0YWlsc1Jvd0Jhc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKERldGFpbHNSb3dCYXNlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERldGFpbHNSb3dCYXNlKHByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fcm9vdCA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgICAgICBfdGhpcy5fY2VsbE1lYXN1cmVyID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgICAgIF90aGlzLl9mb2N1c1pvbmUgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICAgICAgX3RoaXMuX29uU2VsZWN0aW9uQ2hhbmdlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxlY3Rpb25TdGF0ZSA9IGdldFNlbGVjdGlvblN0YXRlKF90aGlzLnByb3BzKTtcbiAgICAgICAgICAgIGlmICghc2hhbGxvd0NvbXBhcmUoc2VsZWN0aW9uU3RhdGUsIF90aGlzLnN0YXRlLnNlbGVjdGlvblN0YXRlKSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uU3RhdGU6IHNlbGVjdGlvblN0YXRlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogdXBkYXRlIGlzRHJvcHBpbmcgc3RhdGUgYmFzZWQgb24gdGhlIGlucHV0IHZhbHVlLCB3aGljaCBpcyB1c2VkIHRvIGNoYW5nZSBzdHlsZSBkdXJpbmcgZHJhZyBhbmQgZHJvcFxuICAgICAgICAgKlxuICAgICAgICAgKiB3aGVuIGNoYW5nZSB0byB0cnVlLCB0aGF0IG1lYW5zIGRyYWcgZW50ZXIuIHdlIHdpbGwgYWRkIGRlZmF1bHQgZHJvcHBpbmcgY2xhc3MgbmFtZVxuICAgICAgICAgKiBvciB0aGUgY3VzdG9tIGRyb3BwaW5nIGNsYXNzIG5hbWUgKHJldHVybiByZXN1bHQgZnJvbSBvbkRyYWdFbnRlcikgdG8gdGhlIHJvb3QgZWxlbWV0LlxuICAgICAgICAgKlxuICAgICAgICAgKiB3aGVuIGNoYW5nZSB0byBmYWxzZSwgdGhhdCBtZWFucyBkcmFnIGxlYXZlLiB3ZSB3aWxsIHJlbW92ZSB0aGUgZHJvcHBpbmcgY2xhc3MgbmFtZSBmcm9tIHJvb3QgZWxlbWVudC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIG5ld1ZhbHVlIC0gTmV3IGlzRHJvcHBpbmcgc3RhdGUgdmFsdWVcbiAgICAgICAgICogQHBhcmFtIGV2ZW50IC0gVGhlIGV2ZW50IHRyaWdnZXIgZHJvcHBpbmcgc3RhdGUgY2hhbmdlIHdoaWNoIGNhbiBiZSBkcmFnZW50ZXIsIGRyYWdsZWF2ZSBldGNcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLl91cGRhdGVEcm9wcGluZ1N0YXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBldmVudCkge1xuICAgICAgICAgICAgdmFyIGlzRHJvcHBpbmcgPSBfdGhpcy5zdGF0ZS5pc0Ryb3BwaW5nO1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIGRyYWdEcm9wRXZlbnRzID0gX2EuZHJhZ0Ryb3BFdmVudHMsIGl0ZW0gPSBfYS5pdGVtO1xuICAgICAgICAgICAgaWYgKCFuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChkcmFnRHJvcEV2ZW50cy5vbkRyYWdMZWF2ZSkge1xuICAgICAgICAgICAgICAgICAgICBkcmFnRHJvcEV2ZW50cy5vbkRyYWdMZWF2ZShpdGVtLCBldmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZHJhZ0Ryb3BFdmVudHMub25EcmFnRW50ZXIpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fZHJvcHBpbmdDbGFzc05hbWVzID0gZHJhZ0Ryb3BFdmVudHMub25EcmFnRW50ZXIoaXRlbSwgZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzRHJvcHBpbmcgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBpc0Ryb3BwaW5nOiBuZXdWYWx1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaW5pdGlhbGl6ZUNvbXBvbmVudFJlZihfdGhpcyk7XG4gICAgICAgIF90aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRHcm91cChfdGhpcyk7XG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgc2VsZWN0aW9uU3RhdGU6IGdldFNlbGVjdGlvblN0YXRlKHByb3BzKSxcbiAgICAgICAgICAgIGNvbHVtbk1lYXN1cmVJbmZvOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBpc0Ryb3BwaW5nOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX2Ryb3BwaW5nQ2xhc3NOYW1lcyA9ICcnO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIERldGFpbHNSb3dCYXNlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIChuZXh0UHJvcHMsIHByZXZpb3VzU3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBwcmV2aW91c1N0YXRlKSwgeyBzZWxlY3Rpb25TdGF0ZTogZ2V0U2VsZWN0aW9uU3RhdGUobmV4dFByb3BzKSB9KTtcbiAgICB9O1xuICAgIERldGFpbHNSb3dCYXNlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgZHJhZ0Ryb3BIZWxwZXIgPSBfYS5kcmFnRHJvcEhlbHBlciwgc2VsZWN0aW9uID0gX2Euc2VsZWN0aW9uLCBpdGVtID0gX2EuaXRlbSwgb25EaWRNb3VudCA9IF9hLm9uRGlkTW91bnQ7XG4gICAgICAgIGlmIChkcmFnRHJvcEhlbHBlciAmJiB0aGlzLl9yb290LmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2RyYWdEcm9wU3Vic2NyaXB0aW9uID0gZHJhZ0Ryb3BIZWxwZXIuc3Vic2NyaWJlKHRoaXMuX3Jvb3QuY3VycmVudCwgdGhpcy5fZXZlbnRzLCB0aGlzLl9nZXRSb3dEcmFnRHJvcE9wdGlvbnMoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRzLm9uKHNlbGVjdGlvbiwgU0VMRUNUSU9OX0NIQU5HRSwgdGhpcy5fb25TZWxlY3Rpb25DaGFuZ2VkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob25EaWRNb3VudCAmJiBpdGVtKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgaXRlbSBhcHBlYXJzIGxhdGVyLCB3ZSBzaG91bGQgd2FpdCBmb3IgaXQgYmVmb3JlIGNhbGxpbmcgdGhpcyBtZXRob2QuXG4gICAgICAgICAgICB0aGlzLl9vbkRpZE1vdW50Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIG9uRGlkTW91bnQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERldGFpbHNSb3dCYXNlLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldmlvdXNQcm9wcykge1xuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBpdGVtID0gX2EuaXRlbSwgb25EaWRNb3VudCA9IF9hLm9uRGlkTW91bnQ7XG4gICAgICAgIHZhciBjb2x1bW5NZWFzdXJlSW5mbyA9IHN0YXRlLmNvbHVtbk1lYXN1cmVJbmZvO1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5pdGVtSW5kZXggIT09IHByZXZpb3VzUHJvcHMuaXRlbUluZGV4IHx8XG4gICAgICAgICAgICB0aGlzLnByb3BzLml0ZW0gIT09IHByZXZpb3VzUHJvcHMuaXRlbSB8fFxuICAgICAgICAgICAgdGhpcy5wcm9wcy5kcmFnRHJvcEhlbHBlciAhPT0gcHJldmlvdXNQcm9wcy5kcmFnRHJvcEhlbHBlcikge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2RyYWdEcm9wU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZHJhZ0Ryb3BTdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9kcmFnRHJvcFN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmRyYWdEcm9wSGVscGVyICYmIHRoaXMuX3Jvb3QuY3VycmVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RyYWdEcm9wU3Vic2NyaXB0aW9uID0gdGhpcy5wcm9wcy5kcmFnRHJvcEhlbHBlci5zdWJzY3JpYmUodGhpcy5fcm9vdC5jdXJyZW50LCB0aGlzLl9ldmVudHMsIHRoaXMuX2dldFJvd0RyYWdEcm9wT3B0aW9ucygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY29sdW1uTWVhc3VyZUluZm8gJiYgY29sdW1uTWVhc3VyZUluZm8uaW5kZXggPj0gMCAmJiB0aGlzLl9jZWxsTWVhc3VyZXIuY3VycmVudCkge1xuICAgICAgICAgICAgdmFyIG5ld1dpZHRoID0gdGhpcy5fY2VsbE1lYXN1cmVyLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgICAgICAgICBjb2x1bW5NZWFzdXJlSW5mby5vbk1lYXN1cmVEb25lKG5ld1dpZHRoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGNvbHVtbk1lYXN1cmVJbmZvOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXRlbSAmJiBvbkRpZE1vdW50ICYmICF0aGlzLl9vbkRpZE1vdW50Q2FsbGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9vbkRpZE1vdW50Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIG9uRGlkTW91bnQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERldGFpbHNSb3dCYXNlLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgaXRlbSA9IF9hLml0ZW0sIG9uV2lsbFVubW91bnQgPSBfYS5vbldpbGxVbm1vdW50O1xuICAgICAgICAvLyBPbmx5IGNhbGwgdGhlIG9uV2lsbFVubW91bnQgY2FsbGJhY2sgaWYgd2UgaGF2ZSBhbiBpdGVtLlxuICAgICAgICBpZiAob25XaWxsVW5tb3VudCAmJiBpdGVtKSB7XG4gICAgICAgICAgICBvbldpbGxVbm1vdW50KHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9kcmFnRHJvcFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5fZHJhZ0Ryb3BTdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2RyYWdEcm9wU3Vic2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2V2ZW50cy5kaXNwb3NlKCk7XG4gICAgfTtcbiAgICBEZXRhaWxzUm93QmFzZS5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnVzZVJlZHVjZWRSb3dSZW5kZXJlcikge1xuICAgICAgICAgICAgdmFyIG5ld1NlbGVjdGlvblN0YXRlID0gZ2V0U2VsZWN0aW9uU3RhdGUobmV4dFByb3BzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLnNlbGVjdGlvblN0YXRlLmlzU2VsZWN0ZWQgIT09IG5ld1NlbGVjdGlvblN0YXRlLmlzU2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAhc2hhbGxvd0NvbXBhcmUodGhpcy5wcm9wcywgbmV4dFByb3BzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEZXRhaWxzUm93QmFzZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBjbGFzc05hbWUgPSBfYS5jbGFzc05hbWUsIF9iID0gX2EuY29sdW1ucywgY29sdW1ucyA9IF9iID09PSB2b2lkIDAgPyBOT19DT0xVTU5TIDogX2IsIGRyYWdEcm9wRXZlbnRzID0gX2EuZHJhZ0Ryb3BFdmVudHMsIGl0ZW0gPSBfYS5pdGVtLCBpdGVtSW5kZXggPSBfYS5pdGVtSW5kZXgsIF9jID0gX2Eub25SZW5kZXJDaGVjaywgb25SZW5kZXJDaGVjayA9IF9jID09PSB2b2lkIDAgPyB0aGlzLl9vblJlbmRlckNoZWNrIDogX2MsIG9uUmVuZGVyRGV0YWlsc0NoZWNrYm94ID0gX2Eub25SZW5kZXJEZXRhaWxzQ2hlY2tib3gsIG9uUmVuZGVySXRlbUNvbHVtbiA9IF9hLm9uUmVuZGVySXRlbUNvbHVtbiwgZ2V0Q2VsbFZhbHVlS2V5ID0gX2EuZ2V0Q2VsbFZhbHVlS2V5LCBzZWxlY3Rpb25Nb2RlID0gX2Euc2VsZWN0aW9uTW9kZSwgX2QgPSBfYS5yb3dXaWR0aCwgcm93V2lkdGggPSBfZCA9PT0gdm9pZCAwID8gMCA6IF9kLCBjaGVja2JveFZpc2liaWxpdHkgPSBfYS5jaGVja2JveFZpc2liaWxpdHksIGdldFJvd0FyaWFMYWJlbCA9IF9hLmdldFJvd0FyaWFMYWJlbCwgZ2V0Um93QXJpYURlc2NyaWJlZEJ5ID0gX2EuZ2V0Um93QXJpYURlc2NyaWJlZEJ5LCBjaGVja0J1dHRvbkFyaWFMYWJlbCA9IF9hLmNoZWNrQnV0dG9uQXJpYUxhYmVsLCBjaGVja2JveENlbGxDbGFzc05hbWUgPSBfYS5jaGVja2JveENlbGxDbGFzc05hbWUsIFxuICAgICAgICAvKiogQWxpYXMgcm93RmllbGRzQXMgYXMgUm93RmllbGRzIGFuZCBkZWZhdWx0IHRvIERldGFpbHNSb3dGaWVsZHMgaWYgcm93RmllbGRzQXMgZG9lcyBub3QgZXhpc3QgKi9cbiAgICAgICAgX2UgPSBfYS5yb3dGaWVsZHNBcywgXG4gICAgICAgIC8qKiBBbGlhcyByb3dGaWVsZHNBcyBhcyBSb3dGaWVsZHMgYW5kIGRlZmF1bHQgdG8gRGV0YWlsc1Jvd0ZpZWxkcyBpZiByb3dGaWVsZHNBcyBkb2VzIG5vdCBleGlzdCAqL1xuICAgICAgICBSb3dGaWVsZHMgPSBfZSA9PT0gdm9pZCAwID8gRGV0YWlsc1Jvd0ZpZWxkcyA6IF9lLCBzZWxlY3Rpb24gPSBfYS5zZWxlY3Rpb24sIGluZGVudFdpZHRoID0gX2EuaW5kZW50V2lkdGgsIGVuYWJsZVVwZGF0ZUFuaW1hdGlvbnMgPSBfYS5lbmFibGVVcGRhdGVBbmltYXRpb25zLCBjb21wYWN0ID0gX2EuY29tcGFjdCwgdGhlbWUgPSBfYS50aGVtZSwgc3R5bGVzID0gX2Euc3R5bGVzLCBjZWxsc0J5Q29sdW1uID0gX2EuY2VsbHNCeUNvbHVtbiwgZ3JvdXBOZXN0aW5nRGVwdGggPSBfYS5ncm91cE5lc3RpbmdEZXB0aCwgX2YgPSBfYS51c2VGYXN0SWNvbnMsIHVzZUZhc3RJY29ucyA9IF9mID09PSB2b2lkIDAgPyB0cnVlIDogX2YsIGNlbGxTdHlsZVByb3BzID0gX2EuY2VsbFN0eWxlUHJvcHM7XG4gICAgICAgIHZhciBfZyA9IHRoaXMuc3RhdGUsIGNvbHVtbk1lYXN1cmVJbmZvID0gX2cuY29sdW1uTWVhc3VyZUluZm8sIGlzRHJvcHBpbmcgPSBfZy5pc0Ryb3BwaW5nO1xuICAgICAgICB2YXIgX2ggPSB0aGlzLnN0YXRlLnNlbGVjdGlvblN0YXRlLCBfaiA9IF9oLmlzU2VsZWN0ZWQsIGlzU2VsZWN0ZWQgPSBfaiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfaiwgX2sgPSBfaC5pc1NlbGVjdGlvbk1vZGFsLCBpc1NlbGVjdGlvbk1vZGFsID0gX2sgPT09IHZvaWQgMCA/IGZhbHNlIDogX2s7XG4gICAgICAgIHZhciBpc0RyYWdnYWJsZSA9IGRyYWdEcm9wRXZlbnRzID8gISEoZHJhZ0Ryb3BFdmVudHMuY2FuRHJhZyAmJiBkcmFnRHJvcEV2ZW50cy5jYW5EcmFnKGl0ZW0pKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGRyb3BwaW5nQ2xhc3NOYW1lID0gaXNEcm9wcGluZyA/IHRoaXMuX2Ryb3BwaW5nQ2xhc3NOYW1lcyB8fCBERUZBVUxUX0RST1BQSU5HX0NTU19DTEFTUyA6ICcnO1xuICAgICAgICB2YXIgYXJpYUxhYmVsID0gZ2V0Um93QXJpYUxhYmVsID8gZ2V0Um93QXJpYUxhYmVsKGl0ZW0pIDogdW5kZWZpbmVkO1xuICAgICAgICB2YXIgYXJpYURlc2NyaWJlZEJ5ID0gZ2V0Um93QXJpYURlc2NyaWJlZEJ5ID8gZ2V0Um93QXJpYURlc2NyaWJlZEJ5KGl0ZW0pIDogdW5kZWZpbmVkO1xuICAgICAgICB2YXIgY2FuU2VsZWN0ID0gISFzZWxlY3Rpb24gJiYgc2VsZWN0aW9uLmNhblNlbGVjdEl0ZW0oaXRlbSwgaXRlbUluZGV4KTtcbiAgICAgICAgdmFyIGlzQ29udGVudFVuc2VsZWN0YWJsZSA9IHNlbGVjdGlvbk1vZGUgPT09IFNlbGVjdGlvbk1vZGUubXVsdGlwbGU7XG4gICAgICAgIHZhciBzaG93Q2hlY2tib3ggPSBzZWxlY3Rpb25Nb2RlICE9PSBTZWxlY3Rpb25Nb2RlLm5vbmUgJiYgY2hlY2tib3hWaXNpYmlsaXR5ICE9PSBDaGVja2JveFZpc2liaWxpdHkuaGlkZGVuO1xuICAgICAgICB2YXIgYXJpYVNlbGVjdGVkID0gc2VsZWN0aW9uTW9kZSA9PT0gU2VsZWN0aW9uTW9kZS5ub25lID8gdW5kZWZpbmVkIDogaXNTZWxlY3RlZDtcbiAgICAgICAgdGhpcy5fY2xhc3NOYW1lcyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLl9jbGFzc05hbWVzKSwgZ2V0Q2xhc3NOYW1lcyhzdHlsZXMsIHtcbiAgICAgICAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgICAgICAgIGlzU2VsZWN0ZWQ6IGlzU2VsZWN0ZWQsXG4gICAgICAgICAgICBjYW5TZWxlY3Q6ICFpc0NvbnRlbnRVbnNlbGVjdGFibGUsXG4gICAgICAgICAgICBhbnlTZWxlY3RlZDogaXNTZWxlY3Rpb25Nb2RhbCxcbiAgICAgICAgICAgIGNoZWNrYm94Q2VsbENsYXNzTmFtZTogY2hlY2tib3hDZWxsQ2xhc3NOYW1lLFxuICAgICAgICAgICAgZHJvcHBpbmdDbGFzc05hbWU6IGRyb3BwaW5nQ2xhc3NOYW1lLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgICAgICBjb21wYWN0OiBjb21wYWN0LFxuICAgICAgICAgICAgZW5hYmxlVXBkYXRlQW5pbWF0aW9uczogZW5hYmxlVXBkYXRlQW5pbWF0aW9ucyxcbiAgICAgICAgICAgIGNlbGxTdHlsZVByb3BzOiBjZWxsU3R5bGVQcm9wcyxcbiAgICAgICAgfSkpO1xuICAgICAgICB2YXIgcm93Q2xhc3NOYW1lcyA9IHtcbiAgICAgICAgICAgIGlzTXVsdGlsaW5lOiB0aGlzLl9jbGFzc05hbWVzLmlzTXVsdGlsaW5lLFxuICAgICAgICAgICAgaXNSb3dIZWFkZXI6IHRoaXMuX2NsYXNzTmFtZXMuaXNSb3dIZWFkZXIsXG4gICAgICAgICAgICBjZWxsOiB0aGlzLl9jbGFzc05hbWVzLmNlbGwsXG4gICAgICAgICAgICBjZWxsQW5pbWF0aW9uOiB0aGlzLl9jbGFzc05hbWVzLmNlbGxBbmltYXRpb24sXG4gICAgICAgICAgICBjZWxsUGFkZGVkOiB0aGlzLl9jbGFzc05hbWVzLmNlbGxQYWRkZWQsXG4gICAgICAgICAgICBjZWxsVW5wYWRkZWQ6IHRoaXMuX2NsYXNzTmFtZXMuY2VsbFVucGFkZGVkLFxuICAgICAgICAgICAgZmllbGRzOiB0aGlzLl9jbGFzc05hbWVzLmZpZWxkcyxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gT25seSByZS1hc3NpZ24gcm93Q2xhc3NOYW1lcyB3aGVuIGNsYXNzTmFtZXMgaGF2ZSBjaGFuZ2VkLlxuICAgICAgICAvLyBPdGhlcndpc2UsIHRoZXkgd2lsbCBjYXVzZSBEZXRhaWxzUm93RmllbGRzIHRvIHVubmVjZXNzYXJpbHlcbiAgICAgICAgLy8gcmUtcmVuZGVyLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9mbHVlbnR1aS9wdWxsLzg3OTkuXG4gICAgICAgIC8vIFJlZmFjdG9yIERldGFpbHNSb3dGaWVsZHMgdG8gZ2VuZXJhdGUgb3duIHN0eWxlcyB0byByZW1vdmUgbmVlZCBmb3IgdGhpcy5cbiAgICAgICAgaWYgKCFzaGFsbG93Q29tcGFyZSh0aGlzLl9yb3dDbGFzc05hbWVzIHx8IHt9LCByb3dDbGFzc05hbWVzKSkge1xuICAgICAgICAgICAgdGhpcy5fcm93Q2xhc3NOYW1lcyA9IHJvd0NsYXNzTmFtZXM7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJvd0ZpZWxkcyA9IChSZWFjdC5jcmVhdGVFbGVtZW50KFJvd0ZpZWxkcywgeyByb3dDbGFzc05hbWVzOiB0aGlzLl9yb3dDbGFzc05hbWVzLCBjZWxsc0J5Q29sdW1uOiBjZWxsc0J5Q29sdW1uLCBjb2x1bW5zOiBjb2x1bW5zLCBpdGVtOiBpdGVtLCBpdGVtSW5kZXg6IGl0ZW1JbmRleCwgY29sdW1uU3RhcnRJbmRleDogKHNob3dDaGVja2JveCA/IDEgOiAwKSArIChncm91cE5lc3RpbmdEZXB0aCA/IDEgOiAwKSwgb25SZW5kZXJJdGVtQ29sdW1uOiBvblJlbmRlckl0ZW1Db2x1bW4sIGdldENlbGxWYWx1ZUtleTogZ2V0Q2VsbFZhbHVlS2V5LCBlbmFibGVVcGRhdGVBbmltYXRpb25zOiBlbmFibGVVcGRhdGVBbmltYXRpb25zLCBjZWxsU3R5bGVQcm9wczogY2VsbFN0eWxlUHJvcHMgfSkpO1xuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9jdXNab25lLCBfX2Fzc2lnbih7IFwiZGF0YS1pcy1mb2N1c2FibGVcIjogdHJ1ZSB9LCBnZXROYXRpdmVQcm9wcyh0aGlzLnByb3BzLCBkaXZQcm9wZXJ0aWVzKSwgKHR5cGVvZiBpc0RyYWdnYWJsZSA9PT0gJ2Jvb2xlYW4nXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAnZGF0YS1pcy1kcmFnZ2FibGUnOiBpc0RyYWdnYWJsZSxcbiAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IGlzRHJhZ2dhYmxlLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB7fSksIHsgZGlyZWN0aW9uOiBGb2N1c1pvbmVEaXJlY3Rpb24uaG9yaXpvbnRhbCwgZWxlbWVudFJlZjogdGhpcy5fcm9vdCwgY29tcG9uZW50UmVmOiB0aGlzLl9mb2N1c1pvbmUsIHJvbGU6IFwicm93XCIsIFwiYXJpYS1sYWJlbFwiOiBhcmlhTGFiZWwsIFwiYXJpYS1kZXNjcmliZWRieVwiOiBhcmlhRGVzY3JpYmVkQnksIGNsYXNzTmFtZTogdGhpcy5fY2xhc3NOYW1lcy5yb290LCBcImRhdGEtc2VsZWN0aW9uLWluZGV4XCI6IGl0ZW1JbmRleCwgXCJkYXRhLXNlbGVjdGlvbi10b3VjaC1pbnZva2VcIjogdHJ1ZSwgXCJkYXRhLWl0ZW0taW5kZXhcIjogaXRlbUluZGV4LCBcImFyaWEtcm93aW5kZXhcIjogaXRlbUluZGV4ICsgMSwgXCJhcmlhLWxldmVsXCI6IChncm91cE5lc3RpbmdEZXB0aCAmJiBncm91cE5lc3RpbmdEZXB0aCArIDEpIHx8IHVuZGVmaW5lZCwgXCJkYXRhLWF1dG9tYXRpb25pZFwiOiBcIkRldGFpbHNSb3dcIiwgc3R5bGU6IHsgbWluV2lkdGg6IHJvd1dpZHRoIH0sIFwiYXJpYS1zZWxlY3RlZFwiOiBhcmlhU2VsZWN0ZWQsIGFsbG93Rm9jdXNSb290OiB0cnVlIH0pLFxuICAgICAgICAgICAgc2hvd0NoZWNrYm94ICYmIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgcm9sZTogXCJncmlkY2VsbFwiLCBcImFyaWEtY29saW5kZXhcIjogMSwgXCJkYXRhLXNlbGVjdGlvbi10b2dnbGVcIjogdHJ1ZSwgY2xhc3NOYW1lOiB0aGlzLl9jbGFzc05hbWVzLmNoZWNrQ2VsbCB9LCBvblJlbmRlckNoZWNrKHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZDogaXNTZWxlY3RlZCxcbiAgICAgICAgICAgICAgICBhbnlTZWxlY3RlZDogaXNTZWxlY3Rpb25Nb2RhbCxcbiAgICAgICAgICAgICAgICAnYXJpYS1sYWJlbCc6IGNoZWNrQnV0dG9uQXJpYUxhYmVsLFxuICAgICAgICAgICAgICAgIGNhblNlbGVjdDogY2FuU2VsZWN0LFxuICAgICAgICAgICAgICAgIGNvbXBhY3Q6IGNvbXBhY3QsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiB0aGlzLl9jbGFzc05hbWVzLmNoZWNrLFxuICAgICAgICAgICAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgICAgICAgICAgICBpc1Zpc2libGU6IGNoZWNrYm94VmlzaWJpbGl0eSA9PT0gQ2hlY2tib3hWaXNpYmlsaXR5LmFsd2F5cyxcbiAgICAgICAgICAgICAgICBvblJlbmRlckRldGFpbHNDaGVja2JveDogb25SZW5kZXJEZXRhaWxzQ2hlY2tib3gsXG4gICAgICAgICAgICAgICAgdXNlRmFzdEljb25zOiB1c2VGYXN0SWNvbnMsXG4gICAgICAgICAgICB9KSkpLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChHcm91cFNwYWNlciwgeyBpbmRlbnRXaWR0aDogaW5kZW50V2lkdGgsIHJvbGU6IFwiZ3JpZGNlbGxcIiwgY291bnQ6IGdyb3VwTmVzdGluZ0RlcHRoIC0gKHRoaXMucHJvcHMuY29sbGFwc2VBbGxWaXNpYmlsaXR5ID09PSBDb2xsYXBzZUFsbFZpc2liaWxpdHkuaGlkZGVuID8gMSA6IDApIH0pLFxuICAgICAgICAgICAgaXRlbSAmJiByb3dGaWVsZHMsXG4gICAgICAgICAgICBjb2x1bW5NZWFzdXJlSW5mbyAmJiAoUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyByb2xlOiBcInByZXNlbnRhdGlvblwiLCBjbGFzc05hbWU6IGNzcyh0aGlzLl9jbGFzc05hbWVzLmNlbGxNZWFzdXJlciwgdGhpcy5fY2xhc3NOYW1lcy5jZWxsKSwgcmVmOiB0aGlzLl9jZWxsTWVhc3VyZXIgfSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFJvd0ZpZWxkcywgeyByb3dDbGFzc05hbWVzOiB0aGlzLl9yb3dDbGFzc05hbWVzLCBjb2x1bW5zOiBbY29sdW1uTWVhc3VyZUluZm8uY29sdW1uXSwgaXRlbTogaXRlbSwgaXRlbUluZGV4OiBpdGVtSW5kZXgsIGNvbHVtblN0YXJ0SW5kZXg6IChzaG93Q2hlY2tib3ggPyAxIDogMCkgKyAoZ3JvdXBOZXN0aW5nRGVwdGggPyAxIDogMCkgKyBjb2x1bW5zLmxlbmd0aCwgb25SZW5kZXJJdGVtQ29sdW1uOiBvblJlbmRlckl0ZW1Db2x1bW4sIGdldENlbGxWYWx1ZUtleTogZ2V0Q2VsbFZhbHVlS2V5IH0pKSksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IHJvbGU6IFwiY2hlY2tib3hcIiwgY2xhc3NOYW1lOiB0aGlzLl9jbGFzc05hbWVzLmNoZWNrQ292ZXIsIFwiYXJpYS1jaGVja2VkXCI6IGlzU2VsZWN0ZWQsIFwiZGF0YS1zZWxlY3Rpb24tdG9nZ2xlXCI6IHRydWUgfSkpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIG1lYXN1cmUgY2VsbCBhdCBpbmRleC4gYW5kIGNhbGwgdGhlIGNhbGwgYmFjayB3aXRoIHRoZSBtZWFzdXJlZCBjZWxsIHdpZHRoIHdoZW4gZmluaXNoIG1lYXN1cmVcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpbmRleCAtIFRoZSBjZWxsIGluZGV4XG4gICAgICogQHBhcmFtIG9uTWVhc3VyZURvbmUgLSBUaGUgY2FsbCBiYWNrIGZ1bmN0aW9uIHdoZW4gZmluaXNoIG1lYXN1cmVcbiAgICAgKi9cbiAgICBEZXRhaWxzUm93QmFzZS5wcm90b3R5cGUubWVhc3VyZUNlbGwgPSBmdW5jdGlvbiAoaW5kZXgsIG9uTWVhc3VyZURvbmUpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcy5jb2x1bW5zLCBjb2x1bW5zID0gX2EgPT09IHZvaWQgMCA/IE5PX0NPTFVNTlMgOiBfYTtcbiAgICAgICAgdmFyIGNvbHVtbiA9IF9fYXNzaWduKHt9LCBjb2x1bW5zW2luZGV4XSk7XG4gICAgICAgIGNvbHVtbi5taW5XaWR0aCA9IDA7XG4gICAgICAgIGNvbHVtbi5tYXhXaWR0aCA9IDk5OTk5OTtcbiAgICAgICAgZGVsZXRlIGNvbHVtbi5jYWxjdWxhdGVkV2lkdGg7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY29sdW1uTWVhc3VyZUluZm86IHtcbiAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgICAgICAgICAgY29sdW1uOiBjb2x1bW4sXG4gICAgICAgICAgICAgICAgb25NZWFzdXJlRG9uZTogb25NZWFzdXJlRG9uZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgRGV0YWlsc1Jvd0Jhc2UucHJvdG90eXBlLmZvY3VzID0gZnVuY3Rpb24gKGZvcmNlSW50b0ZpcnN0RWxlbWVudCkge1xuICAgICAgICBpZiAoZm9yY2VJbnRvRmlyc3RFbGVtZW50ID09PSB2b2lkIDApIHsgZm9yY2VJbnRvRmlyc3RFbGVtZW50ID0gZmFsc2U7IH1cbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gISEoKF9hID0gdGhpcy5fZm9jdXNab25lLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5mb2N1cyhmb3JjZUludG9GaXJzdEVsZW1lbnQpKTtcbiAgICB9O1xuICAgIERldGFpbHNSb3dCYXNlLnByb3RvdHlwZS5fb25SZW5kZXJDaGVjayA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChEZXRhaWxzUm93Q2hlY2ssIF9fYXNzaWduKHt9LCBwcm9wcykpO1xuICAgIH07XG4gICAgRGV0YWlsc1Jvd0Jhc2UucHJvdG90eXBlLl9nZXRSb3dEcmFnRHJvcE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIGl0ZW0gPSBfYS5pdGVtLCBpdGVtSW5kZXggPSBfYS5pdGVtSW5kZXgsIGRyYWdEcm9wRXZlbnRzID0gX2EuZHJhZ0Ryb3BFdmVudHMsIGV2ZW50c1RvUmVnaXN0ZXIgPSBfYS5ldmVudHNUb1JlZ2lzdGVyO1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGV2ZW50TWFwOiBldmVudHNUb1JlZ2lzdGVyLFxuICAgICAgICAgICAgc2VsZWN0aW9uSW5kZXg6IGl0ZW1JbmRleCxcbiAgICAgICAgICAgIGNvbnRleHQ6IHsgZGF0YTogaXRlbSwgaW5kZXg6IGl0ZW1JbmRleCB9LFxuICAgICAgICAgICAgY2FuRHJhZzogZHJhZ0Ryb3BFdmVudHMuY2FuRHJhZyxcbiAgICAgICAgICAgIGNhbkRyb3A6IGRyYWdEcm9wRXZlbnRzLmNhbkRyb3AsXG4gICAgICAgICAgICBvbkRyYWdTdGFydDogZHJhZ0Ryb3BFdmVudHMub25EcmFnU3RhcnQsXG4gICAgICAgICAgICB1cGRhdGVEcm9wU3RhdGU6IHRoaXMuX3VwZGF0ZURyb3BwaW5nU3RhdGUsXG4gICAgICAgICAgICBvbkRyb3A6IGRyYWdEcm9wRXZlbnRzLm9uRHJvcCxcbiAgICAgICAgICAgIG9uRHJhZ0VuZDogZHJhZ0Ryb3BFdmVudHMub25EcmFnRW5kLFxuICAgICAgICAgICAgb25EcmFnT3ZlcjogZHJhZ0Ryb3BFdmVudHMub25EcmFnT3ZlcixcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfTtcbiAgICByZXR1cm4gRGV0YWlsc1Jvd0Jhc2U7XG59KFJlYWN0LkNvbXBvbmVudCkpO1xuZXhwb3J0IHsgRGV0YWlsc1Jvd0Jhc2UgfTtcbmZ1bmN0aW9uIGdldFNlbGVjdGlvblN0YXRlKHByb3BzKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgIHZhciBpdGVtSW5kZXggPSBwcm9wcy5pdGVtSW5kZXgsIHNlbGVjdGlvbiA9IHByb3BzLnNlbGVjdGlvbjtcbiAgICByZXR1cm4ge1xuICAgICAgICBpc1NlbGVjdGVkOiAhISgoX2EgPSBzZWxlY3Rpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pc0luZGV4U2VsZWN0ZWQoaXRlbUluZGV4KSksXG4gICAgICAgIGlzU2VsZWN0aW9uTW9kYWw6ICEhKChfZCA9IChfYiA9IHNlbGVjdGlvbikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfYyA9IF9iKS5pc01vZGFsKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuY2FsbChfYykpLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1EZXRhaWxzUm93LmJhc2UuanMubWFwIiwiaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IERldGFpbHNSb3dCYXNlIH0gZnJvbSAnLi9EZXRhaWxzUm93LmJhc2UnO1xuaW1wb3J0IHsgZ2V0RGV0YWlsc1Jvd1N0eWxlcyB9IGZyb20gJy4vRGV0YWlsc1Jvdy5zdHlsZXMnO1xuZXhwb3J0IHZhciBEZXRhaWxzUm93ID0gc3R5bGVkKERldGFpbHNSb3dCYXNlLCBnZXREZXRhaWxzUm93U3R5bGVzLCB1bmRlZmluZWQsIHtcbiAgICBzY29wZTogJ0RldGFpbHNSb3cnLFxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1EZXRhaWxzUm93LmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEFzeW5jLCBFdmVudEdyb3VwLCBLZXlDb2RlcywgZWxlbWVudENvbnRhaW5zLCBmaW5kU2Nyb2xsYWJsZVBhcmVudCwgZ2V0UGFyZW50LCBnZXREb2N1bWVudCwgZ2V0V2luZG93LCBpc0VsZW1lbnRUYWJiYWJsZSwgY3NzLCBpbml0aWFsaXplQ29tcG9uZW50UmVmLCBGb2N1c1JlY3RzLCB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBTZWxlY3Rpb25Nb2RlIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcbi8vIFNlbGVjdGlvbiBkZWZpbml0aW9uczpcbi8vXG4vLyBBbmNob3IgaW5kZXg6IHRoZSBwb2ludCBmcm9tIHdoaWNoIGEgcmFuZ2Ugc2VsZWN0aW9uIHN0YXJ0cy5cbi8vIEZvY3VzIGluZGV4OiB0aGUgcG9pbnQgZnJvbSB3aGljaCBsYXlvdXQgbW92ZW1lbnQgb3JpZ2luYXRlcyBmcm9tLlxuLy9cbi8vIFRoZXNlIHR3byBjYW4gZGlmZmVyLiBUZXN0czpcbi8vXG4vLyBJZiB5b3Ugc3RhcnQgYXQgaW5kZXggNVxuLy8gU2hpZnQgY2xpY2sgdG8gaW5kZXggMTBcbi8vICAgIFRoZSBmb2N1cyBpcyAxMCwgdGhlIGFuY2hvciBpcyA1LlxuLy8gSWYgeW91IHNoaWZ0IGNsaWNrIGF0IGluZGV4IDBcbi8vICAgIFRoZSBhbmNob3IgcmVtYWlucyBhdCA1LCB0aGUgaXRlbXMgYmV0d2VlbiAwIGFuZCA1IGFyZSBzZWxlY3RlZCBhbmQgZXZlcnl0aGluZyBlbHNlIGlzIGNsZWFyZWQuXG4vLyBJZiB5b3UgY2xpY2sgaW5kZXggOFxuLy8gICAgVGhlIGFuY2hvciBhbmQgZm9jdXMgYXJlIHNldCB0byA4LlxudmFyIFNFTEVDVElPTl9ESVNBQkxFRF9BVFRSSUJVVEVfTkFNRSA9ICdkYXRhLXNlbGVjdGlvbi1kaXNhYmxlZCc7XG52YXIgU0VMRUNUSU9OX0lOREVYX0FUVFJJQlVURV9OQU1FID0gJ2RhdGEtc2VsZWN0aW9uLWluZGV4JztcbnZhciBTRUxFQ1RJT05fVE9HR0xFX0FUVFJJQlVURV9OQU1FID0gJ2RhdGEtc2VsZWN0aW9uLXRvZ2dsZSc7XG52YXIgU0VMRUNUSU9OX0lOVk9LRV9BVFRSSUJVVEVfTkFNRSA9ICdkYXRhLXNlbGVjdGlvbi1pbnZva2UnO1xudmFyIFNFTEVDVElPTl9JTlZPS0VfVE9VQ0hfQVRUUklCVVRFX05BTUUgPSAnZGF0YS1zZWxlY3Rpb24tdG91Y2gtaW52b2tlJztcbnZhciBTRUxFQ1RBTExfVE9HR0xFX0FMTF9BVFRSSUJVVEVfTkFNRSA9ICdkYXRhLXNlbGVjdGlvbi1hbGwtdG9nZ2xlJztcbnZhciBTRUxFQ1RJT05fU0VMRUNUX0FUVFJJQlVURV9OQU1FID0gJ2RhdGEtc2VsZWN0aW9uLXNlbGVjdCc7XG4vKipcbiAqIHtAZG9jQ2F0ZWdvcnkgU2VsZWN0aW9ufVxuICovXG52YXIgU2VsZWN0aW9uWm9uZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2VsZWN0aW9uWm9uZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTZWxlY3Rpb25ab25lKHByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fcm9vdCA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogSW4gc29tZSBjYXNlcywgdGhlIGNvbnN1bWluZyBzY2VuYXJpbyByZXF1aXJlcyB0byBzZXQgZm9jdXMgb24gYSByb3cgd2l0aG91dCBoYXZpbmcgU2VsZWN0aW9uWm9uZVxuICAgICAgICAgKiByZWFjdCB0byB0aGUgZXZlbnQuIE5vdGUgdGhhdCBmb2N1cyBldmVudHMgaW4gSUUgXFw8PSAxMSB3aWxsIG9jY3VyIGFzeW5jaHJvbm91c2x5IGFmdGVyIC5mb2N1cygpIGhhc1xuICAgICAgICAgKiBiZWVuIGNhbGxlZCBvbiBhbiBlbGVtZW50LCBzbyB3ZSBuZWVkIGEgZmxhZyB0byBzdG9yZSB0aGUgaWRlYSB0aGF0IHdlIHdpbGwgYnlwYXNzIHRoZSBcIm5leHRcIlxuICAgICAgICAgKiBmb2N1cyBldmVudCB0aGF0IG9jY3Vycy4gVGhpcyBtZXRob2QgZG9lcyB0aGF0LlxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuaWdub3JlTmV4dEZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX2hhbmRsZU5leHRGb2N1cyhmYWxzZSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblNlbGVjdGlvbkNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxlY3Rpb24gPSBfdGhpcy5wcm9wcy5zZWxlY3Rpb247XG4gICAgICAgICAgICB2YXIgaXNNb2RhbCA9IHNlbGVjdGlvbi5pc01vZGFsICYmIHNlbGVjdGlvbi5pc01vZGFsKCk7XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgaXNNb2RhbDogaXNNb2RhbCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25Nb3VzZURvd25DYXB0dXJlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZXYudGFyZ2V0O1xuICAgICAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IHRhcmdldCAmJiAhZWxlbWVudENvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQsIHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5pZ25vcmVOZXh0Rm9jdXMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWVsZW1lbnRDb250YWlucyh0YXJnZXQsIF90aGlzLl9yb290LmN1cnJlbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKHRhcmdldCAhPT0gX3RoaXMuX3Jvb3QuY3VycmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5faGFzQXR0cmlidXRlKHRhcmdldCwgU0VMRUNUSU9OX0lOVk9LRV9BVFRSSUJVVEVfTkFNRSkpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaWdub3JlTmV4dEZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0YXJnZXQgPSBnZXRQYXJlbnQodGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZW4gd2UgZm9jdXMgYW4gaXRlbSwgZm9yIHNpbmdsZS9tdWx0aSBzZWxlY3Qgc2NlbmFyaW9zLCB3ZSBzaG91bGQgdHJ5IHRvIHNlbGVjdCBpdCBpbW1lZGlhdGVseVxuICAgICAgICAgKiBhcyBsb25nIGFzIHRoZSBmb2N1cyBkaWQgbm90IG9yaWdpbmF0ZSBmcm9tIGEgbW91c2UgZG93bi90b3VjaCBldmVudC4gRm9yIHRob3NlIGNhc2VzLCB3ZSBoYW5kbGUgdGhlbVxuICAgICAgICAgKiBzcGVjaWFsbHkuXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5fb25Gb2N1cyA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IGV2LnRhcmdldDtcbiAgICAgICAgICAgIHZhciBzZWxlY3Rpb24gPSBfdGhpcy5wcm9wcy5zZWxlY3Rpb247XG4gICAgICAgICAgICB2YXIgaXNUb2dnbGVNb2RpZmllclByZXNzZWQgPSBfdGhpcy5faXNDdHJsUHJlc3NlZCB8fCBfdGhpcy5faXNNZXRhUHJlc3NlZDtcbiAgICAgICAgICAgIHZhciBzZWxlY3Rpb25Nb2RlID0gX3RoaXMuX2dldFNlbGVjdGlvbk1vZGUoKTtcbiAgICAgICAgICAgIGlmIChfdGhpcy5fc2hvdWxkSGFuZGxlRm9jdXMgJiYgc2VsZWN0aW9uTW9kZSAhPT0gU2VsZWN0aW9uTW9kZS5ub25lKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlzVG9nZ2xlID0gX3RoaXMuX2hhc0F0dHJpYnV0ZSh0YXJnZXQsIFNFTEVDVElPTl9UT0dHTEVfQVRUUklCVVRFX05BTUUpO1xuICAgICAgICAgICAgICAgIHZhciBpdGVtUm9vdCA9IF90aGlzLl9maW5kSXRlbVJvb3QodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVG9nZ2xlICYmIGl0ZW1Sb290KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IF90aGlzLl9nZXRJdGVtSW5kZXgoaXRlbVJvb3QpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNUb2dnbGVNb2RpZmllclByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBhbmNob3Igb25seS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5zZXRJbmRleFNlbGVjdGVkKGluZGV4LCBzZWxlY3Rpb24uaXNJbmRleFNlbGVjdGVkKGluZGV4KSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMucHJvcHMuZW50ZXJNb2RhbE9uVG91Y2ggJiYgX3RoaXMuX2lzVG91Y2ggJiYgc2VsZWN0aW9uLnNldE1vZGFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLnNldE1vZGFsKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9zZXRJc1RvdWNoKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5pc1NlbGVjdGVkT25Gb2N1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9vbkl0ZW1TdXJmYWNlQ2xpY2soZXYsIGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLl9oYW5kbGVOZXh0Rm9jdXMoZmFsc2UpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25Nb3VzZURvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIF90aGlzLl91cGRhdGVNb2RpZmllcnMoZXYpO1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IGV2LnRhcmdldDtcbiAgICAgICAgICAgIHZhciBpdGVtUm9vdCA9IF90aGlzLl9maW5kSXRlbVJvb3QodGFyZ2V0KTtcbiAgICAgICAgICAgIC8vIE5vLW9wIGlmIHNlbGVjdGlvbiBpcyBkaXNhYmxlZFxuICAgICAgICAgICAgaWYgKF90aGlzLl9pc1NlbGVjdGlvbkRpc2FibGVkKHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAodGFyZ2V0ICE9PSBfdGhpcy5fcm9vdC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLl9oYXNBdHRyaWJ1dGUodGFyZ2V0LCBTRUxFQ1RBTExfVE9HR0xFX0FMTF9BVFRSSUJVVEVfTkFNRSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0ZW1Sb290KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5faGFzQXR0cmlidXRlKHRhcmdldCwgU0VMRUNUSU9OX1RPR0dMRV9BVFRSSUJVVEVfTkFNRSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKF90aGlzLl9oYXNBdHRyaWJ1dGUodGFyZ2V0LCBTRUxFQ1RJT05fSU5WT0tFX0FUVFJJQlVURV9OQU1FKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKHRhcmdldCA9PT0gaXRlbVJvb3QgfHwgX3RoaXMuX3Nob3VsZEF1dG9TZWxlY3QodGFyZ2V0KSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICFfdGhpcy5faXNTaGlmdFByZXNzZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICFfdGhpcy5faXNDdHJsUHJlc3NlZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIV90aGlzLl9pc01ldGFQcmVzc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fb25JbnZva2VNb3VzZURvd24oZXYsIF90aGlzLl9nZXRJdGVtSW5kZXgoaXRlbVJvb3QpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKF90aGlzLnByb3BzLmRpc2FibGVBdXRvU2VsZWN0T25JbnB1dEVsZW1lbnRzICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAodGFyZ2V0LnRhZ05hbWUgPT09ICdBJyB8fCB0YXJnZXQudGFnTmFtZSA9PT0gJ0JVVFRPTicgfHwgdGFyZ2V0LnRhZ05hbWUgPT09ICdJTlBVVCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gZ2V0UGFyZW50KHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblRvdWNoU3RhcnRDYXB0dXJlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBfdGhpcy5fc2V0SXNUb3VjaCh0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uQ2xpY2sgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLmVuYWJsZVRvdWNoSW52b2NhdGlvblRhcmdldCwgZW5hYmxlVG91Y2hJbnZvY2F0aW9uVGFyZ2V0ID0gX2EgPT09IHZvaWQgMCA/IGZhbHNlIDogX2E7XG4gICAgICAgICAgICBfdGhpcy5fdXBkYXRlTW9kaWZpZXJzKGV2KTtcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSBldi50YXJnZXQ7XG4gICAgICAgICAgICB2YXIgaXRlbVJvb3QgPSBfdGhpcy5fZmluZEl0ZW1Sb290KHRhcmdldCk7XG4gICAgICAgICAgICB2YXIgaXNTZWxlY3Rpb25EaXNhYmxlZCA9IF90aGlzLl9pc1NlbGVjdGlvbkRpc2FibGVkKHRhcmdldCk7XG4gICAgICAgICAgICB3aGlsZSAodGFyZ2V0ICE9PSBfdGhpcy5fcm9vdC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLl9oYXNBdHRyaWJ1dGUodGFyZ2V0LCBTRUxFQ1RBTExfVE9HR0xFX0FMTF9BVFRSSUJVVEVfTkFNRSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1NlbGVjdGlvbkRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fb25Ub2dnbGVBbGxDbGljayhldik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0ZW1Sb290KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IF90aGlzLl9nZXRJdGVtSW5kZXgoaXRlbVJvb3QpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2hhc0F0dHJpYnV0ZSh0YXJnZXQsIFNFTEVDVElPTl9UT0dHTEVfQVRUUklCVVRFX05BTUUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzU2VsZWN0aW9uRGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2lzU2hpZnRQcmVzc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9vbkl0ZW1TdXJmYWNlQ2xpY2soZXYsIGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9vblRvZ2dsZUNsaWNrKGV2LCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKF90aGlzLl9pc1RvdWNoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVUb3VjaEludm9jYXRpb25UYXJnZXQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9oYXNBdHRyaWJ1dGUodGFyZ2V0LCBTRUxFQ1RJT05fSU5WT0tFX1RPVUNIX0FUVFJJQlVURV9OQU1FKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9oYXNBdHRyaWJ1dGUodGFyZ2V0LCBTRUxFQ1RJT05fSU5WT0tFX0FUVFJJQlVURV9OQU1FKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSXRlbXMgc2hvdWxkIGJlIGludm9rYWJsZSBldmVuIGlmIHNlbGVjdGlvbiBpcyBkaXNhYmxlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9vbkludm9rZUNsaWNrKGV2LCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0YXJnZXQgPT09IGl0ZW1Sb290KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzU2VsZWN0aW9uRGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fb25JdGVtU3VyZmFjZUNsaWNrKGV2LCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0YXJnZXQudGFnTmFtZSA9PT0gJ0EnIHx8IHRhcmdldC50YWdOYW1lID09PSAnQlVUVE9OJyB8fCB0YXJnZXQudGFnTmFtZSA9PT0gJ0lOUFVUJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRhcmdldCA9IGdldFBhcmVudCh0YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25Db250ZXh0TWVudSA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IGV2LnRhcmdldDtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLCBvbkl0ZW1Db250ZXh0TWVudSA9IF9hLm9uSXRlbUNvbnRleHRNZW51LCBzZWxlY3Rpb24gPSBfYS5zZWxlY3Rpb247XG4gICAgICAgICAgICBpZiAob25JdGVtQ29udGV4dE1lbnUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbVJvb3QgPSBfdGhpcy5fZmluZEl0ZW1Sb290KHRhcmdldCk7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1Sb290KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IF90aGlzLl9nZXRJdGVtSW5kZXgoaXRlbVJvb3QpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fb25JbnZva2VNb3VzZURvd24oZXYsIGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNraXBQcmV2ZW50RGVmYXVsdCA9IG9uSXRlbUNvbnRleHRNZW51KHNlbGVjdGlvbi5nZXRJdGVtcygpW2luZGV4XSwgaW5kZXgsIGV2Lm5hdGl2ZUV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gSW4gb3JkZXIgdG8ga2VlcCBiYWNrIGNvbXBhdCwgaWYgdGhlIHZhbHVlIGhlcmUgaXMgdW5kZWZpbmVkLCB0aGVuIHdlIHNob3VsZCBzdGlsbFxuICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIHByZXZlbnREZWZhdWx0KCkuIE9ubHkgaW4gdGhlIGNhc2Ugd2hlcmUgdHJ1ZSBpcyBleHBsaWNpdGx5IHJldHVybmVkIHNob3VsZFxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgY2FsbCBiZSBza2lwcGVkLlxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNraXBQcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluIG11bHRpIHNlbGVjdGlvbiwgaWYgeW91IGRvdWJsZSBjbGljayB3aXRoaW4gYW4gaXRlbSdzIHJvb3QgKGJ1dCBub3Qgd2l0aGluIHRoZSBpbnZva2UgZWxlbWVudCBvclxuICAgICAgICAgKiBpbnB1dCBlbGVtZW50cyksIHdlIHNob3VsZCBleGVjdXRlIHRoZSBpbnZva2UgaGFuZGxlci5cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLl9vbkRvdWJsZUNsaWNrID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZXYudGFyZ2V0O1xuICAgICAgICAgICAgdmFyIG9uSXRlbUludm9rZWQgPSBfdGhpcy5wcm9wcy5vbkl0ZW1JbnZva2VkO1xuICAgICAgICAgICAgdmFyIGl0ZW1Sb290ID0gX3RoaXMuX2ZpbmRJdGVtUm9vdCh0YXJnZXQpO1xuICAgICAgICAgICAgaWYgKGl0ZW1Sb290ICYmIG9uSXRlbUludm9rZWQgJiYgIV90aGlzLl9pc0lucHV0RWxlbWVudCh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gX3RoaXMuX2dldEl0ZW1JbmRleChpdGVtUm9vdCk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHRhcmdldCAhPT0gX3RoaXMuX3Jvb3QuY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2hhc0F0dHJpYnV0ZSh0YXJnZXQsIFNFTEVDVElPTl9UT0dHTEVfQVRUUklCVVRFX05BTUUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5faGFzQXR0cmlidXRlKHRhcmdldCwgU0VMRUNUSU9OX0lOVk9LRV9BVFRSSUJVVEVfTkFNRSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRhcmdldCA9PT0gaXRlbVJvb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9vbkludm9rZUNsaWNrKGV2LCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSBnZXRQYXJlbnQodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gZ2V0UGFyZW50KHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbktleURvd25DYXB0dXJlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBfdGhpcy5fdXBkYXRlTW9kaWZpZXJzKGV2KTtcbiAgICAgICAgICAgIF90aGlzLl9oYW5kbGVOZXh0Rm9jdXModHJ1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbktleURvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIF90aGlzLl91cGRhdGVNb2RpZmllcnMoZXYpO1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IGV2LnRhcmdldDtcbiAgICAgICAgICAgIHZhciBpc1NlbGVjdGlvbkRpc2FibGVkID0gX3RoaXMuX2lzU2VsZWN0aW9uRGlzYWJsZWQodGFyZ2V0KTtcbiAgICAgICAgICAgIHZhciBzZWxlY3Rpb24gPSBfdGhpcy5wcm9wcy5zZWxlY3Rpb247XG4gICAgICAgICAgICB2YXIgaXNTZWxlY3RBbGxLZXkgPSBldi53aGljaCA9PT0gS2V5Q29kZXMuYSAmJiAoX3RoaXMuX2lzQ3RybFByZXNzZWQgfHwgX3RoaXMuX2lzTWV0YVByZXNzZWQpO1xuICAgICAgICAgICAgdmFyIGlzQ2xlYXJTZWxlY3Rpb25LZXkgPSBldi53aGljaCA9PT0gS2V5Q29kZXMuZXNjYXBlO1xuICAgICAgICAgICAgLy8gSWdub3JlIGtleSBkb3ducyBmcm9tIGlucHV0IGVsZW1lbnRzLlxuICAgICAgICAgICAgaWYgKF90aGlzLl9pc0lucHV0RWxlbWVudCh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgLy8gQSBrZXkgd2FzIHByZXNzZWQgd2hpbGUgYW4gaXRlbSBpbiB0aGlzIHpvbmUgd2FzIGZvY3VzZWQuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNlbGVjdGlvbk1vZGUgPSBfdGhpcy5fZ2V0U2VsZWN0aW9uTW9kZSgpO1xuICAgICAgICAgICAgLy8gSWYgY3RybC1hIGlzIHByZXNzZWQsIHNlbGVjdCBhbGwgKGlmIGFsbCBhcmUgbm90IGFscmVhZHkgc2VsZWN0ZWQuKVxuICAgICAgICAgICAgaWYgKGlzU2VsZWN0QWxsS2V5ICYmIHNlbGVjdGlvbk1vZGUgPT09IFNlbGVjdGlvbk1vZGUubXVsdGlwbGUgJiYgIXNlbGVjdGlvbi5pc0FsbFNlbGVjdGVkKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzU2VsZWN0aW9uRGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLnNldEFsbFNlbGVjdGVkKHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIGVzY2FwZSBpcyBwcmVzc2VkLCBjbGVhciBzZWxlY3Rpb24gKGlmIGFueSBhcmUgc2VsZWN0ZWQuKVxuICAgICAgICAgICAgaWYgKGlzQ2xlYXJTZWxlY3Rpb25LZXkgJiYgc2VsZWN0aW9uLmdldFNlbGVjdGVkQ291bnQoKSA+IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzU2VsZWN0aW9uRGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLnNldEFsbFNlbGVjdGVkKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaXRlbVJvb3QgPSBfdGhpcy5fZmluZEl0ZW1Sb290KHRhcmdldCk7XG4gICAgICAgICAgICAvLyBJZiBhIGtleSB3YXMgcHJlc3NlZCB3aXRoaW4gYW4gaXRlbSwgd2Ugc2hvdWxkIHRyZWF0IFwiZW50ZXJzXCIgYXMgaW52b2tlcyBhbmQgXCJzcGFjZVwiIGFzIHRvZ2dsZVxuICAgICAgICAgICAgaWYgKGl0ZW1Sb290KSB7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gX3RoaXMuX2dldEl0ZW1JbmRleChpdGVtUm9vdCk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHRhcmdldCAhPT0gX3RoaXMuX3Jvb3QuY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2hhc0F0dHJpYnV0ZSh0YXJnZXQsIFNFTEVDVElPTl9UT0dHTEVfQVRUUklCVVRFX05BTUUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3IgdG9nZ2xlIGVsZW1lbnRzLCBhc3N1bWluZyB0aGV5IGFyZSByZW5kZXJlZCBhcyBidXR0b25zLCB0aGV5IHdpbGwgZ2VuZXJhdGUgYSBjbGljayBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIHdlIGNhbiBuby1vcCBmb3IgYW55IGtleWRvd25zIGluIHRoaXMgY2FzZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKF90aGlzLl9zaG91bGRBdXRvU2VsZWN0KHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNTZWxlY3Rpb25EaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBldmVudCB3ZW50IHRvIGFuIGVsZW1lbnQgd2hpY2ggc2hvdWxkIHRyaWdnZXIgYXV0by1zZWxlY3QsIHNlbGVjdCBpdCBhbmQgdGhlbiBsZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgZGVmYXVsdCBiZWhhdmlvciBraWNrIGluLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9vbkludm9rZU1vdXNlRG93bihldiwgaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKGV2LndoaWNoID09PSBLZXlDb2Rlcy5lbnRlciB8fCBldi53aGljaCA9PT0gS2V5Q29kZXMuc3BhY2UpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAodGFyZ2V0LnRhZ05hbWUgPT09ICdCVVRUT04nIHx8IHRhcmdldC50YWdOYW1lID09PSAnQScgfHwgdGFyZ2V0LnRhZ05hbWUgPT09ICdJTlBVVCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGFyZ2V0ID09PSBpdGVtUm9vdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2LndoaWNoID09PSBLZXlDb2Rlcy5lbnRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEl0ZW1zIHNob3VsZCBiZSBpbnZva2FibGUgZXZlbiBpZiBzZWxlY3Rpb24gaXMgZGlzYWJsZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX29uSW52b2tlQ2xpY2soZXYsIGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGV2LndoaWNoID09PSBLZXlDb2Rlcy5zcGFjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNTZWxlY3Rpb25EaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fb25Ub2dnbGVDbGljayhldiwgaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IGdldFBhcmVudCh0YXJnZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEdyb3VwKF90aGlzKTtcbiAgICAgICAgX3RoaXMuX2FzeW5jID0gbmV3IEFzeW5jKF90aGlzKTtcbiAgICAgICAgaW5pdGlhbGl6ZUNvbXBvbmVudFJlZihfdGhpcyk7XG4gICAgICAgIHZhciBzZWxlY3Rpb24gPSBfdGhpcy5wcm9wcy5zZWxlY3Rpb247XG4gICAgICAgIC8vIFJlZmxlY3QgdGhlIGluaXRpYWwgbW9kYWwgc3RhdGUgb2Ygc2VsZWN0aW9uIGludG8gdGhlIHN0YXRlLlxuICAgICAgICB2YXIgaXNNb2RhbCA9IHNlbGVjdGlvbi5pc01vZGFsICYmIHNlbGVjdGlvbi5pc01vZGFsKCk7XG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgaXNNb2RhbDogaXNNb2RhbCxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTZWxlY3Rpb25ab25lLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIChuZXh0UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgICB2YXIgaXNNb2RhbCA9IG5leHRQcm9wcy5zZWxlY3Rpb24uaXNNb2RhbCAmJiBuZXh0UHJvcHMuc2VsZWN0aW9uLmlzTW9kYWwoKTtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBwcmV2U3RhdGUpLCB7IGlzTW9kYWw6IGlzTW9kYWwgfSk7XG4gICAgfTtcbiAgICBTZWxlY3Rpb25ab25lLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdpbiA9IGdldFdpbmRvdyh0aGlzLl9yb290LmN1cnJlbnQpO1xuICAgICAgICAvLyBUcmFjayB0aGUgbGF0ZXN0IG1vZGlmaWVyIGtleXMgZ2xvYmFsbHkuXG4gICAgICAgIHRoaXMuX2V2ZW50cy5vbih3aW4sICdrZXlkb3duLCBrZXl1cCcsIHRoaXMuX3VwZGF0ZU1vZGlmaWVycywgdHJ1ZSk7XG4gICAgICAgIHRoaXMuX2V2ZW50cy5vbihkb2N1bWVudCwgJ2NsaWNrJywgdGhpcy5fZmluZFNjcm9sbFBhcmVudEFuZFRyeUNsZWFyT25FbXB0eUNsaWNrKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzLm9uKGRvY3VtZW50LmJvZHksICd0b3VjaHN0YXJ0JywgdGhpcy5fb25Ub3VjaFN0YXJ0Q2FwdHVyZSwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuX2V2ZW50cy5vbihkb2N1bWVudC5ib2R5LCAndG91Y2hlbmQnLCB0aGlzLl9vblRvdWNoU3RhcnRDYXB0dXJlLCB0cnVlKTtcbiAgICAgICAgLy8gU3Vic2NyaWJlIHRvIHRoZSBzZWxlY3Rpb24gdG8ga2VlcCBtb2RhbCBzdGF0ZSB1cGRhdGVkLlxuICAgICAgICB0aGlzLl9ldmVudHMub24odGhpcy5wcm9wcy5zZWxlY3Rpb24sICdjaGFuZ2UnLCB0aGlzLl9vblNlbGVjdGlvbkNoYW5nZSk7XG4gICAgfTtcbiAgICBTZWxlY3Rpb25ab25lLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpc01vZGFsID0gdGhpcy5zdGF0ZS5pc01vZGFsO1xuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGNzcygnbXMtU2VsZWN0aW9uWm9uZScsIHRoaXMucHJvcHMuY2xhc3NOYW1lLCB7XG4gICAgICAgICAgICAgICAgJ21zLVNlbGVjdGlvblpvbmUtLW1vZGFsJzogISFpc01vZGFsLFxuICAgICAgICAgICAgfSksIHJlZjogdGhpcy5fcm9vdCwgb25LZXlEb3duOiB0aGlzLl9vbktleURvd24sIG9uTW91c2VEb3duOiB0aGlzLl9vbk1vdXNlRG93biwgb25LZXlEb3duQ2FwdHVyZTogdGhpcy5fb25LZXlEb3duQ2FwdHVyZSwgb25DbGljazogdGhpcy5fb25DbGljaywgcm9sZTogXCJwcmVzZW50YXRpb25cIiwgb25Eb3VibGVDbGljazogdGhpcy5fb25Eb3VibGVDbGljaywgb25Db250ZXh0TWVudTogdGhpcy5fb25Db250ZXh0TWVudSwgb25Nb3VzZURvd25DYXB0dXJlOiB0aGlzLl9vbk1vdXNlRG93bkNhcHR1cmUsIG9uRm9jdXNDYXB0dXJlOiB0aGlzLl9vbkZvY3VzLCBcImRhdGEtc2VsZWN0aW9uLWlzLW1vZGFsXCI6IGlzTW9kYWwgPyB0cnVlIDogdW5kZWZpbmVkIH0sXG4gICAgICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChGb2N1c1JlY3RzLCBudWxsKSkpO1xuICAgIH07XG4gICAgU2VsZWN0aW9uWm9uZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZpb3VzUHJvcHMpIHtcbiAgICAgICAgdmFyIHNlbGVjdGlvbiA9IHRoaXMucHJvcHMuc2VsZWN0aW9uO1xuICAgICAgICBpZiAoc2VsZWN0aW9uICE9PSBwcmV2aW91c1Byb3BzLnNlbGVjdGlvbikge1xuICAgICAgICAgICAgLy8gV2hlbmV2ZXIgc2VsZWN0aW9uIGNoYW5nZXMsIHVwZGF0ZSB0aGUgc3Vic2NyaXB0b24gdG8ga2VlcCBtb2RhbCBzdGF0ZSB1cGRhdGVkLlxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzLm9mZihwcmV2aW91c1Byb3BzLnNlbGVjdGlvbik7XG4gICAgICAgICAgICB0aGlzLl9ldmVudHMub24oc2VsZWN0aW9uLCAnY2hhbmdlJywgdGhpcy5fb25TZWxlY3Rpb25DaGFuZ2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTZWxlY3Rpb25ab25lLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRzLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fYXN5bmMuZGlzcG9zZSgpO1xuICAgIH07XG4gICAgU2VsZWN0aW9uWm9uZS5wcm90b3R5cGUuX2lzU2VsZWN0aW9uRGlzYWJsZWQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGlmICh0aGlzLl9nZXRTZWxlY3Rpb25Nb2RlKCkgPT09IFNlbGVjdGlvbk1vZGUubm9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKHRhcmdldCAhPT0gdGhpcy5fcm9vdC5jdXJyZW50KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faGFzQXR0cmlidXRlKHRhcmdldCwgU0VMRUNUSU9OX0RJU0FCTEVEX0FUVFJJQlVURV9OQU1FKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFyZ2V0ID0gZ2V0UGFyZW50KHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgU2VsZWN0aW9uWm9uZS5wcm90b3R5cGUuX29uVG9nZ2xlQWxsQ2xpY2sgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgdmFyIHNlbGVjdGlvbiA9IHRoaXMucHJvcHMuc2VsZWN0aW9uO1xuICAgICAgICB2YXIgc2VsZWN0aW9uTW9kZSA9IHRoaXMuX2dldFNlbGVjdGlvbk1vZGUoKTtcbiAgICAgICAgaWYgKHNlbGVjdGlvbk1vZGUgPT09IFNlbGVjdGlvbk1vZGUubXVsdGlwbGUpIHtcbiAgICAgICAgICAgIHNlbGVjdGlvbi50b2dnbGVBbGxTZWxlY3RlZCgpO1xuICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTZWxlY3Rpb25ab25lLnByb3RvdHlwZS5fb25Ub2dnbGVDbGljayA9IGZ1bmN0aW9uIChldiwgaW5kZXgpIHtcbiAgICAgICAgdmFyIHNlbGVjdGlvbiA9IHRoaXMucHJvcHMuc2VsZWN0aW9uO1xuICAgICAgICB2YXIgc2VsZWN0aW9uTW9kZSA9IHRoaXMuX2dldFNlbGVjdGlvbk1vZGUoKTtcbiAgICAgICAgc2VsZWN0aW9uLnNldENoYW5nZUV2ZW50cyhmYWxzZSk7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmVudGVyTW9kYWxPblRvdWNoICYmIHRoaXMuX2lzVG91Y2ggJiYgIXNlbGVjdGlvbi5pc0luZGV4U2VsZWN0ZWQoaW5kZXgpICYmIHNlbGVjdGlvbi5zZXRNb2RhbCkge1xuICAgICAgICAgICAgc2VsZWN0aW9uLnNldE1vZGFsKHRydWUpO1xuICAgICAgICAgICAgdGhpcy5fc2V0SXNUb3VjaChmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGVjdGlvbk1vZGUgPT09IFNlbGVjdGlvbk1vZGUubXVsdGlwbGUpIHtcbiAgICAgICAgICAgIHNlbGVjdGlvbi50b2dnbGVJbmRleFNlbGVjdGVkKGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzZWxlY3Rpb25Nb2RlID09PSBTZWxlY3Rpb25Nb2RlLnNpbmdsZSkge1xuICAgICAgICAgICAgdmFyIGlzU2VsZWN0ZWQgPSBzZWxlY3Rpb24uaXNJbmRleFNlbGVjdGVkKGluZGV4KTtcbiAgICAgICAgICAgIHZhciBpc01vZGFsID0gc2VsZWN0aW9uLmlzTW9kYWwgJiYgc2VsZWN0aW9uLmlzTW9kYWwoKTtcbiAgICAgICAgICAgIHNlbGVjdGlvbi5zZXRBbGxTZWxlY3RlZChmYWxzZSk7XG4gICAgICAgICAgICBzZWxlY3Rpb24uc2V0SW5kZXhTZWxlY3RlZChpbmRleCwgIWlzU2VsZWN0ZWQsIHRydWUpO1xuICAgICAgICAgICAgaWYgKGlzTW9kYWwgJiYgc2VsZWN0aW9uLnNldE1vZGFsKSB7XG4gICAgICAgICAgICAgICAgLy8gU2luY2UgdGhlIGFib3ZlIGNhbGwgdG8gc2V0QWxsU2VsZWN0ZWQoZmFsc2UpIGNsZWFycyBtb2RhbCBzdGF0ZSxcbiAgICAgICAgICAgICAgICAvLyByZXN0b3JlIGl0LiBUaGlzIG9jY3VycyBiZWNhdXNlIHRoZSBTZWxlY3Rpb25Nb2RlIG9mIHRoZSBTZWxlY3Rpb25cbiAgICAgICAgICAgICAgICAvLyBtYXkgZGlmZmVyIGZyb20gdGhlIFNlbGVjdGlvblpvbmUuXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uLnNldE1vZGFsKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2VsZWN0aW9uLnNldENoYW5nZUV2ZW50cyh0cnVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzZWxlY3Rpb24uc2V0Q2hhbmdlRXZlbnRzKHRydWUpO1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgLy8gTk9URTogZXYucHJldmVudERlZmF1bHQgaXMgbm90IGNhbGxlZCBmb3IgdG9nZ2xlIGNsaWNrcywgYmVjYXVzZSB0aGlzIHdpbGwga2lsbCB0aGUgYnJvd3NlciBiZWhhdmlvclxuICAgICAgICAvLyBmb3IgY2hlY2tib3hlcyBpZiB5b3UgdXNlIGEgY2hlY2tib3ggZm9yIHRoZSB0b2dnbGUuXG4gICAgfTtcbiAgICBTZWxlY3Rpb25ab25lLnByb3RvdHlwZS5fb25JbnZva2VDbGljayA9IGZ1bmN0aW9uIChldiwgaW5kZXgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgc2VsZWN0aW9uID0gX2Euc2VsZWN0aW9uLCBvbkl0ZW1JbnZva2VkID0gX2Eub25JdGVtSW52b2tlZDtcbiAgICAgICAgaWYgKG9uSXRlbUludm9rZWQpIHtcbiAgICAgICAgICAgIG9uSXRlbUludm9rZWQoc2VsZWN0aW9uLmdldEl0ZW1zKClbaW5kZXhdLCBpbmRleCwgZXYubmF0aXZlRXZlbnQpO1xuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTZWxlY3Rpb25ab25lLnByb3RvdHlwZS5fb25JdGVtU3VyZmFjZUNsaWNrID0gZnVuY3Rpb24gKGV2LCBpbmRleCkge1xuICAgICAgICB2YXIgc2VsZWN0aW9uID0gdGhpcy5wcm9wcy5zZWxlY3Rpb247XG4gICAgICAgIHZhciBpc1RvZ2dsZU1vZGlmaWVyUHJlc3NlZCA9IHRoaXMuX2lzQ3RybFByZXNzZWQgfHwgdGhpcy5faXNNZXRhUHJlc3NlZDtcbiAgICAgICAgdmFyIHNlbGVjdGlvbk1vZGUgPSB0aGlzLl9nZXRTZWxlY3Rpb25Nb2RlKCk7XG4gICAgICAgIGlmIChzZWxlY3Rpb25Nb2RlID09PSBTZWxlY3Rpb25Nb2RlLm11bHRpcGxlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faXNTaGlmdFByZXNzZWQgJiYgIXRoaXMuX2lzVGFiUHJlc3NlZCkge1xuICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5zZWxlY3RUb0luZGV4KGluZGV4LCAhaXNUb2dnbGVNb2RpZmllclByZXNzZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNUb2dnbGVNb2RpZmllclByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24udG9nZ2xlSW5kZXhTZWxlY3RlZChpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jbGVhckFuZFNlbGVjdEluZGV4KGluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzZWxlY3Rpb25Nb2RlID09PSBTZWxlY3Rpb25Nb2RlLnNpbmdsZSkge1xuICAgICAgICAgICAgdGhpcy5fY2xlYXJBbmRTZWxlY3RJbmRleChpbmRleCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNlbGVjdGlvblpvbmUucHJvdG90eXBlLl9vbkludm9rZU1vdXNlRG93biA9IGZ1bmN0aW9uIChldiwgaW5kZXgpIHtcbiAgICAgICAgdmFyIHNlbGVjdGlvbiA9IHRoaXMucHJvcHMuc2VsZWN0aW9uO1xuICAgICAgICAvLyBPbmx5IGRvIHdvcmsgaWYgaXRlbSBpcyBub3Qgc2VsZWN0ZWQuXG4gICAgICAgIGlmIChzZWxlY3Rpb24uaXNJbmRleFNlbGVjdGVkKGluZGV4KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NsZWFyQW5kU2VsZWN0SW5kZXgoaW5kZXgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVG8gYXZvaWQgaGlnaCBzdGFydHVwIGNvc3Qgb2YgdHJhdmVyc2luZyB0aGUgRE9NIG9uIGNvbXBvbmVudCBtb3VudCxcbiAgICAgKiBkZWZlciBmaW5kaW5nIHRoZSBzY3JvbGxhYmxlIHBhcmVudCB1bnRpbCBhIGNsaWNrIGludGVyYWN0aW9uLlxuICAgICAqXG4gICAgICogVGhlIHN0eWxlcyB3aWxsIHByb2JhYmx5IGFscmVhZHkgY2FsY3VsYXRlZCBzaW5jZSB3ZSdyZSBydW5uaW5nIGluIGEgY2xpY2sgaGFuZGxlcixcbiAgICAgKiBzbyB0aGlzIGlzIGxlc3MgbGlrZWx5IHRvIGNhdXNlIGxheW91dCB0aHJhc2hpbmcgdGhlbiBkb2luZyBpdCBpbiBtb3VudC5cbiAgICAgKi9cbiAgICBTZWxlY3Rpb25ab25lLnByb3RvdHlwZS5fZmluZFNjcm9sbFBhcmVudEFuZFRyeUNsZWFyT25FbXB0eUNsaWNrID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIHZhciBzY3JvbGxQYXJlbnQgPSBmaW5kU2Nyb2xsYWJsZVBhcmVudCh0aGlzLl9yb290LmN1cnJlbnQpO1xuICAgICAgICAvLyB1bmJpbmQgdGhpcyBoYW5kbGVyIGFuZCByZXBsYWNlIGJpbmRpbmcgd2l0aCBhIGJpbmRpbmcgb24gdGhlIGFjdHVhbCBzY3JvbGxhYmxlIHBhcmVudFxuICAgICAgICB0aGlzLl9ldmVudHMub2ZmKGRvY3VtZW50LCAnY2xpY2snLCB0aGlzLl9maW5kU2Nyb2xsUGFyZW50QW5kVHJ5Q2xlYXJPbkVtcHR5Q2xpY2spO1xuICAgICAgICB0aGlzLl9ldmVudHMub24oc2Nyb2xsUGFyZW50LCAnY2xpY2snLCB0aGlzLl90cnlDbGVhck9uRW1wdHlDbGljayk7XG4gICAgICAgIC8vIElmIHdlIGNsaWNrZWQgaW5zaWRlIHRoZSBzY3JvbGxhYmxlIHBhcmVudCwgY2FsbCB0aHJvdWdoIHRvIHRoZSBoYW5kbGVyIG9uIHRoaXMgY2xpY2suXG4gICAgICAgIGlmICgoc2Nyb2xsUGFyZW50ICYmIGV2LnRhcmdldCBpbnN0YW5jZW9mIE5vZGUgJiYgc2Nyb2xsUGFyZW50LmNvbnRhaW5zKGV2LnRhcmdldCkpIHx8IHNjcm9sbFBhcmVudCA9PT0gZXYudGFyZ2V0KSB7XG4gICAgICAgICAgICB0aGlzLl90cnlDbGVhck9uRW1wdHlDbGljayhldik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNlbGVjdGlvblpvbmUucHJvdG90eXBlLl90cnlDbGVhck9uRW1wdHlDbGljayA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICBpZiAoIXRoaXMucHJvcHMuc2VsZWN0aW9uUHJlc2VydmVkT25FbXB0eUNsaWNrICYmIHRoaXMuX2lzTm9uSGFuZGxlZENsaWNrKGV2LnRhcmdldCkpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuc2VsZWN0aW9uLnNldEFsbFNlbGVjdGVkKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2VsZWN0aW9uWm9uZS5wcm90b3R5cGUuX2NsZWFyQW5kU2VsZWN0SW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgdmFyIHNlbGVjdGlvbiA9IHRoaXMucHJvcHMuc2VsZWN0aW9uO1xuICAgICAgICB2YXIgaXNBbHJlYWR5U2luZ2xlU2VsZWN0ZWQgPSBzZWxlY3Rpb24uZ2V0U2VsZWN0ZWRDb3VudCgpID09PSAxICYmIHNlbGVjdGlvbi5pc0luZGV4U2VsZWN0ZWQoaW5kZXgpO1xuICAgICAgICBpZiAoIWlzQWxyZWFkeVNpbmdsZVNlbGVjdGVkKSB7XG4gICAgICAgICAgICB2YXIgaXNNb2RhbCA9IHNlbGVjdGlvbi5pc01vZGFsICYmIHNlbGVjdGlvbi5pc01vZGFsKCk7XG4gICAgICAgICAgICBzZWxlY3Rpb24uc2V0Q2hhbmdlRXZlbnRzKGZhbHNlKTtcbiAgICAgICAgICAgIHNlbGVjdGlvbi5zZXRBbGxTZWxlY3RlZChmYWxzZSk7XG4gICAgICAgICAgICBzZWxlY3Rpb24uc2V0SW5kZXhTZWxlY3RlZChpbmRleCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAoaXNNb2RhbCB8fCAodGhpcy5wcm9wcy5lbnRlck1vZGFsT25Ub3VjaCAmJiB0aGlzLl9pc1RvdWNoKSkge1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rpb24uc2V0TW9kYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLnNldE1vZGFsKHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNUb3VjaCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRJc1RvdWNoKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxlY3Rpb24uc2V0Q2hhbmdlRXZlbnRzKHRydWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBXZSBuZWVkIHRvIHRyYWNrIHRoZSBtb2RpZmllciBrZXkgc3RhdGVzIHNvIHRoYXQgd2hlbiBmb2N1cyBldmVudHMgb2NjdXIsIHdoaWNoIGRvIG5vdCBjb250YWluXG4gICAgICogbW9kaWZpZXIgc3RhdGVzIGluIHRoZSBFdmVudCBvYmplY3QsIHdlIGtub3cgaG93IHRvIGJlaGF2ZS5cbiAgICAgKi9cbiAgICBTZWxlY3Rpb25ab25lLnByb3RvdHlwZS5fdXBkYXRlTW9kaWZpZXJzID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIHRoaXMuX2lzU2hpZnRQcmVzc2VkID0gZXYuc2hpZnRLZXk7XG4gICAgICAgIHRoaXMuX2lzQ3RybFByZXNzZWQgPSBldi5jdHJsS2V5O1xuICAgICAgICB0aGlzLl9pc01ldGFQcmVzc2VkID0gZXYubWV0YUtleTtcbiAgICAgICAgdmFyIGtleUNvZGUgPSBldi5rZXlDb2RlO1xuICAgICAgICB0aGlzLl9pc1RhYlByZXNzZWQgPSBrZXlDb2RlID8ga2V5Q29kZSA9PT0gS2V5Q29kZXMudGFiIDogZmFsc2U7XG4gICAgfTtcbiAgICBTZWxlY3Rpb25ab25lLnByb3RvdHlwZS5fZmluZEl0ZW1Sb290ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICB2YXIgc2VsZWN0aW9uID0gdGhpcy5wcm9wcy5zZWxlY3Rpb247XG4gICAgICAgIHdoaWxlICh0YXJnZXQgIT09IHRoaXMuX3Jvb3QuY3VycmVudCkge1xuICAgICAgICAgICAgdmFyIGluZGV4VmFsdWUgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFNFTEVDVElPTl9JTkRFWF9BVFRSSUJVVEVfTkFNRSk7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBOdW1iZXIoaW5kZXhWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoaW5kZXhWYWx1ZSAhPT0gbnVsbCAmJiBpbmRleCA+PSAwICYmIGluZGV4IDwgc2VsZWN0aW9uLmdldEl0ZW1zKCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YXJnZXQgPSBnZXRQYXJlbnQodGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFyZ2V0ID09PSB0aGlzLl9yb290LmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9O1xuICAgIFNlbGVjdGlvblpvbmUucHJvdG90eXBlLl9nZXRJdGVtSW5kZXggPSBmdW5jdGlvbiAoaXRlbVJvb3QpIHtcbiAgICAgICAgcmV0dXJuIE51bWJlcihpdGVtUm9vdC5nZXRBdHRyaWJ1dGUoU0VMRUNUSU9OX0lOREVYX0FUVFJJQlVURV9OQU1FKSk7XG4gICAgfTtcbiAgICBTZWxlY3Rpb25ab25lLnByb3RvdHlwZS5fc2hvdWxkQXV0b1NlbGVjdCA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNBdHRyaWJ1dGUoZWxlbWVudCwgU0VMRUNUSU9OX1NFTEVDVF9BVFRSSUJVVEVfTkFNRSk7XG4gICAgfTtcbiAgICBTZWxlY3Rpb25ab25lLnByb3RvdHlwZS5faGFzQXR0cmlidXRlID0gZnVuY3Rpb24gKGVsZW1lbnQsIGF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgICAgdmFyIGlzVG9nZ2xlID0gZmFsc2U7XG4gICAgICAgIHdoaWxlICghaXNUb2dnbGUgJiYgZWxlbWVudCAhPT0gdGhpcy5fcm9vdC5jdXJyZW50KSB7XG4gICAgICAgICAgICBpc1RvZ2dsZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpID09PSAndHJ1ZSc7XG4gICAgICAgICAgICBlbGVtZW50ID0gZ2V0UGFyZW50KGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc1RvZ2dsZTtcbiAgICB9O1xuICAgIFNlbGVjdGlvblpvbmUucHJvdG90eXBlLl9pc0lucHV0RWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50LnRhZ05hbWUgPT09ICdJTlBVVCcgfHwgZWxlbWVudC50YWdOYW1lID09PSAnVEVYVEFSRUEnO1xuICAgIH07XG4gICAgU2VsZWN0aW9uWm9uZS5wcm90b3R5cGUuX2lzTm9uSGFuZGxlZENsaWNrID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGRvYyA9IGdldERvY3VtZW50KCk7XG4gICAgICAgIGlmIChkb2MgJiYgZWxlbWVudCkge1xuICAgICAgICAgICAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudCAhPT0gZG9jLmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChpc0VsZW1lbnRUYWJiYWJsZShlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBnZXRQYXJlbnQoZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBTZWxlY3Rpb25ab25lLnByb3RvdHlwZS5faGFuZGxlTmV4dEZvY3VzID0gZnVuY3Rpb24gKGhhbmRsZUZvY3VzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLl9zaG91bGRIYW5kbGVGb2N1c1RpbWVvdXRJZCkge1xuICAgICAgICAgICAgdGhpcy5fYXN5bmMuY2xlYXJUaW1lb3V0KHRoaXMuX3Nob3VsZEhhbmRsZUZvY3VzVGltZW91dElkKTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3VsZEhhbmRsZUZvY3VzVGltZW91dElkID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Nob3VsZEhhbmRsZUZvY3VzID0gaGFuZGxlRm9jdXM7XG4gICAgICAgIGlmIChoYW5kbGVGb2N1cykge1xuICAgICAgICAgICAgdGhpcy5fYXN5bmMuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3Nob3VsZEhhbmRsZUZvY3VzID0gZmFsc2U7XG4gICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTZWxlY3Rpb25ab25lLnByb3RvdHlwZS5fc2V0SXNUb3VjaCA9IGZ1bmN0aW9uIChpc1RvdWNoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLl9pc1RvdWNoVGltZW91dElkKSB7XG4gICAgICAgICAgICB0aGlzLl9hc3luYy5jbGVhclRpbWVvdXQodGhpcy5faXNUb3VjaFRpbWVvdXRJZCk7XG4gICAgICAgICAgICB0aGlzLl9pc1RvdWNoVGltZW91dElkID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lzVG91Y2ggPSB0cnVlO1xuICAgICAgICBpZiAoaXNUb3VjaCkge1xuICAgICAgICAgICAgdGhpcy5fYXN5bmMuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2lzVG91Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgIH0sIDMwMCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNlbGVjdGlvblpvbmUucHJvdG90eXBlLl9nZXRTZWxlY3Rpb25Nb2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2VsZWN0aW9uID0gdGhpcy5wcm9wcy5zZWxlY3Rpb247XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMuc2VsZWN0aW9uTW9kZSwgc2VsZWN0aW9uTW9kZSA9IF9hID09PSB2b2lkIDAgPyBzZWxlY3Rpb24gPyBzZWxlY3Rpb24ubW9kZSA6IFNlbGVjdGlvbk1vZGUubm9uZSA6IF9hO1xuICAgICAgICByZXR1cm4gc2VsZWN0aW9uTW9kZTtcbiAgICB9O1xuICAgIFNlbGVjdGlvblpvbmUuZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBpc1NlbGVjdGVkT25Gb2N1czogdHJ1ZSxcbiAgICAgICAgc2VsZWN0aW9uTW9kZTogU2VsZWN0aW9uTW9kZS5tdWx0aXBsZSxcbiAgICB9O1xuICAgIHJldHVybiBTZWxlY3Rpb25ab25lO1xufShSZWFjdC5Db21wb25lbnQpKTtcbmV4cG9ydCB7IFNlbGVjdGlvblpvbmUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNlbGVjdGlvblpvbmUuanMubWFwIiwiaW1wb3J0IHsgU0VMRUNUSU9OX0NIQU5HRSwgU2VsZWN0aW9uTW9kZSB9IGZyb20gJy4vU2VsZWN0aW9uLnR5cGVzJztcbmltcG9ydCB7IEV2ZW50R3JvdXAgfSBmcm9tICcuLi9FdmVudEdyb3VwJztcbi8qKlxuICoge0Bkb2NDYXRlZ29yeSBTZWxlY3Rpb259XG4gKi9cbnZhciBTZWxlY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IFNlbGVjdGlvbi4gSWYgYFRJdGVtYCBkb2VzIG5vdCBoYXZlIGEgYGtleWAgcHJvcGVydHksIHlvdSBtdXN0IHByb3ZpZGUgYW4gb3B0aW9uc1xuICAgICAqIG9iamVjdCB3aXRoIGEgYGdldEtleWAgaW1wbGVtZW50YXRpb24uIFByb3ZpZGluZyBvcHRpb25zIGlzIG9wdGlvbmFsIG90aGVyd2lzZS5cbiAgICAgKiAoQXQgbW9zdCBvbmUgYG9wdGlvbnNgIG9iamVjdCBpcyBhY2NlcHRlZC4pXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2VsZWN0aW9uKCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IFtdOyAvLyBPdGhlcndpc2UsIGFyZ3VtZW50cyByZXF1aXJlIG9wdGlvbnMgd2l0aCBgZ2V0S2V5YC5cbiAgICAgICAgZm9yICh2YXIgX2kgPSAwIC8vIE90aGVyd2lzZSwgYXJndW1lbnRzIHJlcXVpcmUgb3B0aW9ucyB3aXRoIGBnZXRLZXlgLlxuICAgICAgICA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aCAvLyBPdGhlcndpc2UsIGFyZ3VtZW50cyByZXF1aXJlIG9wdGlvbnMgd2l0aCBgZ2V0S2V5YC5cbiAgICAgICAgOyBfaSsrIC8vIE90aGVyd2lzZSwgYXJndW1lbnRzIHJlcXVpcmUgb3B0aW9ucyB3aXRoIGBnZXRLZXlgLlxuICAgICAgICApIHtcbiAgICAgICAgICAgIG9wdGlvbnNbX2ldID0gYXJndW1lbnRzW19pXTsgLy8gT3RoZXJ3aXNlLCBhcmd1bWVudHMgcmVxdWlyZSBvcHRpb25zIHdpdGggYGdldEtleWAuXG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9hID0gb3B0aW9uc1swXSB8fCB7fSwgb25TZWxlY3Rpb25DaGFuZ2VkID0gX2Eub25TZWxlY3Rpb25DaGFuZ2VkLCBnZXRLZXkgPSBfYS5nZXRLZXksIF9iID0gX2EuY2FuU2VsZWN0SXRlbSwgY2FuU2VsZWN0SXRlbSA9IF9iID09PSB2b2lkIDAgPyBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9IDogX2IsIGl0ZW1zID0gX2EuaXRlbXMsIF9jID0gX2Euc2VsZWN0aW9uTW9kZSwgc2VsZWN0aW9uTW9kZSA9IF9jID09PSB2b2lkIDAgPyBTZWxlY3Rpb25Nb2RlLm11bHRpcGxlIDogX2M7XG4gICAgICAgIHRoaXMubW9kZSA9IHNlbGVjdGlvbk1vZGU7XG4gICAgICAgIHRoaXMuX2dldEtleSA9IGdldEtleSB8fCBkZWZhdWx0R2V0S2V5O1xuICAgICAgICB0aGlzLl9jaGFuZ2VFdmVudFN1cHByZXNzaW9uQ291bnQgPSAwO1xuICAgICAgICB0aGlzLl9leGVtcHRlZENvdW50ID0gMDtcbiAgICAgICAgdGhpcy5fYW5jaG9yZWRJbmRleCA9IDA7XG4gICAgICAgIHRoaXMuX3Vuc2VsZWN0YWJsZUNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5fb25TZWxlY3Rpb25DaGFuZ2VkID0gb25TZWxlY3Rpb25DaGFuZ2VkO1xuICAgICAgICB0aGlzLl9jYW5TZWxlY3RJdGVtID0gY2FuU2VsZWN0SXRlbTtcbiAgICAgICAgdGhpcy5faXNNb2RhbCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNldEl0ZW1zKGl0ZW1zIHx8IFtdLCB0cnVlKTtcbiAgICAgICAgdGhpcy5jb3VudCA9IHRoaXMuZ2V0U2VsZWN0ZWRDb3VudCgpO1xuICAgIH1cbiAgICBTZWxlY3Rpb24ucHJvdG90eXBlLmNhblNlbGVjdEl0ZW0gPSBmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ251bWJlcicgJiYgaW5kZXggPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhblNlbGVjdEl0ZW0oaXRlbSwgaW5kZXgpO1xuICAgIH07XG4gICAgU2VsZWN0aW9uLnByb3RvdHlwZS5nZXRLZXkgPSBmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRoaXMuX2dldEtleShpdGVtLCBpbmRleCk7XG4gICAgICAgIHJldHVybiB0eXBlb2Yga2V5ID09PSAnbnVtYmVyJyB8fCBrZXkgPyBcIlwiICsga2V5IDogJyc7XG4gICAgfTtcbiAgICBTZWxlY3Rpb24ucHJvdG90eXBlLnNldENoYW5nZUV2ZW50cyA9IGZ1bmN0aW9uIChpc0VuYWJsZWQsIHN1cHByZXNzQ2hhbmdlKSB7XG4gICAgICAgIHRoaXMuX2NoYW5nZUV2ZW50U3VwcHJlc3Npb25Db3VudCArPSBpc0VuYWJsZWQgPyAtMSA6IDE7XG4gICAgICAgIGlmICh0aGlzLl9jaGFuZ2VFdmVudFN1cHByZXNzaW9uQ291bnQgPT09IDAgJiYgdGhpcy5faGFzQ2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5faGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzdXBwcmVzc0NoYW5nZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTZWxlY3Rpb24ucHJvdG90eXBlLmlzTW9kYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc01vZGFsO1xuICAgIH07XG4gICAgU2VsZWN0aW9uLnByb3RvdHlwZS5zZXRNb2RhbCA9IGZ1bmN0aW9uIChpc01vZGFsKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc01vZGFsICE9PSBpc01vZGFsKSB7XG4gICAgICAgICAgICB0aGlzLnNldENoYW5nZUV2ZW50cyhmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLl9pc01vZGFsID0gaXNNb2RhbDtcbiAgICAgICAgICAgIGlmICghaXNNb2RhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0QWxsU2VsZWN0ZWQoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fY2hhbmdlKCk7XG4gICAgICAgICAgICB0aGlzLnNldENoYW5nZUV2ZW50cyh0cnVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogU2VsZWN0aW9uIG5lZWRzIHRoZSBpdGVtcywgY2FsbCB0aGlzIG1ldGhvZCB0byBzZXQgdGhlbS4gSWYgdGhlIHNldFxuICAgICAqIG9mIGl0ZW1zIGlzIHRoZSBzYW1lLCB0aGlzIHdpbGwgcmUtZXZhbHVhdGUgc2VsZWN0aW9uIGFuZCBpbmRleCBtYXBzLlxuICAgICAqIE90aGVyd2lzZSwgc2hvdWxkQ2xlYXIgc2hvdWxkIGJlIHNldCB0byB0cnVlLCBzbyB0aGF0IHNlbGVjdGlvbiBpc1xuICAgICAqIGNsZWFyZWQuXG4gICAgICovXG4gICAgU2VsZWN0aW9uLnByb3RvdHlwZS5zZXRJdGVtcyA9IGZ1bmN0aW9uIChpdGVtcywgc2hvdWxkQ2xlYXIpIHtcbiAgICAgICAgaWYgKHNob3VsZENsZWFyID09PSB2b2lkIDApIHsgc2hvdWxkQ2xlYXIgPSB0cnVlOyB9XG4gICAgICAgIHZhciBuZXdLZXlUb0luZGV4TWFwID0ge307XG4gICAgICAgIHZhciBuZXdVbnNlbGVjdGFibGVJbmRpY2VzID0ge307XG4gICAgICAgIHZhciBoYXNTZWxlY3Rpb25DaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2V0Q2hhbmdlRXZlbnRzKGZhbHNlKTtcbiAgICAgICAgLy8gUmVzZXQgdGhlIHVuc2VsZWN0YWJsZSBjb3VudC5cbiAgICAgICAgdGhpcy5fdW5zZWxlY3RhYmxlQ291bnQgPSAwO1xuICAgICAgICAvLyBCdWlsZCBsb29rdXAgdGFibGUgZm9yIHF1aWNrIHNlbGVjdGlvbiBldmFsdWF0aW9uLlxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gdGhpcy5nZXRLZXkoaXRlbSwgaSk7XG4gICAgICAgICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgICAgICAgICBuZXdLZXlUb0luZGV4TWFwW2tleV0gPSBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld1Vuc2VsZWN0YWJsZUluZGljZXNbaV0gPSBpdGVtICYmICF0aGlzLmNhblNlbGVjdEl0ZW0oaXRlbSk7XG4gICAgICAgICAgICBpZiAobmV3VW5zZWxlY3RhYmxlSW5kaWNlc1tpXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Vuc2VsZWN0YWJsZUNvdW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3VsZENsZWFyIHx8IGl0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5fc2V0QWxsU2VsZWN0ZWQoZmFsc2UsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIHRoZSBleGVtcHRpb24gbGlzdCBmb3IgZGlzY3JlcGVuY2llcy5cbiAgICAgICAgdmFyIG5ld0V4ZW1wdGVkSW5kaWNpZXMgPSB7fTtcbiAgICAgICAgdmFyIG5ld0V4ZW1wdGVkQ291bnQgPSAwO1xuICAgICAgICBmb3IgKHZhciBpbmRleFByb3BlcnR5IGluIHRoaXMuX2V4ZW1wdGVkSW5kaWNlcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2V4ZW1wdGVkSW5kaWNlcy5oYXNPd25Qcm9wZXJ0eShpbmRleFByb3BlcnR5KSkge1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IE51bWJlcihpbmRleFByb3BlcnR5KTtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMuX2l0ZW1zW2luZGV4XTtcbiAgICAgICAgICAgICAgICB2YXIgZXhlbXB0S2V5ID0gaXRlbSA/IHRoaXMuZ2V0S2V5KGl0ZW0sIE51bWJlcihpbmRleCkpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHZhciBuZXdJbmRleCA9IGV4ZW1wdEtleSA/IG5ld0tleVRvSW5kZXhNYXBbZXhlbXB0S2V5XSA6IGluZGV4O1xuICAgICAgICAgICAgICAgIGlmIChuZXdJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBpdGVtIGhhcyBsaWtlbHkgYmVlbiByZXBsYWNlZCBvciByZW1vdmVkLlxuICAgICAgICAgICAgICAgICAgICBoYXNTZWxlY3Rpb25DaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGtub3cgdGhlIG5ldyBpbmRleCBvZiB0aGUgaXRlbS4gdXBkYXRlIHRoZSBleGlzdGluZyBleGVtcHRpb24gdGFibGUuXG4gICAgICAgICAgICAgICAgICAgIG5ld0V4ZW1wdGVkSW5kaWNpZXNbbmV3SW5kZXhdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbmV3RXhlbXB0ZWRDb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICBoYXNTZWxlY3Rpb25DaGFuZ2VkID0gaGFzU2VsZWN0aW9uQ2hhbmdlZCB8fCBuZXdJbmRleCAhPT0gaW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9pdGVtcyAmJiB0aGlzLl9leGVtcHRlZENvdW50ID09PSAwICYmIGl0ZW1zLmxlbmd0aCAhPT0gdGhpcy5faXRlbXMubGVuZ3RoICYmIHRoaXMuX2lzQWxsU2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIC8vIElmIGV2ZXJ5dGhpbmcgd2FzIHNlbGVjdGVkIGJ1dCB0aGUgbnVtYmVyIG9mIGl0ZW1zIGhhcyBjaGFuZ2VkLCBzZWxlY3Rpb24gaGFzIGNoYW5nZWQuXG4gICAgICAgICAgICBoYXNTZWxlY3Rpb25DaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9leGVtcHRlZEluZGljZXMgPSBuZXdFeGVtcHRlZEluZGljaWVzO1xuICAgICAgICB0aGlzLl9leGVtcHRlZENvdW50ID0gbmV3RXhlbXB0ZWRDb3VudDtcbiAgICAgICAgdGhpcy5fa2V5VG9JbmRleE1hcCA9IG5ld0tleVRvSW5kZXhNYXA7XG4gICAgICAgIHRoaXMuX3Vuc2VsZWN0YWJsZUluZGljZXMgPSBuZXdVbnNlbGVjdGFibGVJbmRpY2VzO1xuICAgICAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xuICAgICAgICB0aGlzLl9zZWxlY3RlZEl0ZW1zID0gbnVsbDtcbiAgICAgICAgaWYgKGhhc1NlbGVjdGlvbkNoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUNvdW50KCk7XG4gICAgICAgICAgICB0aGlzLl9jaGFuZ2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldENoYW5nZUV2ZW50cyh0cnVlKTtcbiAgICB9O1xuICAgIFNlbGVjdGlvbi5wcm90b3R5cGUuZ2V0SXRlbXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pdGVtcztcbiAgICB9O1xuICAgIFNlbGVjdGlvbi5wcm90b3R5cGUuZ2V0U2VsZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3NlbGVjdGVkSXRlbXMpIHtcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdGVkSXRlbXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IHRoaXMuX2l0ZW1zO1xuICAgICAgICAgICAgaWYgKGl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0luZGV4U2VsZWN0ZWQoaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdGVkSXRlbXMucHVzaChpdGVtc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkSXRlbXM7XG4gICAgfTtcbiAgICBTZWxlY3Rpb24ucHJvdG90eXBlLmdldFNlbGVjdGVkQ291bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0FsbFNlbGVjdGVkXG4gICAgICAgICAgICA/IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIHRoaXMuX2V4ZW1wdGVkQ291bnQgLSB0aGlzLl91bnNlbGVjdGFibGVDb3VudFxuICAgICAgICAgICAgOiB0aGlzLl9leGVtcHRlZENvdW50O1xuICAgIH07XG4gICAgU2VsZWN0aW9uLnByb3RvdHlwZS5nZXRTZWxlY3RlZEluZGljZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5fc2VsZWN0ZWRJbmRpY2VzKSB7XG4gICAgICAgICAgICB0aGlzLl9zZWxlY3RlZEluZGljZXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IHRoaXMuX2l0ZW1zO1xuICAgICAgICAgICAgaWYgKGl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0luZGV4U2VsZWN0ZWQoaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdGVkSW5kaWNlcy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3RlZEluZGljZXM7XG4gICAgfTtcbiAgICBTZWxlY3Rpb24ucHJvdG90eXBlLmlzUmFuZ2VTZWxlY3RlZCA9IGZ1bmN0aW9uIChmcm9tSW5kZXgsIGNvdW50KSB7XG4gICAgICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlbmRJbmRleCA9IGZyb21JbmRleCArIGNvdW50O1xuICAgICAgICBmb3IgKHZhciBpID0gZnJvbUluZGV4OyBpIDwgZW5kSW5kZXg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzSW5kZXhTZWxlY3RlZChpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIFNlbGVjdGlvbi5wcm90b3R5cGUuaXNBbGxTZWxlY3RlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNlbGVjdGFibGVDb3VudCA9IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIHRoaXMuX3Vuc2VsZWN0YWJsZUNvdW50O1xuICAgICAgICAvLyBJbiBzaW5nbGUgbW9kZSwgd2UgY2FuIG9ubHkgaGF2ZSBhIG1heCBvZiAxIGl0ZW0uXG4gICAgICAgIGlmICh0aGlzLm1vZGUgPT09IFNlbGVjdGlvbk1vZGUuc2luZ2xlKSB7XG4gICAgICAgICAgICBzZWxlY3RhYmxlQ291bnQgPSBNYXRoLm1pbihzZWxlY3RhYmxlQ291bnQsIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoKHRoaXMuY291bnQgPiAwICYmIHRoaXMuX2lzQWxsU2VsZWN0ZWQgJiYgdGhpcy5fZXhlbXB0ZWRDb3VudCA9PT0gMCkgfHxcbiAgICAgICAgICAgICghdGhpcy5faXNBbGxTZWxlY3RlZCAmJiB0aGlzLl9leGVtcHRlZENvdW50ID09PSBzZWxlY3RhYmxlQ291bnQgJiYgc2VsZWN0YWJsZUNvdW50ID4gMCkpO1xuICAgIH07XG4gICAgU2VsZWN0aW9uLnByb3RvdHlwZS5pc0tleVNlbGVjdGVkID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9rZXlUb0luZGV4TWFwW2tleV07XG4gICAgICAgIHJldHVybiB0aGlzLmlzSW5kZXhTZWxlY3RlZChpbmRleCk7XG4gICAgfTtcbiAgICBTZWxlY3Rpb24ucHJvdG90eXBlLmlzSW5kZXhTZWxlY3RlZCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICByZXR1cm4gISEoKHRoaXMuY291bnQgPiAwICYmIHRoaXMuX2lzQWxsU2VsZWN0ZWQgJiYgIXRoaXMuX2V4ZW1wdGVkSW5kaWNlc1tpbmRleF0gJiYgIXRoaXMuX3Vuc2VsZWN0YWJsZUluZGljZXNbaW5kZXhdKSB8fFxuICAgICAgICAgICAgKCF0aGlzLl9pc0FsbFNlbGVjdGVkICYmIHRoaXMuX2V4ZW1wdGVkSW5kaWNlc1tpbmRleF0pKTtcbiAgICB9O1xuICAgIFNlbGVjdGlvbi5wcm90b3R5cGUuc2V0QWxsU2VsZWN0ZWQgPSBmdW5jdGlvbiAoaXNBbGxTZWxlY3RlZCkge1xuICAgICAgICBpZiAoaXNBbGxTZWxlY3RlZCAmJiB0aGlzLm1vZGUgIT09IFNlbGVjdGlvbk1vZGUubXVsdGlwbGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2VsZWN0YWJsZUNvdW50ID0gdGhpcy5faXRlbXMgPyB0aGlzLl9pdGVtcy5sZW5ndGggLSB0aGlzLl91bnNlbGVjdGFibGVDb3VudCA6IDA7XG4gICAgICAgIHRoaXMuc2V0Q2hhbmdlRXZlbnRzKGZhbHNlKTtcbiAgICAgICAgaWYgKHNlbGVjdGFibGVDb3VudCA+IDAgJiYgKHRoaXMuX2V4ZW1wdGVkQ291bnQgPiAwIHx8IGlzQWxsU2VsZWN0ZWQgIT09IHRoaXMuX2lzQWxsU2VsZWN0ZWQpKSB7XG4gICAgICAgICAgICB0aGlzLl9leGVtcHRlZEluZGljZXMgPSB7fTtcbiAgICAgICAgICAgIGlmIChpc0FsbFNlbGVjdGVkICE9PSB0aGlzLl9pc0FsbFNlbGVjdGVkIHx8IHRoaXMuX2V4ZW1wdGVkQ291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXhlbXB0ZWRDb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5faXNBbGxTZWxlY3RlZCA9IGlzQWxsU2VsZWN0ZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVDb3VudCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0Q2hhbmdlRXZlbnRzKHRydWUpO1xuICAgIH07XG4gICAgU2VsZWN0aW9uLnByb3RvdHlwZS5zZXRLZXlTZWxlY3RlZCA9IGZ1bmN0aW9uIChrZXksIGlzU2VsZWN0ZWQsIHNob3VsZEFuY2hvcikge1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9rZXlUb0luZGV4TWFwW2tleV07XG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnNldEluZGV4U2VsZWN0ZWQoaW5kZXgsIGlzU2VsZWN0ZWQsIHNob3VsZEFuY2hvcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNlbGVjdGlvbi5wcm90b3R5cGUuc2V0SW5kZXhTZWxlY3RlZCA9IGZ1bmN0aW9uIChpbmRleCwgaXNTZWxlY3RlZCwgc2hvdWxkQW5jaG9yKSB7XG4gICAgICAgIGlmICh0aGlzLm1vZGUgPT09IFNlbGVjdGlvbk1vZGUubm9uZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIENsYW1wIHRoZSBpbmRleC5cbiAgICAgICAgaW5kZXggPSBNYXRoLm1pbihNYXRoLm1heCgwLCBpbmRleCksIHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDEpO1xuICAgICAgICAvLyBOby1vcCBvbiBvdXQgb2YgYm91bmRzIHNlbGVjdGlvbnMuXG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5faXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRDaGFuZ2VFdmVudHMoZmFsc2UpO1xuICAgICAgICB2YXIgaXNFeGVtcHQgPSB0aGlzLl9leGVtcHRlZEluZGljZXNbaW5kZXhdO1xuICAgICAgICB2YXIgY2FuU2VsZWN0ID0gIXRoaXMuX3Vuc2VsZWN0YWJsZUluZGljZXNbaW5kZXhdO1xuICAgICAgICBpZiAoY2FuU2VsZWN0KSB7XG4gICAgICAgICAgICBpZiAoaXNTZWxlY3RlZCAmJiB0aGlzLm1vZGUgPT09IFNlbGVjdGlvbk1vZGUuc2luZ2xlKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBzaW5nbGUtc2VsZWN0LCB0aGUgcHJldmlvdXMgc2VsZWN0aW9uIHNob3VsZCBiZSByZW1vdmVkLlxuICAgICAgICAgICAgICAgIHRoaXMuX3NldEFsbFNlbGVjdGVkKGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERldGVybWluZSBpZiB3ZSBuZWVkIHRvIHJlbW92ZSB0aGUgZXhlbXB0aW9uLlxuICAgICAgICAgICAgaWYgKGlzRXhlbXB0ICYmICgoaXNTZWxlY3RlZCAmJiB0aGlzLl9pc0FsbFNlbGVjdGVkKSB8fCAoIWlzU2VsZWN0ZWQgJiYgIXRoaXMuX2lzQWxsU2VsZWN0ZWQpKSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9leGVtcHRlZEluZGljZXNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIHRoaXMuX2V4ZW1wdGVkQ291bnQtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERldGVybWluZSBpZiB3ZSBuZWVkIHRvIGFkZCB0aGUgZXhlbXB0aW9uLlxuICAgICAgICAgICAgaWYgKCFpc0V4ZW1wdCAmJiAoKGlzU2VsZWN0ZWQgJiYgIXRoaXMuX2lzQWxsU2VsZWN0ZWQpIHx8ICghaXNTZWxlY3RlZCAmJiB0aGlzLl9pc0FsbFNlbGVjdGVkKSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9leGVtcHRlZEluZGljZXNbaW5kZXhdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9leGVtcHRlZENvdW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2hvdWxkQW5jaG9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYW5jaG9yZWRJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3VwZGF0ZUNvdW50KCk7XG4gICAgICAgIHRoaXMuc2V0Q2hhbmdlRXZlbnRzKHRydWUpO1xuICAgIH07XG4gICAgU2VsZWN0aW9uLnByb3RvdHlwZS5zZWxlY3RUb0tleSA9IGZ1bmN0aW9uIChrZXksIGNsZWFyU2VsZWN0aW9uKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0VG9JbmRleCh0aGlzLl9rZXlUb0luZGV4TWFwW2tleV0sIGNsZWFyU2VsZWN0aW9uKTtcbiAgICB9O1xuICAgIFNlbGVjdGlvbi5wcm90b3R5cGUuc2VsZWN0VG9JbmRleCA9IGZ1bmN0aW9uIChpbmRleCwgY2xlYXJTZWxlY3Rpb24pIHtcbiAgICAgICAgaWYgKHRoaXMubW9kZSA9PT0gU2VsZWN0aW9uTW9kZS5ub25lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubW9kZSA9PT0gU2VsZWN0aW9uTW9kZS5zaW5nbGUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0SW5kZXhTZWxlY3RlZChpbmRleCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFuY2hvckluZGV4ID0gdGhpcy5fYW5jaG9yZWRJbmRleCB8fCAwO1xuICAgICAgICB2YXIgc3RhcnRJbmRleCA9IE1hdGgubWluKGluZGV4LCBhbmNob3JJbmRleCk7XG4gICAgICAgIHZhciBlbmRJbmRleCA9IE1hdGgubWF4KGluZGV4LCBhbmNob3JJbmRleCk7XG4gICAgICAgIHRoaXMuc2V0Q2hhbmdlRXZlbnRzKGZhbHNlKTtcbiAgICAgICAgaWYgKGNsZWFyU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRBbGxTZWxlY3RlZChmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICg7IHN0YXJ0SW5kZXggPD0gZW5kSW5kZXg7IHN0YXJ0SW5kZXgrKykge1xuICAgICAgICAgICAgdGhpcy5zZXRJbmRleFNlbGVjdGVkKHN0YXJ0SW5kZXgsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldENoYW5nZUV2ZW50cyh0cnVlKTtcbiAgICB9O1xuICAgIFNlbGVjdGlvbi5wcm90b3R5cGUudG9nZ2xlQWxsU2VsZWN0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2V0QWxsU2VsZWN0ZWQoIXRoaXMuaXNBbGxTZWxlY3RlZCgpKTtcbiAgICB9O1xuICAgIFNlbGVjdGlvbi5wcm90b3R5cGUudG9nZ2xlS2V5U2VsZWN0ZWQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHRoaXMuc2V0S2V5U2VsZWN0ZWQoa2V5LCAhdGhpcy5pc0tleVNlbGVjdGVkKGtleSksIHRydWUpO1xuICAgIH07XG4gICAgU2VsZWN0aW9uLnByb3RvdHlwZS50b2dnbGVJbmRleFNlbGVjdGVkID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHRoaXMuc2V0SW5kZXhTZWxlY3RlZChpbmRleCwgIXRoaXMuaXNJbmRleFNlbGVjdGVkKGluZGV4KSwgdHJ1ZSk7XG4gICAgfTtcbiAgICBTZWxlY3Rpb24ucHJvdG90eXBlLnRvZ2dsZVJhbmdlU2VsZWN0ZWQgPSBmdW5jdGlvbiAoZnJvbUluZGV4LCBjb3VudCkge1xuICAgICAgICBpZiAodGhpcy5tb2RlID09PSBTZWxlY3Rpb25Nb2RlLm5vbmUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaXNSYW5nZVNlbGVjdGVkID0gdGhpcy5pc1JhbmdlU2VsZWN0ZWQoZnJvbUluZGV4LCBjb3VudCk7XG4gICAgICAgIHZhciBlbmRJbmRleCA9IGZyb21JbmRleCArIGNvdW50O1xuICAgICAgICBpZiAodGhpcy5tb2RlID09PSBTZWxlY3Rpb25Nb2RlLnNpbmdsZSAmJiBjb3VudCA+IDEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldENoYW5nZUV2ZW50cyhmYWxzZSk7XG4gICAgICAgIGZvciAodmFyIGkgPSBmcm9tSW5kZXg7IGkgPCBlbmRJbmRleDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnNldEluZGV4U2VsZWN0ZWQoaSwgIWlzUmFuZ2VTZWxlY3RlZCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0Q2hhbmdlRXZlbnRzKHRydWUpO1xuICAgIH07XG4gICAgU2VsZWN0aW9uLnByb3RvdHlwZS5fdXBkYXRlQ291bnQgPSBmdW5jdGlvbiAocHJlc2VydmVNb2RhbFN0YXRlKSB7XG4gICAgICAgIGlmIChwcmVzZXJ2ZU1vZGFsU3RhdGUgPT09IHZvaWQgMCkgeyBwcmVzZXJ2ZU1vZGFsU3RhdGUgPSBmYWxzZTsgfVxuICAgICAgICB2YXIgY291bnQgPSB0aGlzLmdldFNlbGVjdGVkQ291bnQoKTtcbiAgICAgICAgaWYgKGNvdW50ICE9PSB0aGlzLmNvdW50KSB7XG4gICAgICAgICAgICB0aGlzLmNvdW50ID0gY291bnQ7XG4gICAgICAgICAgICB0aGlzLl9jaGFuZ2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuY291bnQgJiYgIXByZXNlcnZlTW9kYWxTdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRNb2RhbChmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNlbGVjdGlvbi5wcm90b3R5cGUuX3NldEFsbFNlbGVjdGVkID0gZnVuY3Rpb24gKGlzQWxsU2VsZWN0ZWQsIHByZXNlcnZlTW9kYWxTdGF0ZSkge1xuICAgICAgICBpZiAocHJlc2VydmVNb2RhbFN0YXRlID09PSB2b2lkIDApIHsgcHJlc2VydmVNb2RhbFN0YXRlID0gZmFsc2U7IH1cbiAgICAgICAgaWYgKGlzQWxsU2VsZWN0ZWQgJiYgdGhpcy5tb2RlICE9PSBTZWxlY3Rpb25Nb2RlLm11bHRpcGxlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNlbGVjdGFibGVDb3VudCA9IHRoaXMuX2l0ZW1zID8gdGhpcy5faXRlbXMubGVuZ3RoIC0gdGhpcy5fdW5zZWxlY3RhYmxlQ291bnQgOiAwO1xuICAgICAgICB0aGlzLnNldENoYW5nZUV2ZW50cyhmYWxzZSk7XG4gICAgICAgIGlmIChzZWxlY3RhYmxlQ291bnQgPiAwICYmICh0aGlzLl9leGVtcHRlZENvdW50ID4gMCB8fCBpc0FsbFNlbGVjdGVkICE9PSB0aGlzLl9pc0FsbFNlbGVjdGVkKSkge1xuICAgICAgICAgICAgdGhpcy5fZXhlbXB0ZWRJbmRpY2VzID0ge307XG4gICAgICAgICAgICBpZiAoaXNBbGxTZWxlY3RlZCAhPT0gdGhpcy5faXNBbGxTZWxlY3RlZCB8fCB0aGlzLl9leGVtcHRlZENvdW50ID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V4ZW1wdGVkQ291bnQgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzQWxsU2VsZWN0ZWQgPSBpc0FsbFNlbGVjdGVkO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlQ291bnQocHJlc2VydmVNb2RhbFN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldENoYW5nZUV2ZW50cyh0cnVlKTtcbiAgICB9O1xuICAgIFNlbGVjdGlvbi5wcm90b3R5cGUuX2NoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NoYW5nZUV2ZW50U3VwcHJlc3Npb25Db3VudCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5fc2VsZWN0ZWRJdGVtcyA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl9zZWxlY3RlZEluZGljZXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBFdmVudEdyb3VwLnJhaXNlKHRoaXMsIFNFTEVDVElPTl9DSEFOR0UpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX29uU2VsZWN0aW9uQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uU2VsZWN0aW9uQ2hhbmdlZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5faGFzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTZWxlY3Rpb247XG59KCkpO1xuZXhwb3J0IHsgU2VsZWN0aW9uIH07XG5mdW5jdGlvbiBkZWZhdWx0R2V0S2V5KGl0ZW0sIGluZGV4KSB7XG4gICAgLy8gMCBtYXkgYmUgdXNlZCBhcyBhIGtleVxuICAgIHZhciBfYSA9IChpdGVtIHx8IHt9KS5rZXksIGtleSA9IF9hID09PSB2b2lkIDAgPyBcIlwiICsgaW5kZXggOiBfYTtcbiAgICByZXR1cm4ga2V5O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2VsZWN0aW9uLmpzLm1hcCIsImltcG9ydCB7IGdldEdsb2JhbENsYXNzTmFtZXMsIEFuaW1hdGlvblZhcmlhYmxlcyB9IGZyb20gJy4uLy4uL1N0eWxpbmcnO1xudmFyIEdsb2JhbENsYXNzTmFtZXMgPSB7XG4gICAgcm9vdDogJ21zLUdyb3VwZWRMaXN0JyxcbiAgICBjb21wYWN0OiAnbXMtR3JvdXBlZExpc3QtLUNvbXBhY3QnLFxuICAgIGdyb3VwOiAnbXMtR3JvdXBlZExpc3QtZ3JvdXAnLFxuICAgIGxpbms6ICdtcy1MaW5rJyxcbiAgICBsaXN0Q2VsbDogJ21zLUxpc3QtY2VsbCcsXG59O1xudmFyIGJlemllcnMgPSB7XG4gICAgZWFzZUluT3V0U2luZTogJ2N1YmljLWJlemllcigwLjQ0NSwgMC4wNTAsIDAuNTUwLCAwLjk1MCknLFxufTtcbmV4cG9ydCB2YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICB2YXIgdGhlbWUgPSBwcm9wcy50aGVtZSwgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLCBjb21wYWN0ID0gcHJvcHMuY29tcGFjdDtcbiAgICB2YXIgcGFsZXR0ZSA9IHRoZW1lLnBhbGV0dGU7XG4gICAgdmFyIGNsYXNzTmFtZXMgPSBnZXRHbG9iYWxDbGFzc05hbWVzKEdsb2JhbENsYXNzTmFtZXMsIHRoZW1lKTtcbiAgICByZXR1cm4ge1xuICAgICAgICByb290OiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLnJvb3QsXG4gICAgICAgICAgICB0aGVtZS5mb250cy5zbWFsbCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfYSA9IHt9LFxuICAgICAgICAgICAgICAgICAgICBfYVtcIi5cIiArIGNsYXNzTmFtZXMubGlzdENlbGxdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluSGVpZ2h0OiAzOCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgX2EpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBhY3QgJiYgW1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZXMuY29tcGFjdCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9iID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBfYltcIi5cIiArIGNsYXNzTmFtZXMubGlzdENlbGxdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodDogMzIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX2IpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBdLFxuICAgICAgICBncm91cDogW1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5ncm91cCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBcImJhY2tncm91bmQtY29sb3IgXCIgKyBBbmltYXRpb25WYXJpYWJsZXMuZHVyYXRpb25WYWx1ZTIgKyBcIiBcIiArIGJlemllcnMuZWFzZUluT3V0U2luZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGdyb3VwSXNEcm9wcGluZzoge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBwYWxldHRlLm5ldXRyYWxMaWdodCxcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdyb3VwZWRMaXN0LnN0eWxlcy5qcy5tYXAiLCIvKipcbiAqIFBvc3NpYmxlIHZhcmlhdGlvbnMgb2YgdGhlIHNwaW5uZXIgY2lyY2xlIHNpemUuXG4gKiB7QGRvY0NhdGVnb3J5IFNwaW5uZXJ9XG4gKi9cbmV4cG9ydCB2YXIgU3Bpbm5lclNpemU7XG4oZnVuY3Rpb24gKFNwaW5uZXJTaXplKSB7XG4gICAgLyoqXG4gICAgICogMTJweCBTcGlubmVyIGRpYW1ldGVyXG4gICAgICovXG4gICAgU3Bpbm5lclNpemVbU3Bpbm5lclNpemVbXCJ4U21hbGxcIl0gPSAwXSA9IFwieFNtYWxsXCI7XG4gICAgLyoqXG4gICAgICogMTZweCBTcGlubmVyIGRpYW1ldGVyXG4gICAgICovXG4gICAgU3Bpbm5lclNpemVbU3Bpbm5lclNpemVbXCJzbWFsbFwiXSA9IDFdID0gXCJzbWFsbFwiO1xuICAgIC8qKlxuICAgICAqIDIwcHggU3Bpbm5lciBkaWFtZXRlclxuICAgICAqL1xuICAgIFNwaW5uZXJTaXplW1NwaW5uZXJTaXplW1wibWVkaXVtXCJdID0gMl0gPSBcIm1lZGl1bVwiO1xuICAgIC8qKlxuICAgICAqIDI4cHggU3Bpbm5lciBkaWFtZXRlclxuICAgICAqL1xuICAgIFNwaW5uZXJTaXplW1NwaW5uZXJTaXplW1wibGFyZ2VcIl0gPSAzXSA9IFwibGFyZ2VcIjtcbn0pKFNwaW5uZXJTaXplIHx8IChTcGlubmVyU2l6ZSA9IHt9KSk7XG4vKipcbiAqIERlcHJlY2F0ZWQgYXQgdjIuMC4wLCB1c2UgYFNwaW5uZXJTaXplYCBpbnN0ZWFkLlxuICogQGRlcHJlY2F0ZWQgVXNlIGBTcGlubmVyU2l6ZWAgaW5zdGVhZC5cbiAqIHtAZG9jQ2F0ZWdvcnkgU3Bpbm5lcn1cbiAqL1xuZXhwb3J0IHZhciBTcGlubmVyVHlwZTtcbihmdW5jdGlvbiAoU3Bpbm5lclR5cGUpIHtcbiAgICAvKipcbiAgICAgKiBEZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgYXQgXFw+PSAyLjAuMC4gVXNlIGBTcGlubmVyU2l6ZS5tZWRpdW1gIGluc3RlYWQuXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIGBTcGlubmVyU2l6ZS5tZWRpdW1gIGluc3RlYWQuXG4gICAgICovXG4gICAgU3Bpbm5lclR5cGVbU3Bpbm5lclR5cGVbXCJub3JtYWxcIl0gPSAwXSA9IFwibm9ybWFsXCI7XG4gICAgLyoqXG4gICAgICogRGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGF0IFxcPj0gMi4wLjAuIFVzZSBgU3Bpbm5lclNpemUubGFyZ2VgIGluc3RlYWQuXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIGBTcGlubmVyU2l6ZS5sYXJnZWAgaW5zdGVhZC5cbiAgICAgKi9cbiAgICBTcGlubmVyVHlwZVtTcGlubmVyVHlwZVtcImxhcmdlXCJdID0gMV0gPSBcImxhcmdlXCI7XG59KShTcGlubmVyVHlwZSB8fCAoU3Bpbm5lclR5cGUgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Bpbm5lci50eXBlcy5qcy5tYXAiLCJpbXBvcnQgeyBnZXRHbG9iYWxDbGFzc05hbWVzLCBnZXRGb2N1c1N0eWxlLCBBbmltYXRpb25WYXJpYWJsZXMsIEZvbnRXZWlnaHRzLCBJY29uRm9udFNpemVzLCB9IGZyb20gJy4uLy4uL1N0eWxpbmcnO1xuaW1wb3J0IHsgZ2V0UlRMLCBJc0ZvY3VzVmlzaWJsZUNsYXNzTmFtZSB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBERUZBVUxUX0NFTExfU1RZTEVfUFJPUFMgfSBmcm9tICcuLi9EZXRhaWxzTGlzdC9EZXRhaWxzUm93LnN0eWxlcyc7XG5pbXBvcnQgeyBDSEVDS19DRUxMX1dJRFRIIH0gZnJvbSAnLi4vRGV0YWlsc0xpc3QvRGV0YWlsc1Jvd0NoZWNrLnN0eWxlcyc7XG4vLyBGb3IgZXZlcnkgZ3JvdXAgbGV2ZWwgdGhlcmUgaXMgYSBHcm91cFNwYWNlciBhZGRlZC4gSW1wb3J0aW5nIHRoaXMgY29uc3QgdG8gaGF2ZSB0aGUgc291cmNlIHZhbHVlIGluIG9uZSBwbGFjZS5cbmltcG9ydCB7IFNQQUNFUl9XSURUSCBhcyBFWFBBTkRfQlVUVE9OX1dJRFRIIH0gZnJvbSAnLi9Hcm91cFNwYWNlcic7XG52YXIgR2xvYmFsQ2xhc3NOYW1lcyA9IHtcbiAgICByb290OiAnbXMtR3JvdXBIZWFkZXInLFxuICAgIGNvbXBhY3Q6ICdtcy1Hcm91cEhlYWRlci0tY29tcGFjdCcsXG4gICAgY2hlY2s6ICdtcy1Hcm91cEhlYWRlci1jaGVjaycsXG4gICAgZHJvcEljb246ICdtcy1Hcm91cEhlYWRlci1kcm9wSWNvbicsXG4gICAgZXhwYW5kOiAnbXMtR3JvdXBIZWFkZXItZXhwYW5kJyxcbiAgICBpc0NvbGxhcHNlZDogJ2lzLWNvbGxhcHNlZCcsXG4gICAgdGl0bGU6ICdtcy1Hcm91cEhlYWRlci10aXRsZScsXG4gICAgaXNTZWxlY3RlZDogJ2lzLXNlbGVjdGVkJyxcbiAgICBpY29uVGFnOiAnbXMtSWNvbi0tVGFnJyxcbiAgICBncm91cDogJ21zLUdyb3VwZWRMaXN0LWdyb3VwJyxcbiAgICBpc0Ryb3BwaW5nOiAnaXMtZHJvcHBpbmcnLFxufTtcbnZhciBiZXppZXJzID0ge1xuICAgIGVhc2VPdXRDaXJjOiAnY3ViaWMtYmV6aWVyKDAuMDc1LCAwLjgyMCwgMC4xNjUsIDEuMDAwKScsXG4gICAgZWFzZU91dFNpbmU6ICdjdWJpYy1iZXppZXIoMC4zOTAsIDAuNTc1LCAwLjU2NSwgMS4wMDApJyxcbiAgICBlYXNlSW5CYWNrOiAnY3ViaWMtYmV6aWVyKDAuNjAwLCAtMC4yODAsIDAuNzM1LCAwLjA0NSknLFxufTtcbnZhciBERUZBVUxUX0dST1VQX0hFQURFUl9IRUlHSFQgPSA0ODtcbnZhciBDT01QQUNUX0dST1VQX0hFQURFUl9IRUlHSFQgPSA0MDtcbmV4cG9ydCB2YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICB2YXIgdGhlbWUgPSBwcm9wcy50aGVtZSwgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLCBzZWxlY3RlZCA9IHByb3BzLnNlbGVjdGVkLCBpc0NvbGxhcHNlZCA9IHByb3BzLmlzQ29sbGFwc2VkLCBjb21wYWN0ID0gcHJvcHMuY29tcGFjdDtcbiAgICAvLyBwYWRkaW5nIGZyb20gdGhlIHNvdXJjZSB0byBhbGlnbiBHcm91cEhlYWRlciB0aXRsZSB3aXRoIERldGFpbHNSb3cncyBmaXJzdCBjZWxsLlxuICAgIHZhciBjZWxsTGVmdFBhZGRpbmcgPSBERUZBVUxUX0NFTExfU1RZTEVfUFJPUFMuY2VsbExlZnRQYWRkaW5nO1xuICAgIHZhciBmaW5hbFJvd0hlaWdodCA9IGNvbXBhY3QgPyBDT01QQUNUX0dST1VQX0hFQURFUl9IRUlHSFQgOiBERUZBVUxUX0dST1VQX0hFQURFUl9IRUlHSFQ7XG4gICAgdmFyIHNlbWFudGljQ29sb3JzID0gdGhlbWUuc2VtYW50aWNDb2xvcnMsIHBhbGV0dGUgPSB0aGVtZS5wYWxldHRlLCBmb250cyA9IHRoZW1lLmZvbnRzO1xuICAgIHZhciBjbGFzc05hbWVzID0gZ2V0R2xvYmFsQ2xhc3NOYW1lcyhHbG9iYWxDbGFzc05hbWVzLCB0aGVtZSk7XG4gICAgdmFyIGNoZWNrRXhwYW5kUmVzZXRTdHlsZXMgPSBbXG4gICAgICAgIGdldEZvY3VzU3R5bGUodGhlbWUpLFxuICAgICAgICB7XG4gICAgICAgICAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICdub25lJyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgfSxcbiAgICBdO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJvb3Q6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMucm9vdCxcbiAgICAgICAgICAgIGdldEZvY3VzU3R5bGUodGhlbWUpLFxuICAgICAgICAgICAgdGhlbWUuZm9udHMubWVkaXVtLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vIGtlZXAgdGhlIGJvcmRlciBmb3IgaGVpZ2h0IGJ1dCBjb2xvciBpdCBzbyBpdCdzIGludmlzaWJsZS5cbiAgICAgICAgICAgICAgICBib3JkZXJCb3R0b206IFwiMXB4IHNvbGlkIFwiICsgc2VtYW50aWNDb2xvcnMubGlzdEJhY2tncm91bmQsXG4gICAgICAgICAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCcsXG4gICAgICAgICAgICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9hID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgJzpob3Zlcic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBzZW1hbnRpY0NvbG9ycy5saXN0SXRlbUJhY2tncm91bmRIb3ZlcmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBzZW1hbnRpY0NvbG9ycy5hY3Rpb25MaW5rSG92ZXJlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgX2FbXCImOmhvdmVyIC5cIiArIGNsYXNzTmFtZXMuY2hlY2tdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgX2FbXCIuXCIgKyBJc0ZvY3VzVmlzaWJsZUNsYXNzTmFtZSArIFwiICY6Zm9jdXMgLlwiICsgY2xhc3NOYW1lcy5jaGVja10gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBfYVtcIjpnbG9iYWwoLlwiICsgY2xhc3NOYW1lcy5ncm91cCArIFwiLlwiICsgY2xhc3NOYW1lcy5pc0Ryb3BwaW5nICsgXCIpXCJdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2IgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYltcIiYgPiAuXCIgKyBjbGFzc05hbWVzLnJvb3QgKyBcIiAuXCIgKyBjbGFzc05hbWVzLmRyb3BJY29uXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogXCJ0cmFuc2Zvcm0gXCIgKyBBbmltYXRpb25WYXJpYWJsZXMuZHVyYXRpb25WYWx1ZTQgKyBcIiBcIiArIGJlemllcnMuZWFzZU91dENpcmMgKyBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoXCJvcGFjaXR5IFwiICsgQW5pbWF0aW9uVmFyaWFibGVzLmR1cmF0aW9uVmFsdWUxICsgXCIgXCIgKyBiZXppZXJzLmVhc2VPdXRTaW5lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbkRlbGF5OiBBbmltYXRpb25WYXJpYWJsZXMuZHVyYXRpb25WYWx1ZTMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogXCJyb3RhdGUoMC4yZGVnKSBzY2FsZSgxKTtcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iW1wiLlwiICsgY2xhc3NOYW1lcy5jaGVja10gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYiksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF9hKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZWxlY3RlZCAmJiBbXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lcy5pc1NlbGVjdGVkLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogc2VtYW50aWNDb2xvcnMubGlzdEl0ZW1CYWNrZ3JvdW5kQ2hlY2tlZCxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzpob3Zlcic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogc2VtYW50aWNDb2xvcnMubGlzdEl0ZW1CYWNrZ3JvdW5kQ2hlY2tlZEhvdmVyZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jW1wiXCIgKyBjbGFzc05hbWVzLmNoZWNrXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGNvbXBhY3QgJiYgW2NsYXNzTmFtZXMuY29tcGFjdCwgeyBib3JkZXI6ICdub25lJyB9XSxcbiAgICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgXSxcbiAgICAgICAgZ3JvdXBIZWFkZXJDb250YWluZXI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBmaW5hbFJvd0hlaWdodCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGhlYWRlckNvdW50OiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogJzBweCA0cHgnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgY2hlY2s6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMuY2hlY2ssXG4gICAgICAgICAgICBjaGVja0V4cGFuZFJlc2V0U3R5bGVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgLy8gcGFkZGluZ1RvcCBhbmQgbWFyZ2luVG9wIGJyb3VnaHQgZnJvbSB0aGUgRGV0YWlsc1Jvdy5zdHlsZXMudHMgd2l0aCBleHBsYW5hdGlvbiBiZWxvdy5cbiAgICAgICAgICAgICAgICAvLyBFbnN1cmUgdGhhdCB0aGUgY2hlY2sgY2VsbCBjb3ZlcnMgdGhlIHRvcCBib3JkZXIgb2YgdGhlIGNlbGwuXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBlbnN1cmVzIHRoZSBjbGljayB0YXJnZXQgZG9lcyBub3QgbGVhdmUgYSBzcG90IHdoaWNoIHdvdWxkXG4gICAgICAgICAgICAgICAgLy8gY2F1c2Ugb3RoZXIgaXRlbXMgdG8gYmUgZGVzZWxlY3RlZC5cbiAgICAgICAgICAgICAgICBwYWRkaW5nVG9wOiAxLFxuICAgICAgICAgICAgICAgIG1hcmdpblRvcDogLTEsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgICAgICB3aWR0aDogQ0hFQ0tfQ0VMTF9XSURUSCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGZpbmFsUm93SGVpZ2h0LFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9kID0ge30sXG4gICAgICAgICAgICAgICAgICAgIF9kW1wiLlwiICsgSXNGb2N1c1Zpc2libGVDbGFzc05hbWUgKyBcIiAmOmZvY3VzXCJdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgX2QpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgZXhwYW5kOiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLmV4cGFuZCxcbiAgICAgICAgICAgIGNoZWNrRXhwYW5kUmVzZXRTdHlsZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogZm9udHMuc21hbGwuZm9udFNpemUsXG4gICAgICAgICAgICAgICAgd2lkdGg6IEVYUEFORF9CVVRUT05fV0lEVEgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBmaW5hbFJvd0hlaWdodCxcbiAgICAgICAgICAgICAgICBjb2xvcjogc2VsZWN0ZWQgPyBwYWxldHRlLm5ldXRyYWxQcmltYXJ5IDogcGFsZXR0ZS5uZXV0cmFsU2Vjb25kYXJ5LFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAnOmhvdmVyJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBzZWxlY3RlZCA/IHBhbGV0dGUubmV1dHJhbFF1YXRlcm5hcnkgOiBwYWxldHRlLm5ldXRyYWxMaWdodCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJzphY3RpdmUnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHNlbGVjdGVkID8gcGFsZXR0ZS5uZXV0cmFsVGVydGlhcnlBbHQgOiBwYWxldHRlLm5ldXRyYWxRdWF0ZXJuYXJ5QWx0LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBleHBhbmRJc0NvbGxhcHNlZDogW1xuICAgICAgICAgICAgaXNDb2xsYXBzZWRcbiAgICAgICAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lcy5pc0NvbGxhcHNlZCxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDBkZWcpJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzUwJSA1MCUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogJ3RyYW5zZm9ybSAuMXMgbGluZWFyJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogZ2V0UlRMKHRoZW1lKSA/ICdyb3RhdGUoLTkwZGVnKScgOiAncm90YXRlKDkwZGVnKScsXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzUwJSA1MCUnLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAndHJhbnNmb3JtIC4xcyBsaW5lYXInLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHRpdGxlOiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLnRpdGxlLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiBjZWxsTGVmdFBhZGRpbmcsXG4gICAgICAgICAgICAgICAgZm9udFNpemU6IGNvbXBhY3QgPyBmb250cy5tZWRpdW0uZm9udFNpemUgOiBmb250cy5tZWRpdW1QbHVzLmZvbnRTaXplLFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IGlzQ29sbGFwc2VkID8gRm9udFdlaWdodHMucmVndWxhciA6IEZvbnRXZWlnaHRzLnNlbWlib2xkLFxuICAgICAgICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICAgICAgICAgIG91dGxpbmU6IDAsXG4gICAgICAgICAgICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICAgICAgICAgICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgZHJvcEljb246IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMuZHJvcEljb24sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgICAgbGVmdDogLTI2LFxuICAgICAgICAgICAgICAgIGZvbnRTaXplOiBJY29uRm9udFNpemVzLmxhcmdlLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBwYWxldHRlLm5ldXRyYWxTZWNvbmRhcnksXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogXCJ0cmFuc2Zvcm0gXCIgKyBBbmltYXRpb25WYXJpYWJsZXMuZHVyYXRpb25WYWx1ZTIgKyBcIiBcIiArIGJlemllcnMuZWFzZUluQmFjayArIFwiLCBcIiArXG4gICAgICAgICAgICAgICAgICAgIChcIm9wYWNpdHkgXCIgKyBBbmltYXRpb25WYXJpYWJsZXMuZHVyYXRpb25WYWx1ZTQgKyBcIiBcIiArIGJlemllcnMuZWFzZU91dFNpbmUpLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDAuMmRlZykgc2NhbGUoMC42NSknLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzEwcHggMTBweCcsXG4gICAgICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2UgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgX2VbXCI6Z2xvYmFsKC5cIiArIGNsYXNzTmFtZXMuaWNvblRhZyArIFwiKVwiXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBfZSksXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R3JvdXBIZWFkZXIuc3R5bGVzLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBVdGlsaXR5IGNvbXBvbmVudCBmb3IgZGVsYXlpbmcgdGhlIHJlbmRlciBvZiBhIGNoaWxkIGNvbXBvbmVudCBhZnRlciBhIGdpdmVuIGRlbGF5LiBUaGlzIGNvbXBvbmVudFxuICogcmVxdWlyZXMgYSBzaW5nbGUgY2hpbGQgY29tcG9uZW50OyBkb24ndCBwYXNzIGluIG1hbnkgY29tcG9uZW50cy4gV3JhcCBtdWx0aXBsZSBjb21wb25lbnRzIGluIGEgRElWXG4gKiBpZiBuZWNlc3NhcnkuXG4gKlxuICogQHB1YmxpY1xuICoge0Bkb2NDYXRlZ29yeSBEZWxheWVkUmVuZGVyfVxuICovXG52YXIgRGVsYXllZFJlbmRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGVsYXllZFJlbmRlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEZWxheWVkUmVuZGVyKHByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGlzUmVuZGVyZWQ6IGZhbHNlLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIERlbGF5ZWRSZW5kZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgZGVsYXkgPSB0aGlzLnByb3BzLmRlbGF5O1xuICAgICAgICB0aGlzLl90aW1lb3V0SWQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgaXNSZW5kZXJlZDogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBkZWxheSk7XG4gICAgfTtcbiAgICBEZWxheWVkUmVuZGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RpbWVvdXRJZCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXRJZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERlbGF5ZWRSZW5kZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuaXNSZW5kZXJlZCA/IFJlYWN0LkNoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbikgOiBudWxsO1xuICAgIH07XG4gICAgRGVsYXllZFJlbmRlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGRlbGF5OiAwLFxuICAgIH07XG4gICAgcmV0dXJuIERlbGF5ZWRSZW5kZXI7XG59KFJlYWN0LkNvbXBvbmVudCkpO1xuZXhwb3J0IHsgRGVsYXllZFJlbmRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGVsYXllZFJlbmRlci5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTcGlubmVyVHlwZSwgU3Bpbm5lclNpemUgfSBmcm9tICcuL1NwaW5uZXIudHlwZXMnO1xuaW1wb3J0IHsgY2xhc3NOYW1lc0Z1bmN0aW9uLCBEZWxheWVkUmVuZGVyLCBnZXROYXRpdmVQcm9wcywgZGl2UHJvcGVydGllcyB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG52YXIgZ2V0Q2xhc3NOYW1lcyA9IGNsYXNzTmFtZXNGdW5jdGlvbigpO1xudmFyIFNwaW5uZXJCYXNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTcGlubmVyQmFzZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTcGlubmVyQmFzZSgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBTcGlubmVyQmFzZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgdHlwZSA9IF9hLnR5cGUsIHNpemUgPSBfYS5zaXplLCBhcmlhTGFiZWwgPSBfYS5hcmlhTGFiZWwsIGFyaWFMaXZlID0gX2EuYXJpYUxpdmUsIHN0eWxlcyA9IF9hLnN0eWxlcywgbGFiZWwgPSBfYS5sYWJlbCwgdGhlbWUgPSBfYS50aGVtZSwgY2xhc3NOYW1lID0gX2EuY2xhc3NOYW1lLCBsYWJlbFBvc2l0aW9uID0gX2EubGFiZWxQb3NpdGlvbjtcbiAgICAgICAgdmFyIHN0YXR1c01lc3NhZ2UgPSBhcmlhTGFiZWw7XG4gICAgICAgIHZhciBuYXRpdmVQcm9wcyA9IGdldE5hdGl2ZVByb3BzKHRoaXMucHJvcHMsIGRpdlByb3BlcnRpZXMsIFsnc2l6ZSddKTtcbiAgICAgICAgLy8gU3Bpbm5lclR5cGUgaXMgZGVwcmVjYXRlZC4gSWYgc29tZW9uZSBpcyBzdGlsbCB1c2luZyB0aGlzIHByb3BlcnR5LCByYXRoZXIgdGhhbiBwdXR0aW5nIHRoZSBTcGlubmVyVHlwZSBpbnRvIHRoZVxuICAgICAgICAvLyBJU3Bpbm5lclN0eWxlUHJvcHMsIHdlJ2xsIG1hcCBTcGlubmVyVHlwZSB0byBpdHMgZXF1aXZhbGVudCBTcGlubmVyU2l6ZSBhbmQgcGFzcyB0aGF0IGluLiBPbmNlIFNwaW5uZXJUeXBlXG4gICAgICAgIC8vIGZpbmFsbHkgZ29lcyBhd2F5IHdlIHNob3VsZCBkZWxldGUgdGhpcy5cbiAgICAgICAgdmFyIHN0eWxlU2l6ZSA9IHNpemU7XG4gICAgICAgIGlmIChzdHlsZVNpemUgPT09IHVuZGVmaW5lZCAmJiB0eXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgc3R5bGVTaXplID0gdHlwZSA9PT0gU3Bpbm5lclR5cGUubGFyZ2UgPyBTcGlubmVyU2l6ZS5sYXJnZSA6IFNwaW5uZXJTaXplLm1lZGl1bTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2xhc3NOYW1lcyA9IGdldENsYXNzTmFtZXMoc3R5bGVzLCB7XG4gICAgICAgICAgICB0aGVtZTogdGhlbWUsXG4gICAgICAgICAgICBzaXplOiBzdHlsZVNpemUsXG4gICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgICAgIGxhYmVsUG9zaXRpb246IGxhYmVsUG9zaXRpb24sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX19hc3NpZ24oe30sIG5hdGl2ZVByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcy5yb290IH0pLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcy5jaXJjbGUgfSksXG4gICAgICAgICAgICBsYWJlbCAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmxhYmVsIH0sIGxhYmVsKSxcbiAgICAgICAgICAgIHN0YXR1c01lc3NhZ2UgJiYgKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyByb2xlOiBcInN0YXR1c1wiLCBcImFyaWEtbGl2ZVwiOiBhcmlhTGl2ZSB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVsYXllZFJlbmRlciwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcy5zY3JlZW5SZWFkZXJUZXh0IH0sIHN0YXR1c01lc3NhZ2UpKSkpKSk7XG4gICAgfTtcbiAgICBTcGlubmVyQmFzZS5kZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIHNpemU6IFNwaW5uZXJTaXplLm1lZGl1bSxcbiAgICAgICAgYXJpYUxpdmU6ICdwb2xpdGUnLFxuICAgICAgICBsYWJlbFBvc2l0aW9uOiAnYm90dG9tJyxcbiAgICB9O1xuICAgIHJldHVybiBTcGlubmVyQmFzZTtcbn0oUmVhY3QuQ29tcG9uZW50KSk7XG5leHBvcnQgeyBTcGlubmVyQmFzZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Bpbm5lci5iYXNlLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTcGlubmVyU2l6ZSB9IGZyb20gJy4vU3Bpbm5lci50eXBlcyc7XG5pbXBvcnQgeyBoaWRkZW5Db250ZW50U3R5bGUsIGtleWZyYW1lcywgSGlnaENvbnRyYXN0U2VsZWN0b3IsIGdldEdsb2JhbENsYXNzTmFtZXMsIGdldEVkZ2VDaHJvbWl1bU5vSGlnaENvbnRyYXN0QWRqdXN0U2VsZWN0b3IsIH0gZnJvbSAnLi4vLi4vU3R5bGluZyc7XG5pbXBvcnQgeyBtZW1vaXplRnVuY3Rpb24gfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xudmFyIEdsb2JhbENsYXNzTmFtZXMgPSB7XG4gICAgcm9vdDogJ21zLVNwaW5uZXInLFxuICAgIGNpcmNsZTogJ21zLVNwaW5uZXItY2lyY2xlJyxcbiAgICBsYWJlbDogJ21zLVNwaW5uZXItbGFiZWwnLFxufTtcbnZhciBzcGluQW5pbWF0aW9uID0gbWVtb2l6ZUZ1bmN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ga2V5ZnJhbWVzKHtcbiAgICAgICAgJzAlJzoge1xuICAgICAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDBkZWcpJyxcbiAgICAgICAgfSxcbiAgICAgICAgJzEwMCUnOiB7XG4gICAgICAgICAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMzYwZGVnKScsXG4gICAgICAgIH0sXG4gICAgfSk7XG59KTtcbmV4cG9ydCB2YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciB0aGVtZSA9IHByb3BzLnRoZW1lLCBzaXplID0gcHJvcHMuc2l6ZSwgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLCBsYWJlbFBvc2l0aW9uID0gcHJvcHMubGFiZWxQb3NpdGlvbjtcbiAgICB2YXIgcGFsZXR0ZSA9IHRoZW1lLnBhbGV0dGU7XG4gICAgdmFyIGNsYXNzTmFtZXMgPSBnZXRHbG9iYWxDbGFzc05hbWVzKEdsb2JhbENsYXNzTmFtZXMsIHRoZW1lKTtcbiAgICByZXR1cm4ge1xuICAgICAgICByb290OiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLnJvb3QsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYWJlbFBvc2l0aW9uID09PSAndG9wJyAmJiB7XG4gICAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbi1yZXZlcnNlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYWJlbFBvc2l0aW9uID09PSAncmlnaHQnICYmIHtcbiAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYWJlbFBvc2l0aW9uID09PSAnbGVmdCcgJiYge1xuICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3ctcmV2ZXJzZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBdLFxuICAgICAgICBjaXJjbGU6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMuY2lyY2xlLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAnMS41cHggc29saWQgJyArIHBhbGV0dGUudGhlbWVMaWdodCxcbiAgICAgICAgICAgICAgICBib3JkZXJUb3BDb2xvcjogcGFsZXR0ZS50aGVtZVByaW1hcnksXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uTmFtZTogc3BpbkFuaW1hdGlvbigpLFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAnMS4zcycsXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ICdpbmZpbml0ZScsXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uVGltaW5nRnVuY3Rpb246ICdjdWJpYy1iZXppZXIoLjUzLC4yMSwuMjksLjY3KScsXG4gICAgICAgICAgICAgICAgc2VsZWN0b3JzOiBfX2Fzc2lnbigoX2EgPSB7fSwgX2FbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICBib3JkZXJUb3BDb2xvcjogJ0hpZ2hsaWdodCcsXG4gICAgICAgICAgICAgICAgfSwgX2EpLCBnZXRFZGdlQ2hyb21pdW1Ob0hpZ2hDb250cmFzdEFkanVzdFNlbGVjdG9yKCkpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNpemUgPT09IFNwaW5uZXJTaXplLnhTbWFsbCAmJiBbXG4gICAgICAgICAgICAgICAgJ21zLVNwaW5uZXItLXhTbWFsbCcsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTIsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBzaXplID09PSBTcGlubmVyU2l6ZS5zbWFsbCAmJiBbXG4gICAgICAgICAgICAgICAgJ21zLVNwaW5uZXItLXNtYWxsJyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxNixcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxNixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHNpemUgPT09IFNwaW5uZXJTaXplLm1lZGl1bSAmJiBbXG4gICAgICAgICAgICAgICAgJ21zLVNwaW5uZXItLW1lZGl1bScsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjAsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjAsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBzaXplID09PSBTcGlubmVyU2l6ZS5sYXJnZSAmJiBbXG4gICAgICAgICAgICAgICAgJ21zLVNwaW5uZXItLWxhcmdlJyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyOCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyOCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgXSxcbiAgICAgICAgbGFiZWw6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMubGFiZWwsXG4gICAgICAgICAgICB0aGVtZS5mb250cy5zbWFsbCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogcGFsZXR0ZS50aGVtZVByaW1hcnksXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAnOHB4IDAgMCcsXG4gICAgICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYWJlbFBvc2l0aW9uID09PSAndG9wJyAmJiB7XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAnMCAwIDhweCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFiZWxQb3NpdGlvbiA9PT0gJ3JpZ2h0JyAmJiB7XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAnMCAwIDAgOHB4JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYWJlbFBvc2l0aW9uID09PSAnbGVmdCcgJiYge1xuICAgICAgICAgICAgICAgIG1hcmdpbjogJzAgOHB4IDAgMCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBzY3JlZW5SZWFkZXJUZXh0OiBoaWRkZW5Db250ZW50U3R5bGUsXG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TcGlubmVyLnN0eWxlcy5qcy5tYXAiLCJpbXBvcnQgeyBzdHlsZWQgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgU3Bpbm5lckJhc2UgfSBmcm9tICcuL1NwaW5uZXIuYmFzZSc7XG5pbXBvcnQgeyBnZXRTdHlsZXMgfSBmcm9tICcuL1NwaW5uZXIuc3R5bGVzJztcbmV4cG9ydCB2YXIgU3Bpbm5lciA9IHN0eWxlZChTcGlubmVyQmFzZSwgZ2V0U3R5bGVzLCB1bmRlZmluZWQsIHsgc2NvcGU6ICdTcGlubmVyJyB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNwaW5uZXIuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY29tcG9zZVJlbmRlckZ1bmN0aW9uLCBjbGFzc05hbWVzRnVuY3Rpb24sIGdldFJUTCwgZ2V0UlRMU2FmZUtleUNvZGUsIEtleUNvZGVzIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IFNlbGVjdGlvbk1vZGUgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvc2VsZWN0aW9uL2luZGV4JztcbmltcG9ydCB7IENoZWNrIH0gZnJvbSAnLi4vLi4vQ2hlY2snO1xuaW1wb3J0IHsgSWNvbiB9IGZyb20gJy4uLy4uL0ljb24nO1xuaW1wb3J0IHsgR3JvdXBTcGFjZXIgfSBmcm9tICcuL0dyb3VwU3BhY2VyJztcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tICcuLi8uLi9TcGlubmVyJztcbnZhciBnZXRDbGFzc05hbWVzID0gY2xhc3NOYW1lc0Z1bmN0aW9uKCk7XG52YXIgR3JvdXBIZWFkZXJCYXNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhHcm91cEhlYWRlckJhc2UsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gR3JvdXBIZWFkZXJCYXNlKHByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fdG9nZ2xlQ29sbGFwc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgZ3JvdXAgPSBfYS5ncm91cCwgb25Ub2dnbGVDb2xsYXBzZSA9IF9hLm9uVG9nZ2xlQ29sbGFwc2UsIGlzR3JvdXBMb2FkaW5nID0gX2EuaXNHcm91cExvYWRpbmc7XG4gICAgICAgICAgICB2YXIgaXNDb2xsYXBzZWQgPSBfdGhpcy5zdGF0ZS5pc0NvbGxhcHNlZDtcbiAgICAgICAgICAgIHZhciBuZXdDb2xsYXBzZWQgPSAhaXNDb2xsYXBzZWQ7XG4gICAgICAgICAgICB2YXIgbmV3TG9hZGluZ1Zpc2libGUgPSAhbmV3Q29sbGFwc2VkICYmIGlzR3JvdXBMb2FkaW5nICYmIGlzR3JvdXBMb2FkaW5nKGdyb3VwKTtcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBpc0NvbGxhcHNlZDogbmV3Q29sbGFwc2VkLFxuICAgICAgICAgICAgICAgIGlzTG9hZGluZ1Zpc2libGU6IG5ld0xvYWRpbmdWaXNpYmxlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAob25Ub2dnbGVDb2xsYXBzZSkge1xuICAgICAgICAgICAgICAgIG9uVG9nZ2xlQ29sbGFwc2UoZ3JvdXApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25LZXlVcCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIGdyb3VwID0gX2EuZ3JvdXAsIG9uR3JvdXBIZWFkZXJLZXlVcCA9IF9hLm9uR3JvdXBIZWFkZXJLZXlVcDtcbiAgICAgICAgICAgIGlmIChvbkdyb3VwSGVhZGVyS2V5VXApIHtcbiAgICAgICAgICAgICAgICBvbkdyb3VwSGVhZGVyS2V5VXAoZXYsIGdyb3VwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZXYuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICAgIHZhciBzaG91bGRPcGVuID0gX3RoaXMuc3RhdGUuaXNDb2xsYXBzZWQgJiYgZXYud2hpY2ggPT09IGdldFJUTFNhZmVLZXlDb2RlKEtleUNvZGVzLnJpZ2h0LCBfdGhpcy5wcm9wcy50aGVtZSk7XG4gICAgICAgICAgICAgICAgdmFyIHNob3VsZENsb3NlID0gIV90aGlzLnN0YXRlLmlzQ29sbGFwc2VkICYmIGV2LndoaWNoID09PSBnZXRSVExTYWZlS2V5Q29kZShLZXlDb2Rlcy5sZWZ0LCBfdGhpcy5wcm9wcy50aGVtZSk7XG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZENsb3NlIHx8IHNob3VsZE9wZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3RvZ2dsZUNvbGxhcHNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uVG9nZ2xlQ2xpY2sgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIF90aGlzLl90b2dnbGVDb2xsYXBzZSgpO1xuICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25Ub2dnbGVTZWxlY3RHcm91cENsaWNrID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgb25Ub2dnbGVTZWxlY3RHcm91cCA9IF9hLm9uVG9nZ2xlU2VsZWN0R3JvdXAsIGdyb3VwID0gX2EuZ3JvdXA7XG4gICAgICAgICAgICBpZiAob25Ub2dnbGVTZWxlY3RHcm91cCkge1xuICAgICAgICAgICAgICAgIG9uVG9nZ2xlU2VsZWN0R3JvdXAoZ3JvdXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25IZWFkZXJDbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLCBncm91cCA9IF9hLmdyb3VwLCBvbkdyb3VwSGVhZGVyQ2xpY2sgPSBfYS5vbkdyb3VwSGVhZGVyQ2xpY2ssIG9uVG9nZ2xlU2VsZWN0R3JvdXAgPSBfYS5vblRvZ2dsZVNlbGVjdEdyb3VwO1xuICAgICAgICAgICAgaWYgKG9uR3JvdXBIZWFkZXJDbGljaykge1xuICAgICAgICAgICAgICAgIG9uR3JvdXBIZWFkZXJDbGljayhncm91cCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChvblRvZ2dsZVNlbGVjdEdyb3VwKSB7XG4gICAgICAgICAgICAgICAgb25Ub2dnbGVTZWxlY3RHcm91cChncm91cCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblJlbmRlclRpdGxlID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgICAgICB2YXIgZ3JvdXAgPSBwcm9wcy5ncm91cCwgYXJpYUNvbFNwYW4gPSBwcm9wcy5hcmlhQ29sU3BhbjtcbiAgICAgICAgICAgIGlmICghZ3JvdXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogX3RoaXMuX2NsYXNzTmFtZXMudGl0bGUsIHJvbGU6IFwiZ3JpZGNlbGxcIiwgXCJhcmlhLWNvbHNwYW5cIjogYXJpYUNvbFNwYW4gfSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBudWxsLCBncm91cC5uYW1lKSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogX3RoaXMuX2NsYXNzTmFtZXMuaGVhZGVyQ291bnQgfSxcbiAgICAgICAgICAgICAgICAgICAgXCIoXCIsXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLmNvdW50LFxuICAgICAgICAgICAgICAgICAgICBncm91cC5oYXNNb3JlRGF0YSAmJiAnKycsXG4gICAgICAgICAgICAgICAgICAgIFwiKVwiKSkpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGlzQ29sbGFwc2VkOiAoX3RoaXMucHJvcHMuZ3JvdXAgJiYgX3RoaXMucHJvcHMuZ3JvdXAuaXNDb2xsYXBzZWQpLFxuICAgICAgICAgICAgaXNMb2FkaW5nVmlzaWJsZTogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgR3JvdXBIZWFkZXJCYXNlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIChuZXh0UHJvcHMsIHByZXZpb3VzU3RhdGUpIHtcbiAgICAgICAgaWYgKG5leHRQcm9wcy5ncm91cCkge1xuICAgICAgICAgICAgdmFyIG5ld0NvbGxhcHNlZCA9IG5leHRQcm9wcy5ncm91cC5pc0NvbGxhcHNlZDtcbiAgICAgICAgICAgIHZhciBpc0dyb3VwTG9hZGluZyA9IG5leHRQcm9wcy5pc0dyb3VwTG9hZGluZztcbiAgICAgICAgICAgIHZhciBuZXdMb2FkaW5nVmlzaWJsZSA9ICFuZXdDb2xsYXBzZWQgJiYgaXNHcm91cExvYWRpbmcgJiYgaXNHcm91cExvYWRpbmcobmV4dFByb3BzLmdyb3VwKTtcbiAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcHJldmlvdXNTdGF0ZSksIHsgaXNDb2xsYXBzZWQ6IG5ld0NvbGxhcHNlZCB8fCBmYWxzZSwgaXNMb2FkaW5nVmlzaWJsZTogbmV3TG9hZGluZ1Zpc2libGUgfHwgZmFsc2UgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGU7XG4gICAgfTtcbiAgICBHcm91cEhlYWRlckJhc2UucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgZ3JvdXAgPSBfYS5ncm91cCwgX2IgPSBfYS5ncm91cExldmVsLCBncm91cExldmVsID0gX2IgPT09IHZvaWQgMCA/IDAgOiBfYiwgdmlld3BvcnQgPSBfYS52aWV3cG9ydCwgc2VsZWN0aW9uTW9kZSA9IF9hLnNlbGVjdGlvbk1vZGUsIGxvYWRpbmdUZXh0ID0gX2EubG9hZGluZ1RleHQsIFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgX2MgPSBfYS5pc1NlbGVjdGVkLCBcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIGlzU2VsZWN0ZWQgPSBfYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYywgX2QgPSBfYS5zZWxlY3RlZCwgc2VsZWN0ZWQgPSBfZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfZCwgaW5kZW50V2lkdGggPSBfYS5pbmRlbnRXaWR0aCwgX2UgPSBfYS5vblJlbmRlclRpdGxlLCBvblJlbmRlclRpdGxlID0gX2UgPT09IHZvaWQgMCA/IHRoaXMuX29uUmVuZGVyVGl0bGUgOiBfZSwgb25SZW5kZXJHcm91cEhlYWRlckNoZWNrYm94ID0gX2Eub25SZW5kZXJHcm91cEhlYWRlckNoZWNrYm94LCBfZiA9IF9hLmlzQ29sbGFwc2VkR3JvdXBTZWxlY3RWaXNpYmxlLCBpc0NvbGxhcHNlZEdyb3VwU2VsZWN0VmlzaWJsZSA9IF9mID09PSB2b2lkIDAgPyB0cnVlIDogX2YsIGV4cGFuZEJ1dHRvblByb3BzID0gX2EuZXhwYW5kQnV0dG9uUHJvcHMsIGV4cGFuZEJ1dHRvbkljb24gPSBfYS5leHBhbmRCdXR0b25JY29uLCBzZWxlY3RBbGxCdXR0b25Qcm9wcyA9IF9hLnNlbGVjdEFsbEJ1dHRvblByb3BzLCB0aGVtZSA9IF9hLnRoZW1lLCBzdHlsZXMgPSBfYS5zdHlsZXMsIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSwgY29tcGFjdCA9IF9hLmNvbXBhY3QsIGFyaWFQb3NJblNldCA9IF9hLmFyaWFQb3NJblNldCwgYXJpYVNldFNpemUgPSBfYS5hcmlhU2V0U2l6ZSwgdXNlRmFzdEljb25zID0gX2EudXNlRmFzdEljb25zO1xuICAgICAgICB2YXIgZGVmYXVsdENoZWNrYm94UmVuZGVyID0gdXNlRmFzdEljb25zID8gdGhpcy5fZmFzdERlZmF1bHRDaGVja2JveFJlbmRlciA6IHRoaXMuX2RlZmF1bHRDaGVja2JveFJlbmRlcjtcbiAgICAgICAgdmFyIG9uUmVuZGVyQ2hlY2tib3ggPSBvblJlbmRlckdyb3VwSGVhZGVyQ2hlY2tib3hcbiAgICAgICAgICAgID8gY29tcG9zZVJlbmRlckZ1bmN0aW9uKG9uUmVuZGVyR3JvdXBIZWFkZXJDaGVja2JveCwgZGVmYXVsdENoZWNrYm94UmVuZGVyKVxuICAgICAgICAgICAgOiBkZWZhdWx0Q2hlY2tib3hSZW5kZXI7XG4gICAgICAgIHZhciBfZyA9IHRoaXMuc3RhdGUsIGlzQ29sbGFwc2VkID0gX2cuaXNDb2xsYXBzZWQsIGlzTG9hZGluZ1Zpc2libGUgPSBfZy5pc0xvYWRpbmdWaXNpYmxlO1xuICAgICAgICB2YXIgY2FuU2VsZWN0R3JvdXAgPSBzZWxlY3Rpb25Nb2RlID09PSBTZWxlY3Rpb25Nb2RlLm11bHRpcGxlO1xuICAgICAgICB2YXIgaXNTZWxlY3Rpb25DaGVja1Zpc2libGUgPSBjYW5TZWxlY3RHcm91cCAmJiAoaXNDb2xsYXBzZWRHcm91cFNlbGVjdFZpc2libGUgfHwgIShncm91cCAmJiBncm91cC5pc0NvbGxhcHNlZCkpO1xuICAgICAgICB2YXIgY3VycmVudGx5U2VsZWN0ZWQgPSBzZWxlY3RlZCB8fCBpc1NlbGVjdGVkO1xuICAgICAgICB2YXIgaXNSVEwgPSBnZXRSVEwodGhlbWUpO1xuICAgICAgICB0aGlzLl9jbGFzc05hbWVzID0gZ2V0Q2xhc3NOYW1lcyhzdHlsZXMsIHtcbiAgICAgICAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICAgICAgc2VsZWN0ZWQ6IGN1cnJlbnRseVNlbGVjdGVkLFxuICAgICAgICAgICAgaXNDb2xsYXBzZWQ6IGlzQ29sbGFwc2VkLFxuICAgICAgICAgICAgY29tcGFjdDogY29tcGFjdCxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghZ3JvdXApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogdGhpcy5fY2xhc3NOYW1lcy5yb290LCBzdHlsZTogdmlld3BvcnQgPyB7IG1pbldpZHRoOiB2aWV3cG9ydC53aWR0aCB9IDoge30sIG9uQ2xpY2s6IHRoaXMuX29uSGVhZGVyQ2xpY2ssIHJvbGU6IFwicm93XCIsIFwiYXJpYS1zZXRzaXplXCI6IGFyaWFTZXRTaXplLCBcImFyaWEtcG9zaW5zZXRcIjogYXJpYVBvc0luU2V0LCBcImRhdGEtaXMtZm9jdXNhYmxlXCI6IHRydWUsIG9uS2V5VXA6IHRoaXMuX29uS2V5VXAsIFwiYXJpYS1sYWJlbFwiOiBncm91cC5hcmlhTGFiZWwgfHwgZ3JvdXAubmFtZSwgXCJhcmlhLWV4cGFuZGVkXCI6ICF0aGlzLnN0YXRlLmlzQ29sbGFwc2VkLCBcImFyaWEtbGV2ZWxcIjogZ3JvdXBMZXZlbCArIDEgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IHRoaXMuX2NsYXNzTmFtZXMuZ3JvdXBIZWFkZXJDb250YWluZXIsIHJvbGU6IFwicHJlc2VudGF0aW9uXCIgfSxcbiAgICAgICAgICAgICAgICBpc1NlbGVjdGlvbkNoZWNrVmlzaWJsZSA/IChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgcm9sZTogXCJncmlkY2VsbFwiIH0sXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgX19hc3NpZ24oeyBcImRhdGEtaXMtZm9jdXNhYmxlXCI6IGZhbHNlLCB0eXBlOiBcImJ1dHRvblwiLCBjbGFzc05hbWU6IHRoaXMuX2NsYXNzTmFtZXMuY2hlY2ssIHJvbGU6IFwiY2hlY2tib3hcIiwgXCJhcmlhLWNoZWNrZWRcIjogY3VycmVudGx5U2VsZWN0ZWQsIFwiZGF0YS1zZWxlY3Rpb24tdG9nZ2xlXCI6IHRydWUsIG9uQ2xpY2s6IHRoaXMuX29uVG9nZ2xlU2VsZWN0R3JvdXBDbGljayB9LCBzZWxlY3RBbGxCdXR0b25Qcm9wcyksIG9uUmVuZGVyQ2hlY2tib3goeyBjaGVja2VkOiBjdXJyZW50bHlTZWxlY3RlZCwgdGhlbWU6IHRoZW1lIH0sIG9uUmVuZGVyQ2hlY2tib3gpKSkpIDogKHNlbGVjdGlvbk1vZGUgIT09IFNlbGVjdGlvbk1vZGUubm9uZSAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KEdyb3VwU3BhY2VyLCB7IGluZGVudFdpZHRoOiBpbmRlbnRXaWR0aCwgY291bnQ6IDEgfSkpLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR3JvdXBTcGFjZXIsIHsgaW5kZW50V2lkdGg6IGluZGVudFdpZHRoLCBjb3VudDogZ3JvdXBMZXZlbCB9KSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiB0aGlzLl9jbGFzc05hbWVzLmRyb3BJY29uLCByb2xlOiBcInByZXNlbnRhdGlvblwiIH0sXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbiwgeyBpY29uTmFtZTogXCJUYWdcIiB9KSksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHJvbGU6IFwiZ3JpZGNlbGxcIiB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIF9fYXNzaWduKHsgXCJkYXRhLWlzLWZvY3VzYWJsZVwiOiBmYWxzZSwgdHlwZTogXCJidXR0b25cIiwgY2xhc3NOYW1lOiB0aGlzLl9jbGFzc05hbWVzLmV4cGFuZCwgb25DbGljazogdGhpcy5fb25Ub2dnbGVDbGljaywgXCJhcmlhLWV4cGFuZGVkXCI6ICF0aGlzLnN0YXRlLmlzQ29sbGFwc2VkIH0sIGV4cGFuZEJ1dHRvblByb3BzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbiwgeyBjbGFzc05hbWU6IHRoaXMuX2NsYXNzTmFtZXMuZXhwYW5kSXNDb2xsYXBzZWQsIGljb25OYW1lOiBleHBhbmRCdXR0b25JY29uIHx8IChpc1JUTCA/ICdDaGV2cm9uTGVmdE1lZCcgOiAnQ2hldnJvblJpZ2h0TWVkJykgfSkpKSxcbiAgICAgICAgICAgICAgICBvblJlbmRlclRpdGxlKHRoaXMucHJvcHMsIHRoaXMuX29uUmVuZGVyVGl0bGUpLFxuICAgICAgICAgICAgICAgIGlzTG9hZGluZ1Zpc2libGUgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChTcGlubmVyLCB7IGxhYmVsOiBsb2FkaW5nVGV4dCB9KSkpKTtcbiAgICB9O1xuICAgIEdyb3VwSGVhZGVyQmFzZS5wcm90b3R5cGUuX2RlZmF1bHRDaGVja2JveFJlbmRlciA9IGZ1bmN0aW9uIChjaGVja2JveFByb3BzKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENoZWNrLCB7IGNoZWNrZWQ6IGNoZWNrYm94UHJvcHMuY2hlY2tlZCB9KTtcbiAgICB9O1xuICAgIEdyb3VwSGVhZGVyQmFzZS5wcm90b3R5cGUuX2Zhc3REZWZhdWx0Q2hlY2tib3hSZW5kZXIgPSBmdW5jdGlvbiAoY2hlY2tib3hQcm9wcykge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGYXN0Q2hlY2ssIHsgdGhlbWU6IGNoZWNrYm94UHJvcHMudGhlbWUsIGNoZWNrZWQ6IGNoZWNrYm94UHJvcHMuY2hlY2tlZCB9KTtcbiAgICB9O1xuICAgIEdyb3VwSGVhZGVyQmFzZS5kZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGV4cGFuZEJ1dHRvblByb3BzOiB7ICdhcmlhLWxhYmVsJzogJ2V4cGFuZCBjb2xsYXBzZSBncm91cCcgfSxcbiAgICB9O1xuICAgIHJldHVybiBHcm91cEhlYWRlckJhc2U7XG59KFJlYWN0LkNvbXBvbmVudCkpO1xuZXhwb3J0IHsgR3JvdXBIZWFkZXJCYXNlIH07XG52YXIgRmFzdENoZWNrID0gUmVhY3QubWVtbyhmdW5jdGlvbiAocHJvcHMpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDaGVjaywgeyB0aGVtZTogcHJvcHMudGhlbWUsIGNoZWNrZWQ6IHByb3BzLmNoZWNrZWQsIGNsYXNzTmFtZTogcHJvcHMuY2xhc3NOYW1lLCB1c2VGYXN0SWNvbnM6IHRydWUgfSk7XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdyb3VwSGVhZGVyLmJhc2UuanMubWFwIiwiaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IGdldFN0eWxlcyB9IGZyb20gJy4vR3JvdXBIZWFkZXIuc3R5bGVzJztcbmltcG9ydCB7IEdyb3VwSGVhZGVyQmFzZSB9IGZyb20gJy4vR3JvdXBIZWFkZXIuYmFzZSc7XG5leHBvcnQgdmFyIEdyb3VwSGVhZGVyID0gc3R5bGVkKEdyb3VwSGVhZGVyQmFzZSwgZ2V0U3R5bGVzLCB1bmRlZmluZWQsIHtcbiAgICBzY29wZTogJ0dyb3VwSGVhZGVyJyxcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R3JvdXBIZWFkZXIuanMubWFwIiwiaW1wb3J0IHsgZ2V0R2xvYmFsQ2xhc3NOYW1lcyB9IGZyb20gJy4uLy4uL1N0eWxpbmcnO1xudmFyIEdsb2JhbENsYXNzTmFtZXMgPSB7XG4gICAgcm9vdDogJ21zLUdyb3VwU2hvd0FsbCcsXG4gICAgbGluazogJ21zLUxpbmsnLFxufTtcbmV4cG9ydCB2YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciB0aGVtZSA9IHByb3BzLnRoZW1lO1xuICAgIHZhciBmb250cyA9IHRoZW1lLmZvbnRzO1xuICAgIHZhciBjbGFzc05hbWVzID0gZ2V0R2xvYmFsQ2xhc3NOYW1lcyhHbG9iYWxDbGFzc05hbWVzLCB0aGVtZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcm9vdDogW1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5yb290LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6ICcxMHB4IDg0cHgnLFxuICAgICAgICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9hID0ge30sXG4gICAgICAgICAgICAgICAgICAgIF9hW1wiLlwiICsgY2xhc3NOYW1lcy5saW5rXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBmb250cy5zbWFsbC5mb250U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgX2EpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdyb3VwU2hvd0FsbC5zdHlsZXMuanMubWFwIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjbGFzc05hbWVzRnVuY3Rpb24gfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJy4uLy4uL0xpbmsnO1xuaW1wb3J0IHsgR3JvdXBTcGFjZXIgfSBmcm9tICcuL0dyb3VwU3BhY2VyJztcbnZhciBnZXRDbGFzc05hbWVzID0gY2xhc3NOYW1lc0Z1bmN0aW9uKCk7XG5leHBvcnQgdmFyIEdyb3VwU2hvd0FsbEJhc2UgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgZ3JvdXAgPSBwcm9wcy5ncm91cCwgZ3JvdXBMZXZlbCA9IHByb3BzLmdyb3VwTGV2ZWwsIF9hID0gcHJvcHMuc2hvd0FsbExpbmtUZXh0LCBzaG93QWxsTGlua1RleHQgPSBfYSA9PT0gdm9pZCAwID8gJ1Nob3cgQWxsJyA6IF9hLCBzdHlsZXMgPSBwcm9wcy5zdHlsZXMsIHRoZW1lID0gcHJvcHMudGhlbWUsIG9uVG9nZ2xlU3VtbWFyaXplID0gcHJvcHMub25Ub2dnbGVTdW1tYXJpemU7XG4gICAgdmFyIGNsYXNzTmFtZXMgPSBnZXRDbGFzc05hbWVzKHN0eWxlcywgeyB0aGVtZTogdGhlbWUgfSk7XG4gICAgdmFyIG1lbW9pemVkT25DbGljayA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldikge1xuICAgICAgICBvblRvZ2dsZVN1bW1hcml6ZShncm91cCk7XG4gICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0sIFtvblRvZ2dsZVN1bW1hcml6ZSwgZ3JvdXBdKTtcbiAgICBpZiAoZ3JvdXApIHtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzLnJvb3QgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR3JvdXBTcGFjZXIsIHsgY291bnQ6IGdyb3VwTGV2ZWwgfSksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIHsgb25DbGljazogbWVtb2l6ZWRPbkNsaWNrIH0sIHNob3dBbGxMaW5rVGV4dCkpKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R3JvdXBTaG93QWxsLmJhc2UuanMubWFwIiwiaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IGdldFN0eWxlcyB9IGZyb20gJy4vR3JvdXBTaG93QWxsLnN0eWxlcyc7XG5pbXBvcnQgeyBHcm91cFNob3dBbGxCYXNlIH0gZnJvbSAnLi9Hcm91cFNob3dBbGwuYmFzZSc7XG5leHBvcnQgdmFyIEdyb3VwU2hvd0FsbCA9IHN0eWxlZChHcm91cFNob3dBbGxCYXNlLCBnZXRTdHlsZXMsIHVuZGVmaW5lZCwgeyBzY29wZTogJ0dyb3VwU2hvd0FsbCcgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Hcm91cFNob3dBbGwuanMubWFwIiwiaW1wb3J0IHsgZ2V0R2xvYmFsQ2xhc3NOYW1lcyB9IGZyb20gJy4uLy4uL1N0eWxpbmcnO1xudmFyIEdsb2JhbENsYXNzTmFtZXMgPSB7XG4gICAgcm9vdDogJ21zLWdyb3VwRm9vdGVyJyxcbn07XG5leHBvcnQgdmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciB0aGVtZSA9IHByb3BzLnRoZW1lLCBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWU7XG4gICAgdmFyIGNsYXNzTmFtZXMgPSBnZXRHbG9iYWxDbGFzc05hbWVzKEdsb2JhbENsYXNzTmFtZXMsIHRoZW1lKTtcbiAgICByZXR1cm4ge1xuICAgICAgICByb290OiBbXG4gICAgICAgICAgICB0aGVtZS5mb250cy5tZWRpdW0sXG4gICAgICAgICAgICBjbGFzc05hbWVzLnJvb3QsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICAgICAgcGFkZGluZzogJzVweCAzOHB4JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIF0sXG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Hcm91cEZvb3Rlci5zdHlsZXMuanMubWFwIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2xhc3NOYW1lc0Z1bmN0aW9uIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IEdyb3VwU3BhY2VyIH0gZnJvbSAnLi9Hcm91cFNwYWNlcic7XG52YXIgZ2V0Q2xhc3NOYW1lcyA9IGNsYXNzTmFtZXNGdW5jdGlvbigpO1xuZXhwb3J0IHZhciBHcm91cEZvb3RlckJhc2UgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgZ3JvdXAgPSBwcm9wcy5ncm91cCwgZ3JvdXBMZXZlbCA9IHByb3BzLmdyb3VwTGV2ZWwsIGZvb3RlclRleHQgPSBwcm9wcy5mb290ZXJUZXh0LCBpbmRlbnRXaWR0aCA9IHByb3BzLmluZGVudFdpZHRoLCBzdHlsZXMgPSBwcm9wcy5zdHlsZXMsIHRoZW1lID0gcHJvcHMudGhlbWU7XG4gICAgdmFyIGNsYXNzTmFtZXMgPSBnZXRDbGFzc05hbWVzKHN0eWxlcywgeyB0aGVtZTogdGhlbWUgfSk7XG4gICAgaWYgKGdyb3VwICYmIGZvb3RlclRleHQpIHtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzLnJvb3QgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR3JvdXBTcGFjZXIsIHsgaW5kZW50V2lkdGg6IGluZGVudFdpZHRoLCBjb3VudDogZ3JvdXBMZXZlbCB9KSxcbiAgICAgICAgICAgIGZvb3RlclRleHQpKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R3JvdXBGb290ZXIuYmFzZS5qcy5tYXAiLCJpbXBvcnQgeyBzdHlsZWQgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgZ2V0U3R5bGVzIH0gZnJvbSAnLi9Hcm91cEZvb3Rlci5zdHlsZXMnO1xuaW1wb3J0IHsgR3JvdXBGb290ZXJCYXNlIH0gZnJvbSAnLi9Hcm91cEZvb3Rlci5iYXNlJztcbmV4cG9ydCB2YXIgR3JvdXBGb290ZXIgPSBzdHlsZWQoR3JvdXBGb290ZXJCYXNlLCBnZXRTdHlsZXMsIHVuZGVmaW5lZCwge1xuICAgIHNjb3BlOiAnR3JvdXBGb290ZXInLFxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Hcm91cEZvb3Rlci5qcy5tYXAiLCIvKipcbiAqIHtAZG9jQ2F0ZWdvcnkgTGlzdH1cbiAqL1xuZXhwb3J0IHZhciBTY3JvbGxUb01vZGUgPSB7XG4gICAgLyoqXG4gICAgICogRG9lcyBub3QgbWFrZSBhbnkgY29uc2lkZXJhdGlvbiB0byB3aGVyZSBpbiB0aGUgdmlld3BvcnQgdGhlIGl0ZW0gc2hvdWxkIGFsaWduIHRvLlxuICAgICAqL1xuICAgIGF1dG86IDAsXG4gICAgLyoqXG4gICAgICogQXR0ZW1wdHMgdG8gc2Nyb2xsIHRoZSBsaXN0IHNvIHRoZSB0b3Agb2YgdGhlIGRlc2lyZWQgaXRlbSBpcyBhbGlnbmVkIHdpdGggdGhlIHRvcCBvZiB0aGUgdmlld3BvcnQuXG4gICAgICovXG4gICAgdG9wOiAxLFxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIHNjcm9sbCB0aGUgbGlzdCBzbyB0aGUgYm90dG9tIG9mIHRoZSBkZXNpcmVkIGl0ZW0gaXMgYWxpZ25lZCB3aXRoIHRoZSBib3R0b20gb2YgdGhlIHZpZXdwb3J0LlxuICAgICAqL1xuICAgIGJvdHRvbTogMixcbiAgICAvKipcbiAgICAgKiBBdHRlbXB0cyB0byBzY3JvbGwgdGhlIGxpc3Qgc28gdGhlIGRlc2lyZWQgaXRlbSBpcyBpbiB0aGUgZXhhY3QgY2VudGVyIG9mIHRoZSB2aWV3cG9ydC5cbiAgICAgKi9cbiAgICBjZW50ZXI6IDMsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TGlzdC50eXBlcy5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzLCBfX3Jlc3QgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEFzeW5jLCBFdmVudEdyb3VwLCBjc3MsIGRpdlByb3BlcnRpZXMsIGZpbmRJbmRleCwgZmluZFNjcm9sbGFibGVQYXJlbnQsIGdldE5hdGl2ZVByb3BzLCBnZXRQYXJlbnQsIGdldFdpbmRvdywgaW5pdGlhbGl6ZUNvbXBvbmVudFJlZiwgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgU2Nyb2xsVG9Nb2RlLCB9IGZyb20gJy4vTGlzdC50eXBlcyc7XG5pbXBvcnQgeyBjb21wb3NlUmVuZGVyRnVuY3Rpb24gfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xudmFyIFJFU0laRV9ERUxBWSA9IDE2O1xudmFyIE1JTl9TQ1JPTExfVVBEQVRFX0RFTEFZID0gMTAwO1xudmFyIE1BWF9TQ1JPTExfVVBEQVRFX0RFTEFZID0gNTAwO1xudmFyIElETEVfREVCT1VOQ0VfREVMQVkgPSAyMDA7XG4vLyBUaGUgYW1vdW50IG9mIHRpbWUgdG8gd2FpdCBiZWZvcmUgZGVjbGFyaW5nIHRoYXQgdGhlIGxpc3QgaXNuJ3Qgc2Nyb2xsaW5nXG52YXIgRE9ORV9TQ1JPTExJTkdfV0FJVCA9IDUwMDtcbnZhciBERUZBVUxUX0lURU1TX1BFUl9QQUdFID0gMTA7XG52YXIgREVGQVVMVF9QQUdFX0hFSUdIVCA9IDMwO1xudmFyIERFRkFVTFRfUkVOREVSRURfV0lORE9XU19CRUhJTkQgPSAyO1xudmFyIERFRkFVTFRfUkVOREVSRURfV0lORE9XU19BSEVBRCA9IDI7XG52YXIgUEFHRV9LRVlfUFJFRklYID0gJ3BhZ2UtJztcbnZhciBTUEFDRVJfS0VZX1BSRUZJWCA9ICdzcGFjZXItJztcbnZhciBFTVBUWV9SRUNUID0ge1xuICAgIHRvcDogLTEsXG4gICAgYm90dG9tOiAtMSxcbiAgICBsZWZ0OiAtMSxcbiAgICByaWdodDogLTEsXG4gICAgd2lkdGg6IDAsXG4gICAgaGVpZ2h0OiAwLFxufTtcbi8vIE5hbWluZyBleHBlbnNpdmUgbWVhc3VyZXMgc28gdGhhdCB0aGV5J3JlIG5hbWVkIGluIHByb2ZpbGVzLlxudmFyIF9tZWFzdXJlUGFnZVJlY3QgPSBmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsgfTtcbnZhciBfbWVhc3VyZVN1cmZhY2VSZWN0ID0gX21lYXN1cmVQYWdlUmVjdDtcbnZhciBfbWVhc3VyZVNjcm9sbFJlY3QgPSBfbWVhc3VyZVBhZ2VSZWN0O1xuLyoqXG4gKiBUaGUgTGlzdCByZW5kZXJzIHZpcnR1YWxpemVkIHBhZ2VzIG9mIGl0ZW1zLiBFYWNoIHBhZ2UncyBpdGVtIGNvdW50IGlzIGRldGVybWluZWQgYnkgdGhlIGdldEl0ZW1Db3VudEZvclBhZ2UgY2FsbGJhY2tcbiAqIGlmIHByb3ZpZGVkIGJ5IHRoZSBjYWxsZXIsIG9yIDEwIGFzIGRlZmF1bHQuIEVhY2ggcGFnZSdzIGhlaWdodCBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBnZXRQYWdlSGVpZ2h0IGNhbGxiYWNrIGlmXG4gKiBwcm92aWRlZCBieSB0aGUgY2FsbGVyLCBvciBieSBjYWNoZWQgbWVhc3VyZW1lbnRzIGlmIGF2YWlsYWJsZSwgb3IgYnkgYSBydW5uaW5nIGF2ZXJhZ2UsIG9yIGEgZGVmYXVsdCBmYWxsYmFjay5cbiAqXG4gKiBUaGUgYWxnb3JpdGhtIGZvciByZW5kZXJpbmcgcGFnZXMgd29ya3MgbGlrZSB0aGlzOlxuICpcbiAqIDEuIFByZWRpY3QgdmlzaWJsZSBwYWdlcyBiYXNlZCBvbiBcImN1cnJlbnQgbWVhc3VyZSBkYXRhXCIgKHBhZ2UgaGVpZ2h0cywgc3VyZmFjZSBwb3NpdGlvbiwgdmlzaWJsZSB3aW5kb3cpXG4gKiAyLiBJZiBjaGFuZ2VzIGFyZSBuZWNlc3NhcnksIGFwcGx5IGNoYW5nZXMgKGFkZC9yZW1vdmUgcGFnZXMpXG4gKiAzLiBGb3IgcGFnZXMgdGhhdCBhcmUgYWRkZWQsIG1lYXN1cmUgdGhlIHBhZ2UgaGVpZ2h0cyBpZiB3ZSBuZWVkIHRvIHVzaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuICogNC4gSWYgbWVhc3VyZW1lbnRzIGRvbid0IG1hdGNoIHByZWRpY3Rpb25zLCB1cGRhdGUgbWVhc3VyZSBkYXRhIGFuZCBnb3RvIHN0ZXAgMSBhc3luY2hyb25vdXNseVxuICpcbiAqIE1lYXN1cmluZyB0b28gZnJlcXVlbnRseSBjYW4gcHVsbCBwZXJmb3JtYW5jZSBkb3duIHNpZ25pZmljYW50bHkuIFRvIGNvbXBlbnNhdGUsIHdlIGNhY2hlIG1lYXN1cmVkIHZhbHVlcyBzbyB0aGF0XG4gKiB3ZSBjYW4gYXZvaWQgcmUtbWVhc3VyaW5nIGR1cmluZyBvcGVyYXRpb25zIHRoYXQgc2hvdWxkIG5vdCBhbHRlciBoZWlnaHRzLCBsaWtlIHNjcm9sbGluZy5cbiAqXG4gKiBUbyBvcHRpbWl6ZSBnbGFzcyByZW5kZXJpbmcgcGVyZm9ybWFuY2UsIG9uU2hvdWxkVmlydHVhbGl6ZSBjYW4gYmUgc2V0LiBXaGVuIG9uU2hvdWxkVmlydHVhbGl6ZSByZXR1cm4gZmFsc2UsXG4gKiBMaXN0IHdpbGwgcnVuIGluIGZhc3QgbW9kZSAobm90IHZpcnR1YWxpemVkKSB0byByZW5kZXIgYWxsIGl0ZW1zIHdpdGhvdXQgYW55IG1lYXN1cmVtZW50cyB0byBpbXByb3ZlIHBhZ2UgbG9hZCB0aW1lLlxuICogQW5kIHdlIHN0YXJ0IGRvaW5nIG1lYXN1cmVtZW50cyBhbmQgcmVuZGVyaW5nIGluIHZpcnR1YWxpemVkIG1vZGUgd2hlbiBpdGVtcyBncm93cyBsYXJnZXIgdGhhbiB0aGlzIHRocmVzaG9sZC5cbiAqXG4gKiBIb3dldmVyLCBjZXJ0YWluIG9wZXJhdGlvbnMgY2FuIG1ha2UgbWVhc3VyZSBkYXRhIHN0YWxlLiBGb3IgZXhhbXBsZSwgcmVzaXppbmcgdGhlIGxpc3QsIG9yIHBhc3NpbmcgaW4gbmV3IHByb3BzLFxuICogb3IgZm9yY2luZyBhbiB1cGRhdGUgY2hhbmdlIGNhdXNlIHBhZ2VzIHRvIHNocmluay9ncm93LiBXaGVuIHRoZXNlIG9wZXJhdGlvbnMgb2NjdXIsIHdlIGluY3JlbWVudCBhIG1lYXN1cmVWZXJzaW9uXG4gKiBudW1iZXIsIHdoaWNoIHdlIGFzc29jaWF0ZSB3aXRoIGNhY2hlZCBtZWFzdXJlbWVudHMgYW5kIHVzZSB0byBkZXRlcm1pbmUgaWYgYSByZW1lYXN1cmUgc2hvdWxkIG9jY3VyLlxuICovXG52YXIgTGlzdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTGlzdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBMaXN0KHByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fcm9vdCA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgICAgICBfdGhpcy5fc3VyZmFjZSA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgICAgICBfdGhpcy5fcGFnZVJlZnMgPSB7fTtcbiAgICAgICAgX3RoaXMuX2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIChuZXh0UHJvcHMsIHByZXZpb3VzU3RhdGUpIHtcbiAgICAgICAgICAgIGlmIChuZXh0UHJvcHMuaXRlbXMgIT09IF90aGlzLnByb3BzLml0ZW1zIHx8XG4gICAgICAgICAgICAgICAgbmV4dFByb3BzLnJlbmRlckNvdW50ICE9PSBfdGhpcy5wcm9wcy5yZW5kZXJDb3VudCB8fFxuICAgICAgICAgICAgICAgIG5leHRQcm9wcy5zdGFydEluZGV4ICE9PSBfdGhpcy5wcm9wcy5zdGFydEluZGV4IHx8XG4gICAgICAgICAgICAgICAgbmV4dFByb3BzLnZlcnNpb24gIT09IF90aGlzLnByb3BzLnZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIHJlY2VpdmVkIG5ldyBpdGVtcyBzbyB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB0aGF0IGluaXRpYWxseSB3ZSBvbmx5IHJlbmRlciBhIHNpbmdsZSB3aW5kb3cgdG9cbiAgICAgICAgICAgICAgICAvLyBmaWxsIHRoZSBjdXJyZW50bHkgdmlzaWJsZSByZWN0LCBhbmQgdGhlbiBsYXRlciByZW5kZXIgYWRkaXRpb25hbCB3aW5kb3dzLlxuICAgICAgICAgICAgICAgIF90aGlzLl9yZXNldFJlcXVpcmVkV2luZG93cygpO1xuICAgICAgICAgICAgICAgIF90aGlzLl9yZXF1aXJlZFJlY3QgPSBudWxsO1xuICAgICAgICAgICAgICAgIF90aGlzLl9tZWFzdXJlVmVyc2lvbisrO1xuICAgICAgICAgICAgICAgIF90aGlzLl9pbnZhbGlkYXRlUGFnZUNhY2hlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLl91cGRhdGVQYWdlcyhuZXh0UHJvcHMsIHByZXZpb3VzU3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGU7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblJlbmRlclJvb3QgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgICAgIHZhciByb290UmVmID0gcHJvcHMucm9vdFJlZiwgc3VyZmFjZUVsZW1lbnQgPSBwcm9wcy5zdXJmYWNlRWxlbWVudCwgZGl2UHJvcHMgPSBwcm9wcy5kaXZQcm9wcztcbiAgICAgICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfX2Fzc2lnbih7IHJlZjogcm9vdFJlZiB9LCBkaXZQcm9wcyksIHN1cmZhY2VFbGVtZW50KSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblJlbmRlclN1cmZhY2UgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgICAgIHZhciBzdXJmYWNlUmVmID0gcHJvcHMuc3VyZmFjZVJlZiwgcGFnZUVsZW1lbnRzID0gcHJvcHMucGFnZUVsZW1lbnRzLCBkaXZQcm9wcyA9IHByb3BzLmRpdlByb3BzO1xuICAgICAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9fYXNzaWduKHsgcmVmOiBzdXJmYWNlUmVmIH0sIGRpdlByb3BzKSwgcGFnZUVsZW1lbnRzKSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblJlbmRlclBhZ2UgPSBmdW5jdGlvbiAocGFnZVByb3BzLCBkZWZhdWx0UmVuZGVyKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgb25SZW5kZXJDZWxsID0gX2Eub25SZW5kZXJDZWxsLCByb2xlID0gX2Eucm9sZTtcbiAgICAgICAgICAgIHZhciBfYiA9IHBhZ2VQcm9wcy5wYWdlLCBfYyA9IF9iLml0ZW1zLCBpdGVtcyA9IF9jID09PSB2b2lkIDAgPyBbXSA6IF9jLCBzdGFydEluZGV4ID0gX2Iuc3RhcnRJbmRleCwgZGl2UHJvcHMgPSBfX3Jlc3QocGFnZVByb3BzLCBbXCJwYWdlXCJdKTtcbiAgICAgICAgICAgIC8vIG9ubHkgYXNzaWduIGxpc3QgaXRlbSByb2xlIGlmIG5vIHJvbGUgaXMgYXNzaWduZWRcbiAgICAgICAgICAgIHZhciBjZWxsUm9sZSA9IHJvbGUgPT09IHVuZGVmaW5lZCA/ICdsaXN0aXRlbScgOiAncHJlc2VudGF0aW9uJztcbiAgICAgICAgICAgIHZhciBjZWxscyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHN0YXJ0SW5kZXggKyBpO1xuICAgICAgICAgICAgICAgIHZhciBpdGVtID0gaXRlbXNbaV07XG4gICAgICAgICAgICAgICAgdmFyIGl0ZW1LZXkgPSBfdGhpcy5wcm9wcy5nZXRLZXkgPyBfdGhpcy5wcm9wcy5nZXRLZXkoaXRlbSwgaW5kZXgpIDogaXRlbSAmJiBpdGVtLmtleTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbUtleSA9PT0gbnVsbCB8fCBpdGVtS2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbUtleSA9IGluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjZWxscy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyByb2xlOiBjZWxsUm9sZSwgY2xhc3NOYW1lOiAnbXMtTGlzdC1jZWxsJywga2V5OiBpdGVtS2V5LCBcImRhdGEtbGlzdC1pbmRleFwiOiBpbmRleCwgXCJkYXRhLWF1dG9tYXRpb25pZFwiOiBcIkxpc3RDZWxsXCIgfSwgb25SZW5kZXJDZWxsICYmXG4gICAgICAgICAgICAgICAgICAgIG9uUmVuZGVyQ2VsbChpdGVtLCBpbmRleCwgIV90aGlzLnByb3BzLmlnbm9yZVNjcm9sbGluZ1N0YXRlID8gX3RoaXMuc3RhdGUuaXNTY3JvbGxpbmcgOiB1bmRlZmluZWQpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfX2Fzc2lnbih7fSwgZGl2UHJvcHMpLCBjZWxscyk7XG4gICAgICAgIH07XG4gICAgICAgIGluaXRpYWxpemVDb21wb25lbnRSZWYoX3RoaXMpO1xuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHBhZ2VzOiBbXSxcbiAgICAgICAgICAgIGlzU2Nyb2xsaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogX3RoaXMuX2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX2FzeW5jID0gbmV3IEFzeW5jKF90aGlzKTtcbiAgICAgICAgX3RoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEdyb3VwKF90aGlzKTtcbiAgICAgICAgX3RoaXMuX2VzdGltYXRlZFBhZ2VIZWlnaHQgPSAwO1xuICAgICAgICBfdGhpcy5fdG90YWxFc3RpbWF0ZXMgPSAwO1xuICAgICAgICBfdGhpcy5fcmVxdWlyZWRXaW5kb3dzQWhlYWQgPSAwO1xuICAgICAgICBfdGhpcy5fcmVxdWlyZWRXaW5kb3dzQmVoaW5kID0gMDtcbiAgICAgICAgLy8gVHJhY2sgdGhlIG1lYXN1cmUgdmVyc2lvbiBmb3IgZXZlcnl0aGluZy5cbiAgICAgICAgX3RoaXMuX21lYXN1cmVWZXJzaW9uID0gMDtcbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgc2Nyb2xscyBhcmUgbGF6eSB1cGRhdGVkLlxuICAgICAgICBfdGhpcy5fb25Bc3luY1Njcm9sbCA9IF90aGlzLl9hc3luYy5kZWJvdW5jZShfdGhpcy5fb25Bc3luY1Njcm9sbCwgTUlOX1NDUk9MTF9VUERBVEVfREVMQVksIHtcbiAgICAgICAgICAgIGxlYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgbWF4V2FpdDogTUFYX1NDUk9MTF9VUERBVEVfREVMQVksXG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpcy5fb25Bc3luY0lkbGUgPSBfdGhpcy5fYXN5bmMuZGVib3VuY2UoX3RoaXMuX29uQXN5bmNJZGxlLCBJRExFX0RFQk9VTkNFX0RFTEFZLCB7XG4gICAgICAgICAgICBsZWFkaW5nOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzLl9vbkFzeW5jUmVzaXplID0gX3RoaXMuX2FzeW5jLmRlYm91bmNlKF90aGlzLl9vbkFzeW5jUmVzaXplLCBSRVNJWkVfREVMQVksIHtcbiAgICAgICAgICAgIGxlYWRpbmc6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMuX29uU2Nyb2xsaW5nRG9uZSA9IF90aGlzLl9hc3luYy5kZWJvdW5jZShfdGhpcy5fb25TY3JvbGxpbmdEb25lLCBET05FX1NDUk9MTElOR19XQUlULCB7XG4gICAgICAgICAgICBsZWFkaW5nOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzLl9jYWNoZWRQYWdlSGVpZ2h0cyA9IHt9O1xuICAgICAgICBfdGhpcy5fZXN0aW1hdGVkUGFnZUhlaWdodCA9IDA7XG4gICAgICAgIF90aGlzLl9mb2N1c2VkSW5kZXggPSAtMTtcbiAgICAgICAgX3RoaXMuX3BhZ2VDYWNoZSA9IHt9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIExpc3QuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gKG5leHRQcm9wcywgcHJldmlvdXNTdGF0ZSkge1xuICAgICAgICByZXR1cm4gcHJldmlvdXNTdGF0ZS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBwcmV2aW91c1N0YXRlKTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShMaXN0LnByb3RvdHlwZSwgXCJwYWdlUmVmc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhZ2VSZWZzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBTY3JvbGwgdG8gdGhlIGdpdmVuIGluZGV4LiBCeSBkZWZhdWx0IHdpbGwgYnJpbmcgdGhlIHBhZ2UgdGhlIHNwZWNpZmllZCBpdGVtIGlzIG9uIGludG8gdGhlIHZpZXcuIElmIGEgY2FsbGJhY2tcbiAgICAgKiB0byBtZWFzdXJlIHRoZSBoZWlnaHQgb2YgYW4gaW5kaXZpZHVhbCBpdGVtIGlzIHNwZWNpZmllZCwgd2lsbCBvbmx5IHNjcm9sbCB0byBicmluZyB0aGUgc3BlY2lmaWMgaXRlbSBpbnRvIHZpZXcuXG4gICAgICpcbiAgICAgKiBOb3RlOiB3aXRoIGl0ZW1zIG9mIHZhcmlhYmxlIGhlaWdodCBhbmQgbm8gcGFzc2VkIGluIGBnZXRQYWdlSGVpZ2h0YCBtZXRob2QsIHRoZSBsaXN0IG1pZ2h0IGp1bXAgYWZ0ZXIgc2Nyb2xsaW5nXG4gICAgICogd2hlbiB3aW5kb3dzIGJlZm9yZS9haGVhZCBhcmUgYmVpbmcgcmVuZGVyZWQsIGFuZCB0aGUgZXN0aW1hdGVkIGhlaWdodCBpcyByZXBsYWNlZCB1c2luZyBhY3R1YWwgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaW5kZXggLSBJbmRleCBvZiBpdGVtIHRvIHNjcm9sbCB0b1xuICAgICAqIEBwYXJhbSBtZWFzdXJlSXRlbSAtIE9wdGlvbmFsIGNhbGxiYWNrIHRvIG1lYXN1cmUgdGhlIGhlaWdodCBvZiBhbiBpbmRpdmlkdWFsIGl0ZW1cbiAgICAgKiBAcGFyYW0gc2Nyb2xsVG9Nb2RlIC0gT3B0aW9uYWwgZGVmaW5lcyB3aGVyZSBpbiB0aGUgd2luZG93IHRoZSBpdGVtIHNob3VsZCBiZSBwb3NpdGlvbmVkIHRvIHdoZW4gc2Nyb2xsaW5nXG4gICAgICovXG4gICAgTGlzdC5wcm90b3R5cGUuc2Nyb2xsVG9JbmRleCA9IGZ1bmN0aW9uIChpbmRleCwgbWVhc3VyZUl0ZW0sIHNjcm9sbFRvTW9kZSkge1xuICAgICAgICBpZiAoc2Nyb2xsVG9Nb2RlID09PSB2b2lkIDApIHsgc2Nyb2xsVG9Nb2RlID0gU2Nyb2xsVG9Nb2RlLmF1dG87IH1cbiAgICAgICAgdmFyIHN0YXJ0SW5kZXggPSB0aGlzLnByb3BzLnN0YXJ0SW5kZXg7XG4gICAgICAgIHZhciByZW5kZXJDb3VudCA9IHRoaXMuX2dldFJlbmRlckNvdW50KCk7XG4gICAgICAgIHZhciBlbmRJbmRleCA9IHN0YXJ0SW5kZXggKyByZW5kZXJDb3VudDtcbiAgICAgICAgdmFyIGFsbG93ZWRSZWN0ID0gdGhpcy5fYWxsb3dlZFJlY3Q7XG4gICAgICAgIHZhciBzY3JvbGxUb3AgPSAwO1xuICAgICAgICB2YXIgaXRlbXNQZXJQYWdlID0gMTtcbiAgICAgICAgZm9yICh2YXIgaXRlbUluZGV4ID0gc3RhcnRJbmRleDsgaXRlbUluZGV4IDwgZW5kSW5kZXg7IGl0ZW1JbmRleCArPSBpdGVtc1BlclBhZ2UpIHtcbiAgICAgICAgICAgIHZhciBwYWdlU3BlY2lmaWNhdGlvbiA9IHRoaXMuX2dldFBhZ2VTcGVjaWZpY2F0aW9uKGl0ZW1JbmRleCwgYWxsb3dlZFJlY3QpO1xuICAgICAgICAgICAgdmFyIHBhZ2VIZWlnaHQgPSBwYWdlU3BlY2lmaWNhdGlvbi5oZWlnaHQ7XG4gICAgICAgICAgICBpdGVtc1BlclBhZ2UgPSBwYWdlU3BlY2lmaWNhdGlvbi5pdGVtQ291bnQ7XG4gICAgICAgICAgICB2YXIgcmVxdWVzdGVkSW5kZXhJc0luUGFnZSA9IGl0ZW1JbmRleCA8PSBpbmRleCAmJiBpdGVtSW5kZXggKyBpdGVtc1BlclBhZ2UgPiBpbmRleDtcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0ZWRJbmRleElzSW5QYWdlKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSBmb3VuZCB0aGUgcGFnZS4gSWYgdGhlIHVzZXIgcHJvdmlkZWQgYSB3YXkgdG8gbWVhc3VyZSBhbiBpbmRpdmlkdWFsIGl0ZW0sIHdlIHdpbGwgdHJ5IHRvIHNjcm9sbCBpblxuICAgICAgICAgICAgICAgIC8vIGp1c3QgdGhlIGdpdmVuIGl0ZW0sIG90aGVyd2lzZSB3ZSdsbCBvbmx5IGJyaW5nIHRoZSBwYWdlIGludG8gdmlld1xuICAgICAgICAgICAgICAgIGlmIChtZWFzdXJlSXRlbSAmJiB0aGlzLl9zY3JvbGxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxSZWN0ID0gX21lYXN1cmVTY3JvbGxSZWN0KHRoaXMuX3Njcm9sbEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsV2luZG93ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiB0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbFRvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogdGhpcy5fc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3AgKyBzY3JvbGxSZWN0LmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQWRqdXN0IGZvciBhY3R1YWwgaXRlbSBwb3NpdGlvbiB3aXRoaW4gcGFnZVxuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbVBvc2l0aW9uV2l0aGluUGFnZSA9IGluZGV4IC0gaXRlbUluZGV4O1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpdGVtSW5kZXhJblBhZ2UgPSAwOyBpdGVtSW5kZXhJblBhZ2UgPCBpdGVtUG9zaXRpb25XaXRoaW5QYWdlOyArK2l0ZW1JbmRleEluUGFnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wICs9IG1lYXN1cmVJdGVtKGl0ZW1JbmRleCArIGl0ZW1JbmRleEluUGFnZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbEJvdHRvbSA9IHNjcm9sbFRvcCArIG1lYXN1cmVJdGVtKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgc2Nyb2xsVG9Nb2RlIGlzIHNldCB0byBzb21ldGhpbmcgb3RoZXIgdGhhbiBhdXRvLCB3ZSBhbHdheXMgd2FudCB0b1xuICAgICAgICAgICAgICAgICAgICAvLyBzY3JvbGwgdGhlIGl0ZW0gaW50byBhIHNwZWNpZmljIHBvc2l0aW9uIG9uIHRoZSBwYWdlLlxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHNjcm9sbFRvTW9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBTY3JvbGxUb01vZGUudG9wOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgU2Nyb2xsVG9Nb2RlLmJvdHRvbTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbFRvcCA9IHNjcm9sbEJvdHRvbSAtIHNjcm9sbFJlY3QuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgU2Nyb2xsVG9Nb2RlLmNlbnRlcjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbFRvcCA9IChzY3JvbGxUb3AgKyBzY3JvbGxCb3R0b20gLSBzY3JvbGxSZWN0LmhlaWdodCkgLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgU2Nyb2xsVG9Nb2RlLmF1dG86XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVtSXNGdWxseVZpc2libGUgPSBzY3JvbGxUb3AgPj0gc2Nyb2xsV2luZG93LnRvcCAmJiBzY3JvbGxCb3R0b20gPD0gc2Nyb2xsV2luZG93LmJvdHRvbTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1Jc0Z1bGx5VmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSXRlbSBpcyBhbHJlYWR5IHZpc2libGUsIGRvIG5vdGhpbmcuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW1Jc1BhcnRpYWxseUFib3ZlID0gc2Nyb2xsVG9wIDwgc2Nyb2xsV2luZG93LnRvcDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW1Jc1BhcnRpYWxseUJlbG93ID0gc2Nyb2xsQm90dG9tID4gc2Nyb2xsV2luZG93LmJvdHRvbTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1Jc1BhcnRpYWxseUFib3ZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgV2Ugd2lsbCBqdXN0IHNjcm9sbCB0byAnc2Nyb2xsVG9wJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gIC4tLS0tLS0uICAgLSBzY3JvbGxUb3BcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICB8SXRlbSAgfFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gIHwgLi0tLS18LS4gLSBzY3JvbGxXaW5kb3cudG9wXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgJy0tLS0tLScgfFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgfCAgICAgIHxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICctLS0tLS0nXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXRlbUlzUGFydGlhbGx5QmVsb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICBBZGp1c3Qgc2Nyb2xsVG9wIHBvc2l0aW9uIHRvIGp1c3QgYnJpbmcgaW4gdGhlIGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4tLS0tLS0uICAtIHNjcm9sbFRvcFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gfCAgICAgIHxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHwgLi0tLS0tLS5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICctfC0tLS0nIHwgLSBzY3JvbGxXaW5kb3cuYm90dG9tXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHwgSXRlbSB8XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICctLS0tLS0nIC0gc2Nyb2xsQm90dG9tXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb3AgPSBzY3JvbGxCb3R0b20gLSBzY3JvbGxSZWN0LmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzY3JvbGxUb3AgKz0gcGFnZUhlaWdodDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGlzdC5wcm90b3R5cGUuZ2V0U3RhcnRJdGVtSW5kZXhJblZpZXcgPSBmdW5jdGlvbiAobWVhc3VyZUl0ZW0pIHtcbiAgICAgICAgdmFyIHBhZ2VzID0gdGhpcy5zdGF0ZS5wYWdlcyB8fCBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBwYWdlc18xID0gcGFnZXM7IF9pIDwgcGFnZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBwYWdlID0gcGFnZXNfMVtfaV07XG4gICAgICAgICAgICB2YXIgaXNQYWdlVmlzaWJsZSA9ICFwYWdlLmlzU3BhY2VyICYmICh0aGlzLl9zY3JvbGxUb3AgfHwgMCkgPj0gcGFnZS50b3AgJiYgKHRoaXMuX3Njcm9sbFRvcCB8fCAwKSA8PSBwYWdlLnRvcCArIHBhZ2UuaGVpZ2h0O1xuICAgICAgICAgICAgaWYgKGlzUGFnZVZpc2libGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW1lYXN1cmVJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByb3dIZWlnaHQgPSBNYXRoLmZsb29yKHBhZ2UuaGVpZ2h0IC8gcGFnZS5pdGVtQ291bnQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFnZS5zdGFydEluZGV4ICsgTWF0aC5mbG9vcigodGhpcy5fc2Nyb2xsVG9wIC0gcGFnZS50b3ApIC8gcm93SGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b3RhbFJvd0hlaWdodCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGl0ZW1JbmRleCA9IHBhZ2Uuc3RhcnRJbmRleDsgaXRlbUluZGV4IDwgcGFnZS5zdGFydEluZGV4ICsgcGFnZS5pdGVtQ291bnQ7IGl0ZW1JbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcm93SGVpZ2h0ID0gbWVhc3VyZUl0ZW0oaXRlbUluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYWdlLnRvcCArIHRvdGFsUm93SGVpZ2h0IDw9IHRoaXMuX3Njcm9sbFRvcCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Njcm9sbFRvcCA8IHBhZ2UudG9wICsgdG90YWxSb3dIZWlnaHQgKyByb3dIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbUluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxSb3dIZWlnaHQgKz0gcm93SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH07XG4gICAgTGlzdC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUodGhpcy5fdXBkYXRlUGFnZXModGhpcy5wcm9wcywgdGhpcy5zdGF0ZSkpO1xuICAgICAgICB0aGlzLl9tZWFzdXJlVmVyc2lvbisrO1xuICAgICAgICB0aGlzLl9zY3JvbGxFbGVtZW50ID0gZmluZFNjcm9sbGFibGVQYXJlbnQodGhpcy5fcm9vdC5jdXJyZW50KTtcbiAgICAgICAgdGhpcy5fZXZlbnRzLm9uKHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuX29uQXN5bmNSZXNpemUpO1xuICAgICAgICBpZiAodGhpcy5fcm9vdC5jdXJyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9ldmVudHMub24odGhpcy5fcm9vdC5jdXJyZW50LCAnZm9jdXMnLCB0aGlzLl9vbkZvY3VzLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fc2Nyb2xsRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRzLm9uKHRoaXMuX3Njcm9sbEVsZW1lbnQsICdzY3JvbGwnLCB0aGlzLl9vblNjcm9sbCk7XG4gICAgICAgICAgICB0aGlzLl9ldmVudHMub24odGhpcy5fc2Nyb2xsRWxlbWVudCwgJ3Njcm9sbCcsIHRoaXMuX29uQXN5bmNTY3JvbGwpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBMaXN0LnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldmlvdXNQcm9wcywgcHJldmlvdXNTdGF0ZSkge1xuICAgICAgICB2YXIgZmluYWxQcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgIHZhciBmaW5hbFN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUucGFnZXNWZXJzaW9uICE9PSBwcmV2aW91c1N0YXRlLnBhZ2VzVmVyc2lvbikge1xuICAgICAgICAgICAgLy8gSWYgd2Ugd2VyZW4ndCBwcm92aWRlZCB3aXRoIHRoZSBwYWdlIGhlaWdodCwgbWVhc3VyZSB0aGUgcGFnZXNcbiAgICAgICAgICAgIGlmICghZmluYWxQcm9wcy5nZXRQYWdlSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgbWVhc3VyZWQgdmVyc2lvbiBpcyBpbnZhbGlkIHNpbmNlIHdlJ3ZlIHVwZGF0ZWQgdGhlIERPTVxuICAgICAgICAgICAgICAgIHZhciBoZWlnaHRzQ2hhbmdlZCA9IHRoaXMuX3VwZGF0ZVBhZ2VNZWFzdXJlbWVudHMoZmluYWxTdGF0ZS5wYWdlcyk7XG4gICAgICAgICAgICAgICAgLy8gT24gZmlyc3QgcmVuZGVyLCB3ZSBzaG91bGQgcmUtbWVhc3VyZSBzbyB0aGF0IHdlIGRvbid0IGdldCBhIHZpc3VhbCBnbGl0Y2guXG4gICAgICAgICAgICAgICAgaWYgKGhlaWdodHNDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21hdGVyaWFsaXplZFJlY3QgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2hhc0NvbXBsZXRlZEZpcnN0UmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYXNDb21wbGV0ZWRGaXJzdFJlbmRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHRoaXMuX3VwZGF0ZVBhZ2VzKGZpbmFsUHJvcHMsIGZpbmFsU3RhdGUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29uQXN5bmNTY3JvbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRW5xdWV1ZSBhbiBpZGxlIGJ1bXAuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uQXN5bmNJZGxlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRW5xdWV1ZSBhbiBpZGxlIGJ1bXBcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkFzeW5jSWRsZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTm90aWZ5IHRoZSBjYWxsZXIgdGhhdCByZW5kZXJpbmcgdGhlIG5ldyBwYWdlcyBoYXMgY29tcGxldGVkXG4gICAgICAgICAgICBpZiAoZmluYWxQcm9wcy5vblBhZ2VzVXBkYXRlZCkge1xuICAgICAgICAgICAgICAgIGZpbmFsUHJvcHMub25QYWdlc1VwZGF0ZWQoZmluYWxTdGF0ZS5wYWdlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExpc3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9hc3luYy5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuX2V2ZW50cy5kaXNwb3NlKCk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9zY3JvbGxFbGVtZW50O1xuICAgIH07XG4gICAgTGlzdC5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gKG5ld1Byb3BzLCBuZXdTdGF0ZSkge1xuICAgICAgICB2YXIgb2xkUGFnZXMgPSB0aGlzLnN0YXRlLnBhZ2VzO1xuICAgICAgICB2YXIgbmV3UGFnZXMgPSBuZXdTdGF0ZS5wYWdlcztcbiAgICAgICAgdmFyIHNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICAvLyBVcGRhdGUgaWYgdGhlIHBhZ2Ugc3RvcHMgc2Nyb2xsaW5nXG4gICAgICAgIGlmICghbmV3U3RhdGUuaXNTY3JvbGxpbmcgJiYgdGhpcy5zdGF0ZS5pc1Njcm9sbGluZykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld1Byb3BzLnZlcnNpb24gIT09IHRoaXMucHJvcHMudmVyc2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld1Byb3BzLml0ZW1zID09PSB0aGlzLnByb3BzLml0ZW1zICYmIG9sZFBhZ2VzLmxlbmd0aCA9PT0gbmV3UGFnZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9sZFBhZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9sZFBhZ2UgPSBvbGRQYWdlc1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgbmV3UGFnZSA9IG5ld1BhZ2VzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChvbGRQYWdlLmtleSAhPT0gbmV3UGFnZS5rZXkgfHwgb2xkUGFnZS5pdGVtQ291bnQgIT09IG5ld1BhZ2UuaXRlbUNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNob3VsZENvbXBvbmVudFVwZGF0ZTtcbiAgICB9O1xuICAgIExpc3QucHJvdG90eXBlLmZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9pbnZhbGlkYXRlUGFnZUNhY2hlKCk7XG4gICAgICAgIC8vIEVuc3VyZSB0aGF0IHdoZW4gdGhlIGxpc3QgaXMgZm9yY2UgdXBkYXRlZCB3ZSB1cGRhdGUgdGhlIHBhZ2VzIGZpcnN0IGJlZm9yZSByZW5kZXIuXG4gICAgICAgIHRoaXMuX3VwZGF0ZVJlbmRlclJlY3RzKHRoaXMucHJvcHMsIHRoaXMuc3RhdGUsIHRydWUpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHRoaXMuX3VwZGF0ZVBhZ2VzKHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpKTtcbiAgICAgICAgdGhpcy5fbWVhc3VyZVZlcnNpb24rKztcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JjZVVwZGF0ZS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IGhlaWdodCB0aGUgbGlzdCBhbmQgaXQncyBwYWdlcy5cbiAgICAgKi9cbiAgICBMaXN0LnByb3RvdHlwZS5nZXRUb3RhbExpc3RIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdXJmYWNlUmVjdC5oZWlnaHQ7XG4gICAgfTtcbiAgICBMaXN0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSwgX2IgPSBfYS5yb2xlLCByb2xlID0gX2IgPT09IHZvaWQgMCA/ICdsaXN0JyA6IF9iLCBvblJlbmRlclN1cmZhY2UgPSBfYS5vblJlbmRlclN1cmZhY2UsIG9uUmVuZGVyUm9vdCA9IF9hLm9uUmVuZGVyUm9vdDtcbiAgICAgICAgdmFyIF9jID0gdGhpcy5zdGF0ZS5wYWdlcywgcGFnZXMgPSBfYyA9PT0gdm9pZCAwID8gW10gOiBfYztcbiAgICAgICAgdmFyIHBhZ2VFbGVtZW50cyA9IFtdO1xuICAgICAgICB2YXIgZGl2UHJvcHMgPSBnZXROYXRpdmVQcm9wcyh0aGlzLnByb3BzLCBkaXZQcm9wZXJ0aWVzKTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBwYWdlc18yID0gcGFnZXM7IF9pIDwgcGFnZXNfMi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBwYWdlID0gcGFnZXNfMltfaV07XG4gICAgICAgICAgICBwYWdlRWxlbWVudHMucHVzaCh0aGlzLl9yZW5kZXJQYWdlKHBhZ2UpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZmluYWxPblJlbmRlclN1cmZhY2UgPSBvblJlbmRlclN1cmZhY2VcbiAgICAgICAgICAgID8gY29tcG9zZVJlbmRlckZ1bmN0aW9uKG9uUmVuZGVyU3VyZmFjZSwgdGhpcy5fb25SZW5kZXJTdXJmYWNlKVxuICAgICAgICAgICAgOiB0aGlzLl9vblJlbmRlclN1cmZhY2U7XG4gICAgICAgIHZhciBmaW5hbE9uUmVuZGVyUm9vdCA9IG9uUmVuZGVyUm9vdFxuICAgICAgICAgICAgPyBjb21wb3NlUmVuZGVyRnVuY3Rpb24ob25SZW5kZXJSb290LCB0aGlzLl9vblJlbmRlclJvb3QpXG4gICAgICAgICAgICA6IHRoaXMuX29uUmVuZGVyUm9vdDtcbiAgICAgICAgcmV0dXJuIGZpbmFsT25SZW5kZXJSb290KHtcbiAgICAgICAgICAgIHJvb3RSZWY6IHRoaXMuX3Jvb3QsXG4gICAgICAgICAgICBwYWdlczogcGFnZXMsXG4gICAgICAgICAgICBzdXJmYWNlRWxlbWVudDogZmluYWxPblJlbmRlclN1cmZhY2Uoe1xuICAgICAgICAgICAgICAgIHN1cmZhY2VSZWY6IHRoaXMuX3N1cmZhY2UsXG4gICAgICAgICAgICAgICAgcGFnZXM6IHBhZ2VzLFxuICAgICAgICAgICAgICAgIHBhZ2VFbGVtZW50czogcGFnZUVsZW1lbnRzLFxuICAgICAgICAgICAgICAgIGRpdlByb3BzOiB7XG4gICAgICAgICAgICAgICAgICAgIHJvbGU6ICdwcmVzZW50YXRpb24nLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdtcy1MaXN0LXN1cmZhY2UnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGRpdlByb3BzOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZGl2UHJvcHMpLCB7IGNsYXNzTmFtZTogY3NzKCdtcy1MaXN0JywgY2xhc3NOYW1lKSwgcm9sZTogcGFnZUVsZW1lbnRzLmxlbmd0aCA+IDAgPyByb2xlIDogdW5kZWZpbmVkIH0pLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIExpc3QucHJvdG90eXBlLl9zaG91bGRWaXJ0dWFsaXplID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7IHByb3BzID0gdGhpcy5wcm9wczsgfVxuICAgICAgICB2YXIgb25TaG91bGRWaXJ0dWFsaXplID0gcHJvcHMub25TaG91bGRWaXJ0dWFsaXplO1xuICAgICAgICByZXR1cm4gIW9uU2hvdWxkVmlydHVhbGl6ZSB8fCBvblNob3VsZFZpcnR1YWxpemUocHJvcHMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogd2hlbiBwcm9wcy5pdGVtcyBjaGFuZ2Ugb3IgZm9yY2VVcGRhdGUgY2FsbGVkLCB0aHJvdyBhd2F5IGNhY2hlZCBwYWdlc1xuICAgICAqL1xuICAgIExpc3QucHJvdG90eXBlLl9pbnZhbGlkYXRlUGFnZUNhY2hlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9wYWdlQ2FjaGUgPSB7fTtcbiAgICB9O1xuICAgIExpc3QucHJvdG90eXBlLl9yZW5kZXJQYWdlID0gZnVuY3Rpb24gKHBhZ2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHVzZVBhZ2VDYWNoZSA9IHRoaXMucHJvcHMudXNlUGFnZUNhY2hlO1xuICAgICAgICB2YXIgY2FjaGVkUGFnZTtcbiAgICAgICAgLy8gaWYgdXNlUGFnZUNhY2hlIGlzIHNldCBhbmQgY2FjaGVkIHBhZ2UgZWxlbWVudCBjYW4gYmUgZm91bmQsIGp1c3QgcmV0dXJuIGNhY2hlZCBwYWdlXG4gICAgICAgIGlmICh1c2VQYWdlQ2FjaGUpIHtcbiAgICAgICAgICAgIGNhY2hlZFBhZ2UgPSB0aGlzLl9wYWdlQ2FjaGVbcGFnZS5rZXldO1xuICAgICAgICAgICAgaWYgKGNhY2hlZFBhZ2UgJiYgY2FjaGVkUGFnZS5wYWdlRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZWRQYWdlLnBhZ2VFbGVtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBwYWdlU3R5bGUgPSB0aGlzLl9nZXRQYWdlU3R5bGUocGFnZSk7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMub25SZW5kZXJQYWdlLCBvblJlbmRlclBhZ2UgPSBfYSA9PT0gdm9pZCAwID8gdGhpcy5fb25SZW5kZXJQYWdlIDogX2E7XG4gICAgICAgIHZhciBwYWdlRWxlbWVudCA9IG9uUmVuZGVyUGFnZSh7XG4gICAgICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnbXMtTGlzdC1wYWdlJyxcbiAgICAgICAgICAgIGtleTogcGFnZS5rZXksXG4gICAgICAgICAgICByZWY6IGZ1bmN0aW9uIChuZXdSZWYpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fcGFnZVJlZnNbcGFnZS5rZXldID0gbmV3UmVmO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0eWxlOiBwYWdlU3R5bGUsXG4gICAgICAgICAgICByb2xlOiAncHJlc2VudGF0aW9uJyxcbiAgICAgICAgfSwgdGhpcy5fb25SZW5kZXJQYWdlKTtcbiAgICAgICAgLy8gY2FjaGUgdGhlIGZpcnN0IHBhZ2UgZm9yIG5vdyBzaW5jZSBpdCBpcyByZS1yZW5kZXJlZCBhIGxvdCB0aW1lcyB1bm5lY2Vzc2FyaWx5LlxuICAgICAgICAvLyB0b2RvOiBhIG1vcmUgYWdncmVzaXZlIGNhY2hpbmcgbWVjaGFuaXNtIGlzIHRvIGNhY2hlIHBhZ2VzIGNvbnN0YWluaW5nIHRoZSBpdGVtcyBub3QgY2hhbmdlZC5cbiAgICAgICAgLy8gbm93IHdlIHJlLXJlbmRlciBwYWdlcyB0b28gZnJlcXVlbnRseSwgZm9yIGV4YW1wbGUsIHByb3BzLml0ZW1zIGluY3JlYXNlZCBmcm9tIDMwIHRvIDYwLCBhbHRob3VnaCB0aGVcbiAgICAgICAgLy8gZmlyc3QgMzAgaXRlbXMgZGlkIG5vdCBjaGFuZ2UsIHdlIHN0aWxsIHJlLXJlbmRlcmVkIGFsbCBvZiB0aGVtIGluIHRoaXMgcHJvcHMuaXRlbXMgY2hhbmdlLlxuICAgICAgICBpZiAodXNlUGFnZUNhY2hlICYmIHBhZ2Uuc3RhcnRJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5fcGFnZUNhY2hlW3BhZ2Uua2V5XSA9IHtcbiAgICAgICAgICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICAgICAgICAgIHBhZ2VFbGVtZW50OiBwYWdlRWxlbWVudCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhZ2VFbGVtZW50O1xuICAgIH07XG4gICAgLyoqIEdlbmVyYXRlIHRoZSBzdHlsZSBvYmplY3QgZm9yIHRoZSBwYWdlLiAqL1xuICAgIExpc3QucHJvdG90eXBlLl9nZXRQYWdlU3R5bGUgPSBmdW5jdGlvbiAocGFnZSkge1xuICAgICAgICB2YXIgZ2V0UGFnZVN0eWxlID0gdGhpcy5wcm9wcy5nZXRQYWdlU3R5bGU7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgKGdldFBhZ2VTdHlsZSA/IGdldFBhZ2VTdHlsZShwYWdlKSA6IHt9KSksICghcGFnZS5pdGVtc1xuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBwYWdlLmhlaWdodCxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDoge30pKTtcbiAgICB9O1xuICAgIC8qKiBUcmFjayB0aGUgbGFzdCBpdGVtIGluZGV4IGZvY3VzZWQgc28gdGhhdCB3ZSBlbnN1cmUgd2Uga2VlcCBpdCByZW5kZXJlZC4gKi9cbiAgICBMaXN0LnByb3RvdHlwZS5fb25Gb2N1cyA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gZXYudGFyZ2V0O1xuICAgICAgICB3aGlsZSAodGFyZ2V0ICE9PSB0aGlzLl9zdXJmYWNlLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHZhciBpbmRleFN0cmluZyA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbGlzdC1pbmRleCcpO1xuICAgICAgICAgICAgaWYgKGluZGV4U3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZm9jdXNlZEluZGV4ID0gTnVtYmVyKGluZGV4U3RyaW5nKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRhcmdldCA9IGdldFBhcmVudCh0YXJnZXQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDYWxsZWQgc3luY2hyb25vdXNseSB0byByZXNldCB0aGUgcmVxdWlyZWQgcmVuZGVyIHJhbmdlIHRvIDAgb24gc2Nyb2xsaW5nLiBBZnRlciBhc3luYyBzY3JvbGwgaGFzIGV4ZWN1dGVkLFxuICAgICAqIHdlIHdpbGwgY2FsbCBvbkFzeW5jSWRsZSB3aGljaCB3aWxsIHJlc2V0IGl0IGJhY2sgdG8gaXQncyBjb3JyZWN0IHZhbHVlLlxuICAgICAqL1xuICAgIExpc3QucHJvdG90eXBlLl9vblNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmlzU2Nyb2xsaW5nICYmICF0aGlzLnByb3BzLmlnbm9yZVNjcm9sbGluZ1N0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNTY3JvbGxpbmc6IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVzZXRSZXF1aXJlZFdpbmRvd3MoKTtcbiAgICAgICAgdGhpcy5fb25TY3JvbGxpbmdEb25lKCk7XG4gICAgfTtcbiAgICBMaXN0LnByb3RvdHlwZS5fcmVzZXRSZXF1aXJlZFdpbmRvd3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3JlcXVpcmVkV2luZG93c0FoZWFkID0gMDtcbiAgICAgICAgdGhpcy5fcmVxdWlyZWRXaW5kb3dzQmVoaW5kID0gMDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERlYm91bmNlZCBtZXRob2QgdG8gYXN5bmNocm9ub3VzbHkgdXBkYXRlIHRoZSB2aXNpYmxlIHJlZ2lvbiBvbiBhIHNjcm9sbCBldmVudC5cbiAgICAgKi9cbiAgICBMaXN0LnByb3RvdHlwZS5fb25Bc3luY1Njcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlUmVuZGVyUmVjdHModGhpcy5wcm9wcywgdGhpcy5zdGF0ZSk7XG4gICAgICAgIC8vIE9ubHkgdXBkYXRlIHBhZ2VzIHdoZW4gdGhlIHZpc2libGUgcmVjdCBmYWxscyBvdXRzaWRlIG9mIHRoZSBtYXRlcmlhbGl6ZWQgcmVjdC5cbiAgICAgICAgaWYgKCF0aGlzLl9tYXRlcmlhbGl6ZWRSZWN0IHx8ICFfaXNDb250YWluZWRXaXRoaW4odGhpcy5fcmVxdWlyZWRSZWN0LCB0aGlzLl9tYXRlcmlhbGl6ZWRSZWN0KSkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh0aGlzLl91cGRhdGVQYWdlcyh0aGlzLnByb3BzLCB0aGlzLnN0YXRlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygncmVxdWlyZWRSZWN0IGNvbnRhaW5lZCBpbiBtYXRlcmlhbGl6ZWQnLCB0aGlzLl9yZXF1aXJlZFJlY3QsIHRoaXMuX21hdGVyaWFsaXplZFJlY3QpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIGFuIGFzeW5jIGRlYm91bmNlZCBtZXRob2QgdGhhdCB3aWxsIHRyeSBhbmQgaW5jcmVtZW50IHRoZSB3aW5kb3dzIHdlIHJlbmRlci4gSWYgd2UgY2FuIGluY3JlbWVudFxuICAgICAqIGVpdGhlciwgd2UgaW5jcmVhc2UgdGhlIGFtb3VudCB3ZSByZW5kZXIgYW5kIHJlLWV2YWx1YXRlLlxuICAgICAqL1xuICAgIExpc3QucHJvdG90eXBlLl9vbkFzeW5jSWRsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgcmVuZGVyZWRXaW5kb3dzQWhlYWQgPSBfYS5yZW5kZXJlZFdpbmRvd3NBaGVhZCwgcmVuZGVyZWRXaW5kb3dzQmVoaW5kID0gX2EucmVuZGVyZWRXaW5kb3dzQmVoaW5kO1xuICAgICAgICB2YXIgX2IgPSB0aGlzLCByZXF1aXJlZFdpbmRvd3NBaGVhZCA9IF9iLl9yZXF1aXJlZFdpbmRvd3NBaGVhZCwgcmVxdWlyZWRXaW5kb3dzQmVoaW5kID0gX2IuX3JlcXVpcmVkV2luZG93c0JlaGluZDtcbiAgICAgICAgdmFyIHdpbmRvd3NBaGVhZCA9IE1hdGgubWluKHJlbmRlcmVkV2luZG93c0FoZWFkLCByZXF1aXJlZFdpbmRvd3NBaGVhZCArIDEpO1xuICAgICAgICB2YXIgd2luZG93c0JlaGluZCA9IE1hdGgubWluKHJlbmRlcmVkV2luZG93c0JlaGluZCwgcmVxdWlyZWRXaW5kb3dzQmVoaW5kICsgMSk7XG4gICAgICAgIGlmICh3aW5kb3dzQWhlYWQgIT09IHJlcXVpcmVkV2luZG93c0FoZWFkIHx8IHdpbmRvd3NCZWhpbmQgIT09IHJlcXVpcmVkV2luZG93c0JlaGluZCkge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2lkbGluZycsIHdpbmRvd3NCZWhpbmQsIHdpbmRvd3NBaGVhZCk7XG4gICAgICAgICAgICB0aGlzLl9yZXF1aXJlZFdpbmRvd3NBaGVhZCA9IHdpbmRvd3NBaGVhZDtcbiAgICAgICAgICAgIHRoaXMuX3JlcXVpcmVkV2luZG93c0JlaGluZCA9IHdpbmRvd3NCZWhpbmQ7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVSZW5kZXJSZWN0cyh0aGlzLnByb3BzLCB0aGlzLnN0YXRlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUodGhpcy5fdXBkYXRlUGFnZXModGhpcy5wcm9wcywgdGhpcy5zdGF0ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZW5kZXJlZFdpbmRvd3NBaGVhZCA+IHdpbmRvd3NBaGVhZCB8fCByZW5kZXJlZFdpbmRvd3NCZWhpbmQgPiB3aW5kb3dzQmVoaW5kKSB7XG4gICAgICAgICAgICAvLyBBc3luYyBpbmNyZW1lbnQgb24gbmV4dCB0aWNrLlxuICAgICAgICAgICAgdGhpcy5fb25Bc3luY0lkbGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBsaXN0IGlzIGRvbmUgc2Nyb2xsaW5nLlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgZGVib3VuY2VkLlxuICAgICAqL1xuICAgIExpc3QucHJvdG90eXBlLl9vblNjcm9sbGluZ0RvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5wcm9wcy5pZ25vcmVTY3JvbGxpbmdTdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzU2Nyb2xsaW5nOiBmYWxzZSB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGlzdC5wcm90b3R5cGUuX29uQXN5bmNSZXNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICB9O1xuICAgIExpc3QucHJvdG90eXBlLl91cGRhdGVQYWdlcyA9IGZ1bmN0aW9uIChuZXh0UHJvcHMsIHByZXZpb3VzU3RhdGUpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3VwZGF0aW5nIHBhZ2VzJyk7XG4gICAgICAgIGlmICghdGhpcy5fcmVxdWlyZWRSZWN0KSB7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVSZW5kZXJSZWN0cyhuZXh0UHJvcHMsIHByZXZpb3VzU3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuZXdMaXN0U3RhdGUgPSB0aGlzLl9idWlsZFBhZ2VzKG5leHRQcm9wcywgcHJldmlvdXNTdGF0ZSk7XG4gICAgICAgIHZhciBvbGRMaXN0UGFnZXMgPSBwcmV2aW91c1N0YXRlLnBhZ2VzO1xuICAgICAgICB0aGlzLl9ub3RpZnlQYWdlQ2hhbmdlcyhvbGRMaXN0UGFnZXMsIG5ld0xpc3RTdGF0ZS5wYWdlcywgdGhpcy5wcm9wcyk7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcHJldmlvdXNTdGF0ZSksIG5ld0xpc3RTdGF0ZSksIHsgcGFnZXNWZXJzaW9uOiB7fSB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE5vdGlmeSBjb25zdW1lcnMgdGhhdCB0aGUgcmVuZGVyZWQgcGFnZXMgaGF2ZSBjaGFuZ2VkXG4gICAgICogQHBhcmFtIG9sZFBhZ2VzIC0gVGhlIG9sZCBwYWdlc1xuICAgICAqIEBwYXJhbSBuZXdQYWdlcyAtIFRoZSBuZXcgcGFnZXNcbiAgICAgKiBAcGFyYW0gcHJvcHMgLSBUaGUgcHJvcHMgdG8gdXNlXG4gICAgICovXG4gICAgTGlzdC5wcm90b3R5cGUuX25vdGlmeVBhZ2VDaGFuZ2VzID0gZnVuY3Rpb24gKG9sZFBhZ2VzLCBuZXdQYWdlcywgcHJvcHMpIHtcbiAgICAgICAgdmFyIG9uUGFnZUFkZGVkID0gcHJvcHMub25QYWdlQWRkZWQsIG9uUGFnZVJlbW92ZWQgPSBwcm9wcy5vblBhZ2VSZW1vdmVkO1xuICAgICAgICBpZiAob25QYWdlQWRkZWQgfHwgb25QYWdlUmVtb3ZlZCkge1xuICAgICAgICAgICAgdmFyIHJlbmRlcmVkSW5kZXhlcyA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBvbGRQYWdlc18xID0gb2xkUGFnZXM7IF9pIDwgb2xkUGFnZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFnZSA9IG9sZFBhZ2VzXzFbX2ldO1xuICAgICAgICAgICAgICAgIGlmIChwYWdlLml0ZW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcmVkSW5kZXhlc1twYWdlLnN0YXJ0SW5kZXhdID0gcGFnZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIG5ld1BhZ2VzXzEgPSBuZXdQYWdlczsgX2EgPCBuZXdQYWdlc18xLmxlbmd0aDsgX2ErKykge1xuICAgICAgICAgICAgICAgIHZhciBwYWdlID0gbmV3UGFnZXNfMVtfYV07XG4gICAgICAgICAgICAgICAgaWYgKHBhZ2UuaXRlbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZW5kZXJlZEluZGV4ZXNbcGFnZS5zdGFydEluZGV4XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25QYWdlQWRkZWQocGFnZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVuZGVyZWRJbmRleGVzW3BhZ2Uuc3RhcnRJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBpbmRleCBpbiByZW5kZXJlZEluZGV4ZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVuZGVyZWRJbmRleGVzLmhhc093blByb3BlcnR5KGluZGV4KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vblBhZ2VSZW1vdmVkKHJlbmRlcmVkSW5kZXhlc1tpbmRleF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgTGlzdC5wcm90b3R5cGUuX3VwZGF0ZVBhZ2VNZWFzdXJlbWVudHMgPSBmdW5jdGlvbiAocGFnZXMpIHtcbiAgICAgICAgdmFyIGhlaWdodENoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgLy8gd2hlbiBub3QgaW4gdmlydHVhbGl6ZSBtb2RlLCB3ZSByZW5kZXIgYWxsIHRoZSBpdGVtcyB3aXRob3V0IHBhZ2UgbWVhc3VyZW1lbnRcbiAgICAgICAgaWYgKCF0aGlzLl9zaG91bGRWaXJ0dWFsaXplKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBoZWlnaHRDaGFuZ2VkO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwYWdlID0gcGFnZXNbaV07XG4gICAgICAgICAgICBpZiAocGFnZS5pdGVtcykge1xuICAgICAgICAgICAgICAgIGhlaWdodENoYW5nZWQgPSB0aGlzLl9tZWFzdXJlUGFnZShwYWdlKSB8fCBoZWlnaHRDaGFuZ2VkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoZWlnaHRDaGFuZ2VkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2l2ZW4gYSBwYWdlLCBtZWFzdXJlIGl0cyBkaW1lbnNpb25zLCB1cGRhdGUgY2FjaGUuXG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgaGVpZ2h0IGhhcyBjaGFuZ2VkLlxuICAgICAqL1xuICAgIExpc3QucHJvdG90eXBlLl9tZWFzdXJlUGFnZSA9IGZ1bmN0aW9uIChwYWdlKSB7XG4gICAgICAgIHZhciBoYXNDaGFuZ2VkSGVpZ2h0ID0gZmFsc2U7XG4gICAgICAgIHZhciBwYWdlRWxlbWVudCA9IHRoaXMuX3BhZ2VSZWZzW3BhZ2Uua2V5XTtcbiAgICAgICAgdmFyIGNhY2hlZEhlaWdodCA9IHRoaXMuX2NhY2hlZFBhZ2VIZWlnaHRzW3BhZ2Uuc3RhcnRJbmRleF07XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCcgICAqIG1lYXN1cmUgYXR0ZW1wdCcsIHBhZ2Uuc3RhcnRJbmRleCwgY2FjaGVkSGVpZ2h0KTtcbiAgICAgICAgaWYgKHBhZ2VFbGVtZW50ICYmXG4gICAgICAgICAgICB0aGlzLl9zaG91bGRWaXJ0dWFsaXplKCkgJiZcbiAgICAgICAgICAgICghY2FjaGVkSGVpZ2h0IHx8IGNhY2hlZEhlaWdodC5tZWFzdXJlVmVyc2lvbiAhPT0gdGhpcy5fbWVhc3VyZVZlcnNpb24pKSB7XG4gICAgICAgICAgICB2YXIgbmV3Q2xpZW50UmVjdCA9IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogcGFnZUVsZW1lbnQuY2xpZW50V2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBwYWdlRWxlbWVudC5jbGllbnRIZWlnaHQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKG5ld0NsaWVudFJlY3QuaGVpZ2h0IHx8IG5ld0NsaWVudFJlY3Qud2lkdGgpIHtcbiAgICAgICAgICAgICAgICBoYXNDaGFuZ2VkSGVpZ2h0ID0gcGFnZS5oZWlnaHQgIT09IG5ld0NsaWVudFJlY3QuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUud2FybignICoqKiBleHBlbnNpdmUgcGFnZSBtZWFzdXJlJywgcGFnZS5zdGFydEluZGV4LCBwYWdlLmhlaWdodCwgbmV3Q2xpZW50UmVjdC5oZWlnaHQpO1xuICAgICAgICAgICAgICAgIHBhZ2UuaGVpZ2h0ID0gbmV3Q2xpZW50UmVjdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVkUGFnZUhlaWdodHNbcGFnZS5zdGFydEluZGV4XSA9IHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBuZXdDbGllbnRSZWN0LmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgbWVhc3VyZVZlcnNpb246IHRoaXMuX21lYXN1cmVWZXJzaW9uLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5fZXN0aW1hdGVkUGFnZUhlaWdodCA9IE1hdGgucm91bmQoKHRoaXMuX2VzdGltYXRlZFBhZ2VIZWlnaHQgKiB0aGlzLl90b3RhbEVzdGltYXRlcyArIG5ld0NsaWVudFJlY3QuaGVpZ2h0KSAvICh0aGlzLl90b3RhbEVzdGltYXRlcyArIDEpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90b3RhbEVzdGltYXRlcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoYXNDaGFuZ2VkSGVpZ2h0O1xuICAgIH07XG4gICAgLyoqIENhbGxlZCB3aGVuIGEgcGFnZSBoYXMgYmVlbiBhZGRlZCB0byB0aGUgRE9NLiAqL1xuICAgIExpc3QucHJvdG90eXBlLl9vblBhZ2VBZGRlZCA9IGZ1bmN0aW9uIChwYWdlKSB7XG4gICAgICAgIHZhciBvblBhZ2VBZGRlZCA9IHRoaXMucHJvcHMub25QYWdlQWRkZWQ7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdwYWdlIGFkZGVkJywgcGFnZS5zdGFydEluZGV4LCB0aGlzLnN0YXRlLnBhZ2VzLm1hcChwYWdlID0+IHBhZ2Uua2V5KS5qb2luKCcsICcpKTtcbiAgICAgICAgaWYgKG9uUGFnZUFkZGVkKSB7XG4gICAgICAgICAgICBvblBhZ2VBZGRlZChwYWdlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqIENhbGxlZCB3aGVuIGEgcGFnZSBoYXMgYmVlbiByZW1vdmVkIGZyb20gdGhlIERPTS4gKi9cbiAgICBMaXN0LnByb3RvdHlwZS5fb25QYWdlUmVtb3ZlZCA9IGZ1bmN0aW9uIChwYWdlKSB7XG4gICAgICAgIHZhciBvblBhZ2VSZW1vdmVkID0gdGhpcy5wcm9wcy5vblBhZ2VSZW1vdmVkO1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnICAtLS0gcGFnZSByZW1vdmVkJywgcGFnZS5zdGFydEluZGV4LCB0aGlzLnN0YXRlLnBhZ2VzLm1hcChwYWdlID0+IHBhZ2Uua2V5KS5qb2luKCcsICcpKTtcbiAgICAgICAgaWYgKG9uUGFnZVJlbW92ZWQpIHtcbiAgICAgICAgICAgIG9uUGFnZVJlbW92ZWQocGFnZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKiBCdWlsZCB1cCB0aGUgcGFnZXMgdGhhdCBzaG91bGQgYmUgcmVuZGVyZWQuICovXG4gICAgTGlzdC5wcm90b3R5cGUuX2J1aWxkUGFnZXMgPSBmdW5jdGlvbiAocHJvcHMsIHN0YXRlKSB7XG4gICAgICAgIHZhciByZW5kZXJDb3VudCA9IHByb3BzLnJlbmRlckNvdW50O1xuICAgICAgICB2YXIgaXRlbXMgPSBwcm9wcy5pdGVtcywgc3RhcnRJbmRleCA9IHByb3BzLnN0YXJ0SW5kZXgsIGdldFBhZ2VIZWlnaHQgPSBwcm9wcy5nZXRQYWdlSGVpZ2h0O1xuICAgICAgICByZW5kZXJDb3VudCA9IHRoaXMuX2dldFJlbmRlckNvdW50KHByb3BzKTtcbiAgICAgICAgdmFyIG1hdGVyaWFsaXplZFJlY3QgPSBfX2Fzc2lnbih7fSwgRU1QVFlfUkVDVCk7XG4gICAgICAgIHZhciBwYWdlcyA9IFtdO1xuICAgICAgICB2YXIgaXRlbXNQZXJQYWdlID0gMTtcbiAgICAgICAgdmFyIHBhZ2VUb3AgPSAwO1xuICAgICAgICB2YXIgY3VycmVudFNwYWNlciA9IG51bGw7XG4gICAgICAgIHZhciBmb2N1c2VkSW5kZXggPSB0aGlzLl9mb2N1c2VkSW5kZXg7XG4gICAgICAgIHZhciBlbmRJbmRleCA9IHN0YXJ0SW5kZXggKyByZW5kZXJDb3VudDtcbiAgICAgICAgdmFyIHNob3VsZFZpcnR1YWxpemUgPSB0aGlzLl9zaG91bGRWaXJ0dWFsaXplKHByb3BzKTtcbiAgICAgICAgLy8gRmlyc3QgcmVuZGVyIGlzIHZlcnkgaW1wb3J0YW50IHRvIHRyYWNrOyB3aGVuIHdlIHJlbmRlciBjZWxscywgd2UgaGF2ZSBubyBpZGVhIG9mIGVzdGltYXRlZCBwYWdlIGhlaWdodC5cbiAgICAgICAgLy8gU28gd2Ugc2hvdWxkIGRlZmF1bHQgdG8gcmVuZGVyaW5nIG9ubHkgdGhlIGZpcnN0IHBhZ2Ugc28gdGhhdCB3ZSBjYW4gZ2V0IGluZm9ybWF0aW9uLlxuICAgICAgICAvLyBIb3dldmVyIGlmIHRoZSB1c2VyIHByb3ZpZGVzIGEgbWVhc3VyZSBmdW5jdGlvbiwgbGV0J3MganVzdCBhc3N1bWUgdGhleSBrbm93IHRoZSByaWdodCBoZWlnaHRzLlxuICAgICAgICB2YXIgaXNGaXJzdFJlbmRlciA9IHRoaXMuX2VzdGltYXRlZFBhZ2VIZWlnaHQgPT09IDAgJiYgIWdldFBhZ2VIZWlnaHQ7XG4gICAgICAgIHZhciBhbGxvd2VkUmVjdCA9IHRoaXMuX2FsbG93ZWRSZWN0O1xuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpdGVtSW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBwYWdlU3BlY2lmaWNhdGlvbiA9IHRoaXNfMS5fZ2V0UGFnZVNwZWNpZmljYXRpb24oaXRlbUluZGV4LCBhbGxvd2VkUmVjdCk7XG4gICAgICAgICAgICB2YXIgcGFnZUhlaWdodCA9IHBhZ2VTcGVjaWZpY2F0aW9uLmhlaWdodDtcbiAgICAgICAgICAgIHZhciBwYWdlRGF0YSA9IHBhZ2VTcGVjaWZpY2F0aW9uLmRhdGE7XG4gICAgICAgICAgICB2YXIga2V5ID0gcGFnZVNwZWNpZmljYXRpb24ua2V5O1xuICAgICAgICAgICAgaXRlbXNQZXJQYWdlID0gcGFnZVNwZWNpZmljYXRpb24uaXRlbUNvdW50O1xuICAgICAgICAgICAgdmFyIHBhZ2VCb3R0b20gPSBwYWdlVG9wICsgcGFnZUhlaWdodCAtIDE7XG4gICAgICAgICAgICB2YXIgaXNQYWdlUmVuZGVyZWQgPSBmaW5kSW5kZXgoc3RhdGUucGFnZXMsIGZ1bmN0aW9uIChwYWdlKSB7IHJldHVybiAhIXBhZ2UuaXRlbXMgJiYgcGFnZS5zdGFydEluZGV4ID09PSBpdGVtSW5kZXg7IH0pID4gLTE7XG4gICAgICAgICAgICB2YXIgaXNQYWdlSW5BbGxvd2VkUmFuZ2UgPSAhYWxsb3dlZFJlY3QgfHwgKHBhZ2VCb3R0b20gPj0gYWxsb3dlZFJlY3QudG9wICYmIHBhZ2VUb3AgPD0gYWxsb3dlZFJlY3QuYm90dG9tKTtcbiAgICAgICAgICAgIHZhciBpc1BhZ2VJblJlcXVpcmVkUmFuZ2UgPSAhdGhpc18xLl9yZXF1aXJlZFJlY3QgfHwgKHBhZ2VCb3R0b20gPj0gdGhpc18xLl9yZXF1aXJlZFJlY3QudG9wICYmIHBhZ2VUb3AgPD0gdGhpc18xLl9yZXF1aXJlZFJlY3QuYm90dG9tKTtcbiAgICAgICAgICAgIHZhciBpc1BhZ2VWaXNpYmxlID0gKCFpc0ZpcnN0UmVuZGVyICYmIChpc1BhZ2VJblJlcXVpcmVkUmFuZ2UgfHwgKGlzUGFnZUluQWxsb3dlZFJhbmdlICYmIGlzUGFnZVJlbmRlcmVkKSkpIHx8ICFzaG91bGRWaXJ0dWFsaXplO1xuICAgICAgICAgICAgdmFyIGlzUGFnZUZvY3VzZWQgPSBmb2N1c2VkSW5kZXggPj0gaXRlbUluZGV4ICYmIGZvY3VzZWRJbmRleCA8IGl0ZW1JbmRleCArIGl0ZW1zUGVyUGFnZTtcbiAgICAgICAgICAgIHZhciBpc0ZpcnN0UGFnZSA9IGl0ZW1JbmRleCA9PT0gc3RhcnRJbmRleDtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdidWlsZGluZyBwYWdlJywgaXRlbUluZGV4LCAncGFnZVRvcDogJyArIHBhZ2VUb3AsICdpbkFsbG93ZWQ6ICcgK1xuICAgICAgICAgICAgLy8gaXNQYWdlSW5BbGxvd2VkUmFuZ2UsICdpblJlcXVpcmVkOiAnICsgaXNQYWdlSW5SZXF1aXJlZFJhbmdlKTtcbiAgICAgICAgICAgIC8vIE9ubHkgcmVuZGVyIHdoYXRzIHZpc2libGUsIGZvY3VzZWQsIG9yIGZpcnN0IHBhZ2UsXG4gICAgICAgICAgICAvLyBvciB3aGVuIHJ1bm5pbmcgaW4gZmFzdCByZW5kZXJpbmcgbW9kZSAobm90IGluIHZpcnR1YWxpemVkIG1vZGUpLCB3ZSByZW5kZXIgYWxsIGN1cnJlbnQgaXRlbXMgaW4gcGFnZXNcbiAgICAgICAgICAgIGlmIChpc1BhZ2VWaXNpYmxlIHx8IGlzUGFnZUZvY3VzZWQgfHwgaXNGaXJzdFBhZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNwYWNlcikge1xuICAgICAgICAgICAgICAgICAgICBwYWdlcy5wdXNoKGN1cnJlbnRTcGFjZXIpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3BhY2VyID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGl0ZW1zSW5QYWdlID0gTWF0aC5taW4oaXRlbXNQZXJQYWdlLCBlbmRJbmRleCAtIGl0ZW1JbmRleCk7XG4gICAgICAgICAgICAgICAgdmFyIG5ld1BhZ2UgPSB0aGlzXzEuX2NyZWF0ZVBhZ2Uoa2V5LCBpdGVtcy5zbGljZShpdGVtSW5kZXgsIGl0ZW1JbmRleCArIGl0ZW1zSW5QYWdlKSwgaXRlbUluZGV4LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgcGFnZURhdGEpO1xuICAgICAgICAgICAgICAgIG5ld1BhZ2UudG9wID0gcGFnZVRvcDtcbiAgICAgICAgICAgICAgICBuZXdQYWdlLmhlaWdodCA9IHBhZ2VIZWlnaHQ7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXNfMS5fdmlzaWJsZVJlY3QgJiYgdGhpc18xLl92aXNpYmxlUmVjdC5ib3R0b20pIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3UGFnZS5pc1Zpc2libGUgPSBwYWdlQm90dG9tID49IHRoaXNfMS5fdmlzaWJsZVJlY3QudG9wICYmIHBhZ2VUb3AgPD0gdGhpc18xLl92aXNpYmxlUmVjdC5ib3R0b207XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBhZ2VzLnB1c2gobmV3UGFnZSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzUGFnZUluUmVxdWlyZWRSYW5nZSAmJiB0aGlzXzEuX2FsbG93ZWRSZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIF9tZXJnZVJlY3QobWF0ZXJpYWxpemVkUmVjdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBwYWdlVG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tOiBwYWdlQm90dG9tLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBwYWdlSGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogYWxsb3dlZFJlY3QubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBhbGxvd2VkUmVjdC5yaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBhbGxvd2VkUmVjdC53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50U3BhY2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTcGFjZXIgPSB0aGlzXzEuX2NyZWF0ZVBhZ2UoU1BBQ0VSX0tFWV9QUkVGSVggKyBpdGVtSW5kZXgsIHVuZGVmaW5lZCwgaXRlbUluZGV4LCAwLCB1bmRlZmluZWQsIHBhZ2VEYXRhLCB0cnVlIC8qaXNTcGFjZXIqLyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN1cnJlbnRTcGFjZXIuaGVpZ2h0ID0gKGN1cnJlbnRTcGFjZXIuaGVpZ2h0IHx8IDApICsgKHBhZ2VCb3R0b20gLSBwYWdlVG9wKSArIDE7XG4gICAgICAgICAgICAgICAgY3VycmVudFNwYWNlci5pdGVtQ291bnQgKz0gaXRlbXNQZXJQYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFnZVRvcCArPSBwYWdlQm90dG9tIC0gcGFnZVRvcCArIDE7XG4gICAgICAgICAgICAvLyBpbiB2aXJ0dWFsaXplZCBtb2RlLCB3ZSByZW5kZXIgbmVlZCB0byByZW5kZXIgZmlyc3QgcGFnZSB0aGVuIGJyZWFrIGFuZCBtZWFzdXJlLFxuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlLCB3ZSByZW5kZXIgYWxsIGl0ZW1zIHdpdGhvdXQgbWVhc3VyZW1lbnQgdG8gbWFrZSByZW5kZXJpbmcgZmFzdFxuICAgICAgICAgICAgaWYgKGlzRmlyc3RSZW5kZXIgJiYgc2hvdWxkVmlydHVhbGl6ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcImJyZWFrXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciB0aGlzXzEgPSB0aGlzO1xuICAgICAgICBmb3IgKHZhciBpdGVtSW5kZXggPSBzdGFydEluZGV4OyBpdGVtSW5kZXggPCBlbmRJbmRleDsgaXRlbUluZGV4ICs9IGl0ZW1zUGVyUGFnZSkge1xuICAgICAgICAgICAgdmFyIHN0YXRlXzEgPSBfbG9vcF8xKGl0ZW1JbmRleCk7XG4gICAgICAgICAgICBpZiAoc3RhdGVfMSA9PT0gXCJicmVha1wiKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50U3BhY2VyKSB7XG4gICAgICAgICAgICBjdXJyZW50U3BhY2VyLmtleSA9IFNQQUNFUl9LRVlfUFJFRklYICsgJ2VuZCc7XG4gICAgICAgICAgICBwYWdlcy5wdXNoKGN1cnJlbnRTcGFjZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21hdGVyaWFsaXplZFJlY3QgPSBtYXRlcmlhbGl6ZWRSZWN0O1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnbWF0ZXJpYWxpemVkOiAnLCBtYXRlcmlhbGl6ZWRSZWN0KTtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBzdGF0ZSksIHsgcGFnZXM6IHBhZ2VzLCBtZWFzdXJlVmVyc2lvbjogdGhpcy5fbWVhc3VyZVZlcnNpb24gfSk7XG4gICAgfTtcbiAgICBMaXN0LnByb3RvdHlwZS5fZ2V0UGFnZVNwZWNpZmljYXRpb24gPSBmdW5jdGlvbiAoaXRlbUluZGV4LCB2aXNpYmxlUmVjdCkge1xuICAgICAgICB2YXIgZ2V0UGFnZVNwZWNpZmljYXRpb24gPSB0aGlzLnByb3BzLmdldFBhZ2VTcGVjaWZpY2F0aW9uO1xuICAgICAgICBpZiAoZ2V0UGFnZVNwZWNpZmljYXRpb24pIHtcbiAgICAgICAgICAgIHZhciBwYWdlRGF0YSA9IGdldFBhZ2VTcGVjaWZpY2F0aW9uKGl0ZW1JbmRleCwgdmlzaWJsZVJlY3QpO1xuICAgICAgICAgICAgdmFyIF9hID0gcGFnZURhdGEuaXRlbUNvdW50LCBpdGVtQ291bnQgPSBfYSA9PT0gdm9pZCAwID8gdGhpcy5fZ2V0SXRlbUNvdW50Rm9yUGFnZShpdGVtSW5kZXgsIHZpc2libGVSZWN0KSA6IF9hO1xuICAgICAgICAgICAgdmFyIF9iID0gcGFnZURhdGEuaGVpZ2h0LCBoZWlnaHQgPSBfYiA9PT0gdm9pZCAwID8gdGhpcy5fZ2V0UGFnZUhlaWdodChpdGVtSW5kZXgsIHZpc2libGVSZWN0LCBpdGVtQ291bnQpIDogX2I7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGl0ZW1Db3VudDogaXRlbUNvdW50LFxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgICAgIGRhdGE6IHBhZ2VEYXRhLmRhdGEsXG4gICAgICAgICAgICAgICAga2V5OiBwYWdlRGF0YS5rZXksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGl0ZW1Db3VudCA9IHRoaXMuX2dldEl0ZW1Db3VudEZvclBhZ2UoaXRlbUluZGV4LCB2aXNpYmxlUmVjdCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGl0ZW1Db3VudDogaXRlbUNvdW50LFxuICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy5fZ2V0UGFnZUhlaWdodChpdGVtSW5kZXgsIHZpc2libGVSZWN0LCBpdGVtQ291bnQpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBwaXhlbCBoZWlnaHQgb2YgYSBnaXZlIHBhZ2UuIFdpbGwgdXNlIHRoZSBwcm9wcyBnZXRQYWdlSGVpZ2h0IGZpcnN0LCBhbmQgaWYgbm90IHByb3ZpZGVkLCBmYWxsYmFjayB0b1xuICAgICAqIGNhY2hlZCBoZWlnaHQsIG9yIGVzdGltYXRlZCBwYWdlIGhlaWdodCwgb3IgZGVmYXVsdCBwYWdlIGhlaWdodC5cbiAgICAgKi9cbiAgICBMaXN0LnByb3RvdHlwZS5fZ2V0UGFnZUhlaWdodCA9IGZ1bmN0aW9uIChpdGVtSW5kZXgsIHZpc2libGVSZWN0LCBpdGVtc1BlclBhZ2UpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZ2V0UGFnZUhlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuZ2V0UGFnZUhlaWdodChpdGVtSW5kZXgsIHZpc2libGVSZWN0LCBpdGVtc1BlclBhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGNhY2hlZEhlaWdodCA9IHRoaXMuX2NhY2hlZFBhZ2VIZWlnaHRzW2l0ZW1JbmRleF07XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkSGVpZ2h0ID8gY2FjaGVkSGVpZ2h0LmhlaWdodCA6IHRoaXMuX2VzdGltYXRlZFBhZ2VIZWlnaHQgfHwgREVGQVVMVF9QQUdFX0hFSUdIVDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGlzdC5wcm90b3R5cGUuX2dldEl0ZW1Db3VudEZvclBhZ2UgPSBmdW5jdGlvbiAoaXRlbUluZGV4LCB2aXNpYmlsZVJlY3QpIHtcbiAgICAgICAgdmFyIGl0ZW1zUGVyUGFnZSA9IHRoaXMucHJvcHMuZ2V0SXRlbUNvdW50Rm9yUGFnZVxuICAgICAgICAgICAgPyB0aGlzLnByb3BzLmdldEl0ZW1Db3VudEZvclBhZ2UoaXRlbUluZGV4LCB2aXNpYmlsZVJlY3QpXG4gICAgICAgICAgICA6IERFRkFVTFRfSVRFTVNfUEVSX1BBR0U7XG4gICAgICAgIHJldHVybiBpdGVtc1BlclBhZ2UgPyBpdGVtc1BlclBhZ2UgOiBERUZBVUxUX0lURU1TX1BFUl9QQUdFO1xuICAgIH07XG4gICAgTGlzdC5wcm90b3R5cGUuX2NyZWF0ZVBhZ2UgPSBmdW5jdGlvbiAocGFnZUtleSwgaXRlbXMsIHN0YXJ0SW5kZXgsIGNvdW50LCBzdHlsZSwgZGF0YSwgaXNTcGFjZXIpIHtcbiAgICAgICAgaWYgKHN0YXJ0SW5kZXggPT09IHZvaWQgMCkgeyBzdGFydEluZGV4ID0gLTE7IH1cbiAgICAgICAgaWYgKGNvdW50ID09PSB2b2lkIDApIHsgY291bnQgPSBpdGVtcyA/IGl0ZW1zLmxlbmd0aCA6IDA7IH1cbiAgICAgICAgaWYgKHN0eWxlID09PSB2b2lkIDApIHsgc3R5bGUgPSB7fTsgfVxuICAgICAgICBwYWdlS2V5ID0gcGFnZUtleSB8fCBQQUdFX0tFWV9QUkVGSVggKyBzdGFydEluZGV4O1xuICAgICAgICB2YXIgY2FjaGVkUGFnZSA9IHRoaXMuX3BhZ2VDYWNoZVtwYWdlS2V5XTtcbiAgICAgICAgaWYgKGNhY2hlZFBhZ2UgJiYgY2FjaGVkUGFnZS5wYWdlKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkUGFnZS5wYWdlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6IHBhZ2VLZXksXG4gICAgICAgICAgICBzdGFydEluZGV4OiBzdGFydEluZGV4LFxuICAgICAgICAgICAgaXRlbUNvdW50OiBjb3VudCxcbiAgICAgICAgICAgIGl0ZW1zOiBpdGVtcyxcbiAgICAgICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICBpc1NwYWNlcjogaXNTcGFjZXIgfHwgZmFsc2UsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBMaXN0LnByb3RvdHlwZS5fZ2V0UmVuZGVyQ291bnQgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgdmFyIF9hID0gcHJvcHMgfHwgdGhpcy5wcm9wcywgaXRlbXMgPSBfYS5pdGVtcywgc3RhcnRJbmRleCA9IF9hLnN0YXJ0SW5kZXgsIHJlbmRlckNvdW50ID0gX2EucmVuZGVyQ291bnQ7XG4gICAgICAgIHJldHVybiByZW5kZXJDb3VudCA9PT0gdW5kZWZpbmVkID8gKGl0ZW1zID8gaXRlbXMubGVuZ3RoIC0gc3RhcnRJbmRleCA6IDApIDogcmVuZGVyQ291bnQ7XG4gICAgfTtcbiAgICAvKiogQ2FsY3VsYXRlIHRoZSB2aXNpYmxlIHJlY3Qgd2l0aGluIHRoZSBsaXN0IHdoZXJlIHRvcDogMCBhbmQgbGVmdDogMCBpcyB0aGUgdG9wL2xlZnQgb2YgdGhlIGxpc3QuICovXG4gICAgTGlzdC5wcm90b3R5cGUuX3VwZGF0ZVJlbmRlclJlY3RzID0gZnVuY3Rpb24gKHByb3BzLCBzdGF0ZSwgZm9yY2VVcGRhdGUpIHtcbiAgICAgICAgdmFyIHJlbmRlcmVkV2luZG93c0FoZWFkID0gcHJvcHMucmVuZGVyZWRXaW5kb3dzQWhlYWQsIHJlbmRlcmVkV2luZG93c0JlaGluZCA9IHByb3BzLnJlbmRlcmVkV2luZG93c0JlaGluZDtcbiAgICAgICAgdmFyIHBhZ2VzID0gc3RhdGUucGFnZXM7XG4gICAgICAgIC8vIHdoZW4gbm90IGluIHZpcnR1YWxpemUgbW9kZSwgd2UgcmVuZGVyIGFsbCBpdGVtcyB3aXRob3V0IG1lYXN1cmVtZW50IHRvIG9wdGltaXplIHBhZ2UgcmVuZGVyaW5nIHBlcmZcbiAgICAgICAgaWYgKCF0aGlzLl9zaG91bGRWaXJ0dWFsaXplKHByb3BzKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdXJmYWNlUmVjdCA9IHRoaXMuX3N1cmZhY2VSZWN0IHx8IF9fYXNzaWduKHt9LCBFTVBUWV9SRUNUKTtcbiAgICAgICAgdmFyIHNjcm9sbEhlaWdodCA9IHRoaXMuX3Njcm9sbEVsZW1lbnQgJiYgdGhpcy5fc2Nyb2xsRWxlbWVudC5zY3JvbGxIZWlnaHQ7XG4gICAgICAgIHZhciBzY3JvbGxUb3AgPSB0aGlzLl9zY3JvbGxFbGVtZW50ID8gdGhpcy5fc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3AgOiAwO1xuICAgICAgICAvLyBXQVJOSU5HOiBFWFBFTlNJVkUgQ0FMTCEgV2UgbmVlZCB0byBrbm93IHRoZSBzdXJmYWNlIHRvcCByZWxhdGl2ZSB0byB0aGUgd2luZG93LlxuICAgICAgICAvLyBUaGlzIG5lZWRzIHRvIGJlIGNhbGxlZCB0byByZWNhbGN1bGF0ZSB3aGVuIG5ldyBwYWdlcyBzaG91bGQgYmUgbG9hZGVkLlxuICAgICAgICAvLyBXZSBjaGVjayB0byBzZWUgaG93IGZhciB3ZSd2ZSBzY3JvbGxlZCBhbmQgaWYgaXQncyBmdXJ0aGVyIHRoYW4gYSB0aGlyZCBvZiBhIHBhZ2Ugd2UgcnVuIGl0IGFnYWluLlxuICAgICAgICBpZiAodGhpcy5fc3VyZmFjZS5jdXJyZW50ICYmXG4gICAgICAgICAgICAoZm9yY2VVcGRhdGUgfHxcbiAgICAgICAgICAgICAgICAhcGFnZXMgfHxcbiAgICAgICAgICAgICAgICAhdGhpcy5fc3VyZmFjZVJlY3QgfHxcbiAgICAgICAgICAgICAgICAhc2Nyb2xsSGVpZ2h0IHx8XG4gICAgICAgICAgICAgICAgc2Nyb2xsSGVpZ2h0ICE9PSB0aGlzLl9zY3JvbGxIZWlnaHQgfHxcbiAgICAgICAgICAgICAgICBNYXRoLmFicyh0aGlzLl9zY3JvbGxUb3AgLSBzY3JvbGxUb3ApID4gdGhpcy5fZXN0aW1hdGVkUGFnZUhlaWdodCAvIDMpKSB7XG4gICAgICAgICAgICBzdXJmYWNlUmVjdCA9IHRoaXMuX3N1cmZhY2VSZWN0ID0gX21lYXN1cmVTdXJmYWNlUmVjdCh0aGlzLl9zdXJmYWNlLmN1cnJlbnQpO1xuICAgICAgICAgICAgdGhpcy5fc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZSBzY3JvbGwgaGVpZ2h0IGhhcyBjaGFuZ2VkLCBzb21ldGhpbmcgaW4gdGhlIGNvbnRhaW5lciBsaWtlbHkgcmVzaXplZCBhbmRcbiAgICAgICAgLy8gd2Ugc2hvdWxkIHJlZG8gdGhlIHBhZ2UgaGVpZ2h0cyBpbmNhc2UgdGhlaXIgY29udGVudCByZXNpemVkLlxuICAgICAgICBpZiAoZm9yY2VVcGRhdGUgfHwgIXNjcm9sbEhlaWdodCB8fCBzY3JvbGxIZWlnaHQgIT09IHRoaXMuX3Njcm9sbEhlaWdodCkge1xuICAgICAgICAgICAgdGhpcy5fbWVhc3VyZVZlcnNpb24rKztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSBzY3JvbGxIZWlnaHQ7XG4gICAgICAgIC8vIElmIHRoZSBzdXJmYWNlIGlzIGFib3ZlIHRoZSBjb250YWluZXIgdG9wIG9yIGJlbG93IHRoZSBjb250YWluZXIgYm90dG9tLCBvciBpZiB0aGlzIGlzIG5vdCB0aGUgZmlyc3RcbiAgICAgICAgLy8gcmVuZGVyIHJldHVybiBlbXB0eSByZWN0LlxuICAgICAgICAvLyBUaGUgZmlyc3QgdGltZSB0aGUgbGlzdCBnZXRzIHJlbmRlcmVkIHdlIG5lZWQgdG8gY2FsY3VsYXRlIHRoZSByZWN0YW5nbGUuIFRoZSB3aWR0aCBvZiB0aGUgbGlzdCBpc1xuICAgICAgICAvLyB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgd2lkdGggb2YgdGhlIGxpc3QgaXRlbXMuXG4gICAgICAgIHZhciB2aXNpYmxlVG9wID0gTWF0aC5tYXgoMCwgLXN1cmZhY2VSZWN0LnRvcCk7XG4gICAgICAgIHZhciB3aW4gPSBnZXRXaW5kb3codGhpcy5fcm9vdC5jdXJyZW50KTtcbiAgICAgICAgdmFyIHZpc2libGVSZWN0ID0ge1xuICAgICAgICAgICAgdG9wOiB2aXNpYmxlVG9wLFxuICAgICAgICAgICAgbGVmdDogc3VyZmFjZVJlY3QubGVmdCxcbiAgICAgICAgICAgIGJvdHRvbTogdmlzaWJsZVRvcCArIHdpbi5pbm5lckhlaWdodCxcbiAgICAgICAgICAgIHJpZ2h0OiBzdXJmYWNlUmVjdC5yaWdodCxcbiAgICAgICAgICAgIHdpZHRoOiBzdXJmYWNlUmVjdC53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogd2luLmlubmVySGVpZ2h0LFxuICAgICAgICB9O1xuICAgICAgICAvLyBUaGUgcmVxdWlyZWQvYWxsb3dlZCByZWN0cyBhcmUgYWRqdXN0ZWQgdmVyc2lvbnMgb2YgdGhlIHZpc2libGUgcmVjdC5cbiAgICAgICAgdGhpcy5fcmVxdWlyZWRSZWN0ID0gX2V4cGFuZFJlY3QodmlzaWJsZVJlY3QsIHRoaXMuX3JlcXVpcmVkV2luZG93c0JlaGluZCwgdGhpcy5fcmVxdWlyZWRXaW5kb3dzQWhlYWQpO1xuICAgICAgICB0aGlzLl9hbGxvd2VkUmVjdCA9IF9leHBhbmRSZWN0KHZpc2libGVSZWN0LCByZW5kZXJlZFdpbmRvd3NCZWhpbmQsIHJlbmRlcmVkV2luZG93c0FoZWFkKTtcbiAgICAgICAgLy8gc3RvcmUgdGhlIHZpc2libGUgcmVjdCBmb3IgbGF0ZXIgdXNlLlxuICAgICAgICB0aGlzLl92aXNpYmxlUmVjdCA9IHZpc2libGVSZWN0O1xuICAgIH07XG4gICAgTGlzdC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIHN0YXJ0SW5kZXg6IDAsXG4gICAgICAgIG9uUmVuZGVyQ2VsbDogZnVuY3Rpb24gKGl0ZW0sIGluZGV4LCBjb250YWluc0ZvY3VzKSB7IHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAoaXRlbSAmJiBpdGVtLm5hbWUpIHx8ICcnKTsgfSxcbiAgICAgICAgcmVuZGVyZWRXaW5kb3dzQWhlYWQ6IERFRkFVTFRfUkVOREVSRURfV0lORE9XU19BSEVBRCxcbiAgICAgICAgcmVuZGVyZWRXaW5kb3dzQmVoaW5kOiBERUZBVUxUX1JFTkRFUkVEX1dJTkRPV1NfQkVISU5ELFxuICAgIH07XG4gICAgcmV0dXJuIExpc3Q7XG59KFJlYWN0LkNvbXBvbmVudCkpO1xuZXhwb3J0IHsgTGlzdCB9O1xuZnVuY3Rpb24gX2V4cGFuZFJlY3QocmVjdCwgcGFnZXNCZWZvcmUsIHBhZ2VzQWZ0ZXIpIHtcbiAgICB2YXIgdG9wID0gcmVjdC50b3AgLSBwYWdlc0JlZm9yZSAqIHJlY3QuaGVpZ2h0O1xuICAgIHZhciBoZWlnaHQgPSByZWN0LmhlaWdodCArIChwYWdlc0JlZm9yZSArIHBhZ2VzQWZ0ZXIpICogcmVjdC5oZWlnaHQ7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgIGJvdHRvbTogdG9wICsgaGVpZ2h0LFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgICAgICByaWdodDogcmVjdC5yaWdodCxcbiAgICAgICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIF9pc0NvbnRhaW5lZFdpdGhpbihpbm5lclJlY3QsIG91dGVyUmVjdCkge1xuICAgIHJldHVybiAoaW5uZXJSZWN0LnRvcCA+PSBvdXRlclJlY3QudG9wICYmXG4gICAgICAgIGlubmVyUmVjdC5sZWZ0ID49IG91dGVyUmVjdC5sZWZ0ICYmXG4gICAgICAgIGlubmVyUmVjdC5ib3R0b20gPD0gb3V0ZXJSZWN0LmJvdHRvbSAmJlxuICAgICAgICBpbm5lclJlY3QucmlnaHQgPD0gb3V0ZXJSZWN0LnJpZ2h0KTtcbn1cbmZ1bmN0aW9uIF9tZXJnZVJlY3QodGFyZ2V0UmVjdCwgbmV3UmVjdCkge1xuICAgIHRhcmdldFJlY3QudG9wID0gbmV3UmVjdC50b3AgPCB0YXJnZXRSZWN0LnRvcCB8fCB0YXJnZXRSZWN0LnRvcCA9PT0gLTEgPyBuZXdSZWN0LnRvcCA6IHRhcmdldFJlY3QudG9wO1xuICAgIHRhcmdldFJlY3QubGVmdCA9IG5ld1JlY3QubGVmdCA8IHRhcmdldFJlY3QubGVmdCB8fCB0YXJnZXRSZWN0LmxlZnQgPT09IC0xID8gbmV3UmVjdC5sZWZ0IDogdGFyZ2V0UmVjdC5sZWZ0O1xuICAgIHRhcmdldFJlY3QuYm90dG9tID1cbiAgICAgICAgbmV3UmVjdC5ib3R0b20gPiB0YXJnZXRSZWN0LmJvdHRvbSB8fCB0YXJnZXRSZWN0LmJvdHRvbSA9PT0gLTEgPyBuZXdSZWN0LmJvdHRvbSA6IHRhcmdldFJlY3QuYm90dG9tO1xuICAgIHRhcmdldFJlY3QucmlnaHQgPSBuZXdSZWN0LnJpZ2h0ID4gdGFyZ2V0UmVjdC5yaWdodCB8fCB0YXJnZXRSZWN0LnJpZ2h0ID09PSAtMSA/IG5ld1JlY3QucmlnaHQgOiB0YXJnZXRSZWN0LnJpZ2h0O1xuICAgIHRhcmdldFJlY3Qud2lkdGggPSB0YXJnZXRSZWN0LnJpZ2h0IC0gdGFyZ2V0UmVjdC5sZWZ0ICsgMTtcbiAgICB0YXJnZXRSZWN0LmhlaWdodCA9IHRhcmdldFJlY3QuYm90dG9tIC0gdGFyZ2V0UmVjdC50b3AgKyAxO1xuICAgIHJldHVybiB0YXJnZXRSZWN0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TGlzdC5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpbml0aWFsaXplQ29tcG9uZW50UmVmLCBjc3MsIGdldElkLCBFdmVudEdyb3VwIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IFNFTEVDVElPTl9DSEFOR0UgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvc2VsZWN0aW9uL2luZGV4JztcbmltcG9ydCB7IEdyb3VwSGVhZGVyIH0gZnJvbSAnLi9Hcm91cEhlYWRlcic7XG5pbXBvcnQgeyBHcm91cFNob3dBbGwgfSBmcm9tICcuL0dyb3VwU2hvd0FsbCc7XG5pbXBvcnQgeyBHcm91cEZvb3RlciB9IGZyb20gJy4vR3JvdXBGb290ZXInO1xuaW1wb3J0IHsgTGlzdCB9IGZyb20gJy4uLy4uL0xpc3QnO1xudmFyIERFRkFVTFRfRFJPUFBJTkdfQ1NTX0NMQVNTID0gJ2lzLWRyb3BwaW5nJztcbnZhciBHcm91cGVkTGlzdFNlY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEdyb3VwZWRMaXN0U2VjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBHcm91cGVkTGlzdFNlY3Rpb24ocHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9yb290ID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgICAgIF90aGlzLl9saXN0ID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgICAgIF90aGlzLl9zdWJHcm91cFJlZnMgPSB7fTtcbiAgICAgICAgX3RoaXMuX2Ryb3BwaW5nQ2xhc3NOYW1lID0gJyc7XG4gICAgICAgIF90aGlzLl9vblJlbmRlckdyb3VwSGVhZGVyID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChHcm91cEhlYWRlciwgX19hc3NpZ24oe30sIHByb3BzKSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblJlbmRlckdyb3VwU2hvd0FsbCA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR3JvdXBTaG93QWxsLCBfX2Fzc2lnbih7fSwgcHJvcHMpKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uUmVuZGVyR3JvdXBGb290ZXIgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEdyb3VwRm9vdGVyLCBfX2Fzc2lnbih7fSwgcHJvcHMpKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX3JlbmRlclN1Ykdyb3VwID0gZnVuY3Rpb24gKHN1Ykdyb3VwLCBzdWJHcm91cEluZGV4KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgZHJhZ0Ryb3BFdmVudHMgPSBfYS5kcmFnRHJvcEV2ZW50cywgZHJhZ0Ryb3BIZWxwZXIgPSBfYS5kcmFnRHJvcEhlbHBlciwgZXZlbnRzVG9SZWdpc3RlciA9IF9hLmV2ZW50c1RvUmVnaXN0ZXIsIGdldEdyb3VwSXRlbUxpbWl0ID0gX2EuZ2V0R3JvdXBJdGVtTGltaXQsIGdyb3VwTmVzdGluZ0RlcHRoID0gX2EuZ3JvdXBOZXN0aW5nRGVwdGgsIGdyb3VwUHJvcHMgPSBfYS5ncm91cFByb3BzLCBpdGVtcyA9IF9hLml0ZW1zLCBoZWFkZXJQcm9wcyA9IF9hLmhlYWRlclByb3BzLCBzaG93QWxsUHJvcHMgPSBfYS5zaG93QWxsUHJvcHMsIGZvb3RlclByb3BzID0gX2EuZm9vdGVyUHJvcHMsIGxpc3RQcm9wcyA9IF9hLmxpc3RQcm9wcywgb25SZW5kZXJDZWxsID0gX2Eub25SZW5kZXJDZWxsLCBzZWxlY3Rpb24gPSBfYS5zZWxlY3Rpb24sIHNlbGVjdGlvbk1vZGUgPSBfYS5zZWxlY3Rpb25Nb2RlLCB2aWV3cG9ydCA9IF9hLnZpZXdwb3J0LCBvblJlbmRlckdyb3VwSGVhZGVyID0gX2Eub25SZW5kZXJHcm91cEhlYWRlciwgb25SZW5kZXJHcm91cFNob3dBbGwgPSBfYS5vblJlbmRlckdyb3VwU2hvd0FsbCwgb25SZW5kZXJHcm91cEZvb3RlciA9IF9hLm9uUmVuZGVyR3JvdXBGb290ZXIsIG9uU2hvdWxkVmlydHVhbGl6ZSA9IF9hLm9uU2hvdWxkVmlydHVhbGl6ZSwgZ3JvdXAgPSBfYS5ncm91cCwgY29tcGFjdCA9IF9hLmNvbXBhY3Q7XG4gICAgICAgICAgICB2YXIgbmVzdGluZ0RlcHRoID0gc3ViR3JvdXAubGV2ZWwgPyBzdWJHcm91cC5sZXZlbCArIDEgOiBncm91cE5lc3RpbmdEZXB0aDtcbiAgICAgICAgICAgIHJldHVybiAhc3ViR3JvdXAgfHwgc3ViR3JvdXAuY291bnQgPiAwIHx8IChncm91cFByb3BzICYmIGdyb3VwUHJvcHMuc2hvd0VtcHR5R3JvdXBzKSA/IChSZWFjdC5jcmVhdGVFbGVtZW50KEdyb3VwZWRMaXN0U2VjdGlvbiwgeyByZWY6IGZ1bmN0aW9uIChyZWYpIHsgcmV0dXJuIChfdGhpcy5fc3ViR3JvdXBSZWZzWydzdWJHcm91cF8nICsgc3ViR3JvdXBJbmRleF0gPSByZWYpOyB9LCBrZXk6IF90aGlzLl9nZXRHcm91cEtleShzdWJHcm91cCwgc3ViR3JvdXBJbmRleCksIGRyYWdEcm9wRXZlbnRzOiBkcmFnRHJvcEV2ZW50cywgZHJhZ0Ryb3BIZWxwZXI6IGRyYWdEcm9wSGVscGVyLCBldmVudHNUb1JlZ2lzdGVyOiBldmVudHNUb1JlZ2lzdGVyLCBmb290ZXJQcm9wczogZm9vdGVyUHJvcHMsIGdldEdyb3VwSXRlbUxpbWl0OiBnZXRHcm91cEl0ZW1MaW1pdCwgZ3JvdXA6IHN1Ykdyb3VwLCBncm91cEluZGV4OiBzdWJHcm91cEluZGV4LCBncm91cE5lc3RpbmdEZXB0aDogbmVzdGluZ0RlcHRoLCBncm91cFByb3BzOiBncm91cFByb3BzLCBoZWFkZXJQcm9wczogaGVhZGVyUHJvcHMsIGl0ZW1zOiBpdGVtcywgbGlzdFByb3BzOiBsaXN0UHJvcHMsIG9uUmVuZGVyQ2VsbDogb25SZW5kZXJDZWxsLCBzZWxlY3Rpb246IHNlbGVjdGlvbiwgc2VsZWN0aW9uTW9kZTogc2VsZWN0aW9uTW9kZSwgc2hvd0FsbFByb3BzOiBzaG93QWxsUHJvcHMsIHZpZXdwb3J0OiB2aWV3cG9ydCwgb25SZW5kZXJHcm91cEhlYWRlcjogb25SZW5kZXJHcm91cEhlYWRlciwgb25SZW5kZXJHcm91cFNob3dBbGw6IG9uUmVuZGVyR3JvdXBTaG93QWxsLCBvblJlbmRlckdyb3VwRm9vdGVyOiBvblJlbmRlckdyb3VwRm9vdGVyLCBvblNob3VsZFZpcnR1YWxpemU6IG9uU2hvdWxkVmlydHVhbGl6ZSwgZ3JvdXBzOiBncm91cCA/IGdyb3VwLmNoaWxkcmVuIDogW10sIGNvbXBhY3Q6IGNvbXBhY3QgfSkpIDogbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNvbGxlY3QgYWxsIHRoZSBkYXRhIHdlIG5lZWQgdG8gZW5hYmxlIGRyYWcvZHJvcCBmb3IgYSBncm91cFxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuX2dldEdyb3VwRHJhZ0Ryb3BPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIGdyb3VwID0gX2EuZ3JvdXAsIGdyb3VwSW5kZXggPSBfYS5ncm91cEluZGV4LCBkcmFnRHJvcEV2ZW50cyA9IF9hLmRyYWdEcm9wRXZlbnRzLCBldmVudHNUb1JlZ2lzdGVyID0gX2EuZXZlbnRzVG9SZWdpc3RlcjtcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIGV2ZW50TWFwOiBldmVudHNUb1JlZ2lzdGVyLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbkluZGV4OiAtMSxcbiAgICAgICAgICAgICAgICBjb250ZXh0OiB7IGRhdGE6IGdyb3VwLCBpbmRleDogZ3JvdXBJbmRleCwgaXNHcm91cDogdHJ1ZSB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZURyb3BTdGF0ZTogX3RoaXMuX3VwZGF0ZURyb3BwaW5nU3RhdGUsXG4gICAgICAgICAgICAgICAgY2FuRHJhZzogZHJhZ0Ryb3BFdmVudHMuY2FuRHJhZyxcbiAgICAgICAgICAgICAgICBjYW5Ecm9wOiBkcmFnRHJvcEV2ZW50cy5jYW5Ecm9wLFxuICAgICAgICAgICAgICAgIG9uRHJvcDogZHJhZ0Ryb3BFdmVudHMub25Ecm9wLFxuICAgICAgICAgICAgICAgIG9uRHJhZ1N0YXJ0OiBkcmFnRHJvcEV2ZW50cy5vbkRyYWdTdGFydCxcbiAgICAgICAgICAgICAgICBvbkRyYWdFbnRlcjogZHJhZ0Ryb3BFdmVudHMub25EcmFnRW50ZXIsXG4gICAgICAgICAgICAgICAgb25EcmFnTGVhdmU6IGRyYWdEcm9wRXZlbnRzLm9uRHJhZ0xlYXZlLFxuICAgICAgICAgICAgICAgIG9uRHJhZ0VuZDogZHJhZ0Ryb3BFdmVudHMub25EcmFnRW5kLFxuICAgICAgICAgICAgICAgIG9uRHJhZ092ZXI6IGRyYWdEcm9wRXZlbnRzLm9uRHJhZ092ZXIsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiB1cGRhdGUgZ3JvdXBJc0Ryb3BwaW5nIHN0YXRlIGJhc2VkIG9uIHRoZSBpbnB1dCB2YWx1ZSwgd2hpY2ggaXMgdXNlZCB0byBjaGFuZ2Ugc3R5bGUgZHVyaW5nIGRyYWcgYW5kIGRyb3BcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIG5ld1ZhbHVlIC0gbmV3IGlzRHJvcHBpbmcgc3RhdGUgdmFsdWVcbiAgICAgICAgICogQHBhcmFtIGV2ZW50IC0gdGhlIGV2ZW50IHRyaWdnZXIgZHJvcHBpbmcgc3RhdGUgY2hhbmdlIHdoaWNoIGNhbiBiZSBkcmFnZW50ZXIsIGRyYWdsZWF2ZSBldGNcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLl91cGRhdGVEcm9wcGluZ1N0YXRlID0gZnVuY3Rpb24gKG5ld0lzRHJvcHBpbmcsIGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaXNEcm9wcGluZyA9IF90aGlzLnN0YXRlLmlzRHJvcHBpbmc7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgZHJhZ0Ryb3BFdmVudHMgPSBfYS5kcmFnRHJvcEV2ZW50cywgZ3JvdXAgPSBfYS5ncm91cDtcbiAgICAgICAgICAgIGlmIChpc0Ryb3BwaW5nICE9PSBuZXdJc0Ryb3BwaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzRHJvcHBpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRyYWdEcm9wRXZlbnRzICYmIGRyYWdEcm9wRXZlbnRzLm9uRHJhZ0xlYXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcmFnRHJvcEV2ZW50cy5vbkRyYWdMZWF2ZShncm91cCwgZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZHJhZ0Ryb3BFdmVudHMgJiYgZHJhZ0Ryb3BFdmVudHMub25EcmFnRW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9kcm9wcGluZ0NsYXNzTmFtZSA9IGRyYWdEcm9wRXZlbnRzLm9uRHJhZ0VudGVyKGdyb3VwLCBldmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBpc0Ryb3BwaW5nOiBuZXdJc0Ryb3BwaW5nIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgc2VsZWN0aW9uID0gcHJvcHMuc2VsZWN0aW9uLCBncm91cCA9IHByb3BzLmdyb3VwO1xuICAgICAgICBpbml0aWFsaXplQ29tcG9uZW50UmVmKF90aGlzKTtcbiAgICAgICAgX3RoaXMuX2lkID0gZ2V0SWQoJ0dyb3VwZWRMaXN0U2VjdGlvbicpO1xuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGlzRHJvcHBpbmc6IGZhbHNlLFxuICAgICAgICAgICAgaXNTZWxlY3RlZDogc2VsZWN0aW9uICYmIGdyb3VwID8gc2VsZWN0aW9uLmlzUmFuZ2VTZWxlY3RlZChncm91cC5zdGFydEluZGV4LCBncm91cC5jb3VudCkgOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEdyb3VwKF90aGlzKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBHcm91cGVkTGlzdFNlY3Rpb24ucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBkcmFnRHJvcEhlbHBlciA9IF9hLmRyYWdEcm9wSGVscGVyLCBzZWxlY3Rpb24gPSBfYS5zZWxlY3Rpb247XG4gICAgICAgIGlmIChkcmFnRHJvcEhlbHBlciAmJiB0aGlzLl9yb290LmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2RyYWdEcm9wU3Vic2NyaXB0aW9uID0gZHJhZ0Ryb3BIZWxwZXIuc3Vic2NyaWJlKHRoaXMuX3Jvb3QuY3VycmVudCwgdGhpcy5fZXZlbnRzLCB0aGlzLl9nZXRHcm91cERyYWdEcm9wT3B0aW9ucygpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9ldmVudHMub24oc2VsZWN0aW9uLCBTRUxFQ1RJT05fQ0hBTkdFLCB0aGlzLl9vblNlbGVjdGlvbkNoYW5nZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEdyb3VwZWRMaXN0U2VjdGlvbi5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50cy5kaXNwb3NlKCk7XG4gICAgICAgIGlmICh0aGlzLl9kcmFnRHJvcFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5fZHJhZ0Ryb3BTdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBHcm91cGVkTGlzdFNlY3Rpb24ucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2aW91c1Byb3BzKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmdyb3VwICE9PSBwcmV2aW91c1Byb3BzLmdyb3VwIHx8XG4gICAgICAgICAgICB0aGlzLnByb3BzLmdyb3VwSW5kZXggIT09IHByZXZpb3VzUHJvcHMuZ3JvdXBJbmRleCB8fFxuICAgICAgICAgICAgdGhpcy5wcm9wcy5kcmFnRHJvcEhlbHBlciAhPT0gcHJldmlvdXNQcm9wcy5kcmFnRHJvcEhlbHBlcikge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2RyYWdEcm9wU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZHJhZ0Ryb3BTdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9kcmFnRHJvcFN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmRyYWdEcm9wSGVscGVyICYmIHRoaXMuX3Jvb3QuY3VycmVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RyYWdEcm9wU3Vic2NyaXB0aW9uID0gdGhpcy5wcm9wcy5kcmFnRHJvcEhlbHBlci5zdWJzY3JpYmUodGhpcy5fcm9vdC5jdXJyZW50LCB0aGlzLl9ldmVudHMsIHRoaXMuX2dldEdyb3VwRHJhZ0Ryb3BPcHRpb25zKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBHcm91cGVkTGlzdFNlY3Rpb24ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgZ2V0R3JvdXBJdGVtTGltaXQgPSBfYS5nZXRHcm91cEl0ZW1MaW1pdCwgZ3JvdXAgPSBfYS5ncm91cCwgZ3JvdXBJbmRleCA9IF9hLmdyb3VwSW5kZXgsIGhlYWRlclByb3BzID0gX2EuaGVhZGVyUHJvcHMsIHNob3dBbGxQcm9wcyA9IF9hLnNob3dBbGxQcm9wcywgZm9vdGVyUHJvcHMgPSBfYS5mb290ZXJQcm9wcywgdmlld3BvcnQgPSBfYS52aWV3cG9ydCwgc2VsZWN0aW9uTW9kZSA9IF9hLnNlbGVjdGlvbk1vZGUsIF9iID0gX2Eub25SZW5kZXJHcm91cEhlYWRlciwgb25SZW5kZXJHcm91cEhlYWRlciA9IF9iID09PSB2b2lkIDAgPyB0aGlzLl9vblJlbmRlckdyb3VwSGVhZGVyIDogX2IsIF9jID0gX2Eub25SZW5kZXJHcm91cFNob3dBbGwsIG9uUmVuZGVyR3JvdXBTaG93QWxsID0gX2MgPT09IHZvaWQgMCA/IHRoaXMuX29uUmVuZGVyR3JvdXBTaG93QWxsIDogX2MsIF9kID0gX2Eub25SZW5kZXJHcm91cEZvb3Rlciwgb25SZW5kZXJHcm91cEZvb3RlciA9IF9kID09PSB2b2lkIDAgPyB0aGlzLl9vblJlbmRlckdyb3VwRm9vdGVyIDogX2QsIG9uU2hvdWxkVmlydHVhbGl6ZSA9IF9hLm9uU2hvdWxkVmlydHVhbGl6ZSwgZ3JvdXBlZExpc3RDbGFzc05hbWVzID0gX2EuZ3JvdXBlZExpc3RDbGFzc05hbWVzLCBncm91cHMgPSBfYS5ncm91cHMsIGNvbXBhY3QgPSBfYS5jb21wYWN0LCBfZSA9IF9hLmxpc3RQcm9wcywgbGlzdFByb3BzID0gX2UgPT09IHZvaWQgMCA/IHt9IDogX2U7XG4gICAgICAgIHZhciBpc1NlbGVjdGVkID0gdGhpcy5zdGF0ZS5pc1NlbGVjdGVkO1xuICAgICAgICB2YXIgcmVuZGVyQ291bnQgPSBncm91cCAmJiBnZXRHcm91cEl0ZW1MaW1pdCA/IGdldEdyb3VwSXRlbUxpbWl0KGdyb3VwKSA6IEluZmluaXR5O1xuICAgICAgICB2YXIgaXNTaG93QWxsVmlzaWJsZSA9IGdyb3VwICYmXG4gICAgICAgICAgICAhZ3JvdXAuY2hpbGRyZW4gJiZcbiAgICAgICAgICAgICFncm91cC5pc0NvbGxhcHNlZCAmJlxuICAgICAgICAgICAgIWdyb3VwLmlzU2hvd2luZ0FsbCAmJlxuICAgICAgICAgICAgKGdyb3VwLmNvdW50ID4gcmVuZGVyQ291bnQgfHwgZ3JvdXAuaGFzTW9yZURhdGEpO1xuICAgICAgICB2YXIgaGFzTmVzdGVkR3JvdXBzID0gZ3JvdXAgJiYgZ3JvdXAuY2hpbGRyZW4gJiYgZ3JvdXAuY2hpbGRyZW4ubGVuZ3RoID4gMDtcbiAgICAgICAgdmFyIHZlcnNpb24gPSBsaXN0UHJvcHMudmVyc2lvbjtcbiAgICAgICAgdmFyIGRpdmlkZXJQcm9wcyA9IHtcbiAgICAgICAgICAgIGdyb3VwOiBncm91cCxcbiAgICAgICAgICAgIGdyb3VwSW5kZXg6IGdyb3VwSW5kZXgsXG4gICAgICAgICAgICBncm91cExldmVsOiBncm91cCA/IGdyb3VwLmxldmVsIDogMCxcbiAgICAgICAgICAgIGlzU2VsZWN0ZWQ6IGlzU2VsZWN0ZWQsXG4gICAgICAgICAgICBzZWxlY3RlZDogaXNTZWxlY3RlZCxcbiAgICAgICAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICAgICAgICAgIHNlbGVjdGlvbk1vZGU6IHNlbGVjdGlvbk1vZGUsXG4gICAgICAgICAgICBncm91cHM6IGdyb3VwcyxcbiAgICAgICAgICAgIGNvbXBhY3Q6IGNvbXBhY3QsXG4gICAgICAgIH07XG4gICAgICAgIHZhciBhcmlhQ29udHJvbHNQcm9wcyA9IHtcbiAgICAgICAgICAgIGdyb3VwZWRMaXN0SWQ6IHRoaXMuX2lkLFxuICAgICAgICAgICAgYXJpYVNldFNpemU6IGdyb3VwcyA/IGdyb3Vwcy5sZW5ndGggOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBhcmlhUG9zSW5TZXQ6IGdyb3VwSW5kZXggIT09IHVuZGVmaW5lZCA/IGdyb3VwSW5kZXggKyAxIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgICAgICB2YXIgZ3JvdXBIZWFkZXJQcm9wcyA9IF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKHt9LCBoZWFkZXJQcm9wcyksIGRpdmlkZXJQcm9wcyksIGFyaWFDb250cm9sc1Byb3BzKTtcbiAgICAgICAgdmFyIGdyb3VwU2hvd0FsbFByb3BzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHNob3dBbGxQcm9wcyksIGRpdmlkZXJQcm9wcyk7XG4gICAgICAgIHZhciBncm91cEZvb3RlclByb3BzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGZvb3RlclByb3BzKSwgZGl2aWRlclByb3BzKTtcbiAgICAgICAgdmFyIGlzRHJhZ2dhYmxlID0gISF0aGlzLnByb3BzLmRyYWdEcm9wSGVscGVyICYmXG4gICAgICAgICAgICB0aGlzLl9nZXRHcm91cERyYWdEcm9wT3B0aW9ucygpLmNhbkRyYWcoZ3JvdXApICYmXG4gICAgICAgICAgICAhIXRoaXMucHJvcHMuZHJhZ0Ryb3BFdmVudHMuY2FuRHJhZ0dyb3VwcztcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9fYXNzaWduKHsgcmVmOiB0aGlzLl9yb290IH0sIChpc0RyYWdnYWJsZSAmJiB7IGRyYWdnYWJsZTogdHJ1ZSB9KSwgeyBjbGFzc05hbWU6IGNzcyhncm91cGVkTGlzdENsYXNzTmFtZXMgJiYgZ3JvdXBlZExpc3RDbGFzc05hbWVzLmdyb3VwLCB0aGlzLl9nZXREcm9wcGluZ0NsYXNzTmFtZSgpKSwgcm9sZTogXCJwcmVzZW50YXRpb25cIiB9KSxcbiAgICAgICAgICAgIG9uUmVuZGVyR3JvdXBIZWFkZXIoZ3JvdXBIZWFkZXJQcm9wcywgdGhpcy5fb25SZW5kZXJHcm91cEhlYWRlciksXG4gICAgICAgICAgICBncm91cCAmJiBncm91cC5pc0NvbGxhcHNlZCA/IG51bGwgOiBoYXNOZXN0ZWRHcm91cHMgPyAoUmVhY3QuY3JlYXRlRWxlbWVudChMaXN0LCB7IHJvbGU6IFwicHJlc2VudGF0aW9uXCIsIHJlZjogdGhpcy5fbGlzdCwgaXRlbXM6IGdyb3VwID8gZ3JvdXAuY2hpbGRyZW4gOiBbXSwgb25SZW5kZXJDZWxsOiB0aGlzLl9yZW5kZXJTdWJHcm91cCwgZ2V0SXRlbUNvdW50Rm9yUGFnZTogdGhpcy5fcmV0dXJuT25lLCBvblNob3VsZFZpcnR1YWxpemU6IG9uU2hvdWxkVmlydHVhbGl6ZSwgdmVyc2lvbjogdmVyc2lvbiwgaWQ6IHRoaXMuX2lkIH0pKSA6ICh0aGlzLl9vblJlbmRlckdyb3VwKHJlbmRlckNvdW50KSksXG4gICAgICAgICAgICBncm91cCAmJiBncm91cC5pc0NvbGxhcHNlZFxuICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgIDogaXNTaG93QWxsVmlzaWJsZSAmJiBvblJlbmRlckdyb3VwU2hvd0FsbChncm91cFNob3dBbGxQcm9wcywgdGhpcy5fb25SZW5kZXJHcm91cFNob3dBbGwpLFxuICAgICAgICAgICAgb25SZW5kZXJHcm91cEZvb3Rlcihncm91cEZvb3RlclByb3BzLCB0aGlzLl9vblJlbmRlckdyb3VwRm9vdGVyKSkpO1xuICAgIH07XG4gICAgR3JvdXBlZExpc3RTZWN0aW9uLnByb3RvdHlwZS5mb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JjZVVwZGF0ZS5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLmZvcmNlTGlzdFVwZGF0ZSgpO1xuICAgIH07XG4gICAgR3JvdXBlZExpc3RTZWN0aW9uLnByb3RvdHlwZS5mb3JjZUxpc3RVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBncm91cCA9IHRoaXMucHJvcHMuZ3JvdXA7XG4gICAgICAgIGlmICh0aGlzLl9saXN0LmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2xpc3QuY3VycmVudC5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICAgICAgaWYgKGdyb3VwICYmIGdyb3VwLmNoaWxkcmVuICYmIGdyb3VwLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgc3ViR3JvdXBDb3VudCA9IGdyb3VwLmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN1Ykdyb3VwQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3ViR3JvdXAgPSB0aGlzLl9saXN0LmN1cnJlbnQucGFnZVJlZnNbJ3N1Ykdyb3VwXycgKyBTdHJpbmcoaSldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3ViR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Ykdyb3VwLmZvcmNlTGlzdFVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIHN1Ykdyb3VwID0gdGhpcy5fc3ViR3JvdXBSZWZzWydzdWJHcm91cF8nICsgU3RyaW5nKDApXTtcbiAgICAgICAgICAgIGlmIChzdWJHcm91cCkge1xuICAgICAgICAgICAgICAgIHN1Ykdyb3VwLmZvcmNlTGlzdFVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBHcm91cGVkTGlzdFNlY3Rpb24ucHJvdG90eXBlLl9vblNlbGVjdGlvbkNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgZ3JvdXAgPSBfYS5ncm91cCwgc2VsZWN0aW9uID0gX2Euc2VsZWN0aW9uO1xuICAgICAgICBpZiAoc2VsZWN0aW9uICYmIGdyb3VwKSB7XG4gICAgICAgICAgICB2YXIgaXNTZWxlY3RlZCA9IHNlbGVjdGlvbi5pc1JhbmdlU2VsZWN0ZWQoZ3JvdXAuc3RhcnRJbmRleCwgZ3JvdXAuY291bnQpO1xuICAgICAgICAgICAgaWYgKGlzU2VsZWN0ZWQgIT09IHRoaXMuc3RhdGUuaXNTZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc1NlbGVjdGVkOiBpc1NlbGVjdGVkIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBHcm91cGVkTGlzdFNlY3Rpb24ucHJvdG90eXBlLl9vblJlbmRlckdyb3VwQ2VsbCA9IGZ1bmN0aW9uIChvblJlbmRlckNlbGwsIGdyb3VwTmVzdGluZ0RlcHRoKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoaXRlbSwgaXRlbUluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gb25SZW5kZXJDZWxsKGdyb3VwTmVzdGluZ0RlcHRoLCBpdGVtLCBpdGVtSW5kZXgpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgR3JvdXBlZExpc3RTZWN0aW9uLnByb3RvdHlwZS5fb25SZW5kZXJHcm91cCA9IGZ1bmN0aW9uIChyZW5kZXJDb3VudCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBncm91cCA9IF9hLmdyb3VwLCBpdGVtcyA9IF9hLml0ZW1zLCBvblJlbmRlckNlbGwgPSBfYS5vblJlbmRlckNlbGwsIGxpc3RQcm9wcyA9IF9hLmxpc3RQcm9wcywgZ3JvdXBOZXN0aW5nRGVwdGggPSBfYS5ncm91cE5lc3RpbmdEZXB0aCwgb25TaG91bGRWaXJ0dWFsaXplID0gX2Eub25TaG91bGRWaXJ0dWFsaXplLCBncm91cFByb3BzID0gX2EuZ3JvdXBQcm9wcztcbiAgICAgICAgdmFyIGNvdW50ID0gZ3JvdXAgJiYgIWdyb3VwLmlzU2hvd2luZ0FsbCA/IGdyb3VwLmNvdW50IDogaXRlbXMubGVuZ3RoO1xuICAgICAgICB2YXIgc3RhcnRJbmRleCA9IGdyb3VwID8gZ3JvdXAuc3RhcnRJbmRleCA6IDA7XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChMaXN0LCBfX2Fzc2lnbih7IHJvbGU6IGdyb3VwUHJvcHMgJiYgZ3JvdXBQcm9wcy5yb2xlID8gZ3JvdXBQcm9wcy5yb2xlIDogJ3ByZXNlbnRhdGlvbicsIGl0ZW1zOiBpdGVtcywgb25SZW5kZXJDZWxsOiB0aGlzLl9vblJlbmRlckdyb3VwQ2VsbChvblJlbmRlckNlbGwsIGdyb3VwTmVzdGluZ0RlcHRoKSwgcmVmOiB0aGlzLl9saXN0LCByZW5kZXJDb3VudDogTWF0aC5taW4oY291bnQsIHJlbmRlckNvdW50KSwgc3RhcnRJbmRleDogc3RhcnRJbmRleCwgb25TaG91bGRWaXJ0dWFsaXplOiBvblNob3VsZFZpcnR1YWxpemUsIGlkOiB0aGlzLl9pZCB9LCBsaXN0UHJvcHMpKSk7XG4gICAgfTtcbiAgICBHcm91cGVkTGlzdFNlY3Rpb24ucHJvdG90eXBlLl9yZXR1cm5PbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH07XG4gICAgR3JvdXBlZExpc3RTZWN0aW9uLnByb3RvdHlwZS5fZ2V0R3JvdXBLZXkgPSBmdW5jdGlvbiAoZ3JvdXAsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiAnZ3JvdXAtJyArIChncm91cCAmJiBncm91cC5rZXkgPyBncm91cC5rZXkgOiBTdHJpbmcoZ3JvdXAubGV2ZWwpICsgU3RyaW5nKGluZGV4KSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBnZXQgdGhlIGNvcnJlY3QgY3NzIGNsYXNzIHRvIHJlZmxlY3QgdGhlIGRyb3BwaW5nIHN0YXRlIGZvciBhIGdpdmVuIGdyb3VwXG4gICAgICpcbiAgICAgKiBJZiB0aGUgZ3JvdXAgaXMgdGhlIGN1cnJlbnQgZHJvcCB0YXJnZXQsIHJldHVybiB0aGUgZGVmYXVsdCBkcm9wcGluZyBjbGFzcyBuYW1lXG4gICAgICogT3RoZXJ3aXNlLCByZXR1cm4gJyc7XG4gICAgICpcbiAgICAgKi9cbiAgICBHcm91cGVkTGlzdFNlY3Rpb24ucHJvdG90eXBlLl9nZXREcm9wcGluZ0NsYXNzTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlzRHJvcHBpbmcgPSB0aGlzLnN0YXRlLmlzRHJvcHBpbmc7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIGdyb3VwID0gX2EuZ3JvdXAsIGdyb3VwZWRMaXN0Q2xhc3NOYW1lcyA9IF9hLmdyb3VwZWRMaXN0Q2xhc3NOYW1lcztcbiAgICAgICAgaXNEcm9wcGluZyA9ICEhKGdyb3VwICYmIGlzRHJvcHBpbmcpO1xuICAgICAgICByZXR1cm4gY3NzKGlzRHJvcHBpbmcgJiYgdGhpcy5fZHJvcHBpbmdDbGFzc05hbWUsIGlzRHJvcHBpbmcgJiYgREVGQVVMVF9EUk9QUElOR19DU1NfQ0xBU1MsIGlzRHJvcHBpbmcgJiYgZ3JvdXBlZExpc3RDbGFzc05hbWVzICYmIGdyb3VwZWRMaXN0Q2xhc3NOYW1lcy5ncm91cElzRHJvcHBpbmcpO1xuICAgIH07XG4gICAgcmV0dXJuIEdyb3VwZWRMaXN0U2VjdGlvbjtcbn0oUmVhY3QuQ29tcG9uZW50KSk7XG5leHBvcnQgeyBHcm91cGVkTGlzdFNlY3Rpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdyb3VwZWRMaXN0U2VjdGlvbi5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpbml0aWFsaXplQ29tcG9uZW50UmVmLCBjbGFzc05hbWVzRnVuY3Rpb24sIEtleUNvZGVzLCBnZXRSVExTYWZlS2V5Q29kZSwgY3NzIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IEdyb3VwZWRMaXN0U2VjdGlvbiB9IGZyb20gJy4vR3JvdXBlZExpc3RTZWN0aW9uJztcbmltcG9ydCB7IExpc3QgfSBmcm9tICcuLi8uLi9MaXN0JztcbmltcG9ydCB7IFNlbGVjdGlvbk1vZGUgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvc2VsZWN0aW9uL2luZGV4JztcbmltcG9ydCB7IERFRkFVTFRfUk9XX0hFSUdIVFMgfSBmcm9tICcuLi9EZXRhaWxzTGlzdC9EZXRhaWxzUm93LnN0eWxlcyc7XG5pbXBvcnQgeyBGb2N1c1pvbmUsIEZvY3VzWm9uZURpcmVjdGlvbiB9IGZyb20gJy4uLy4uL0ZvY3VzWm9uZSc7XG52YXIgZ2V0Q2xhc3NOYW1lcyA9IGNsYXNzTmFtZXNGdW5jdGlvbigpO1xudmFyIFJPV19IRUlHSFQgPSBERUZBVUxUX1JPV19IRUlHSFRTLnJvd0hlaWdodCwgQ09NUEFDVF9ST1dfSEVJR0hUID0gREVGQVVMVF9ST1dfSEVJR0hUUy5jb21wYWN0Um93SGVpZ2h0O1xudmFyIEdyb3VwZWRMaXN0QmFzZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoR3JvdXBlZExpc3RCYXNlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEdyb3VwZWRMaXN0QmFzZShwcm9wcykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX2xpc3QgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICAgICAgX3RoaXMuX3JlbmRlckdyb3VwID0gZnVuY3Rpb24gKGdyb3VwLCBncm91cEluZGV4KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgZHJhZ0Ryb3BFdmVudHMgPSBfYS5kcmFnRHJvcEV2ZW50cywgZHJhZ0Ryb3BIZWxwZXIgPSBfYS5kcmFnRHJvcEhlbHBlciwgZXZlbnRzVG9SZWdpc3RlciA9IF9hLmV2ZW50c1RvUmVnaXN0ZXIsIGdyb3VwUHJvcHMgPSBfYS5ncm91cFByb3BzLCBpdGVtcyA9IF9hLml0ZW1zLCBsaXN0UHJvcHMgPSBfYS5saXN0UHJvcHMsIG9uUmVuZGVyQ2VsbCA9IF9hLm9uUmVuZGVyQ2VsbCwgc2VsZWN0aW9uTW9kZSA9IF9hLnNlbGVjdGlvbk1vZGUsIHNlbGVjdGlvbiA9IF9hLnNlbGVjdGlvbiwgdmlld3BvcnQgPSBfYS52aWV3cG9ydCwgb25TaG91bGRWaXJ0dWFsaXplID0gX2Eub25TaG91bGRWaXJ0dWFsaXplLCBncm91cHMgPSBfYS5ncm91cHMsIGNvbXBhY3QgPSBfYS5jb21wYWN0O1xuICAgICAgICAgICAgLy8gb3ZlcnJpZGUgZ3JvdXAgaGVhZGVyL2Zvb3RlciBwcm9wcyBhcyBuZWVkZWRcbiAgICAgICAgICAgIHZhciBkaXZpZGVyUHJvcHMgPSB7XG4gICAgICAgICAgICAgICAgb25Ub2dnbGVTZWxlY3RHcm91cDogX3RoaXMuX29uVG9nZ2xlU2VsZWN0R3JvdXAsXG4gICAgICAgICAgICAgICAgb25Ub2dnbGVDb2xsYXBzZTogX3RoaXMuX29uVG9nZ2xlQ29sbGFwc2UsXG4gICAgICAgICAgICAgICAgb25Ub2dnbGVTdW1tYXJpemU6IF90aGlzLl9vblRvZ2dsZVN1bW1hcml6ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgaGVhZGVyUHJvcHMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZ3JvdXBQcm9wcy5oZWFkZXJQcm9wcyksIGRpdmlkZXJQcm9wcyk7XG4gICAgICAgICAgICB2YXIgc2hvd0FsbFByb3BzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGdyb3VwUHJvcHMuc2hvd0FsbFByb3BzKSwgZGl2aWRlclByb3BzKTtcbiAgICAgICAgICAgIHZhciBmb290ZXJQcm9wcyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBncm91cFByb3BzLmZvb3RlclByb3BzKSwgZGl2aWRlclByb3BzKTtcbiAgICAgICAgICAgIHZhciBncm91cE5lc3RpbmdEZXB0aCA9IF90aGlzLl9nZXRHcm91cE5lc3RpbmdEZXB0aCgpO1xuICAgICAgICAgICAgaWYgKCFncm91cFByb3BzLnNob3dFbXB0eUdyb3VwcyAmJiBncm91cCAmJiBncm91cC5jb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGZpbmFsTGlzdFByb3BzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIChsaXN0UHJvcHMgfHwge30pKSwgeyB2ZXJzaW9uOiBfdGhpcy5zdGF0ZS52ZXJzaW9uIH0pO1xuICAgICAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KEdyb3VwZWRMaXN0U2VjdGlvbiwgeyBrZXk6IF90aGlzLl9nZXRHcm91cEtleShncm91cCwgZ3JvdXBJbmRleCksIGRyYWdEcm9wRXZlbnRzOiBkcmFnRHJvcEV2ZW50cywgZHJhZ0Ryb3BIZWxwZXI6IGRyYWdEcm9wSGVscGVyLCBldmVudHNUb1JlZ2lzdGVyOiBldmVudHNUb1JlZ2lzdGVyLCBmb290ZXJQcm9wczogZm9vdGVyUHJvcHMsIGdldEdyb3VwSXRlbUxpbWl0OiBncm91cFByb3BzICYmIGdyb3VwUHJvcHMuZ2V0R3JvdXBJdGVtTGltaXQsIGdyb3VwOiBncm91cCwgZ3JvdXBJbmRleDogZ3JvdXBJbmRleCwgZ3JvdXBOZXN0aW5nRGVwdGg6IGdyb3VwTmVzdGluZ0RlcHRoLCBncm91cFByb3BzOiBncm91cFByb3BzLCBoZWFkZXJQcm9wczogaGVhZGVyUHJvcHMsIGxpc3RQcm9wczogZmluYWxMaXN0UHJvcHMsIGl0ZW1zOiBpdGVtcywgb25SZW5kZXJDZWxsOiBvblJlbmRlckNlbGwsIG9uUmVuZGVyR3JvdXBIZWFkZXI6IGdyb3VwUHJvcHMub25SZW5kZXJIZWFkZXIsIG9uUmVuZGVyR3JvdXBTaG93QWxsOiBncm91cFByb3BzLm9uUmVuZGVyU2hvd0FsbCwgb25SZW5kZXJHcm91cEZvb3RlcjogZ3JvdXBQcm9wcy5vblJlbmRlckZvb3Rlciwgc2VsZWN0aW9uTW9kZTogc2VsZWN0aW9uTW9kZSwgc2VsZWN0aW9uOiBzZWxlY3Rpb24sIHNob3dBbGxQcm9wczogc2hvd0FsbFByb3BzLCB2aWV3cG9ydDogdmlld3BvcnQsIG9uU2hvdWxkVmlydHVhbGl6ZTogb25TaG91bGRWaXJ0dWFsaXplLCBncm91cGVkTGlzdENsYXNzTmFtZXM6IF90aGlzLl9jbGFzc05hbWVzLCBncm91cHM6IGdyb3VwcywgY29tcGFjdDogY29tcGFjdCB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9nZXREZWZhdWx0R3JvdXBJdGVtTGltaXQgPSBmdW5jdGlvbiAoZ3JvdXApIHtcbiAgICAgICAgICAgIHJldHVybiBncm91cC5jb3VudDtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX2dldEdyb3VwSXRlbUxpbWl0ID0gZnVuY3Rpb24gKGdyb3VwKSB7XG4gICAgICAgICAgICB2YXIgZ3JvdXBQcm9wcyA9IF90aGlzLnByb3BzLmdyb3VwUHJvcHM7XG4gICAgICAgICAgICB2YXIgZ2V0R3JvdXBJdGVtTGltaXQgPSBncm91cFByb3BzICYmIGdyb3VwUHJvcHMuZ2V0R3JvdXBJdGVtTGltaXQgPyBncm91cFByb3BzLmdldEdyb3VwSXRlbUxpbWl0IDogX3RoaXMuX2dldERlZmF1bHRHcm91cEl0ZW1MaW1pdDtcbiAgICAgICAgICAgIHJldHVybiBnZXRHcm91cEl0ZW1MaW1pdChncm91cCk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9nZXRHcm91cEhlaWdodCA9IGZ1bmN0aW9uIChncm91cCkge1xuICAgICAgICAgICAgdmFyIHJvd0hlaWdodCA9IF90aGlzLnByb3BzLmNvbXBhY3QgPyBDT01QQUNUX1JPV19IRUlHSFQgOiBST1dfSEVJR0hUO1xuICAgICAgICAgICAgcmV0dXJuIHJvd0hlaWdodCArIChncm91cC5pc0NvbGxhcHNlZCA/IDAgOiByb3dIZWlnaHQgKiBfdGhpcy5fZ2V0R3JvdXBJdGVtTGltaXQoZ3JvdXApKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX2dldFBhZ2VIZWlnaHQgPSBmdW5jdGlvbiAoaXRlbUluZGV4KSB7XG4gICAgICAgICAgICB2YXIgZ3JvdXBzID0gX3RoaXMuc3RhdGUuZ3JvdXBzO1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMuZ2V0R3JvdXBIZWlnaHQsIGdldEdyb3VwSGVpZ2h0ID0gX2EgPT09IHZvaWQgMCA/IF90aGlzLl9nZXRHcm91cEhlaWdodCA6IF9hO1xuICAgICAgICAgICAgdmFyIHBhZ2VHcm91cCA9IGdyb3VwcyAmJiBncm91cHNbaXRlbUluZGV4XTtcbiAgICAgICAgICAgIGlmIChwYWdlR3JvdXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0R3JvdXBIZWlnaHQocGFnZUdyb3VwLCBpdGVtSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblRvZ2dsZUNvbGxhcHNlID0gZnVuY3Rpb24gKGdyb3VwKSB7XG4gICAgICAgICAgICB2YXIgZ3JvdXBQcm9wcyA9IF90aGlzLnByb3BzLmdyb3VwUHJvcHM7XG4gICAgICAgICAgICB2YXIgb25Ub2dnbGVDb2xsYXBzZSA9IGdyb3VwUHJvcHMgJiYgZ3JvdXBQcm9wcy5oZWFkZXJQcm9wcyAmJiBncm91cFByb3BzLmhlYWRlclByb3BzLm9uVG9nZ2xlQ29sbGFwc2U7XG4gICAgICAgICAgICBpZiAoZ3JvdXApIHtcbiAgICAgICAgICAgICAgICBpZiAob25Ub2dnbGVDb2xsYXBzZSkge1xuICAgICAgICAgICAgICAgICAgICBvblRvZ2dsZUNvbGxhcHNlKGdyb3VwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZ3JvdXAuaXNDb2xsYXBzZWQgPSAhZ3JvdXAuaXNDb2xsYXBzZWQ7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3VwZGF0ZUlzU29tZUdyb3VwRXhwYW5kZWQoKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25Ub2dnbGVTZWxlY3RHcm91cCA9IGZ1bmN0aW9uIChncm91cCkge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIHNlbGVjdGlvbiA9IF9hLnNlbGVjdGlvbiwgc2VsZWN0aW9uTW9kZSA9IF9hLnNlbGVjdGlvbk1vZGU7XG4gICAgICAgICAgICBpZiAoZ3JvdXAgJiYgc2VsZWN0aW9uICYmIHNlbGVjdGlvbk1vZGUgPT09IFNlbGVjdGlvbk1vZGUubXVsdGlwbGUpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24udG9nZ2xlUmFuZ2VTZWxlY3RlZChncm91cC5zdGFydEluZGV4LCBncm91cC5jb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9pc0lubmVyWm9uZUtleXN0cm9rZSA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgcmV0dXJuIGV2LndoaWNoID09PSBnZXRSVExTYWZlS2V5Q29kZShLZXlDb2Rlcy5yaWdodCk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblRvZ2dsZVN1bW1hcml6ZSA9IGZ1bmN0aW9uIChncm91cCkge1xuICAgICAgICAgICAgdmFyIGdyb3VwUHJvcHMgPSBfdGhpcy5wcm9wcy5ncm91cFByb3BzO1xuICAgICAgICAgICAgdmFyIG9uVG9nZ2xlU3VtbWFyaXplID0gZ3JvdXBQcm9wcyAmJiBncm91cFByb3BzLnNob3dBbGxQcm9wcyAmJiBncm91cFByb3BzLnNob3dBbGxQcm9wcy5vblRvZ2dsZVN1bW1hcml6ZTtcbiAgICAgICAgICAgIGlmIChvblRvZ2dsZVN1bW1hcml6ZSkge1xuICAgICAgICAgICAgICAgIG9uVG9nZ2xlU3VtbWFyaXplKGdyb3VwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChncm91cCkge1xuICAgICAgICAgICAgICAgICAgICBncm91cC5pc1Nob3dpbmdBbGwgPSAhZ3JvdXAuaXNTaG93aW5nQWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fZ2V0UGFnZVNwZWNpZmljYXRpb24gPSBmdW5jdGlvbiAoaXRlbUluZGV4KSB7XG4gICAgICAgICAgICB2YXIgZ3JvdXBzID0gX3RoaXMuc3RhdGUuZ3JvdXBzO1xuICAgICAgICAgICAgdmFyIHBhZ2VHcm91cCA9IGdyb3VwcyAmJiBncm91cHNbaXRlbUluZGV4XTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAga2V5OiBwYWdlR3JvdXAgJiYgcGFnZUdyb3VwLmtleSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIGluaXRpYWxpemVDb21wb25lbnRSZWYoX3RoaXMpO1xuICAgICAgICBfdGhpcy5faXNTb21lR3JvdXBFeHBhbmRlZCA9IF90aGlzLl9jb21wdXRlSXNTb21lR3JvdXBFeHBhbmRlZChwcm9wcy5ncm91cHMpO1xuICAgICAgICB2YXIgX2EgPSBwcm9wcy5saXN0UHJvcHMsIF9iID0gKF9hID09PSB2b2lkIDAgPyB7fSA6IF9hKS52ZXJzaW9uLCB2ZXJzaW9uID0gX2IgPT09IHZvaWQgMCA/IHt9IDogX2I7XG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgZ3JvdXBzOiBwcm9wcy5ncm91cHMsXG4gICAgICAgICAgICBpdGVtczogcHJvcHMuaXRlbXMsXG4gICAgICAgICAgICBsaXN0UHJvcHM6IHByb3BzLmxpc3RQcm9wcyxcbiAgICAgICAgICAgIHZlcnNpb246IHZlcnNpb24sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgR3JvdXBlZExpc3RCYXNlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIChuZXh0UHJvcHMsIHByZXZpb3VzU3RhdGUpIHtcbiAgICAgICAgdmFyIGdyb3VwcyA9IG5leHRQcm9wcy5ncm91cHMsIHNlbGVjdGlvbk1vZGUgPSBuZXh0UHJvcHMuc2VsZWN0aW9uTW9kZSwgY29tcGFjdCA9IG5leHRQcm9wcy5jb21wYWN0LCBpdGVtcyA9IG5leHRQcm9wcy5pdGVtcywgbGlzdFByb3BzID0gbmV4dFByb3BzLmxpc3RQcm9wcztcbiAgICAgICAgdmFyIGxpc3RWZXJzaW9uID0gbGlzdFByb3BzICYmIGxpc3RQcm9wcy52ZXJzaW9uO1xuICAgICAgICB2YXIgbmV4dFN0YXRlID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHByZXZpb3VzU3RhdGUpLCB7IHNlbGVjdGlvbk1vZGU6IHNlbGVjdGlvbk1vZGUsXG4gICAgICAgICAgICBjb21wYWN0OiBjb21wYWN0LFxuICAgICAgICAgICAgZ3JvdXBzOiBncm91cHMsXG4gICAgICAgICAgICBsaXN0UHJvcHM6IGxpc3RQcm9wcyB9KTtcbiAgICAgICAgdmFyIHNob3VsZEZvcmNlVXBkYXRlcyA9IGZhbHNlO1xuICAgICAgICB2YXIgcHJldmlvdXNMaXN0VmVyc2lvbiA9IHByZXZpb3VzU3RhdGUubGlzdFByb3BzICYmIHByZXZpb3VzU3RhdGUubGlzdFByb3BzLnZlcnNpb247XG4gICAgICAgIGlmIChsaXN0VmVyc2lvbiAhPT0gcHJldmlvdXNMaXN0VmVyc2lvbiB8fFxuICAgICAgICAgICAgaXRlbXMgIT09IHByZXZpb3VzU3RhdGUuaXRlbXMgfHxcbiAgICAgICAgICAgIGdyb3VwcyAhPT0gcHJldmlvdXNTdGF0ZS5ncm91cHMgfHxcbiAgICAgICAgICAgIHNlbGVjdGlvbk1vZGUgIT09IHByZXZpb3VzU3RhdGUuc2VsZWN0aW9uTW9kZSB8fFxuICAgICAgICAgICAgY29tcGFjdCAhPT0gcHJldmlvdXNTdGF0ZS5jb21wYWN0KSB7XG4gICAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgYW55IHByb3BzIG5vdCBwYXNzZWQgZXhwbGljaXRseSB0byBgTGlzdGAgd2hpY2ggaGF2ZSBhbiBpbXBhY3Qgb24gdGhlIGJlaGF2aW9yIG9mIGBvblJlbmRlckNlbGxgLFxuICAgICAgICAgICAgLy8gdGhlc2UgbmVlZCB0byAnZm9yY2UtdXBkYXRlJyB0aGlzIGNvbXBvbmVudCBieSByZXZ2aW5nIHRoZSB2ZXJzaW9uLiBPdGhlcndpc2UsIHRoZSBMaXN0IG1pZ2h0IHJlbmRlciB3aXRoIHN0YWxlXG4gICAgICAgICAgICAvLyBkYXRhLlxuICAgICAgICAgICAgc2hvdWxkRm9yY2VVcGRhdGVzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hvdWxkRm9yY2VVcGRhdGVzKSB7XG4gICAgICAgICAgICBuZXh0U3RhdGUgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgbmV4dFN0YXRlKSwgeyB2ZXJzaW9uOiB7fSB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV4dFN0YXRlO1xuICAgIH07XG4gICAgR3JvdXBlZExpc3RCYXNlLnByb3RvdHlwZS5zY3JvbGxUb0luZGV4ID0gZnVuY3Rpb24gKGluZGV4LCBtZWFzdXJlSXRlbSwgc2Nyb2xsVG9Nb2RlKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0LmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2xpc3QuY3VycmVudC5zY3JvbGxUb0luZGV4KGluZGV4LCBtZWFzdXJlSXRlbSwgc2Nyb2xsVG9Nb2RlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgR3JvdXBlZExpc3RCYXNlLnByb3RvdHlwZS5nZXRTdGFydEl0ZW1JbmRleEluVmlldyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3QuY3VycmVudC5nZXRTdGFydEl0ZW1JbmRleEluVmlldygpIHx8IDA7XG4gICAgfTtcbiAgICBHcm91cGVkTGlzdEJhc2UucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBncm91cFByb3BzID0gX2EuZ3JvdXBQcm9wcywgX2IgPSBfYS5ncm91cHMsIGdyb3VwcyA9IF9iID09PSB2b2lkIDAgPyBbXSA6IF9iO1xuICAgICAgICBpZiAoZ3JvdXBQcm9wcyAmJiBncm91cFByb3BzLmlzQWxsR3JvdXBzQ29sbGFwc2VkKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRHcm91cHNDb2xsYXBzZWRTdGF0ZShncm91cHMsIGdyb3VwUHJvcHMuaXNBbGxHcm91cHNDb2xsYXBzZWQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBHcm91cGVkTGlzdEJhc2UucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgY2xhc3NOYW1lID0gX2EuY2xhc3NOYW1lLCB1c2VQYWdlQ2FjaGUgPSBfYS51c2VQYWdlQ2FjaGUsIG9uU2hvdWxkVmlydHVhbGl6ZSA9IF9hLm9uU2hvdWxkVmlydHVhbGl6ZSwgdGhlbWUgPSBfYS50aGVtZSwgX2IgPSBfYS5yb2xlLCByb2xlID0gX2IgPT09IHZvaWQgMCA/ICd0cmVlZ3JpZCcgOiBfYiwgc3R5bGVzID0gX2Euc3R5bGVzLCBjb21wYWN0ID0gX2EuY29tcGFjdCwgX2MgPSBfYS5mb2N1c1pvbmVQcm9wcywgZm9jdXNab25lUHJvcHMgPSBfYyA9PT0gdm9pZCAwID8ge30gOiBfYywgX2QgPSBfYS5yb290TGlzdFByb3BzLCByb290TGlzdFByb3BzID0gX2QgPT09IHZvaWQgMCA/IHt9IDogX2Q7XG4gICAgICAgIHZhciBfZSA9IHRoaXMuc3RhdGUsIGdyb3VwcyA9IF9lLmdyb3VwcywgdmVyc2lvbiA9IF9lLnZlcnNpb247XG4gICAgICAgIHRoaXMuX2NsYXNzTmFtZXMgPSBnZXRDbGFzc05hbWVzKHN0eWxlcywge1xuICAgICAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgICAgICBjb21wYWN0OiBjb21wYWN0LFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIF9mID0gZm9jdXNab25lUHJvcHMuc2hvdWxkRW50ZXJJbm5lclpvbmUsIHNob3VsZEVudGVySW5uZXJab25lID0gX2YgPT09IHZvaWQgMCA/IHRoaXMuX2lzSW5uZXJab25lS2V5c3Ryb2tlIDogX2Y7XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChGb2N1c1pvbmUsIF9fYXNzaWduKHsgZGlyZWN0aW9uOiBGb2N1c1pvbmVEaXJlY3Rpb24udmVydGljYWwsIFwiZGF0YS1hdXRvbWF0aW9uaWRcIjogXCJHcm91cGVkTGlzdFwiLCBcImRhdGEtaXMtc2Nyb2xsYWJsZVwiOiBcImZhbHNlXCIsIHJvbGU6IFwicHJlc2VudGF0aW9uXCIgfSwgZm9jdXNab25lUHJvcHMsIHsgc2hvdWxkRW50ZXJJbm5lclpvbmU6IHNob3VsZEVudGVySW5uZXJab25lLCBjbGFzc05hbWU6IGNzcyh0aGlzLl9jbGFzc05hbWVzLnJvb3QsIGZvY3VzWm9uZVByb3BzLmNsYXNzTmFtZSkgfSksICFncm91cHMgPyAodGhpcy5fcmVuZGVyR3JvdXAodW5kZWZpbmVkLCAwKSkgOiAoUmVhY3QuY3JlYXRlRWxlbWVudChMaXN0LCBfX2Fzc2lnbih7IHJlZjogdGhpcy5fbGlzdCwgcm9sZTogcm9sZSwgaXRlbXM6IGdyb3Vwcywgb25SZW5kZXJDZWxsOiB0aGlzLl9yZW5kZXJHcm91cCwgZ2V0SXRlbUNvdW50Rm9yUGFnZTogdGhpcy5fcmV0dXJuT25lLCBnZXRQYWdlSGVpZ2h0OiB0aGlzLl9nZXRQYWdlSGVpZ2h0LCBnZXRQYWdlU3BlY2lmaWNhdGlvbjogdGhpcy5fZ2V0UGFnZVNwZWNpZmljYXRpb24sIHVzZVBhZ2VDYWNoZTogdXNlUGFnZUNhY2hlLCBvblNob3VsZFZpcnR1YWxpemU6IG9uU2hvdWxkVmlydHVhbGl6ZSwgdmVyc2lvbjogdmVyc2lvbiB9LCByb290TGlzdFByb3BzKSkpKSk7XG4gICAgfTtcbiAgICBHcm91cGVkTGlzdEJhc2UucHJvdG90eXBlLmZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmZvcmNlVXBkYXRlLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuX2ZvcmNlTGlzdFVwZGF0ZXMoKTtcbiAgICB9O1xuICAgIEdyb3VwZWRMaXN0QmFzZS5wcm90b3R5cGUudG9nZ2xlQ29sbGFwc2VBbGwgPSBmdW5jdGlvbiAoYWxsQ29sbGFwc2VkKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuc3RhdGUuZ3JvdXBzLCBncm91cHMgPSBfYSA9PT0gdm9pZCAwID8gW10gOiBfYTtcbiAgICAgICAgdmFyIGdyb3VwUHJvcHMgPSB0aGlzLnByb3BzLmdyb3VwUHJvcHM7XG4gICAgICAgIHZhciBvblRvZ2dsZUNvbGxhcHNlQWxsID0gZ3JvdXBQcm9wcyAmJiBncm91cFByb3BzLm9uVG9nZ2xlQ29sbGFwc2VBbGw7XG4gICAgICAgIGlmIChncm91cHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKG9uVG9nZ2xlQ29sbGFwc2VBbGwpIHtcbiAgICAgICAgICAgICAgICBvblRvZ2dsZUNvbGxhcHNlQWxsKGFsbENvbGxhcHNlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9zZXRHcm91cHNDb2xsYXBzZWRTdGF0ZShncm91cHMsIGFsbENvbGxhcHNlZCk7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVJc1NvbWVHcm91cEV4cGFuZGVkKCk7XG4gICAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEdyb3VwZWRMaXN0QmFzZS5wcm90b3R5cGUuX3NldEdyb3Vwc0NvbGxhcHNlZFN0YXRlID0gZnVuY3Rpb24gKGdyb3VwcywgaXNDb2xsYXBzZWQpIHtcbiAgICAgICAgZm9yICh2YXIgZ3JvdXBJbmRleCA9IDA7IGdyb3VwSW5kZXggPCBncm91cHMubGVuZ3RoOyBncm91cEluZGV4KyspIHtcbiAgICAgICAgICAgIGdyb3Vwc1tncm91cEluZGV4XS5pc0NvbGxhcHNlZCA9IGlzQ29sbGFwc2VkO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBHcm91cGVkTGlzdEJhc2UucHJvdG90eXBlLl9yZXR1cm5PbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH07XG4gICAgR3JvdXBlZExpc3RCYXNlLnByb3RvdHlwZS5fZ2V0R3JvdXBLZXkgPSBmdW5jdGlvbiAoZ3JvdXAsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiAnZ3JvdXAtJyArIChncm91cCAmJiBncm91cC5rZXkgPyBncm91cC5rZXkgOiBTdHJpbmcoaW5kZXgpKTtcbiAgICB9O1xuICAgIEdyb3VwZWRMaXN0QmFzZS5wcm90b3R5cGUuX2dldEdyb3VwTmVzdGluZ0RlcHRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZ3JvdXBzID0gdGhpcy5zdGF0ZS5ncm91cHM7XG4gICAgICAgIHZhciBsZXZlbCA9IDA7XG4gICAgICAgIHZhciBncm91cHNJbkxldmVsID0gZ3JvdXBzO1xuICAgICAgICB3aGlsZSAoZ3JvdXBzSW5MZXZlbCAmJiBncm91cHNJbkxldmVsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxldmVsKys7XG4gICAgICAgICAgICBncm91cHNJbkxldmVsID0gZ3JvdXBzSW5MZXZlbFswXS5jaGlsZHJlbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGV2ZWw7XG4gICAgfTtcbiAgICBHcm91cGVkTGlzdEJhc2UucHJvdG90eXBlLl9mb3JjZUxpc3RVcGRhdGVzID0gZnVuY3Rpb24gKGdyb3Vwcykge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZlcnNpb246IHt9LFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEdyb3VwZWRMaXN0QmFzZS5wcm90b3R5cGUuX2NvbXB1dGVJc1NvbWVHcm91cEV4cGFuZGVkID0gZnVuY3Rpb24gKGdyb3Vwcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gISEoZ3JvdXBzICYmXG4gICAgICAgICAgICBncm91cHMuc29tZShmdW5jdGlvbiAoZ3JvdXApIHsgcmV0dXJuIChncm91cC5jaGlsZHJlbiA/IF90aGlzLl9jb21wdXRlSXNTb21lR3JvdXBFeHBhbmRlZChncm91cC5jaGlsZHJlbikgOiAhZ3JvdXAuaXNDb2xsYXBzZWQpOyB9KSk7XG4gICAgfTtcbiAgICBHcm91cGVkTGlzdEJhc2UucHJvdG90eXBlLl91cGRhdGVJc1NvbWVHcm91cEV4cGFuZGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZ3JvdXBzID0gdGhpcy5zdGF0ZS5ncm91cHM7XG4gICAgICAgIHZhciBvbkdyb3VwRXhwYW5kU3RhdGVDaGFuZ2VkID0gdGhpcy5wcm9wcy5vbkdyb3VwRXhwYW5kU3RhdGVDaGFuZ2VkO1xuICAgICAgICB2YXIgbmV3SXNTb21lR3JvdXBFeHBhbmRlZCA9IHRoaXMuX2NvbXB1dGVJc1NvbWVHcm91cEV4cGFuZGVkKGdyb3Vwcyk7XG4gICAgICAgIGlmICh0aGlzLl9pc1NvbWVHcm91cEV4cGFuZGVkICE9PSBuZXdJc1NvbWVHcm91cEV4cGFuZGVkKSB7XG4gICAgICAgICAgICBpZiAob25Hcm91cEV4cGFuZFN0YXRlQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIG9uR3JvdXBFeHBhbmRTdGF0ZUNoYW5nZWQobmV3SXNTb21lR3JvdXBFeHBhbmRlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9pc1NvbWVHcm91cEV4cGFuZGVkID0gbmV3SXNTb21lR3JvdXBFeHBhbmRlZDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgR3JvdXBlZExpc3RCYXNlLmRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgc2VsZWN0aW9uTW9kZTogU2VsZWN0aW9uTW9kZS5tdWx0aXBsZSxcbiAgICAgICAgaXNIZWFkZXJWaXNpYmxlOiB0cnVlLFxuICAgICAgICBncm91cFByb3BzOiB7fSxcbiAgICAgICAgY29tcGFjdDogZmFsc2UsXG4gICAgfTtcbiAgICByZXR1cm4gR3JvdXBlZExpc3RCYXNlO1xufShSZWFjdC5Db21wb25lbnQpKTtcbmV4cG9ydCB7IEdyb3VwZWRMaXN0QmFzZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R3JvdXBlZExpc3QuYmFzZS5qcy5tYXAiLCJpbXBvcnQgeyBzdHlsZWQgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgZ2V0U3R5bGVzIH0gZnJvbSAnLi9Hcm91cGVkTGlzdC5zdHlsZXMnO1xuaW1wb3J0IHsgR3JvdXBlZExpc3RCYXNlIH0gZnJvbSAnLi9Hcm91cGVkTGlzdC5iYXNlJztcbmV4cG9ydCB2YXIgR3JvdXBlZExpc3QgPSBzdHlsZWQoR3JvdXBlZExpc3RCYXNlLCBnZXRTdHlsZXMsIHVuZGVmaW5lZCwge1xuICAgIHNjb3BlOiAnR3JvdXBlZExpc3QnLFxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Hcm91cGVkTGlzdC5qcy5tYXAiLCJ2YXIgUkVBQ1RfTElGRUNZQ0xFX0VYQ0xVU0lPTlMgPSBbXG4gICAgJ3NldFN0YXRlJyxcbiAgICAncmVuZGVyJyxcbiAgICAnY29tcG9uZW50V2lsbE1vdW50JyxcbiAgICAnVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCcsXG4gICAgJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsXG4gICAgJ1VOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICAnc2hvdWxkQ29tcG9uZW50VXBkYXRlJyxcbiAgICAnY29tcG9uZW50V2lsbFVwZGF0ZScsXG4gICAgJ2dldFNuYXBzaG90QmVmb3JlVXBkYXRlJyxcbiAgICAnVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUnLFxuICAgICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG5dO1xuLyoqXG4gKiBBbGxvd3MgeW91IHRvIGhvaXN0IG1ldGhvZHMsIGV4Y2VwdCB0aG9zZSBpbiBhbiBleGNsdXNpb24gc2V0IGZyb20gYSBzb3VyY2Ugb2JqZWN0IGludG8gYSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKlxuICogQHB1YmxpY1xuICogQHBhcmFtIGRlc3RpbmF0aW9uIC0gVGhlIGluc3RhbmNlIG9mIHRoZSBvYmplY3QgdG8gaG9pc3QgdGhlIG1ldGhvZHMgb250by5cbiAqIEBwYXJhbSBzb3VyY2UgLSBUaGUgaW5zdGFuY2Ugb2YgdGhlIG9iamVjdCB3aGVyZSB0aGUgbWV0aG9kcyBhcmUgaG9pc3RlZCBmcm9tLlxuICogQHBhcmFtIGV4Y2x1c2lvbnMgLSAoT3B0aW9uYWwpIFdoYXQgbWV0aG9kcyB0byBleGNsdWRlIGZyb20gYmVpbmcgaG9pc3RlZC5cbiAqIEByZXR1cm5zIEFuIGFycmF5IG9mIG5hbWVzIG9mIG1ldGhvZHMgdGhhdCB3ZXJlIGhvaXN0ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBob2lzdE1ldGhvZHMoXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZGVzdGluYXRpb24sIFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbnNvdXJjZSwgZXhjbHVzaW9ucykge1xuICAgIGlmIChleGNsdXNpb25zID09PSB2b2lkIDApIHsgZXhjbHVzaW9ucyA9IFJFQUNUX0xJRkVDWUNMRV9FWENMVVNJT05TOyB9XG4gICAgdmFyIGhvaXN0ZWQgPSBbXTtcbiAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlW21ldGhvZE5hbWVdID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICBkZXN0aW5hdGlvblttZXRob2ROYW1lXSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAoIWV4Y2x1c2lvbnMgfHwgZXhjbHVzaW9ucy5pbmRleE9mKG1ldGhvZE5hbWUpID09PSAtMSkpIHtcbiAgICAgICAgICAgIGhvaXN0ZWQucHVzaChtZXRob2ROYW1lKTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICBkZXN0aW5hdGlvblttZXRob2ROYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc291cmNlW21ldGhvZE5hbWVdLmFwcGx5KHNvdXJjZSwgYXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBmb3IgKHZhciBtZXRob2ROYW1lIGluIHNvdXJjZSkge1xuICAgICAgICBfbG9vcF8xKG1ldGhvZE5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gaG9pc3RlZDtcbn1cbi8qKlxuICogUHJvdmlkZXMgYSBtZXRob2QgZm9yIGNvbnZlbmllbmNlIHRvIHVuaG9pc3QgaG9pc3RlZCBtZXRob2RzLlxuICpcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSBzb3VyY2UgLSBUaGUgc291cmNlIG9iamVjdCB1cG9uIHdoaWNoIG1ldGhvZHMgd2VyZSBob2lzdGVkLlxuICogQHBhcmFtIG1ldGhvZE5hbWVzIC0gQW4gYXJyYXkgb2YgbWV0aG9kIG5hbWVzIHRvIHVuaG9pc3QuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5leHBvcnQgZnVuY3Rpb24gdW5ob2lzdE1ldGhvZHMoc291cmNlLCBtZXRob2ROYW1lcykge1xuICAgIG1ldGhvZE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHsgcmV0dXJuIGRlbGV0ZSBzb3VyY2VbbWV0aG9kTmFtZV07IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aG9pc3QuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBob2lzdE1ldGhvZHMsIHVuaG9pc3RNZXRob2RzIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbnZhciBCYXNlRGVjb3JhdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhCYXNlRGVjb3JhdG9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJhc2VEZWNvcmF0b3IocHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl91cGRhdGVDb21wb3NlZENvbXBvbmVudFJlZiA9IF90aGlzLl91cGRhdGVDb21wb3NlZENvbXBvbmVudFJlZi5iaW5kKF90aGlzKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSByZWYgdG8gdGhlIGNvbXBvbmVudCBjb21wb3NlZCBieSB0aGUgZGVjb3JhdG9yLCB3aGljaCB3aWxsIGFsc28gdGFrZSBjYXJlIG9mIGhvaXN0aW5nXG4gICAgICogKGFuZCB1bmhvaXN0aW5nIGFzIGFwcHJvcHJpYXRlKSBtZXRob2RzIGZyb20gc2FpZCBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBQYXNzIHRoaXMgbWV0aG9kIGFzIHRoZSBhcmd1bWVudCB0byB0aGUgJ3JlZicgcHJvcGVydHkgb2YgdGhlIGNvbXBvc2VkIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBCYXNlRGVjb3JhdG9yLnByb3RvdHlwZS5fdXBkYXRlQ29tcG9zZWRDb21wb25lbnRSZWYgPSBmdW5jdGlvbiAoY29tcG9zZWRDb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgICB0aGlzLl9jb21wb3NlZENvbXBvbmVudEluc3RhbmNlID0gY29tcG9zZWRDb21wb25lbnRJbnN0YW5jZTtcbiAgICAgICAgaWYgKGNvbXBvc2VkQ29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHRoaXMuX2hvaXN0ZWQgPSBob2lzdE1ldGhvZHModGhpcywgY29tcG9zZWRDb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5faG9pc3RlZCkge1xuICAgICAgICAgICAgdW5ob2lzdE1ldGhvZHModGhpcywgdGhpcy5faG9pc3RlZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBCYXNlRGVjb3JhdG9yO1xufShSZWFjdC5Db21wb25lbnQpKTtcbmV4cG9ydCB7IEJhc2VEZWNvcmF0b3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJhc2VEZWNvcmF0b3IuanMubWFwIiwiLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGJvdW5kaW5nIGNsaWVudCByZWN0LiBQYXNzaW5nIGluIHdpbmRvdyB3aWxsIGdldCB0aGUgd2luZG93IHNpemUuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVjdChlbGVtZW50KSB7XG4gICAgdmFyIHJlY3Q7XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQgPT09IHdpbmRvdykge1xuICAgICAgICAgICAgcmVjdCA9IHtcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICB3aWR0aDogd2luZG93LmlubmVyV2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHdpbmRvdy5pbm5lcldpZHRoLFxuICAgICAgICAgICAgICAgIGJvdHRvbTogd2luZG93LmlubmVySGVpZ2h0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCkge1xuICAgICAgICAgICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlY3Q7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRSZWN0LmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJhc2VEZWNvcmF0b3IgfSBmcm9tICcuL0Jhc2VEZWNvcmF0b3InO1xuaW1wb3J0IHsgZmluZFNjcm9sbGFibGVQYXJlbnQsIGdldFJlY3QsIGdldFdpbmRvdywgQXN5bmMsIEV2ZW50R3JvdXAgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xudmFyIFJFU0laRV9ERUxBWSA9IDUwMDtcbnZhciBNQVhfUkVTSVpFX0FUVEVNUFRTID0gMztcbi8qKlxuICogQSBkZWNvcmF0b3IgdG8gdXBkYXRlIGRlY29yYXRlZCBjb21wb25lbnQgb24gdmlld3BvcnQgb3Igd2luZG93IHJlc2l6ZSBldmVudHMuXG4gKlxuICogQHBhcmFtIENvbXBvc2VkQ29tcG9uZW50IGRlY29yYXRlZCBSZWFjdCBjb21wb25lbnQgcmVmZXJlbmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aFZpZXdwb3J0KENvbXBvc2VkQ29tcG9uZW50KSB7XG4gICAgcmV0dXJuIC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKFdpdGhWaWV3cG9ydENvbXBvbmVudCwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gV2l0aFZpZXdwb3J0Q29tcG9uZW50KHByb3BzKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICAgICAgICAgIF90aGlzLl9yb290ID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgICAgICAgICBfdGhpcy5fcmVnaXN0ZXJSZXNpemVPYnNlcnZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2luID0gZ2V0V2luZG93KF90aGlzLl9yb290LmN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIF90aGlzLl92aWV3cG9ydFJlc2l6ZU9ic2VydmVyID0gbmV3IHdpbi5SZXNpemVPYnNlcnZlcihfdGhpcy5fb25Bc3luY1Jlc2l6ZSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3ZpZXdwb3J0UmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShfdGhpcy5fcm9vdC5jdXJyZW50KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5fdW5yZWdpc3RlclJlc2l6ZU9ic2VydmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fdmlld3BvcnRSZXNpemVPYnNlcnZlcikge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdmlld3BvcnRSZXNpemVPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5fdmlld3BvcnRSZXNpemVPYnNlcnZlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLyogTm90ZTogdXNpbmcgbGFtYmRhIGhlcmUgYmVjYXVzZSBkZWNvcmF0b3JzIGRvbid0IHNlZW0gdG8gd29yayBpbiBkZWNvcmF0b3JzLiAqL1xuICAgICAgICAgICAgX3RoaXMuX3VwZGF0ZVZpZXdwb3J0ID0gZnVuY3Rpb24gKHdpdGhGb3JjZVVwZGF0ZSkge1xuICAgICAgICAgICAgICAgIHZhciB2aWV3cG9ydCA9IF90aGlzLnN0YXRlLnZpZXdwb3J0O1xuICAgICAgICAgICAgICAgIHZhciB2aWV3cG9ydEVsZW1lbnQgPSBfdGhpcy5fcm9vdC5jdXJyZW50O1xuICAgICAgICAgICAgICAgIHZhciBzY3JvbGxFbGVtZW50ID0gZmluZFNjcm9sbGFibGVQYXJlbnQodmlld3BvcnRFbGVtZW50KTtcbiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsUmVjdCA9IGdldFJlY3Qoc2Nyb2xsRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgdmFyIGNsaWVudFJlY3QgPSBnZXRSZWN0KHZpZXdwb3J0RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgdmFyIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpdGhGb3JjZVVwZGF0ZSAmJiBfdGhpcy5fY29tcG9zZWRDb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2NvbXBvc2VkQ29tcG9uZW50SW5zdGFuY2UuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdmFyIGlzU2l6ZUNoYW5nZWQgPSAoY2xpZW50UmVjdCAmJiBjbGllbnRSZWN0LndpZHRoKSAhPT0gdmlld3BvcnQud2lkdGggfHwgKHNjcm9sbFJlY3QgJiYgc2Nyb2xsUmVjdC5oZWlnaHQpICE9PSB2aWV3cG9ydC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgaWYgKGlzU2l6ZUNoYW5nZWQgJiYgX3RoaXMuX3Jlc2l6ZUF0dGVtcHRzIDwgTUFYX1JFU0laRV9BVFRFTVBUUyAmJiBjbGllbnRSZWN0ICYmIHNjcm9sbFJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3Jlc2l6ZUF0dGVtcHRzKys7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGNsaWVudFJlY3Qud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBzY3JvbGxSZWN0LmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl91cGRhdGVWaWV3cG9ydCh3aXRoRm9yY2VVcGRhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9yZXNpemVBdHRlbXB0cyA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUNvbXBvbmVudCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5fYXN5bmMgPSBuZXcgQXN5bmMoX3RoaXMpO1xuICAgICAgICAgICAgX3RoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEdyb3VwKF90aGlzKTtcbiAgICAgICAgICAgIF90aGlzLl9yZXNpemVBdHRlbXB0cyA9IDA7XG4gICAgICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICB2aWV3cG9ydDoge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9XG4gICAgICAgIFdpdGhWaWV3cG9ydENvbXBvbmVudC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBza2lwVmlld3BvcnRNZWFzdXJlcyA9IF9hLnNraXBWaWV3cG9ydE1lYXN1cmVzLCBkaXNhYmxlUmVzaXplT2JzZXJ2ZXIgPSBfYS5kaXNhYmxlUmVzaXplT2JzZXJ2ZXI7XG4gICAgICAgICAgICB2YXIgd2luID0gZ2V0V2luZG93KHRoaXMuX3Jvb3QuY3VycmVudCk7XG4gICAgICAgICAgICB0aGlzLl9vbkFzeW5jUmVzaXplID0gdGhpcy5fYXN5bmMuZGVib3VuY2UodGhpcy5fb25Bc3luY1Jlc2l6ZSwgUkVTSVpFX0RFTEFZLCB7XG4gICAgICAgICAgICAgICAgbGVhZGluZzogZmFsc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICghc2tpcFZpZXdwb3J0TWVhc3VyZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWRpc2FibGVSZXNpemVPYnNlcnZlciAmJiB0aGlzLl9pc1Jlc2l6ZU9ic2VydmVyQXZhaWxhYmxlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVnaXN0ZXJSZXNpemVPYnNlcnZlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzLm9uKHdpbiwgJ3Jlc2l6ZScsIHRoaXMuX29uQXN5bmNSZXNpemUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVWaWV3cG9ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBXaXRoVmlld3BvcnRDb21wb25lbnQucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2aW91c1Byb3BzKSB7XG4gICAgICAgICAgICB2YXIgcHJldmlvdXNTa2lwVmlld3BvcnRNZWFzdXJlcyA9IHByZXZpb3VzUHJvcHMuc2tpcFZpZXdwb3J0TWVhc3VyZXM7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBza2lwVmlld3BvcnRNZWFzdXJlcyA9IF9hLnNraXBWaWV3cG9ydE1lYXN1cmVzLCBkaXNhYmxlUmVzaXplT2JzZXJ2ZXIgPSBfYS5kaXNhYmxlUmVzaXplT2JzZXJ2ZXI7XG4gICAgICAgICAgICB2YXIgd2luID0gZ2V0V2luZG93KHRoaXMuX3Jvb3QuY3VycmVudCk7XG4gICAgICAgICAgICBpZiAoc2tpcFZpZXdwb3J0TWVhc3VyZXMgIT09IHByZXZpb3VzU2tpcFZpZXdwb3J0TWVhc3VyZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNraXBWaWV3cG9ydE1lYXN1cmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZGlzYWJsZVJlc2l6ZU9ic2VydmVyICYmIHRoaXMuX2lzUmVzaXplT2JzZXJ2ZXJBdmFpbGFibGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl92aWV3cG9ydFJlc2l6ZU9ic2VydmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVnaXN0ZXJSZXNpemVPYnNlcnZlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzLm9uKHdpbiwgJ3Jlc2l6ZScsIHRoaXMuX29uQXN5bmNSZXNpemUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVZpZXdwb3J0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl91bnJlZ2lzdGVyUmVzaXplT2JzZXJ2ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzLm9mZih3aW4sICdyZXNpemUnLCB0aGlzLl9vbkFzeW5jUmVzaXplKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFdpdGhWaWV3cG9ydENvbXBvbmVudC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLl9ldmVudHMuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5fYXN5bmMuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5fdW5yZWdpc3RlclJlc2l6ZU9ic2VydmVyKCk7XG4gICAgICAgIH07XG4gICAgICAgIFdpdGhWaWV3cG9ydENvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHZpZXdwb3J0ID0gdGhpcy5zdGF0ZS52aWV3cG9ydDtcbiAgICAgICAgICAgIHZhciBuZXdWaWV3cG9ydCA9IHZpZXdwb3J0LndpZHRoID4gMCAmJiB2aWV3cG9ydC5oZWlnaHQgPiAwID8gdmlld3BvcnQgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwibXMtVmlld3BvcnRcIiwgcmVmOiB0aGlzLl9yb290LCBzdHlsZTogeyBtaW5XaWR0aDogMSwgbWluSGVpZ2h0OiAxIH0gfSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvc2VkQ29tcG9uZW50LCBfX2Fzc2lnbih7IHJlZjogdGhpcy5fdXBkYXRlQ29tcG9zZWRDb21wb25lbnRSZWYsIHZpZXdwb3J0OiBuZXdWaWV3cG9ydCB9LCB0aGlzLnByb3BzKSkpKTtcbiAgICAgICAgfTtcbiAgICAgICAgV2l0aFZpZXdwb3J0Q29tcG9uZW50LnByb3RvdHlwZS5mb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVZpZXdwb3J0KHRydWUpO1xuICAgICAgICB9O1xuICAgICAgICBXaXRoVmlld3BvcnRDb21wb25lbnQucHJvdG90eXBlLl9vbkFzeW5jUmVzaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlVmlld3BvcnQoKTtcbiAgICAgICAgfTtcbiAgICAgICAgV2l0aFZpZXdwb3J0Q29tcG9uZW50LnByb3RvdHlwZS5faXNSZXNpemVPYnNlcnZlckF2YWlsYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB3aW4gPSBnZXRXaW5kb3codGhpcy5fcm9vdC5jdXJyZW50KTtcbiAgICAgICAgICAgIHJldHVybiB3aW4gJiYgd2luLlJlc2l6ZU9ic2VydmVyO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gV2l0aFZpZXdwb3J0Q29tcG9uZW50O1xuICAgIH0oQmFzZURlY29yYXRvcikpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2l0aFZpZXdwb3J0LmpzLm1hcCIsImltcG9ydCB7IF9fc3ByZWFkQXJyYXlzIH0gZnJvbSBcInRzbGliXCI7XG4vKipcbiAqIFRha2VzIGFuIGFycmF5IG9mIGdyb3VwcyBhbmQgcmV0dXJucyBhIGNvdW50IG9mIHRoZSBncm91cHMgYW5kIGFsbCBkZXNjZW5kYW50IGdyb3Vwcy5cbiAqIEBwYXJhbSBncm91cHMgLSBUaGUgYXJyYXkgb2YgZ3JvdXBzIHRvIGNvdW50LlxuICovXG5leHBvcnQgdmFyIEdldEdyb3VwQ291bnQgPSBmdW5jdGlvbiAoZ3JvdXBzKSB7XG4gICAgdmFyIHRvdGFsID0gMDtcbiAgICBpZiAoZ3JvdXBzKSB7XG4gICAgICAgIHZhciByZW1haW5pbmdHcm91cHMgPSBfX3NwcmVhZEFycmF5cyhncm91cHMpO1xuICAgICAgICB2YXIgY3VycmVudEdyb3VwID0gdm9pZCAwO1xuICAgICAgICB3aGlsZSAocmVtYWluaW5nR3JvdXBzICYmIHJlbWFpbmluZ0dyb3Vwcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICArK3RvdGFsO1xuICAgICAgICAgICAgY3VycmVudEdyb3VwID0gcmVtYWluaW5nR3JvdXBzLnBvcCgpO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRHcm91cCAmJiBjdXJyZW50R3JvdXAuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICByZW1haW5pbmdHcm91cHMucHVzaC5hcHBseShyZW1haW5pbmdHcm91cHMsIGN1cnJlbnRHcm91cC5jaGlsZHJlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvdGFsO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdyb3VwZWRMaXN0VXRpbGl0eS5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19kZWNvcmF0ZSwgX19leHRlbmRzLCBfX3NwcmVhZEFycmF5cyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUNvbXBvbmVudFJlZiwgRm9jdXNSZWN0cywgQXN5bmMsIEtleUNvZGVzLCBlbGVtZW50Q29udGFpbnMsIGdldFJUTFNhZmVLZXlDb2RlLCBjbGFzc05hbWVzRnVuY3Rpb24sIG1lbW9pemVGdW5jdGlvbiwgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgQ2hlY2tib3hWaXNpYmlsaXR5LCBDb2x1bW5BY3Rpb25zTW9kZSwgQ29uc3RyYWluTW9kZSwgRGV0YWlsc0xpc3RMYXlvdXRNb2RlLCBDb2x1bW5EcmFnRW5kTG9jYXRpb24sIH0gZnJvbSAnLi4vRGV0YWlsc0xpc3QvRGV0YWlsc0xpc3QudHlwZXMnO1xuaW1wb3J0IHsgRGV0YWlsc0hlYWRlciB9IGZyb20gJy4uL0RldGFpbHNMaXN0L0RldGFpbHNIZWFkZXInO1xuaW1wb3J0IHsgU2VsZWN0QWxsVmlzaWJpbGl0eSwgfSBmcm9tICcuLi9EZXRhaWxzTGlzdC9EZXRhaWxzSGVhZGVyLnR5cGVzJztcbmltcG9ydCB7IERldGFpbHNSb3cgfSBmcm9tICcuLi9EZXRhaWxzTGlzdC9EZXRhaWxzUm93JztcbmltcG9ydCB7IEZvY3VzWm9uZSwgRm9jdXNab25lRGlyZWN0aW9uIH0gZnJvbSAnLi4vLi4vRm9jdXNab25lJztcbmltcG9ydCB7IFNlbGVjdGlvbiwgU2VsZWN0aW9uTW9kZSwgU2VsZWN0aW9uWm9uZSB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy9zZWxlY3Rpb24vaW5kZXgnO1xuaW1wb3J0IHsgRHJhZ0Ryb3BIZWxwZXIgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvZHJhZ2Ryb3AvRHJhZ0Ryb3BIZWxwZXInO1xuaW1wb3J0IHsgR3JvdXBlZExpc3QgfSBmcm9tICcuLi8uLi9Hcm91cGVkTGlzdCc7XG5pbXBvcnQgeyBMaXN0IH0gZnJvbSAnLi4vLi4vTGlzdCc7XG5pbXBvcnQgeyB3aXRoVmlld3BvcnQgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvZGVjb3JhdG9ycy93aXRoVmlld3BvcnQnO1xuaW1wb3J0IHsgR2V0R3JvdXBDb3VudCB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy9ncm91cGVkTGlzdC9Hcm91cGVkTGlzdFV0aWxpdHknO1xuaW1wb3J0IHsgREVGQVVMVF9DRUxMX1NUWUxFX1BST1BTIH0gZnJvbSAnLi9EZXRhaWxzUm93LnN0eWxlcyc7XG5pbXBvcnQgeyBDSEVDS19DRUxMX1dJRFRIIGFzIENIRUNLQk9YX1dJRFRIIH0gZnJvbSAnLi9EZXRhaWxzUm93Q2hlY2suc3R5bGVzJztcbi8vIEZvciBldmVyeSBncm91cCBsZXZlbCB0aGVyZSBpcyBhIEdyb3VwU3BhY2VyIGFkZGVkLiBJbXBvcnRpbmcgdGhpcyBjb25zdCB0byBoYXZlIHRoZSBzb3VyY2UgdmFsdWUgaW4gb25lIHBsYWNlLlxuaW1wb3J0IHsgU1BBQ0VSX1dJRFRIIGFzIEdST1VQX0VYUEFORF9XSURUSCB9IGZyb20gJy4uL0dyb3VwZWRMaXN0L0dyb3VwU3BhY2VyJztcbmltcG9ydCB7IGNvbXBvc2VSZW5kZXJGdW5jdGlvbiB9IGZyb20gJ0B1aWZhYnJpYy91dGlsaXRpZXMnO1xuaW1wb3J0IHsgdXNlQ29uc3QgfSBmcm9tICdAdWlmYWJyaWMvcmVhY3QtaG9va3MnO1xudmFyIGdldENsYXNzTmFtZXMgPSBjbGFzc05hbWVzRnVuY3Rpb24oKTtcbnZhciBNSU5fQ09MVU1OX1dJRFRIID0gMTAwOyAvLyB0aGlzIGlzIHRoZSBnbG9iYWwgbWluIHdpZHRoXG52YXIgREVGQVVMVF9SRU5ERVJFRF9XSU5ET1dTX0FIRUFEID0gMjtcbnZhciBERUZBVUxUX1JFTkRFUkVEX1dJTkRPV1NfQkVISU5EID0gMjtcbi8qKlxuICogSG9va3MtYmFzZWQgaW1wbGVtZW50YXRpb24gb2YgRGV0YWlsc0xpc3QuXG4gKiBTaW5jZSBtYW55IGV4aXN0aW5nIGNvbnN1bWVycyBvZiBEZXRhaWxzTGlzdCBleHBlY3QgYHJlZmAgdG8gcmV0dXJuIGEgYERldGFpbHNMaXN0YCxcbiAqIHRoaXMgaW5uZXIgY29tcG9uZW50IGhhbmRsZXMgcmVuZGVyaW5nIHdoaWxlIHRoZSBvdXRlciBtYWludGFpbnMgY29tcGF0aWJpbGl0eS5cbiAqL1xudmFyIERldGFpbHNMaXN0SW5uZXIgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gcHJvcHMuc2VsZWN0aW9uO1xuICAgIHZhciBhcmlhTGFiZWxGb3JMaXN0SGVhZGVyID0gcHJvcHMuYXJpYUxhYmVsRm9yTGlzdEhlYWRlciwgYXJpYUxhYmVsRm9yU2VsZWN0QWxsQ2hlY2tib3ggPSBwcm9wcy5hcmlhTGFiZWxGb3JTZWxlY3RBbGxDaGVja2JveCwgYXJpYUxhYmVsRm9yU2VsZWN0aW9uQ29sdW1uID0gcHJvcHMuYXJpYUxhYmVsRm9yU2VsZWN0aW9uQ29sdW1uLCBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsIGNoZWNrYm94VmlzaWJpbGl0eSA9IHByb3BzLmNoZWNrYm94VmlzaWJpbGl0eSwgY29tcGFjdCA9IHByb3BzLmNvbXBhY3QsIGNvbnN0cmFpbk1vZGUgPSBwcm9wcy5jb25zdHJhaW5Nb2RlLCBkcmFnRHJvcEV2ZW50cyA9IHByb3BzLmRyYWdEcm9wRXZlbnRzLCBncm91cHMgPSBwcm9wcy5ncm91cHMsIGdyb3VwUHJvcHMgPSBwcm9wcy5ncm91cFByb3BzLCBpbmRlbnRXaWR0aCA9IHByb3BzLmluZGVudFdpZHRoLCBpdGVtcyA9IHByb3BzLml0ZW1zLCBpc1BsYWNlaG9sZGVyRGF0YSA9IHByb3BzLmlzUGxhY2Vob2xkZXJEYXRhLCBpc0hlYWRlclZpc2libGUgPSBwcm9wcy5pc0hlYWRlclZpc2libGUsIGxheW91dE1vZGUgPSBwcm9wcy5sYXlvdXRNb2RlLCBvbkl0ZW1JbnZva2VkID0gcHJvcHMub25JdGVtSW52b2tlZCwgb25JdGVtQ29udGV4dE1lbnUgPSBwcm9wcy5vbkl0ZW1Db250ZXh0TWVudSwgb25Db2x1bW5IZWFkZXJDbGljayA9IHByb3BzLm9uQ29sdW1uSGVhZGVyQ2xpY2ssIG9uQ29sdW1uSGVhZGVyQ29udGV4dE1lbnUgPSBwcm9wcy5vbkNvbHVtbkhlYWRlckNvbnRleHRNZW51LCBfYSA9IHByb3BzLnNlbGVjdGlvbk1vZGUsIHNlbGVjdGlvbk1vZGUgPSBfYSA9PT0gdm9pZCAwID8gc2VsZWN0aW9uLm1vZGUgOiBfYSwgc2VsZWN0aW9uUHJlc2VydmVkT25FbXB0eUNsaWNrID0gcHJvcHMuc2VsZWN0aW9uUHJlc2VydmVkT25FbXB0eUNsaWNrLCBzZWxlY3Rpb25ab25lUHJvcHMgPSBwcm9wcy5zZWxlY3Rpb25ab25lUHJvcHMsIGFyaWFMYWJlbCA9IHByb3BzLmFyaWFMYWJlbCwgYXJpYUxhYmVsRm9yR3JpZCA9IHByb3BzLmFyaWFMYWJlbEZvckdyaWQsIHJvd0VsZW1lbnRFdmVudE1hcCA9IHByb3BzLnJvd0VsZW1lbnRFdmVudE1hcCwgX2IgPSBwcm9wcy5zaG91bGRBcHBseUFwcGxpY2F0aW9uUm9sZSwgc2hvdWxkQXBwbHlBcHBsaWNhdGlvblJvbGUgPSBfYiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYiwgZ2V0S2V5ID0gcHJvcHMuZ2V0S2V5LCBsaXN0UHJvcHMgPSBwcm9wcy5saXN0UHJvcHMsIHVzZVBhZ2VDYWNoZSA9IHByb3BzLnVzZVBhZ2VDYWNoZSwgb25TaG91bGRWaXJ0dWFsaXplID0gcHJvcHMub25TaG91bGRWaXJ0dWFsaXplLCB2aWV3cG9ydCA9IHByb3BzLnZpZXdwb3J0LCBtaW5pbXVtUGl4ZWxzRm9yRHJhZyA9IHByb3BzLm1pbmltdW1QaXhlbHNGb3JEcmFnLCBnZXRHcm91cEhlaWdodCA9IHByb3BzLmdldEdyb3VwSGVpZ2h0LCBzdHlsZXMgPSBwcm9wcy5zdHlsZXMsIHRoZW1lID0gcHJvcHMudGhlbWUsIF9jID0gcHJvcHMuY2VsbFN0eWxlUHJvcHMsIGNlbGxTdHlsZVByb3BzID0gX2MgPT09IHZvaWQgMCA/IERFRkFVTFRfQ0VMTF9TVFlMRV9QUk9QUyA6IF9jLCBvblJlbmRlckNoZWNrYm94ID0gcHJvcHMub25SZW5kZXJDaGVja2JveCwgdXNlRmFzdEljb25zID0gcHJvcHMudXNlRmFzdEljb25zLCBkcmFnRHJvcEhlbHBlciA9IHByb3BzLmRyYWdEcm9wSGVscGVyLCBhZGp1c3RlZENvbHVtbnMgPSBwcm9wcy5hZGp1c3RlZENvbHVtbnMsIGlzQ29sbGFwc2VkID0gcHJvcHMuaXNDb2xsYXBzZWQsIGlzU2l6aW5nID0gcHJvcHMuaXNTaXppbmcsIGlzU29tZUdyb3VwRXhwYW5kZWQgPSBwcm9wcy5pc1NvbWVHcm91cEV4cGFuZGVkLCB2ZXJzaW9uID0gcHJvcHMudmVyc2lvbiwgcm9vdFJlZiA9IHByb3BzLnJvb3RSZWYsIGxpc3RSZWYgPSBwcm9wcy5saXN0UmVmLCBmb2N1c1pvbmVSZWYgPSBwcm9wcy5mb2N1c1pvbmVSZWYsIGNvbHVtblJlb3JkZXJPcHRpb25zID0gcHJvcHMuY29sdW1uUmVvcmRlck9wdGlvbnMsIGdyb3VwZWRMaXN0UmVmID0gcHJvcHMuZ3JvdXBlZExpc3RSZWYsIGhlYWRlclJlZiA9IHByb3BzLmhlYWRlclJlZiwgb25Hcm91cEV4cGFuZFN0YXRlQ2hhbmdlZCA9IHByb3BzLm9uR3JvdXBFeHBhbmRTdGF0ZUNoYW5nZWQsIG9uQ29sdW1uSXNTaXppbmdDaGFuZ2VkID0gcHJvcHMub25Db2x1bW5Jc1NpemluZ0NoYW5nZWQsIG9uUm93RGlkTW91bnQgPSBwcm9wcy5vblJvd0RpZE1vdW50LCBvblJvd1dpbGxVbm1vdW50ID0gcHJvcHMub25Sb3dXaWxsVW5tb3VudCwgZGlzYWJsZVNlbGVjdGlvblpvbmUgPSBwcm9wcy5kaXNhYmxlU2VsZWN0aW9uWm9uZSwgb25Db2x1bW5SZXNpemVkID0gcHJvcHMub25Db2x1bW5SZXNpemVkLCBvbkNvbHVtbkF1dG9SZXNpemVkID0gcHJvcHMub25Db2x1bW5BdXRvUmVzaXplZCwgb25Ub2dnbGVDb2xsYXBzZSA9IHByb3BzLm9uVG9nZ2xlQ29sbGFwc2UsIG9uQWN0aXZlUm93Q2hhbmdlZCA9IHByb3BzLm9uQWN0aXZlUm93Q2hhbmdlZCwgb25CbHVyID0gcHJvcHMub25CbHVyLCBldmVudHNUb1JlZ2lzdGVyID0gcHJvcHMucm93RWxlbWVudEV2ZW50TWFwLCBvblJlbmRlck1pc3NpbmdJdGVtID0gcHJvcHMub25SZW5kZXJNaXNzaW5nSXRlbSwgb25SZW5kZXJJdGVtQ29sdW1uID0gcHJvcHMub25SZW5kZXJJdGVtQ29sdW1uLCBnZXRDZWxsVmFsdWVLZXkgPSBwcm9wcy5nZXRDZWxsVmFsdWVLZXksIGdldFJvd0FyaWFMYWJlbCA9IHByb3BzLmdldFJvd0FyaWFMYWJlbCwgZ2V0Um93QXJpYURlc2NyaWJlZEJ5ID0gcHJvcHMuZ2V0Um93QXJpYURlc2NyaWJlZEJ5LCBjaGVja0J1dHRvbkFyaWFMYWJlbCA9IHByb3BzLmNoZWNrQnV0dG9uQXJpYUxhYmVsLCBjaGVja2JveENlbGxDbGFzc05hbWUgPSBwcm9wcy5jaGVja2JveENlbGxDbGFzc05hbWUsIHVzZVJlZHVjZWRSb3dSZW5kZXJlciA9IHByb3BzLnVzZVJlZHVjZWRSb3dSZW5kZXJlciwgZW5hYmxlVXBkYXRlQW5pbWF0aW9ucyA9IHByb3BzLmVuYWJsZVVwZGF0ZUFuaW1hdGlvbnMsIGVudGVyTW9kYWxTZWxlY3Rpb25PblRvdWNoID0gcHJvcHMuZW50ZXJNb2RhbFNlbGVjdGlvbk9uVG91Y2gsIG9uUmVuZGVyRGVmYXVsdFJvdyA9IHByb3BzLm9uUmVuZGVyRGVmYXVsdFJvdywgc2VsZWN0aW9uWm9uZVJlZiA9IHByb3BzLnNlbGVjdGlvblpvbmVSZWY7XG4gICAgdmFyIGdyb3VwTmVzdGluZ0RlcHRoID0gZ2V0R3JvdXBOZXN0aW5nRGVwdGgoZ3JvdXBzKTtcbiAgICB2YXIgYWRkaXRpb25hbExpc3RQcm9wcyA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oeyByZW5kZXJlZFdpbmRvd3NBaGVhZDogaXNTaXppbmcgPyAwIDogREVGQVVMVF9SRU5ERVJFRF9XSU5ET1dTX0FIRUFELCByZW5kZXJlZFdpbmRvd3NCZWhpbmQ6IGlzU2l6aW5nID8gMCA6IERFRkFVTFRfUkVOREVSRURfV0lORE9XU19CRUhJTkQsIGdldEtleTogZ2V0S2V5LFxuICAgICAgICAgICAgdmVyc2lvbjogdmVyc2lvbiB9LCBsaXN0UHJvcHMpO1xuICAgIH0sIFtpc1NpemluZywgZ2V0S2V5LCB2ZXJzaW9uLCBsaXN0UHJvcHNdKTtcbiAgICB2YXIgc2VsZWN0QWxsVmlzaWJpbGl0eSA9IFNlbGVjdEFsbFZpc2liaWxpdHkubm9uZTsgLy8gZm9yIFNlbGVjdGlvbk1vZGUubm9uZVxuICAgIGlmIChzZWxlY3Rpb25Nb2RlID09PSBTZWxlY3Rpb25Nb2RlLnNpbmdsZSkge1xuICAgICAgICBzZWxlY3RBbGxWaXNpYmlsaXR5ID0gU2VsZWN0QWxsVmlzaWJpbGl0eS5oaWRkZW47XG4gICAgfVxuICAgIGlmIChzZWxlY3Rpb25Nb2RlID09PSBTZWxlY3Rpb25Nb2RlLm11bHRpcGxlKSB7XG4gICAgICAgIC8vIGlmIGlzQ29sbGFwc2VkR3JvdXBTZWxlY3RWaXNpYmxlIGlzIGZhbHNlLCBkaXNhYmxlIHNlbGVjdCBhbGwgd2hlbiB0aGUgbGlzdCBoYXMgYWxsIGNvbGxhcHNlZCBncm91cHNcbiAgICAgICAgdmFyIGlzQ29sbGFwc2VkR3JvdXBTZWxlY3RWaXNpYmxlID0gZ3JvdXBQcm9wcyAmJiBncm91cFByb3BzLmhlYWRlclByb3BzICYmIGdyb3VwUHJvcHMuaGVhZGVyUHJvcHMuaXNDb2xsYXBzZWRHcm91cFNlbGVjdFZpc2libGU7XG4gICAgICAgIGlmIChpc0NvbGxhcHNlZEdyb3VwU2VsZWN0VmlzaWJsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpc0NvbGxhcHNlZEdyb3VwU2VsZWN0VmlzaWJsZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlzU2VsZWN0QWxsVmlzaWJsZSA9IGlzQ29sbGFwc2VkR3JvdXBTZWxlY3RWaXNpYmxlIHx8ICFncm91cHMgfHwgaXNTb21lR3JvdXBFeHBhbmRlZDtcbiAgICAgICAgc2VsZWN0QWxsVmlzaWJpbGl0eSA9IGlzU2VsZWN0QWxsVmlzaWJsZSA/IFNlbGVjdEFsbFZpc2liaWxpdHkudmlzaWJsZSA6IFNlbGVjdEFsbFZpc2liaWxpdHkuaGlkZGVuO1xuICAgIH1cbiAgICBpZiAoY2hlY2tib3hWaXNpYmlsaXR5ID09PSBDaGVja2JveFZpc2liaWxpdHkuaGlkZGVuKSB7XG4gICAgICAgIHNlbGVjdEFsbFZpc2liaWxpdHkgPSBTZWxlY3RBbGxWaXNpYmlsaXR5Lm5vbmU7XG4gICAgfVxuICAgIHZhciBkZWZhdWx0T25SZW5kZXJEZXRhaWxzSGVhZGVyID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGRldGFpbHNIZWFkZXJQcm9wcykge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChEZXRhaWxzSGVhZGVyLCBfX2Fzc2lnbih7fSwgZGV0YWlsc0hlYWRlclByb3BzKSk7XG4gICAgfSwgW10pO1xuICAgIHZhciBkZWZhdWx0T25SZW5kZXJEZXRhaWxzRm9vdGVyID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LCBbXSk7XG4gICAgdmFyIHByb3BzT25SZW5kZXJEZXRhaWxzSGVhZGVyID0gcHJvcHMub25SZW5kZXJEZXRhaWxzSGVhZGVyO1xuICAgIHZhciBvblJlbmRlckRldGFpbHNIZWFkZXIgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzT25SZW5kZXJEZXRhaWxzSGVhZGVyXG4gICAgICAgICAgICA/IGNvbXBvc2VSZW5kZXJGdW5jdGlvbihwcm9wc09uUmVuZGVyRGV0YWlsc0hlYWRlciwgZGVmYXVsdE9uUmVuZGVyRGV0YWlsc0hlYWRlcilcbiAgICAgICAgICAgIDogZGVmYXVsdE9uUmVuZGVyRGV0YWlsc0hlYWRlcjtcbiAgICB9LCBbcHJvcHNPblJlbmRlckRldGFpbHNIZWFkZXIsIGRlZmF1bHRPblJlbmRlckRldGFpbHNIZWFkZXJdKTtcbiAgICB2YXIgcHJvcHNPblJlbmRlckRldGFpbHNGb290ZXIgPSBwcm9wcy5vblJlbmRlckRldGFpbHNGb290ZXI7XG4gICAgdmFyIG9uUmVuZGVyRGV0YWlsc0Zvb3RlciA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcHJvcHNPblJlbmRlckRldGFpbHNGb290ZXJcbiAgICAgICAgICAgID8gY29tcG9zZVJlbmRlckZ1bmN0aW9uKHByb3BzT25SZW5kZXJEZXRhaWxzRm9vdGVyLCBkZWZhdWx0T25SZW5kZXJEZXRhaWxzRm9vdGVyKVxuICAgICAgICAgICAgOiBkZWZhdWx0T25SZW5kZXJEZXRhaWxzRm9vdGVyO1xuICAgIH0sIFtwcm9wc09uUmVuZGVyRGV0YWlsc0Zvb3RlciwgZGVmYXVsdE9uUmVuZGVyRGV0YWlsc0Zvb3Rlcl0pO1xuICAgIHZhciBkZXRhaWxzRm9vdGVyUHJvcHMgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbHVtbnM6IGFkanVzdGVkQ29sdW1ucyxcbiAgICAgICAgICAgIGdyb3VwTmVzdGluZ0RlcHRoOiBncm91cE5lc3RpbmdEZXB0aCxcbiAgICAgICAgICAgIHNlbGVjdGlvbjogc2VsZWN0aW9uLFxuICAgICAgICAgICAgc2VsZWN0aW9uTW9kZTogc2VsZWN0aW9uTW9kZSxcbiAgICAgICAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICAgICAgICAgIGNoZWNrYm94VmlzaWJpbGl0eTogY2hlY2tib3hWaXNpYmlsaXR5LFxuICAgICAgICAgICAgaW5kZW50V2lkdGg6IGluZGVudFdpZHRoLFxuICAgICAgICAgICAgY2VsbFN0eWxlUHJvcHM6IGNlbGxTdHlsZVByb3BzLFxuICAgICAgICB9O1xuICAgIH0sIFtcbiAgICAgICAgYWRqdXN0ZWRDb2x1bW5zLFxuICAgICAgICBncm91cE5lc3RpbmdEZXB0aCxcbiAgICAgICAgc2VsZWN0aW9uLFxuICAgICAgICBzZWxlY3Rpb25Nb2RlLFxuICAgICAgICB2aWV3cG9ydCxcbiAgICAgICAgY2hlY2tib3hWaXNpYmlsaXR5LFxuICAgICAgICBpbmRlbnRXaWR0aCxcbiAgICAgICAgY2VsbFN0eWxlUHJvcHMsXG4gICAgXSk7XG4gICAgdmFyIGNvbHVtblJlb3JkZXJPbkRyYWdFbmQgPSBjb2x1bW5SZW9yZGVyT3B0aW9ucyAmJiBjb2x1bW5SZW9yZGVyT3B0aW9ucy5vbkRyYWdFbmQ7XG4gICAgdmFyIG9uQ29sdW1uRHJhZ0VuZCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChfYSwgZXZlbnQpIHtcbiAgICAgICAgdmFyIGRyb3BMb2NhdGlvbiA9IF9hLmRyb3BMb2NhdGlvbjtcbiAgICAgICAgdmFyIGZpbmFsRHJvcExvY2F0aW9uID0gQ29sdW1uRHJhZ0VuZExvY2F0aW9uLm91dHNpZGU7XG4gICAgICAgIGlmIChjb2x1bW5SZW9yZGVyT25EcmFnRW5kKSB7XG4gICAgICAgICAgICBpZiAoZHJvcExvY2F0aW9uICYmIGRyb3BMb2NhdGlvbiAhPT0gQ29sdW1uRHJhZ0VuZExvY2F0aW9uLmhlYWRlcikge1xuICAgICAgICAgICAgICAgIGZpbmFsRHJvcExvY2F0aW9uID0gZHJvcExvY2F0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocm9vdFJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNsaWVudFJlY3QgPSByb290UmVmLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmNsaWVudFggPiBjbGllbnRSZWN0LmxlZnQgJiZcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuY2xpZW50WCA8IGNsaWVudFJlY3QucmlnaHQgJiZcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuY2xpZW50WSA+IGNsaWVudFJlY3QudG9wICYmXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmNsaWVudFkgPCBjbGllbnRSZWN0LmJvdHRvbSkge1xuICAgICAgICAgICAgICAgICAgICBmaW5hbERyb3BMb2NhdGlvbiA9IENvbHVtbkRyYWdFbmRMb2NhdGlvbi5zdXJmYWNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbHVtblJlb3JkZXJPbkRyYWdFbmQoZmluYWxEcm9wTG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgfSwgW2NvbHVtblJlb3JkZXJPbkRyYWdFbmQsIHJvb3RSZWZdKTtcbiAgICB2YXIgY29sdW1uUmVvcmRlclByb3BzID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjb2x1bW5SZW9yZGVyT3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBjb2x1bW5SZW9yZGVyT3B0aW9ucyksIHsgb25Db2x1bW5EcmFnRW5kOiBvbkNvbHVtbkRyYWdFbmQgfSk7XG4gICAgICAgIH1cbiAgICB9LCBbY29sdW1uUmVvcmRlck9wdGlvbnMsIG9uQ29sdW1uRHJhZ0VuZF0pO1xuICAgIHZhciByb3dDb3VudCA9IChpc0hlYWRlclZpc2libGUgPyAxIDogMCkgKyBHZXRHcm91cENvdW50KGdyb3VwcykgKyAoaXRlbXMgPyBpdGVtcy5sZW5ndGggOiAwKTtcbiAgICB2YXIgY29sQ291bnQgPSAoc2VsZWN0QWxsVmlzaWJpbGl0eSAhPT0gU2VsZWN0QWxsVmlzaWJpbGl0eS5ub25lID8gMSA6IDApICtcbiAgICAgICAgKGFkanVzdGVkQ29sdW1ucyA/IGFkanVzdGVkQ29sdW1ucy5sZW5ndGggOiAwKSArXG4gICAgICAgIChncm91cHMgPyAxIDogMCk7XG4gICAgdmFyIGNsYXNzTmFtZXMgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGdldENsYXNzTmFtZXMoc3R5bGVzLCB7XG4gICAgICAgICAgICB0aGVtZTogdGhlbWUsXG4gICAgICAgICAgICBjb21wYWN0OiBjb21wYWN0LFxuICAgICAgICAgICAgaXNGaXhlZDogbGF5b3V0TW9kZSA9PT0gRGV0YWlsc0xpc3RMYXlvdXRNb2RlLmZpeGVkQ29sdW1ucyxcbiAgICAgICAgICAgIGlzSG9yaXpvbnRhbENvbnN0cmFpbmVkOiBjb25zdHJhaW5Nb2RlID09PSBDb25zdHJhaW5Nb2RlLmhvcml6b250YWxDb25zdHJhaW5lZCxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICB9KTtcbiAgICB9LCBbc3R5bGVzLCB0aGVtZSwgY29tcGFjdCwgbGF5b3V0TW9kZSwgY29uc3RyYWluTW9kZSwgY2xhc3NOYW1lXSk7XG4gICAgdmFyIG9uUmVuZGVyRGV0YWlsc0dyb3VwRm9vdGVyID0gZ3JvdXBQcm9wcyAmJiBncm91cFByb3BzLm9uUmVuZGVyRm9vdGVyO1xuICAgIHZhciBmaW5hbE9uUmVuZGVyRGV0YWlsc0dyb3VwRm9vdGVyID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBvblJlbmRlckRldGFpbHNHcm91cEZvb3RlclxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoZ3JvdXBGb290ZXJQcm9wcywgZGVmYXVsdFJlbmRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBvblJlbmRlckRldGFpbHNHcm91cEZvb3RlcihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZ3JvdXBGb290ZXJQcm9wcyksIHsgY29sdW1uczogYWRqdXN0ZWRDb2x1bW5zLCBncm91cE5lc3RpbmdEZXB0aDogZ3JvdXBOZXN0aW5nRGVwdGgsXG4gICAgICAgICAgICAgICAgICAgIGluZGVudFdpZHRoOiBpbmRlbnRXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uOiBzZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbk1vZGU6IHNlbGVjdGlvbk1vZGUsXG4gICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hWaXNpYmlsaXR5OiBjaGVja2JveFZpc2liaWxpdHksXG4gICAgICAgICAgICAgICAgICAgIGNlbGxTdHlsZVByb3BzOiBjZWxsU3R5bGVQcm9wcyB9KSwgZGVmYXVsdFJlbmRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9LCBbXG4gICAgICAgIG9uUmVuZGVyRGV0YWlsc0dyb3VwRm9vdGVyLFxuICAgICAgICBhZGp1c3RlZENvbHVtbnMsXG4gICAgICAgIGdyb3VwTmVzdGluZ0RlcHRoLFxuICAgICAgICBpbmRlbnRXaWR0aCxcbiAgICAgICAgc2VsZWN0aW9uLFxuICAgICAgICBzZWxlY3Rpb25Nb2RlLFxuICAgICAgICB2aWV3cG9ydCxcbiAgICAgICAgY2hlY2tib3hWaXNpYmlsaXR5LFxuICAgICAgICBjZWxsU3R5bGVQcm9wcyxcbiAgICBdKTtcbiAgICB2YXIgb25SZW5kZXJEZXRhaWxzR3JvdXBIZWFkZXIgPSBncm91cFByb3BzICYmIGdyb3VwUHJvcHMub25SZW5kZXJIZWFkZXI7XG4gICAgdmFyIGZpbmFsT25SZW5kZXJEZXRhaWxzR3JvdXBIZWFkZXIgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG9uUmVuZGVyRGV0YWlsc0dyb3VwSGVhZGVyXG4gICAgICAgICAgICA/IGZ1bmN0aW9uIChncm91cEhlYWRlclByb3BzLCBkZWZhdWx0UmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9uUmVuZGVyRGV0YWlsc0dyb3VwSGVhZGVyKF9fYXNzaWduKF9fYXNzaWduKHt9LCBncm91cEhlYWRlclByb3BzKSwgeyBjb2x1bW5zOiBhZGp1c3RlZENvbHVtbnMsIGdyb3VwTmVzdGluZ0RlcHRoOiBncm91cE5lc3RpbmdEZXB0aCxcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50V2lkdGg6IGluZGVudFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb246IHNlbGVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uTW9kZTogc2VsZWN0aW9uTW9kZSxcbiAgICAgICAgICAgICAgICAgICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveFZpc2liaWxpdHk6IGNoZWNrYm94VmlzaWJpbGl0eSxcbiAgICAgICAgICAgICAgICAgICAgY2VsbFN0eWxlUHJvcHM6IGNlbGxTdHlsZVByb3BzLCBhcmlhQ29sU3BhbjogYWRqdXN0ZWRDb2x1bW5zLmxlbmd0aCB9KSwgZGVmYXVsdFJlbmRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IGZ1bmN0aW9uIChncm91cEhlYWRlclByb3BzLCBkZWZhdWx0UmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRSZW5kZXIoX19hc3NpZ24oX19hc3NpZ24oe30sIGdyb3VwSGVhZGVyUHJvcHMpLCB7IGFyaWFDb2xTcGFuOiBhZGp1c3RlZENvbHVtbnMubGVuZ3RoIH0pKTtcbiAgICAgICAgICAgIH07XG4gICAgfSwgW1xuICAgICAgICBvblJlbmRlckRldGFpbHNHcm91cEhlYWRlcixcbiAgICAgICAgYWRqdXN0ZWRDb2x1bW5zLFxuICAgICAgICBncm91cE5lc3RpbmdEZXB0aCxcbiAgICAgICAgaW5kZW50V2lkdGgsXG4gICAgICAgIHNlbGVjdGlvbixcbiAgICAgICAgc2VsZWN0aW9uTW9kZSxcbiAgICAgICAgdmlld3BvcnQsXG4gICAgICAgIGNoZWNrYm94VmlzaWJpbGl0eSxcbiAgICAgICAgY2VsbFN0eWxlUHJvcHMsXG4gICAgXSk7XG4gICAgdmFyIGZpbmFsR3JvdXBQcm9wcyA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIGdyb3VwUHJvcHMpLCB7IG9uUmVuZGVyRm9vdGVyOiBmaW5hbE9uUmVuZGVyRGV0YWlsc0dyb3VwRm9vdGVyLCBvblJlbmRlckhlYWRlcjogZmluYWxPblJlbmRlckRldGFpbHNHcm91cEhlYWRlciB9KTtcbiAgICB9LCBbZ3JvdXBQcm9wcywgZmluYWxPblJlbmRlckRldGFpbHNHcm91cEZvb3RlciwgZmluYWxPblJlbmRlckRldGFpbHNHcm91cEhlYWRlcl0pO1xuICAgIHZhciBzdW1Db2x1bW5XaWR0aHMgPSB1c2VDb25zdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBtZW1vaXplRnVuY3Rpb24oZnVuY3Rpb24gKGNvbHVtbnMpIHtcbiAgICAgICAgICAgIHZhciB0b3RhbFdpZHRoID0gMDtcbiAgICAgICAgICAgIGNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbiAoY29sdW1uKSB7IHJldHVybiAodG90YWxXaWR0aCArPSBjb2x1bW4uY2FsY3VsYXRlZFdpZHRoIHx8IGNvbHVtbi5taW5XaWR0aCk7IH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRvdGFsV2lkdGg7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHZhciBjb2xsYXBzZUFsbFZpc2liaWxpdHkgPSBncm91cFByb3BzICYmIGdyb3VwUHJvcHMuY29sbGFwc2VBbGxWaXNpYmlsaXR5O1xuICAgIHZhciByb3dXaWR0aCA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc3VtQ29sdW1uV2lkdGhzKGFkanVzdGVkQ29sdW1ucyk7XG4gICAgfSwgW2FkanVzdGVkQ29sdW1ucywgc3VtQ29sdW1uV2lkdGhzXSk7XG4gICAgdmFyIG9uUmVuZGVyQ2VsbCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChuZXN0aW5nRGVwdGgsIGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIHZhciBmaW5hbE9uUmVuZGVyUm93ID0gcHJvcHMub25SZW5kZXJSb3dcbiAgICAgICAgICAgID8gY29tcG9zZVJlbmRlckZ1bmN0aW9uKHByb3BzLm9uUmVuZGVyUm93LCBvblJlbmRlckRlZmF1bHRSb3cpXG4gICAgICAgICAgICA6IG9uUmVuZGVyRGVmYXVsdFJvdztcbiAgICAgICAgdmFyIHJvd1Byb3BzID0ge1xuICAgICAgICAgICAgaXRlbTogaXRlbSxcbiAgICAgICAgICAgIGl0ZW1JbmRleDogaW5kZXgsXG4gICAgICAgICAgICBjb21wYWN0OiBjb21wYWN0LFxuICAgICAgICAgICAgY29sdW1uczogYWRqdXN0ZWRDb2x1bW5zLFxuICAgICAgICAgICAgZ3JvdXBOZXN0aW5nRGVwdGg6IG5lc3RpbmdEZXB0aCxcbiAgICAgICAgICAgIHNlbGVjdGlvbk1vZGU6IHNlbGVjdGlvbk1vZGUsXG4gICAgICAgICAgICBzZWxlY3Rpb246IHNlbGVjdGlvbixcbiAgICAgICAgICAgIG9uRGlkTW91bnQ6IG9uUm93RGlkTW91bnQsXG4gICAgICAgICAgICBvbldpbGxVbm1vdW50OiBvblJvd1dpbGxVbm1vdW50LFxuICAgICAgICAgICAgb25SZW5kZXJJdGVtQ29sdW1uOiBvblJlbmRlckl0ZW1Db2x1bW4sXG4gICAgICAgICAgICBnZXRDZWxsVmFsdWVLZXk6IGdldENlbGxWYWx1ZUtleSxcbiAgICAgICAgICAgIGV2ZW50c1RvUmVnaXN0ZXI6IGV2ZW50c1RvUmVnaXN0ZXIsXG4gICAgICAgICAgICBkcmFnRHJvcEV2ZW50czogZHJhZ0Ryb3BFdmVudHMsXG4gICAgICAgICAgICBkcmFnRHJvcEhlbHBlcjogZHJhZ0Ryb3BIZWxwZXIsXG4gICAgICAgICAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgICAgICAgICBjaGVja2JveFZpc2liaWxpdHk6IGNoZWNrYm94VmlzaWJpbGl0eSxcbiAgICAgICAgICAgIGNvbGxhcHNlQWxsVmlzaWJpbGl0eTogY29sbGFwc2VBbGxWaXNpYmlsaXR5LFxuICAgICAgICAgICAgZ2V0Um93QXJpYUxhYmVsOiBnZXRSb3dBcmlhTGFiZWwsXG4gICAgICAgICAgICBnZXRSb3dBcmlhRGVzY3JpYmVkQnk6IGdldFJvd0FyaWFEZXNjcmliZWRCeSxcbiAgICAgICAgICAgIGNoZWNrQnV0dG9uQXJpYUxhYmVsOiBjaGVja0J1dHRvbkFyaWFMYWJlbCxcbiAgICAgICAgICAgIGNoZWNrYm94Q2VsbENsYXNzTmFtZTogY2hlY2tib3hDZWxsQ2xhc3NOYW1lLFxuICAgICAgICAgICAgdXNlUmVkdWNlZFJvd1JlbmRlcmVyOiB1c2VSZWR1Y2VkUm93UmVuZGVyZXIsXG4gICAgICAgICAgICBpbmRlbnRXaWR0aDogaW5kZW50V2lkdGgsXG4gICAgICAgICAgICBjZWxsU3R5bGVQcm9wczogY2VsbFN0eWxlUHJvcHMsXG4gICAgICAgICAgICBvblJlbmRlckRldGFpbHNDaGVja2JveDogb25SZW5kZXJDaGVja2JveCxcbiAgICAgICAgICAgIGVuYWJsZVVwZGF0ZUFuaW1hdGlvbnM6IGVuYWJsZVVwZGF0ZUFuaW1hdGlvbnMsXG4gICAgICAgICAgICByb3dXaWR0aDogcm93V2lkdGgsXG4gICAgICAgICAgICB1c2VGYXN0SWNvbnM6IHVzZUZhc3RJY29ucyxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFpdGVtKSB7XG4gICAgICAgICAgICBpZiAob25SZW5kZXJNaXNzaW5nSXRlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvblJlbmRlck1pc3NpbmdJdGVtKGluZGV4LCByb3dQcm9wcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmluYWxPblJlbmRlclJvdyhyb3dQcm9wcyk7XG4gICAgfSwgW1xuICAgICAgICBjb21wYWN0LFxuICAgICAgICBhZGp1c3RlZENvbHVtbnMsXG4gICAgICAgIHNlbGVjdGlvbk1vZGUsXG4gICAgICAgIHNlbGVjdGlvbixcbiAgICAgICAgb25Sb3dEaWRNb3VudCxcbiAgICAgICAgb25Sb3dXaWxsVW5tb3VudCxcbiAgICAgICAgb25SZW5kZXJJdGVtQ29sdW1uLFxuICAgICAgICBnZXRDZWxsVmFsdWVLZXksXG4gICAgICAgIGV2ZW50c1RvUmVnaXN0ZXIsXG4gICAgICAgIGRyYWdEcm9wRXZlbnRzLFxuICAgICAgICBkcmFnRHJvcEhlbHBlcixcbiAgICAgICAgdmlld3BvcnQsXG4gICAgICAgIGNoZWNrYm94VmlzaWJpbGl0eSxcbiAgICAgICAgY29sbGFwc2VBbGxWaXNpYmlsaXR5LFxuICAgICAgICBnZXRSb3dBcmlhTGFiZWwsXG4gICAgICAgIGdldFJvd0FyaWFEZXNjcmliZWRCeSxcbiAgICAgICAgY2hlY2tCdXR0b25BcmlhTGFiZWwsXG4gICAgICAgIGNoZWNrYm94Q2VsbENsYXNzTmFtZSxcbiAgICAgICAgdXNlUmVkdWNlZFJvd1JlbmRlcmVyLFxuICAgICAgICBpbmRlbnRXaWR0aCxcbiAgICAgICAgY2VsbFN0eWxlUHJvcHMsXG4gICAgICAgIG9uUmVuZGVyQ2hlY2tib3gsXG4gICAgICAgIGVuYWJsZVVwZGF0ZUFuaW1hdGlvbnMsXG4gICAgICAgIHVzZUZhc3RJY29ucyxcbiAgICAgICAgb25SZW5kZXJEZWZhdWx0Um93LFxuICAgICAgICBvblJlbmRlck1pc3NpbmdJdGVtLFxuICAgICAgICBwcm9wcy5vblJlbmRlclJvdyxcbiAgICAgICAgcm93V2lkdGgsXG4gICAgXSk7XG4gICAgdmFyIG9uUmVuZGVyTGlzdENlbGwgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAobmVzdGluZ0RlcHRoKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoaXRlbSwgaXRlbUluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gb25SZW5kZXJDZWxsKG5lc3RpbmdEZXB0aCwgaXRlbSwgaXRlbUluZGV4KTtcbiAgICAgICAgfTtcbiAgICB9LCBbb25SZW5kZXJDZWxsXSk7XG4gICAgdmFyIGlzUmlnaHRBcnJvdyA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICByZXR1cm4gZXZlbnQud2hpY2ggPT09IGdldFJUTFNhZmVLZXlDb2RlKEtleUNvZGVzLnJpZ2h0LCB0aGVtZSk7XG4gICAgfSwgW3RoZW1lXSk7XG4gICAgdmFyIGZvY3VzWm9uZVByb3BzID0ge1xuICAgICAgICBjb21wb25lbnRSZWY6IGZvY3VzWm9uZVJlZixcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmZvY3VzWm9uZSxcbiAgICAgICAgZGlyZWN0aW9uOiBGb2N1c1pvbmVEaXJlY3Rpb24udmVydGljYWwsXG4gICAgICAgIHNob3VsZEVudGVySW5uZXJab25lOiBpc1JpZ2h0QXJyb3csXG4gICAgICAgIG9uQWN0aXZlRWxlbWVudENoYW5nZWQ6IG9uQWN0aXZlUm93Q2hhbmdlZCxcbiAgICAgICAgc2hvdWxkUmFpc2VDbGlja3M6IGZhbHNlLFxuICAgICAgICBvbkJsdXI6IG9uQmx1cixcbiAgICB9O1xuICAgIHZhciBsaXN0ID0gZ3JvdXBzID8gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoR3JvdXBlZExpc3QsIHsgZm9jdXNab25lUHJvcHM6IGZvY3VzWm9uZVByb3BzLCBjb21wb25lbnRSZWY6IGdyb3VwZWRMaXN0UmVmLCBncm91cHM6IGdyb3VwcywgZ3JvdXBQcm9wczogZmluYWxHcm91cFByb3BzLCBpdGVtczogaXRlbXMsIG9uUmVuZGVyQ2VsbDogb25SZW5kZXJDZWxsLCByb2xlOiBcInByZXNlbnRhdGlvblwiLCBzZWxlY3Rpb246IHNlbGVjdGlvbiwgc2VsZWN0aW9uTW9kZTogY2hlY2tib3hWaXNpYmlsaXR5ICE9PSBDaGVja2JveFZpc2liaWxpdHkuaGlkZGVuID8gc2VsZWN0aW9uTW9kZSA6IFNlbGVjdGlvbk1vZGUubm9uZSwgZHJhZ0Ryb3BFdmVudHM6IGRyYWdEcm9wRXZlbnRzLCBkcmFnRHJvcEhlbHBlcjogZHJhZ0Ryb3BIZWxwZXIsIGV2ZW50c1RvUmVnaXN0ZXI6IHJvd0VsZW1lbnRFdmVudE1hcCwgbGlzdFByb3BzOiBhZGRpdGlvbmFsTGlzdFByb3BzLCBvbkdyb3VwRXhwYW5kU3RhdGVDaGFuZ2VkOiBvbkdyb3VwRXhwYW5kU3RhdGVDaGFuZ2VkLCB1c2VQYWdlQ2FjaGU6IHVzZVBhZ2VDYWNoZSwgb25TaG91bGRWaXJ0dWFsaXplOiBvblNob3VsZFZpcnR1YWxpemUsIGdldEdyb3VwSGVpZ2h0OiBnZXRHcm91cEhlaWdodCwgY29tcGFjdDogY29tcGFjdCB9KSkgOiAoUmVhY3QuY3JlYXRlRWxlbWVudChGb2N1c1pvbmUsIF9fYXNzaWduKHt9LCBmb2N1c1pvbmVQcm9wcyksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlzdCwgX19hc3NpZ24oeyByZWY6IGxpc3RSZWYsIHJvbGU6IFwicHJlc2VudGF0aW9uXCIsIGl0ZW1zOiBpdGVtcywgb25SZW5kZXJDZWxsOiBvblJlbmRlckxpc3RDZWxsKDApLCB1c2VQYWdlQ2FjaGU6IHVzZVBhZ2VDYWNoZSwgb25TaG91bGRWaXJ0dWFsaXplOiBvblNob3VsZFZpcnR1YWxpemUgfSwgYWRkaXRpb25hbExpc3RQcm9wcykpKSk7XG4gICAgdmFyIG9uSGVhZGVyS2V5RG93biA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldikge1xuICAgICAgICBpZiAoZXYud2hpY2ggPT09IEtleUNvZGVzLmRvd24pIHtcbiAgICAgICAgICAgIGlmIChmb2N1c1pvbmVSZWYuY3VycmVudCAmJiBmb2N1c1pvbmVSZWYuY3VycmVudC5mb2N1cygpKSB7XG4gICAgICAgICAgICAgICAgLy8gc2VsZWN0IHRoZSBmaXJzdCBpdGVtIGluIGxpc3QgYWZ0ZXIgZG93biBhcnJvdyBrZXkgZXZlbnRcbiAgICAgICAgICAgICAgICAvLyBvbmx5IGlmIG5vdGhpbmcgd2FzIHNlbGVjdGVkOyBvdGhlcndpc2Ugc3RhcnQgd2l0aCB0aGUgYWxyZWFkeS1zZWxlY3RlZCBpdGVtXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGlvbi5nZXRTZWxlY3RlZEluZGljZXMoKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLnNldEluZGV4U2VsZWN0ZWQoMCwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgW3NlbGVjdGlvbiwgZm9jdXNab25lUmVmXSk7XG4gICAgdmFyIG9uQ29udGVudEtleURvd24gPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgaWYgKGV2LndoaWNoID09PSBLZXlDb2Rlcy51cCAmJiAhZXYuYWx0S2V5KSB7XG4gICAgICAgICAgICBpZiAoaGVhZGVyUmVmLmN1cnJlbnQgJiYgaGVhZGVyUmVmLmN1cnJlbnQuZm9jdXMoKSkge1xuICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBbaGVhZGVyUmVmXSk7XG4gICAgcmV0dXJuIChcbiAgICAvLyBJZiBzaG91bGRBcHBseUFwcGxpY2F0aW9uUm9sZSBpcyB0cnVlLCByb2xlIGFwcGxpY2F0aW9uIHdpbGwgYmUgYXBwbGllZCB0byBtYWtlIGFycm93IGtleXMgd29ya1xuICAgIC8vIHdpdGggSkFXUy5cbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9fYXNzaWduKHsgcmVmOiByb290UmVmLCBjbGFzc05hbWU6IGNsYXNzTmFtZXMucm9vdCwgXCJkYXRhLWF1dG9tYXRpb25pZFwiOiBcIkRldGFpbHNMaXN0XCIsIFwiZGF0YS1pcy1zY3JvbGxhYmxlXCI6IFwiZmFsc2VcIiwgXCJhcmlhLWxhYmVsXCI6IGFyaWFMYWJlbCB9LCAoc2hvdWxkQXBwbHlBcHBsaWNhdGlvblJvbGUgPyB7IHJvbGU6ICdhcHBsaWNhdGlvbicgfSA6IHt9KSksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9jdXNSZWN0cywgbnVsbCksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyByb2xlOiBcImdyaWRcIiwgXCJhcmlhLWxhYmVsXCI6IGFyaWFMYWJlbEZvckdyaWQsIFwiYXJpYS1yb3djb3VudFwiOiBpc1BsYWNlaG9sZGVyRGF0YSA/IC0xIDogcm93Q291bnQsIFwiYXJpYS1jb2xjb3VudFwiOiBjb2xDb3VudCwgXCJhcmlhLXJlYWRvbmx5XCI6IFwidHJ1ZVwiLCBcImFyaWEtYnVzeVwiOiBpc1BsYWNlaG9sZGVyRGF0YSB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IG9uS2V5RG93bjogb25IZWFkZXJLZXlEb3duLCByb2xlOiBcInByZXNlbnRhdGlvblwiLCBjbGFzc05hbWU6IGNsYXNzTmFtZXMuaGVhZGVyV3JhcHBlciB9LCBpc0hlYWRlclZpc2libGUgJiZcbiAgICAgICAgICAgICAgICBvblJlbmRlckRldGFpbHNIZWFkZXIoe1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRSZWY6IGhlYWRlclJlZixcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uTW9kZTogc2VsZWN0aW9uTW9kZSxcbiAgICAgICAgICAgICAgICAgICAgbGF5b3V0TW9kZTogbGF5b3V0TW9kZSxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uOiBzZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnM6IGFkanVzdGVkQ29sdW1ucyxcbiAgICAgICAgICAgICAgICAgICAgb25Db2x1bW5DbGljazogb25Db2x1bW5IZWFkZXJDbGljayxcbiAgICAgICAgICAgICAgICAgICAgb25Db2x1bW5Db250ZXh0TWVudTogb25Db2x1bW5IZWFkZXJDb250ZXh0TWVudSxcbiAgICAgICAgICAgICAgICAgICAgb25Db2x1bW5SZXNpemVkOiBvbkNvbHVtblJlc2l6ZWQsXG4gICAgICAgICAgICAgICAgICAgIG9uQ29sdW1uSXNTaXppbmdDaGFuZ2VkOiBvbkNvbHVtbklzU2l6aW5nQ2hhbmdlZCxcbiAgICAgICAgICAgICAgICAgICAgb25Db2x1bW5BdXRvUmVzaXplZDogb25Db2x1bW5BdXRvUmVzaXplZCxcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBOZXN0aW5nRGVwdGg6IGdyb3VwTmVzdGluZ0RlcHRoLFxuICAgICAgICAgICAgICAgICAgICBpc0FsbENvbGxhcHNlZDogaXNDb2xsYXBzZWQsXG4gICAgICAgICAgICAgICAgICAgIG9uVG9nZ2xlQ29sbGFwc2VBbGw6IG9uVG9nZ2xlQ29sbGFwc2UsXG4gICAgICAgICAgICAgICAgICAgIGFyaWFMYWJlbDogYXJpYUxhYmVsRm9yTGlzdEhlYWRlcixcbiAgICAgICAgICAgICAgICAgICAgYXJpYUxhYmVsRm9yU2VsZWN0QWxsQ2hlY2tib3g6IGFyaWFMYWJlbEZvclNlbGVjdEFsbENoZWNrYm94LFxuICAgICAgICAgICAgICAgICAgICBhcmlhTGFiZWxGb3JTZWxlY3Rpb25Db2x1bW46IGFyaWFMYWJlbEZvclNlbGVjdGlvbkNvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0QWxsVmlzaWJpbGl0eTogc2VsZWN0QWxsVmlzaWJpbGl0eSxcbiAgICAgICAgICAgICAgICAgICAgY29sbGFwc2VBbGxWaXNpYmlsaXR5OiBncm91cFByb3BzICYmIGdyb3VwUHJvcHMuY29sbGFwc2VBbGxWaXNpYmlsaXR5LFxuICAgICAgICAgICAgICAgICAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtblJlb3JkZXJQcm9wczogY29sdW1uUmVvcmRlclByb3BzLFxuICAgICAgICAgICAgICAgICAgICBtaW5pbXVtUGl4ZWxzRm9yRHJhZzogbWluaW11bVBpeGVsc0ZvckRyYWcsXG4gICAgICAgICAgICAgICAgICAgIGNlbGxTdHlsZVByb3BzOiBjZWxsU3R5bGVQcm9wcyxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hWaXNpYmlsaXR5OiBjaGVja2JveFZpc2liaWxpdHksXG4gICAgICAgICAgICAgICAgICAgIGluZGVudFdpZHRoOiBpbmRlbnRXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgb25SZW5kZXJEZXRhaWxzQ2hlY2tib3g6IG9uUmVuZGVyQ2hlY2tib3gsXG4gICAgICAgICAgICAgICAgICAgIHJvd1dpZHRoOiBzdW1Db2x1bW5XaWR0aHMoYWRqdXN0ZWRDb2x1bW5zKSxcbiAgICAgICAgICAgICAgICAgICAgdXNlRmFzdEljb25zOiB1c2VGYXN0SWNvbnMsXG4gICAgICAgICAgICAgICAgfSwgb25SZW5kZXJEZXRhaWxzSGVhZGVyKSksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgb25LZXlEb3duOiBvbkNvbnRlbnRLZXlEb3duLCByb2xlOiBcInByZXNlbnRhdGlvblwiLCBjbGFzc05hbWU6IGNsYXNzTmFtZXMuY29udGVudFdyYXBwZXIgfSwgIWRpc2FibGVTZWxlY3Rpb25ab25lID8gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2VsZWN0aW9uWm9uZSwgX19hc3NpZ24oeyByZWY6IHNlbGVjdGlvblpvbmVSZWYsIHNlbGVjdGlvbjogc2VsZWN0aW9uLCBzZWxlY3Rpb25QcmVzZXJ2ZWRPbkVtcHR5Q2xpY2s6IHNlbGVjdGlvblByZXNlcnZlZE9uRW1wdHlDbGljaywgc2VsZWN0aW9uTW9kZTogc2VsZWN0aW9uTW9kZSwgb25JdGVtSW52b2tlZDogb25JdGVtSW52b2tlZCwgb25JdGVtQ29udGV4dE1lbnU6IG9uSXRlbUNvbnRleHRNZW51LCBlbnRlck1vZGFsT25Ub3VjaDogZW50ZXJNb2RhbFNlbGVjdGlvbk9uVG91Y2ggfSwgKHNlbGVjdGlvblpvbmVQcm9wcyB8fCB7fSkpLCBsaXN0KSkgOiAobGlzdCkpLFxuICAgICAgICAgICAgb25SZW5kZXJEZXRhaWxzRm9vdGVyKF9fYXNzaWduKHt9LCBkZXRhaWxzRm9vdGVyUHJvcHMpKSkpKTtcbn07XG52YXIgRGV0YWlsc0xpc3RCYXNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEZXRhaWxzTGlzdEJhc2UsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGV0YWlsc0xpc3RCYXNlKHByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fcm9vdCA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgICAgICBfdGhpcy5faGVhZGVyID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgICAgIF90aGlzLl9ncm91cGVkTGlzdCA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgICAgICBfdGhpcy5fbGlzdCA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgICAgICBfdGhpcy5fZm9jdXNab25lID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgICAgIF90aGlzLl9zZWxlY3Rpb25ab25lID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgICAgIF90aGlzLl9vblJlbmRlclJvdyA9IGZ1bmN0aW9uIChwcm9wcywgZGVmYXVsdFJlbmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGV0YWlsc1JvdywgX19hc3NpZ24oe30sIHByb3BzKSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiAobmV4dFByb3BzLCBwcmV2aW91c1N0YXRlKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgY2hlY2tib3hWaXNpYmlsaXR5ID0gX2EuY2hlY2tib3hWaXNpYmlsaXR5LCBpdGVtcyA9IF9hLml0ZW1zLCBzZXRLZXkgPSBfYS5zZXRLZXksIF9iID0gX2Euc2VsZWN0aW9uTW9kZSwgc2VsZWN0aW9uTW9kZSA9IF9iID09PSB2b2lkIDAgPyBfdGhpcy5fc2VsZWN0aW9uLm1vZGUgOiBfYiwgY29sdW1ucyA9IF9hLmNvbHVtbnMsIHZpZXdwb3J0ID0gX2Eudmlld3BvcnQsIGNvbXBhY3QgPSBfYS5jb21wYWN0LCBkcmFnRHJvcEV2ZW50cyA9IF9hLmRyYWdEcm9wRXZlbnRzO1xuICAgICAgICAgICAgdmFyIF9jID0gKF90aGlzLnByb3BzLmdyb3VwUHJvcHMgfHwge30pLmlzQWxsR3JvdXBzQ29sbGFwc2VkLCBpc0FsbEdyb3Vwc0NvbGxhcHNlZCA9IF9jID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfYztcbiAgICAgICAgICAgIHZhciBuZXdWaWV3cG9ydFdpZHRoID0gKG5leHRQcm9wcy52aWV3cG9ydCAmJiBuZXh0UHJvcHMudmlld3BvcnQud2lkdGgpIHx8IDA7XG4gICAgICAgICAgICB2YXIgb2xkVmlld3BvcnRXaWR0aCA9ICh2aWV3cG9ydCAmJiB2aWV3cG9ydC53aWR0aCkgfHwgMDtcbiAgICAgICAgICAgIHZhciBzaG91bGRSZXNldFNlbGVjdGlvbiA9IG5leHRQcm9wcy5zZXRLZXkgIT09IHNldEtleSB8fCBuZXh0UHJvcHMuc2V0S2V5ID09PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB2YXIgc2hvdWxkRm9yY2VVcGRhdGVzID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAobmV4dFByb3BzLmxheW91dE1vZGUgIT09IF90aGlzLnByb3BzLmxheW91dE1vZGUpIHtcbiAgICAgICAgICAgICAgICBzaG91bGRGb3JjZVVwZGF0ZXMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG5leHRTdGF0ZSA9IHByZXZpb3VzU3RhdGU7XG4gICAgICAgICAgICBpZiAoc2hvdWxkUmVzZXRTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5faW5pdGlhbEZvY3VzZWRJbmRleCA9IG5leHRQcm9wcy5pbml0aWFsRm9jdXNlZEluZGV4O1xuICAgICAgICAgICAgICAgIC8vIHJlc2V0IGZvY3VzZWRJdGVtSW5kZXggd2hlbiBzZXRLZXkgY2hhbmdlc1xuICAgICAgICAgICAgICAgIG5leHRTdGF0ZSA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBuZXh0U3RhdGUpLCB7IGZvY3VzZWRJdGVtSW5kZXg6IF90aGlzLl9pbml0aWFsRm9jdXNlZEluZGV4ICE9PSB1bmRlZmluZWQgPyBfdGhpcy5faW5pdGlhbEZvY3VzZWRJbmRleCA6IC0xIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFfdGhpcy5wcm9wcy5kaXNhYmxlU2VsZWN0aW9uWm9uZSAmJiBuZXh0UHJvcHMuaXRlbXMgIT09IGl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3NlbGVjdGlvbi5zZXRJdGVtcyhuZXh0UHJvcHMuaXRlbXMsIHNob3VsZFJlc2V0U2VsZWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXh0UHJvcHMuY2hlY2tib3hWaXNpYmlsaXR5ICE9PSBjaGVja2JveFZpc2liaWxpdHkgfHxcbiAgICAgICAgICAgICAgICBuZXh0UHJvcHMuY29sdW1ucyAhPT0gY29sdW1ucyB8fFxuICAgICAgICAgICAgICAgIG5ld1ZpZXdwb3J0V2lkdGggIT09IG9sZFZpZXdwb3J0V2lkdGggfHxcbiAgICAgICAgICAgICAgICBuZXh0UHJvcHMuY29tcGFjdCAhPT0gY29tcGFjdCkge1xuICAgICAgICAgICAgICAgIHNob3VsZEZvcmNlVXBkYXRlcyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXh0U3RhdGUgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgbmV4dFN0YXRlKSwgX3RoaXMuX2FkanVzdENvbHVtbnMobmV4dFByb3BzLCBuZXh0U3RhdGUsIHRydWUpKTtcbiAgICAgICAgICAgIGlmIChuZXh0UHJvcHMuc2VsZWN0aW9uTW9kZSAhPT0gc2VsZWN0aW9uTW9kZSkge1xuICAgICAgICAgICAgICAgIHNob3VsZEZvcmNlVXBkYXRlcyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNBbGxHcm91cHNDb2xsYXBzZWQgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgIG5leHRQcm9wcy5ncm91cFByb3BzICYmXG4gICAgICAgICAgICAgICAgbmV4dFByb3BzLmdyb3VwUHJvcHMuaXNBbGxHcm91cHNDb2xsYXBzZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG5leHRTdGF0ZSA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBuZXh0U3RhdGUpLCB7IGlzQ29sbGFwc2VkOiBuZXh0UHJvcHMuZ3JvdXBQcm9wcy5pc0FsbEdyb3Vwc0NvbGxhcHNlZCwgaXNTb21lR3JvdXBFeHBhbmRlZDogIW5leHRQcm9wcy5ncm91cFByb3BzLmlzQWxsR3JvdXBzQ29sbGFwc2VkIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5leHRQcm9wcy5kcmFnRHJvcEV2ZW50cyAhPT0gZHJhZ0Ryb3BFdmVudHMpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fZHJhZ0Ryb3BIZWxwZXIgJiYgX3RoaXMuX2RyYWdEcm9wSGVscGVyLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5fZHJhZ0Ryb3BIZWxwZXIgPSBuZXh0UHJvcHMuZHJhZ0Ryb3BFdmVudHNcbiAgICAgICAgICAgICAgICAgICAgPyBuZXcgRHJhZ0Ryb3BIZWxwZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uOiBfdGhpcy5fc2VsZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWluaW11bVBpeGVsc0ZvckRyYWc6IG5leHRQcm9wcy5taW5pbXVtUGl4ZWxzRm9yRHJhZyxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgc2hvdWxkRm9yY2VVcGRhdGVzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzaG91bGRGb3JjZVVwZGF0ZXMpIHtcbiAgICAgICAgICAgICAgICBuZXh0U3RhdGUgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgbmV4dFN0YXRlKSwgeyB2ZXJzaW9uOiB7fSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXh0U3RhdGU7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbkdyb3VwRXhwYW5kU3RhdGVDaGFuZ2VkID0gZnVuY3Rpb24gKGlzU29tZUdyb3VwRXhwYW5kZWQpIHtcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgaXNTb21lR3JvdXBFeHBhbmRlZDogaXNTb21lR3JvdXBFeHBhbmRlZCB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uQ29sdW1uSXNTaXppbmdDaGFuZ2VkID0gZnVuY3Rpb24gKGNvbHVtbiwgaXNTaXppbmcpIHtcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgaXNTaXppbmc6IGlzU2l6aW5nIH0pO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25Sb3dEaWRNb3VudCA9IGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHJvdy5wcm9wcywgaXRlbSA9IF9hLml0ZW0sIGl0ZW1JbmRleCA9IF9hLml0ZW1JbmRleDtcbiAgICAgICAgICAgIHZhciBpdGVtS2V5ID0gX3RoaXMuX2dldEl0ZW1LZXkoaXRlbSwgaXRlbUluZGV4KTtcbiAgICAgICAgICAgIF90aGlzLl9hY3RpdmVSb3dzW2l0ZW1LZXldID0gcm93OyAvLyB0aGlzIGlzIHVzZWQgZm9yIGNvbHVtbiBhdXRvIHJlc2l6ZVxuICAgICAgICAgICAgX3RoaXMuX3NldEZvY3VzVG9Sb3dJZlBlbmRpbmcocm93KTtcbiAgICAgICAgICAgIHZhciBvblJvd0RpZE1vdW50ID0gX3RoaXMucHJvcHMub25Sb3dEaWRNb3VudDtcbiAgICAgICAgICAgIGlmIChvblJvd0RpZE1vdW50KSB7XG4gICAgICAgICAgICAgICAgb25Sb3dEaWRNb3VudChpdGVtLCBpdGVtSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25Sb3dXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgIHZhciBvblJvd1dpbGxVbm1vdW50ID0gX3RoaXMucHJvcHMub25Sb3dXaWxsVW5tb3VudDtcbiAgICAgICAgICAgIHZhciBfYSA9IHJvdy5wcm9wcywgaXRlbSA9IF9hLml0ZW0sIGl0ZW1JbmRleCA9IF9hLml0ZW1JbmRleDtcbiAgICAgICAgICAgIHZhciBpdGVtS2V5ID0gX3RoaXMuX2dldEl0ZW1LZXkoaXRlbSwgaXRlbUluZGV4KTtcbiAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5fYWN0aXZlUm93c1tpdGVtS2V5XTtcbiAgICAgICAgICAgIGlmIChvblJvd1dpbGxVbm1vdW50KSB7XG4gICAgICAgICAgICAgICAgb25Sb3dXaWxsVW5tb3VudChpdGVtLCBpdGVtSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25Ub2dnbGVDb2xsYXBzZSA9IGZ1bmN0aW9uIChjb2xsYXBzZWQpIHtcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBpc0NvbGxhcHNlZDogY29sbGFwc2VkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoX3RoaXMuX2dyb3VwZWRMaXN0LmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fZ3JvdXBlZExpc3QuY3VycmVudC50b2dnbGVDb2xsYXBzZUFsbChjb2xsYXBzZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25Db2x1bW5SZXNpemVkID0gZnVuY3Rpb24gKHJlc2l6aW5nQ29sdW1uLCBuZXdXaWR0aCwgcmVzaXppbmdDb2x1bW5JbmRleCkge1xuICAgICAgICAgICAgdmFyIG5ld0NhbGN1bGF0ZWRXaWR0aCA9IE1hdGgubWF4KHJlc2l6aW5nQ29sdW1uLm1pbldpZHRoIHx8IE1JTl9DT0xVTU5fV0lEVEgsIG5ld1dpZHRoKTtcbiAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNvbHVtblJlc2l6ZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnByb3BzLm9uQ29sdW1uUmVzaXplKHJlc2l6aW5nQ29sdW1uLCBuZXdDYWxjdWxhdGVkV2lkdGgsIHJlc2l6aW5nQ29sdW1uSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuX3JlbWVtYmVyQ2FsY3VsYXRlZFdpZHRoKHJlc2l6aW5nQ29sdW1uLCBuZXdDYWxjdWxhdGVkV2lkdGgpO1xuICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoX19hc3NpZ24oX19hc3NpZ24oe30sIF90aGlzLl9hZGp1c3RDb2x1bW5zKF90aGlzLnByb3BzLCBfdGhpcy5zdGF0ZSwgdHJ1ZSwgcmVzaXppbmdDb2x1bW5JbmRleCkpLCB7IHZlcnNpb246IHt9IH0pKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGxiYWNrIGZ1bmN0aW9uIHdoZW4gZG91YmxlIGNsaWNrZWQgb24gdGhlIGRldGFpbHMgaGVhZGVyIGNvbHVtbiByZXNpemVyXG4gICAgICAgICAqIHdoaWNoIHdpbGwgbWVhc3VyZSB0aGUgY29sdW1uIGNlbGxzIG9mIGFsbCB0aGUgYWN0aXZlIHJvd3MgYW5kIHJlc2l6ZSB0aGVcbiAgICAgICAgICogY29sdW1uIHRvIHRoZSBtYXggY2VsbCB3aWR0aC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIGNvbHVtbiAtIGRvdWJsZSBjbGlja2VkIGNvbHVtbiBkZWZpbml0aW9uXG4gICAgICAgICAqIEBwYXJhbSBjb2x1bW5JbmRleCAtIGRvdWJsZSBjbGlja2VkIGNvbHVtbiBpbmRleFxuICAgICAgICAgKiBUT0RPOiBtaW4gd2lkdGggMTAwIHNob3VsZCBiZSBjaGFuZ2VkIHRvIGNvbnN0IHZhbHVlIGFuZCBzaG91bGQgYmUgY29uc2lzdGVudCB3aXRoIHRoZVxuICAgICAgICAgKiB2YWx1ZSB1c2VkIG9uIF9vblNpemVyTW92ZSBtZXRob2QgaW4gRGV0YWlsc0hlYWRlclxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuX29uQ29sdW1uQXV0b1Jlc2l6ZWQgPSBmdW5jdGlvbiAoY29sdW1uLCBjb2x1bW5JbmRleCkge1xuICAgICAgICAgICAgdmFyIG1heCA9IDA7XG4gICAgICAgICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgICAgICAgdmFyIHRvdGFsQ291bnQgPSBPYmplY3Qua2V5cyhfdGhpcy5fYWN0aXZlUm93cykubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIF90aGlzLl9hY3RpdmVSb3dzKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLl9hY3RpdmVSb3dzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRSb3cgPSBfdGhpcy5fYWN0aXZlUm93c1trZXldO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Um93Lm1lYXN1cmVDZWxsKGNvbHVtbkluZGV4LCBmdW5jdGlvbiAod2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgd2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCA9PT0gdG90YWxDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9vbkNvbHVtblJlc2l6ZWQoY29sdW1uLCBtYXgsIGNvbHVtbkluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbCBiYWNrIGZ1bmN0aW9uIHdoZW4gYW4gZWxlbWVudCBpbiBGb2N1c1pvbmUgYmVjb21lcyBhY3RpdmUuIEl0IHdpbGwgdHJhbnNsYXRlIGl0IGludG8gaXRlbVxuICAgICAgICAgKiBhbmQgY2FsbCBvbkFjdGl2ZUl0ZW1DaGFuZ2VkIGNhbGxiYWNrIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHJvdyAtIGVsZW1lbnQgdGhhdCBiZWNhbWUgYWN0aXZlIGluIEZvY3VzIFpvbmVcbiAgICAgICAgICogQHBhcmFtIGZvY3VzIC0gZXZlbnQgZnJvbSBGb2N1cyBab25lXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5fb25BY3RpdmVSb3dDaGFuZ2VkID0gZnVuY3Rpb24gKGVsLCBldikge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIGl0ZW1zID0gX2EuaXRlbXMsIG9uQWN0aXZlSXRlbUNoYW5nZWQgPSBfYS5vbkFjdGl2ZUl0ZW1DaGFuZ2VkO1xuICAgICAgICAgICAgaWYgKCFlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENoZWNrIGFuZCBhc3NpZ24gaW5kZXggb25seSBpZiB0aGUgZXZlbnQgd2FzIHJhaXNlZCBmcm9tIGFueSBEZXRhaWxzUm93IGVsZW1lbnRcbiAgICAgICAgICAgIGlmIChlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaXRlbS1pbmRleCcpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gTnVtYmVyKGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1pdGVtLWluZGV4JykpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvbkFjdGl2ZUl0ZW1DaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkFjdGl2ZUl0ZW1DaGFuZ2VkKGl0ZW1zW2luZGV4XSwgaW5kZXgsIGV2KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb2N1c2VkSXRlbUluZGV4OiBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25CbHVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgZm9jdXNlZEl0ZW1JbmRleDogLTEsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgaW5pdGlhbGl6ZUNvbXBvbmVudFJlZihfdGhpcyk7XG4gICAgICAgIF90aGlzLl9hc3luYyA9IG5ldyBBc3luYyhfdGhpcyk7XG4gICAgICAgIF90aGlzLl9hY3RpdmVSb3dzID0ge307XG4gICAgICAgIF90aGlzLl9jb2x1bW5PdmVycmlkZXMgPSB7fTtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBmb2N1c2VkSXRlbUluZGV4OiAtMSxcbiAgICAgICAgICAgIGxhc3RXaWR0aDogMCxcbiAgICAgICAgICAgIGFkanVzdGVkQ29sdW1uczogX3RoaXMuX2dldEFkanVzdGVkQ29sdW1ucyhwcm9wcywgdW5kZWZpbmVkKSxcbiAgICAgICAgICAgIGlzU2l6aW5nOiBmYWxzZSxcbiAgICAgICAgICAgIGlzQ29sbGFwc2VkOiBwcm9wcy5ncm91cFByb3BzICYmIHByb3BzLmdyb3VwUHJvcHMuaXNBbGxHcm91cHNDb2xsYXBzZWQsXG4gICAgICAgICAgICBpc1NvbWVHcm91cEV4cGFuZGVkOiBwcm9wcy5ncm91cFByb3BzICYmICFwcm9wcy5ncm91cFByb3BzLmlzQWxsR3JvdXBzQ29sbGFwc2VkLFxuICAgICAgICAgICAgdmVyc2lvbjoge30sXG4gICAgICAgICAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IF90aGlzLl9nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsXG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9zZWxlY3Rpb24gPVxuICAgICAgICAgICAgcHJvcHMuc2VsZWN0aW9uIHx8XG4gICAgICAgICAgICAgICAgbmV3IFNlbGVjdGlvbih7XG4gICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0aW9uQ2hhbmdlZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBnZXRLZXk6IHByb3BzLmdldEtleSxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uTW9kZTogcHJvcHMuc2VsZWN0aW9uTW9kZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFfdGhpcy5wcm9wcy5kaXNhYmxlU2VsZWN0aW9uWm9uZSkge1xuICAgICAgICAgICAgX3RoaXMuX3NlbGVjdGlvbi5zZXRJdGVtcyhwcm9wcy5pdGVtcywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLl9kcmFnRHJvcEhlbHBlciA9IHByb3BzLmRyYWdEcm9wRXZlbnRzXG4gICAgICAgICAgICA/IG5ldyBEcmFnRHJvcEhlbHBlcih7XG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uOiBfdGhpcy5fc2VsZWN0aW9uLFxuICAgICAgICAgICAgICAgIG1pbmltdW1QaXhlbHNGb3JEcmFnOiBwcm9wcy5taW5pbXVtUGl4ZWxzRm9yRHJhZyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgX3RoaXMuX2luaXRpYWxGb2N1c2VkSW5kZXggPSBwcm9wcy5pbml0aWFsRm9jdXNlZEluZGV4O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIERldGFpbHNMaXN0QmFzZS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiAobmV4dFByb3BzLCBwcmV2aW91c1N0YXRlKSB7XG4gICAgICAgIHJldHVybiBwcmV2aW91c1N0YXRlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZpb3VzU3RhdGUpO1xuICAgIH07XG4gICAgRGV0YWlsc0xpc3RCYXNlLnByb3RvdHlwZS5zY3JvbGxUb0luZGV4ID0gZnVuY3Rpb24gKGluZGV4LCBtZWFzdXJlSXRlbSwgc2Nyb2xsVG9Nb2RlKSB7XG4gICAgICAgIHRoaXMuX2xpc3QuY3VycmVudCAmJiB0aGlzLl9saXN0LmN1cnJlbnQuc2Nyb2xsVG9JbmRleChpbmRleCwgbWVhc3VyZUl0ZW0sIHNjcm9sbFRvTW9kZSk7XG4gICAgICAgIHRoaXMuX2dyb3VwZWRMaXN0LmN1cnJlbnQgJiYgdGhpcy5fZ3JvdXBlZExpc3QuY3VycmVudC5zY3JvbGxUb0luZGV4KGluZGV4LCBtZWFzdXJlSXRlbSwgc2Nyb2xsVG9Nb2RlKTtcbiAgICB9O1xuICAgIERldGFpbHNMaXN0QmFzZS5wcm90b3R5cGUuZm9jdXNJbmRleCA9IGZ1bmN0aW9uIChpbmRleCwgZm9yY2VJbnRvRmlyc3RFbGVtZW50LCBtZWFzdXJlSXRlbSwgc2Nyb2xsVG9Nb2RlKSB7XG4gICAgICAgIGlmIChmb3JjZUludG9GaXJzdEVsZW1lbnQgPT09IHZvaWQgMCkgeyBmb3JjZUludG9GaXJzdEVsZW1lbnQgPSBmYWxzZTsgfVxuICAgICAgICB2YXIgaXRlbSA9IHRoaXMucHJvcHMuaXRlbXNbaW5kZXhdO1xuICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxUb0luZGV4KGluZGV4LCBtZWFzdXJlSXRlbSwgc2Nyb2xsVG9Nb2RlKTtcbiAgICAgICAgICAgIHZhciBpdGVtS2V5ID0gdGhpcy5fZ2V0SXRlbUtleShpdGVtLCBpbmRleCk7XG4gICAgICAgICAgICB2YXIgcm93ID0gdGhpcy5fYWN0aXZlUm93c1tpdGVtS2V5XTtcbiAgICAgICAgICAgIGlmIChyb3cpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRGb2N1c1RvUm93KHJvdywgZm9yY2VJbnRvRmlyc3RFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgRGV0YWlsc0xpc3RCYXNlLnByb3RvdHlwZS5nZXRTdGFydEl0ZW1JbmRleEluVmlldyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xpc3QgJiYgdGhpcy5fbGlzdC5jdXJyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGlzdC5jdXJyZW50LmdldFN0YXJ0SXRlbUluZGV4SW5WaWV3KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fZ3JvdXBlZExpc3QgJiYgdGhpcy5fZ3JvdXBlZExpc3QuY3VycmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dyb3VwZWRMaXN0LmN1cnJlbnQuZ2V0U3RhcnRJdGVtSW5kZXhJblZpZXcoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9O1xuICAgIERldGFpbHNMaXN0QmFzZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9kcmFnRHJvcEhlbHBlcikge1xuICAgICAgICAgICAgLy8gVE9ETyBJZiB0aGUgRHJhZ0Ryb3BIZWxwZXIgd2FzIHBhc3NlZCB2aWEgcHJvcHMsIHRoaXMgd2lsbCBkaXNwb3NlIGl0LCB3aGljaCBpcyBpbmNvcnJlY3QgYmVoYXZpb3IuXG4gICAgICAgICAgICB0aGlzLl9kcmFnRHJvcEhlbHBlci5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYXN5bmMuZGlzcG9zZSgpO1xuICAgIH07XG4gICAgRGV0YWlsc0xpc3RCYXNlLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgICAgdGhpcy5fbm90aWZ5Q29sdW1uc1Jlc2l6ZWQoKTtcbiAgICAgICAgaWYgKHRoaXMuX2luaXRpYWxGb2N1c2VkSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLnByb3BzLml0ZW1zW3RoaXMuX2luaXRpYWxGb2N1c2VkSW5kZXhdO1xuICAgICAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbUtleSA9IHRoaXMuX2dldEl0ZW1LZXkoaXRlbSwgdGhpcy5faW5pdGlhbEZvY3VzZWRJbmRleCk7XG4gICAgICAgICAgICAgICAgdmFyIHJvdyA9IHRoaXMuX2FjdGl2ZVJvd3NbaXRlbUtleV07XG4gICAgICAgICAgICAgICAgaWYgKHJvdykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRGb2N1c1RvUm93SWZQZW5kaW5nKHJvdyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnByb3BzLml0ZW1zICE9PSBwcmV2UHJvcHMuaXRlbXMgJiZcbiAgICAgICAgICAgIHRoaXMucHJvcHMuaXRlbXMubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5mb2N1c2VkSXRlbUluZGV4ICE9PSAtMSAmJlxuICAgICAgICAgICAgIWVsZW1lbnRDb250YWlucyh0aGlzLl9yb290LmN1cnJlbnQsIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQsIGZhbHNlKSkge1xuICAgICAgICAgICAgLy8gSXRlbSBzZXQgaGFzIGNoYW5nZWQgYW5kIHByZXZpb3VzbHktZm9jdXNlZCBpdGVtIGlzIGdvbmUuXG4gICAgICAgICAgICAvLyBTZXQgZm9jdXMgdG8gaXRlbSBhdCBpbmRleCBvZiBwcmV2aW91c2x5LWZvY3VzZWQgaXRlbSBpZiBpdCBpcyBpbiByYW5nZSxcbiAgICAgICAgICAgIC8vIGVsc2Ugc2V0IGZvY3VzIHRvIHRoZSBsYXN0IGl0ZW0uXG4gICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLnN0YXRlLmZvY3VzZWRJdGVtSW5kZXggPCB0aGlzLnByb3BzLml0ZW1zLmxlbmd0aFxuICAgICAgICAgICAgICAgID8gdGhpcy5zdGF0ZS5mb2N1c2VkSXRlbUluZGV4XG4gICAgICAgICAgICAgICAgOiB0aGlzLnByb3BzLml0ZW1zLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMucHJvcHMuaXRlbXNbaW5kZXhdO1xuICAgICAgICAgICAgdmFyIGl0ZW1LZXkgPSB0aGlzLl9nZXRJdGVtS2V5KGl0ZW0sIHRoaXMuc3RhdGUuZm9jdXNlZEl0ZW1JbmRleCk7XG4gICAgICAgICAgICB2YXIgcm93ID0gdGhpcy5fYWN0aXZlUm93c1tpdGVtS2V5XTtcbiAgICAgICAgICAgIGlmIChyb3cpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRGb2N1c1RvUm93KHJvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbml0aWFsRm9jdXNlZEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucHJvcHMub25EaWRVcGRhdGUpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25EaWRVcGRhdGUodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERldGFpbHNMaXN0QmFzZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGV0YWlsc0xpc3RJbm5lciwgX19hc3NpZ24oe30sIHRoaXMucHJvcHMsIHRoaXMuc3RhdGUsIHsgc2VsZWN0aW9uOiB0aGlzLl9zZWxlY3Rpb24sIGRyYWdEcm9wSGVscGVyOiB0aGlzLl9kcmFnRHJvcEhlbHBlciwgcm9vdFJlZjogdGhpcy5fcm9vdCwgbGlzdFJlZjogdGhpcy5fbGlzdCwgZ3JvdXBlZExpc3RSZWY6IHRoaXMuX2dyb3VwZWRMaXN0LCBmb2N1c1pvbmVSZWY6IHRoaXMuX2ZvY3VzWm9uZSwgaGVhZGVyUmVmOiB0aGlzLl9oZWFkZXIsIHNlbGVjdGlvblpvbmVSZWY6IHRoaXMuX3NlbGVjdGlvblpvbmUsIG9uR3JvdXBFeHBhbmRTdGF0ZUNoYW5nZWQ6IHRoaXMuX29uR3JvdXBFeHBhbmRTdGF0ZUNoYW5nZWQsIG9uQ29sdW1uSXNTaXppbmdDaGFuZ2VkOiB0aGlzLl9vbkNvbHVtbklzU2l6aW5nQ2hhbmdlZCwgb25Sb3dEaWRNb3VudDogdGhpcy5fb25Sb3dEaWRNb3VudCwgb25Sb3dXaWxsVW5tb3VudDogdGhpcy5fb25Sb3dXaWxsVW5tb3VudCwgb25Db2x1bW5SZXNpemVkOiB0aGlzLl9vbkNvbHVtblJlc2l6ZWQsIG9uQ29sdW1uQXV0b1Jlc2l6ZWQ6IHRoaXMuX29uQ29sdW1uQXV0b1Jlc2l6ZWQsIG9uVG9nZ2xlQ29sbGFwc2U6IHRoaXMuX29uVG9nZ2xlQ29sbGFwc2UsIG9uQWN0aXZlUm93Q2hhbmdlZDogdGhpcy5fb25BY3RpdmVSb3dDaGFuZ2VkLCBvbkJsdXI6IHRoaXMuX29uQmx1ciwgb25SZW5kZXJEZWZhdWx0Um93OiB0aGlzLl9vblJlbmRlclJvdyB9KSkpO1xuICAgIH07XG4gICAgRGV0YWlsc0xpc3RCYXNlLnByb3RvdHlwZS5mb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JjZVVwZGF0ZS5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLl9mb3JjZUxpc3RVcGRhdGVzKCk7XG4gICAgfTtcbiAgICBEZXRhaWxzTGlzdEJhc2UucHJvdG90eXBlLl9nZXRHcm91cE5lc3RpbmdEZXB0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGdyb3VwcyA9IHRoaXMucHJvcHMuZ3JvdXBzO1xuICAgICAgICB2YXIgbGV2ZWwgPSAwO1xuICAgICAgICB2YXIgZ3JvdXBzSW5MZXZlbCA9IGdyb3VwcztcbiAgICAgICAgd2hpbGUgKGdyb3Vwc0luTGV2ZWwgJiYgZ3JvdXBzSW5MZXZlbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBsZXZlbCsrO1xuICAgICAgICAgICAgZ3JvdXBzSW5MZXZlbCA9IGdyb3Vwc0luTGV2ZWxbMF0uY2hpbGRyZW47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxldmVsO1xuICAgIH07XG4gICAgRGV0YWlsc0xpc3RCYXNlLnByb3RvdHlwZS5fc2V0Rm9jdXNUb1Jvd0lmUGVuZGluZyA9IGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgdmFyIGl0ZW1JbmRleCA9IHJvdy5wcm9wcy5pdGVtSW5kZXg7XG4gICAgICAgIGlmICh0aGlzLl9pbml0aWFsRm9jdXNlZEluZGV4ICE9PSB1bmRlZmluZWQgJiYgaXRlbUluZGV4ID09PSB0aGlzLl9pbml0aWFsRm9jdXNlZEluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRGb2N1c1RvUm93KHJvdyk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5faW5pdGlhbEZvY3VzZWRJbmRleDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGV0YWlsc0xpc3RCYXNlLnByb3RvdHlwZS5fc2V0Rm9jdXNUb1JvdyA9IGZ1bmN0aW9uIChyb3csIGZvcmNlSW50b0ZpcnN0RWxlbWVudCkge1xuICAgICAgICBpZiAoZm9yY2VJbnRvRmlyc3RFbGVtZW50ID09PSB2b2lkIDApIHsgZm9yY2VJbnRvRmlyc3RFbGVtZW50ID0gZmFsc2U7IH1cbiAgICAgICAgaWYgKHRoaXMuX3NlbGVjdGlvblpvbmUuY3VycmVudCkge1xuICAgICAgICAgICAgdGhpcy5fc2VsZWN0aW9uWm9uZS5jdXJyZW50Lmlnbm9yZU5leHRGb2N1cygpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FzeW5jLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcm93LmZvY3VzKGZvcmNlSW50b0ZpcnN0RWxlbWVudCk7XG4gICAgICAgIH0sIDApO1xuICAgIH07XG4gICAgRGV0YWlsc0xpc3RCYXNlLnByb3RvdHlwZS5fZm9yY2VMaXN0VXBkYXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2dyb3VwZWRMaXN0LmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2dyb3VwZWRMaXN0LmN1cnJlbnQuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fbGlzdC5jdXJyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9saXN0LmN1cnJlbnQuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGV0YWlsc0xpc3RCYXNlLnByb3RvdHlwZS5fbm90aWZ5Q29sdW1uc1Jlc2l6ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc3RhdGUuYWRqdXN0ZWRDb2x1bW5zLmZvckVhY2goZnVuY3Rpb24gKGNvbHVtbikge1xuICAgICAgICAgICAgaWYgKGNvbHVtbi5vbkNvbHVtblJlc2l6ZSkge1xuICAgICAgICAgICAgICAgIGNvbHVtbi5vbkNvbHVtblJlc2l6ZShjb2x1bW4uY3VycmVudFdpZHRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBEZXRhaWxzTGlzdEJhc2UucHJvdG90eXBlLl9hZGp1c3RDb2x1bW5zID0gZnVuY3Rpb24gKG5ld1Byb3BzLCBwcmV2aW91c1N0YXRlLCBmb3JjZVVwZGF0ZSwgcmVzaXppbmdDb2x1bW5JbmRleCkge1xuICAgICAgICB2YXIgYWRqdXN0ZWRDb2x1bW5zID0gdGhpcy5fZ2V0QWRqdXN0ZWRDb2x1bW5zKG5ld1Byb3BzLCBwcmV2aW91c1N0YXRlLCBmb3JjZVVwZGF0ZSwgcmVzaXppbmdDb2x1bW5JbmRleCk7XG4gICAgICAgIHZhciB2aWV3cG9ydCA9IHRoaXMucHJvcHMudmlld3BvcnQ7XG4gICAgICAgIHZhciB2aWV3cG9ydFdpZHRoID0gdmlld3BvcnQgJiYgdmlld3BvcnQud2lkdGggPyB2aWV3cG9ydC53aWR0aCA6IDA7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcHJldmlvdXNTdGF0ZSksIHsgYWRqdXN0ZWRDb2x1bW5zOiBhZGp1c3RlZENvbHVtbnMsIGxhc3RXaWR0aDogdmlld3BvcnRXaWR0aCB9KTtcbiAgICB9O1xuICAgIC8qKiBSZXR1cm5zIGFkanVzdGVkIGNvbHVtbnMsIGdpdmVuIHRoZSB2aWV3cG9ydCBzaXplIGFuZCBsYXlvdXQgbW9kZS4gKi9cbiAgICBEZXRhaWxzTGlzdEJhc2UucHJvdG90eXBlLl9nZXRBZGp1c3RlZENvbHVtbnMgPSBmdW5jdGlvbiAobmV3UHJvcHMsIHByZXZpb3VzU3RhdGUsIGZvcmNlVXBkYXRlLCByZXNpemluZ0NvbHVtbkluZGV4KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBuZXdJdGVtcyA9IG5ld1Byb3BzLml0ZW1zLCBsYXlvdXRNb2RlID0gbmV3UHJvcHMubGF5b3V0TW9kZSwgc2VsZWN0aW9uTW9kZSA9IG5ld1Byb3BzLnNlbGVjdGlvbk1vZGUsIHZpZXdwb3J0ID0gbmV3UHJvcHMudmlld3BvcnQ7XG4gICAgICAgIHZhciB2aWV3cG9ydFdpZHRoID0gdmlld3BvcnQgJiYgdmlld3BvcnQud2lkdGggPyB2aWV3cG9ydC53aWR0aCA6IDA7XG4gICAgICAgIHZhciBuZXdDb2x1bW5zID0gbmV3UHJvcHMuY29sdW1ucztcbiAgICAgICAgdmFyIGNvbHVtbnMgPSB0aGlzLnByb3BzID8gdGhpcy5wcm9wcy5jb2x1bW5zIDogW107XG4gICAgICAgIHZhciBsYXN0V2lkdGggPSBwcmV2aW91c1N0YXRlID8gcHJldmlvdXNTdGF0ZS5sYXN0V2lkdGggOiAtMTtcbiAgICAgICAgdmFyIGxhc3RTZWxlY3Rpb25Nb2RlID0gcHJldmlvdXNTdGF0ZSA/IHByZXZpb3VzU3RhdGUubGFzdFNlbGVjdGlvbk1vZGUgOiB1bmRlZmluZWQ7XG4gICAgICAgIGlmICghZm9yY2VVcGRhdGUgJiZcbiAgICAgICAgICAgIGxhc3RXaWR0aCA9PT0gdmlld3BvcnRXaWR0aCAmJlxuICAgICAgICAgICAgbGFzdFNlbGVjdGlvbk1vZGUgPT09IHNlbGVjdGlvbk1vZGUgJiZcbiAgICAgICAgICAgICghY29sdW1ucyB8fCBuZXdDb2x1bW5zID09PSBjb2x1bW5zKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ld0NvbHVtbnMgfHwgW107XG4gICAgICAgIH1cbiAgICAgICAgbmV3Q29sdW1ucyA9IG5ld0NvbHVtbnMgfHwgYnVpbGRDb2x1bW5zKG5ld0l0ZW1zLCB0cnVlKTtcbiAgICAgICAgdmFyIGFkanVzdGVkQ29sdW1ucztcbiAgICAgICAgaWYgKGxheW91dE1vZGUgPT09IERldGFpbHNMaXN0TGF5b3V0TW9kZS5maXhlZENvbHVtbnMpIHtcbiAgICAgICAgICAgIGFkanVzdGVkQ29sdW1ucyA9IHRoaXMuX2dldEZpeGVkQ29sdW1ucyhuZXdDb2x1bW5zKTtcbiAgICAgICAgICAgIC8vIFByZXNlcnZlIGFkanVzdGVkIGNvbHVtbiBjYWxjdWxhdGVkIHdpZHRocy5cbiAgICAgICAgICAgIGFkanVzdGVkQ29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uIChjb2x1bW4pIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fcmVtZW1iZXJDYWxjdWxhdGVkV2lkdGgoY29sdW1uLCBjb2x1bW4uY2FsY3VsYXRlZFdpZHRoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHJlc2l6aW5nQ29sdW1uSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGFkanVzdGVkQ29sdW1ucyA9IHRoaXMuX2dldEp1c3RpZmllZENvbHVtbnNBZnRlclJlc2l6ZShuZXdDb2x1bW5zLCB2aWV3cG9ydFdpZHRoLCBuZXdQcm9wcywgcmVzaXppbmdDb2x1bW5JbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhZGp1c3RlZENvbHVtbnMgPSB0aGlzLl9nZXRKdXN0aWZpZWRDb2x1bW5zKG5ld0NvbHVtbnMsIHZpZXdwb3J0V2lkdGgsIG5ld1Byb3BzLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkanVzdGVkQ29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uIChjb2x1bW4pIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fZ2V0Q29sdW1uT3ZlcnJpZGUoY29sdW1uLmtleSkuY3VycmVudFdpZHRoID0gY29sdW1uLmNhbGN1bGF0ZWRXaWR0aDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhZGp1c3RlZENvbHVtbnM7XG4gICAgfTtcbiAgICAvKiogQnVpbGRzIGEgc2V0IG9mIGNvbHVtbnMgYmFzZWQgb24gdGhlIGdpdmVuIGNvbHVtbnMgbWl4ZWQgd2l0aCB0aGUgY3VycmVudCBvdmVycmlkZXMuICovXG4gICAgRGV0YWlsc0xpc3RCYXNlLnByb3RvdHlwZS5fZ2V0Rml4ZWRDb2x1bW5zID0gZnVuY3Rpb24gKG5ld0NvbHVtbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ld0NvbHVtbnMubWFwKGZ1bmN0aW9uIChjb2x1bW4pIHtcbiAgICAgICAgICAgIHZhciBuZXdDb2x1bW4gPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY29sdW1uKSwgX3RoaXMuX2NvbHVtbk92ZXJyaWRlc1tjb2x1bW4ua2V5XSk7XG4gICAgICAgICAgICBpZiAoIW5ld0NvbHVtbi5jYWxjdWxhdGVkV2lkdGgpIHtcbiAgICAgICAgICAgICAgICBuZXdDb2x1bW4uY2FsY3VsYXRlZFdpZHRoID0gbmV3Q29sdW1uLm1heFdpZHRoIHx8IG5ld0NvbHVtbi5taW5XaWR0aCB8fCBNSU5fQ09MVU1OX1dJRFRIO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ld0NvbHVtbjtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBEZXRhaWxzTGlzdEJhc2UucHJvdG90eXBlLl9nZXRKdXN0aWZpZWRDb2x1bW5zQWZ0ZXJSZXNpemUgPSBmdW5jdGlvbiAobmV3Q29sdW1ucywgdmlld3BvcnRXaWR0aCwgcHJvcHMsIHJlc2l6aW5nQ29sdW1uSW5kZXgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGZpeGVkQ29sdW1ucyA9IG5ld0NvbHVtbnMuc2xpY2UoMCwgcmVzaXppbmdDb2x1bW5JbmRleCk7XG4gICAgICAgIGZpeGVkQ29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uIChjb2x1bW4pIHsgcmV0dXJuIChjb2x1bW4uY2FsY3VsYXRlZFdpZHRoID0gX3RoaXMuX2dldENvbHVtbk92ZXJyaWRlKGNvbHVtbi5rZXkpLmN1cnJlbnRXaWR0aCk7IH0pO1xuICAgICAgICB2YXIgZml4ZWRXaWR0aCA9IGZpeGVkQ29sdW1ucy5yZWR1Y2UoZnVuY3Rpb24gKHRvdGFsLCBjb2x1bW4sIGkpIHsgcmV0dXJuIHRvdGFsICsgZ2V0UGFkZGVkV2lkdGgoY29sdW1uLCBpID09PSAwLCBwcm9wcyk7IH0sIDApO1xuICAgICAgICB2YXIgcmVtYWluaW5nQ29sdW1ucyA9IG5ld0NvbHVtbnMuc2xpY2UocmVzaXppbmdDb2x1bW5JbmRleCk7XG4gICAgICAgIHZhciByZW1haW5pbmdXaWR0aCA9IHZpZXdwb3J0V2lkdGggLSBmaXhlZFdpZHRoO1xuICAgICAgICByZXR1cm4gX19zcHJlYWRBcnJheXMoZml4ZWRDb2x1bW5zLCB0aGlzLl9nZXRKdXN0aWZpZWRDb2x1bW5zKHJlbWFpbmluZ0NvbHVtbnMsIHJlbWFpbmluZ1dpZHRoLCBwcm9wcywgcmVzaXppbmdDb2x1bW5JbmRleCkpO1xuICAgIH07XG4gICAgLyoqIEJ1aWxkcyBhIHNldCBvZiBjb2x1bW5zIHRvIGZpeCB3aXRoaW4gdGhlIHZpZXdwb3J0IHdpZHRoLiAqL1xuICAgIERldGFpbHNMaXN0QmFzZS5wcm90b3R5cGUuX2dldEp1c3RpZmllZENvbHVtbnMgPSBmdW5jdGlvbiAobmV3Q29sdW1ucywgdmlld3BvcnRXaWR0aCwgcHJvcHMsIGZpcnN0SW5kZXgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hID0gcHJvcHMuc2VsZWN0aW9uTW9kZSwgc2VsZWN0aW9uTW9kZSA9IF9hID09PSB2b2lkIDAgPyB0aGlzLl9zZWxlY3Rpb24ubW9kZSA6IF9hLCBjaGVja2JveFZpc2liaWxpdHkgPSBwcm9wcy5jaGVja2JveFZpc2liaWxpdHk7XG4gICAgICAgIHZhciByb3dDaGVja1dpZHRoID0gc2VsZWN0aW9uTW9kZSAhPT0gU2VsZWN0aW9uTW9kZS5ub25lICYmIGNoZWNrYm94VmlzaWJpbGl0eSAhPT0gQ2hlY2tib3hWaXNpYmlsaXR5LmhpZGRlbiA/IENIRUNLQk9YX1dJRFRIIDogMDtcbiAgICAgICAgdmFyIGdyb3VwRXhwYW5kV2lkdGggPSB0aGlzLl9nZXRHcm91cE5lc3RpbmdEZXB0aCgpICogR1JPVVBfRVhQQU5EX1dJRFRIO1xuICAgICAgICB2YXIgdG90YWxXaWR0aCA9IDA7IC8vIG9mZnNldCBiZWNhdXNlIHdlIGhhdmUgb25lIGxlc3MgaW5uZXIgcGFkZGluZy5cbiAgICAgICAgdmFyIGF2YWlsYWJsZVdpZHRoID0gdmlld3BvcnRXaWR0aCAtIChyb3dDaGVja1dpZHRoICsgZ3JvdXBFeHBhbmRXaWR0aCk7XG4gICAgICAgIHZhciBhZGp1c3RlZENvbHVtbnMgPSBuZXdDb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sdW1uLCBpKSB7XG4gICAgICAgICAgICB2YXIgbmV3Q29sdW1uID0gX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oe30sIGNvbHVtbiksIHsgY2FsY3VsYXRlZFdpZHRoOiBjb2x1bW4ubWluV2lkdGggfHwgTUlOX0NPTFVNTl9XSURUSCB9KSwgX3RoaXMuX2NvbHVtbk92ZXJyaWRlc1tjb2x1bW4ua2V5XSk7XG4gICAgICAgICAgICB2YXIgaXNGaXJzdCA9IGkgKyBmaXJzdEluZGV4ID09PSAwO1xuICAgICAgICAgICAgdG90YWxXaWR0aCArPSBnZXRQYWRkZWRXaWR0aChuZXdDb2x1bW4sIGlzRmlyc3QsIHByb3BzKTtcbiAgICAgICAgICAgIHJldHVybiBuZXdDb2x1bW47XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgbGFzdEluZGV4ID0gYWRqdXN0ZWRDb2x1bW5zLmxlbmd0aCAtIDE7XG4gICAgICAgIC8vIFNocmluayBvciByZW1vdmUgY29sbGFwc2FibGUgY29sdW1ucy5cbiAgICAgICAgd2hpbGUgKGxhc3RJbmRleCA+IDAgJiYgdG90YWxXaWR0aCA+IGF2YWlsYWJsZVdpZHRoKSB7XG4gICAgICAgICAgICB2YXIgY29sdW1uID0gYWRqdXN0ZWRDb2x1bW5zW2xhc3RJbmRleF07XG4gICAgICAgICAgICB2YXIgbWluV2lkdGggPSBjb2x1bW4ubWluV2lkdGggfHwgTUlOX0NPTFVNTl9XSURUSDtcbiAgICAgICAgICAgIHZhciBvdmVyZmxvd1dpZHRoID0gdG90YWxXaWR0aCAtIGF2YWlsYWJsZVdpZHRoO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICBpZiAoY29sdW1uLmNhbGN1bGF0ZWRXaWR0aCAtIG1pbldpZHRoID49IG92ZXJmbG93V2lkdGggfHwgIShjb2x1bW4uaXNDb2xsYXBzaWJsZSB8fCBjb2x1bW4uaXNDb2xsYXBzYWJsZSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgb3JpZ2luYWxXaWR0aCA9IGNvbHVtbi5jYWxjdWxhdGVkV2lkdGg7XG4gICAgICAgICAgICAgICAgY29sdW1uLmNhbGN1bGF0ZWRXaWR0aCA9IE1hdGgubWF4KGNvbHVtbi5jYWxjdWxhdGVkV2lkdGggLSBvdmVyZmxvd1dpZHRoLCBtaW5XaWR0aCk7XG4gICAgICAgICAgICAgICAgdG90YWxXaWR0aCAtPSBvcmlnaW5hbFdpZHRoIC0gY29sdW1uLmNhbGN1bGF0ZWRXaWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRvdGFsV2lkdGggLT0gZ2V0UGFkZGVkV2lkdGgoY29sdW1uLCBmYWxzZSwgcHJvcHMpO1xuICAgICAgICAgICAgICAgIGFkanVzdGVkQ29sdW1ucy5zcGxpY2UobGFzdEluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RJbmRleC0tO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoZW4gZXhwYW5kIGNvbHVtbnMgc3RhcnRpbmcgYXQgdGhlIGJlZ2lubmluZywgdW50aWwgd2UndmUgZmlsbGVkIHRoZSB3aWR0aC5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhZGp1c3RlZENvbHVtbnMubGVuZ3RoICYmIHRvdGFsV2lkdGggPCBhdmFpbGFibGVXaWR0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY29sdW1uID0gYWRqdXN0ZWRDb2x1bW5zW2ldO1xuICAgICAgICAgICAgdmFyIGlzTGFzdCA9IGkgPT09IGFkanVzdGVkQ29sdW1ucy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgdmFyIG92ZXJyaWRlcyA9IHRoaXMuX2NvbHVtbk92ZXJyaWRlc1tjb2x1bW4ua2V5XTtcbiAgICAgICAgICAgIGlmIChvdmVycmlkZXMgJiYgb3ZlcnJpZGVzLmNhbGN1bGF0ZWRXaWR0aCAmJiAhaXNMYXN0KSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc3BhY2VMZWZ0ID0gYXZhaWxhYmxlV2lkdGggLSB0b3RhbFdpZHRoO1xuICAgICAgICAgICAgdmFyIGluY3JlbWVudCA9IHZvaWQgMDtcbiAgICAgICAgICAgIGlmIChpc0xhc3QpIHtcbiAgICAgICAgICAgICAgICBpbmNyZW1lbnQgPSBzcGFjZUxlZnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgbWF4V2lkdGggPSBjb2x1bW4ubWF4V2lkdGg7XG4gICAgICAgICAgICAgICAgdmFyIG1pbldpZHRoID0gY29sdW1uLm1pbldpZHRoIHx8IG1heFdpZHRoIHx8IE1JTl9DT0xVTU5fV0lEVEg7XG4gICAgICAgICAgICAgICAgaW5jcmVtZW50ID0gbWF4V2lkdGggPyBNYXRoLm1pbihzcGFjZUxlZnQsIG1heFdpZHRoIC0gbWluV2lkdGgpIDogc3BhY2VMZWZ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29sdW1uLmNhbGN1bGF0ZWRXaWR0aCA9IGNvbHVtbi5jYWxjdWxhdGVkV2lkdGggKyBpbmNyZW1lbnQ7XG4gICAgICAgICAgICB0b3RhbFdpZHRoICs9IGluY3JlbWVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWRqdXN0ZWRDb2x1bW5zO1xuICAgIH07XG4gICAgRGV0YWlsc0xpc3RCYXNlLnByb3RvdHlwZS5fcmVtZW1iZXJDYWxjdWxhdGVkV2lkdGggPSBmdW5jdGlvbiAoY29sdW1uLCBuZXdDYWxjdWxhdGVkV2lkdGgpIHtcbiAgICAgICAgdmFyIG92ZXJyaWRlcyA9IHRoaXMuX2dldENvbHVtbk92ZXJyaWRlKGNvbHVtbi5rZXkpO1xuICAgICAgICBvdmVycmlkZXMuY2FsY3VsYXRlZFdpZHRoID0gbmV3Q2FsY3VsYXRlZFdpZHRoO1xuICAgICAgICBvdmVycmlkZXMuY3VycmVudFdpZHRoID0gbmV3Q2FsY3VsYXRlZFdpZHRoO1xuICAgIH07XG4gICAgRGV0YWlsc0xpc3RCYXNlLnByb3RvdHlwZS5fZ2V0Q29sdW1uT3ZlcnJpZGUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fY29sdW1uT3ZlcnJpZGVzW2tleV0gPSB0aGlzLl9jb2x1bW5PdmVycmlkZXNba2V5XSB8fCB7fSk7XG4gICAgfTtcbiAgICBEZXRhaWxzTGlzdEJhc2UucHJvdG90eXBlLl9nZXRJdGVtS2V5ID0gZnVuY3Rpb24gKGl0ZW0sIGl0ZW1JbmRleCkge1xuICAgICAgICB2YXIgZ2V0S2V5ID0gdGhpcy5wcm9wcy5nZXRLZXk7XG4gICAgICAgIHZhciBpdGVtS2V5ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgaXRlbUtleSA9IGl0ZW0ua2V5O1xuICAgICAgICB9XG4gICAgICAgIGlmIChnZXRLZXkpIHtcbiAgICAgICAgICAgIGl0ZW1LZXkgPSBnZXRLZXkoaXRlbSwgaXRlbUluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWl0ZW1LZXkpIHtcbiAgICAgICAgICAgIGl0ZW1LZXkgPSBpdGVtSW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW1LZXk7XG4gICAgfTtcbiAgICBEZXRhaWxzTGlzdEJhc2UuZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBsYXlvdXRNb2RlOiBEZXRhaWxzTGlzdExheW91dE1vZGUuanVzdGlmaWVkLFxuICAgICAgICBzZWxlY3Rpb25Nb2RlOiBTZWxlY3Rpb25Nb2RlLm11bHRpcGxlLFxuICAgICAgICBjb25zdHJhaW5Nb2RlOiBDb25zdHJhaW5Nb2RlLmhvcml6b250YWxDb25zdHJhaW5lZCxcbiAgICAgICAgY2hlY2tib3hWaXNpYmlsaXR5OiBDaGVja2JveFZpc2liaWxpdHkub25Ib3ZlcixcbiAgICAgICAgaXNIZWFkZXJWaXNpYmxlOiB0cnVlLFxuICAgICAgICBjb21wYWN0OiBmYWxzZSxcbiAgICAgICAgdXNlRmFzdEljb25zOiB0cnVlLFxuICAgIH07XG4gICAgRGV0YWlsc0xpc3RCYXNlID0gX19kZWNvcmF0ZShbXG4gICAgICAgIHdpdGhWaWV3cG9ydFxuICAgIF0sIERldGFpbHNMaXN0QmFzZSk7XG4gICAgcmV0dXJuIERldGFpbHNMaXN0QmFzZTtcbn0oUmVhY3QuQ29tcG9uZW50KSk7XG5leHBvcnQgeyBEZXRhaWxzTGlzdEJhc2UgfTtcbmV4cG9ydCBmdW5jdGlvbiBidWlsZENvbHVtbnMoaXRlbXMsIGNhblJlc2l6ZUNvbHVtbnMsIG9uQ29sdW1uQ2xpY2ssIHNvcnRlZENvbHVtbktleSwgaXNTb3J0ZWREZXNjZW5kaW5nLCBncm91cGVkQ29sdW1uS2V5LCBpc011bHRpbGluZSkge1xuICAgIHZhciBjb2x1bW5zID0gW107XG4gICAgaWYgKGl0ZW1zICYmIGl0ZW1zLmxlbmd0aCkge1xuICAgICAgICB2YXIgZmlyc3RJdGVtID0gaXRlbXNbMF07XG4gICAgICAgIGZvciAodmFyIHByb3BOYW1lIGluIGZpcnN0SXRlbSkge1xuICAgICAgICAgICAgaWYgKGZpcnN0SXRlbS5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBjb2x1bW5zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBrZXk6IHByb3BOYW1lLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBwcm9wTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgZmllbGROYW1lOiBwcm9wTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgbWluV2lkdGg6IE1JTl9DT0xVTU5fV0lEVEgsXG4gICAgICAgICAgICAgICAgICAgIG1heFdpZHRoOiAzMDAsXG4gICAgICAgICAgICAgICAgICAgIGlzQ29sbGFwc2FibGU6ICEhY29sdW1ucy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIGlzQ29sbGFwc2libGU6ICEhY29sdW1ucy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIGlzTXVsdGlsaW5lOiBpc011bHRpbGluZSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBpc011bHRpbGluZSxcbiAgICAgICAgICAgICAgICAgICAgaXNTb3J0ZWQ6IHNvcnRlZENvbHVtbktleSA9PT0gcHJvcE5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGlzU29ydGVkRGVzY2VuZGluZzogISFpc1NvcnRlZERlc2NlbmRpbmcsXG4gICAgICAgICAgICAgICAgICAgIGlzUm93SGVhZGVyOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uQWN0aW9uc01vZGU6IENvbHVtbkFjdGlvbnNNb2RlLmNsaWNrYWJsZSxcbiAgICAgICAgICAgICAgICAgICAgaXNSZXNpemFibGU6IGNhblJlc2l6ZUNvbHVtbnMsXG4gICAgICAgICAgICAgICAgICAgIG9uQ29sdW1uQ2xpY2s6IG9uQ29sdW1uQ2xpY2ssXG4gICAgICAgICAgICAgICAgICAgIGlzR3JvdXBlZDogZ3JvdXBlZENvbHVtbktleSA9PT0gcHJvcE5hbWUsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbHVtbnM7XG59XG5mdW5jdGlvbiBnZXRQYWRkZWRXaWR0aChjb2x1bW4sIGlzRmlyc3QsIHByb3BzKSB7XG4gICAgdmFyIF9hID0gcHJvcHMuY2VsbFN0eWxlUHJvcHMsIGNlbGxTdHlsZVByb3BzID0gX2EgPT09IHZvaWQgMCA/IERFRkFVTFRfQ0VMTF9TVFlMRV9QUk9QUyA6IF9hO1xuICAgIHJldHVybiAoY29sdW1uLmNhbGN1bGF0ZWRXaWR0aCArXG4gICAgICAgIGNlbGxTdHlsZVByb3BzLmNlbGxMZWZ0UGFkZGluZyArXG4gICAgICAgIGNlbGxTdHlsZVByb3BzLmNlbGxSaWdodFBhZGRpbmcgK1xuICAgICAgICAoY29sdW1uLmlzUGFkZGVkID8gY2VsbFN0eWxlUHJvcHMuY2VsbEV4dHJhUmlnaHRQYWRkaW5nIDogMCkpO1xufVxuZnVuY3Rpb24gZ2V0R3JvdXBOZXN0aW5nRGVwdGgoZ3JvdXBzKSB7XG4gICAgdmFyIGxldmVsID0gMDtcbiAgICB2YXIgZ3JvdXBzSW5MZXZlbCA9IGdyb3VwcztcbiAgICB3aGlsZSAoZ3JvdXBzSW5MZXZlbCAmJiBncm91cHNJbkxldmVsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbGV2ZWwrKztcbiAgICAgICAgZ3JvdXBzSW5MZXZlbCA9IGdyb3Vwc0luTGV2ZWxbMF0uY2hpbGRyZW47XG4gICAgfVxuICAgIHJldHVybiBsZXZlbDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURldGFpbHNMaXN0LmJhc2UuanMubWFwIiwiaW1wb3J0IHsgZ2V0R2xvYmFsQ2xhc3NOYW1lcyB9IGZyb20gJy4uLy4uL1N0eWxpbmcnO1xudmFyIEdsb2JhbENsYXNzTmFtZXMgPSB7XG4gICAgcm9vdDogJ21zLURldGFpbHNMaXN0JyxcbiAgICBjb21wYWN0OiAnbXMtRGV0YWlsc0xpc3QtLUNvbXBhY3QnLFxuICAgIGNvbnRlbnRXcmFwcGVyOiAnbXMtRGV0YWlsc0xpc3QtY29udGVudFdyYXBwZXInLFxuICAgIGhlYWRlcldyYXBwZXI6ICdtcy1EZXRhaWxzTGlzdC1oZWFkZXJXcmFwcGVyJyxcbiAgICBpc0ZpeGVkOiAnaXMtZml4ZWQnLFxuICAgIGlzSG9yaXpvbnRhbENvbnN0cmFpbmVkOiAnaXMtaG9yaXpvbnRhbENvbnN0cmFpbmVkJyxcbiAgICBsaXN0Q2VsbDogJ21zLUxpc3QtY2VsbCcsXG59O1xuZXhwb3J0IHZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHZhciB0aGVtZSA9IHByb3BzLnRoZW1lLCBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsIGlzSG9yaXpvbnRhbENvbnN0cmFpbmVkID0gcHJvcHMuaXNIb3Jpem9udGFsQ29uc3RyYWluZWQsIGNvbXBhY3QgPSBwcm9wcy5jb21wYWN0LCBpc0ZpeGVkID0gcHJvcHMuaXNGaXhlZDtcbiAgICB2YXIgc2VtYW50aWNDb2xvcnMgPSB0aGVtZS5zZW1hbnRpY0NvbG9ycztcbiAgICB2YXIgY2xhc3NOYW1lcyA9IGdldEdsb2JhbENsYXNzTmFtZXMoR2xvYmFsQ2xhc3NOYW1lcywgdGhlbWUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJvb3Q6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMucm9vdCxcbiAgICAgICAgICAgIHRoZW1lLmZvbnRzLnNtYWxsLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBzZW1hbnRpY0NvbG9ycy5saXN0VGV4dCxcbiAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfYSA9IHt9LFxuICAgICAgICAgICAgICAgICAgICBfYVtcIiYgLlwiICsgY2xhc3NOYW1lcy5saXN0Q2VsbF0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5IZWlnaHQ6IDM4LFxuICAgICAgICAgICAgICAgICAgICAgICAgd29yZEJyZWFrOiAnYnJlYWstd29yZCcsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF9hKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc0ZpeGVkICYmIGNsYXNzTmFtZXMuaXNGaXhlZCxcbiAgICAgICAgICAgIGNvbXBhY3QgJiYgW1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZXMuY29tcGFjdCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9iID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBfYltcIi5cIiArIGNsYXNzTmFtZXMubGlzdENlbGxdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodDogMzIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX2IpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaXNIb3Jpem9udGFsQ29uc3RyYWluZWQgJiYgW1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZXMuaXNIb3Jpem9udGFsQ29uc3RyYWluZWQsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd1g6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dZOiAndmlzaWJsZScsXG4gICAgICAgICAgICAgICAgICAgIFdlYmtpdE92ZXJmbG93U2Nyb2xsaW5nOiAndG91Y2gnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBdLFxuICAgICAgICBmb2N1c1pvbmU6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgICAgICAgICBtaW5XaWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIG1pbkhlaWdodDogMSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGhlYWRlcldyYXBwZXI6IGNsYXNzTmFtZXMuaGVhZGVyV3JhcHBlcixcbiAgICAgICAgY29udGVudFdyYXBwZXI6IGNsYXNzTmFtZXMuY29udGVudFdyYXBwZXIsXG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1EZXRhaWxzTGlzdC5zdHlsZXMuanMubWFwIiwiaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IERldGFpbHNMaXN0QmFzZSB9IGZyb20gJy4vRGV0YWlsc0xpc3QuYmFzZSc7XG5pbXBvcnQgeyBnZXRTdHlsZXMgfSBmcm9tICcuL0RldGFpbHNMaXN0LnN0eWxlcyc7XG5leHBvcnQgdmFyIERldGFpbHNMaXN0ID0gc3R5bGVkKERldGFpbHNMaXN0QmFzZSwgZ2V0U3R5bGVzLCB1bmRlZmluZWQsIHtcbiAgICBzY29wZTogJ0RldGFpbHNMaXN0Jyxcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGV0YWlsc0xpc3QuanMubWFwIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIHdhaXQobXMpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXR1cm4gc2V0VGltZW91dChyZXNvbHZlLCBtcyk7IH0pO1xyXG59XHJcbmV4cG9ydCB2YXIgYWRkVmVoaWNsZSA9IGZ1bmN0aW9uIChWZWhpY2xlKSB7IHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnaW4gYXN5bmMgRGlzcGF0Y2gnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHdhaXQoNTAwKV07XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdpbiBhc3luYyBEaXNwYXRjaCBhZnRlciB3YWl0IDUwMCcpO1xyXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goe1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiQWRkVmVoaWNsZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IFZlaGljbGVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KTsgfTsgfTtcclxuZXhwb3J0IHZhciByZW1vdmVWZWhpY2xlID0gZnVuY3Rpb24gKGlkKSB7IHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHdhaXQoMTAwKV07XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIlJlbW92ZVZlaGljbGVcIixcclxuICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiBpZFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn0pOyB9OyB9O1xyXG4iLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBkaXZQcm9wZXJ0aWVzLCBnZXROYXRpdmVQcm9wcyB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBjbGFzc05hbWVzRnVuY3Rpb24gfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xudmFyIGdldENsYXNzTmFtZXMgPSBjbGFzc05hbWVzRnVuY3Rpb24oe1xuICAgIC8vIExhYmVsIGlzIHVzZWQgYSBsb3QgYnkgb3RoZXIgY29tcG9uZW50cy5cbiAgICAvLyBJdCdzIGxpa2VseSB0byBzZWUgZXhwZWN0ZWQgY2FzZXMgd2hpY2ggcGFzcyBkaWZmZXJlbnQgY2xhc3NOYW1lIHRvIHRoZSBMYWJlbC5cbiAgICAvLyBUaGVyZWZvcmUgc2V0dGluZyBhIGxhcmdlciBjYWNoZSBzaXplLlxuICAgIGNhY2hlU2l6ZTogMTAwLFxufSk7XG52YXIgTGFiZWxCYXNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhMYWJlbEJhc2UsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTGFiZWxCYXNlKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIExhYmVsQmFzZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBfYiA9IF9hLmFzLCBSb290VHlwZSA9IF9iID09PSB2b2lkIDAgPyAnbGFiZWwnIDogX2IsIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSwgZGlzYWJsZWQgPSBfYS5kaXNhYmxlZCwgc3R5bGVzID0gX2Euc3R5bGVzLCByZXF1aXJlZCA9IF9hLnJlcXVpcmVkLCB0aGVtZSA9IF9hLnRoZW1lO1xuICAgICAgICB2YXIgY2xhc3NOYW1lcyA9IGdldENsYXNzTmFtZXMoc3R5bGVzLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgICAgIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgICAgICAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChSb290VHlwZSwgX19hc3NpZ24oe30sIGdldE5hdGl2ZVByb3BzKHRoaXMucHJvcHMsIGRpdlByb3BlcnRpZXMpLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcy5yb290IH0pLCBjaGlsZHJlbikpO1xuICAgIH07XG4gICAgcmV0dXJuIExhYmVsQmFzZTtcbn0oUmVhY3QuQ29tcG9uZW50KSk7XG5leHBvcnQgeyBMYWJlbEJhc2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUxhYmVsLmJhc2UuanMubWFwIiwiaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IExhYmVsQmFzZSB9IGZyb20gJy4vTGFiZWwuYmFzZSc7XG5pbXBvcnQgeyBnZXRTdHlsZXMgfSBmcm9tICcuL0xhYmVsLnN0eWxlcyc7XG5leHBvcnQgdmFyIExhYmVsID0gc3R5bGVkKExhYmVsQmFzZSwgZ2V0U3R5bGVzLCB1bmRlZmluZWQsIHtcbiAgICBzY29wZTogJ0xhYmVsJyxcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TGFiZWwuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEhpZ2hDb250cmFzdFNlbGVjdG9yLCBGb250V2VpZ2h0cywgZ2V0RWRnZUNocm9taXVtTm9IaWdoQ29udHJhc3RBZGp1c3RTZWxlY3RvciB9IGZyb20gJy4uLy4uL1N0eWxpbmcnO1xuZXhwb3J0IHZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIHRoZW1lID0gcHJvcHMudGhlbWUsIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSwgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCwgcmVxdWlyZWQgPSBwcm9wcy5yZXF1aXJlZDtcbiAgICB2YXIgc2VtYW50aWNDb2xvcnMgPSB0aGVtZS5zZW1hbnRpY0NvbG9ycztcbiAgICAvLyBUb2tlbnNcbiAgICB2YXIgbGFiZWxGb250V2VpZ2h0ID0gRm9udFdlaWdodHMuc2VtaWJvbGQ7XG4gICAgdmFyIGxhYmVsQ29sb3IgPSBzZW1hbnRpY0NvbG9ycy5ib2R5VGV4dDtcbiAgICB2YXIgbGFiZWxEaXNhYmxlZENvbG9yID0gc2VtYW50aWNDb2xvcnMuZGlzYWJsZWRCb2R5VGV4dDtcbiAgICB2YXIgbGFiZWxSZXF1aXJlZFN0YXJDb2xvciA9IHNlbWFudGljQ29sb3JzLmVycm9yVGV4dDtcbiAgICByZXR1cm4ge1xuICAgICAgICByb290OiBbXG4gICAgICAgICAgICAnbXMtTGFiZWwnLFxuICAgICAgICAgICAgdGhlbWUuZm9udHMubWVkaXVtLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IGxhYmVsRm9udFdlaWdodCxcbiAgICAgICAgICAgICAgICBjb2xvcjogbGFiZWxDb2xvcixcbiAgICAgICAgICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgICAgICAgICBib3hTaGFkb3c6ICdub25lJyxcbiAgICAgICAgICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAnNXB4IDAnLFxuICAgICAgICAgICAgICAgIHdvcmRXcmFwOiAnYnJlYWstd29yZCcsXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3dXcmFwOiAnYnJlYWstd29yZCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGlzYWJsZWQgJiYge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBsYWJlbERpc2FibGVkQ29sb3IsXG4gICAgICAgICAgICAgICAgc2VsZWN0b3JzOiBfX2Fzc2lnbigoX2EgPSB7fSwgX2FbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ0dyYXlUZXh0JyxcbiAgICAgICAgICAgICAgICB9LCBfYSksIGdldEVkZ2VDaHJvbWl1bU5vSGlnaENvbnRyYXN0QWRqdXN0U2VsZWN0b3IoKSksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWlyZWQgJiYge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAnOjphZnRlcic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiJyAqJ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGxhYmVsUmVxdWlyZWRTdGFyQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQ6IDEyLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBdLFxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TGFiZWwuc3R5bGVzLmpzLm1hcCIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJy4vZG9tL2dldFdpbmRvdyc7XG5leHBvcnQgdmFyIGlzSUUxMSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHZhciB3aW4gPSBnZXRXaW5kb3coKTtcbiAgICBpZiAoISgoX2IgPSAoX2EgPSB3aW4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uYXZpZ2F0b3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi51c2VyQWdlbnQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHdpbi5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ3J2OjExLjAnKSA+IC0xO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWllMTFEZXRlY3Rvci5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMYWJlbCB9IGZyb20gJy4uLy4uL0xhYmVsJztcbmltcG9ydCB7IEljb24gfSBmcm9tICcuLi8uLi9JY29uJztcbmltcG9ydCB7IEFzeW5jLCBEZWxheWVkUmVuZGVyLCBjbGFzc05hbWVzRnVuY3Rpb24sIGdldElkLCBnZXROYXRpdmVQcm9wcywgZ2V0V2luZG93LCBpbml0aWFsaXplQ29tcG9uZW50UmVmLCBpbnB1dFByb3BlcnRpZXMsIGlzQ29udHJvbGxlZCwgaXNJRTExLCB0ZXh0QXJlYVByb3BlcnRpZXMsIHdhcm4sIHdhcm5Db250cm9sbGVkVXNhZ2UsIHdhcm5NdXR1YWxseUV4Y2x1c2l2ZSwgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xudmFyIGdldENsYXNzTmFtZXMgPSBjbGFzc05hbWVzRnVuY3Rpb24oKTtcbnZhciBERUZBVUxUX1NUQVRFX1ZBTFVFID0gJyc7XG52YXIgQ09NUE9ORU5UX05BTUUgPSAnVGV4dEZpZWxkJztcbnZhciBSRVZFQUxfSUNPTl9OQU1FID0gJ1JlZEV5ZSc7XG52YXIgSElERV9JQ09OX05BTUUgPSAnSGlkZSc7XG52YXIgVGV4dEZpZWxkQmFzZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGV4dEZpZWxkQmFzZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUZXh0RmllbGRCYXNlKHByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fdGV4dEVsZW1lbnQgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICAgICAgX3RoaXMuX29uRm9jdXMgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkZvY3VzKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJvcHMub25Gb2N1cyhldik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGlzRm9jdXNlZDogdHJ1ZSB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLnByb3BzLnZhbGlkYXRlT25Gb2N1c0luKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl92YWxpZGF0ZShfdGhpcy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbkJsdXIgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkJsdXIpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5vbkJsdXIoZXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBpc0ZvY3VzZWQ6IGZhbHNlIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMucHJvcHMudmFsaWRhdGVPbkZvY3VzT3V0KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl92YWxpZGF0ZShfdGhpcy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblJlbmRlckxhYmVsID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgICAgICB2YXIgbGFiZWwgPSBwcm9wcy5sYWJlbCwgcmVxdWlyZWQgPSBwcm9wcy5yZXF1aXJlZDtcbiAgICAgICAgICAgIC8vIElQcm9jZXNzZWRTdHlsZVNldCBkZWZpbml0aW9uIHJlcXVpcmVzIGNhc3RpbmcgZm9yIHdoYXQgTGFiZWwgZXhwZWN0cyBhcyBpdHMgc3R5bGVzIHByb3BcbiAgICAgICAgICAgIHZhciBsYWJlbFN0eWxlcyA9IF90aGlzLl9jbGFzc05hbWVzLnN1YkNvbXBvbmVudFN0eWxlc1xuICAgICAgICAgICAgICAgID8gX3RoaXMuX2NsYXNzTmFtZXMuc3ViQ29tcG9uZW50U3R5bGVzLmxhYmVsXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAobGFiZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGFiZWwsIHsgcmVxdWlyZWQ6IHJlcXVpcmVkLCBodG1sRm9yOiBfdGhpcy5faWQsIHN0eWxlczogbGFiZWxTdHlsZXMsIGRpc2FibGVkOiBwcm9wcy5kaXNhYmxlZCwgaWQ6IF90aGlzLl9sYWJlbElkIH0sIHByb3BzLmxhYmVsKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uUmVuZGVyRGVzY3JpcHRpb24gPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgICAgIGlmIChwcm9wcy5kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogX3RoaXMuX2NsYXNzTmFtZXMuZGVzY3JpcHRpb24gfSwgcHJvcHMuZGVzY3JpcHRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblJldmVhbEJ1dHRvbkNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAocHJldlN0YXRlKSB7IHJldHVybiAoeyBpc1JldmVhbGluZ1Bhc3N3b3JkOiAhcHJldlN0YXRlLmlzUmV2ZWFsaW5nUGFzc3dvcmQgfSk7IH0pO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25JbnB1dENoYW5nZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgLy8gUHJldmlvdXNseSwgd2UgbmVlZGVkIHRvIGNhbGwgYm90aCBvbklucHV0IGFuZCBvbkNoYW5nZSBkdWUgdG8gc29tZSB3ZWlyZCBJRS9SZWFjdCBpc3N1ZXMsXG4gICAgICAgICAgICAvLyB3aGljaCBoYXZlICpwcm9iYWJseSogYmVlbiBmaXhlZCBub3c6XG4gICAgICAgICAgICAvLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvZmx1ZW50dWkvaXNzdWVzLzc0NCAobGlrZWx5IGZpeGVkKVxuICAgICAgICAgICAgLy8gLSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L2ZsdWVudHVpL2lzc3Vlcy84MjQgKGNvbmZpcm1lZCBmaXhlZClcbiAgICAgICAgICAgIC8vIFRPRE8gKEZhYnJpYyA4PykgLSBTd2l0Y2ggdG8gY2FsbGluZyBvbmx5IG9uQ2hhbmdlLiBUaGlzIHN3aXRjaCBpcyBwcmV0dHkgZGlzcnVwdGl2ZSBmb3JcbiAgICAgICAgICAgIC8vIHRlc3RzIChvdXJzIGFuZCBtYXliZSBjb25zdW1lcnMnIHRvbyksIHNvIGl0IHNlZW1lZCBiZXN0IHRvIGRvIHRoZSBzd2l0Y2ggaW4gYSBtYWpvciBidW1wLlxuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBlbGVtZW50LnZhbHVlO1xuICAgICAgICAgICAgLy8gSWdub3JlIHRoaXMgZXZlbnQgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCAoaW4gY2FzZSBvbmUgb2YgdGhlIElFIGJ1Z3MgY29tZXMgYmFjaylcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBfdGhpcy5fbGFzdENoYW5nZVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuX2xhc3RDaGFuZ2VWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgLy8gVGhpcyBpcyBzbyBkZXZlbG9wZXJzIGNhbiBhY2Nlc3MgdGhlIGV2ZW50IHByb3BlcnRpZXMgaW4gYXN5bmNocm9ub3VzIGNhbGxiYWNrc1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2V2ZW50cy5odG1sI2V2ZW50LXBvb2xpbmdcbiAgICAgICAgICAgIGV2ZW50LnBlcnNpc3QoKTtcbiAgICAgICAgICAgIHZhciBpc1NhbWVWYWx1ZTtcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUsIHByb3BzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByZXZWYWx1ZSA9IF9nZXRWYWx1ZShwcm9wcywgcHJldlN0YXRlKSB8fCAnJztcbiAgICAgICAgICAgICAgICBpc1NhbWVWYWx1ZSA9IHZhbHVlID09PSBwcmV2VmFsdWU7XG4gICAgICAgICAgICAgICAgLy8gQXZvaWQgZG9pbmcgdW5uZWNlc3Nhcnkgd29yayB3aGVuIHRoZSB2YWx1ZSBoYXMgbm90IGNoYW5nZWQuXG4gICAgICAgICAgICAgICAgaWYgKGlzU2FtZVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBPTkxZIGlmIHRoaXMgaXMgYW4gdW5jb250cm9sbGVkIGNvbXBvbmVudCwgdXBkYXRlIHRoZSBkaXNwbGF5ZWQgdmFsdWUuXG4gICAgICAgICAgICAgICAgLy8gKENvbnRyb2xsZWQgY29tcG9uZW50cyBtdXN0IHVwZGF0ZSB0aGUgYHZhbHVlYCBwcm9wIGZyb20gYG9uQ2hhbmdlYC4pXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9pc0NvbnRyb2xsZWQgPyBudWxsIDogeyB1bmNvbnRyb2xsZWRWYWx1ZTogdmFsdWUgfTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdmFsdWUgYWN0dWFsbHkgY2hhbmdlZCwgY2FsbCBvbkNoYW5nZSAoZm9yIGVpdGhlciBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZClcbiAgICAgICAgICAgICAgICB2YXIgb25DaGFuZ2UgPSBfdGhpcy5wcm9wcy5vbkNoYW5nZTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzU2FtZVZhbHVlICYmIG9uQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlKGV2ZW50LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGluaXRpYWxpemVDb21wb25lbnRSZWYoX3RoaXMpO1xuICAgICAgICBfdGhpcy5fYXN5bmMgPSBuZXcgQXN5bmMoX3RoaXMpO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2Fybk11dHVhbGx5RXhjbHVzaXZlKENPTVBPTkVOVF9OQU1FLCBwcm9wcywge1xuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogJ29uR2V0RXJyb3JNZXNzYWdlJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLl9mYWxsYmFja0lkID0gZ2V0SWQoQ09NUE9ORU5UX05BTUUpO1xuICAgICAgICBfdGhpcy5fZGVzY3JpcHRpb25JZCA9IGdldElkKENPTVBPTkVOVF9OQU1FICsgJ0Rlc2NyaXB0aW9uJyk7XG4gICAgICAgIF90aGlzLl9sYWJlbElkID0gZ2V0SWQoQ09NUE9ORU5UX05BTUUgKyAnTGFiZWwnKTtcbiAgICAgICAgX3RoaXMuX3dhcm5Db250cm9sbGVkVXNhZ2UoKTtcbiAgICAgICAgdmFyIF9hID0gcHJvcHMuZGVmYXVsdFZhbHVlLCBkZWZhdWx0VmFsdWUgPSBfYSA9PT0gdm9pZCAwID8gREVGQVVMVF9TVEFURV9WQUxVRSA6IF9hO1xuICAgICAgICBpZiAodHlwZW9mIGRlZmF1bHRWYWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgaXNuJ3QgYWxsb3dlZCBwZXIgdGhlIHByb3BzLCBidXQgaGFwcGVucyBhbnl3YXkuXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWUgPSBTdHJpbmcoZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHVuY29udHJvbGxlZFZhbHVlOiBfdGhpcy5faXNDb250cm9sbGVkID8gdW5kZWZpbmVkIDogZGVmYXVsdFZhbHVlLFxuICAgICAgICAgICAgaXNGb2N1c2VkOiBmYWxzZSxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogJycsXG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9kZWxheWVkVmFsaWRhdGUgPSBfdGhpcy5fYXN5bmMuZGVib3VuY2UoX3RoaXMuX3ZhbGlkYXRlLCBfdGhpcy5wcm9wcy5kZWZlcnJlZFZhbGlkYXRpb25UaW1lKTtcbiAgICAgICAgX3RoaXMuX2xhc3RWYWxpZGF0aW9uID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGV4dEZpZWxkQmFzZS5wcm90b3R5cGUsIFwidmFsdWVcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgdGV4dCBmaWVsZC5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9nZXRWYWx1ZSh0aGlzLnByb3BzLCB0aGlzLnN0YXRlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgVGV4dEZpZWxkQmFzZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2FkanVzdElucHV0SGVpZ2h0KCk7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnZhbGlkYXRlT25Mb2FkKSB7XG4gICAgICAgICAgICB0aGlzLl92YWxpZGF0ZSh0aGlzLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGV4dEZpZWxkQmFzZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2FzeW5jLmRpc3Bvc2UoKTtcbiAgICB9O1xuICAgIFRleHRGaWVsZEJhc2UucHJvdG90eXBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZWxlY3Rpb246IFt0aGlzLnNlbGVjdGlvblN0YXJ0LCB0aGlzLnNlbGVjdGlvbkVuZF0sXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBUZXh0RmllbGRCYXNlLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzLCBwcmV2U3RhdGUsIHNuYXBzaG90KSB7XG4gICAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgIHZhciBfYSA9IChzbmFwc2hvdCB8fCB7fSkuc2VsZWN0aW9uLCBzZWxlY3Rpb24gPSBfYSA9PT0gdm9pZCAwID8gW251bGwsIG51bGxdIDogX2E7XG4gICAgICAgIHZhciBzdGFydCA9IHNlbGVjdGlvblswXSwgZW5kID0gc2VsZWN0aW9uWzFdO1xuICAgICAgICBpZiAoISFwcmV2UHJvcHMubXVsdGlsaW5lICE9PSAhIXByb3BzLm11bHRpbGluZSAmJiBwcmV2U3RhdGUuaXNGb2N1c2VkKSB7XG4gICAgICAgICAgICAvLyBUaGUgdGV4dCBmaWVsZCBoYXMganVzdCBjaGFuZ2VkIGJldHdlZW4gc2luZ2xlLSBhbmQgbXVsdGktbGluZSwgc28gd2UgbmVlZCB0byByZXNldCBmb2N1c1xuICAgICAgICAgICAgLy8gYW5kIHNlbGVjdGlvbi9jdXJzb3IuXG4gICAgICAgICAgICB0aGlzLmZvY3VzKCk7XG4gICAgICAgICAgICBpZiAoc3RhcnQgIT09IG51bGwgJiYgZW5kICE9PSBudWxsICYmIHN0YXJ0ID49IDAgJiYgZW5kID49IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFNlbGVjdGlvblJhbmdlKHN0YXJ0LCBlbmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2VmFsdWUgPSBfZ2V0VmFsdWUocHJldlByb3BzLCBwcmV2U3RhdGUpO1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgICBpZiAocHJldlZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgLy8gSGFuZGxlIGNvbnRyb2xsZWQvdW5jb250cm9sbGVkIHdhcm5pbmdzIGFuZCBzdGF0dXNcbiAgICAgICAgICAgIHRoaXMuX3dhcm5Db250cm9sbGVkVXNhZ2UocHJldlByb3BzKTtcbiAgICAgICAgICAgIC8vIENsZWFyIGVycm9yIG1lc3NhZ2UgaWYgbmVlZGVkXG4gICAgICAgICAgICAvLyBUT0RPOiBpcyB0aGVyZSBhbnkgd2F5IHRvIGRvIHRoaXMgd2l0aG91dCBhbiBleHRyYSByZW5kZXI/XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5lcnJvck1lc3NhZ2UgJiYgIXByb3BzLmVycm9yTWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBlcnJvck1lc3NhZ2U6ICcnIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQWRqdXN0IGhlaWdodCBpZiBuZWVkZWQgYmFzZWQgb24gbmV3IHZhbHVlXG4gICAgICAgICAgICB0aGlzLl9hZGp1c3RJbnB1dEhlaWdodCgpO1xuICAgICAgICAgICAgLy8gUmVzZXQgdGhlIHJlY29yZCBvZiB0aGUgbGFzdCB2YWx1ZSBzZWVuIGJ5IGEgY2hhbmdlL2lucHV0IGV2ZW50XG4gICAgICAgICAgICB0aGlzLl9sYXN0Q2hhbmdlVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAvLyBUT0RPOiAjNTg3NSBhZGRlZCBsb2dpYyB0byB0cmlnZ2VyIHZhbGlkYXRpb24gaW4gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyBhbmQgb3RoZXIgcGxhY2VzLlxuICAgICAgICAgICAgLy8gVGhpcyBzZWVtcyBhIGJpdCBvZGQgYW5kIGhhcmQgdG8gaW50ZWdyYXRlIHdpdGggdGhlIG5ldyBhcHByb2FjaC5cbiAgICAgICAgICAgIC8vIChTdGFydGluZyB0byB0aGluayB3ZSBzaG91bGQganVzdCBwdXQgdGhlIHZhbGlkYXRpb24gbG9naWMgaW4gYSBzZXBhcmF0ZSB3cmFwcGVyIGNvbXBvbmVudC4uLj8pXG4gICAgICAgICAgICBpZiAoX3Nob3VsZFZhbGlkYXRlQWxsQ2hhbmdlcyhwcm9wcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWxheWVkVmFsaWRhdGUodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXh0RmllbGRCYXNlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIGJvcmRlcmxlc3MgPSBfYS5ib3JkZXJsZXNzLCBjbGFzc05hbWUgPSBfYS5jbGFzc05hbWUsIGRpc2FibGVkID0gX2EuZGlzYWJsZWQsIGljb25Qcm9wcyA9IF9hLmljb25Qcm9wcywgaW5wdXRDbGFzc05hbWUgPSBfYS5pbnB1dENsYXNzTmFtZSwgbGFiZWwgPSBfYS5sYWJlbCwgbXVsdGlsaW5lID0gX2EubXVsdGlsaW5lLCByZXF1aXJlZCA9IF9hLnJlcXVpcmVkLCB1bmRlcmxpbmVkID0gX2EudW5kZXJsaW5lZCwgcHJlZml4ID0gX2EucHJlZml4LCByZXNpemFibGUgPSBfYS5yZXNpemFibGUsIHN1ZmZpeCA9IF9hLnN1ZmZpeCwgdGhlbWUgPSBfYS50aGVtZSwgc3R5bGVzID0gX2Euc3R5bGVzLCBhdXRvQWRqdXN0SGVpZ2h0ID0gX2EuYXV0b0FkanVzdEhlaWdodCwgY2FuUmV2ZWFsUGFzc3dvcmQgPSBfYS5jYW5SZXZlYWxQYXNzd29yZCwgdHlwZSA9IF9hLnR5cGUsIF9iID0gX2Eub25SZW5kZXJQcmVmaXgsIG9uUmVuZGVyUHJlZml4ID0gX2IgPT09IHZvaWQgMCA/IHRoaXMuX29uUmVuZGVyUHJlZml4IDogX2IsIF9jID0gX2Eub25SZW5kZXJTdWZmaXgsIG9uUmVuZGVyU3VmZml4ID0gX2MgPT09IHZvaWQgMCA/IHRoaXMuX29uUmVuZGVyU3VmZml4IDogX2MsIF9kID0gX2Eub25SZW5kZXJMYWJlbCwgb25SZW5kZXJMYWJlbCA9IF9kID09PSB2b2lkIDAgPyB0aGlzLl9vblJlbmRlckxhYmVsIDogX2QsIF9lID0gX2Eub25SZW5kZXJEZXNjcmlwdGlvbiwgb25SZW5kZXJEZXNjcmlwdGlvbiA9IF9lID09PSB2b2lkIDAgPyB0aGlzLl9vblJlbmRlckRlc2NyaXB0aW9uIDogX2U7XG4gICAgICAgIHZhciBfZiA9IHRoaXMuc3RhdGUsIGlzRm9jdXNlZCA9IF9mLmlzRm9jdXNlZCwgaXNSZXZlYWxpbmdQYXNzd29yZCA9IF9mLmlzUmV2ZWFsaW5nUGFzc3dvcmQ7XG4gICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSB0aGlzLl9lcnJvck1lc3NhZ2U7XG4gICAgICAgIHZhciBoYXNSZXZlYWxCdXR0b24gPSAhIWNhblJldmVhbFBhc3N3b3JkICYmIHR5cGUgPT09ICdwYXNzd29yZCcgJiYgX2Jyb3dzZXJOZWVkc1JldmVhbEJ1dHRvbigpO1xuICAgICAgICB2YXIgY2xhc3NOYW1lcyA9ICh0aGlzLl9jbGFzc05hbWVzID0gZ2V0Q2xhc3NOYW1lcyhzdHlsZXMsIHtcbiAgICAgICAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICAgICAgZm9jdXNlZDogaXNGb2N1c2VkLFxuICAgICAgICAgICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgICAgICAgICAgbXVsdGlsaW5lOiBtdWx0aWxpbmUsXG4gICAgICAgICAgICBoYXNMYWJlbDogISFsYWJlbCxcbiAgICAgICAgICAgIGhhc0Vycm9yTWVzc2FnZTogISFlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICBib3JkZXJsZXNzOiBib3JkZXJsZXNzLFxuICAgICAgICAgICAgcmVzaXphYmxlOiByZXNpemFibGUsXG4gICAgICAgICAgICBoYXNJY29uOiAhIWljb25Qcm9wcyxcbiAgICAgICAgICAgIHVuZGVybGluZWQ6IHVuZGVybGluZWQsXG4gICAgICAgICAgICBpbnB1dENsYXNzTmFtZTogaW5wdXRDbGFzc05hbWUsXG4gICAgICAgICAgICBhdXRvQWRqdXN0SGVpZ2h0OiBhdXRvQWRqdXN0SGVpZ2h0LFxuICAgICAgICAgICAgaGFzUmV2ZWFsQnV0dG9uOiBoYXNSZXZlYWxCdXR0b24sXG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzLnJvb3QgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMud3JhcHBlciB9LFxuICAgICAgICAgICAgICAgIG9uUmVuZGVyTGFiZWwodGhpcy5wcm9wcywgdGhpcy5fb25SZW5kZXJMYWJlbCksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcy5maWVsZEdyb3VwIH0sXG4gICAgICAgICAgICAgICAgICAgIChwcmVmaXggIT09IHVuZGVmaW5lZCB8fCB0aGlzLnByb3BzLm9uUmVuZGVyUHJlZml4KSAmJiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcy5wcmVmaXggfSwgb25SZW5kZXJQcmVmaXgodGhpcy5wcm9wcywgdGhpcy5fb25SZW5kZXJQcmVmaXgpKSksXG4gICAgICAgICAgICAgICAgICAgIG11bHRpbGluZSA/IHRoaXMuX3JlbmRlclRleHRBcmVhKCkgOiB0aGlzLl9yZW5kZXJJbnB1dCgpLFxuICAgICAgICAgICAgICAgICAgICBpY29uUHJvcHMgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChJY29uLCBfX2Fzc2lnbih7IGNsYXNzTmFtZTogY2xhc3NOYW1lcy5pY29uIH0sIGljb25Qcm9wcykpLFxuICAgICAgICAgICAgICAgICAgICBoYXNSZXZlYWxCdXR0b24gJiYgKFxuICAgICAgICAgICAgICAgICAgICAvLyBFeHBsaWNpdGx5IHNldCB0eXBlPVwiYnV0dG9uXCIgc2luY2UgdGhlIGRlZmF1bHQgYnV0dG9uIHR5cGUgd2l0aGluIGEgZm9ybSBpcyBcInN1Ym1pdFwiXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMucmV2ZWFsQnV0dG9uLCBvbkNsaWNrOiB0aGlzLl9vblJldmVhbEJ1dHRvbkNsaWNrLCB0eXBlOiBcImJ1dHRvblwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcy5yZXZlYWxTcGFuIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJY29uLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcy5yZXZlYWxJY29uLCBpY29uTmFtZTogaXNSZXZlYWxpbmdQYXNzd29yZCA/IEhJREVfSUNPTl9OQU1FIDogUkVWRUFMX0lDT05fTkFNRSB9KSkpKSxcbiAgICAgICAgICAgICAgICAgICAgKHN1ZmZpeCAhPT0gdW5kZWZpbmVkIHx8IHRoaXMucHJvcHMub25SZW5kZXJTdWZmaXgpICYmIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzLnN1ZmZpeCB9LCBvblJlbmRlclN1ZmZpeCh0aGlzLnByb3BzLCB0aGlzLl9vblJlbmRlclN1ZmZpeCkpKSkpLFxuICAgICAgICAgICAgdGhpcy5faXNEZXNjcmlwdGlvbkF2YWlsYWJsZSAmJiAoUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBpZDogdGhpcy5fZGVzY3JpcHRpb25JZCB9LFxuICAgICAgICAgICAgICAgIG9uUmVuZGVyRGVzY3JpcHRpb24odGhpcy5wcm9wcywgdGhpcy5fb25SZW5kZXJEZXNjcmlwdGlvbiksXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlICYmIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgcm9sZTogXCJhbGVydFwiIH0sXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVsYXllZFJlbmRlciwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmVycm9yTWVzc2FnZSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgXCJkYXRhLWF1dG9tYXRpb24taWRcIjogXCJlcnJvci1tZXNzYWdlXCIgfSwgZXJyb3JNZXNzYWdlKSkpKSkpKSkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0cyBmb2N1cyBvbiB0aGUgdGV4dCBmaWVsZFxuICAgICAqL1xuICAgIFRleHRGaWVsZEJhc2UucHJvdG90eXBlLmZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fdGV4dEVsZW1lbnQuY3VycmVudCkge1xuICAgICAgICAgICAgdGhpcy5fdGV4dEVsZW1lbnQuY3VycmVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBCbHVycyB0aGUgdGV4dCBmaWVsZC5cbiAgICAgKi9cbiAgICBUZXh0RmllbGRCYXNlLnByb3RvdHlwZS5ibHVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fdGV4dEVsZW1lbnQuY3VycmVudCkge1xuICAgICAgICAgICAgdGhpcy5fdGV4dEVsZW1lbnQuY3VycmVudC5ibHVyKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNlbGVjdHMgdGhlIHRleHQgZmllbGRcbiAgICAgKi9cbiAgICBUZXh0RmllbGRCYXNlLnByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl90ZXh0RWxlbWVudC5jdXJyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl90ZXh0RWxlbWVudC5jdXJyZW50LnNlbGVjdCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzZWxlY3Rpb24gc3RhcnQgb2YgdGhlIHRleHQgZmllbGQgdG8gYSBzcGVjaWZpZWQgdmFsdWVcbiAgICAgKi9cbiAgICBUZXh0RmllbGRCYXNlLnByb3RvdHlwZS5zZXRTZWxlY3Rpb25TdGFydCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5fdGV4dEVsZW1lbnQuY3VycmVudCkge1xuICAgICAgICAgICAgdGhpcy5fdGV4dEVsZW1lbnQuY3VycmVudC5zZWxlY3Rpb25TdGFydCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzZWxlY3Rpb24gZW5kIG9mIHRoZSB0ZXh0IGZpZWxkIHRvIGEgc3BlY2lmaWVkIHZhbHVlXG4gICAgICovXG4gICAgVGV4dEZpZWxkQmFzZS5wcm90b3R5cGUuc2V0U2VsZWN0aW9uRW5kID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLl90ZXh0RWxlbWVudC5jdXJyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl90ZXh0RWxlbWVudC5jdXJyZW50LnNlbGVjdGlvbkVuZCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGV4dEZpZWxkQmFzZS5wcm90b3R5cGUsIFwic2VsZWN0aW9uU3RhcnRcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgc2VsZWN0aW9uIHN0YXJ0IG9mIHRoZSB0ZXh0IGZpZWxkXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90ZXh0RWxlbWVudC5jdXJyZW50ID8gdGhpcy5fdGV4dEVsZW1lbnQuY3VycmVudC5zZWxlY3Rpb25TdGFydCA6IC0xO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGV4dEZpZWxkQmFzZS5wcm90b3R5cGUsIFwic2VsZWN0aW9uRW5kXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIHNlbGVjdGlvbiBlbmQgb2YgdGhlIHRleHQgZmllbGRcbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RleHRFbGVtZW50LmN1cnJlbnQgPyB0aGlzLl90ZXh0RWxlbWVudC5jdXJyZW50LnNlbGVjdGlvbkVuZCA6IC0xO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdGFydCBhbmQgZW5kIHBvc2l0aW9ucyBvZiBhIHNlbGVjdGlvbiBpbiBhIHRleHQgZmllbGQuXG4gICAgICogQHBhcmFtIHN0YXJ0IC0gSW5kZXggb2YgdGhlIHN0YXJ0IG9mIHRoZSBzZWxlY3Rpb24uXG4gICAgICogQHBhcmFtIGVuZCAtIEluZGV4IG9mIHRoZSBlbmQgb2YgdGhlIHNlbGVjdGlvbi5cbiAgICAgKi9cbiAgICBUZXh0RmllbGRCYXNlLnByb3RvdHlwZS5zZXRTZWxlY3Rpb25SYW5nZSA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICAgIGlmICh0aGlzLl90ZXh0RWxlbWVudC5jdXJyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl90ZXh0RWxlbWVudC5jdXJyZW50LnNldFNlbGVjdGlvblJhbmdlKHN0YXJ0LCBlbmQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXh0RmllbGRCYXNlLnByb3RvdHlwZS5fd2FybkNvbnRyb2xsZWRVc2FnZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICAgICAgLy8gU2hvdyB3YXJuaW5ncyBpZiBwcm9wcyBhcmUgYmVpbmcgdXNlZCBpbiBhbiBpbnZhbGlkIHdheVxuICAgICAgICB3YXJuQ29udHJvbGxlZFVzYWdlKHtcbiAgICAgICAgICAgIGNvbXBvbmVudElkOiB0aGlzLl9pZCxcbiAgICAgICAgICAgIGNvbXBvbmVudE5hbWU6IENPTVBPTkVOVF9OQU1FLFxuICAgICAgICAgICAgcHJvcHM6IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBvbGRQcm9wczogcHJldlByb3BzLFxuICAgICAgICAgICAgdmFsdWVQcm9wOiAndmFsdWUnLFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlUHJvcDogJ2RlZmF1bHRWYWx1ZScsXG4gICAgICAgICAgICBvbkNoYW5nZVByb3A6ICdvbkNoYW5nZScsXG4gICAgICAgICAgICByZWFkT25seVByb3A6ICdyZWFkT25seScsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSA9PT0gbnVsbCAmJiAhdGhpcy5faGFzV2FybmVkTnVsbFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9oYXNXYXJuZWROdWxsVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgd2FybihcIldhcm5pbmc6ICd2YWx1ZScgcHJvcCBvbiAnXCIgKyBDT01QT05FTlRfTkFNRSArIFwiJyBzaG91bGQgbm90IGJlIG51bGwuIENvbnNpZGVyIHVzaW5nIGFuIFwiICtcbiAgICAgICAgICAgICAgICAnZW1wdHkgc3RyaW5nIHRvIGNsZWFyIHRoZSBjb21wb25lbnQgb3IgdW5kZWZpbmVkIHRvIGluZGljYXRlIGFuIHVuY29udHJvbGxlZCBjb21wb25lbnQuJyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUZXh0RmllbGRCYXNlLnByb3RvdHlwZSwgXCJfaWRcIiwge1xuICAgICAgICAvKiogUmV0dXJucyBgcHJvcHMuaWRgIGlmIGF2YWlsYWJsZSwgb3IgYSBmYWxsYmFjayBpZiBub3QuICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuaWQgfHwgdGhpcy5fZmFsbGJhY2tJZDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRleHRGaWVsZEJhc2UucHJvdG90eXBlLCBcIl9pc0NvbnRyb2xsZWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0NvbnRyb2xsZWQodGhpcy5wcm9wcywgJ3ZhbHVlJyk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFRleHRGaWVsZEJhc2UucHJvdG90eXBlLl9vblJlbmRlclByZWZpeCA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICB2YXIgcHJlZml4ID0gcHJvcHMucHJlZml4O1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBzdHlsZTogeyBwYWRkaW5nQm90dG9tOiAnMXB4JyB9IH0sIHByZWZpeCk7XG4gICAgfTtcbiAgICBUZXh0RmllbGRCYXNlLnByb3RvdHlwZS5fb25SZW5kZXJTdWZmaXggPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgdmFyIHN1ZmZpeCA9IHByb3BzLnN1ZmZpeDtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgc3R5bGU6IHsgcGFkZGluZ0JvdHRvbTogJzFweCcgfSB9LCBzdWZmaXgpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRleHRGaWVsZEJhc2UucHJvdG90eXBlLCBcIl9lcnJvck1lc3NhZ2VcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogQ3VycmVudCBlcnJvciBtZXNzYWdlIGZyb20gZWl0aGVyIGBwcm9wcy5lcnJvck1lc3NhZ2VgIG9yIHRoZSByZXN1bHQgb2YgYHByb3BzLm9uR2V0RXJyb3JNZXNzYWdlYC5cbiAgICAgICAgICpcbiAgICAgICAgICogLSBJZiB0aGVyZSBpcyBubyB2YWxpZGF0aW9uIGVycm9yIG9yIHdlIGhhdmUgbm90IHZhbGlkYXRlZCB0aGUgaW5wdXQgdmFsdWUsIGVycm9yTWVzc2FnZSBpcyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICAgICAqIC0gSWYgd2UgaGF2ZSBkb25lIHRoZSB2YWxpZGF0aW9uIGFuZCB0aGVyZSBpcyB2YWxpZGF0aW9uIGVycm9yLCBlcnJvck1lc3NhZ2UgaXMgdGhlIHZhbGlkYXRpb24gZXJyb3IgbWVzc2FnZS5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcy5lcnJvck1lc3NhZ2UsIGVycm9yTWVzc2FnZSA9IF9hID09PSB2b2lkIDAgPyB0aGlzLnN0YXRlLmVycm9yTWVzc2FnZSA6IF9hO1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZSB8fCAnJztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRleHRGaWVsZEJhc2UucHJvdG90eXBlLCBcIl9pc0Rlc2NyaXB0aW9uQXZhaWxhYmxlXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGEgY3VzdG9tIGRlc2NyaXB0aW9uIHJlbmRlciBmdW5jdGlvbiBpcyBzdXBwbGllZCB0aGVuIHRyZWF0IGRlc2NyaXB0aW9uIGFzIGFsd2F5cyBhdmFpbGFibGUuXG4gICAgICAgICAqIE90aGVyd2lzZSBkZWZlciB0byB0aGUgcHJlc2VuY2Ugb2YgZGVzY3JpcHRpb24gb3IgZXJyb3IgbWVzc2FnZSB0ZXh0LlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICAgICAgcmV0dXJuICEhKHByb3BzLm9uUmVuZGVyRGVzY3JpcHRpb24gfHwgcHJvcHMuZGVzY3JpcHRpb24gfHwgdGhpcy5fZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgVGV4dEZpZWxkQmFzZS5wcm90b3R5cGUuX3JlbmRlclRleHRBcmVhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGV4dEFyZWFQcm9wcyA9IGdldE5hdGl2ZVByb3BzKHRoaXMucHJvcHMsIHRleHRBcmVhUHJvcGVydGllcywgWydkZWZhdWx0VmFsdWUnXSk7XG4gICAgICAgIHZhciBhcmlhTGFiZWxsZWRCeSA9IHRoaXMucHJvcHNbJ2FyaWEtbGFiZWxsZWRieSddIHx8ICh0aGlzLnByb3BzLmxhYmVsID8gdGhpcy5fbGFiZWxJZCA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIsIF9fYXNzaWduKHsgaWQ6IHRoaXMuX2lkIH0sIHRleHRBcmVhUHJvcHMsIHsgcmVmOiB0aGlzLl90ZXh0RWxlbWVudCwgdmFsdWU6IHRoaXMudmFsdWUgfHwgJycsIG9uSW5wdXQ6IHRoaXMuX29uSW5wdXRDaGFuZ2UsIG9uQ2hhbmdlOiB0aGlzLl9vbklucHV0Q2hhbmdlLCBjbGFzc05hbWU6IHRoaXMuX2NsYXNzTmFtZXMuZmllbGQsIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IGFyaWFMYWJlbGxlZEJ5LCBcImFyaWEtZGVzY3JpYmVkYnlcIjogdGhpcy5faXNEZXNjcmlwdGlvbkF2YWlsYWJsZSA/IHRoaXMuX2Rlc2NyaXB0aW9uSWQgOiB0aGlzLnByb3BzWydhcmlhLWRlc2NyaWJlZGJ5J10sIFwiYXJpYS1pbnZhbGlkXCI6ICEhdGhpcy5fZXJyb3JNZXNzYWdlLCBcImFyaWEtbGFiZWxcIjogdGhpcy5wcm9wcy5hcmlhTGFiZWwsIHJlYWRPbmx5OiB0aGlzLnByb3BzLnJlYWRPbmx5LCBvbkZvY3VzOiB0aGlzLl9vbkZvY3VzLCBvbkJsdXI6IHRoaXMuX29uQmx1ciB9KSkpO1xuICAgIH07XG4gICAgVGV4dEZpZWxkQmFzZS5wcm90b3R5cGUuX3JlbmRlcklucHV0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBpbnB1dFByb3BzID0gZ2V0TmF0aXZlUHJvcHModGhpcy5wcm9wcywgaW5wdXRQcm9wZXJ0aWVzLCBbXG4gICAgICAgICAgICAnZGVmYXVsdFZhbHVlJyxcbiAgICAgICAgICAgICd0eXBlJyxcbiAgICAgICAgXSk7XG4gICAgICAgIHZhciBhcmlhTGFiZWxsZWRCeSA9IHRoaXMucHJvcHNbJ2FyaWEtbGFiZWxsZWRieSddIHx8ICh0aGlzLnByb3BzLmxhYmVsID8gdGhpcy5fbGFiZWxJZCA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHZhciB0eXBlID0gdGhpcy5zdGF0ZS5pc1JldmVhbGluZ1Bhc3N3b3JkID8gJ3RleHQnIDogKF9hID0gdGhpcy5wcm9wcy50eXBlLCAoX2EgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJ3RleHQnKSk7XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIF9fYXNzaWduKHsgdHlwZTogdHlwZSwgaWQ6IHRoaXMuX2lkLCBcImFyaWEtbGFiZWxsZWRieVwiOiBhcmlhTGFiZWxsZWRCeSB9LCBpbnB1dFByb3BzLCB7IHJlZjogdGhpcy5fdGV4dEVsZW1lbnQsIHZhbHVlOiB0aGlzLnZhbHVlIHx8ICcnLCBvbklucHV0OiB0aGlzLl9vbklucHV0Q2hhbmdlLCBvbkNoYW5nZTogdGhpcy5fb25JbnB1dENoYW5nZSwgY2xhc3NOYW1lOiB0aGlzLl9jbGFzc05hbWVzLmZpZWxkLCBcImFyaWEtbGFiZWxcIjogdGhpcy5wcm9wcy5hcmlhTGFiZWwsIFwiYXJpYS1kZXNjcmliZWRieVwiOiB0aGlzLl9pc0Rlc2NyaXB0aW9uQXZhaWxhYmxlID8gdGhpcy5fZGVzY3JpcHRpb25JZCA6IHRoaXMucHJvcHNbJ2FyaWEtZGVzY3JpYmVkYnknXSwgXCJhcmlhLWludmFsaWRcIjogISF0aGlzLl9lcnJvck1lc3NhZ2UsIHJlYWRPbmx5OiB0aGlzLnByb3BzLnJlYWRPbmx5LCBvbkZvY3VzOiB0aGlzLl9vbkZvY3VzLCBvbkJsdXI6IHRoaXMuX29uQmx1ciB9KSkpO1xuICAgIH07XG4gICAgVGV4dEZpZWxkQmFzZS5wcm90b3R5cGUuX3ZhbGlkYXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8vIEluIGNhc2UgX3ZhbGlkYXRlIGlzIGNhbGxlZCBhZ2FpbiB3aGlsZSB2YWxpZGF0aW9uIHByb21pc2UgaXMgZXhlY3V0aW5nXG4gICAgICAgIGlmICh0aGlzLl9sYXRlc3RWYWxpZGF0ZVZhbHVlID09PSB2YWx1ZSAmJiBfc2hvdWxkVmFsaWRhdGVBbGxDaGFuZ2VzKHRoaXMucHJvcHMpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGF0ZXN0VmFsaWRhdGVWYWx1ZSA9IHZhbHVlO1xuICAgICAgICB2YXIgb25HZXRFcnJvck1lc3NhZ2UgPSB0aGlzLnByb3BzLm9uR2V0RXJyb3JNZXNzYWdlO1xuICAgICAgICB2YXIgcmVzdWx0ID0gb25HZXRFcnJvck1lc3NhZ2UgJiYgb25HZXRFcnJvck1lc3NhZ2UodmFsdWUgfHwgJycpO1xuICAgICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJyB8fCAhKCd0aGVuJyBpbiByZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVycm9yTWVzc2FnZTogcmVzdWx0IH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX25vdGlmeUFmdGVyVmFsaWRhdGUodmFsdWUsIHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFZhbGlkYXRpb25fMSA9ICsrdGhpcy5fbGFzdFZhbGlkYXRpb247XG4gICAgICAgICAgICAgICAgcmVzdWx0LnRoZW4oZnVuY3Rpb24gKGVycm9yTWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFZhbGlkYXRpb25fMSA9PT0gX3RoaXMuX2xhc3RWYWxpZGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGVycm9yTWVzc2FnZTogZXJyb3JNZXNzYWdlIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9ub3RpZnlBZnRlclZhbGlkYXRlKHZhbHVlLCBlcnJvck1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbm90aWZ5QWZ0ZXJWYWxpZGF0ZSh2YWx1ZSwgJycpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXh0RmllbGRCYXNlLnByb3RvdHlwZS5fbm90aWZ5QWZ0ZXJWYWxpZGF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgZXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdGhpcy52YWx1ZSAmJiB0aGlzLnByb3BzLm9uTm90aWZ5VmFsaWRhdGlvblJlc3VsdCkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbk5vdGlmeVZhbGlkYXRpb25SZXN1bHQoZXJyb3JNZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRleHRGaWVsZEJhc2UucHJvdG90eXBlLl9hZGp1c3RJbnB1dEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RleHRFbGVtZW50LmN1cnJlbnQgJiYgdGhpcy5wcm9wcy5hdXRvQWRqdXN0SGVpZ2h0ICYmIHRoaXMucHJvcHMubXVsdGlsaW5lKSB7XG4gICAgICAgICAgICB2YXIgdGV4dEZpZWxkID0gdGhpcy5fdGV4dEVsZW1lbnQuY3VycmVudDtcbiAgICAgICAgICAgIHRleHRGaWVsZC5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICAgICAgICAgIHRleHRGaWVsZC5zdHlsZS5oZWlnaHQgPSB0ZXh0RmllbGQuc2Nyb2xsSGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGV4dEZpZWxkQmFzZS5kZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIHJlc2l6YWJsZTogdHJ1ZSxcbiAgICAgICAgZGVmZXJyZWRWYWxpZGF0aW9uVGltZTogMjAwLFxuICAgICAgICB2YWxpZGF0ZU9uTG9hZDogdHJ1ZSxcbiAgICAgICAgY2FuUmV2ZWFsUGFzc3dvcmQ6IGZhbHNlLFxuICAgIH07XG4gICAgcmV0dXJuIFRleHRGaWVsZEJhc2U7XG59KFJlYWN0LkNvbXBvbmVudCkpO1xuZXhwb3J0IHsgVGV4dEZpZWxkQmFzZSB9O1xuLyoqIEdldCB0aGUgdmFsdWUgZnJvbSB0aGUgZ2l2ZW4gc3RhdGUgYW5kIHByb3BzIChjb252ZXJ0aW5nIGZyb20gbnVtYmVyIHRvIHN0cmluZyBpZiBuZWVkZWQpICovXG5mdW5jdGlvbiBfZ2V0VmFsdWUocHJvcHMsIHN0YXRlKSB7XG4gICAgdmFyIF9hID0gcHJvcHMudmFsdWUsIHZhbHVlID0gX2EgPT09IHZvaWQgMCA/IHN0YXRlLnVuY29udHJvbGxlZFZhbHVlIDogX2E7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgLy8gbm90IGFsbG93ZWQgcGVyIHR5cGluZ3MsIGJ1dCBoYXBwZW5zIGFueXdheVxuICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBJZiBgdmFsaWRhdGVPbkZvY3VzSW5gIG9yIGB2YWxpZGF0ZU9uRm9jdXNPdXRgIGlzIHRydWUsIHZhbGlkYXRpb24gc2hvdWxkIHJ1biAqKm9ubHkqKiBvbiB0aGF0IGV2ZW50LlxuICogT3RoZXJ3aXNlLCB2YWxpZGF0aW9uIHNob3VsZCBydW4gb24gZXZlcnkgY2hhbmdlLlxuICovXG5mdW5jdGlvbiBfc2hvdWxkVmFsaWRhdGVBbGxDaGFuZ2VzKHByb3BzKSB7XG4gICAgcmV0dXJuICEocHJvcHMudmFsaWRhdGVPbkZvY3VzSW4gfHwgcHJvcHMudmFsaWRhdGVPbkZvY3VzT3V0KTtcbn1cbi8vIE9ubHkgY2FsY3VsYXRlIHRoaXMgb25jZSBhY3Jvc3MgYWxsIFRleHRGaWVsZHMsIHNpbmNlIHdpbGwgc3RheSB0aGUgc2FtZVxudmFyIF9fYnJvd3Nlck5lZWRzUmV2ZWFsQnV0dG9uO1xuZnVuY3Rpb24gX2Jyb3dzZXJOZWVkc1JldmVhbEJ1dHRvbigpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKHR5cGVvZiBfX2Jyb3dzZXJOZWVkc1JldmVhbEJ1dHRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHZhciB3aW4gPSBnZXRXaW5kb3coKTtcbiAgICAgICAgaWYgKChfYSA9IHdpbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm5hdmlnYXRvcikge1xuICAgICAgICAgICAgLy8gRWRnZSwgQ2hyb21pdW0gRWRnZVxuICAgICAgICAgICAgdmFyIGlzRWRnZSA9IC9FZGcvLnRlc3Qod2luLm5hdmlnYXRvci51c2VyQWdlbnQgfHwgJycpO1xuICAgICAgICAgICAgX19icm93c2VyTmVlZHNSZXZlYWxCdXR0b24gPSAhKGlzSUUxMSgpIHx8IGlzRWRnZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfX2Jyb3dzZXJOZWVkc1JldmVhbEJ1dHRvbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF9fYnJvd3Nlck5lZWRzUmV2ZWFsQnV0dG9uO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGV4dEZpZWxkLmJhc2UuanMubWFwIiwiLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBjb21wb25lbnQgaXMgY29udHJvbGxlZC5cbiAqIEBwYXJhbSBwcm9wcyAtIENvbXBvbmVudCBwcm9wc1xuICogQHBhcmFtIHZhbHVlUHJvcCAtIFByb3AgY29udGFpbmluZyB0aGUgY29udHJvbGxlZCB2YWx1ZVxuICogQHJldHVybnMgdHJ1ZSBpZiBjb250cm9sbGVkLCBmYWxzZSBpZiB1bmNvbnRyb2xsZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQ29udHJvbGxlZChwcm9wcywgdmFsdWVQcm9wKSB7XG4gICAgLy8gUmVhY3QncyBidWlsdC1pbiA8aW5wdXQ+IGNvbnNpZGVycyBhIHByb3AgdG8gYmUgcHJvdmlkZWQgaWYgaXRzIHZhbHVlIGlzIG5vbi1udWxsL3VuZGVmaW5lZC5cbiAgICAvLyBNaXJyb3IgdGhhdCBiZWhhdmlvciBoZXJlIChyYXRoZXIgdGhhbiBjaGVja2luZyBmb3IganVzdCB1bmRlZmluZWQpLlxuICAgIHJldHVybiBwcm9wc1t2YWx1ZVByb3BdICE9PSB1bmRlZmluZWQgJiYgcHJvcHNbdmFsdWVQcm9wXSAhPT0gbnVsbDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRyb2xsZWQuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEFuaW1hdGlvbkNsYXNzTmFtZXMsIGdldEdsb2JhbENsYXNzTmFtZXMsIGdldElucHV0Rm9jdXNTdHlsZSwgSGlnaENvbnRyYXN0U2VsZWN0b3IsIG5vcm1hbGl6ZSwgZ2V0UGxhY2Vob2xkZXJTdHlsZXMsIEljb25Gb250U2l6ZXMsIGdldEVkZ2VDaHJvbWl1bU5vSGlnaENvbnRyYXN0QWRqdXN0U2VsZWN0b3IsIH0gZnJvbSAnLi4vLi4vU3R5bGluZyc7XG52YXIgZ2xvYmFsQ2xhc3NOYW1lcyA9IHtcbiAgICByb290OiAnbXMtVGV4dEZpZWxkJyxcbiAgICBkZXNjcmlwdGlvbjogJ21zLVRleHRGaWVsZC1kZXNjcmlwdGlvbicsXG4gICAgZXJyb3JNZXNzYWdlOiAnbXMtVGV4dEZpZWxkLWVycm9yTWVzc2FnZScsXG4gICAgZmllbGQ6ICdtcy1UZXh0RmllbGQtZmllbGQnLFxuICAgIGZpZWxkR3JvdXA6ICdtcy1UZXh0RmllbGQtZmllbGRHcm91cCcsXG4gICAgcHJlZml4OiAnbXMtVGV4dEZpZWxkLXByZWZpeCcsXG4gICAgc3VmZml4OiAnbXMtVGV4dEZpZWxkLXN1ZmZpeCcsXG4gICAgd3JhcHBlcjogJ21zLVRleHRGaWVsZC13cmFwcGVyJyxcbiAgICByZXZlYWxCdXR0b246ICdtcy1UZXh0RmllbGQtcmV2ZWFsJyxcbiAgICBtdWx0aWxpbmU6ICdtcy1UZXh0RmllbGQtLW11bHRpbGluZScsXG4gICAgYm9yZGVybGVzczogJ21zLVRleHRGaWVsZC0tYm9yZGVybGVzcycsXG4gICAgdW5kZXJsaW5lZDogJ21zLVRleHRGaWVsZC0tdW5kZXJsaW5lZCcsXG4gICAgdW5yZXNpemFibGU6ICdtcy1UZXh0RmllbGQtLXVucmVzaXphYmxlJyxcbiAgICByZXF1aXJlZDogJ2lzLXJlcXVpcmVkJyxcbiAgICBkaXNhYmxlZDogJ2lzLWRpc2FibGVkJyxcbiAgICBhY3RpdmU6ICdpcy1hY3RpdmUnLFxufTtcbmZ1bmN0aW9uIGdldExhYmVsU3R5bGVzKHByb3BzKSB7XG4gICAgdmFyIHVuZGVybGluZWQgPSBwcm9wcy51bmRlcmxpbmVkLCBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLCBmb2N1c2VkID0gcHJvcHMuZm9jdXNlZCwgdGhlbWUgPSBwcm9wcy50aGVtZTtcbiAgICB2YXIgcGFsZXR0ZSA9IHRoZW1lLnBhbGV0dGUsIGZvbnRzID0gdGhlbWUuZm9udHM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKHtcbiAgICAgICAgICAgIHJvb3Q6IFtcbiAgICAgICAgICAgICAgICB1bmRlcmxpbmVkICYmXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkICYmIHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IHBhbGV0dGUubmV1dHJhbFRlcnRpYXJ5LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdW5kZXJsaW5lZCAmJiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBmb250cy5tZWRpdW0uZm9udFNpemUsXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpblJpZ2h0OiA4LFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nTGVmdDogMTIsXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdSaWdodDogMCxcbiAgICAgICAgICAgICAgICAgICAgbGluZUhlaWdodDogJzIycHgnLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDMyLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdW5kZXJsaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICBmb2N1c2VkICYmIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2EgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDMxLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHlsZXMocHJvcHMpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaiwgX2ssIF9sLCBfbTtcbiAgICB2YXIgdGhlbWUgPSBwcm9wcy50aGVtZSwgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLCBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLCBmb2N1c2VkID0gcHJvcHMuZm9jdXNlZCwgcmVxdWlyZWQgPSBwcm9wcy5yZXF1aXJlZCwgbXVsdGlsaW5lID0gcHJvcHMubXVsdGlsaW5lLCBoYXNMYWJlbCA9IHByb3BzLmhhc0xhYmVsLCBib3JkZXJsZXNzID0gcHJvcHMuYm9yZGVybGVzcywgdW5kZXJsaW5lZCA9IHByb3BzLnVuZGVybGluZWQsIGhhc0ljb24gPSBwcm9wcy5oYXNJY29uLCByZXNpemFibGUgPSBwcm9wcy5yZXNpemFibGUsIGhhc0Vycm9yTWVzc2FnZSA9IHByb3BzLmhhc0Vycm9yTWVzc2FnZSwgaW5wdXRDbGFzc05hbWUgPSBwcm9wcy5pbnB1dENsYXNzTmFtZSwgYXV0b0FkanVzdEhlaWdodCA9IHByb3BzLmF1dG9BZGp1c3RIZWlnaHQsIGhhc1JldmVhbEJ1dHRvbiA9IHByb3BzLmhhc1JldmVhbEJ1dHRvbjtcbiAgICB2YXIgc2VtYW50aWNDb2xvcnMgPSB0aGVtZS5zZW1hbnRpY0NvbG9ycywgZWZmZWN0cyA9IHRoZW1lLmVmZmVjdHMsIGZvbnRzID0gdGhlbWUuZm9udHM7XG4gICAgdmFyIGNsYXNzTmFtZXMgPSBnZXRHbG9iYWxDbGFzc05hbWVzKGdsb2JhbENsYXNzTmFtZXMsIHRoZW1lKTtcbiAgICB2YXIgZmllbGRQcmVmaXhTdWZmaXggPSB7XG4gICAgICAgIC8vIFN1ZmZpeC9QcmVmaXggYXJlIG5vdCBlZGl0YWJsZSBzbyB0aGUgZGlzYWJsZWQgc2xvdCBwZXJmZWN0bHkgZml0cy5cbiAgICAgICAgYmFja2dyb3VuZDogc2VtYW50aWNDb2xvcnMuZGlzYWJsZWRCYWNrZ3JvdW5kLFxuICAgICAgICBjb2xvcjogIWRpc2FibGVkID8gc2VtYW50aWNDb2xvcnMuaW5wdXRQbGFjZWhvbGRlclRleHQgOiBzZW1hbnRpY0NvbG9ycy5kaXNhYmxlZFRleHQsXG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgIHBhZGRpbmc6ICcwIDEwcHgnLFxuICAgICAgICBsaW5lSGVpZ2h0OiAxLFxuICAgICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgICAgZmxleFNocmluazogMCxcbiAgICAgICAgc2VsZWN0b3JzOiAoX2EgPSB7fSxcbiAgICAgICAgICAgIF9hW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAnV2luZG93JyxcbiAgICAgICAgICAgICAgICBjb2xvcjogZGlzYWJsZWQgPyAnR3JheVRleHQnIDogJ1dpbmRvd1RleHQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9hKSxcbiAgICB9O1xuICAgIC8vIHBsYWNlaG9sZGVyIHN0eWxlIGNvbnN0YW50c1xuICAgIHZhciBwbGFjZWhvbGRlclN0eWxlcyA9IFtcbiAgICAgICAgZm9udHMubWVkaXVtLFxuICAgICAgICB7XG4gICAgICAgICAgICBjb2xvcjogc2VtYW50aWNDb2xvcnMuaW5wdXRQbGFjZWhvbGRlclRleHQsXG4gICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2IgPSB7fSxcbiAgICAgICAgICAgICAgICBfYltIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnR3JheVRleHQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2IpLFxuICAgICAgICB9LFxuICAgIF07XG4gICAgdmFyIGRpc2FibGVkUGxhY2Vob2xkZXJTdHlsZXMgPSB7XG4gICAgICAgIGNvbG9yOiBzZW1hbnRpY0NvbG9ycy5kaXNhYmxlZFRleHQsXG4gICAgICAgIHNlbGVjdG9yczogKF9jID0ge30sXG4gICAgICAgICAgICBfY1tIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgY29sb3I6ICdHcmF5VGV4dCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2MpLFxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcm9vdDogW1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5yb290LFxuICAgICAgICAgICAgZm9udHMubWVkaXVtLFxuICAgICAgICAgICAgcmVxdWlyZWQgJiYgY2xhc3NOYW1lcy5yZXF1aXJlZCxcbiAgICAgICAgICAgIGRpc2FibGVkICYmIGNsYXNzTmFtZXMuZGlzYWJsZWQsXG4gICAgICAgICAgICBmb2N1c2VkICYmIGNsYXNzTmFtZXMuYWN0aXZlLFxuICAgICAgICAgICAgbXVsdGlsaW5lICYmIGNsYXNzTmFtZXMubXVsdGlsaW5lLFxuICAgICAgICAgICAgYm9yZGVybGVzcyAmJiBjbGFzc05hbWVzLmJvcmRlcmxlc3MsXG4gICAgICAgICAgICB1bmRlcmxpbmVkICYmIGNsYXNzTmFtZXMudW5kZXJsaW5lZCxcbiAgICAgICAgICAgIG5vcm1hbGl6ZSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIF0sXG4gICAgICAgIHdyYXBwZXI6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMud3JhcHBlcixcbiAgICAgICAgICAgIHVuZGVybGluZWQgJiYgW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXJCb3R0b206IFwiMXB4IHNvbGlkIFwiICsgKCFoYXNFcnJvck1lc3NhZ2UgPyBzZW1hbnRpY0NvbG9ycy5pbnB1dEJvcmRlciA6IHNlbWFudGljQ29sb3JzLmVycm9yVGV4dCksXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkaXNhYmxlZCAmJiB7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiBzZW1hbnRpY0NvbG9ycy5kaXNhYmxlZEJhY2tncm91bmQsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogX19hc3NpZ24oKF9kID0ge30sIF9kW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnR3JheVRleHQnLFxuICAgICAgICAgICAgICAgICAgICB9LCBfZCksIGdldEVkZ2VDaHJvbWl1bU5vSGlnaENvbnRyYXN0QWRqdXN0U2VsZWN0b3IoKSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAhZGlzYWJsZWQgJiYge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICc6aG92ZXInOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQm90dG9tQ29sb3I6ICFoYXNFcnJvck1lc3NhZ2UgPyBzZW1hbnRpY0NvbG9ycy5pbnB1dEJvcmRlckhvdmVyZWQgOiBzZW1hbnRpY0NvbG9ycy5lcnJvclRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzOiBfX2Fzc2lnbigoX2UgPSB7fSwgX2VbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJCb3R0b21Db2xvcjogJ0hpZ2hsaWdodCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgX2UpLCBnZXRFZGdlQ2hyb21pdW1Ob0hpZ2hDb250cmFzdEFkanVzdFNlbGVjdG9yKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZvY3VzZWQgJiYgW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0SW5wdXRGb2N1c1N0eWxlKCFoYXNFcnJvck1lc3NhZ2UgPyBzZW1hbnRpY0NvbG9ycy5pbnB1dEZvY3VzQm9yZGVyQWx0IDogc2VtYW50aWNDb2xvcnMuZXJyb3JUZXh0LCAwLCAnYm9yZGVyQm90dG9tJyksXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIF0sXG4gICAgICAgIGZpZWxkR3JvdXA6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMuZmllbGRHcm91cCxcbiAgICAgICAgICAgIG5vcm1hbGl6ZSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiICsgc2VtYW50aWNDb2xvcnMuaW5wdXRCb3JkZXIsXG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBlZmZlY3RzLnJvdW5kZWRDb3JuZXIyLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHNlbWFudGljQ29sb3JzLmlucHV0QmFja2dyb3VuZCxcbiAgICAgICAgICAgICAgICBjdXJzb3I6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDMyLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnc3RyZXRjaCcsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbXVsdGlsaW5lICYmIHtcbiAgICAgICAgICAgICAgICBtaW5IZWlnaHQ6ICc2MHB4JyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgIWZvY3VzZWQgJiZcbiAgICAgICAgICAgICAgICAhZGlzYWJsZWQgJiYge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAnOmhvdmVyJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IHNlbWFudGljQ29sb3JzLmlucHV0Qm9yZGVySG92ZXJlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogX19hc3NpZ24oKF9mID0ge30sIF9mW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJ0hpZ2hsaWdodCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBfZiksIGdldEVkZ2VDaHJvbWl1bU5vSGlnaENvbnRyYXN0QWRqdXN0U2VsZWN0b3IoKSksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmb2N1c2VkICYmXG4gICAgICAgICAgICAgICAgIXVuZGVybGluZWQgJiZcbiAgICAgICAgICAgICAgICBnZXRJbnB1dEZvY3VzU3R5bGUoIWhhc0Vycm9yTWVzc2FnZSA/IHNlbWFudGljQ29sb3JzLmlucHV0Rm9jdXNCb3JkZXJBbHQgOiBzZW1hbnRpY0NvbG9ycy5lcnJvclRleHQsIGVmZmVjdHMucm91bmRlZENvcm5lcjIpLFxuICAgICAgICAgICAgZGlzYWJsZWQgJiYge1xuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBzZW1hbnRpY0NvbG9ycy5kaXNhYmxlZEJhY2tncm91bmQsXG4gICAgICAgICAgICAgICAgc2VsZWN0b3JzOiBfX2Fzc2lnbigoX2cgPSB7fSwgX2dbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJ0dyYXlUZXh0JyxcbiAgICAgICAgICAgICAgICB9LCBfZyksIGdldEVkZ2VDaHJvbWl1bU5vSGlnaENvbnRyYXN0QWRqdXN0U2VsZWN0b3IoKSksXG4gICAgICAgICAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYm9yZGVybGVzcyAmJiB7XG4gICAgICAgICAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYm9yZGVybGVzcyAmJlxuICAgICAgICAgICAgICAgIGZvY3VzZWQgJiYge1xuICAgICAgICAgICAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAnOmFmdGVyJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1bmRlcmxpbmVkICYmIHtcbiAgICAgICAgICAgICAgICBmbGV4OiAnMSAxIDBweCcsXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdW5kZXJsaW5lZCAmJlxuICAgICAgICAgICAgICAgIGRpc2FibGVkICYmIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGFzRXJyb3JNZXNzYWdlICYmXG4gICAgICAgICAgICAgICAgIXVuZGVybGluZWQgJiYge1xuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBzZW1hbnRpY0NvbG9ycy5lcnJvclRleHQsXG4gICAgICAgICAgICAgICAgc2VsZWN0b3JzOiB7XG4gICAgICAgICAgICAgICAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IHNlbWFudGljQ29sb3JzLmVycm9yVGV4dCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICFoYXNMYWJlbCAmJlxuICAgICAgICAgICAgICAgIHJlcXVpcmVkICYmIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfaCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICc6YmVmb3JlJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiJyonXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHNlbWFudGljQ29sb3JzLmVycm9yVGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IC01LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAtMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF9oW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc6YmVmb3JlJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ1dpbmRvd1RleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByaWdodDogLTE0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBfaCksXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBmaWVsZDogW1xuICAgICAgICAgICAgZm9udHMubWVkaXVtLFxuICAgICAgICAgICAgY2xhc3NOYW1lcy5maWVsZCxcbiAgICAgICAgICAgIG5vcm1hbGl6ZSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJ25vbmUnLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgICAgICAgICBjb2xvcjogc2VtYW50aWNDb2xvcnMuaW5wdXRUZXh0LFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6ICcwIDhweCcsXG4gICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBtaW5XaWR0aDogMCxcbiAgICAgICAgICAgICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICAgICAgICAgICAgb3V0bGluZTogMCxcbiAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfaiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICcmOmFjdGl2ZSwgJjpmb2N1cywgJjpob3Zlcic6IHsgb3V0bGluZTogMCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgJzo6LW1zLWNsZWFyJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgX2pbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJ1dpbmRvdycsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogZGlzYWJsZWQgPyAnR3JheVRleHQnIDogJ1dpbmRvd1RleHQnLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBfaiksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0UGxhY2Vob2xkZXJTdHlsZXMocGxhY2Vob2xkZXJTdHlsZXMpLFxuICAgICAgICAgICAgbXVsdGlsaW5lICYmXG4gICAgICAgICAgICAgICAgIXJlc2l6YWJsZSAmJiBbXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lcy51bnJlc2l6YWJsZSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgbXVsdGlsaW5lICYmIHtcbiAgICAgICAgICAgICAgICBtaW5IZWlnaHQ6ICdpbmhlcml0JyxcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxNyxcbiAgICAgICAgICAgICAgICBmbGV4R3JvdzogMSxcbiAgICAgICAgICAgICAgICBwYWRkaW5nVG9wOiA2LFxuICAgICAgICAgICAgICAgIHBhZGRpbmdCb3R0b206IDYsXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG11bHRpbGluZSAmJlxuICAgICAgICAgICAgICAgIGF1dG9BZGp1c3RIZWlnaHQgJiYge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXNJY29uICYmXG4gICAgICAgICAgICAgICAgIWhhc1JldmVhbEJ1dHRvbiAmJiB7XG4gICAgICAgICAgICAgICAgcGFkZGluZ1JpZ2h0OiAyNCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtdWx0aWxpbmUgJiZcbiAgICAgICAgICAgICAgICBoYXNJY29uICYmIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQ6IDQwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRpc2FibGVkICYmIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogc2VtYW50aWNDb2xvcnMuZGlzYWJsZWRCYWNrZ3JvdW5kLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogc2VtYW50aWNDb2xvcnMuZGlzYWJsZWRUZXh0LFxuICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogc2VtYW50aWNDb2xvcnMuZGlzYWJsZWRCYWNrZ3JvdW5kLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0UGxhY2Vob2xkZXJTdHlsZXMoZGlzYWJsZWRQbGFjZWhvbGRlclN0eWxlcyksXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgdW5kZXJsaW5lZCAmJiB7XG4gICAgICAgICAgICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZm9jdXNlZCAmJlxuICAgICAgICAgICAgICAgICFib3JkZXJsZXNzICYmIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfayA9IHt9LFxuICAgICAgICAgICAgICAgICAgICBfa1tIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nTGVmdDogMTEsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQ6IDExLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBfayksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZm9jdXNlZCAmJlxuICAgICAgICAgICAgICAgIG11bHRpbGluZSAmJlxuICAgICAgICAgICAgICAgICFib3JkZXJsZXNzICYmIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfbCA9IHt9LFxuICAgICAgICAgICAgICAgICAgICBfbFtIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nVG9wOiA0LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBfbCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5wdXRDbGFzc05hbWUsXG4gICAgICAgIF0sXG4gICAgICAgIGljb246IFtcbiAgICAgICAgICAgIG11bHRpbGluZSAmJiB7XG4gICAgICAgICAgICAgICAgcGFkZGluZ1JpZ2h0OiAyNCxcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnZmxleC1lbmQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgICAgYm90dG9tOiA2LFxuICAgICAgICAgICAgICAgIHJpZ2h0OiA4LFxuICAgICAgICAgICAgICAgIHRvcDogJ2F1dG8nLFxuICAgICAgICAgICAgICAgIGZvbnRTaXplOiBJY29uRm9udFNpemVzLm1lZGl1bSxcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxOCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkaXNhYmxlZCAmJiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IHNlbWFudGljQ29sb3JzLmRpc2FibGVkVGV4dCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGRlc2NyaXB0aW9uOiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBzZW1hbnRpY0NvbG9ycy5ib2R5U3VidGV4dCxcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogZm9udHMueFNtYWxsLmZvbnRTaXplLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgZXJyb3JNZXNzYWdlOiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLmVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgIEFuaW1hdGlvbkNsYXNzTmFtZXMuc2xpZGVEb3duSW4yMCxcbiAgICAgICAgICAgIGZvbnRzLnNtYWxsLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBzZW1hbnRpY0NvbG9ycy5lcnJvclRleHQsXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgICAgICAgIHBhZGRpbmdUb3A6IDUsXG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgcHJlZml4OiBbY2xhc3NOYW1lcy5wcmVmaXgsIGZpZWxkUHJlZml4U3VmZml4XSxcbiAgICAgICAgc3VmZml4OiBbY2xhc3NOYW1lcy5zdWZmaXgsIGZpZWxkUHJlZml4U3VmZml4XSxcbiAgICAgICAgcmV2ZWFsQnV0dG9uOiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLnJldmVhbEJ1dHRvbixcbiAgICAgICAgICAgICdtcy1CdXR0b24nLFxuICAgICAgICAgICAgJ21zLUJ1dHRvbi0taWNvbicsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAzMCxcbiAgICAgICAgICAgICAgICB3aWR0aDogMzIsXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgcGFkZGluZzogJzBweCA0cHgnLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgICAgICAgICBjb2xvcjogc2VtYW50aWNDb2xvcnMubGluayxcbiAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgJzpob3Zlcic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmU6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogc2VtYW50aWNDb2xvcnMucHJpbWFyeUJ1dHRvbkJhY2tncm91bmRIb3ZlcmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBzZW1hbnRpY0NvbG9ycy5idXR0b25CYWNrZ3JvdW5kSG92ZXJlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9tID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX21bSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJ0hpZ2hsaWdodCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnSGlnaGxpZ2h0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9tKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJzpmb2N1cyc6IHsgb3V0bGluZTogMCB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGFzSWNvbiAmJiB7XG4gICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6IDI4LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgcmV2ZWFsU3Bhbjoge1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmV2ZWFsSWNvbjoge1xuICAgICAgICAgICAgbWFyZ2luOiAnMHB4IDRweCcsXG4gICAgICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICAgICAgICBib3R0b206IDYsXG4gICAgICAgICAgICByaWdodDogOCxcbiAgICAgICAgICAgIHRvcDogJ2F1dG8nLFxuICAgICAgICAgICAgZm9udFNpemU6IEljb25Gb250U2l6ZXMubWVkaXVtLFxuICAgICAgICAgICAgbGluZUhlaWdodDogMTgsXG4gICAgICAgIH0sXG4gICAgICAgIHN1YkNvbXBvbmVudFN0eWxlczoge1xuICAgICAgICAgICAgbGFiZWw6IGdldExhYmVsU3R5bGVzKHByb3BzKSxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGV4dEZpZWxkLnN0eWxlcy5qcy5tYXAiLCJpbXBvcnQgeyBzdHlsZWQgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgVGV4dEZpZWxkQmFzZSB9IGZyb20gJy4vVGV4dEZpZWxkLmJhc2UnO1xuaW1wb3J0IHsgZ2V0U3R5bGVzIH0gZnJvbSAnLi9UZXh0RmllbGQuc3R5bGVzJztcbmV4cG9ydCB2YXIgVGV4dEZpZWxkID0gc3R5bGVkKFRleHRGaWVsZEJhc2UsIGdldFN0eWxlcywgdW5kZWZpbmVkLCB7XG4gICAgc2NvcGU6ICdUZXh0RmllbGQnLFxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UZXh0RmllbGQuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBc3luYyB9IGZyb20gJy4vQXN5bmMnO1xuaW1wb3J0IHsgRXZlbnRHcm91cCB9IGZyb20gJy4vRXZlbnRHcm91cCc7XG5pbXBvcnQgeyB3YXJuQ29uZGl0aW9uYWxseVJlcXVpcmVkUHJvcHMgfSBmcm9tICcuL3dhcm4vd2FybkNvbmRpdGlvbmFsbHlSZXF1aXJlZFByb3BzJztcbmltcG9ydCB7IHdhcm5NdXR1YWxseUV4Y2x1c2l2ZSB9IGZyb20gJy4vd2Fybi93YXJuTXV0dWFsbHlFeGNsdXNpdmUnO1xuaW1wb3J0IHsgd2FybkRlcHJlY2F0aW9ucyB9IGZyb20gJy4vd2Fybi93YXJuRGVwcmVjYXRpb25zJztcbi8qKlxuICogQmFzZUNvbXBvbmVudCBjbGFzcywgd2hpY2ggcHJvdmlkZXMgYmFzaWMgaGVscGVycyBmb3IgYWxsIGNvbXBvbmVudHMuXG4gKlxuICogQHB1YmxpY1xuICoge0Bkb2NDYXRlZ29yeSBCYXNlQ29tcG9uZW50fVxuICpcbiAqIEBkZXByZWNhdGVkIERvIG5vdCB1c2UuIFdlIGFyZSBtb3ZpbmcgYXdheSBmcm9tIGNsYXNzIGNvbXBvbmVudC5cbiAqL1xudmFyIEJhc2VDb21wb25lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJhc2VDb21wb25lbnQsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogQmFzZUNvbXBvbmVudCBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSBwcm9wcyAtIFRoZSBwcm9wcyBmb3IgdGhlIGNvbXBvbmVudC5cbiAgICAgKiBAcGFyYW0gY29udGV4dCAtIFRoZSBjb250ZXh0IGZvciB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgZnVuY3Rpb24gQmFzZUNvbXBvbmVudChwcm9wcywgY29udGV4dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIF9tYWtlQWxsU2FmZShfdGhpcywgQmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFtcbiAgICAgICAgICAgICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgICAgICAgICAnc2hvdWxkQ29tcG9uZW50VXBkYXRlJyxcbiAgICAgICAgICAgICdnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZScsXG4gICAgICAgICAgICAncmVuZGVyJyxcbiAgICAgICAgICAgICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgICAgICAgICAgJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICAgICAgXSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUgY29tcG9uZW50IHJlY2VpdmVzIHByb3BzLCBtYWtlIHN1cmUgdGhlIGNvbXBvbmVudFJlZiBpcyB1cGRhdGVkLlxuICAgICAqL1xuICAgIEJhc2VDb21wb25lbnQucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgICB0aGlzLl91cGRhdGVDb21wb25lbnRSZWYocHJldlByb3BzLCB0aGlzLnByb3BzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIGNvbXBvbmVudCBoYXMgbW91bnRlZCwgdXBkYXRlIHRoZSBjb21wb25lbnRSZWYuXG4gICAgICovXG4gICAgQmFzZUNvbXBvbmVudC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3NldENvbXBvbmVudFJlZih0aGlzLnByb3BzLmNvbXBvbmVudFJlZiwgdGhpcyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBJZiB3ZSBoYXZlIGRpc3Bvc2FibGVzLCBkaXNwb3NlIHRoZW0gYXV0b21hdGljYWxseSBvbiB1bm1vdW50LlxuICAgICAqL1xuICAgIEJhc2VDb21wb25lbnQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zZXRDb21wb25lbnRSZWYodGhpcy5wcm9wcy5jb21wb25lbnRSZWYsIG51bGwpO1xuICAgICAgICBpZiAodGhpcy5fX2Rpc3Bvc2FibGVzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fZGlzcG9zYWJsZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZGlzcG9zYWJsZSA9IHRoaXMuX19kaXNwb3NhYmxlc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoZGlzcG9zYWJsZS5kaXNwb3NlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX19kaXNwb3NhYmxlcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCYXNlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJjbGFzc05hbWVcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgb2JqZWN0J3MgY2xhc3MgbmFtZS5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9fY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZ1bmNOYW1lUmVnZXggPSAvZnVuY3Rpb24gKC57MSx9KVxcKC87XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSBmdW5jTmFtZVJlZ2V4LmV4ZWModGhpcy5jb25zdHJ1Y3Rvci50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9fY2xhc3NOYW1lID0gcmVzdWx0cyAmJiByZXN1bHRzLmxlbmd0aCA+IDEgPyByZXN1bHRzWzFdIDogJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX2NsYXNzTmFtZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJhc2VDb21wb25lbnQucHJvdG90eXBlLCBcIl9kaXNwb3NhYmxlc1wiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbGxvd3Mgc3ViY2xhc3NlcyB0byBwdXNoIHRoaW5ncyB0byB0aGlzLl9kaXNwb3NhYmxlcyB0byBiZSBhdXRvIGRpc3Bvc2VkLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX19kaXNwb3NhYmxlcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX19kaXNwb3NhYmxlcyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19kaXNwb3NhYmxlcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJhc2VDb21wb25lbnQucHJvdG90eXBlLCBcIl9hc3luY1wiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBhc3luYyBpbnN0YW5jZSBhc3NvY2lhdGVkIHdpdGggdGhlIGNvbXBvbmVudCwgY3JlYXRlZCBvbiBkZW1hbmQuIFRoZSBhc3luYyBpbnN0YW5jZSBnaXZlc1xuICAgICAgICAgKiBzdWJjbGFzc2VzIGEgd2F5IHRvIGV4ZWN1dGUgc2V0VGltZW91dC9zZXRJbnRlcnZhbCBhc3luYyBjYWxscyBzYWZlbHksIHdoZXJlIHRoZSBjYWxsYmFja3NcbiAgICAgICAgICogd2lsbCBiZSBjbGVhcmVkL2lnbm9yZWQgYXV0b21hdGljYWxseSBhZnRlciB1bm1vdW50aW5nLiBUaGUgaGVscGVycyB3aXRoaW4gdGhlIGFzeW5jIG9iamVjdCBhbHNvXG4gICAgICAgICAqIHByZXNlcnZlIHRoZSB0aGlzIHBvaW50ZXIgc28gdGhhdCB5b3UgZG9uJ3QgbmVlZCB0byBcImJpbmRcIiB0aGUgY2FsbGJhY2tzLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX19hc3luYykge1xuICAgICAgICAgICAgICAgIHRoaXMuX19hc3luYyA9IG5ldyBBc3luYyh0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9kaXNwb3NhYmxlcy5wdXNoKHRoaXMuX19hc3luYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX2FzeW5jO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiX2V2ZW50c1wiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBldmVudCBncm91cCBpbnN0YW5jZSBhc3NvY2FpdGVkIHdpdGggdGhlIGNvbXBvbmVudCwgY3JlYXRlZCBvbiBkZW1hbmQuIFRoZSBldmVudCBpbnN0YW5jZVxuICAgICAgICAgKiBwcm92aWRlcyBvbi9vZmYgbWV0aG9kcyBmb3IgbGlzdGVuaW5nIHRvIERPTSAob3IgcmVndWxhciBqYXZhc2NyaXB0IG9iamVjdCkgZXZlbnRzLiBUaGUgZXZlbnQgY2FsbGJhY2tzXG4gICAgICAgICAqIHdpbGwgYmUgYXV0b21hdGljYWxseSBkaXNjb25uZWN0ZWQgYWZ0ZXIgdW5tb3VudGluZy4gVGhlIGhlbHBlcnMgd2l0aGluIHRoZSBldmVudHMgb2JqZWN0IGFsc29cbiAgICAgICAgICogcHJlc2VydmUgdGhlIHRoaXMgcmVmZXJlbmNlIHNvIHRoYXQgeW91IGRvbid0IG5lZWQgdG8gXCJiaW5kXCIgdGhlIGNhbGxiYWNrcy5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9fZXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX2V2ZW50cyA9IG5ldyBFdmVudEdyb3VwKHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Rpc3Bvc2FibGVzLnB1c2godGhpcy5fX2V2ZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX2V2ZW50cztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogSGVscGVyIHRvIHJldHVybiBhIG1lbW9pemVkIHJlZiByZXNvbHZlciBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0gcmVmTmFtZSAtIE5hbWUgb2YgdGhlIG1lbWJlciB0byBhc3NpZ24gdGhlIHJlZiB0by5cbiAgICAgKiBAcmV0dXJucyBBIGZ1bmN0aW9uIGluc3RhbmNlIGtleWVkIGZyb20gdGhlIGdpdmVuIHJlZm5hbWUuXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIGBjcmVhdGVSZWZgIGZyb20gUmVhY3QuY3JlYXRlUmVmLlxuICAgICAqL1xuICAgIEJhc2VDb21wb25lbnQucHJvdG90eXBlLl9yZXNvbHZlUmVmID0gZnVuY3Rpb24gKHJlZk5hbWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLl9fcmVzb2x2ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX19yZXNvbHZlcyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fX3Jlc29sdmVzW3JlZk5hbWVdKSB7XG4gICAgICAgICAgICB0aGlzLl9fcmVzb2x2ZXNbcmVmTmFtZV0gPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgICAgICByZXR1cm4gKF90aGlzW3JlZk5hbWVdID0gcmVmKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX19yZXNvbHZlc1tyZWZOYW1lXTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGNvbXBvbmVudFJlZiAoYnkgY2FsbGluZyBpdCB3aXRoIFwidGhpc1wiIHdoZW4gbmVjZXNzYXJ5LilcbiAgICAgKi9cbiAgICBCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5fdXBkYXRlQ29tcG9uZW50UmVmID0gZnVuY3Rpb24gKGN1cnJlbnRQcm9wcywgbmV3UHJvcHMpIHtcbiAgICAgICAgaWYgKG5ld1Byb3BzID09PSB2b2lkIDApIHsgbmV3UHJvcHMgPSB7fTsgfVxuICAgICAgICAvLyBjdXJyZW50UHJvcHMgKnNob3VsZCogYWx3YXlzIGJlIGRlZmluZWQsIGJ1dCB2ZXJpZnkgdGhhdCBqdXN0IGluIGNhc2UgYSBzdWJjbGFzcyBpcyBtYW51YWxseVxuICAgICAgICAvLyBjYWxsaW5nIGEgbGlmZWN5Y2xlIG1ldGhvZCB3aXRoIG5vIHBhcmFtZXRlcnMgKHdoaWNoIGhhcyBoYXBwZW5lZCkgb3Igb3RoZXIgb2RkIHVzYWdlLlxuICAgICAgICBpZiAoY3VycmVudFByb3BzICYmIG5ld1Byb3BzICYmIGN1cnJlbnRQcm9wcy5jb21wb25lbnRSZWYgIT09IG5ld1Byb3BzLmNvbXBvbmVudFJlZikge1xuICAgICAgICAgICAgdGhpcy5fc2V0Q29tcG9uZW50UmVmKGN1cnJlbnRQcm9wcy5jb21wb25lbnRSZWYsIG51bGwpO1xuICAgICAgICAgICAgdGhpcy5fc2V0Q29tcG9uZW50UmVmKG5ld1Byb3BzLmNvbXBvbmVudFJlZiwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFdhcm5zIHdoZW4gYSBkZXByZWNhdGVkIHByb3BzIGFyZSBiZWluZyB1c2VkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRlcHJlY2F0aW9uTWFwIC0gVGhlIG1hcCBvZiBkZXByZWNhdGlvbnMsIHdoZXJlIGtleSBpcyB0aGUgcHJvcCBuYW1lIGFuZCB0aGUgdmFsdWUgaXNcbiAgICAgKiBlaXRoZXIgbnVsbCBvciBhIHJlcGxhY2VtZW50IHByb3AgbmFtZS5cbiAgICAgKi9cbiAgICBCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5fd2FybkRlcHJlY2F0aW9ucyA9IGZ1bmN0aW9uIChkZXByZWNhdGlvbk1hcCkge1xuICAgICAgICB3YXJuRGVwcmVjYXRpb25zKHRoaXMuY2xhc3NOYW1lLCB0aGlzLnByb3BzLCBkZXByZWNhdGlvbk1hcCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBXYXJucyB3aGVuIHByb3BzIHdoaWNoIGFyZSBtdXR1YWxseSBleGNsdXNpdmUgd2l0aCBlYWNoIG90aGVyIGFyZSBib3RoIHVzZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbXV0dWFsbHlFeGNsdXNpdmVNYXAgLSBUaGUgbWFwIG9mIG11dHVhbGx5IGV4Y2x1c2l2ZSBwcm9wcy5cbiAgICAgKi9cbiAgICBCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5fd2Fybk11dHVhbGx5RXhjbHVzaXZlID0gZnVuY3Rpb24gKG11dHVhbGx5RXhjbHVzaXZlTWFwKSB7XG4gICAgICAgIHdhcm5NdXR1YWxseUV4Y2x1c2l2ZSh0aGlzLmNsYXNzTmFtZSwgdGhpcy5wcm9wcywgbXV0dWFsbHlFeGNsdXNpdmVNYXApO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogV2FybnMgd2hlbiBwcm9wcyBhcmUgcmVxdWlyZWQgaWYgYSBjb25kaXRpb24gaXMgbWV0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHJlcXVpcmVkUHJvcHMgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcHMgdGhhdCBhcmUgcmVxdWlyZWQgd2hlbiB0aGUgY29uZGl0aW9uIGlzIG1ldC5cbiAgICAgKiBAcGFyYW0gY29uZGl0aW9uYWxQcm9wTmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wIHRoYXQgdGhlIGNvbmRpdGlvbiBpcyBiYXNlZCBvbi5cbiAgICAgKiBAcGFyYW0gY29uZGl0aW9uIC0gV2hldGhlciB0aGUgY29uZGl0aW9uIGlzIG1ldC5cbiAgICAgKi9cbiAgICBCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5fd2FybkNvbmRpdGlvbmFsbHlSZXF1aXJlZFByb3BzID0gZnVuY3Rpb24gKHJlcXVpcmVkUHJvcHMsIGNvbmRpdGlvbmFsUHJvcE5hbWUsIGNvbmRpdGlvbikge1xuICAgICAgICB3YXJuQ29uZGl0aW9uYWxseVJlcXVpcmVkUHJvcHModGhpcy5jbGFzc05hbWUsIHRoaXMucHJvcHMsIHJlcXVpcmVkUHJvcHMsIGNvbmRpdGlvbmFsUHJvcE5hbWUsIGNvbmRpdGlvbik7XG4gICAgfTtcbiAgICBCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5fc2V0Q29tcG9uZW50UmVmID0gZnVuY3Rpb24gKHJlZiwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9za2lwQ29tcG9uZW50UmVmUmVzb2x1dGlvbiAmJiByZWYpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmVmKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVmID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAgICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEJhc2VDb21wb25lbnQ7XG59KFJlYWN0LkNvbXBvbmVudCkpO1xuZXhwb3J0IHsgQmFzZUNvbXBvbmVudCB9O1xuLyoqXG4gKiBIZWxwZXIgdG8gb3ZlcnJpZGUgYSBnaXZlbiBtZXRob2Qgd2l0aCBhIHdyYXBwZXIgbWV0aG9kIHRoYXQgY2FuIHRyeS9jYXRjaCB0aGUgb3JpZ2luYWwsIGJ1dCBhbHNvXG4gKiBlbnN1cmVzIHRoYXQgdGhlIEJhc2VDb21wb25lbnQncyBtZXRob2RzIGFyZSBjYWxsZWQgYmVmb3JlIHRoZSBzdWJjbGFzcydzLiBUaGlzIGVuc3VyZXMgdGhhdFxuICogY29tcG9uZW50V2lsbFVubW91bnQgaW4gdGhlIGJhc2UgaXMgY2FsbGVkIGFuZCB0aGF0IHRoaW5ncyBpbiB0aGUgX2Rpc3Bvc2FibGVzIGFycmF5IGFyZSBkaXNwb3NlZC5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG5mdW5jdGlvbiBfbWFrZUFsbFNhZmUob2JqLCBwcm90b3R5cGUsIG1ldGhvZE5hbWVzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IG1ldGhvZE5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIF9tYWtlU2FmZShvYmosIHByb3RvdHlwZSwgbWV0aG9kTmFtZXNbaV0pO1xuICAgIH1cbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuZnVuY3Rpb24gX21ha2VTYWZlKG9iaiwgcHJvdG90eXBlLCBtZXRob2ROYW1lKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuICAgIHZhciBjbGFzc01ldGhvZCA9IG9ialttZXRob2ROYW1lXTtcbiAgICB2YXIgcHJvdG90eXBlTWV0aG9kID0gcHJvdG90eXBlW21ldGhvZE5hbWVdO1xuICAgIGlmIChjbGFzc01ldGhvZCB8fCBwcm90b3R5cGVNZXRob2QpIHtcbiAgICAgICAgb2JqW21ldGhvZE5hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4gICAgICAgICAgICB2YXIgcmV0VmFsO1xuICAgICAgICAgICAgaWYgKHByb3RvdHlwZU1ldGhvZCkge1xuICAgICAgICAgICAgICAgIHJldFZhbCA9IHByb3RvdHlwZU1ldGhvZC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjbGFzc01ldGhvZCAhPT0gcHJvdG90eXBlTWV0aG9kKSB7XG4gICAgICAgICAgICAgICAgcmV0VmFsID0gY2xhc3NNZXRob2QuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsO1xuICAgICAgICB9O1xuICAgIH1cbn1cbi8qKlxuICogU2ltcGxlIGNvbnN0YW50IGZ1bmN0aW9uIGZvciByZXR1cm5pbmcgbnVsbCwgdXNlZCB0byByZW5kZXIgZW1wdHkgdGVtcGxhdGVzIGluIEpTWC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBudWxsUmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmFzZUNvbXBvbmVudC5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSW1hZ2UgfSBmcm9tICcuLi9JbWFnZS9JbWFnZSc7XG5pbXBvcnQgeyBjc3MsIGdldE5hdGl2ZVByb3BzLCBodG1sRWxlbWVudFByb3BlcnRpZXMgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgY2xhc3NOYW1lcywgTVNfSUNPTiB9IGZyb20gJy4vSWNvbi5zdHlsZXMnO1xuLyoqXG4gKiBGYXN0IGljb24gY29tcG9uZW50IHdoaWNoIG9ubHkgc3VwcG9ydHMgaW1hZ2VzIChub3QgZm9udCBnbHlwaHMpIGFuZCBjYW4ndCBiZSB0YXJnZXRlZCBieSBjdXN0b21pemF0aW9ucy5cbiAqIFRvIHN0eWxlIHRoZSBpY29uLCB1c2UgYGNsYXNzTmFtZWAgb3IgcmVmZXJlbmNlIGBtcy1JY29uYCBpbiBDU1MuXG4gKiB7QGRvY0NhdGVnb3J5IEljb259XG4gKi9cbmV4cG9ydCB2YXIgSW1hZ2VJY29uID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSwgaW1hZ2VQcm9wcyA9IHByb3BzLmltYWdlUHJvcHM7XG4gICAgdmFyIG5hdGl2ZVByb3BzID0gZ2V0TmF0aXZlUHJvcHMocHJvcHMsIGh0bWxFbGVtZW50UHJvcGVydGllcyk7XG4gICAgdmFyIGNvbnRhaW5lclByb3BzID0gcHJvcHNbJ2FyaWEtbGFiZWwnXVxuICAgICAgICA/IHt9XG4gICAgICAgIDoge1xuICAgICAgICAgICAgcm9sZTogJ3ByZXNlbnRhdGlvbicsXG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiBpbWFnZVByb3BzLmFsdCB8fCBpbWFnZVByb3BzWydhcmlhLWxhYmVsbGVkYnknXSA/IGZhbHNlIDogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX19hc3NpZ24oe30sIGNvbnRhaW5lclByb3BzLCBuYXRpdmVQcm9wcywgeyBjbGFzc05hbWU6IGNzcyhNU19JQ09OLCBjbGFzc05hbWVzLnJvb3QsIGNsYXNzTmFtZXMuaW1hZ2UsIGNsYXNzTmFtZSkgfSksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW1hZ2UsIF9fYXNzaWduKHt9LCBpbWFnZVByb3BzKSkpKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JbWFnZUljb24uanMubWFwIiwiZXhwb3J0IHsgRGlyZWN0aW9uYWxIaW50IH0gZnJvbSAnLi4vLi4vY29tbW9uL0RpcmVjdGlvbmFsSGludCc7XG4vKipcbiAqIHtAZG9jQ2F0ZWdvcnkgQ29udGV4dHVhbE1lbnV9XG4gKi9cbmV4cG9ydCB2YXIgQ29udGV4dHVhbE1lbnVJdGVtVHlwZTtcbihmdW5jdGlvbiAoQ29udGV4dHVhbE1lbnVJdGVtVHlwZSkge1xuICAgIENvbnRleHR1YWxNZW51SXRlbVR5cGVbQ29udGV4dHVhbE1lbnVJdGVtVHlwZVtcIk5vcm1hbFwiXSA9IDBdID0gXCJOb3JtYWxcIjtcbiAgICBDb250ZXh0dWFsTWVudUl0ZW1UeXBlW0NvbnRleHR1YWxNZW51SXRlbVR5cGVbXCJEaXZpZGVyXCJdID0gMV0gPSBcIkRpdmlkZXJcIjtcbiAgICBDb250ZXh0dWFsTWVudUl0ZW1UeXBlW0NvbnRleHR1YWxNZW51SXRlbVR5cGVbXCJIZWFkZXJcIl0gPSAyXSA9IFwiSGVhZGVyXCI7XG4gICAgQ29udGV4dHVhbE1lbnVJdGVtVHlwZVtDb250ZXh0dWFsTWVudUl0ZW1UeXBlW1wiU2VjdGlvblwiXSA9IDNdID0gXCJTZWN0aW9uXCI7XG59KShDb250ZXh0dWFsTWVudUl0ZW1UeXBlIHx8IChDb250ZXh0dWFsTWVudUl0ZW1UeXBlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbnRleHR1YWxNZW51LnR5cGVzLmpzLm1hcCIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJy4vZG9tL2dldFdpbmRvdyc7XG52YXIgaXNNYWNSZXN1bHQ7XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgdXNlciBpcyBvbiBhIE1hYy4gQ2FjaGVzIHRoZSByZXN1bHQgdmFsdWUuXG4gKiBAcGFyYW0gcmVzZXQgLSBSZXNldCB0aGUgY2FjaGVkIHJlc3VsdCB2YWx1ZSAobWFpbmx5IGZvciB0ZXN0aW5nKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTWFjKHJlc2V0KSB7XG4gICAgaWYgKHR5cGVvZiBpc01hY1Jlc3VsdCA9PT0gJ3VuZGVmaW5lZCcgfHwgcmVzZXQpIHtcbiAgICAgICAgdmFyIHdpbiA9IGdldFdpbmRvdygpO1xuICAgICAgICB2YXIgdXNlckFnZW50ID0gd2luICYmIHdpbi5uYXZpZ2F0b3IudXNlckFnZW50O1xuICAgICAgICBpc01hY1Jlc3VsdCA9ICEhdXNlckFnZW50ICYmIHVzZXJBZ2VudC5pbmRleE9mKCdNYWNpbnRvc2gnKSAhPT0gLTE7XG4gICAgfVxuICAgIHJldHVybiAhIWlzTWFjUmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3NEZXRlY3Rvci5qcy5tYXAiLCJleHBvcnQgdmFyIERpcmVjdGlvbmFsSGludCA9IHtcbiAgICAvKipcbiAgICAgKiBBcHBlYXIgYWJvdmUgdGhlIHRhcmdldCBlbGVtZW50LCB3aXRoIHRoZSBsZWZ0IGVkZ2VzIG9mIHRoZSBjYWxsb3V0IGFuZCB0YXJnZXQgYWxpZ25pbmcuXG4gICAgICovXG4gICAgdG9wTGVmdEVkZ2U6IDAsXG4gICAgLyoqXG4gICAgICogQXBwZWFyIGFib3ZlIHRoZSB0YXJnZXQgZWxlbWVudCwgd2l0aCB0aGUgY2VudGVycyBvZiB0aGUgY2FsbG91dCBhbmQgdGFyZ2V0IGFsaWduaW5nLlxuICAgICAqL1xuICAgIHRvcENlbnRlcjogMSxcbiAgICAvKipcbiAgICAgKiBBcHBlYXIgYWJvdmUgdGhlIHRhcmdldCBlbGVtZW50LCB3aXRoIHRoZSByaWdodCBlZGdlcyBvZiB0aGUgY2FsbG91dCBhbmQgdGFyZ2V0IGFsaWduaW5nLlxuICAgICAqL1xuICAgIHRvcFJpZ2h0RWRnZTogMixcbiAgICAvKipcbiAgICAgKiBBcHBlYXIgYWJvdmUgdGhlIHRhcmdldCBlbGVtZW50LCBhbGlnbmluZyB3aXRoIHRoZSB0YXJnZXQgZWxlbWVudCBzdWNoIHRoYXQgdGhlIGNhbGxvdXQgdGVuZHMgdG93YXJkXG4gICAgICogdGhlIGNlbnRlciBvZiB0aGUgc2NyZWVuLlxuICAgICAqL1xuICAgIHRvcEF1dG9FZGdlOiAzLFxuICAgIC8qKlxuICAgICAqIEFwcGVhciBiZWxvdyB0aGUgdGFyZ2V0IGVsZW1lbnQsIHdpdGggdGhlIGxlZnQgZWRnZXMgb2YgdGhlIGNhbGxvdXQgYW5kIHRhcmdldCBhbGlnbmluZy5cbiAgICAgKi9cbiAgICBib3R0b21MZWZ0RWRnZTogNCxcbiAgICAvKipcbiAgICAgKiBBcHBlYXIgYmVsb3cgdGhlIHRhcmdldCBlbGVtZW50LCB3aXRoIHRoZSBjZW50ZXJzIG9mIHRoZSBjYWxsb3V0IGFuZCB0YXJnZXQgYWxpZ25pbmcuXG4gICAgICovXG4gICAgYm90dG9tQ2VudGVyOiA1LFxuICAgIC8qKlxuICAgICAqIEFwcGVhciBiZWxvdyB0aGUgdGFyZ2V0IGVsZW1lbnQsIHdpdGggdGhlIHJpZ2h0IGVkZ2VzIG9mIHRoZSBjYWxsb3V0IGFuZCB0YXJnZXQgYWxpZ25pbmcuXG4gICAgICovXG4gICAgYm90dG9tUmlnaHRFZGdlOiA2LFxuICAgIC8qKlxuICAgICAqIEFwcGVhciBiZWxvdyB0aGUgdGFyZ2V0IGVsZW1lbnQsIGFsaWduaW5nIHdpdGggdGhlIHRhcmdldCBlbGVtZW50IHN1Y2ggdGhhdCB0aGUgY2FsbG91dCB0ZW5kcyB0b3dhcmRcbiAgICAgKiB0aGUgY2VudGVyIG9mIHRoZSBzY3JlZW4uXG4gICAgICovXG4gICAgYm90dG9tQXV0b0VkZ2U6IDcsXG4gICAgLyoqXG4gICAgICogQXBwZWFyIHRvIHRoZSBsZWZ0IG9mIHRoZSB0YXJnZXQgZWxlbWVudCwgd2l0aCB0aGUgdG9wIGVkZ2VzIG9mIHRoZSBjYWxsb3V0IGFuZCB0YXJnZXQgYWxpZ25pbmcuXG4gICAgICovXG4gICAgbGVmdFRvcEVkZ2U6IDgsXG4gICAgLyoqXG4gICAgICogQXBwZWFyIHRvIHRoZSBsZWZ0IG9mIHRoZSB0YXJnZXQgZWxlbWVudCwgd2l0aCB0aGUgY2VudGVycyBvZiB0aGUgY2FsbG91dCBhbmQgdGFyZ2V0IGFsaWduaW5nLlxuICAgICAqL1xuICAgIGxlZnRDZW50ZXI6IDksXG4gICAgLyoqXG4gICAgICogQXBwZWFyIHRvIHRoZSBsZWZ0IG9mIHRoZSB0YXJnZXQgZWxlbWVudCwgd2l0aCB0aGUgYm90dG9tIGVkZ2VzIG9mIHRoZSBjYWxsb3V0IGFuZCB0YXJnZXQgYWxpZ25pbmcuXG4gICAgICovXG4gICAgbGVmdEJvdHRvbUVkZ2U6IDEwLFxuICAgIC8qKlxuICAgICAqIEFwcGVhciB0byB0aGUgcmlnaHQgb2YgdGhlIHRhcmdldCBlbGVtZW50LCB3aXRoIHRoZSB0b3AgZWRnZXMgb2YgdGhlIGNhbGxvdXQgYW5kIHRhcmdldCBhbGlnbmluZy5cbiAgICAgKi9cbiAgICByaWdodFRvcEVkZ2U6IDExLFxuICAgIC8qKlxuICAgICAqIEFwcGVhciB0byB0aGUgcmlnaHQgb2YgdGhlIHRhcmdldCBlbGVtZW50LCB3aXRoIHRoZSBjZW50ZXJzIG9mIHRoZSBjYWxsb3V0IGFuZCB0YXJnZXQgYWxpZ25pbmcuXG4gICAgICovXG4gICAgcmlnaHRDZW50ZXI6IDEyLFxuICAgIC8qKlxuICAgICAqIEFwcGVhciB0byB0aGUgcmlnaHQgb2YgdGhlIHRhcmdldCBlbGVtZW50LCB3aXRoIHRoZSBib3R0b20gZWRnZXMgb2YgdGhlIGNhbGxvdXQgYW5kIHRhcmdldCBhbGlnbmluZy5cbiAgICAgKi9cbiAgICByaWdodEJvdHRvbUVkZ2U6IDEzLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURpcmVjdGlvbmFsSGludC5qcy5tYXAiLCIvKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhbmQgb25seSBpZiB0aGUgdXNlciBpcyBvbiBhIGlPUyBkZXZpY2UuXG4gKiBVc2VkIHRvIGRldGVybWluZSB3aGV0aGVyIGlPUy1zcGVjaWZpYyBiZWhhdmlvciBzaG91bGQgYmUgYXBwbGllZC5cbiAqL1xuZXhwb3J0IHZhciBpc0lPUyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXdpbmRvdyB8fCAhd2luZG93Lm5hdmlnYXRvciB8fCAhd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gL2lQYWR8aVBob25lfGlQb2QvaS50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2JpbGVEZXRlY3Rvci5qcy5tYXAiLCIvKipcbiAqIERldGVybWluZXMgdGhlIGVmZmVjdGl2ZSBjaGVja2VkIHN0YXRlIG9mIGEgbWVudSBpdGVtLlxuICpcbiAqIEBwYXJhbSBpdGVtIHtJQ29udGV4dHVhbE1lbnVJdGVtfSB0byBnZXQgdGhlIGNoZWNrIHN0YXRlIG9mLlxuICogQHJldHVybnMge3RydWV9IGlmIHRoZSBpdGVtIGlzIGNoZWNrZWQuXG4gKiBAcmV0dXJucyB7ZmFsc2V9IGlmIHRoZSBpdGVtIGlzIHVuY2hlY2tlZC5cbiAqIEByZXR1cm5zIHtudWxsfSBpZiB0aGUgaXRlbSBpcyBub3QgY2hlY2thYmxlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SXNDaGVja2VkKGl0ZW0pIHtcbiAgICBpZiAoaXRlbS5jYW5DaGVjaykge1xuICAgICAgICByZXR1cm4gISEoaXRlbS5pc0NoZWNrZWQgfHwgaXRlbS5jaGVja2VkKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBpdGVtLmlzQ2hlY2tlZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiBpdGVtLmlzQ2hlY2tlZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBpdGVtLmNoZWNrZWQgPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gaXRlbS5jaGVja2VkO1xuICAgIH1cbiAgICAvLyBJdGVtIGlzIG5vdCBjaGVja2FibGUuXG4gICAgcmV0dXJuIG51bGw7XG59XG5leHBvcnQgZnVuY3Rpb24gaGFzU3VibWVudShpdGVtKSB7XG4gICAgcmV0dXJuICEhKGl0ZW0uc3ViTWVudVByb3BzIHx8IGl0ZW0uaXRlbXMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSXRlbURpc2FibGVkKGl0ZW0pIHtcbiAgICByZXR1cm4gISEoaXRlbS5pc0Rpc2FibGVkIHx8IGl0ZW0uZGlzYWJsZWQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE1lbnVJdGVtQXJpYVJvbGUoaXRlbSkge1xuICAgIHZhciBpc0NoZWNrZWQgPSBnZXRJc0NoZWNrZWQoaXRlbSk7XG4gICAgdmFyIGNhbkNoZWNrID0gaXNDaGVja2VkICE9PSBudWxsO1xuICAgIHJldHVybiBjYW5DaGVjayA/ICdtZW51aXRlbWNoZWNrYm94JyA6ICdtZW51aXRlbSc7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250ZXh0dWFsTWVudVV0aWxpdHkuanMubWFwIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBDb250ZXh0IGZvciBwcm92aWRpbmcgdGhlIHdpbmRvdy5cbiAqL1xuZXhwb3J0IHZhciBXaW5kb3dDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7XG4gICAgd2luZG93OiB0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyA/IHdpbmRvdyA6IHVuZGVmaW5lZCxcbn0pO1xuLyoqXG4gKiBIb29rIHRvIGFjY2VzcyB0aGUgd2luZG93IG9iamVjdC4gVGhpcyBjYW4gYmUgb3ZlcnJpZGRlbiBjb250ZXh0dWFsbHkgdXNpbmcgdGhlIGBXaW5kb3dQcm92aWRlcmAuXG4gKi9cbmV4cG9ydCB2YXIgdXNlV2luZG93ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gUmVhY3QudXNlQ29udGV4dChXaW5kb3dDb250ZXh0KS53aW5kb3c7IH07XG4vKipcbiAqIEhvb2sgdG8gYWNjZXNzIHRoZSBkb2N1bWVudCBvYmplY3QuIFRoaXMgY2FuIGJlIG92ZXJyaWRkZW4gY29udGV4dHVhbGx5IHVzaW5nIHRoZSBgV2luZG93UHJvdmlkZXJgLlxuICovXG5leHBvcnQgdmFyIHVzZURvY3VtZW50ID0gZnVuY3Rpb24gKCkgeyB2YXIgX2E7IHJldHVybiAoX2EgPSBSZWFjdC51c2VDb250ZXh0KFdpbmRvd0NvbnRleHQpLndpbmRvdykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRvY3VtZW50OyB9O1xuLyoqXG4gKiBDb21wb25lbnQgdG8gcHJvdmlkZSB0aGUgd2luZG93IG9iamVjdCBjb250ZXh0dWFsbHkuIFRoaXMgaXMgdXNlZnVsIHdoZW4gcmVuZGVyaW5nIGNvbnRlbnQgdG8gYW4gZWxlbWVudFxuICogY29udGFpbmVkIHdpdGhpbiBhIGNoaWxkIHdpbmRvdyBvciBpZnJhbWUgZWxlbWVudCwgd2hlcmUgZXZlbnQgaGFuZGxlcnMgYW5kIHN0eWxpbmcgbXVzdCBiZSBwcm9qZWN0ZWRcbiAqIHRvIGFuIGFsdGVybmF0aXZlIHdpbmRvdyBvciBkb2N1bWVudC5cbiAqL1xuZXhwb3J0IHZhciBXaW5kb3dQcm92aWRlciA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFdpbmRvd0NvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IHByb3BzIH0sIHByb3BzLmNoaWxkcmVuKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1XaW5kb3dQcm92aWRlci5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBCYXNlRGVjb3JhdG9yIH0gZnJvbSAnLi9CYXNlRGVjb3JhdG9yJztcbmltcG9ydCB7IGdldFdpbmRvdywgaG9pc3RTdGF0aWNzLCBFdmVudEdyb3VwIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IFdpbmRvd0NvbnRleHQgfSBmcm9tICcuLi8uLi9XaW5kb3dQcm92aWRlcic7XG5leHBvcnQgdmFyIFJlc3BvbnNpdmVNb2RlO1xuKGZ1bmN0aW9uIChSZXNwb25zaXZlTW9kZSkge1xuICAgIFJlc3BvbnNpdmVNb2RlW1Jlc3BvbnNpdmVNb2RlW1wic21hbGxcIl0gPSAwXSA9IFwic21hbGxcIjtcbiAgICBSZXNwb25zaXZlTW9kZVtSZXNwb25zaXZlTW9kZVtcIm1lZGl1bVwiXSA9IDFdID0gXCJtZWRpdW1cIjtcbiAgICBSZXNwb25zaXZlTW9kZVtSZXNwb25zaXZlTW9kZVtcImxhcmdlXCJdID0gMl0gPSBcImxhcmdlXCI7XG4gICAgUmVzcG9uc2l2ZU1vZGVbUmVzcG9uc2l2ZU1vZGVbXCJ4TGFyZ2VcIl0gPSAzXSA9IFwieExhcmdlXCI7XG4gICAgUmVzcG9uc2l2ZU1vZGVbUmVzcG9uc2l2ZU1vZGVbXCJ4eExhcmdlXCJdID0gNF0gPSBcInh4TGFyZ2VcIjtcbiAgICBSZXNwb25zaXZlTW9kZVtSZXNwb25zaXZlTW9kZVtcInh4eExhcmdlXCJdID0gNV0gPSBcInh4eExhcmdlXCI7XG4gICAgUmVzcG9uc2l2ZU1vZGVbUmVzcG9uc2l2ZU1vZGVbXCJ1bmtub3duXCJdID0gOTk5XSA9IFwidW5rbm93blwiO1xufSkoUmVzcG9uc2l2ZU1vZGUgfHwgKFJlc3BvbnNpdmVNb2RlID0ge30pKTtcbnZhciBSRVNQT05TSVZFX01BWF9DT05TVFJBSU5UID0gWzQ3OSwgNjM5LCAxMDIzLCAxMzY1LCAxOTE5LCA5OTk5OTk5OV07XG4vKipcbiAqIFVzZXIgc3BlY2lmaWVkIG1vZGUgdG8gZGVmYXVsdCB0bywgdXNlZnVsIGZvciBzZXJ2ZXIgc2lkZSByZW5kZXJpbmcgc2NlbmFyaW9zLlxuICovXG52YXIgX2RlZmF1bHRNb2RlO1xuLyoqXG4gKiBUcmFja2luZyB0aGUgbGFzdCBtb2RlIHdlIHN1Y2Nlc3NmdWxseSByZW5kZXJlZCwgd2hpY2ggYWxsb3dzIHVzIHRvXG4gKiBwYWludCBpbml0aWFsIHJlbmRlcnMgd2l0aCB0aGUgY29ycmVjdCBzaXplLlxuICovXG52YXIgX2xhc3RNb2RlO1xuLyoqXG4gKiBBbGxvd3MgYSBzZXJ2ZXIgcmVuZGVyZWQgc2NlbmFyaW8gdG8gcHJvdmlkZSBhIGRlZmF1bHQgcmVzcG9uc2l2ZSBtb2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0UmVzcG9uc2l2ZU1vZGUocmVzcG9uc2l2ZU1vZGUpIHtcbiAgICBfZGVmYXVsdE1vZGUgPSByZXNwb25zaXZlTW9kZTtcbn1cbi8qKlxuICogSW5pdGlhbGl6ZXMgdGhlIHJlc3BvbnNpdmUgbW9kZSB0byB0aGUgY3VycmVudCB3aW5kb3cgc2l6ZS4gVGhpcyBjYW4gYmUgdXNlZCB0byBhdm9pZFxuICogYSByZS1yZW5kZXIgZHVyaW5nIGZpcnN0IGNvbXBvbmVudCBtb3VudCBzaW5jZSB0aGUgd2luZG93IHdvdWxkIG90aGVyd2lzZSBub3QgYmUgbWVhc3VyZWRcbiAqIHVudGlsIGFmdGVyIG1vdW50aW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZVJlc3BvbnNpdmVNb2RlKGVsZW1lbnQpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRXaW5kb3cgPSAoZWxlbWVudCAmJiBnZXRXaW5kb3coZWxlbWVudCkpIHx8IHdpbmRvdztcbiAgICAgICAgZ2V0UmVzcG9uc2l2ZU1vZGUoY3VycmVudFdpbmRvdyk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEluaXRpYWxSZXNwb25zaXZlTW9kZSgpIHtcbiAgICByZXR1cm4gX2RlZmF1bHRNb2RlIHx8IF9sYXN0TW9kZSB8fCBSZXNwb25zaXZlTW9kZS5sYXJnZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aXRoUmVzcG9uc2l2ZU1vZGUoQ29tcG9zZWRDb21wb25lbnQpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIHJlc3VsdENsYXNzID0gKF9hID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKFdpdGhSZXNwb25zaXZlTW9kZSwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIFdpdGhSZXNwb25zaXZlTW9kZShwcm9wcykge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICAgICAgICAgIF90aGlzLl9vblJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNpdmVNb2RlID0gZ2V0UmVzcG9uc2l2ZU1vZGUoX3RoaXMuY29udGV4dC53aW5kb3cpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2l2ZU1vZGUgIT09IF90aGlzLnN0YXRlLnJlc3BvbnNpdmVNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2l2ZU1vZGU6IHJlc3BvbnNpdmVNb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIF90aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRHcm91cChfdGhpcyk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3VwZGF0ZUNvbXBvc2VkQ29tcG9uZW50UmVmID0gX3RoaXMuX3VwZGF0ZUNvbXBvc2VkQ29tcG9uZW50UmVmLmJpbmQoX3RoaXMpO1xuICAgICAgICAgICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zaXZlTW9kZTogZ2V0SW5pdGlhbFJlc3BvbnNpdmVNb2RlKCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBXaXRoUmVzcG9uc2l2ZU1vZGUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50cy5vbih0aGlzLmNvbnRleHQud2luZG93LCAncmVzaXplJywgdGhpcy5fb25SZXNpemUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX29uUmVzaXplKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgV2l0aFJlc3BvbnNpdmVNb2RlLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMuZGlzcG9zZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFdpdGhSZXNwb25zaXZlTW9kZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciByZXNwb25zaXZlTW9kZSA9IHRoaXMuc3RhdGUucmVzcG9uc2l2ZU1vZGU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNpdmVNb2RlID09PSBSZXNwb25zaXZlTW9kZS51bmtub3duID8gbnVsbCA6IChSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvc2VkQ29tcG9uZW50LCBfX2Fzc2lnbih7IHJlZjogdGhpcy5fdXBkYXRlQ29tcG9zZWRDb21wb25lbnRSZWYsIHJlc3BvbnNpdmVNb2RlOiByZXNwb25zaXZlTW9kZSB9LCB0aGlzLnByb3BzKSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBXaXRoUmVzcG9uc2l2ZU1vZGU7XG4gICAgICAgIH0oQmFzZURlY29yYXRvcikpLFxuICAgICAgICBfYS5jb250ZXh0VHlwZSA9IFdpbmRvd0NvbnRleHQsXG4gICAgICAgIF9hKTtcbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbXBvc2VkQ29tcG9uZW50LCByZXN1bHRDbGFzcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVzcG9uc2l2ZU1vZGUoY3VycmVudFdpbmRvdykge1xuICAgIHZhciByZXNwb25zaXZlTW9kZSA9IFJlc3BvbnNpdmVNb2RlLnNtYWxsO1xuICAgIGlmIChjdXJyZW50V2luZG93KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3aGlsZSAoY3VycmVudFdpbmRvdy5pbm5lcldpZHRoID4gUkVTUE9OU0lWRV9NQVhfQ09OU1RSQUlOVFtyZXNwb25zaXZlTW9kZV0pIHtcbiAgICAgICAgICAgICAgICByZXNwb25zaXZlTW9kZSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBSZXR1cm4gYSBiZXN0IGVmZm9ydCByZXN1bHQgaW4gY2FzZXMgd2hlcmUgd2UncmUgaW4gdGhlIGJyb3dzZXIgYnV0IGl0IHRocm93cyBvbiBnZXR0aW5nIGlubmVyV2lkdGguXG4gICAgICAgICAgICByZXNwb25zaXZlTW9kZSA9IGdldEluaXRpYWxSZXNwb25zaXZlTW9kZSgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRyYWNraW5nIGxhc3QgbW9kZSBqdXN0IGdpdmVzIHVzIGEgYmV0dGVyIGRlZmF1bHQgaW4gZnV0dXJlIHJlbmRlcnMsXG4gICAgICAgIC8vIHdoaWNoIGF2b2lkcyBzdGFydGluZyB3aXRoIHRoZSB3cm9uZyB2YWx1ZSBpZiB3ZSd2ZSBtZWFzdXJlZCBvbmNlLlxuICAgICAgICBfbGFzdE1vZGUgPSByZXNwb25zaXZlTW9kZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChfZGVmYXVsdE1vZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzcG9uc2l2ZU1vZGUgPSBfZGVmYXVsdE1vZGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbnRlbnQgd2FzIHJlbmRlcmVkIGluIGEgc2VydmVyIGVudmlyb25tZW50IHdpdGhvdXQgcHJvdmlkaW5nIGEgZGVmYXVsdCByZXNwb25zaXZlIG1vZGUuICcgK1xuICAgICAgICAgICAgICAgICdDYWxsIHNldFJlc3BvbnNpdmVNb2RlIHRvIGRlZmluZSB3aGF0IHRoZSByZXNwb25zaXZlIG1vZGUgaXMuJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNpdmVNb2RlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2l0aFJlc3BvbnNpdmVNb2RlLmpzLm1hcCIsImV4cG9ydCB2YXIgUmVjdGFuZ2xlRWRnZTtcbihmdW5jdGlvbiAoUmVjdGFuZ2xlRWRnZSkge1xuICAgIFJlY3RhbmdsZUVkZ2VbUmVjdGFuZ2xlRWRnZVtcInRvcFwiXSA9IDFdID0gXCJ0b3BcIjtcbiAgICBSZWN0YW5nbGVFZGdlW1JlY3RhbmdsZUVkZ2VbXCJib3R0b21cIl0gPSAtMV0gPSBcImJvdHRvbVwiO1xuICAgIFJlY3RhbmdsZUVkZ2VbUmVjdGFuZ2xlRWRnZVtcImxlZnRcIl0gPSAyXSA9IFwibGVmdFwiO1xuICAgIFJlY3RhbmdsZUVkZ2VbUmVjdGFuZ2xlRWRnZVtcInJpZ2h0XCJdID0gLTJdID0gXCJyaWdodFwiO1xufSkoUmVjdGFuZ2xlRWRnZSB8fCAoUmVjdGFuZ2xlRWRnZSA9IHt9KSk7XG5leHBvcnQgdmFyIFBvc2l0aW9uO1xuKGZ1bmN0aW9uIChQb3NpdGlvbikge1xuICAgIFBvc2l0aW9uW1Bvc2l0aW9uW1widG9wXCJdID0gMF0gPSBcInRvcFwiO1xuICAgIFBvc2l0aW9uW1Bvc2l0aW9uW1wiYm90dG9tXCJdID0gMV0gPSBcImJvdHRvbVwiO1xuICAgIFBvc2l0aW9uW1Bvc2l0aW9uW1wic3RhcnRcIl0gPSAyXSA9IFwic3RhcnRcIjtcbiAgICBQb3NpdGlvbltQb3NpdGlvbltcImVuZFwiXSA9IDNdID0gXCJlbmRcIjtcbn0pKFBvc2l0aW9uIHx8IChQb3NpdGlvbiA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb3NpdGlvbmluZy50eXBlcy5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gb24oZWxlbWVudCwgZXZlbnROYW1lLCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrLCBvcHRpb25zKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2ssIG9wdGlvbnMpOyB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b24uanMubWFwIiwiLyoqXG4gKiBSZWN0YW5nbGUgaGVscGVyIGNsYXNzLlxuICpcbiAqIEBwdWJsaWNcbiAqIHtAZG9jQ2F0ZWdvcnkgUmVjdGFuZ2xlfVxuICovXG52YXIgUmVjdGFuZ2xlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlY3RhbmdsZShsZWZ0LCByaWdodCwgdG9wLCBib3R0b20pIHtcbiAgICAgICAgaWYgKGxlZnQgPT09IHZvaWQgMCkgeyBsZWZ0ID0gMDsgfVxuICAgICAgICBpZiAocmlnaHQgPT09IHZvaWQgMCkgeyByaWdodCA9IDA7IH1cbiAgICAgICAgaWYgKHRvcCA9PT0gdm9pZCAwKSB7IHRvcCA9IDA7IH1cbiAgICAgICAgaWYgKGJvdHRvbSA9PT0gdm9pZCAwKSB7IGJvdHRvbSA9IDA7IH1cbiAgICAgICAgdGhpcy50b3AgPSB0b3A7XG4gICAgICAgIHRoaXMuYm90dG9tID0gYm90dG9tO1xuICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xuICAgICAgICB0aGlzLnJpZ2h0ID0gcmlnaHQ7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWN0YW5nbGUucHJvdG90eXBlLCBcIndpZHRoXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGN1bGF0ZWQgYXV0b21hdGljYWxseSBieSBzdWJ0cmFjdGluZyB0aGUgcmlnaHQgZnJvbSBsZWZ0XG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJpZ2h0IC0gdGhpcy5sZWZ0O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVjdGFuZ2xlLnByb3RvdHlwZSwgXCJoZWlnaHRcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsY3VsYXRlZCBhdXRvbWF0aWNhbGx5IGJ5IHN1YnRyYWN0aW5nIHRoZSBib3R0b20gZnJvbSB0b3AuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJvdHRvbSAtIHRoaXMudG9wO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBUZXN0cyBpZiBhbm90aGVyIHJlY3QgaXMgYXBwcm94aW1hdGVseSBlcXVhbCB0byB0aGlzIHJlY3QgKHdpdGhpbiA0IGRlY2ltYWwgcGxhY2VzLilcbiAgICAgKi9cbiAgICBSZWN0YW5nbGUucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChyZWN0KSB7XG4gICAgICAgIC8vIEZpeGluZyB0byA0IGRlY2ltYWwgcGxhY2VzIGJlY2F1c2UgaXQgYWxsb3dzIGVub3VnaCBwcmVjaXNpb24gYW5kIHdpbGwgaGFuZGxlIGNhc2VzIHdoZW4gc29tZXRoaW5nXG4gICAgICAgIC8vIHNob3VsZCBiZSByb3VuZGVkLCBsaWtlIC45OTk5OTkgc2hvdWxkIHJvdW5kIHRvIDEuXG4gICAgICAgIHJldHVybiAocGFyc2VGbG9hdCh0aGlzLnRvcC50b0ZpeGVkKDQpKSA9PT0gcGFyc2VGbG9hdChyZWN0LnRvcC50b0ZpeGVkKDQpKSAmJlxuICAgICAgICAgICAgcGFyc2VGbG9hdCh0aGlzLmJvdHRvbS50b0ZpeGVkKDQpKSA9PT0gcGFyc2VGbG9hdChyZWN0LmJvdHRvbS50b0ZpeGVkKDQpKSAmJlxuICAgICAgICAgICAgcGFyc2VGbG9hdCh0aGlzLmxlZnQudG9GaXhlZCg0KSkgPT09IHBhcnNlRmxvYXQocmVjdC5sZWZ0LnRvRml4ZWQoNCkpICYmXG4gICAgICAgICAgICBwYXJzZUZsb2F0KHRoaXMucmlnaHQudG9GaXhlZCg0KSkgPT09IHBhcnNlRmxvYXQocmVjdC5yaWdodC50b0ZpeGVkKDQpKSk7XG4gICAgfTtcbiAgICByZXR1cm4gUmVjdGFuZ2xlO1xufSgpKTtcbmV4cG9ydCB7IFJlY3RhbmdsZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVjdGFuZ2xlLmpzLm1hcCIsInZhciBfYTtcbmltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBEaXJlY3Rpb25hbEhpbnQgfSBmcm9tICcuLi8uLi9jb21tb24vRGlyZWN0aW9uYWxIaW50JztcbmltcG9ydCB7IGdldFNjcm9sbGJhcldpZHRoLCBnZXRSVEwgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgUmVjdGFuZ2xlRWRnZSwgfSBmcm9tICcuL3Bvc2l0aW9uaW5nLnR5cGVzJztcbmltcG9ydCB7IFJlY3RhbmdsZSB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5mdW5jdGlvbiBfY3JlYXRlUG9zaXRpb25EYXRhKHRhcmdldEVkZ2UsIGFsaWdubWVudEVkZ2UsIGlzQXV0bykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHRhcmdldEVkZ2U6IHRhcmdldEVkZ2UsXG4gICAgICAgIGFsaWdubWVudEVkZ2U6IGFsaWdubWVudEVkZ2UsXG4gICAgICAgIGlzQXV0bzogaXNBdXRvLFxuICAgIH07XG59XG4vLyBDdXJyZW50bHkgdGhlIGJlYWtQZXJjZW50IGlzIHNldCB0byA1MCBmb3IgYWxsIHBvc2l0aW9ucyBtZWFuaW5nIHRoYXQgaXQgc2hvdWxkIHRlbmQgdG8gdGhlIGNlbnRlciBvZiB0aGUgdGFyZ2V0XG52YXIgRGlyZWN0aW9uYWxEaWN0aW9uYXJ5ID0gKF9hID0ge30sXG4gICAgX2FbRGlyZWN0aW9uYWxIaW50LnRvcExlZnRFZGdlXSA9IF9jcmVhdGVQb3NpdGlvbkRhdGEoUmVjdGFuZ2xlRWRnZS50b3AsIFJlY3RhbmdsZUVkZ2UubGVmdCksXG4gICAgX2FbRGlyZWN0aW9uYWxIaW50LnRvcENlbnRlcl0gPSBfY3JlYXRlUG9zaXRpb25EYXRhKFJlY3RhbmdsZUVkZ2UudG9wKSxcbiAgICBfYVtEaXJlY3Rpb25hbEhpbnQudG9wUmlnaHRFZGdlXSA9IF9jcmVhdGVQb3NpdGlvbkRhdGEoUmVjdGFuZ2xlRWRnZS50b3AsIFJlY3RhbmdsZUVkZ2UucmlnaHQpLFxuICAgIF9hW0RpcmVjdGlvbmFsSGludC50b3BBdXRvRWRnZV0gPSBfY3JlYXRlUG9zaXRpb25EYXRhKFJlY3RhbmdsZUVkZ2UudG9wLCB1bmRlZmluZWQsIHRydWUpLFxuICAgIF9hW0RpcmVjdGlvbmFsSGludC5ib3R0b21MZWZ0RWRnZV0gPSBfY3JlYXRlUG9zaXRpb25EYXRhKFJlY3RhbmdsZUVkZ2UuYm90dG9tLCBSZWN0YW5nbGVFZGdlLmxlZnQpLFxuICAgIF9hW0RpcmVjdGlvbmFsSGludC5ib3R0b21DZW50ZXJdID0gX2NyZWF0ZVBvc2l0aW9uRGF0YShSZWN0YW5nbGVFZGdlLmJvdHRvbSksXG4gICAgX2FbRGlyZWN0aW9uYWxIaW50LmJvdHRvbVJpZ2h0RWRnZV0gPSBfY3JlYXRlUG9zaXRpb25EYXRhKFJlY3RhbmdsZUVkZ2UuYm90dG9tLCBSZWN0YW5nbGVFZGdlLnJpZ2h0KSxcbiAgICBfYVtEaXJlY3Rpb25hbEhpbnQuYm90dG9tQXV0b0VkZ2VdID0gX2NyZWF0ZVBvc2l0aW9uRGF0YShSZWN0YW5nbGVFZGdlLmJvdHRvbSwgdW5kZWZpbmVkLCB0cnVlKSxcbiAgICBfYVtEaXJlY3Rpb25hbEhpbnQubGVmdFRvcEVkZ2VdID0gX2NyZWF0ZVBvc2l0aW9uRGF0YShSZWN0YW5nbGVFZGdlLmxlZnQsIFJlY3RhbmdsZUVkZ2UudG9wKSxcbiAgICBfYVtEaXJlY3Rpb25hbEhpbnQubGVmdENlbnRlcl0gPSBfY3JlYXRlUG9zaXRpb25EYXRhKFJlY3RhbmdsZUVkZ2UubGVmdCksXG4gICAgX2FbRGlyZWN0aW9uYWxIaW50LmxlZnRCb3R0b21FZGdlXSA9IF9jcmVhdGVQb3NpdGlvbkRhdGEoUmVjdGFuZ2xlRWRnZS5sZWZ0LCBSZWN0YW5nbGVFZGdlLmJvdHRvbSksXG4gICAgX2FbRGlyZWN0aW9uYWxIaW50LnJpZ2h0VG9wRWRnZV0gPSBfY3JlYXRlUG9zaXRpb25EYXRhKFJlY3RhbmdsZUVkZ2UucmlnaHQsIFJlY3RhbmdsZUVkZ2UudG9wKSxcbiAgICBfYVtEaXJlY3Rpb25hbEhpbnQucmlnaHRDZW50ZXJdID0gX2NyZWF0ZVBvc2l0aW9uRGF0YShSZWN0YW5nbGVFZGdlLnJpZ2h0KSxcbiAgICBfYVtEaXJlY3Rpb25hbEhpbnQucmlnaHRCb3R0b21FZGdlXSA9IF9jcmVhdGVQb3NpdGlvbkRhdGEoUmVjdGFuZ2xlRWRnZS5yaWdodCwgUmVjdGFuZ2xlRWRnZS5ib3R0b20pLFxuICAgIF9hKTtcbmZ1bmN0aW9uIF9pc1JlY3RhbmdsZVdpdGhpbkJvdW5kcyhyZWN0LCBib3VuZGluZ1JlY3QpIHtcbiAgICBpZiAocmVjdC50b3AgPCBib3VuZGluZ1JlY3QudG9wKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHJlY3QuYm90dG9tID4gYm91bmRpbmdSZWN0LmJvdHRvbSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChyZWN0LmxlZnQgPCBib3VuZGluZ1JlY3QubGVmdCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChyZWN0LnJpZ2h0ID4gYm91bmRpbmdSZWN0LnJpZ2h0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4vKipcbiAqIEdldHMgYWxsIG9mIHRoZSBlZGdlcyBvZiBhIHJlY3RhbmdsZSB0aGF0IGFyZSBvdXRzaWRlIG9mIHRoZSBnaXZlbiBib3VuZHMuXG4gKiBJZiB0aGVyZSBhcmUgbm8gb3V0IG9mIGJvdW5kcyBlZGdlcyBpdCByZXR1cm5zIGFuIGVtcHR5IGFycmF5LlxuICovXG5mdW5jdGlvbiBfZ2V0T3V0T2ZCb3VuZHNFZGdlcyhyZWN0LCBib3VuZGluZ1JlY3QpIHtcbiAgICB2YXIgb3V0T2ZCb3VuZHMgPSBbXTtcbiAgICBpZiAocmVjdC50b3AgPCBib3VuZGluZ1JlY3QudG9wKSB7XG4gICAgICAgIG91dE9mQm91bmRzLnB1c2goUmVjdGFuZ2xlRWRnZS50b3ApO1xuICAgIH1cbiAgICBpZiAocmVjdC5ib3R0b20gPiBib3VuZGluZ1JlY3QuYm90dG9tKSB7XG4gICAgICAgIG91dE9mQm91bmRzLnB1c2goUmVjdGFuZ2xlRWRnZS5ib3R0b20pO1xuICAgIH1cbiAgICBpZiAocmVjdC5sZWZ0IDwgYm91bmRpbmdSZWN0LmxlZnQpIHtcbiAgICAgICAgb3V0T2ZCb3VuZHMucHVzaChSZWN0YW5nbGVFZGdlLmxlZnQpO1xuICAgIH1cbiAgICBpZiAocmVjdC5yaWdodCA+IGJvdW5kaW5nUmVjdC5yaWdodCkge1xuICAgICAgICBvdXRPZkJvdW5kcy5wdXNoKFJlY3RhbmdsZUVkZ2UucmlnaHQpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0T2ZCb3VuZHM7XG59XG5mdW5jdGlvbiBfZ2V0RWRnZVZhbHVlKHJlY3QsIGVkZ2UpIHtcbiAgICByZXR1cm4gcmVjdFtSZWN0YW5nbGVFZGdlW2VkZ2VdXTtcbn1cbmZ1bmN0aW9uIF9zZXRFZGdlVmFsdWUocmVjdCwgZWRnZSwgdmFsdWUpIHtcbiAgICByZWN0W1JlY3RhbmdsZUVkZ2VbZWRnZV1dID0gdmFsdWU7XG4gICAgcmV0dXJuIHJlY3Q7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIG1pZGRsZSB2YWx1ZSBvZiBhbiBlZGdlLiBPbmx5IHJldHVybnMgMSB2YWx1ZSByYXRoZXIgdGhhbiB4eSBjb29yZGluYXRlcyBhc1xuICogdGhlIGl0c2VsZiBhbHJlYWR5IGNvbnRhaW5zIHRoZSBvdGhlciBjb29yZGluYXRlLlxuICogRm9yIGluc3RhbmNlLCBhIGJvdHRvbSBlZGdlJ3MgY3VycmVudCB2YWx1ZSBpcyBpdCdzIHkgY29vcmRpbmF0ZSwgc28gdGhlIG51bWJlciByZXR1cm5lZCBpcyB0aGUgeC5cbiAqL1xuZnVuY3Rpb24gX2dldENlbnRlclZhbHVlKHJlY3QsIGVkZ2UpIHtcbiAgICB2YXIgZWRnZXMgPSBfZ2V0RmxhbmtpbmdFZGdlcyhlZGdlKTtcbiAgICByZXR1cm4gKF9nZXRFZGdlVmFsdWUocmVjdCwgZWRnZXMucG9zaXRpdmVFZGdlKSArIF9nZXRFZGdlVmFsdWUocmVjdCwgZWRnZXMubmVnYXRpdmVFZGdlKSkgLyAyO1xufVxuLyoqXG4gKiBGbGlwcyB0aGUgdmFsdWUgZGVwZW5kaW5nIG9uIHRoZSBlZGdlLlxuICogSWYgdGhlIGVkZ2UgaXMgYSBcInBvc2l0aXZlXCIgZWRnZSwgVG9wIG9yIExlZnQsIHRoZW4gdGhlIHZhbHVlIHNob3VsZCBzdGF5IGFzIGl0IGlzLlxuICogSWYgdGhlIGVkZ2UgaXMgYSBcIm5lZ2F0aXZlXCIgZWRnZSwgQm90dG9tIG9yIFJpZ2h0LCB0aGVuIHRoZSB2YWx1ZSBzaG91bGQgYmUgZmxpcHBlZC5cbiAqIFRoaXMgaXMgdG8gYWNjb3VudCBmb3IgdGhlIGZhY3QgdGhhdCB0aGUgY29vcmRpbmF0ZXMgYXJlIGVmZmVjdGl2ZWx5IHJldmVzZXJ2ZWQgaW4gY2VydGFpbiBjYXNlcyBmb3IgdGhlXG4gKiBcIm5lZ2F0aXZlXCIgZWRnZXMuXG4gKlxuICogRm9yIGV4YW1wbGUsIHdoZW4gdGVzdGluZyB0byBzZWUgaWYgYSBib3R0b20gZWRnZSAxIGlzIHdpdGhpbiB0aGUgYm91bmRzIG9mIGFub3RoZXIgYm90dG9tIGVkZ2UgMjpcbiAqIElmIGVkZ2UgMSBpcyBncmVhdGVyIHRoYW4gZWRnZSAyIHRoZW4gaXQgaXMgb3V0IG9mIGJvdW5kcy4gVGhpcyBpcyByZXZlcnNlZCBmb3IgdG9wIGVkZ2UgMSBhbmQgdG9wIGVkZ2UgMi5cbiAqIElmIHRvcCBlZGdlIDEgaXMgbGVzcyB0aGFuIGVkZ2UgMiB0aGVuIGl0IGlzIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIF9nZXRSZWxhdGl2ZUVkZ2VWYWx1ZShlZGdlLCB2YWx1ZSkge1xuICAgIGlmIChlZGdlID4gMCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWUgKiAtMTtcbiAgICB9XG59XG5mdW5jdGlvbiBfZ2V0UmVsYXRpdmVSZWN0RWRnZVZhbHVlKGVkZ2UsIHJlY3QpIHtcbiAgICByZXR1cm4gX2dldFJlbGF0aXZlRWRnZVZhbHVlKGVkZ2UsIF9nZXRFZGdlVmFsdWUocmVjdCwgZWRnZSkpO1xufVxuZnVuY3Rpb24gX2dldFJlbGF0aXZlRWRnZURpZmZlcmVuY2UocmVjdCwgaG9zdFJlY3QsIGVkZ2UpIHtcbiAgICB2YXIgZWRnZURpZmZlcmVuY2UgPSBfZ2V0RWRnZVZhbHVlKHJlY3QsIGVkZ2UpIC0gX2dldEVkZ2VWYWx1ZShob3N0UmVjdCwgZWRnZSk7XG4gICAgcmV0dXJuIF9nZXRSZWxhdGl2ZUVkZ2VWYWx1ZShlZGdlLCBlZGdlRGlmZmVyZW5jZSk7XG59XG4vKipcbiAqIE1vdmVzIHRoZSBlZGdlIG9mIGEgcmVjdGFuZ2xlIHRvIHRoZSB2YWx1ZSBnaXZlbi4gSXQgb25seSBtb3ZlcyB0aGUgZWRnZSBpbiBhIGxpbmVhciBkaXJlY3Rpb24gYmFzZWQgb24gdGhhdCBlZGdlLlxuICogRm9yIGV4YW1wbGUsIGlmIGl0J3MgYSBib3R0b20gZWRnZSBpdCB3aWxsIG9ubHkgY2hhbmdlIHkgY29vcmRpbmF0ZXMuXG4gKi9cbmZ1bmN0aW9uIF9tb3ZlRWRnZShyZWN0LCBlZGdlLCBuZXdWYWx1ZSkge1xuICAgIHZhciBkaWZmZXJlbmNlID0gX2dldEVkZ2VWYWx1ZShyZWN0LCBlZGdlKSAtIG5ld1ZhbHVlO1xuICAgIHJlY3QgPSBfc2V0RWRnZVZhbHVlKHJlY3QsIGVkZ2UsIG5ld1ZhbHVlKTtcbiAgICByZWN0ID0gX3NldEVkZ2VWYWx1ZShyZWN0LCBlZGdlICogLTEsIF9nZXRFZGdlVmFsdWUocmVjdCwgZWRnZSAqIC0xKSAtIGRpZmZlcmVuY2UpO1xuICAgIHJldHVybiByZWN0O1xufVxuLyoqXG4gKiBBbGlnbnMgdGhlIGVkZ2Ugb24gdGhlIHBhc3NlZCBpbiByZWN0IHRvIHRoZSB0YXJnZXQuIElmIHRoZXJlIGlzIGEgZ2FwIHRoZW4gaXQgd2lsbCBoYXZlIHRoYXQgc3BhY2UgYmV0d2VlbiB0aGUgdHdvLlxuICovXG5mdW5jdGlvbiBfYWxpZ25FZGdlcyhyZWN0LCB0YXJnZXQsIGVkZ2UsIGdhcCkge1xuICAgIGlmIChnYXAgPT09IHZvaWQgMCkgeyBnYXAgPSAwOyB9XG4gICAgcmV0dXJuIF9tb3ZlRWRnZShyZWN0LCBlZGdlLCBfZ2V0RWRnZVZhbHVlKHRhcmdldCwgZWRnZSkgKyBfZ2V0UmVsYXRpdmVFZGdlVmFsdWUoZWRnZSwgZ2FwKSk7XG59XG4vKipcbiAqIEFsaWducyB0aGUgdGFyZ2V0RWRnZSBvbiB0aGUgcGFzc2VkIGluIHRhcmdldCB0byB0aGUgcmVjdHMgY29ycmVzcG9uZGluZyBvcHBvc2l0ZSBlZGdlLlxuICogRm9yIGluc3RhbmNlIGlmIHRhcmdldEVkZ2UgaXMgYm90dG9tLCB0aGVuIHRoZSByZWN0cyB0b3Agd2lsbCBiZSBtb3ZlZCB0byBtYXRjaCBpdC5cbiAqL1xuZnVuY3Rpb24gX2FsaWduT3Bwb3NpdGVFZGdlcyhyZWN0LCB0YXJnZXQsIHRhcmdldEVkZ2UsIGdhcCkge1xuICAgIGlmIChnYXAgPT09IHZvaWQgMCkgeyBnYXAgPSAwOyB9XG4gICAgdmFyIG9wcG9zaXRlRWRnZSA9IHRhcmdldEVkZ2UgKiAtMTtcbiAgICB2YXIgYWRqdXN0ZWRHYXAgPSBfZ2V0UmVsYXRpdmVFZGdlVmFsdWUob3Bwb3NpdGVFZGdlLCBnYXApO1xuICAgIHJldHVybiBfbW92ZUVkZ2UocmVjdCwgdGFyZ2V0RWRnZSAqIC0xLCBfZ2V0RWRnZVZhbHVlKHRhcmdldCwgdGFyZ2V0RWRnZSkgKyBhZGp1c3RlZEdhcCk7XG59XG4vKipcbiAqIFRlc3RzIHRvIHNlZSBpZiB0aGUgZ2l2ZW4gZWRnZSBpcyB3aXRoaW4gdGhlIGJvdW5kcyBvZiB0aGUgZ2l2ZW4gcmVjdGFuZ2xlLlxuICovXG5mdW5jdGlvbiBfaXNFZGdlSW5Cb3VuZHMocmVjdCwgYm91bmRzLCBlZGdlKSB7XG4gICAgdmFyIGFkanVzdGVkUmVjdFZhbHVlID0gX2dldFJlbGF0aXZlUmVjdEVkZ2VWYWx1ZShlZGdlLCByZWN0KTtcbiAgICByZXR1cm4gYWRqdXN0ZWRSZWN0VmFsdWUgPiBfZ2V0UmVsYXRpdmVSZWN0RWRnZVZhbHVlKGVkZ2UsIGJvdW5kcyk7XG59XG4vKipcbiAqIEF0dGVtcHRzIHRvIG1vdmUgdGhlIHJlY3RhbmdsZSB0aHJvdWdoIHZhcmlvdXMgc2lkZXMgb2YgdGhlIHRhcmdldCB0byBmaW5kIGEgcGxhY2UgdG8gZml0LlxuICogSWYgbm8gZml0IGlzIGZvdW5kLCB0aGUgb3JpZ2luYWwgcG9zaXRpb24gc2hvdWxkIGJlIHJldHVybmVkLlxuICovXG5mdW5jdGlvbiBfZmxpcFRvRml0KHJlY3QsIHRhcmdldCwgYm91bmRpbmcsIHBvc2l0aW9uRGF0YSwgZ2FwKSB7XG4gICAgaWYgKGdhcCA9PT0gdm9pZCAwKSB7IGdhcCA9IDA7IH1cbiAgICB2YXIgZGlyZWN0aW9ucyA9IFtcbiAgICAgICAgUmVjdGFuZ2xlRWRnZS5sZWZ0LFxuICAgICAgICBSZWN0YW5nbGVFZGdlLnJpZ2h0LFxuICAgICAgICBSZWN0YW5nbGVFZGdlLmJvdHRvbSxcbiAgICAgICAgUmVjdGFuZ2xlRWRnZS50b3AsXG4gICAgXTtcbiAgICAvLyBJbiBSVEwgcGFnZSwgUmVjdGFuZ2xlRWRnZS5yaWdodCBoYXMgYSBoaWdoZXIgcHJpb3JpdHkgdGhhbiBSZWN0YW5nbGVFZGdlLmxlZnQsIHNvIHRoZSBvcmRlciBzaG91bGQgYmUgdXBkYXRlZC5cbiAgICBpZiAoZ2V0UlRMKCkpIHtcbiAgICAgICAgZGlyZWN0aW9uc1swXSAqPSAtMTtcbiAgICAgICAgZGlyZWN0aW9uc1sxXSAqPSAtMTtcbiAgICB9XG4gICAgdmFyIGN1cnJlbnRFc3RpbWF0ZSA9IHJlY3Q7XG4gICAgdmFyIGN1cnJlbnRFZGdlID0gcG9zaXRpb25EYXRhLnRhcmdldEVkZ2U7XG4gICAgdmFyIGN1cnJlbnRBbGlnbm1lbnQgPSBwb3NpdGlvbkRhdGEuYWxpZ25tZW50RWRnZTtcbiAgICAvLyBLZWVwIHN3aXRjaGluZyBzaWRlcyB1bnRpbCBvbmUgaXMgZm91bmQgd2l0aCBlbm91Z2ggc3BhY2UuXG4gICAgLy8gSWYgYWxsIHNpZGVzIGRvbid0IGZpdCB0aGVuIHJldHVybiB0aGUgdW5tb2RpZmllZCBlbGVtZW50LlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgIGlmICghX2lzRWRnZUluQm91bmRzKGN1cnJlbnRFc3RpbWF0ZSwgYm91bmRpbmcsIGN1cnJlbnRFZGdlKSkge1xuICAgICAgICAgICAgZGlyZWN0aW9ucy5zcGxpY2UoZGlyZWN0aW9ucy5pbmRleE9mKGN1cnJlbnRFZGdlKSwgMSk7XG4gICAgICAgICAgICBpZiAoZGlyZWN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbnMuaW5kZXhPZihjdXJyZW50RWRnZSAqIC0xKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRFZGdlID0gY3VycmVudEVkZ2UgKiAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRBbGlnbm1lbnQgPSBjdXJyZW50RWRnZTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEVkZ2UgPSBkaXJlY3Rpb25zLnNsaWNlKC0xKVswXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3VycmVudEVzdGltYXRlID0gX2VzdGltYXRlUG9zaXRpb24ocmVjdCwgdGFyZ2V0LCB7IHRhcmdldEVkZ2U6IGN1cnJlbnRFZGdlLCBhbGlnbm1lbnRFZGdlOiBjdXJyZW50QWxpZ25tZW50IH0sIGdhcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVsZW1lbnRSZWN0YW5nbGU6IGN1cnJlbnRFc3RpbWF0ZSxcbiAgICAgICAgICAgICAgICB0YXJnZXRFZGdlOiBjdXJyZW50RWRnZSxcbiAgICAgICAgICAgICAgICBhbGlnbm1lbnRFZGdlOiBjdXJyZW50QWxpZ25tZW50LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBlbGVtZW50UmVjdGFuZ2xlOiByZWN0LFxuICAgICAgICB0YXJnZXRFZGdlOiBwb3NpdGlvbkRhdGEudGFyZ2V0RWRnZSxcbiAgICAgICAgYWxpZ25tZW50RWRnZTogcG9zaXRpb25EYXRhLmFsaWdubWVudEVkZ2UsXG4gICAgfTtcbn1cbi8qKlxuICogRmxpcHMgb25seSB0aGUgYWxpZ25tZW50IGVkZ2Ugb2YgYW4gZWxlbWVudCByZWN0YW5nbGUuIFRoaXMgaXMgdXNlZCBpbnN0ZWFkIG9mIG51ZGdpbmcgdGhlIGFsaWdubWVudCBlZGdlc1xuICogaW50byBwb3NpdGlvbiwgd2hlbiBhbGlnblRhcmdldEVkZ2UgaXMgc3BlY2lmaWVkLlxuICovXG5mdW5jdGlvbiBfZmxpcEFsaWdubWVudEVkZ2UoZWxlbWVudEVzdGltYXRlLCB0YXJnZXQsIGdhcCwgY292ZXJUYXJnZXQpIHtcbiAgICB2YXIgYWxpZ25tZW50RWRnZSA9IGVsZW1lbnRFc3RpbWF0ZS5hbGlnbm1lbnRFZGdlLCB0YXJnZXRFZGdlID0gZWxlbWVudEVzdGltYXRlLnRhcmdldEVkZ2UsIGVsZW1lbnRSZWN0YW5nbGUgPSBlbGVtZW50RXN0aW1hdGUuZWxlbWVudFJlY3RhbmdsZTtcbiAgICB2YXIgb3Bwb3NpdGVFZGdlID0gYWxpZ25tZW50RWRnZSAqIC0xO1xuICAgIHZhciBuZXdFc3RpbWF0ZSA9IF9lc3RpbWF0ZVBvc2l0aW9uKGVsZW1lbnRSZWN0YW5nbGUsIHRhcmdldCwgeyB0YXJnZXRFZGdlOiB0YXJnZXRFZGdlLCBhbGlnbm1lbnRFZGdlOiBvcHBvc2l0ZUVkZ2UgfSwgZ2FwLCBjb3ZlclRhcmdldCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZWxlbWVudFJlY3RhbmdsZTogbmV3RXN0aW1hdGUsXG4gICAgICAgIHRhcmdldEVkZ2U6IHRhcmdldEVkZ2UsXG4gICAgICAgIGFsaWdubWVudEVkZ2U6IG9wcG9zaXRlRWRnZSxcbiAgICB9O1xufVxuLyoqXG4gKiBBZGp1c3RzIGEgZWxlbWVudCByZWN0YW5nbGUgdG8gZml0IHdpdGhpbiB0aGUgYm91bmRzIGdpdmVuLiBJZiBkaXJlY3Rpb25hbEhpbnRGaXhlZCBvciBjb3ZlcnRhcmdldCBpcyBwYXNzZWQgaW5cbiAqIHRoZW4gdGhlIGVsZW1lbnQgd2lsbCBub3QgZmxpcCBzaWRlcyBvbiB0aGUgdGFyZ2V0LiBUaGV5IHdpbGwsIGhvd2V2ZXIsIGJlIG51ZGdlZCB0byBmaXQgd2l0aGluIHRoZSBib3VuZHMgZ2l2ZW4uXG4gKi9cbmZ1bmN0aW9uIF9hZGp1c3RGaXRXaXRoaW5Cb3VuZHMoZWxlbWVudCwgdGFyZ2V0LCBib3VuZGluZywgcG9zaXRpb25EYXRhLCBnYXAsIGRpcmVjdGlvbmFsSGludEZpeGVkLCBjb3ZlclRhcmdldCkge1xuICAgIGlmIChnYXAgPT09IHZvaWQgMCkgeyBnYXAgPSAwOyB9XG4gICAgdmFyIGFsaWdubWVudEVkZ2UgPSBwb3NpdGlvbkRhdGEuYWxpZ25tZW50RWRnZSwgYWxpZ25UYXJnZXRFZGdlID0gcG9zaXRpb25EYXRhLmFsaWduVGFyZ2V0RWRnZTtcbiAgICB2YXIgZWxlbWVudEVzdGltYXRlID0ge1xuICAgICAgICBlbGVtZW50UmVjdGFuZ2xlOiBlbGVtZW50LFxuICAgICAgICB0YXJnZXRFZGdlOiBwb3NpdGlvbkRhdGEudGFyZ2V0RWRnZSxcbiAgICAgICAgYWxpZ25tZW50RWRnZTogYWxpZ25tZW50RWRnZSxcbiAgICB9O1xuICAgIGlmICghZGlyZWN0aW9uYWxIaW50Rml4ZWQgJiYgIWNvdmVyVGFyZ2V0KSB7XG4gICAgICAgIGVsZW1lbnRFc3RpbWF0ZSA9IF9mbGlwVG9GaXQoZWxlbWVudCwgdGFyZ2V0LCBib3VuZGluZywgcG9zaXRpb25EYXRhLCBnYXApO1xuICAgIH1cbiAgICB2YXIgb3V0T2ZCb3VuZHMgPSBfZ2V0T3V0T2ZCb3VuZHNFZGdlcyhlbGVtZW50LCBib3VuZGluZyk7XG4gICAgaWYgKGFsaWduVGFyZ2V0RWRnZSkge1xuICAgICAgICAvLyBUaGUgZWRnZSBvcHBvc2l0ZSB0byB0aGUgYWxpZ25tZW50IGVkZ2UgbWlnaHQgYmUgb3V0IG9mIGJvdW5kcy5cbiAgICAgICAgLy8gRmxpcCBhbGlnbm1lbnQgdG8gc2VlIGlmIHdlIGNhbiBnZXQgaXQgd2l0aGluIGJvdW5kcy5cbiAgICAgICAgaWYgKGVsZW1lbnRFc3RpbWF0ZS5hbGlnbm1lbnRFZGdlICYmIG91dE9mQm91bmRzLmluZGV4T2YoZWxlbWVudEVzdGltYXRlLmFsaWdubWVudEVkZ2UgKiAtMSkgPiAtMSkge1xuICAgICAgICAgICAgdmFyIGZsaXBwZWRFbGVtZW50RXN0aW1hdGUgPSBfZmxpcEFsaWdubWVudEVkZ2UoZWxlbWVudEVzdGltYXRlLCB0YXJnZXQsIGdhcCwgY292ZXJUYXJnZXQpO1xuICAgICAgICAgICAgaWYgKF9pc1JlY3RhbmdsZVdpdGhpbkJvdW5kcyhmbGlwcGVkRWxlbWVudEVzdGltYXRlLmVsZW1lbnRSZWN0YW5nbGUsIGJvdW5kaW5nKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmbGlwcGVkRWxlbWVudEVzdGltYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGZsaXBwZWQgZWxlbWVudHMgZWRnZXMgYXJlIHN0aWxsIG91dCBvZiBib3VuZHMsIHRyeSBudWRnaW5nIGl0LlxuICAgICAgICAgICAgICAgIGVsZW1lbnRFc3RpbWF0ZSA9IF9hbGlnbk91dE9mQm91bmRzRWRnZXMoX2dldE91dE9mQm91bmRzRWRnZXMoZmxpcHBlZEVsZW1lbnRFc3RpbWF0ZS5lbGVtZW50UmVjdGFuZ2xlLCBib3VuZGluZyksIGVsZW1lbnRFc3RpbWF0ZSwgYm91bmRpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlbGVtZW50RXN0aW1hdGUgPSBfYWxpZ25PdXRPZkJvdW5kc0VkZ2VzKG91dE9mQm91bmRzLCBlbGVtZW50RXN0aW1hdGUsIGJvdW5kaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnRFc3RpbWF0ZTtcbn1cbi8qKlxuICogSXRlcmF0ZXMgdGhyb3VnaCBhIGxpc3Qgb2Ygb3V0IG9mIGJvdW5kcyBlZGdlcyBhbmQgdHJpZXMgdG8gbnVkZ2UgYW5kIGFsaWduIHRoZW0uXG4gKiBAcGFyYW0gb3V0T2ZCb3VuZHNFZGdlcyAtIEFycmF5IG9mIGVkZ2VzIHRoYXQgYXJlIG91dCBvZiBib3VuZHNcbiAqIEBwYXJhbSBlbGVtZW50RXN0aW1hdGUgLSBUaGUgY3VycmVudCBlbGVtZW50IHBvc2l0aW9uaW5nIGVzdGltYXRlXG4gKiBAcGFyYW0gYm91bmRpbmcgLSBUaGUgY3VycmVudCBib3VuZHNcbiAqL1xuZnVuY3Rpb24gX2FsaWduT3V0T2ZCb3VuZHNFZGdlcyhvdXRPZkJvdW5kc0VkZ2VzLCBlbGVtZW50RXN0aW1hdGUsIGJvdW5kaW5nKSB7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBvdXRPZkJvdW5kc0VkZ2VzXzEgPSBvdXRPZkJvdW5kc0VkZ2VzOyBfaSA8IG91dE9mQm91bmRzRWRnZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IG91dE9mQm91bmRzRWRnZXNfMVtfaV07XG4gICAgICAgIGVsZW1lbnRFc3RpbWF0ZS5lbGVtZW50UmVjdGFuZ2xlID0gX2FsaWduRWRnZXMoZWxlbWVudEVzdGltYXRlLmVsZW1lbnRSZWN0YW5nbGUsIGJvdW5kaW5nLCBkaXJlY3Rpb24pO1xuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudEVzdGltYXRlO1xufVxuLyoqXG4gKiBNb3ZlcyB0aGUgbWlkZGxlIHBvaW50IG9uIGFuIGVkZ2UgdG8gdGhlIHBvaW50IGdpdmVuLlxuICogT25seSBtb3ZlcyBpbiBvbmUgZGlyZWN0aW9uLiBGb3IgaW5zdGFuY2UgaWYgYSBib3R0b20gZWRnZSBpcyBwYXNzZWQgaW4sIHRoZW5cbiAqIHRoZSBib3R0b20gZWRnZSB3aWxsIGJlIG1vdmVkIGluIHRoZSB4IGF4aXMgdG8gbWF0Y2ggdGhlIHBvaW50LlxuICovXG5mdW5jdGlvbiBfY2VudGVyRWRnZVRvUG9pbnQocmVjdCwgZWRnZSwgcG9pbnQpIHtcbiAgICB2YXIgcG9zaXRpdmVFZGdlID0gX2dldEZsYW5raW5nRWRnZXMoZWRnZSkucG9zaXRpdmVFZGdlO1xuICAgIHZhciBlbGVtZW50TWlkZGxlID0gX2dldENlbnRlclZhbHVlKHJlY3QsIGVkZ2UpO1xuICAgIHZhciBkaXN0YW5jZVRvTWlkZGxlID0gZWxlbWVudE1pZGRsZSAtIF9nZXRFZGdlVmFsdWUocmVjdCwgcG9zaXRpdmVFZGdlKTtcbiAgICByZXR1cm4gX21vdmVFZGdlKHJlY3QsIHBvc2l0aXZlRWRnZSwgcG9pbnQgLSBkaXN0YW5jZVRvTWlkZGxlKTtcbn1cbi8qKlxuICogTW92ZXMgdGhlIGVsZW1lbnQgcmVjdGFuZ2xlIHRvIGJlIGFwcHJvcHJpYXRlbHkgcG9zaXRpb25lZCByZWxhdGl2ZSB0byBhIGdpdmVuIHRhcmdldC5cbiAqIERvZXMgbm90IGZsaXAgb3IgYWRqdXN0IHRoZSBlbGVtZW50LlxuICovXG5mdW5jdGlvbiBfZXN0aW1hdGVQb3NpdGlvbihlbGVtZW50VG9Qb3NpdGlvbiwgdGFyZ2V0LCBwb3NpdGlvbkRhdGEsIGdhcCwgY292ZXJUYXJnZXQpIHtcbiAgICBpZiAoZ2FwID09PSB2b2lkIDApIHsgZ2FwID0gMDsgfVxuICAgIHZhciBlc3RpbWF0ZWRFbGVtZW50UG9zaXRpb247XG4gICAgdmFyIGFsaWdubWVudEVkZ2UgPSBwb3NpdGlvbkRhdGEuYWxpZ25tZW50RWRnZSwgdGFyZ2V0RWRnZSA9IHBvc2l0aW9uRGF0YS50YXJnZXRFZGdlO1xuICAgIHZhciBlbGVtZW50RWRnZSA9IGNvdmVyVGFyZ2V0ID8gdGFyZ2V0RWRnZSA6IHRhcmdldEVkZ2UgKiAtMTtcbiAgICBlc3RpbWF0ZWRFbGVtZW50UG9zaXRpb24gPSBjb3ZlclRhcmdldFxuICAgICAgICA/IF9hbGlnbkVkZ2VzKGVsZW1lbnRUb1Bvc2l0aW9uLCB0YXJnZXQsIHRhcmdldEVkZ2UsIGdhcClcbiAgICAgICAgOiBfYWxpZ25PcHBvc2l0ZUVkZ2VzKGVsZW1lbnRUb1Bvc2l0aW9uLCB0YXJnZXQsIHRhcmdldEVkZ2UsIGdhcCk7XG4gICAgLy8gaWYgbm8gYWxpZ25tZW50IGVkZ2UgaXMgcHJvdmlkZWQgaXQncyBzdXBwb3NlZCB0byBiZSBjZW50ZXJlZC5cbiAgICBpZiAoIWFsaWdubWVudEVkZ2UpIHtcbiAgICAgICAgdmFyIHRhcmdldE1pZGRsZVBvaW50ID0gX2dldENlbnRlclZhbHVlKHRhcmdldCwgdGFyZ2V0RWRnZSk7XG4gICAgICAgIGVzdGltYXRlZEVsZW1lbnRQb3NpdGlvbiA9IF9jZW50ZXJFZGdlVG9Qb2ludChlc3RpbWF0ZWRFbGVtZW50UG9zaXRpb24sIGVsZW1lbnRFZGdlLCB0YXJnZXRNaWRkbGVQb2ludCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlc3RpbWF0ZWRFbGVtZW50UG9zaXRpb24gPSBfYWxpZ25FZGdlcyhlc3RpbWF0ZWRFbGVtZW50UG9zaXRpb24sIHRhcmdldCwgYWxpZ25tZW50RWRnZSk7XG4gICAgfVxuICAgIHJldHVybiBlc3RpbWF0ZWRFbGVtZW50UG9zaXRpb247XG59XG4vKipcbiAqIFJldHVybnMgdGhlIG5vbi1vcHBvc2l0ZSBlZGdlcyBvZiB0aGUgdGFyZ2V0IGVkZ2UuXG4gKiBGb3IgaW5zdGFuY2UgaWYgYm90dG9tIGlzIHBhc3NlZCBpbiB0aGVuIGxlZnQgYW5kIHJpZ2h0IHdpbGwgYmUgcmV0dXJuZWQuXG4gKi9cbmZ1bmN0aW9uIF9nZXRGbGFua2luZ0VkZ2VzKGVkZ2UpIHtcbiAgICBpZiAoZWRnZSA9PT0gUmVjdGFuZ2xlRWRnZS50b3AgfHwgZWRnZSA9PT0gUmVjdGFuZ2xlRWRnZS5ib3R0b20pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBvc2l0aXZlRWRnZTogUmVjdGFuZ2xlRWRnZS5sZWZ0LFxuICAgICAgICAgICAgbmVnYXRpdmVFZGdlOiBSZWN0YW5nbGVFZGdlLnJpZ2h0LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBvc2l0aXZlRWRnZTogUmVjdGFuZ2xlRWRnZS50b3AsXG4gICAgICAgICAgICBuZWdhdGl2ZUVkZ2U6IFJlY3RhbmdsZUVkZ2UuYm90dG9tLFxuICAgICAgICB9O1xuICAgIH1cbn1cbi8qKlxuICogUmV0cmlldmUgdGhlIGZpbmFsIHZhbHVlIGZvciB0aGUgcmV0dXJuIGVkZ2Ugb2YgZWxlbWVudFJlY3RhbmdsZS4gSWYgdGhlIGVsZW1lbnRSZWN0YW5nbGUgaXMgY2xvc2VyIHRvIG9uZSBzaWRlXG4gKiBvZiB0aGUgYm91bmRzIHZlcnN1cyB0aGUgb3RoZXIsIHRoZSByZXR1cm4gZWRnZSBpcyBmbGlwcGVkIHRvIGdyb3cgaW53YXJkLlxuICovXG5mdW5jdGlvbiBfZmluYWxpemVSZXR1cm5FZGdlKGVsZW1lbnRSZWN0YW5nbGUsIHJldHVybkVkZ2UsIGJvdW5kcykge1xuICAgIGlmIChib3VuZHMgJiZcbiAgICAgICAgTWF0aC5hYnMoX2dldFJlbGF0aXZlRWRnZURpZmZlcmVuY2UoZWxlbWVudFJlY3RhbmdsZSwgYm91bmRzLCByZXR1cm5FZGdlKSkgPlxuICAgICAgICAgICAgTWF0aC5hYnMoX2dldFJlbGF0aXZlRWRnZURpZmZlcmVuY2UoZWxlbWVudFJlY3RhbmdsZSwgYm91bmRzLCByZXR1cm5FZGdlICogLTEpKSkge1xuICAgICAgICByZXR1cm4gcmV0dXJuRWRnZSAqIC0xO1xuICAgIH1cbiAgICByZXR1cm4gcmV0dXJuRWRnZTtcbn1cbi8qKlxuICogRmluYWxpemVzIHRoZSBlbGVtZW50IHBvc2l0b24gYmFzZWQgb24gdGhlIGhvc3RFbGVtZW50LiBPbmx5IHJldHVybnMgdGhlXG4gKiByZWN0YW5nbGUgdmFsdWVzIHRvIHBvc2l0aW9uIHN1Y2ggdGhhdCB0aGV5IGFyZSBhbmNob3JlZCB0byB0aGUgdGFyZ2V0LlxuICogVGhpcyBoZWxwcyBwcmV2ZW50IHJlc2l6aW5nIGZyb20gbG9va2luZyB2ZXJ5IHN0cmFuZ2UuXG4gKiBGb3IgaW5zdGFuY2UsIGlmIHRoZSB0YXJnZXQgZWRnZSBpcyB0b3AgYW5kIGFsaWduZWQgd2l0aCB0aGUgbGVmdCBzaWRlIHRoZW5cbiAqIHRoZSBib3R0b20gYW5kIGxlZnQgdmFsdWVzIGFyZSByZXR1cm5lZCBzbyBhcyB0aGUgY2FsbG91IHNocmlua3MgaXQgc2hyaW5rcyB0b3dhcmRzIHRoYXQgY29ybmVyLlxuICovXG5mdW5jdGlvbiBfZmluYWxpemVFbGVtZW50UG9zaXRpb24oZWxlbWVudFJlY3RhbmdsZSwgaG9zdEVsZW1lbnQsIHRhcmdldEVkZ2UsIGJvdW5kcywgYWxpZ25tZW50RWRnZSwgY292ZXJUYXJnZXQsIGRvTm90RmluYWxpemVSZXR1cm5FZGdlKSB7XG4gICAgdmFyIHJldHVyblZhbHVlID0ge307XG4gICAgdmFyIGhvc3RSZWN0ID0gX2dldFJlY3RhbmdsZUZyb21FbGVtZW50KGhvc3RFbGVtZW50KTtcbiAgICB2YXIgZWxlbWVudEVkZ2UgPSBjb3ZlclRhcmdldCA/IHRhcmdldEVkZ2UgOiB0YXJnZXRFZGdlICogLTE7XG4gICAgdmFyIGVsZW1lbnRFZGdlU3RyaW5nID0gUmVjdGFuZ2xlRWRnZVtlbGVtZW50RWRnZV07XG4gICAgdmFyIHJldHVybkVkZ2UgPSBhbGlnbm1lbnRFZGdlID8gYWxpZ25tZW50RWRnZSA6IF9nZXRGbGFua2luZ0VkZ2VzKHRhcmdldEVkZ2UpLnBvc2l0aXZlRWRnZTtcbiAgICBpZiAoIWRvTm90RmluYWxpemVSZXR1cm5FZGdlKSB7XG4gICAgICAgIHJldHVybkVkZ2UgPSBfZmluYWxpemVSZXR1cm5FZGdlKGVsZW1lbnRSZWN0YW5nbGUsIHJldHVybkVkZ2UsIGJvdW5kcyk7XG4gICAgfVxuICAgIHJldHVyblZhbHVlW2VsZW1lbnRFZGdlU3RyaW5nXSA9IF9nZXRSZWxhdGl2ZUVkZ2VEaWZmZXJlbmNlKGVsZW1lbnRSZWN0YW5nbGUsIGhvc3RSZWN0LCBlbGVtZW50RWRnZSk7XG4gICAgcmV0dXJuVmFsdWVbUmVjdGFuZ2xlRWRnZVtyZXR1cm5FZGdlXV0gPSBfZ2V0UmVsYXRpdmVFZGdlRGlmZmVyZW5jZShlbGVtZW50UmVjdGFuZ2xlLCBob3N0UmVjdCwgcmV0dXJuRWRnZSk7XG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xufVxuLy8gU2luY2UgdGhlIGJlYWsgaXMgcm90YXRlZCA0NSBkZWdyZWVzIHRoZSBhY3R1YWwgaGVpZ2h0L3dpZHRoIGlzIHRoZSBsZW5ndGggb2YgdGhlIGRpYWdvbmFsLlxuLy8gV2Ugc3RpbGwgd2FudCB0byBwb3NpdGlvbiB0aGUgYmVhayBiYXNlZCBvbiBpdCdzIG1pZHBvaW50IHdoaWNoIGRvZXMgbm90IGNoYW5nZS4gSXQgd2lsbFxuLy8gYmUgYXQgKGJlYWt3aWR0aCAvIDIsIGJlYWt3aWR0aCAvIDIpXG5mdW5jdGlvbiBfY2FsY3VsYXRlQWN0dWFsQmVha1dpZHRoSW5QaXhlbHMoYmVha1dpZHRoKSB7XG4gICAgcmV0dXJuIE1hdGguc3FydChiZWFrV2lkdGggKiBiZWFrV2lkdGggKiAyKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgYXBwcm9wcmlhdGUgSVBvc2l0aW9uRGF0YSBiYXNlZCBvbiB0aGUgcHJvcHMgYWx0ZXJlZCBmb3IgUlRMLlxuICogSWYgZGlyZWN0aW9uYWxIaW50Rm9yUlRMIGlzIHBhc3NlZCBpbiB0aGF0IGlzIHVzZWQgaWYgdGhlIHBhZ2UgaXMgUlRMLlxuICogSWYgZGlyZWN0aW9uYWxIaW50IGlzIHNwZWNpZmllZCwgbm8gZGlyZWN0aW9uYWxIaW50Rm9yUlRMIGlzIGF2YWlsYWJsZSwgYW5kIHRoZSBwYWdlIGlzIFJUTCwgdGhlIGhpbnQgd2lsbCBiZVxuICogZmxpcHBlZCAoZS5nLiBib3R0b21MZWZ0RWRnZSB3b3VsZCBiZWNvbWUgYm90dG9tUmlnaHRFZGdlKS5cbiAqXG4gKiBJZiB0aGVyZSBpcyBubyBkaXJlY3Rpb25hbEhpbnQgcGFzc2VkIGluLCBib3R0b21BdXRvRWRnZSBpcyBjaG9zZW4gYXV0b21hdGljYWxseS5cbiAqL1xuZnVuY3Rpb24gX2dldFBvc2l0aW9uRGF0YShkaXJlY3Rpb25hbEhpbnQsIGRpcmVjdGlvbmFsSGludEZvclJUTCwgcHJldmlvdXNQb3NpdGlvbnMpIHtcbiAgICBpZiAoZGlyZWN0aW9uYWxIaW50ID09PSB2b2lkIDApIHsgZGlyZWN0aW9uYWxIaW50ID0gRGlyZWN0aW9uYWxIaW50LmJvdHRvbUF1dG9FZGdlOyB9XG4gICAgaWYgKHByZXZpb3VzUG9zaXRpb25zKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhbGlnbm1lbnRFZGdlOiBwcmV2aW91c1Bvc2l0aW9ucy5hbGlnbm1lbnRFZGdlLFxuICAgICAgICAgICAgaXNBdXRvOiBwcmV2aW91c1Bvc2l0aW9ucy5pc0F1dG8sXG4gICAgICAgICAgICB0YXJnZXRFZGdlOiBwcmV2aW91c1Bvc2l0aW9ucy50YXJnZXRFZGdlLFxuICAgICAgICB9O1xuICAgIH1cbiAgICB2YXIgcG9zaXRpb25JbmZvcm1hdGlvbiA9IF9fYXNzaWduKHt9LCBEaXJlY3Rpb25hbERpY3Rpb25hcnlbZGlyZWN0aW9uYWxIaW50XSk7XG4gICAgaWYgKGdldFJUTCgpKSB7XG4gICAgICAgIC8vIElmIGFsaWdubWVudCBlZGdlIGV4aXN0cyBhbmQgdGhhdCBhbGlnbm1lbnQgZWRnZSBpcyAtMiBvciAyLCByaWdodCBvciBsZWZ0LCB0aGVuIGZsaXAgaXQuXG4gICAgICAgIGlmIChwb3NpdGlvbkluZm9ybWF0aW9uLmFsaWdubWVudEVkZ2UgJiYgcG9zaXRpb25JbmZvcm1hdGlvbi5hbGlnbm1lbnRFZGdlICUgMiA9PT0gMCkge1xuICAgICAgICAgICAgcG9zaXRpb25JbmZvcm1hdGlvbi5hbGlnbm1lbnRFZGdlID0gcG9zaXRpb25JbmZvcm1hdGlvbi5hbGlnbm1lbnRFZGdlICogLTE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpcmVjdGlvbmFsSGludEZvclJUTCAhPT0gdW5kZWZpbmVkID8gRGlyZWN0aW9uYWxEaWN0aW9uYXJ5W2RpcmVjdGlvbmFsSGludEZvclJUTF0gOiBwb3NpdGlvbkluZm9ybWF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gcG9zaXRpb25JbmZvcm1hdGlvbjtcbn1cbi8qKlxuICogR2V0J3MgdGhlIGFsaWdubWVudCBkYXRhIGZvciB0aGUgZ2l2ZW4gaW5mb3JtYXRpb24uIFRoaXMgb25seSByZWFsbHkgbWF0dGVycyBpZiB0aGUgcG9zaXRpb25pbmcgaXMgQXV0by5cbiAqIElmIGl0IGlzIGF1dG8gdGhlbiB0aGUgYWxpZ25tZW50RWRnZSBzaG91bGQgYmUgY2hvc2VuIGJhc2VkIG9uIHRoZSB0YXJnZXQgZWRnZSdzIHBvc2l0aW9uIHJlbGF0aXZlIHRvXG4gKiB0aGUgY2VudGVyIG9mIHRoZSBwYWdlLlxuICovXG5mdW5jdGlvbiBfZ2V0QWxpZ25tZW50RGF0YShwb3NpdGlvbkRhdGEsIHRhcmdldCwgYm91bmRpbmdSZWN0LCBjb3ZlclRhcmdldCwgYWxpZ25UYXJnZXRFZGdlKSB7XG4gICAgaWYgKHBvc2l0aW9uRGF0YS5pc0F1dG8pIHtcbiAgICAgICAgcG9zaXRpb25EYXRhLmFsaWdubWVudEVkZ2UgPSBnZXRDbG9zZXN0RWRnZShwb3NpdGlvbkRhdGEudGFyZ2V0RWRnZSwgdGFyZ2V0LCBib3VuZGluZ1JlY3QpO1xuICAgIH1cbiAgICBwb3NpdGlvbkRhdGEuYWxpZ25UYXJnZXRFZGdlID0gYWxpZ25UYXJnZXRFZGdlO1xuICAgIHJldHVybiBwb3NpdGlvbkRhdGE7XG59XG5mdW5jdGlvbiBnZXRDbG9zZXN0RWRnZSh0YXJnZXRFZGdlLCB0YXJnZXQsIGJvdW5kaW5nUmVjdCkge1xuICAgIHZhciB0YXJnZXRDZW50ZXIgPSBfZ2V0Q2VudGVyVmFsdWUodGFyZ2V0LCB0YXJnZXRFZGdlKTtcbiAgICB2YXIgYm91bmRpbmdDZW50ZXIgPSBfZ2V0Q2VudGVyVmFsdWUoYm91bmRpbmdSZWN0LCB0YXJnZXRFZGdlKTtcbiAgICB2YXIgX2EgPSBfZ2V0RmxhbmtpbmdFZGdlcyh0YXJnZXRFZGdlKSwgcG9zaXRpdmVFZGdlID0gX2EucG9zaXRpdmVFZGdlLCBuZWdhdGl2ZUVkZ2UgPSBfYS5uZWdhdGl2ZUVkZ2U7XG4gICAgaWYgKHRhcmdldENlbnRlciA8PSBib3VuZGluZ0NlbnRlcikge1xuICAgICAgICByZXR1cm4gcG9zaXRpdmVFZGdlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5lZ2F0aXZlRWRnZTtcbiAgICB9XG59XG5mdW5jdGlvbiBfcG9zaXRpb25FbGVtZW50V2l0aGluQm91bmRzKGVsZW1lbnRUb1Bvc2l0aW9uLCB0YXJnZXQsIGJvdW5kaW5nLCBwb3NpdGlvbkRhdGEsIGdhcCwgZGlyZWN0aW9uYWxIaW50Rml4ZWQsIGNvdmVyVGFyZ2V0KSB7XG4gICAgdmFyIGVzdGltYXRlZEVsZW1lbnRQb3NpdGlvbiA9IF9lc3RpbWF0ZVBvc2l0aW9uKGVsZW1lbnRUb1Bvc2l0aW9uLCB0YXJnZXQsIHBvc2l0aW9uRGF0YSwgZ2FwLCBjb3ZlclRhcmdldCk7XG4gICAgaWYgKF9pc1JlY3RhbmdsZVdpdGhpbkJvdW5kcyhlc3RpbWF0ZWRFbGVtZW50UG9zaXRpb24sIGJvdW5kaW5nKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZWxlbWVudFJlY3RhbmdsZTogZXN0aW1hdGVkRWxlbWVudFBvc2l0aW9uLFxuICAgICAgICAgICAgdGFyZ2V0RWRnZTogcG9zaXRpb25EYXRhLnRhcmdldEVkZ2UsXG4gICAgICAgICAgICBhbGlnbm1lbnRFZGdlOiBwb3NpdGlvbkRhdGEuYWxpZ25tZW50RWRnZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBfYWRqdXN0Rml0V2l0aGluQm91bmRzKGVsZW1lbnRUb1Bvc2l0aW9uLCB0YXJnZXQsIGJvdW5kaW5nLCBwb3NpdGlvbkRhdGEsIGdhcCwgZGlyZWN0aW9uYWxIaW50Rml4ZWQsIGNvdmVyVGFyZ2V0KTtcbiAgICB9XG59XG5mdW5jdGlvbiBfZmluYWxpemVCZWFrUG9zaXRpb24oZWxlbWVudFBvc2l0aW9uLCBwb3NpdGlvbmVkQmVhaywgYm91bmRzKSB7XG4gICAgdmFyIHRhcmdldEVkZ2UgPSBlbGVtZW50UG9zaXRpb24udGFyZ2V0RWRnZSAqIC0xO1xuICAgIC8vIFRoZSBcImhvc3RcIiBlbGVtZW50IHRoYXQgd2Ugd2lsbCB1c2UgdG8gaGVscCBwb3NpdGlvbiB0aGUgYmVhay5cbiAgICB2YXIgYWN0dWFsRWxlbWVudCA9IG5ldyBSZWN0YW5nbGUoMCwgZWxlbWVudFBvc2l0aW9uLmVsZW1lbnRSZWN0YW5nbGUud2lkdGgsIDAsIGVsZW1lbnRQb3NpdGlvbi5lbGVtZW50UmVjdGFuZ2xlLmhlaWdodCk7XG4gICAgdmFyIHJldHVyblZhbHVlID0ge307XG4gICAgdmFyIHJldHVybkVkZ2UgPSBfZmluYWxpemVSZXR1cm5FZGdlKGVsZW1lbnRQb3NpdGlvbi5lbGVtZW50UmVjdGFuZ2xlLCBlbGVtZW50UG9zaXRpb24uYWxpZ25tZW50RWRnZSA/IGVsZW1lbnRQb3NpdGlvbi5hbGlnbm1lbnRFZGdlIDogX2dldEZsYW5raW5nRWRnZXModGFyZ2V0RWRnZSkucG9zaXRpdmVFZGdlLCBib3VuZHMpO1xuICAgIHJldHVyblZhbHVlW1JlY3RhbmdsZUVkZ2VbdGFyZ2V0RWRnZV1dID0gX2dldEVkZ2VWYWx1ZShwb3NpdGlvbmVkQmVhaywgdGFyZ2V0RWRnZSk7XG4gICAgcmV0dXJuVmFsdWVbUmVjdGFuZ2xlRWRnZVtyZXR1cm5FZGdlXV0gPSBfZ2V0UmVsYXRpdmVFZGdlRGlmZmVyZW5jZShwb3NpdGlvbmVkQmVhaywgYWN0dWFsRWxlbWVudCwgcmV0dXJuRWRnZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZWxlbWVudFBvc2l0aW9uOiBfX2Fzc2lnbih7fSwgcmV0dXJuVmFsdWUpLFxuICAgICAgICBjbG9zZXN0RWRnZTogZ2V0Q2xvc2VzdEVkZ2UoZWxlbWVudFBvc2l0aW9uLnRhcmdldEVkZ2UsIHBvc2l0aW9uZWRCZWFrLCBhY3R1YWxFbGVtZW50KSxcbiAgICAgICAgdGFyZ2V0RWRnZTogdGFyZ2V0RWRnZSxcbiAgICB9O1xufVxuZnVuY3Rpb24gX3Bvc2l0aW9uQmVhayhiZWFrV2lkdGgsIGVsZW1lbnRQb3NpdGlvbikge1xuICAgIHZhciB0YXJnZXQgPSBlbGVtZW50UG9zaXRpb24udGFyZ2V0UmVjdGFuZ2xlO1xuICAgIC8qKlxuICAgICAqIE5vdGUgYWJvdXQgYmVhayBwb3NpdGlvbmluZzogVGhlIGFjdHVhbCBiZWFrIHdpZHRoIG9ubHkgbWF0dGVycyBmb3IgZ2V0dGluZyB0aGUgZ2FwIGJldHdlZW4gdGhlIGNhbGxvdXQgYW5kXG4gICAgICogdGFyZ2V0LCBpdCBkb2VzIG5vdCBpbXBhY3QgdGhlIGJlYWsgcGxhY2VtZW50IHdpdGhpbiB0aGUgY2FsbG91dC4gRm9yIGV4YW1wbGUgZXhhbXBsZSwgaWYgdGhlIGJlYWtXaWR0aCBpcyA4LFxuICAgICAqIHRoZW4gdGhlIGFjdHVhbCBiZWFrV2lkdGggaXMgc3Fycm9vdCg4XjIgKyA4XjIpID0gMTEuMzF4MTEuMzEuIFNvIHRoZSBjYWxsb3V0IHdpbGwgbmVlZCB0byBiZSBhbiBleHRyYSAzIHBpeGVsc1xuICAgICAqIGF3YXkgZnJvbSBpdHMgdGFyZ2V0LiBXaGlsZSB0aGUgYmVhayBpcyBiZWluZyBwb3NpdGlvbmVkIGluIHRoZSBjYWxsb3V0IGl0IHN0aWxsIGFjdHMgYXMgdGhvdWdoIGl0IHdlcmUgOHg4LlxuICAgICAqL1xuICAgIHZhciBfYSA9IF9nZXRGbGFua2luZ0VkZ2VzKGVsZW1lbnRQb3NpdGlvbi50YXJnZXRFZGdlKSwgcG9zaXRpdmVFZGdlID0gX2EucG9zaXRpdmVFZGdlLCBuZWdhdGl2ZUVkZ2UgPSBfYS5uZWdhdGl2ZUVkZ2U7XG4gICAgdmFyIGJlYWtUYXJnZXRQb2ludCA9IF9nZXRDZW50ZXJWYWx1ZSh0YXJnZXQsIGVsZW1lbnRQb3NpdGlvbi50YXJnZXRFZGdlKTtcbiAgICB2YXIgZWxlbWVudEJvdW5kcyA9IG5ldyBSZWN0YW5nbGUoYmVha1dpZHRoIC8gMiwgZWxlbWVudFBvc2l0aW9uLmVsZW1lbnRSZWN0YW5nbGUud2lkdGggLSBiZWFrV2lkdGggLyAyLCBiZWFrV2lkdGggLyAyLCBlbGVtZW50UG9zaXRpb24uZWxlbWVudFJlY3RhbmdsZS5oZWlnaHQgLSBiZWFrV2lkdGggLyAyKTtcbiAgICB2YXIgYmVha1Bvc2l0aW9uID0gbmV3IFJlY3RhbmdsZSgwLCBiZWFrV2lkdGgsIDAsIGJlYWtXaWR0aCk7XG4gICAgYmVha1Bvc2l0aW9uID0gX21vdmVFZGdlKGJlYWtQb3NpdGlvbiwgZWxlbWVudFBvc2l0aW9uLnRhcmdldEVkZ2UgKiAtMSwgLWJlYWtXaWR0aCAvIDIpO1xuICAgIGJlYWtQb3NpdGlvbiA9IF9jZW50ZXJFZGdlVG9Qb2ludChiZWFrUG9zaXRpb24sIGVsZW1lbnRQb3NpdGlvbi50YXJnZXRFZGdlICogLTEsIGJlYWtUYXJnZXRQb2ludCAtIF9nZXRSZWxhdGl2ZVJlY3RFZGdlVmFsdWUocG9zaXRpdmVFZGdlLCBlbGVtZW50UG9zaXRpb24uZWxlbWVudFJlY3RhbmdsZSkpO1xuICAgIGlmICghX2lzRWRnZUluQm91bmRzKGJlYWtQb3NpdGlvbiwgZWxlbWVudEJvdW5kcywgcG9zaXRpdmVFZGdlKSkge1xuICAgICAgICBiZWFrUG9zaXRpb24gPSBfYWxpZ25FZGdlcyhiZWFrUG9zaXRpb24sIGVsZW1lbnRCb3VuZHMsIHBvc2l0aXZlRWRnZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFfaXNFZGdlSW5Cb3VuZHMoYmVha1Bvc2l0aW9uLCBlbGVtZW50Qm91bmRzLCBuZWdhdGl2ZUVkZ2UpKSB7XG4gICAgICAgIGJlYWtQb3NpdGlvbiA9IF9hbGlnbkVkZ2VzKGJlYWtQb3NpdGlvbiwgZWxlbWVudEJvdW5kcywgbmVnYXRpdmVFZGdlKTtcbiAgICB9XG4gICAgcmV0dXJuIGJlYWtQb3NpdGlvbjtcbn1cbmZ1bmN0aW9uIF9nZXRSZWN0YW5nbGVGcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgdmFyIGNsaWVudFJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHJldHVybiBuZXcgUmVjdGFuZ2xlKGNsaWVudFJlY3QubGVmdCwgY2xpZW50UmVjdC5yaWdodCwgY2xpZW50UmVjdC50b3AsIGNsaWVudFJlY3QuYm90dG9tKTtcbn1cbmZ1bmN0aW9uIF9nZXRSZWN0YW5nbGVGcm9tSVJlY3QocmVjdCkge1xuICAgIHJldHVybiBuZXcgUmVjdGFuZ2xlKHJlY3QubGVmdCwgcmVjdC5yaWdodCwgcmVjdC50b3AsIHJlY3QuYm90dG9tKTtcbn1cbmZ1bmN0aW9uIF9nZXRUYXJnZXRSZWN0KGJvdW5kcywgdGFyZ2V0KSB7XG4gICAgdmFyIHRhcmdldFJlY3RhbmdsZTtcbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1leHRyYS1ib29sZWFuLWNhc3RcbiAgICAgICAgaWYgKCEhdGFyZ2V0LnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICB2YXIgZXYgPSB0YXJnZXQ7XG4gICAgICAgICAgICB0YXJnZXRSZWN0YW5nbGUgPSBuZXcgUmVjdGFuZ2xlKGV2LmNsaWVudFgsIGV2LmNsaWVudFgsIGV2LmNsaWVudFksIGV2LmNsaWVudFkpO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV4dHJhLWJvb2xlYW4tY2FzdFxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCEhdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCkge1xuICAgICAgICAgICAgdGFyZ2V0UmVjdGFuZ2xlID0gX2dldFJlY3RhbmdsZUZyb21FbGVtZW50KHRhcmdldCk7XG4gICAgICAgICAgICAvLyBIVE1MSW1nRWxlbWVudHMgY2FuIGhhdmUgeCBhbmQgeSB2YWx1ZXMuIFRoZSBjaGVjayBmb3IgaXQgYmVpbmcgYSBwb2ludCBtdXN0IGdvIGxhc3QuXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgcG9pbnQgPSB0YXJnZXQ7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgIHZhciBsZWZ0ID0gcG9pbnQubGVmdCB8fCBwb2ludC54O1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICB2YXIgdG9wXzEgPSBwb2ludC50b3AgfHwgcG9pbnQueTtcbiAgICAgICAgICAgIHRhcmdldFJlY3RhbmdsZSA9IG5ldyBSZWN0YW5nbGUobGVmdCwgbGVmdCwgdG9wXzEsIHRvcF8xKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIV9pc1JlY3RhbmdsZVdpdGhpbkJvdW5kcyh0YXJnZXRSZWN0YW5nbGUsIGJvdW5kcykpIHtcbiAgICAgICAgICAgIHZhciBvdXRPZkJvdW5kcyA9IF9nZXRPdXRPZkJvdW5kc0VkZ2VzKHRhcmdldFJlY3RhbmdsZSwgYm91bmRzKTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgb3V0T2ZCb3VuZHNfMSA9IG91dE9mQm91bmRzOyBfaSA8IG91dE9mQm91bmRzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IG91dE9mQm91bmRzXzFbX2ldO1xuICAgICAgICAgICAgICAgIHRhcmdldFJlY3RhbmdsZVtSZWN0YW5nbGVFZGdlW2RpcmVjdGlvbl1dID0gYm91bmRzW1JlY3RhbmdsZUVkZ2VbZGlyZWN0aW9uXV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRhcmdldFJlY3RhbmdsZSA9IG5ldyBSZWN0YW5nbGUoMCwgMCwgMCwgMCk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXRSZWN0YW5nbGU7XG59XG4vKipcbiAqIElmIG1heCBoZWlnaHQgaXMgbGVzcyB0aGFuIHplcm8gaXQgcmV0dXJucyB0aGUgYm91bmRzIGhlaWdodCBpbnN0ZWFkLlxuICovXG5mdW5jdGlvbiBfZ2V0TWF4SGVpZ2h0RnJvbVRhcmdldFJlY3RhbmdsZSh0YXJnZXRSZWN0YW5nbGUsIHRhcmdldEVkZ2UsIGdhcFNwYWNlLCBib3VuZHMsIGNvdmVyVGFyZ2V0KSB7XG4gICAgdmFyIG1heEhlaWdodCA9IDA7XG4gICAgdmFyIGRpcmVjdGlvbmFsSGludCA9IERpcmVjdGlvbmFsRGljdGlvbmFyeVt0YXJnZXRFZGdlXTtcbiAgICAvLyBJZiBjb3ZlciB0YXJnZXQgaXMgc2V0LCB0aGVuIHRoZSBtYXggaGVpZ2h0IHNob3VsZCBiZSBjYWxjdWxhdGVkIHVzaW5nIHRoZSBvcHBvc2l0ZSBvZiB0aGUgdGFyZ2V0IGVkZ2Ugc2luY2VcbiAgICAvLyB0aGF0J3MgdGhlIGRpcmVjdGlvbiB0aGF0IHRoZSBjYWxsb3V0IHdpbGwgZXhwYW5kIGluLlxuICAgIC8vIEZvciBpbnN0YW5jZSwgaWYgdGhlIGRpcmVjdGlvbmFsaGludCBpcyBib3R0b21MZWZ0RWRnZSB0aGVuIHRoZSBjYWxsb3V0IHdpbGwgcG9zaXRpb24gc28gaXQncyBib3R0b20gZWRnZVxuICAgIC8vIGlzIGFsaWduZWQgd2l0aCB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXQgYW5kIGV4cGFuZCB1cCB0b3dhcmRzIHRoZSB0b3Agb2YgdGhlIHNjcmVlbiBhbmQgdGhlIGNhbGN1bGF0ZWQgbWF4IGhlaWdodFxuICAgIC8vIGlzIChib3R0b20gb2YgdGFyZ2V0KSAtICh0b3Agb2Ygc2NyZWVuKSAtIGdhcFNwYWNlLlxuICAgIHZhciB0YXJnZXQgPSBjb3ZlclRhcmdldCA/IGRpcmVjdGlvbmFsSGludC50YXJnZXRFZGdlICogLTEgOiBkaXJlY3Rpb25hbEhpbnQudGFyZ2V0RWRnZTtcbiAgICBpZiAodGFyZ2V0ID09PSBSZWN0YW5nbGVFZGdlLnRvcCkge1xuICAgICAgICBtYXhIZWlnaHQgPSBfZ2V0RWRnZVZhbHVlKHRhcmdldFJlY3RhbmdsZSwgZGlyZWN0aW9uYWxIaW50LnRhcmdldEVkZ2UpIC0gYm91bmRzLnRvcCAtIGdhcFNwYWNlO1xuICAgIH1cbiAgICBlbHNlIGlmICh0YXJnZXQgPT09IFJlY3RhbmdsZUVkZ2UuYm90dG9tKSB7XG4gICAgICAgIG1heEhlaWdodCA9IGJvdW5kcy5ib3R0b20gLSBfZ2V0RWRnZVZhbHVlKHRhcmdldFJlY3RhbmdsZSwgZGlyZWN0aW9uYWxIaW50LnRhcmdldEVkZ2UpIC0gZ2FwU3BhY2U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBtYXhIZWlnaHQgPSBib3VuZHMuYm90dG9tIC0gdGFyZ2V0UmVjdGFuZ2xlLnRvcCAtIGdhcFNwYWNlO1xuICAgIH1cbiAgICByZXR1cm4gbWF4SGVpZ2h0ID4gMCA/IG1heEhlaWdodCA6IGJvdW5kcy5oZWlnaHQ7XG59XG5mdW5jdGlvbiBfcG9zaXRpb25FbGVtZW50UmVsYXRpdmUocHJvcHMsIGVsZW1lbnRUb1Bvc2l0aW9uLCBib3VuZGluZ1JlY3QsIHByZXZpb3VzUG9zaXRpb25zKSB7XG4gICAgdmFyIGdhcCA9IHByb3BzLmdhcFNwYWNlID8gcHJvcHMuZ2FwU3BhY2UgOiAwO1xuICAgIHZhciB0YXJnZXRSZWN0ID0gX2dldFRhcmdldFJlY3QoYm91bmRpbmdSZWN0LCBwcm9wcy50YXJnZXQpO1xuICAgIHZhciBwb3NpdGlvbkRhdGEgPSBfZ2V0QWxpZ25tZW50RGF0YShfZ2V0UG9zaXRpb25EYXRhKHByb3BzLmRpcmVjdGlvbmFsSGludCwgcHJvcHMuZGlyZWN0aW9uYWxIaW50Rm9yUlRMLCBwcmV2aW91c1Bvc2l0aW9ucyksIHRhcmdldFJlY3QsIGJvdW5kaW5nUmVjdCwgcHJvcHMuY292ZXJUYXJnZXQsIHByb3BzLmFsaWduVGFyZ2V0RWRnZSk7XG4gICAgdmFyIHBvc2l0aW9uZWRFbGVtZW50ID0gX3Bvc2l0aW9uRWxlbWVudFdpdGhpbkJvdW5kcyhfZ2V0UmVjdGFuZ2xlRnJvbUVsZW1lbnQoZWxlbWVudFRvUG9zaXRpb24pLCB0YXJnZXRSZWN0LCBib3VuZGluZ1JlY3QsIHBvc2l0aW9uRGF0YSwgZ2FwLCBwcm9wcy5kaXJlY3Rpb25hbEhpbnRGaXhlZCwgcHJvcHMuY292ZXJUYXJnZXQpO1xuICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcG9zaXRpb25lZEVsZW1lbnQpLCB7IHRhcmdldFJlY3RhbmdsZTogdGFyZ2V0UmVjdCB9KTtcbn1cbmZ1bmN0aW9uIF9maW5hbGl6ZVBvc2l0aW9uRGF0YShwb3NpdGlvbmVkRWxlbWVudCwgaG9zdEVsZW1lbnQsIGJvdW5kcywgY292ZXJUYXJnZXQsIGRvTm90RmluYWxpemVSZXR1cm5FZGdlKSB7XG4gICAgdmFyIGZpbmFsaXplZEVsZW1lbnQgPSBfZmluYWxpemVFbGVtZW50UG9zaXRpb24ocG9zaXRpb25lZEVsZW1lbnQuZWxlbWVudFJlY3RhbmdsZSwgaG9zdEVsZW1lbnQsIHBvc2l0aW9uZWRFbGVtZW50LnRhcmdldEVkZ2UsIGJvdW5kcywgcG9zaXRpb25lZEVsZW1lbnQuYWxpZ25tZW50RWRnZSwgY292ZXJUYXJnZXQsIGRvTm90RmluYWxpemVSZXR1cm5FZGdlKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBlbGVtZW50UG9zaXRpb246IGZpbmFsaXplZEVsZW1lbnQsXG4gICAgICAgIHRhcmdldEVkZ2U6IHBvc2l0aW9uZWRFbGVtZW50LnRhcmdldEVkZ2UsXG4gICAgICAgIGFsaWdubWVudEVkZ2U6IHBvc2l0aW9uZWRFbGVtZW50LmFsaWdubWVudEVkZ2UsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIF9wb3NpdGlvbkVsZW1lbnQocHJvcHMsIGhvc3RFbGVtZW50LCBlbGVtZW50VG9Qb3NpdGlvbiwgcHJldmlvdXNQb3NpdGlvbnMpIHtcbiAgICB2YXIgYm91bmRpbmdSZWN0ID0gcHJvcHMuYm91bmRzXG4gICAgICAgID8gX2dldFJlY3RhbmdsZUZyb21JUmVjdChwcm9wcy5ib3VuZHMpXG4gICAgICAgIDogbmV3IFJlY3RhbmdsZSgwLCB3aW5kb3cuaW5uZXJXaWR0aCAtIGdldFNjcm9sbGJhcldpZHRoKCksIDAsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgdmFyIHBvc2l0aW9uZWRFbGVtZW50ID0gX3Bvc2l0aW9uRWxlbWVudFJlbGF0aXZlKHByb3BzLCBlbGVtZW50VG9Qb3NpdGlvbiwgYm91bmRpbmdSZWN0LCBwcmV2aW91c1Bvc2l0aW9ucyk7XG4gICAgcmV0dXJuIF9maW5hbGl6ZVBvc2l0aW9uRGF0YShwb3NpdGlvbmVkRWxlbWVudCwgaG9zdEVsZW1lbnQsIGJvdW5kaW5nUmVjdCwgcHJvcHMuY292ZXJUYXJnZXQpO1xufVxuZnVuY3Rpb24gX3Bvc2l0aW9uQ2FsbG91dChwcm9wcywgaG9zdEVsZW1lbnQsIGNhbGxvdXQsIHByZXZpb3VzUG9zaXRpb25zLCBkb05vdEZpbmFsaXplUmV0dXJuRWRnZSkge1xuICAgIHZhciBiZWFrV2lkdGggPSBwcm9wcy5pc0JlYWtWaXNpYmxlID8gcHJvcHMuYmVha1dpZHRoIHx8IDAgOiAwO1xuICAgIHZhciBnYXAgPSBfY2FsY3VsYXRlQWN0dWFsQmVha1dpZHRoSW5QaXhlbHMoYmVha1dpZHRoKSAvIDIgKyAocHJvcHMuZ2FwU3BhY2UgPyBwcm9wcy5nYXBTcGFjZSA6IDApO1xuICAgIHZhciBwb3NpdGlvblByb3BzID0gcHJvcHM7XG4gICAgcG9zaXRpb25Qcm9wcy5nYXBTcGFjZSA9IGdhcDtcbiAgICB2YXIgYm91bmRpbmdSZWN0ID0gcHJvcHMuYm91bmRzXG4gICAgICAgID8gX2dldFJlY3RhbmdsZUZyb21JUmVjdChwcm9wcy5ib3VuZHMpXG4gICAgICAgIDogbmV3IFJlY3RhbmdsZSgwLCB3aW5kb3cuaW5uZXJXaWR0aCAtIGdldFNjcm9sbGJhcldpZHRoKCksIDAsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgdmFyIHBvc2l0aW9uZWRFbGVtZW50ID0gX3Bvc2l0aW9uRWxlbWVudFJlbGF0aXZlKHBvc2l0aW9uUHJvcHMsIGNhbGxvdXQsIGJvdW5kaW5nUmVjdCwgcHJldmlvdXNQb3NpdGlvbnMpO1xuICAgIHZhciBiZWFrUG9zaXRpb25lZCA9IF9wb3NpdGlvbkJlYWsoYmVha1dpZHRoLCBwb3NpdGlvbmVkRWxlbWVudCk7XG4gICAgdmFyIGZpbmFsaXplZEJlYWtQb3NpdGlvbiA9IF9maW5hbGl6ZUJlYWtQb3NpdGlvbihwb3NpdGlvbmVkRWxlbWVudCwgYmVha1Bvc2l0aW9uZWQsIGJvdW5kaW5nUmVjdCk7XG4gICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBfZmluYWxpemVQb3NpdGlvbkRhdGEocG9zaXRpb25lZEVsZW1lbnQsIGhvc3RFbGVtZW50LCBib3VuZGluZ1JlY3QsIHByb3BzLmNvdmVyVGFyZ2V0LCBkb05vdEZpbmFsaXplUmV0dXJuRWRnZSkpLCB7IGJlYWtQb3NpdGlvbjogZmluYWxpemVkQmVha1Bvc2l0aW9uIH0pO1xufVxuZnVuY3Rpb24gX3Bvc2l0aW9uQ2FyZChwcm9wcywgaG9zdEVsZW1lbnQsIGNhbGxvdXQsIHByZXZpb3VzUG9zaXRpb25zKSB7XG4gICAgcmV0dXJuIF9wb3NpdGlvbkNhbGxvdXQocHJvcHMsIGhvc3RFbGVtZW50LCBjYWxsb3V0LCBwcmV2aW91c1Bvc2l0aW9ucywgdHJ1ZSk7XG59XG4vLyBFTkQgUFJJVkFURSBGVU5DVElPTlNcbmV4cG9ydCB2YXIgX19wb3NpdGlvbmluZ1Rlc3RQYWNrYWdlID0ge1xuICAgIF9maW5hbGl6ZVBvc2l0aW9uRGF0YTogX2ZpbmFsaXplUG9zaXRpb25EYXRhLFxuICAgIF9maW5hbGl6ZUJlYWtQb3NpdGlvbjogX2ZpbmFsaXplQmVha1Bvc2l0aW9uLFxuICAgIF9jYWxjdWxhdGVBY3R1YWxCZWFrV2lkdGhJblBpeGVsczogX2NhbGN1bGF0ZUFjdHVhbEJlYWtXaWR0aEluUGl4ZWxzLFxuICAgIF9wb3NpdGlvbkVsZW1lbnRXaXRoaW5Cb3VuZHM6IF9wb3NpdGlvbkVsZW1lbnRXaXRoaW5Cb3VuZHMsXG4gICAgX3Bvc2l0aW9uQmVhazogX3Bvc2l0aW9uQmVhayxcbiAgICBfZ2V0UG9zaXRpb25EYXRhOiBfZ2V0UG9zaXRpb25EYXRhLFxuICAgIF9nZXRNYXhIZWlnaHRGcm9tVGFyZ2V0UmVjdGFuZ2xlOiBfZ2V0TWF4SGVpZ2h0RnJvbVRhcmdldFJlY3RhbmdsZSxcbn07XG4vKipcbiAqIFVzZWQgdG8gcG9zaXRpb24gYW4gZWxlbWVudCByZWxhdGl2ZSB0byB0aGUgZ2l2ZW4gcG9zaXRpb25pbmcgcHJvcHMuXG4gKiBJZiBwb3NpdGlvbmluZyBoYXMgYmVlbiBjb21wbGV0ZWQgYmVmb3JlLCBwcmV2aW91c1Bvc2l0aW9ucyBjYW4gYmUgcGFzc2VkIHRvIGVuc3VyZSB0aGF0IHRoZSBwb3NpdGlvbmluZyBlbGVtZW50XG4gKiByZXBvc2l0aW9ucyBiYXNlZCBvbiBpdHMgcHJldmlvdXMgdGFyZ2V0cyByYXRoZXIgdGhhbiBzdGFydGluZyB3aXRoIGRpcmVjdGlvbmFsaGludC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvc2l0aW9uRWxlbWVudChwcm9wcywgaG9zdEVsZW1lbnQsIGVsZW1lbnRUb1Bvc2l0aW9uLCBwcmV2aW91c1Bvc2l0aW9ucykge1xuICAgIHJldHVybiBfcG9zaXRpb25FbGVtZW50KHByb3BzLCBob3N0RWxlbWVudCwgZWxlbWVudFRvUG9zaXRpb24sIHByZXZpb3VzUG9zaXRpb25zKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwb3NpdGlvbkNhbGxvdXQocHJvcHMsIGhvc3RFbGVtZW50LCBlbGVtZW50VG9Qb3NpdGlvbiwgcHJldmlvdXNQb3NpdGlvbnMpIHtcbiAgICByZXR1cm4gX3Bvc2l0aW9uQ2FsbG91dChwcm9wcywgaG9zdEVsZW1lbnQsIGVsZW1lbnRUb1Bvc2l0aW9uLCBwcmV2aW91c1Bvc2l0aW9ucyk7XG59XG5leHBvcnQgZnVuY3Rpb24gcG9zaXRpb25DYXJkKHByb3BzLCBob3N0RWxlbWVudCwgZWxlbWVudFRvUG9zaXRpb24sIHByZXZpb3VzUG9zaXRpb25zKSB7XG4gICAgcmV0dXJuIF9wb3NpdGlvbkNhcmQocHJvcHMsIGhvc3RFbGVtZW50LCBlbGVtZW50VG9Qb3NpdGlvbiwgcHJldmlvdXNQb3NpdGlvbnMpO1xufVxuLyoqXG4gKiBHZXRzIHRoZSBtYXhpbXVtIGhlaWdodCB0aGF0IGEgcmVjdGFuZ2xlIGNhbiBoYXZlIGluIG9yZGVyIHRvIGZpdCBiZWxvdyBvciBhYm92ZSBhIHRhcmdldC5cbiAqIElmIHRoZSBkaXJlY3Rpb25hbCBoaW50IHNwZWNpZmllcyBhIGxlZnQgb3IgcmlnaHQgZWRnZSAoaS5lLiBsZWZ0Q2VudGVyKSBpdCB3aWxsIGxpbWl0IHRoZSBoZWlnaHQgdG8gdGhlIHRvcEJvcmRlclxuICogb2YgdGhlIHRhcmdldCBnaXZlbi5cbiAqIElmIG5vIGJvdW5kcyBhcmUgcHJvdmlkZWQgdGhlbiB0aGUgd2luZG93IGlzIHRyZWF0ZWQgYXMgdGhlIGJvdW5kcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE1heEhlaWdodCh0YXJnZXQsIHRhcmdldEVkZ2UsIGdhcFNwYWNlLCBib3VuZHMsIGNvdmVyVGFyZ2V0KSB7XG4gICAgaWYgKGdhcFNwYWNlID09PSB2b2lkIDApIHsgZ2FwU3BhY2UgPSAwOyB9XG4gICAgdmFyIG1vdXNlVGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHZhciBlbGVtZW50VGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHZhciBwb2ludFRhcmdldCA9IHRhcmdldDtcbiAgICB2YXIgdGFyZ2V0UmVjdDtcbiAgICB2YXIgYm91bmRpbmdSZWN0YW5nbGUgPSBib3VuZHNcbiAgICAgICAgPyBfZ2V0UmVjdGFuZ2xlRnJvbUlSZWN0KGJvdW5kcylcbiAgICAgICAgOiBuZXcgUmVjdGFuZ2xlKDAsIHdpbmRvdy5pbm5lcldpZHRoIC0gZ2V0U2Nyb2xsYmFyV2lkdGgoKSwgMCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICB2YXIgbGVmdCA9IHBvaW50VGFyZ2V0LmxlZnQgfHwgcG9pbnRUYXJnZXQueDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICB2YXIgdG9wID0gcG9pbnRUYXJnZXQudG9wIHx8IHBvaW50VGFyZ2V0Lnk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV4dHJhLWJvb2xlYW4tY2FzdCAtLSBtYXkgbm90IGFjdHVhbGx5IGJlIGEgTW91c2VFdmVudFxuICAgIGlmICghIW1vdXNlVGFyZ2V0LnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICB0YXJnZXRSZWN0ID0gbmV3IFJlY3RhbmdsZShtb3VzZVRhcmdldC5jbGllbnRYLCBtb3VzZVRhcmdldC5jbGllbnRYLCBtb3VzZVRhcmdldC5jbGllbnRZLCBtb3VzZVRhcmdldC5jbGllbnRZKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobGVmdCAhPT0gdW5kZWZpbmVkICYmIHRvcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRhcmdldFJlY3QgPSBuZXcgUmVjdGFuZ2xlKGxlZnQsIGxlZnQsIHRvcCwgdG9wKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRhcmdldFJlY3QgPSBfZ2V0UmVjdGFuZ2xlRnJvbUVsZW1lbnQoZWxlbWVudFRhcmdldCk7XG4gICAgfVxuICAgIHJldHVybiBfZ2V0TWF4SGVpZ2h0RnJvbVRhcmdldFJlY3RhbmdsZSh0YXJnZXRSZWN0LCB0YXJnZXRFZGdlLCBnYXBTcGFjZSwgYm91bmRpbmdSZWN0YW5nbGUsIGNvdmVyVGFyZ2V0KTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgb3Bwb3NpdGUgZWRnZSBvZiB0aGUgZ2l2ZW4gUmVjdGFuZ2xlRWRnZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE9wcG9zaXRlRWRnZShlZGdlKSB7XG4gICAgcmV0dXJuIGVkZ2UgKiAtMTtcbn1cbmZ1bmN0aW9uIF9nZXRCb3VuZHNGcm9tVGFyZ2V0V2luZG93KHRhcmdldCwgdGFyZ2V0V2luZG93KSB7XG4gICAgdmFyIHNlZ21lbnRzID0gdW5kZWZpbmVkO1xuICAgIGlmICh0YXJnZXRXaW5kb3cuZ2V0V2luZG93U2VnbWVudHMpIHtcbiAgICAgICAgc2VnbWVudHMgPSB0YXJnZXRXaW5kb3cuZ2V0V2luZG93U2VnbWVudHMoKTtcbiAgICB9XG4gICAgLy8gSWRlbnRpZnkgaWYgd2UncmUgZGVhbGluZyB3aXRoIHNpbmdsZSBzY3JlZW4gc2NlbmFyaW9zLlxuICAgIGlmIChzZWdtZW50cyA9PT0gdW5kZWZpbmVkIHx8IHNlZ21lbnRzLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgcmlnaHQ6IHRhcmdldFdpbmRvdy5pbm5lcldpZHRoLFxuICAgICAgICAgICAgYm90dG9tOiB0YXJnZXRXaW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgICAgICAgICB3aWR0aDogdGFyZ2V0V2luZG93LmlubmVyV2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IHRhcmdldFdpbmRvdy5pbm5lckhlaWdodCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gTG9naWMgZm9yIGRldGVybWluaW5nIGR1YWwgc2NyZWVuIHNjZW5hcmlvcy5cbiAgICB2YXIgeCA9IDA7XG4gICAgdmFyIHkgPSAwO1xuICAgIC8vIElmIHRoZSB0YXJnZXQgaXMgYW4gRWxlbWVudCBnZXQgY29vcmRpbmF0ZXMgZm9yIGl0cyBjZW50ZXIuXG4gICAgaWYgKHRhcmdldCAhPT0gbnVsbCAmJiAhIXRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIHtcbiAgICAgICAgdmFyIGNsaWVudFJlY3QgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHggPSAoY2xpZW50UmVjdC5sZWZ0ICsgY2xpZW50UmVjdC5yaWdodCkgLyAyO1xuICAgICAgICB5ID0gKGNsaWVudFJlY3QudG9wICsgY2xpZW50UmVjdC5ib3R0b20pIC8gMjtcbiAgICB9XG4gICAgLy8gSWYgdGhlIHRhcmdldCBpcyBub3QgbnVsbCBnZXQgeC1heGlzIGFuZCB5LWF4aXMgY29vcmRpbmF0ZXMgZGlyZWN0bHkuXG4gICAgZWxzZSBpZiAodGFyZ2V0ICE9PSBudWxsKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICB4ID0gdGFyZ2V0LmxlZnQgfHwgdGFyZ2V0Lng7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICB5ID0gdGFyZ2V0LnRvcCB8fCB0YXJnZXQueTtcbiAgICB9XG4gICAgdmFyIGJvdW5kcyA9IHsgdG9wOiAwLCBsZWZ0OiAwLCByaWdodDogMCwgYm90dG9tOiAwLCB3aWR0aDogMCwgaGVpZ2h0OiAwIH07XG4gICAgLy8gRGVmaW5lIHdoaWNoIHdpbmRvdyBzZWdtZW50IGFyZSB0aGUgY29vcmRpbmF0ZXMgaW4gYW5kIGNhbGN1bGF0ZSBib3VuZHMgYmFzZWQgb24gdGhhdC5cbiAgICBmb3IgKHZhciBfaSA9IDAsIHNlZ21lbnRzXzEgPSBzZWdtZW50czsgX2kgPCBzZWdtZW50c18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgc2VnbWVudCA9IHNlZ21lbnRzXzFbX2ldO1xuICAgICAgICBpZiAoeCAmJiBzZWdtZW50LmxlZnQgPD0geCAmJiBzZWdtZW50LnJpZ2h0ID49IHggJiYgeSAmJiBzZWdtZW50LnRvcCA8PSB5ICYmIHNlZ21lbnQuYm90dG9tID49IHkpIHtcbiAgICAgICAgICAgIGJvdW5kcyA9IHtcbiAgICAgICAgICAgICAgICB0b3A6IHNlZ21lbnQudG9wLFxuICAgICAgICAgICAgICAgIGxlZnQ6IHNlZ21lbnQubGVmdCxcbiAgICAgICAgICAgICAgICByaWdodDogc2VnbWVudC5yaWdodCxcbiAgICAgICAgICAgICAgICBib3R0b206IHNlZ21lbnQuYm90dG9tLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBzZWdtZW50LndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogc2VnbWVudC5oZWlnaHQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBib3VuZHM7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0Qm91bmRzRnJvbVRhcmdldFdpbmRvdyh0YXJnZXQsIHRhcmdldFdpbmRvdykge1xuICAgIHJldHVybiBfZ2V0Qm91bmRzRnJvbVRhcmdldFdpbmRvdyh0YXJnZXQsIHRhcmdldFdpbmRvdyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb3NpdGlvbmluZy5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBc3luYywgS2V5Q29kZXMsIGRpdlByb3BlcnRpZXMsIGRvZXNFbGVtZW50Q29udGFpbkZvY3VzLCBnZXREb2N1bWVudCwgZ2V0TmF0aXZlUHJvcHMsIG9uLCBnZXRXaW5kb3csIGVsZW1lbnRDb250YWlucywgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuLyoqXG4gKiBUaGlzIGFkZHMgYWNjZXNzaWJpbGl0eSB0byBEaWFsb2cgYW5kIFBhbmVsIGNvbnRyb2xzXG4gKi9cbnZhciBQb3B1cCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUG9wdXAsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUG9wdXAocHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9yb290ID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgICAgIF90aGlzLl9kaXNwb3NhYmxlcyA9IFtdO1xuICAgICAgICBfdGhpcy5fb25LZXlEb3duID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGV2LndoaWNoKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBLZXlDb2Rlcy5lc2NhcGU6XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkRpc21pc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnByb3BzLm9uRGlzbWlzcyhldik7XG4gICAgICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbkZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX2NvbnRhaW5zRm9jdXMgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25CbHVyID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICAvKiogVGhlIHBvcHVwIHNob3VsZCB1cGRhdGUgdGhpcy5fY29udGFpbnNGb2N1cyB3aGVuOlxuICAgICAgICAgICAgICogcmVsYXRlZFRhcmdldCBleGlzdHMgQU5EXG4gICAgICAgICAgICAgKiB0aGUgcmVsYXRlZFRhcmdldCBpcyBub3QgY29udGFpbmVkIHdpdGhpbiB0aGUgcG9wdXAuXG4gICAgICAgICAgICAgKiBJZiB0aGUgcmVsYXRlZFRhcmdldCBpcyB3aXRoaW4gdGhlIHBvcHVwLCB0aGF0IG1lYW5zIHRoZSBwb3B1cCBzdGlsbCBoYXMgZm9jdXNcbiAgICAgICAgICAgICAqIGFuZCBmb2N1c2VkIG1vdmVkIGZyb20gb25lIGVsZW1lbnQgdG8gYW5vdGhlciB3aXRoaW4gdGhlIHBvcHVwLlxuICAgICAgICAgICAgICogSWYgcmVsYXRlZFRhcmdldCBpcyB1bmRlZmluZWQgb3IgbnVsbCB0aGF0IHVzdWFsbHkgbWVhbnMgdGhhdCBhXG4gICAgICAgICAgICAgKiBrZXlib2FyZCBldmVudCBvY2N1cmVkIGFuZCBmb2N1cyBkaWRuJ3QgY2hhbmdlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChfdGhpcy5fcm9vdC5jdXJyZW50ICYmXG4gICAgICAgICAgICAgICAgZXYucmVsYXRlZFRhcmdldCAmJlxuICAgICAgICAgICAgICAgICFlbGVtZW50Q29udGFpbnMoX3RoaXMuX3Jvb3QuY3VycmVudCwgZXYucmVsYXRlZFRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fY29udGFpbnNGb2N1cyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fYXN5bmMgPSBuZXcgQXN5bmMoX3RoaXMpO1xuICAgICAgICBfdGhpcy5zdGF0ZSA9IHsgbmVlZHNWZXJ0aWNhbFNjcm9sbEJhcjogZmFsc2UgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBQb3B1cC5wcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fb3JpZ2luYWxGb2N1c2VkRWxlbWVudCA9IGdldERvY3VtZW50KCkuYWN0aXZlRWxlbWVudDtcbiAgICB9O1xuICAgIFBvcHVwLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Jvb3QuY3VycmVudCkge1xuICAgICAgICAgICAgdGhpcy5fZGlzcG9zYWJsZXMucHVzaChvbih0aGlzLl9yb290LmN1cnJlbnQsICdmb2N1cycsIHRoaXMuX29uRm9jdXMsIHRydWUpLCBvbih0aGlzLl9yb290LmN1cnJlbnQsICdibHVyJywgdGhpcy5fb25CbHVyLCB0cnVlKSk7XG4gICAgICAgICAgICB2YXIgY3VycmVudFdpbmRvdyA9IGdldFdpbmRvdyh0aGlzLl9yb290LmN1cnJlbnQpO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRXaW5kb3cpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kaXNwb3NhYmxlcy5wdXNoKG9uKGN1cnJlbnRXaW5kb3csICdrZXlkb3duJywgdGhpcy5fb25LZXlEb3duKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZG9lc0VsZW1lbnRDb250YWluRm9jdXModGhpcy5fcm9vdC5jdXJyZW50KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5zRm9jdXMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3VwZGF0ZVNjcm9sbEJhckFzeW5jKCk7XG4gICAgfTtcbiAgICBQb3B1cC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl91cGRhdGVTY3JvbGxCYXJBc3luYygpO1xuICAgICAgICB0aGlzLl9hc3luYy5kaXNwb3NlKCk7XG4gICAgfTtcbiAgICBQb3B1cC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZXMuZm9yRWFjaChmdW5jdGlvbiAoZGlzcG9zZSkgeyByZXR1cm4gZGlzcG9zZSgpOyB9KTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnNob3VsZFJlc3RvcmVGb2N1cykge1xuICAgICAgICAgICAgdmFyIF9iID0gdGhpcy5wcm9wcy5vblJlc3RvcmVGb2N1cywgb25SZXN0b3JlRm9jdXMgPSBfYiA9PT0gdm9pZCAwID8gZGVmYXVsdEZvY3VzUmVzdG9yZXIgOiBfYjtcbiAgICAgICAgICAgIG9uUmVzdG9yZUZvY3VzKHtcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEVsZW1lbnQ6IHRoaXMuX29yaWdpbmFsRm9jdXNlZEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgY29udGFpbnNGb2N1czogdGhpcy5fY29udGFpbnNGb2N1cyxcbiAgICAgICAgICAgICAgICBkb2N1bWVudENvbnRhaW5zRm9jdXM6ICgoX2EgPSBnZXREb2N1bWVudCgpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaGFzRm9jdXMoKSkgfHwgZmFsc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBEZS1yZWZlcmVuY2UgRE9NIE5vZGUgdG8gYXZvaWQgcmV0YWlubWVudCB2aWEgdHJhbnNwaWxlZCBjbG9zdXJlIG9mIF9vbktleURvd25cbiAgICAgICAgZGVsZXRlIHRoaXMuX29yaWdpbmFsRm9jdXNlZEVsZW1lbnQ7XG4gICAgfTtcbiAgICBQb3B1cC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCByb2xlID0gX2Eucm9sZSwgY2xhc3NOYW1lID0gX2EuY2xhc3NOYW1lLCBhcmlhTGFiZWwgPSBfYS5hcmlhTGFiZWwsIGFyaWFMYWJlbGxlZEJ5ID0gX2EuYXJpYUxhYmVsbGVkQnksIGFyaWFEZXNjcmliZWRCeSA9IF9hLmFyaWFEZXNjcmliZWRCeSwgc3R5bGUgPSBfYS5zdHlsZTtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9fYXNzaWduKHsgcmVmOiB0aGlzLl9yb290IH0sIGdldE5hdGl2ZVByb3BzKHRoaXMucHJvcHMsIGRpdlByb3BlcnRpZXMpLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lLCByb2xlOiByb2xlLCBcImFyaWEtbGFiZWxcIjogYXJpYUxhYmVsLCBcImFyaWEtbGFiZWxsZWRieVwiOiBhcmlhTGFiZWxsZWRCeSwgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IGFyaWFEZXNjcmliZWRCeSwgb25LZXlEb3duOiB0aGlzLl9vbktleURvd24sIHN0eWxlOiBfX2Fzc2lnbih7IG92ZXJmbG93WTogdGhpcy5zdGF0ZS5uZWVkc1ZlcnRpY2FsU2Nyb2xsQmFyID8gJ3Njcm9sbCcgOiB1bmRlZmluZWQsIG91dGxpbmU6ICdub25lJyB9LCBzdHlsZSkgfSksIHRoaXMucHJvcHMuY2hpbGRyZW4pKTtcbiAgICB9O1xuICAgIFBvcHVwLnByb3RvdHlwZS5fdXBkYXRlU2Nyb2xsQmFyQXN5bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX2FzeW5jLnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5fZ2V0U2Nyb2xsQmFyKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgUG9wdXAucHJvdG90eXBlLl9nZXRTY3JvbGxCYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIElmIG92ZXJmbG93WSBpcyBvdmVycmlkZW4sIGRvbid0IHdhc3RlIHRpbWUgY2FsY3VsYXRpbmcgd2hldGhlciB0aGUgc2Nyb2xsYmFyIGlzIG5lY2Vzc2FyeS5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuc3R5bGUgJiYgdGhpcy5wcm9wcy5zdHlsZS5vdmVyZmxvd1kpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmVlZHNWZXJ0aWNhbFNjcm9sbEJhciA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5fcm9vdCAmJiB0aGlzLl9yb290LmN1cnJlbnQgJiYgdGhpcy5fcm9vdC5jdXJyZW50LmZpcnN0RWxlbWVudENoaWxkKSB7XG4gICAgICAgICAgICAvLyBDbGllbnRIZWlnaHQgcmV0dXJucyB0aGUgY2xpZW50IGhlaWdodCBvZiBhbiBlbGVtZW50IHJvdW5kZWQgdG8gYW5cbiAgICAgICAgICAgIC8vIGludGVnZXIuIE9uIHNvbWUgYnJvd3NlcnMgYXQgZGlmZmVyZW50IHpvb20gbGV2ZWxzIHRoaXMgcm91bmRpbmdcbiAgICAgICAgICAgIC8vIGNhbiBnZW5lcmF0ZSBkaWZmZXJlbnQgcmVzdWx0cyBmb3IgdGhlIHJvb3QgY29udGFpbmVyIGFuZCBjaGlsZCBldmVuXG4gICAgICAgICAgICAvLyB0aG91Z2ggdGhleSBhcmUgdGhlIHNhbWUgaGVpZ2h0LiBUaGlzIGNhdXNlcyB1cyB0byBzaG93IGEgc2Nyb2xsIGJhclxuICAgICAgICAgICAgLy8gd2hlbiBub3QgbmVlZGVkLiBJZGVhbGx5IHdlIHdvdWxkIHVzZSBCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHRcbiAgICAgICAgICAgIC8vIGluc3RlYWQgaG93ZXZlciBzZWVtcyB0aGF0IHRoZSBBUEkgaXMgOTAlIHNsb3dlciB0aGFuIHVzaW5nIENsaWVudEhlaWdodC5cbiAgICAgICAgICAgIC8vIFRoZXJlZm9yZSBpbnN0ZWFkIHdlIHdpbGwgY2FsY3VsYXRlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gaGVpZ2h0cyBhbmRcbiAgICAgICAgICAgIC8vIGFsbG93IGZvciBhIDFweCBkaWZmZXJlbmNlIHRvIHN0aWxsIGJlIGNvbnNpZGVyZWQgb2sgYW5kIG5vdCBzaG93IHRoZVxuICAgICAgICAgICAgLy8gc2Nyb2xsIGJhci5cbiAgICAgICAgICAgIHZhciByb290SGVpZ2h0ID0gdGhpcy5fcm9vdC5jdXJyZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgIHZhciBmaXJzdENoaWxkSGVpZ2h0ID0gdGhpcy5fcm9vdC5jdXJyZW50LmZpcnN0RWxlbWVudENoaWxkLmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgIGlmIChyb290SGVpZ2h0ID4gMCAmJiBmaXJzdENoaWxkSGVpZ2h0ID4gcm9vdEhlaWdodCkge1xuICAgICAgICAgICAgICAgIG5lZWRzVmVydGljYWxTY3JvbGxCYXIgPSBmaXJzdENoaWxkSGVpZ2h0IC0gcm9vdEhlaWdodCA+IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUubmVlZHNWZXJ0aWNhbFNjcm9sbEJhciAhPT0gbmVlZHNWZXJ0aWNhbFNjcm9sbEJhcikge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgbmVlZHNWZXJ0aWNhbFNjcm9sbEJhcjogbmVlZHNWZXJ0aWNhbFNjcm9sbEJhcixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBQb3B1cC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIHNob3VsZFJlc3RvcmVGb2N1czogdHJ1ZSxcbiAgICB9O1xuICAgIHJldHVybiBQb3B1cDtcbn0oUmVhY3QuQ29tcG9uZW50KSk7XG5leHBvcnQgeyBQb3B1cCB9O1xuZnVuY3Rpb24gZGVmYXVsdEZvY3VzUmVzdG9yZXIob3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbEVsZW1lbnQgPSBvcHRpb25zLm9yaWdpbmFsRWxlbWVudCwgY29udGFpbnNGb2N1cyA9IG9wdGlvbnMuY29udGFpbnNGb2N1cztcbiAgICBpZiAob3JpZ2luYWxFbGVtZW50ICYmIGNvbnRhaW5zRm9jdXMgJiYgb3JpZ2luYWxFbGVtZW50ICE9PSB3aW5kb3cpIHtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlIGZvY3VzIG1ldGhvZCBhY3R1YWxseSBleGlzdHNcbiAgICAgICAgLy8gSW4gc29tZSBjYXNlcyB0aGUgb2JqZWN0IG1pZ2h0IGV4aXN0IGJ1dCBub3QgYmUgYSByZWFsIGVsZW1lbnQuXG4gICAgICAgIC8vIFRoaXMgaXMgcHJpbWFyaWx5IGZvciBJRSAxMSBhbmQgc2hvdWxkIGJlIHJlbW92ZWQgb25jZSBJRSAxMSBpcyBubyBsb25nZXIgaW4gdXNlLlxuICAgICAgICBpZiAob3JpZ2luYWxFbGVtZW50LmZvY3VzKSB7XG4gICAgICAgICAgICBvcmlnaW5hbEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBvcHVwLmpzLm1hcCIsInZhciBfYTtcbmltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IERpcmVjdGlvbmFsSGludCB9IGZyb20gJy4uLy4uL2NvbW1vbi9EaXJlY3Rpb25hbEhpbnQnO1xuaW1wb3J0IHsgQXN5bmMsIGNzcywgZGl2UHJvcGVydGllcywgZWxlbWVudENvbnRhaW5zLCBmb2N1c0ZpcnN0Q2hpbGQsIGdldERvY3VtZW50LCBnZXROYXRpdmVQcm9wcywgZ2V0V2luZG93LCBvbiwgc2hhbGxvd0NvbXBhcmUsIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IHBvc2l0aW9uQ2FsbG91dCwgZ2V0TWF4SGVpZ2h0LCBSZWN0YW5nbGVFZGdlLCBwb3NpdGlvbkNhcmQsIGdldEJvdW5kc0Zyb21UYXJnZXRXaW5kb3csIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL3Bvc2l0aW9uaW5nJztcbmltcG9ydCB7IFBvcHVwIH0gZnJvbSAnLi4vLi4vUG9wdXAnO1xuaW1wb3J0IHsgY2xhc3NOYW1lc0Z1bmN0aW9uIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IEFuaW1hdGlvbkNsYXNzTmFtZXMgfSBmcm9tICcuLi8uLi9TdHlsaW5nJztcbnZhciBBTklNQVRJT05TID0gKF9hID0ge30sXG4gICAgX2FbUmVjdGFuZ2xlRWRnZS50b3BdID0gQW5pbWF0aW9uQ2xhc3NOYW1lcy5zbGlkZVVwSW4xMCxcbiAgICBfYVtSZWN0YW5nbGVFZGdlLmJvdHRvbV0gPSBBbmltYXRpb25DbGFzc05hbWVzLnNsaWRlRG93bkluMTAsXG4gICAgX2FbUmVjdGFuZ2xlRWRnZS5sZWZ0XSA9IEFuaW1hdGlvbkNsYXNzTmFtZXMuc2xpZGVMZWZ0SW4xMCxcbiAgICBfYVtSZWN0YW5nbGVFZGdlLnJpZ2h0XSA9IEFuaW1hdGlvbkNsYXNzTmFtZXMuc2xpZGVSaWdodEluMTAsXG4gICAgX2EpO1xudmFyIGdldENsYXNzTmFtZXMgPSBjbGFzc05hbWVzRnVuY3Rpb24oe1xuICAgIGRpc2FibGVDYWNoaW5nOiB0cnVlLFxufSk7XG52YXIgQkVBS19PUklHSU5fUE9TSVRJT04gPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuLy8gTWljcm9zb2Z0IEVkZ2Ugd2lsbCBvdmVyd3JpdGUgaW5saW5lIHN0eWxlcyBpZiB0aGVyZSBpcyBhbiBhbmltYXRpb24gcGVydGFpbmluZyB0byB0aGF0IHN0eWxlLlxuLy8gVG8gaGVscCBlbnN1cmUgdGhhdCBlZGdlIHdpbGwgcmVzcGVjdCB0aGUgb2Zmc2NyZWVuIHN0eWxlIG9wYWNpdHlcbi8vIGZpbHRlciBuZWVkcyB0byBiZSBhZGRlZCBhcyBhbiBhZGRpdGlvbmFsIHdheSB0byBzZXQgb3BhY2l0eS5cbnZhciBPRkZfU0NSRUVOX1NUWUxFID0geyBvcGFjaXR5OiAwLCBmaWx0ZXI6ICdvcGFjaXR5KDApJyB9O1xuLy8gcm9sZSBhbmQgcm9sZSBkZXNjcmlwdGlvbiBnbyBoYW5kLWluLWhhbmQuIEJvdGggd291bGQgYmUgaW5jbHVkZWQgYnkgc3ByZWFkaW5nIGdldE5hdGl2ZVByb3BzIGZvciBhIGJhc2ljIGVsZW1lbnRcbi8vIFRoaXMgY29uc3RhbnQgYXJyYXkgY2FuIGJlIHVzZWQgdG8gZmlsdGVyIHRoZXNlIG91dCBvZiBuYXRpdmUgcHJvcHMgc3ByZWFkIG9uIGNhbGxvdXQgcm9vdCBhbmQgYXBwbHkgdGhlbSB0b2dldGhlciBvblxuLy8gY2FsbG91dE1haW4gKHRoZSBQb3B1cCBjb21wb25lbnQgd2l0aGluIHRoZSBjYWxsb3V0KVxudmFyIEFSSUFfUk9MRV9BVFRSSUJVVEVTID0gWydyb2xlJywgJ2FyaWEtcm9sZWRlc2NyaXB0aW9uJ107XG52YXIgQ2FsbG91dENvbnRlbnRCYXNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDYWxsb3V0Q29udGVudEJhc2UsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ2FsbG91dENvbnRlbnRCYXNlKHByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5faG9zdEVsZW1lbnQgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICAgICAgX3RoaXMuX2NhbGxvdXRFbGVtZW50ID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgICAgIF90aGlzLl9oYXNMaXN0ZW5lcnMgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuX2Rpc3Bvc2FibGVzID0gW107XG4gICAgICAgIF90aGlzLmRpc21pc3MgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBvbkRpc21pc3MgPSBfdGhpcy5wcm9wcy5vbkRpc21pc3M7XG4gICAgICAgICAgICBpZiAob25EaXNtaXNzKSB7XG4gICAgICAgICAgICAgICAgb25EaXNtaXNzKGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX2Rpc21pc3NPblNjcm9sbCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgcHJldmVudERpc21pc3NPbkV2ZW50ID0gX2EucHJldmVudERpc21pc3NPbkV2ZW50LCBwcmV2ZW50RGlzbWlzc09uU2Nyb2xsID0gX2EucHJldmVudERpc21pc3NPblNjcm9sbDtcbiAgICAgICAgICAgIGlmIChfdGhpcy5zdGF0ZS5wb3NpdGlvbnMgJiZcbiAgICAgICAgICAgICAgICAoKHByZXZlbnREaXNtaXNzT25FdmVudCAmJiAhcHJldmVudERpc21pc3NPbkV2ZW50KGV2KSkgfHwgKCFwcmV2ZW50RGlzbWlzc09uRXZlbnQgJiYgIXByZXZlbnREaXNtaXNzT25TY3JvbGwpKSkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9kaXNtaXNzT25DbGlja09yU2Nyb2xsKGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX2Rpc21pc3NPblJlc2l6ZSA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgcHJldmVudERpc21pc3NPbkV2ZW50ID0gX2EucHJldmVudERpc21pc3NPbkV2ZW50LCBwcmV2ZW50RGlzbWlzc09uUmVzaXplID0gX2EucHJldmVudERpc21pc3NPblJlc2l6ZTtcbiAgICAgICAgICAgIGlmICgocHJldmVudERpc21pc3NPbkV2ZW50ICYmICFwcmV2ZW50RGlzbWlzc09uRXZlbnQoZXYpKSB8fCAoIXByZXZlbnREaXNtaXNzT25FdmVudCAmJiAhcHJldmVudERpc21pc3NPblJlc2l6ZSkpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5kaXNtaXNzKGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX2Rpc21pc3NPbkxvc3RGb2N1cyA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgcHJldmVudERpc21pc3NPbkV2ZW50ID0gX2EucHJldmVudERpc21pc3NPbkV2ZW50LCBwcmV2ZW50RGlzbWlzc09uTG9zdEZvY3VzID0gX2EucHJldmVudERpc21pc3NPbkxvc3RGb2N1cztcbiAgICAgICAgICAgIGlmICgocHJldmVudERpc21pc3NPbkV2ZW50ICYmICFwcmV2ZW50RGlzbWlzc09uRXZlbnQoZXYpKSB8fFxuICAgICAgICAgICAgICAgICghcHJldmVudERpc21pc3NPbkV2ZW50ICYmICFwcmV2ZW50RGlzbWlzc09uTG9zdEZvY3VzKSkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9kaXNtaXNzT25DbGlja09yU2Nyb2xsKGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX3NldEluaXRpYWxGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5zZXRJbml0aWFsRm9jdXMgJiZcbiAgICAgICAgICAgICAgICAhX3RoaXMuX2RpZFNldEluaXRpYWxGb2N1cyAmJlxuICAgICAgICAgICAgICAgIF90aGlzLnN0YXRlLnBvc2l0aW9ucyAmJlxuICAgICAgICAgICAgICAgIF90aGlzLl9jYWxsb3V0RWxlbWVudC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2RpZFNldEluaXRpYWxGb2N1cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2FzeW5jLnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7IHJldHVybiBmb2N1c0ZpcnN0Q2hpbGQoX3RoaXMuX2NhbGxvdXRFbGVtZW50LmN1cnJlbnQpOyB9LCBfdGhpcy5fY2FsbG91dEVsZW1lbnQuY3VycmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbkNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX2FkZExpc3RlbmVycygpO1xuICAgICAgICAgICAgaWYgKF90aGlzLnByb3BzLm9uTGF5ZXJNb3VudGVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJvcHMub25MYXllck1vdW50ZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLl91cGRhdGVBc3luY1Bvc2l0aW9uKCk7XG4gICAgICAgICAgICBfdGhpcy5fc2V0SGVpZ2h0T2Zmc2V0RXZlcnlGcmFtZSgpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fZGlzbWlzc09uVGFyZ2V0V2luZG93Qmx1ciA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgcHJldmVudERpc21pc3NPbkV2ZW50ID0gX2EucHJldmVudERpc21pc3NPbkV2ZW50LCBwcmV2ZW50RGlzbWlzc09uTG9zdEZvY3VzID0gX2EucHJldmVudERpc21pc3NPbkxvc3RGb2N1cywgc2hvdWxkRGlzbWlzc09uV2luZG93Rm9jdXMgPSBfYS5zaG91bGREaXNtaXNzT25XaW5kb3dGb2N1cztcbiAgICAgICAgICAgIC8vIERvIG5vdGhpbmdcbiAgICAgICAgICAgIGlmICghc2hvdWxkRGlzbWlzc09uV2luZG93Rm9jdXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKChwcmV2ZW50RGlzbWlzc09uRXZlbnQgJiYgIXByZXZlbnREaXNtaXNzT25FdmVudChldikpIHx8XG4gICAgICAgICAgICAgICAgKCFwcmV2ZW50RGlzbWlzc09uRXZlbnQgJiYgIXByZXZlbnREaXNtaXNzT25Mb3N0Rm9jdXMpKSAmJlxuICAgICAgICAgICAgICAgICFfdGhpcy5fdGFyZ2V0V2luZG93LmRvY3VtZW50Lmhhc0ZvY3VzKCkgJiZcbiAgICAgICAgICAgICAgICBldi5yZWxhdGVkVGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZGlzbWlzcyhldik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9tb3VzZURvd25PblBvcHVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX2lzTW91c2VEb3duT25Qb3B1cCA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9tb3VzZVVwT25Qb3B1cCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl9pc01vdXNlRG93bk9uUG9wdXAgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX2FzeW5jID0gbmV3IEFzeW5jKF90aGlzKTtcbiAgICAgICAgX3RoaXMuX2RpZFNldEluaXRpYWxGb2N1cyA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHBvc2l0aW9uczogdW5kZWZpbmVkLFxuICAgICAgICAgICAgc2xpZGVEaXJlY3Rpb25hbENsYXNzTmFtZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgLy8gQFRPRE8gaXQgbG9va3MgbGlrZSB0aGlzIGlzIG5vdCBldmVuIGJlaW5nIHVzZWQgYW55bW9yZS5cbiAgICAgICAgICAgIGNhbGxvdXRFbGVtZW50UmVjdDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgaGVpZ2h0T2Zmc2V0OiAwLFxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fcG9zaXRpb25BdHRlbXB0cyA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ2FsbG91dENvbnRlbnRCYXNlLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5wcm9wcy5oaWRkZW4pIHtcbiAgICAgICAgICAgIHRoaXMuX3NldEluaXRpYWxGb2N1cygpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9oYXNMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hZGRMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUFzeW5jUG9zaXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9oYXNMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQ2FsbG91dENvbnRlbnRCYXNlLnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiAobmV3UHJvcHMsIG5ld1N0YXRlKSB7XG4gICAgICAgIGlmICghbmV3UHJvcHMuc2hvdWxkVXBkYXRlV2hlbkhpZGRlbiAmJiB0aGlzLnByb3BzLmhpZGRlbiAmJiBuZXdQcm9wcy5oaWRkZW4pIHtcbiAgICAgICAgICAgIC8vIERvIG5vdCB1cGRhdGUgd2hlbiBoaWRkZW4uXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFzaGFsbG93Q29tcGFyZSh0aGlzLnByb3BzLCBuZXdQcm9wcykgfHwgIXNoYWxsb3dDb21wYXJlKHRoaXMuc3RhdGUsIG5ld1N0YXRlKTtcbiAgICB9O1xuICAgIENhbGxvdXRDb250ZW50QmFzZS5wcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fc2V0VGFyZ2V0V2luZG93QW5kRWxlbWVudCh0aGlzLl9nZXRUYXJnZXQoKSk7XG4gICAgfTtcbiAgICBDYWxsb3V0Q29udGVudEJhc2UucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9hc3luYy5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuX2Rpc3Bvc2FibGVzLmZvckVhY2goZnVuY3Rpb24gKGRpc3Bvc2UpIHsgcmV0dXJuIGRpc3Bvc2UoKTsgfSk7XG4gICAgfTtcbiAgICBDYWxsb3V0Q29udGVudEJhc2UucHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlID0gZnVuY3Rpb24gKG5ld1Byb3BzKSB7XG4gICAgICAgIC8vIElmIHRoZSB0YXJnZXQgZWxlbWVudCBjaGFuZ2VkLCBmaW5kIHRoZSBuZXcgb25lLiBJZiB3ZSBhcmUgdHJhY2tpbmcgdGFyZ2V0IHdpdGggY2xhc3MgbmFtZSwgYWx3YXlzIGZpbmQgZWxlbWVudFxuICAgICAgICAvLyBiZWNhdXNlIHdlIGRvIG5vdCBrbm93IGlmIGZhYnJpYyBoYXMgcmVuZGVyZWQgYSBuZXcgZWxlbWVudCBhbmQgZGlzcG9zZWQgdGhlIG9sZCBlbGVtZW50LlxuICAgICAgICB2YXIgbmV3VGFyZ2V0ID0gdGhpcy5fZ2V0VGFyZ2V0KG5ld1Byb3BzKTtcbiAgICAgICAgdmFyIG9sZFRhcmdldCA9IHRoaXMuX2dldFRhcmdldCgpO1xuICAgICAgICBpZiAoKG5ld1RhcmdldCAhPT0gb2xkVGFyZ2V0IHx8IHR5cGVvZiBuZXdUYXJnZXQgPT09ICdzdHJpbmcnIHx8IG5ld1RhcmdldCBpbnN0YW5jZW9mIFN0cmluZykgJiZcbiAgICAgICAgICAgICF0aGlzLl9ibG9ja1Jlc2V0SGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLl9tYXhIZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLl9zZXRUYXJnZXRXaW5kb3dBbmRFbGVtZW50KG5ld1RhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld1Byb3BzLmdhcFNwYWNlICE9PSB0aGlzLnByb3BzLmdhcFNwYWNlIHx8IHRoaXMucHJvcHMuYmVha1dpZHRoICE9PSBuZXdQcm9wcy5iZWFrV2lkdGgpIHtcbiAgICAgICAgICAgIHRoaXMuX21heEhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3UHJvcHMuZmluYWxIZWlnaHQgIT09IHRoaXMucHJvcHMuZmluYWxIZWlnaHQpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldEhlaWdodE9mZnNldEV2ZXJ5RnJhbWUoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbnN1cmUgcG9zaXRpb25pbmcgaXMgcmVjYWxjdWxhdGVkIHdoZW4gd2UgYXJlIGFib3V0IHRvIHNob3cgYSBwZXJzaXN0ZWQgbWVudS5cbiAgICAgICAgaWYgKHRoaXMuX2RpZFBvc2l0aW9uUHJvcHNDaGFuZ2UobmV3UHJvcHMsIHRoaXMucHJvcHMpKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXhIZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAvLyBUYXJnZXQgbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgd2hpbGUgaGlkZGVuLlxuICAgICAgICAgICAgdGhpcy5fc2V0VGFyZ2V0V2luZG93QW5kRWxlbWVudChuZXdUYXJnZXQpO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25zOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX2RpZFNldEluaXRpYWxGb2N1cyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fYm91bmRzID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Jsb2NrUmVzZXRIZWlnaHQgPSBmYWxzZTtcbiAgICB9O1xuICAgIENhbGxvdXRDb250ZW50QmFzZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5wcm9wcy5oaWRkZW4pIHtcbiAgICAgICAgICAgIHRoaXMuX29uQ29tcG9uZW50RGlkTW91bnQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ2FsbG91dENvbnRlbnRCYXNlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIElmIHRoZXJlIGlzIG5vIHRhcmdldCB3aW5kb3cgdGhlbiB3ZSBhcmUgbGlrZWx5IGluIHNlcnZlciBzaWRlIHJlbmRlcmluZyBhbmQgd2Ugc2hvdWxkIG5vdCByZW5kZXIgYW55dGhpbmcuXG4gICAgICAgIGlmICghdGhpcy5fdGFyZ2V0V2luZG93KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy5wcm9wcy50YXJnZXQ7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIHN0eWxlcyA9IF9hLnN0eWxlcywgc3R5bGUgPSBfYS5zdHlsZSwgYXJpYUxhYmVsID0gX2EuYXJpYUxhYmVsLCBhcmlhRGVzY3JpYmVkQnkgPSBfYS5hcmlhRGVzY3JpYmVkQnksIGFyaWFMYWJlbGxlZEJ5ID0gX2EuYXJpYUxhYmVsbGVkQnksIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSwgaXNCZWFrVmlzaWJsZSA9IF9hLmlzQmVha1Zpc2libGUsIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sIGJlYWtXaWR0aCA9IF9hLmJlYWtXaWR0aCwgY2FsbG91dFdpZHRoID0gX2EuY2FsbG91dFdpZHRoLCBjYWxsb3V0TWF4V2lkdGggPSBfYS5jYWxsb3V0TWF4V2lkdGgsIGZpbmFsSGVpZ2h0ID0gX2EuZmluYWxIZWlnaHQsIF9iID0gX2EuaGlkZU92ZXJmbG93LCBoaWRlT3ZlcmZsb3cgPSBfYiA9PT0gdm9pZCAwID8gISFmaW5hbEhlaWdodCA6IF9iLCBiYWNrZ3JvdW5kQ29sb3IgPSBfYS5iYWNrZ3JvdW5kQ29sb3IsIGNhbGxvdXRNYXhIZWlnaHQgPSBfYS5jYWxsb3V0TWF4SGVpZ2h0LCBvblNjcm9sbCA9IF9hLm9uU2Nyb2xsLCBcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIF9jID0gX2Euc2hvdWxkUmVzdG9yZUZvY3VzLCBcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIHNob3VsZFJlc3RvcmVGb2N1cyA9IF9jID09PSB2b2lkIDAgPyB0cnVlIDogX2M7XG4gICAgICAgIHRhcmdldCA9IHRoaXMuX2dldFRhcmdldCgpO1xuICAgICAgICB2YXIgcG9zaXRpb25zID0gdGhpcy5zdGF0ZS5wb3NpdGlvbnM7XG4gICAgICAgIHZhciBnZXRDb250ZW50TWF4SGVpZ2h0ID0gdGhpcy5fZ2V0TWF4SGVpZ2h0KClcbiAgICAgICAgICAgID8gdGhpcy5fZ2V0TWF4SGVpZ2h0KCkgKyB0aGlzLnN0YXRlLmhlaWdodE9mZnNldFxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBjb250ZW50TWF4SGVpZ2h0ID0gY2FsbG91dE1heEhlaWdodCAmJiBnZXRDb250ZW50TWF4SGVpZ2h0ICYmIGNhbGxvdXRNYXhIZWlnaHQgPCBnZXRDb250ZW50TWF4SGVpZ2h0XG4gICAgICAgICAgICA/IGNhbGxvdXRNYXhIZWlnaHRcbiAgICAgICAgICAgIDogZ2V0Q29udGVudE1heEhlaWdodDtcbiAgICAgICAgdmFyIG92ZXJmbG93WUhpZGRlbiA9IGhpZGVPdmVyZmxvdztcbiAgICAgICAgdmFyIGJlYWtWaXNpYmxlID0gaXNCZWFrVmlzaWJsZSAmJiAhIXRhcmdldDtcbiAgICAgICAgdGhpcy5fY2xhc3NOYW1lcyA9IGdldENsYXNzTmFtZXMoc3R5bGVzLCB7XG4gICAgICAgICAgICB0aGVtZTogdGhpcy5wcm9wcy50aGVtZSxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICAgICAgb3ZlcmZsb3dZSGlkZGVuOiBvdmVyZmxvd1lIaWRkZW4sXG4gICAgICAgICAgICBjYWxsb3V0V2lkdGg6IGNhbGxvdXRXaWR0aCxcbiAgICAgICAgICAgIHBvc2l0aW9uczogcG9zaXRpb25zLFxuICAgICAgICAgICAgYmVha1dpZHRoOiBiZWFrV2lkdGgsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgIGNhbGxvdXRNYXhXaWR0aDogY2FsbG91dE1heFdpZHRoLFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIG92ZXJmbG93U3R5bGUgPSBfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3R5bGUpLCB7IG1heEhlaWdodDogY29udGVudE1heEhlaWdodCB9KSwgKG92ZXJmbG93WUhpZGRlbiAmJiB7IG92ZXJmbG93WTogJ2hpZGRlbicgfSkpO1xuICAgICAgICB2YXIgdmlzaWJpbGl0eVN0eWxlID0gdGhpcy5wcm9wcy5oaWRkZW4gPyB7IHZpc2liaWxpdHk6ICdoaWRkZW4nIH0gOiB1bmRlZmluZWQ7XG4gICAgICAgIC8vIFJlYWN0LkNTU1Byb3BlcnRpZXMgZG9lcyBub3QgdW5kZXJzdGFuZCBJUmF3U3R5bGUsIHNvIHRoZSBpbmxpbmUgYW5pbWF0aW9ucyB3aWxsIG5lZWQgdG8gYmUgY2FzdCBhcyBhbnkgZm9yIG5vdy5cbiAgICAgICAgdmFyIGNvbnRlbnQgPSAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHJlZjogdGhpcy5faG9zdEVsZW1lbnQsIGNsYXNzTmFtZTogdGhpcy5fY2xhc3NOYW1lcy5jb250YWluZXIsIHN0eWxlOiB2aXNpYmlsaXR5U3R5bGUgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX19hc3NpZ24oe30sIGdldE5hdGl2ZVByb3BzKHRoaXMucHJvcHMsIGRpdlByb3BlcnRpZXMsIEFSSUFfUk9MRV9BVFRSSUJVVEVTKSwgeyBjbGFzc05hbWU6IGNzcyh0aGlzLl9jbGFzc05hbWVzLnJvb3QsIHBvc2l0aW9ucyAmJiBwb3NpdGlvbnMudGFyZ2V0RWRnZSAmJiBBTklNQVRJT05TW3Bvc2l0aW9ucy50YXJnZXRFZGdlXSksIHN0eWxlOiBwb3NpdGlvbnMgPyBwb3NpdGlvbnMuZWxlbWVudFBvc2l0aW9uIDogT0ZGX1NDUkVFTl9TVFlMRSwgXG4gICAgICAgICAgICAgICAgLy8gU2FmYXJpIGFuZCBGaXJlZm94IG9uIE1hYyBPUyByZXF1aXJlcyB0aGlzIHRvIGJhY2stc3RvcCBjbGljayBldmVudHMgc28gZm9jdXMgcmVtYWlucyBpbiB0aGUgQ2FsbG91dC5cbiAgICAgICAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2J1dHRvbiNDbGlja2luZ19hbmRfZm9jdXNcbiAgICAgICAgICAgICAgICB0YWJJbmRleDogLTEsIHJlZjogdGhpcy5fY2FsbG91dEVsZW1lbnQgfSksXG4gICAgICAgICAgICAgICAgYmVha1Zpc2libGUgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogdGhpcy5fY2xhc3NOYW1lcy5iZWFrLCBzdHlsZTogdGhpcy5fZ2V0QmVha1Bvc2l0aW9uKCkgfSksXG4gICAgICAgICAgICAgICAgYmVha1Zpc2libGUgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogdGhpcy5fY2xhc3NOYW1lcy5iZWFrQ3VydGFpbiB9KSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFBvcHVwLCBfX2Fzc2lnbih7fSwgZ2V0TmF0aXZlUHJvcHModGhpcy5wcm9wcywgQVJJQV9ST0xFX0FUVFJJQlVURVMpLCB7IGFyaWFMYWJlbDogYXJpYUxhYmVsLCBvblJlc3RvcmVGb2N1czogdGhpcy5wcm9wcy5vblJlc3RvcmVGb2N1cywgYXJpYURlc2NyaWJlZEJ5OiBhcmlhRGVzY3JpYmVkQnksIGFyaWFMYWJlbGxlZEJ5OiBhcmlhTGFiZWxsZWRCeSwgY2xhc3NOYW1lOiB0aGlzLl9jbGFzc05hbWVzLmNhbGxvdXRNYWluLCBvbkRpc21pc3M6IHRoaXMuZGlzbWlzcywgb25TY3JvbGw6IG9uU2Nyb2xsLCBzaG91bGRSZXN0b3JlRm9jdXM6IHNob3VsZFJlc3RvcmVGb2N1cywgc3R5bGU6IG92ZXJmbG93U3R5bGUsIG9uTW91c2VEb3duOiB0aGlzLl9tb3VzZURvd25PblBvcHVwLCBvbk1vdXNlVXA6IHRoaXMuX21vdXNlVXBPblBvcHVwIH0pLCBjaGlsZHJlbikpKSk7XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH07XG4gICAgQ2FsbG91dENvbnRlbnRCYXNlLnByb3RvdHlwZS5fZGlzbWlzc09uQ2xpY2tPclNjcm9sbCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gZXYudGFyZ2V0O1xuICAgICAgICB2YXIgaXNFdmVudFRhcmdldE91dHNpZGVDYWxsb3V0ID0gdGhpcy5faG9zdEVsZW1lbnQuY3VycmVudCAmJiAhZWxlbWVudENvbnRhaW5zKHRoaXMuX2hvc3RFbGVtZW50LmN1cnJlbnQsIHRhcmdldCk7XG4gICAgICAgIC8vIElmIG1vdXNlIGlzIHByZXNzZWQgZG93biBvbiBjYWxsb3V0IGJ1dCBtb3ZlZCBvdXRzaWRlIHRoZW4gcmVsZWFzZWQsIGRvbid0IGRpc21pc3MgdGhlIGNhbGxvdXQuXG4gICAgICAgIGlmIChpc0V2ZW50VGFyZ2V0T3V0c2lkZUNhbGxvdXQgJiYgdGhpcy5faXNNb3VzZURvd25PblBvcHVwKSB7XG4gICAgICAgICAgICB0aGlzLl9pc01vdXNlRG93bk9uUG9wdXAgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKCF0aGlzLl90YXJnZXQgJiYgaXNFdmVudFRhcmdldE91dHNpZGVDYWxsb3V0KSB8fFxuICAgICAgICAgICAgKGV2LnRhcmdldCAhPT0gdGhpcy5fdGFyZ2V0V2luZG93ICYmXG4gICAgICAgICAgICAgICAgaXNFdmVudFRhcmdldE91dHNpZGVDYWxsb3V0ICYmXG4gICAgICAgICAgICAgICAgKHRoaXMuX3RhcmdldC5zdG9wUHJvcGFnYXRpb24gfHxcbiAgICAgICAgICAgICAgICAgICAgIXRoaXMuX3RhcmdldCB8fFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmRpc21pc3NPblRhcmdldENsaWNrIHx8XG4gICAgICAgICAgICAgICAgICAgICh0YXJnZXQgIT09IHRoaXMuX3RhcmdldCAmJiAhZWxlbWVudENvbnRhaW5zKHRoaXMuX3RhcmdldCwgdGFyZ2V0KSkpKSkge1xuICAgICAgICAgICAgdGhpcy5kaXNtaXNzKGV2KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ2FsbG91dENvbnRlbnRCYXNlLnByb3RvdHlwZS5fYWRkTGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvLyBUaGlzIGlzIGFkZGVkIHNvIHRoZSBjYWxsb3V0IHdpbGwgZGlzbWlzcyB3aGVuIHRoZSB3aW5kb3cgaXMgc2Nyb2xsZWRcbiAgICAgICAgLy8gYnV0IG5vdCB3aGVuIHNvbWV0aGluZyBpbnNpZGUgdGhlIGNhbGxvdXQgaXMgc2Nyb2xsZWQuIFRoZSBkZWxheSBzZWVtc1xuICAgICAgICAvLyB0byBiZSByZXF1aXJlZCB0byBhdm9pZCBSZWFjdCBmaXJpbmcgYW4gYXN5bmMgZm9jdXMgZXZlbnQgaW4gSUUgZnJvbVxuICAgICAgICAvLyB0aGUgdGFyZ2V0IGNoYW5naW5nIGZvY3VzIHF1aWNrbHkgcHJpb3IgdG8gcmVuZGVyaW5nIHRoZSBjYWxsb3V0LlxuICAgICAgICB0aGlzLl9hc3luYy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl9kaXNwb3NhYmxlcy5wdXNoKG9uKF90aGlzLl90YXJnZXRXaW5kb3csICdzY3JvbGwnLCBfdGhpcy5fZGlzbWlzc09uU2Nyb2xsLCB0cnVlKSwgb24oX3RoaXMuX3RhcmdldFdpbmRvdywgJ3Jlc2l6ZScsIF90aGlzLl9kaXNtaXNzT25SZXNpemUsIHRydWUpLCBvbihfdGhpcy5fdGFyZ2V0V2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgJ2ZvY3VzJywgX3RoaXMuX2Rpc21pc3NPbkxvc3RGb2N1cywgdHJ1ZSksIG9uKF90aGlzLl90YXJnZXRXaW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCAnY2xpY2snLCBfdGhpcy5fZGlzbWlzc09uTG9zdEZvY3VzLCB0cnVlKSwgb24oX3RoaXMuX3RhcmdldFdpbmRvdywgJ2JsdXInLCBfdGhpcy5fZGlzbWlzc09uVGFyZ2V0V2luZG93Qmx1ciwgdHJ1ZSkpO1xuICAgICAgICAgICAgX3RoaXMuX2hhc0xpc3RlbmVycyA9IHRydWU7XG4gICAgICAgIH0sIDApO1xuICAgIH07XG4gICAgQ2FsbG91dENvbnRlbnRCYXNlLnByb3RvdHlwZS5fcmVtb3ZlTGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9kaXNwb3NhYmxlcy5mb3JFYWNoKGZ1bmN0aW9uIChkaXNwb3NlKSB7IHJldHVybiBkaXNwb3NlKCk7IH0pO1xuICAgICAgICB0aGlzLl9kaXNwb3NhYmxlcyA9IFtdO1xuICAgICAgICB0aGlzLl9oYXNMaXN0ZW5lcnMgPSBmYWxzZTtcbiAgICB9O1xuICAgIENhbGxvdXRDb250ZW50QmFzZS5wcm90b3R5cGUuX3VwZGF0ZUFzeW5jUG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX2FzeW5jLnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fdXBkYXRlUG9zaXRpb24oKTsgfSwgdGhpcy5fY2FsbG91dEVsZW1lbnQuY3VycmVudCk7XG4gICAgfTtcbiAgICBDYWxsb3V0Q29udGVudEJhc2UucHJvdG90eXBlLl9nZXRCZWFrUG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwb3NpdGlvbnMgPSB0aGlzLnN0YXRlLnBvc2l0aW9ucztcbiAgICAgICAgdmFyIGJlYWtQb3N0aW9uU3R5bGUgPSBfX2Fzc2lnbih7fSwgKHBvc2l0aW9ucyAmJiBwb3NpdGlvbnMuYmVha1Bvc2l0aW9uID8gcG9zaXRpb25zLmJlYWtQb3NpdGlvbi5lbGVtZW50UG9zaXRpb24gOiBudWxsKSk7XG4gICAgICAgIGlmICghYmVha1Bvc3Rpb25TdHlsZS50b3AgJiYgIWJlYWtQb3N0aW9uU3R5bGUuYm90dG9tICYmICFiZWFrUG9zdGlvblN0eWxlLmxlZnQgJiYgIWJlYWtQb3N0aW9uU3R5bGUucmlnaHQpIHtcbiAgICAgICAgICAgIGJlYWtQb3N0aW9uU3R5bGUubGVmdCA9IEJFQUtfT1JJR0lOX1BPU0lUSU9OLmxlZnQ7XG4gICAgICAgICAgICBiZWFrUG9zdGlvblN0eWxlLnRvcCA9IEJFQUtfT1JJR0lOX1BPU0lUSU9OLnRvcDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmVha1Bvc3Rpb25TdHlsZTtcbiAgICB9O1xuICAgIENhbGxvdXRDb250ZW50QmFzZS5wcm90b3R5cGUuX3VwZGF0ZVBvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUcnkgdG8gdXBkYXRlIHRoZSB0YXJnZXQsIHBhZ2UgbWlnaHQgaGF2ZSBjaGFuZ2VkXG4gICAgICAgIHRoaXMuX3NldFRhcmdldFdpbmRvd0FuZEVsZW1lbnQodGhpcy5fZ2V0VGFyZ2V0KCkpO1xuICAgICAgICB2YXIgcG9zaXRpb25zID0gdGhpcy5zdGF0ZS5wb3NpdGlvbnM7XG4gICAgICAgIHZhciBob3N0RWxlbWVudCA9IHRoaXMuX2hvc3RFbGVtZW50LmN1cnJlbnQ7XG4gICAgICAgIHZhciBjYWxsb3V0RWxlbWVudCA9IHRoaXMuX2NhbGxvdXRFbGVtZW50LmN1cnJlbnQ7XG4gICAgICAgIC8vIElmIHdlIGV4cGVjdCBhIHRhcmdldCBlbGVtZW50IHRvIHBvc2l0aW9uIGFnYWluc3QsIHdlIG5lZWQgdG8gd2FpdCB1bnRpbCBgdGhpcy5fdGFyZ2V0YCBpcyByZXNvbHZlZC4gT3RoZXJ3aXNlXG4gICAgICAgIC8vIHdlIGNhbiB0cnkgdG8gcG9zaXRpb24uXG4gICAgICAgIHZhciBleHBlY3RzVGFyZ2V0ID0gISF0aGlzLnByb3BzLnRhcmdldDtcbiAgICAgICAgaWYgKGhvc3RFbGVtZW50ICYmIGNhbGxvdXRFbGVtZW50ICYmICghZXhwZWN0c1RhcmdldCB8fCB0aGlzLl90YXJnZXQpKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudFByb3BzID0gX19hc3NpZ24oe30sIHRoaXMucHJvcHMpO1xuICAgICAgICAgICAgY3VycmVudFByb3BzLmJvdW5kcyA9IHRoaXMuX2dldEJvdW5kcygpO1xuICAgICAgICAgICAgY3VycmVudFByb3BzLnRhcmdldCA9IHRoaXMuX3RhcmdldDtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIGEgZmluYWxIZWlnaHQgZ2l2ZW4gdGhlbiB3ZSBhc3N1bWUgdGhhdCB0aGUgdXNlciBrbm93cyBhbmQgd2lsbCBoYW5kbGVcbiAgICAgICAgICAgIC8vIGFkZGl0aW9uYWwgcG9zaXRpb25pbmcgYWRqdXN0bWVudHMgc28gd2Ugc2hvdWxkIGNhbGwgcG9zaXRpb25DYXJkXG4gICAgICAgICAgICB2YXIgbmV3UG9zaXRpb25zID0gdGhpcy5wcm9wcy5maW5hbEhlaWdodFxuICAgICAgICAgICAgICAgID8gcG9zaXRpb25DYXJkKGN1cnJlbnRQcm9wcywgaG9zdEVsZW1lbnQsIGNhbGxvdXRFbGVtZW50LCBwb3NpdGlvbnMpXG4gICAgICAgICAgICAgICAgOiBwb3NpdGlvbkNhbGxvdXQoY3VycmVudFByb3BzLCBob3N0RWxlbWVudCwgY2FsbG91dEVsZW1lbnQsIHBvc2l0aW9ucyk7XG4gICAgICAgICAgICAvLyBTZXQgdGhlIG5ldyBwb3NpdGlvbiBvbmx5IHdoZW4gdGhlIHBvc2l0aW9ucyBhcmUgbm90IGV4aXN0cyBvciBvbmUgb2YgdGhlIG5ldyBjYWxsb3V0IHBvc2l0aW9ucyBhcmUgZGlmZmVyZW50LlxuICAgICAgICAgICAgLy8gVGhlIHBvc2l0aW9uIHNob3VsZCBub3QgY2hhbmdlIGlmIHRoZSBwb3NpdGlvbiBpcyB3aXRoaW4gMiBkZWNpbWFsIHBsYWNlcy5cbiAgICAgICAgICAgIGlmICgoIXBvc2l0aW9ucyAmJiBuZXdQb3NpdGlvbnMpIHx8XG4gICAgICAgICAgICAgICAgKHBvc2l0aW9ucyAmJiBuZXdQb3NpdGlvbnMgJiYgIXRoaXMuX2FyZVBvc2l0aW9uc0VxdWFsKHBvc2l0aW9ucywgbmV3UG9zaXRpb25zKSAmJiB0aGlzLl9wb3NpdGlvbkF0dGVtcHRzIDwgNSkpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBzaG91bGQgbm90IHJlcG9zaXRpb24gdGhlIGNhbGxvdXQgbW9yZSB0aGFuIGEgZmV3IHRpbWVzLCBpZiBpdCBpcyB0aGVuIHRoZSBjb250ZW50IGlzIGxpa2VseSByZXNpemluZ1xuICAgICAgICAgICAgICAgIC8vIGFuZCB3ZSBzaG91bGQgc3RvcCB0cnlpbmcgdG8gcmVwb3NpdGlvbiB0byBwcmV2ZW50IGEgc3RhY2sgb3ZlcmZsb3cuXG4gICAgICAgICAgICAgICAgdGhpcy5fcG9zaXRpb25BdHRlbXB0cysrO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbnM6IG5ld1Bvc2l0aW9ucyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3Bvc2l0aW9uQXR0ZW1wdHMgPiAwKSB7XG4gICAgICAgICAgICAgICAgLy8gT25seSBjYWxsIHRoZSBvblBvc2l0aW9uZWQgY2FsbGJhY2sgaWYgdGhlIGNhbGxvdXQgaGFzIGJlZW4gcmUtcG9zaXRpb25lZCBhdCBsZWFzdCBvbmNlLlxuICAgICAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uQXR0ZW1wdHMgPSAwO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm9uUG9zaXRpb25lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uUG9zaXRpb25lZCh0aGlzLnN0YXRlLnBvc2l0aW9ucyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBDYWxsb3V0Q29udGVudEJhc2UucHJvdG90eXBlLl9nZXRCb3VuZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5fYm91bmRzKSB7XG4gICAgICAgICAgICB2YXIgYm91bmRzID0gdGhpcy5wcm9wcy5ib3VuZHM7XG4gICAgICAgICAgICB2YXIgY3VycmVudEJvdW5kcyA9IHR5cGVvZiBib3VuZHMgPT09ICdmdW5jdGlvbicgPyBib3VuZHModGhpcy5wcm9wcy50YXJnZXQsIHRoaXMuX3RhcmdldFdpbmRvdykgOiBib3VuZHM7XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRCb3VuZHMpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50Qm91bmRzID0gZ2V0Qm91bmRzRnJvbVRhcmdldFdpbmRvdyh0aGlzLl90YXJnZXQsIHRoaXMuX3RhcmdldFdpbmRvdyk7XG4gICAgICAgICAgICAgICAgY3VycmVudEJvdW5kcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdG9wOiBjdXJyZW50Qm91bmRzLnRvcCArIHRoaXMucHJvcHMubWluUGFnZVBhZGRpbmcsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IGN1cnJlbnRCb3VuZHMubGVmdCArIHRoaXMucHJvcHMubWluUGFnZVBhZGRpbmcsXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBjdXJyZW50Qm91bmRzLnJpZ2h0IC0gdGhpcy5wcm9wcy5taW5QYWdlUGFkZGluZyxcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiBjdXJyZW50Qm91bmRzLmJvdHRvbSAtIHRoaXMucHJvcHMubWluUGFnZVBhZGRpbmcsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBjdXJyZW50Qm91bmRzLndpZHRoIC0gdGhpcy5wcm9wcy5taW5QYWdlUGFkZGluZyAqIDIsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogY3VycmVudEJvdW5kcy5oZWlnaHQgLSB0aGlzLnByb3BzLm1pblBhZ2VQYWRkaW5nICogMixcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fYm91bmRzID0gY3VycmVudEJvdW5kcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fYm91bmRzO1xuICAgIH07XG4gICAgLy8gTWF4IGhlaWdodCBzaG91bGQgcmVtYWluIGFzIHN5bmNocm9ub3VzIGFzIHBvc3NpYmxlLCB3aGljaCBpcyB3aHkgaXQgaXMgbm90IGRvbmUgdXNpbmcgc2V0IHN0YXRlLlxuICAgIC8vIEl0IG5lZWRzIHRvIGJlIHN5bmNocm9ub3VzIHNpbmNlIGl0IHdpbGwgaW1wYWN0IHRoZSB1bHRpbWF0ZSBwb3NpdGlvbiBvZiB0aGUgY2FsbG91dC5cbiAgICBDYWxsb3V0Q29udGVudEJhc2UucHJvdG90eXBlLl9nZXRNYXhIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5fbWF4SGVpZ2h0KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5kaXJlY3Rpb25hbEhpbnRGaXhlZCAmJiB0aGlzLl90YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgYmVha1dpZHRoID0gdGhpcy5wcm9wcy5pc0JlYWtWaXNpYmxlID8gdGhpcy5wcm9wcy5iZWFrV2lkdGggOiAwO1xuICAgICAgICAgICAgICAgIHZhciBnYXBTcGFjZSA9IHRoaXMucHJvcHMuZ2FwU3BhY2UgPyB0aGlzLnByb3BzLmdhcFNwYWNlIDogMDtcbiAgICAgICAgICAgICAgICAvLyBTaW5jZSB0aGUgY2FsbG91dCBjYW5ub3QgbWVhc3VyZSBpdCdzIGJvcmRlciBzaXplIGl0IG11c3QgYmUgdGFrZW4gaW50byBhY2NvdW50IGhlcmUuIE90aGVyd2lzZSBpdCB3aWxsXG4gICAgICAgICAgICAgICAgLy8gb3ZlcmxhcCB3aXRoIHRoZSB0YXJnZXQuXG4gICAgICAgICAgICAgICAgdmFyIHRvdGFsR2FwXzEgPSBnYXBTcGFjZSArIGJlYWtXaWR0aDtcbiAgICAgICAgICAgICAgICB0aGlzLl9hc3luYy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX3RhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX21heEhlaWdodCA9IGdldE1heEhlaWdodChfdGhpcy5fdGFyZ2V0LCBfdGhpcy5wcm9wcy5kaXJlY3Rpb25hbEhpbnQsIHRvdGFsR2FwXzEsIF90aGlzLl9nZXRCb3VuZHMoKSwgX3RoaXMucHJvcHMuY292ZXJUYXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2Jsb2NrUmVzZXRIZWlnaHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHRoaXMuX3RhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXhIZWlnaHQgPSB0aGlzLl9nZXRCb3VuZHMoKS5oZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX21heEhlaWdodDtcbiAgICB9O1xuICAgIENhbGxvdXRDb250ZW50QmFzZS5wcm90b3R5cGUuX2FyZVBvc2l0aW9uc0VxdWFsID0gZnVuY3Rpb24gKHBvc2l0aW9ucywgbmV3UG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9jb21wYXJlUG9zaXRpb25zKHBvc2l0aW9ucy5lbGVtZW50UG9zaXRpb24sIG5ld1Bvc2l0aW9uLmVsZW1lbnRQb3NpdGlvbikgJiZcbiAgICAgICAgICAgIHRoaXMuX2NvbXBhcmVQb3NpdGlvbnMocG9zaXRpb25zLmJlYWtQb3NpdGlvbi5lbGVtZW50UG9zaXRpb24sIG5ld1Bvc2l0aW9uLmJlYWtQb3NpdGlvbi5lbGVtZW50UG9zaXRpb24pKTtcbiAgICB9O1xuICAgIENhbGxvdXRDb250ZW50QmFzZS5wcm90b3R5cGUuX2NvbXBhcmVQb3NpdGlvbnMgPSBmdW5jdGlvbiAob2xkUG9zaXRpb25zLCBuZXdQb3NpdGlvbnMpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG5ld1Bvc2l0aW9ucykge1xuICAgICAgICAgICAgaWYgKG5ld1Bvc2l0aW9ucy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9sZFBvc2l0aW9uRWRnZSA9IG9sZFBvc2l0aW9uc1trZXldO1xuICAgICAgICAgICAgICAgIHZhciBuZXdQb3NpdGlvbkVkZ2UgPSBuZXdQb3NpdGlvbnNba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAob2xkUG9zaXRpb25FZGdlICE9PSB1bmRlZmluZWQgJiYgbmV3UG9zaXRpb25FZGdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFBvc2l0aW9uRWRnZS50b0ZpeGVkKDIpICE9PSBuZXdQb3NpdGlvbkVkZ2UudG9GaXhlZCgyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgQ2FsbG91dENvbnRlbnRCYXNlLnByb3RvdHlwZS5fc2V0VGFyZ2V0V2luZG93QW5kRWxlbWVudCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRFbGVtZW50ID0gdGhpcy5fY2FsbG91dEVsZW1lbnQuY3VycmVudDtcbiAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnREb2MgPSBnZXREb2N1bWVudChjdXJyZW50RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0ID0gY3VycmVudERvYyA/IGN1cnJlbnREb2MucXVlcnlTZWxlY3Rvcih0YXJnZXQpIDogbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRXaW5kb3cgPSBnZXRXaW5kb3coY3VycmVudEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIC8vIENhc3QgdG8gYW55IHByZXZlbnRzIGVycm9yIGFib3V0IHN0b3BQcm9wYWdhdGlvbiBhbHdheXMgZXhpc3RpbmdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRhcmdldC5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRXaW5kb3cgPSBnZXRXaW5kb3codGFyZ2V0LnRhcmdldCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICAgICAgICAgIC8vIFNhbWUgcmVhc29uIGhlcmVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0RWxlbWVudCA9IHRhcmdldDtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRXaW5kb3cgPSBnZXRXaW5kb3codGFyZ2V0RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0RWxlbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRhcmdldC5jdXJyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXQgPSB0YXJnZXQuY3VycmVudDtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRXaW5kb3cgPSBnZXRXaW5kb3codGhpcy5fdGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAvLyBIVE1MSW1nRWxlbWVudHMgY2FuIGhhdmUgeCBhbmQgeSB2YWx1ZXMuIFRoZSBjaGVjayBmb3IgaXQgYmVpbmcgYSBwb2ludCBtdXN0IGdvIGxhc3QuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRXaW5kb3cgPSBnZXRXaW5kb3coY3VycmVudEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldCA9IHRhcmdldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldFdpbmRvdyA9IGdldFdpbmRvdyhjdXJyZW50RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENhbGxvdXRDb250ZW50QmFzZS5wcm90b3R5cGUuX3NldEhlaWdodE9mZnNldEV2ZXJ5RnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLl9jYWxsb3V0RWxlbWVudC5jdXJyZW50ICYmIHRoaXMucHJvcHMuZmluYWxIZWlnaHQpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldEhlaWdodE9mZnNldFRpbWVyID0gdGhpcy5fYXN5bmMucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2FsbG91dE1haW5FbGVtID0gX3RoaXMuX2NhbGxvdXRFbGVtZW50LmN1cnJlbnQgJiYgX3RoaXMuX2NhbGxvdXRFbGVtZW50LmN1cnJlbnQubGFzdENoaWxkO1xuICAgICAgICAgICAgICAgIGlmICghY2FsbG91dE1haW5FbGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGNhcmRTY3JvbGxIZWlnaHQgPSBjYWxsb3V0TWFpbkVsZW0uc2Nyb2xsSGVpZ2h0O1xuICAgICAgICAgICAgICAgIHZhciBjYXJkQ3VyckhlaWdodCA9IGNhbGxvdXRNYWluRWxlbS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbERpZmYgPSBjYXJkU2Nyb2xsSGVpZ2h0IC0gY2FyZEN1cnJIZWlnaHQ7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHRPZmZzZXQ6IF90aGlzLnN0YXRlLmhlaWdodE9mZnNldCArIHNjcm9sbERpZmYsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxvdXRNYWluRWxlbS5vZmZzZXRIZWlnaHQgPCBfdGhpcy5wcm9wcy5maW5hbEhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc2V0SGVpZ2h0T2Zmc2V0RXZlcnlGcmFtZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2FzeW5jLmNhbmNlbEFuaW1hdGlvbkZyYW1lKF90aGlzLl9zZXRIZWlnaHRPZmZzZXRUaW1lciwgX3RoaXMuX2NhbGxvdXRFbGVtZW50LmN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRoaXMuX2NhbGxvdXRFbGVtZW50LmN1cnJlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBXaGV0aGVyIG9yIG5vdCB0aGUgY3VycmVudCBwb3NpdGlvbnMgc2hvdWxkIGJlIHJlc2V0XG4gICAgQ2FsbG91dENvbnRlbnRCYXNlLnByb3RvdHlwZS5fZGlkUG9zaXRpb25Qcm9wc0NoYW5nZSA9IGZ1bmN0aW9uIChuZXdQcm9wcywgb2xkUHJvcHMpIHtcbiAgICAgICAgcmV0dXJuICgoIW5ld1Byb3BzLmhpZGRlbiAmJiBuZXdQcm9wcy5oaWRkZW4gIT09IG9sZFByb3BzLmhpZGRlbikgfHwgbmV3UHJvcHMuZGlyZWN0aW9uYWxIaW50ICE9PSBvbGRQcm9wcy5kaXJlY3Rpb25hbEhpbnQpO1xuICAgIH07XG4gICAgQ2FsbG91dENvbnRlbnRCYXNlLnByb3RvdHlwZS5fZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7IHByb3BzID0gdGhpcy5wcm9wczsgfVxuICAgICAgICB2YXIgdGFyZ2V0ID0gcHJvcHMudGFyZ2V0O1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH07XG4gICAgQ2FsbG91dENvbnRlbnRCYXNlLmRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgcHJldmVudERpc21pc3NPbkxvc3RGb2N1czogZmFsc2UsXG4gICAgICAgIHByZXZlbnREaXNtaXNzT25TY3JvbGw6IGZhbHNlLFxuICAgICAgICBwcmV2ZW50RGlzbWlzc09uUmVzaXplOiBmYWxzZSxcbiAgICAgICAgaXNCZWFrVmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgYmVha1dpZHRoOiAxNixcbiAgICAgICAgZ2FwU3BhY2U6IDAsXG4gICAgICAgIG1pblBhZ2VQYWRkaW5nOiA4LFxuICAgICAgICBkaXJlY3Rpb25hbEhpbnQ6IERpcmVjdGlvbmFsSGludC5ib3R0b21BdXRvRWRnZSxcbiAgICB9O1xuICAgIHJldHVybiBDYWxsb3V0Q29udGVudEJhc2U7XG59KFJlYWN0LkNvbXBvbmVudCkpO1xuZXhwb3J0IHsgQ2FsbG91dENvbnRlbnRCYXNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DYWxsb3V0Q29udGVudC5iYXNlLmpzLm1hcCIsImltcG9ydCB7IEhpZ2hDb250cmFzdFNlbGVjdG9yLCBmb2N1c0NsZWFyLCBnZXRHbG9iYWxDbGFzc05hbWVzIH0gZnJvbSAnLi4vLi4vU3R5bGluZyc7XG5mdW5jdGlvbiBnZXRCZWFrU3R5bGUoYmVha1dpZHRoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaGVpZ2h0OiBiZWFrV2lkdGgsXG4gICAgICAgIHdpZHRoOiBiZWFrV2lkdGgsXG4gICAgfTtcbn1cbnZhciBHbG9iYWxDbGFzc05hbWVzID0ge1xuICAgIGNvbnRhaW5lcjogJ21zLUNhbGxvdXQtY29udGFpbmVyJyxcbiAgICByb290OiAnbXMtQ2FsbG91dCcsXG4gICAgYmVhazogJ21zLUNhbGxvdXQtYmVhaycsXG4gICAgYmVha0N1cnRhaW46ICdtcy1DYWxsb3V0LWJlYWtDdXJ0YWluJyxcbiAgICBjYWxsb3V0TWFpbjogJ21zLUNhbGxvdXQtbWFpbicsXG59O1xuZXhwb3J0IHZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIHRoZW1lID0gcHJvcHMudGhlbWUsIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSwgb3ZlcmZsb3dZSGlkZGVuID0gcHJvcHMub3ZlcmZsb3dZSGlkZGVuLCBjYWxsb3V0V2lkdGggPSBwcm9wcy5jYWxsb3V0V2lkdGgsIGJlYWtXaWR0aCA9IHByb3BzLmJlYWtXaWR0aCwgYmFja2dyb3VuZENvbG9yID0gcHJvcHMuYmFja2dyb3VuZENvbG9yLCBjYWxsb3V0TWF4V2lkdGggPSBwcm9wcy5jYWxsb3V0TWF4V2lkdGg7XG4gICAgdmFyIGNsYXNzTmFtZXMgPSBnZXRHbG9iYWxDbGFzc05hbWVzKEdsb2JhbENsYXNzTmFtZXMsIHRoZW1lKTtcbiAgICB2YXIgc2VtYW50aWNDb2xvcnMgPSB0aGVtZS5zZW1hbnRpY0NvbG9ycywgZWZmZWN0cyA9IHRoZW1lLmVmZmVjdHM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29udGFpbmVyOiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLmNvbnRhaW5lcixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHJvb3Q6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMucm9vdCxcbiAgICAgICAgICAgIHRoZW1lLmZvbnRzLm1lZGl1bSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IGVmZmVjdHMucm91bmRlZENvcm5lcjIsXG4gICAgICAgICAgICAgICAgYm94U2hhZG93OiBlZmZlY3RzLmVsZXZhdGlvbjE2LFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9hID0ge30sXG4gICAgICAgICAgICAgICAgICAgIF9hW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyU3R5bGU6ICdzb2xpZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJ1dpbmRvd1RleHQnLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBfYSksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZm9jdXNDbGVhcigpLFxuICAgICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICAgICAgISFjYWxsb3V0V2lkdGggJiYgeyB3aWR0aDogY2FsbG91dFdpZHRoIH0sXG4gICAgICAgICAgICAhIWNhbGxvdXRNYXhXaWR0aCAmJiB7IG1heFdpZHRoOiBjYWxsb3V0TWF4V2lkdGggfSxcbiAgICAgICAgXSxcbiAgICAgICAgYmVhazogW1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5iZWFrLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogc2VtYW50aWNDb2xvcnMubWVudUJhY2tncm91bmQsXG4gICAgICAgICAgICAgICAgYm94U2hhZG93OiAnaW5oZXJpdCcsXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAnaW5oZXJpdCcsXG4gICAgICAgICAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDQ1ZGVnKScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0QmVha1N0eWxlKGJlYWtXaWR0aCksXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3IgJiYge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgYmVha0N1cnRhaW46IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMuYmVha0N1cnRhaW4sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogc2VtYW50aWNDb2xvcnMubWVudUJhY2tncm91bmQsXG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBlZmZlY3RzLnJvdW5kZWRDb3JuZXIyLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgY2FsbG91dE1haW46IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMuY2FsbG91dE1haW4sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBzZW1hbnRpY0NvbG9ycy5tZW51QmFja2dyb3VuZCxcbiAgICAgICAgICAgICAgICBvdmVyZmxvd1g6ICdoaWRkZW4nLFxuICAgICAgICAgICAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogZWZmZWN0cy5yb3VuZGVkQ29ybmVyMixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvdmVyZmxvd1lIaWRkZW4gJiYge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93WTogJ2hpZGRlbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yICYmIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DYWxsb3V0Q29udGVudC5zdHlsZXMuanMubWFwIiwiaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IENhbGxvdXRDb250ZW50QmFzZSB9IGZyb20gJy4vQ2FsbG91dENvbnRlbnQuYmFzZSc7XG5pbXBvcnQgeyBnZXRTdHlsZXMgfSBmcm9tICcuL0NhbGxvdXRDb250ZW50LnN0eWxlcyc7XG5leHBvcnQgdmFyIENhbGxvdXRDb250ZW50ID0gc3R5bGVkKENhbGxvdXRDb250ZW50QmFzZSwgZ2V0U3R5bGVzLCB1bmRlZmluZWQsIHsgc2NvcGU6ICdDYWxsb3V0Q29udGVudCcgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DYWxsb3V0Q29udGVudC5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzLCBfX3Jlc3QgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENhbGxvdXRDb250ZW50IH0gZnJvbSAnLi9DYWxsb3V0Q29udGVudCc7XG5pbXBvcnQgeyBMYXllciB9IGZyb20gJy4uLy4uL0xheWVyJztcbnZhciBDYWxsb3V0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDYWxsb3V0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENhbGxvdXQoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgQ2FsbG91dC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBsYXllclByb3BzID0gX2EubGF5ZXJQcm9wcywgcmVzdCA9IF9fcmVzdChfYSwgW1wibGF5ZXJQcm9wc1wiXSk7XG4gICAgICAgIHZhciBjb250ZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudChDYWxsb3V0Q29udGVudCwgX19hc3NpZ24oe30sIHJlc3QpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuZG9Ob3RMYXllciA/IGNvbnRlbnQgOiBSZWFjdC5jcmVhdGVFbGVtZW50KExheWVyLCBfX2Fzc2lnbih7fSwgbGF5ZXJQcm9wcyksIGNvbnRlbnQpO1xuICAgIH07XG4gICAgcmV0dXJuIENhbGxvdXQ7XG59KFJlYWN0LkNvbXBvbmVudCkpO1xuZXhwb3J0IHsgQ2FsbG91dCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2FsbG91dC5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBoYXNTdWJtZW51LCBnZXRJc0NoZWNrZWQgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvY29udGV4dHVhbE1lbnUvaW5kZXgnO1xuaW1wb3J0IHsgZ2V0UlRMLCBpbml0aWFsaXplQ29tcG9uZW50UmVmIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IEljb24gfSBmcm9tICcuLi8uLi9JY29uJztcbnZhciByZW5kZXJJdGVtSWNvbiA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBpdGVtID0gcHJvcHMuaXRlbSwgaGFzSWNvbnMgPSBwcm9wcy5oYXNJY29ucywgY2xhc3NOYW1lcyA9IHByb3BzLmNsYXNzTmFtZXM7XG4gICAgdmFyIGljb25Qcm9wcyA9IGl0ZW0uaWNvblByb3BzO1xuICAgIGlmICghaGFzSWNvbnMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChpdGVtLm9uUmVuZGVySWNvbikge1xuICAgICAgICByZXR1cm4gaXRlbS5vblJlbmRlckljb24ocHJvcHMpO1xuICAgIH1cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChJY29uLCBfX2Fzc2lnbih7fSwgaWNvblByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcy5pY29uIH0pKTtcbn07XG52YXIgcmVuZGVyQ2hlY2tNYXJrSWNvbiA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBvbkNoZWNrbWFya0NsaWNrID0gX2Eub25DaGVja21hcmtDbGljaywgaXRlbSA9IF9hLml0ZW0sIGNsYXNzTmFtZXMgPSBfYS5jbGFzc05hbWVzO1xuICAgIHZhciBpc0l0ZW1DaGVja2VkID0gZ2V0SXNDaGVja2VkKGl0ZW0pO1xuICAgIGlmIChvbkNoZWNrbWFya0NsaWNrKSB7XG4gICAgICAgIC8vIEVuc3VyZXMgdGhhdCB0aGUgaXRlbSBpcyBwYXNzZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBjaGVja21hcmsgY2xpY2sgY2FsbGJhY2suXG4gICAgICAgIHZhciBvbkNsaWNrID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIG9uQ2hlY2ttYXJrQ2xpY2soaXRlbSwgZSk7IH07XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChJY29uLCB7IGljb25OYW1lOiBpdGVtLmNhbkNoZWNrICE9PSBmYWxzZSAmJiBpc0l0ZW1DaGVja2VkID8gJ0NoZWNrTWFyaycgOiAnJywgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmNoZWNrbWFya0ljb24sIFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2pzeC1uby1iaW5kXG4gICAgICAgICAgICBvbkNsaWNrOiBvbkNsaWNrIH0pKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xudmFyIHJlbmRlckl0ZW1OYW1lID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIGl0ZW0gPSBfYS5pdGVtLCBjbGFzc05hbWVzID0gX2EuY2xhc3NOYW1lcztcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvbiAqL1xuICAgIGlmIChpdGVtLnRleHQgfHwgaXRlbS5uYW1lKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcy5sYWJlbCB9LCBpdGVtLnRleHQgfHwgaXRlbS5uYW1lKTtcbiAgICB9XG4gICAgLyogZXNsaW50LWVuYWJsZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvbiAqL1xuICAgIHJldHVybiBudWxsO1xufTtcbnZhciByZW5kZXJTZWNvbmRhcnlUZXh0ID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIGl0ZW0gPSBfYS5pdGVtLCBjbGFzc05hbWVzID0gX2EuY2xhc3NOYW1lcztcbiAgICBpZiAoaXRlbS5zZWNvbmRhcnlUZXh0KSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcy5zZWNvbmRhcnlUZXh0IH0sIGl0ZW0uc2Vjb25kYXJ5VGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcbnZhciByZW5kZXJTdWJNZW51SWNvbiA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBpdGVtID0gX2EuaXRlbSwgY2xhc3NOYW1lcyA9IF9hLmNsYXNzTmFtZXMsIHRoZW1lID0gX2EudGhlbWU7XG4gICAgaWYgKGhhc1N1Ym1lbnUoaXRlbSkpIHtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KEljb24sIF9fYXNzaWduKHsgaWNvbk5hbWU6IGdldFJUTCh0aGVtZSkgPyAnQ2hldnJvbkxlZnQnIDogJ0NoZXZyb25SaWdodCcgfSwgaXRlbS5zdWJtZW51SWNvblByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcy5zdWJNZW51SWNvbiB9KSkpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG52YXIgQ29udGV4dHVhbE1lbnVJdGVtQmFzZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29udGV4dHVhbE1lbnVJdGVtQmFzZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb250ZXh0dWFsTWVudUl0ZW1CYXNlKHByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vcGVuU3ViTWVudSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLCBpdGVtID0gX2EuaXRlbSwgb3BlblN1Yk1lbnUgPSBfYS5vcGVuU3ViTWVudSwgZ2V0U3VibWVudVRhcmdldCA9IF9hLmdldFN1Ym1lbnVUYXJnZXQ7XG4gICAgICAgICAgICBpZiAoZ2V0U3VibWVudVRhcmdldCkge1xuICAgICAgICAgICAgICAgIHZhciBzdWJtZW51VGFyZ2V0ID0gZ2V0U3VibWVudVRhcmdldCgpO1xuICAgICAgICAgICAgICAgIGlmIChoYXNTdWJtZW51KGl0ZW0pICYmIG9wZW5TdWJNZW51ICYmIHN1Ym1lbnVUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3BlblN1Yk1lbnUoaXRlbSwgc3VibWVudVRhcmdldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5kaXNtaXNzU3ViTWVudSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLCBpdGVtID0gX2EuaXRlbSwgZGlzbWlzc1N1Yk1lbnUgPSBfYS5kaXNtaXNzU3ViTWVudTtcbiAgICAgICAgICAgIGlmIChoYXNTdWJtZW51KGl0ZW0pICYmIGRpc21pc3NTdWJNZW51KSB7XG4gICAgICAgICAgICAgICAgZGlzbWlzc1N1Yk1lbnUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuZGlzbWlzc01lbnUgPSBmdW5jdGlvbiAoZGlzbWlzc0FsbCkge1xuICAgICAgICAgICAgdmFyIGRpc21pc3NNZW51ID0gX3RoaXMucHJvcHMuZGlzbWlzc01lbnU7XG4gICAgICAgICAgICBpZiAoZGlzbWlzc01lbnUpIHtcbiAgICAgICAgICAgICAgICBkaXNtaXNzTWVudSh1bmRlZmluZWQgLyogZXYgKi8sIGRpc21pc3NBbGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpbml0aWFsaXplQ29tcG9uZW50UmVmKF90aGlzKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBDb250ZXh0dWFsTWVudUl0ZW1CYXNlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIGl0ZW0gPSBfYS5pdGVtLCBjbGFzc05hbWVzID0gX2EuY2xhc3NOYW1lcztcbiAgICAgICAgdmFyIHJlbmRlckNvbnRlbnQgPSBpdGVtLm9uUmVuZGVyQ29udGVudCB8fCB0aGlzLl9yZW5kZXJMYXlvdXQ7XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogaXRlbS5zcGxpdCA/IGNsYXNzTmFtZXMubGlua0NvbnRlbnRNZW51IDogY2xhc3NOYW1lcy5saW5rQ29udGVudCB9LCByZW5kZXJDb250ZW50KHRoaXMucHJvcHMsIHtcbiAgICAgICAgICAgIHJlbmRlckNoZWNrTWFya0ljb246IHJlbmRlckNoZWNrTWFya0ljb24sXG4gICAgICAgICAgICByZW5kZXJJdGVtSWNvbjogcmVuZGVySXRlbUljb24sXG4gICAgICAgICAgICByZW5kZXJJdGVtTmFtZTogcmVuZGVySXRlbU5hbWUsXG4gICAgICAgICAgICByZW5kZXJTZWNvbmRhcnlUZXh0OiByZW5kZXJTZWNvbmRhcnlUZXh0LFxuICAgICAgICAgICAgcmVuZGVyU3ViTWVudUljb246IHJlbmRlclN1Yk1lbnVJY29uLFxuICAgICAgICB9KSkpO1xuICAgIH07XG4gICAgQ29udGV4dHVhbE1lbnVJdGVtQmFzZS5wcm90b3R5cGUuX3JlbmRlckxheW91dCA9IGZ1bmN0aW9uIChwcm9wcywgZGVmYXVsdFJlbmRlcnMpIHtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLFxuICAgICAgICAgICAgZGVmYXVsdFJlbmRlcnMucmVuZGVyQ2hlY2tNYXJrSWNvbihwcm9wcyksXG4gICAgICAgICAgICBkZWZhdWx0UmVuZGVycy5yZW5kZXJJdGVtSWNvbihwcm9wcyksXG4gICAgICAgICAgICBkZWZhdWx0UmVuZGVycy5yZW5kZXJJdGVtTmFtZShwcm9wcyksXG4gICAgICAgICAgICBkZWZhdWx0UmVuZGVycy5yZW5kZXJTZWNvbmRhcnlUZXh0KHByb3BzKSxcbiAgICAgICAgICAgIGRlZmF1bHRSZW5kZXJzLnJlbmRlclN1Yk1lbnVJY29uKHByb3BzKSkpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbnRleHR1YWxNZW51SXRlbUJhc2U7XG59KFJlYWN0LkNvbXBvbmVudCkpO1xuZXhwb3J0IHsgQ29udGV4dHVhbE1lbnVJdGVtQmFzZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29udGV4dHVhbE1lbnVJdGVtLmJhc2UuanMubWFwIiwiaW1wb3J0IHsgbWVtb2l6ZUZ1bmN0aW9uIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IG1lcmdlU3R5bGVTZXRzIH0gZnJvbSAnLi4vLi4vU3R5bGluZyc7XG4vKipcbiAqIEBkZXByZWNhdGVkIHVzZSBnZXRTdHlsZXMgZXhwb3J0ZWQgZnJvbSBWZXJ0aWNhbERpdmlkZXIuc3R5bGVzLnRzXG4gKi9cbmV4cG9ydCB2YXIgZ2V0RGl2aWRlckNsYXNzTmFtZXMgPSBtZW1vaXplRnVuY3Rpb24oXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbmZ1bmN0aW9uICh0aGVtZSkge1xuICAgIHJldHVybiBtZXJnZVN0eWxlU2V0cyh7XG4gICAgICAgIHdyYXBwZXI6IHtcbiAgICAgICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICB9LFxuICAgICAgICBkaXZpZGVyOiB7XG4gICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLm5ldXRyYWxUZXJ0aWFyeUFsdCxcbiAgICAgICAgfSxcbiAgICB9KTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VmVydGljYWxEaXZpZGVyLmNsYXNzTmFtZXMuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGNvbmNhdFN0eWxlU2V0cywgZ2V0Rm9jdXNTdHlsZSwgSGlnaENvbnRyYXN0U2VsZWN0b3IsIGdldFNjcmVlblNlbGVjdG9yLCBTY3JlZW5XaWR0aE1heE1lZGl1bSwgSWNvbkZvbnRTaXplcywgZ2V0RWRnZUNocm9taXVtTm9IaWdoQ29udHJhc3RBZGp1c3RTZWxlY3RvciwgfSBmcm9tICcuLi8uLi9TdHlsaW5nJztcbmltcG9ydCB7IG1lbW9pemVGdW5jdGlvbiB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5leHBvcnQgdmFyIENPTlRFWFRVQUxfTUVOVV9JVEVNX0hFSUdIVCA9IDM2O1xudmFyIE1lZGl1bVNjcmVlblNlbGVjdG9yID0gZ2V0U2NyZWVuU2VsZWN0b3IoMCwgU2NyZWVuV2lkdGhNYXhNZWRpdW0pO1xudmFyIGdldEl0ZW1IaWdoQ29udHJhc3RTdHlsZXMgPSBtZW1vaXplRnVuY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZWxlY3RvcnM6IChfYSA9IHt9LFxuICAgICAgICAgICAgX2FbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ0hpZ2hsaWdodCcsXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICdIaWdobGlnaHQnLFxuICAgICAgICAgICAgICAgIGNvbG9yOiAnSGlnaGxpZ2h0VGV4dCcsXG4gICAgICAgICAgICAgICAgTXNIaWdoQ29udHJhc3RBZGp1c3Q6ICdub25lJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfYSksXG4gICAgfTtcbn0pO1xuZXhwb3J0IHZhciBnZXRNZW51SXRlbVN0eWxlcyA9IG1lbW9pemVGdW5jdGlvbihmdW5jdGlvbiAodGhlbWUpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2c7XG4gICAgdmFyIHNlbWFudGljQ29sb3JzID0gdGhlbWUuc2VtYW50aWNDb2xvcnMsIGZvbnRzID0gdGhlbWUuZm9udHMsIHBhbGV0dGUgPSB0aGVtZS5wYWxldHRlO1xuICAgIHZhciBDb250ZXh0dWFsTWVudUl0ZW1CYWNrZ3JvdW5kSG92ZXJDb2xvciA9IHNlbWFudGljQ29sb3JzLm1lbnVJdGVtQmFja2dyb3VuZEhvdmVyZWQ7XG4gICAgdmFyIENvbnRleHR1YWxNZW51SXRlbVRleHRIb3ZlckNvbG9yID0gc2VtYW50aWNDb2xvcnMubWVudUl0ZW1UZXh0SG92ZXJlZDtcbiAgICB2YXIgQ29udGV4dHVhbE1lbnVJdGVtQmFja2dyb3VuZFNlbGVjdGVkQ29sb3IgPSBzZW1hbnRpY0NvbG9ycy5tZW51SXRlbUJhY2tncm91bmRQcmVzc2VkO1xuICAgIHZhciBDb250ZXh0dWFsTWVudUl0ZW1EaXZpZGVyQ29sb3IgPSBzZW1hbnRpY0NvbG9ycy5ib2R5RGl2aWRlcjtcbiAgICB2YXIgbWVudUl0ZW1TdHlsZXMgPSB7XG4gICAgICAgIGl0ZW06IFtcbiAgICAgICAgICAgIGZvbnRzLm1lZGl1bSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogc2VtYW50aWNDb2xvcnMuYm9keVRleHQsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBkaXZpZGVyOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICAgICAgaGVpZ2h0OiAnMXB4JyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogQ29udGV4dHVhbE1lbnVJdGVtRGl2aWRlckNvbG9yLFxuICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIH0sXG4gICAgICAgIHJvb3Q6IFtcbiAgICAgICAgICAgIGdldEZvY3VzU3R5bGUodGhlbWUpLFxuICAgICAgICAgICAgZm9udHMubWVkaXVtLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBzZW1hbnRpY0NvbG9ycy5ib2R5VGV4dCxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IENPTlRFWFRVQUxfTUVOVV9JVEVNX0hFSUdIVCxcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiBDT05URVhUVUFMX01FTlVfSVRFTV9IRUlHSFQsXG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMHB4IDhweCAwIDRweCcsXG4gICAgICAgICAgICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICByb290RGlzYWJsZWQ6IHtcbiAgICAgICAgICAgIGNvbG9yOiBzZW1hbnRpY0NvbG9ycy5kaXNhYmxlZEJvZHlUZXh0LFxuICAgICAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCcsXG4gICAgICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICAgICAgICBzZWxlY3RvcnM6IF9fYXNzaWduKChfYSA9IHt9LCBfYVtIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgY29sb3I6ICdHcmF5VGV4dCcsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgIH0sIF9hKSwgZ2V0RWRnZUNocm9taXVtTm9IaWdoQ29udHJhc3RBZGp1c3RTZWxlY3RvcigpKSxcbiAgICAgICAgfSxcbiAgICAgICAgcm9vdEhvdmVyZWQ6IF9fYXNzaWduKHsgYmFja2dyb3VuZENvbG9yOiBDb250ZXh0dWFsTWVudUl0ZW1CYWNrZ3JvdW5kSG92ZXJDb2xvciwgY29sb3I6IENvbnRleHR1YWxNZW51SXRlbVRleHRIb3ZlckNvbG9yLCBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAnLm1zLUNvbnRleHR1YWxNZW51LWljb24nOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBwYWxldHRlLnRoZW1lRGFya0FsdCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICcubXMtQ29udGV4dHVhbE1lbnUtc3VibWVudUljb24nOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBwYWxldHRlLm5ldXRyYWxQcmltYXJ5LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9IH0sIGdldEl0ZW1IaWdoQ29udHJhc3RTdHlsZXMoKSksXG4gICAgICAgIHJvb3RGb2N1c2VkOiBfX2Fzc2lnbih7IGJhY2tncm91bmRDb2xvcjogcGFsZXR0ZS53aGl0ZSB9LCBnZXRJdGVtSGlnaENvbnRyYXN0U3R5bGVzKCkpLFxuICAgICAgICByb290Q2hlY2tlZDogX19hc3NpZ24oeyBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAnLm1zLUNvbnRleHR1YWxNZW51LWNoZWNrbWFya0ljb24nOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBwYWxldHRlLm5ldXRyYWxQcmltYXJ5LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9IH0sIGdldEl0ZW1IaWdoQ29udHJhc3RTdHlsZXMoKSksXG4gICAgICAgIHJvb3RQcmVzc2VkOiBfX2Fzc2lnbih7IGJhY2tncm91bmRDb2xvcjogQ29udGV4dHVhbE1lbnVJdGVtQmFja2dyb3VuZFNlbGVjdGVkQ29sb3IsIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICcubXMtQ29udGV4dHVhbE1lbnUtaWNvbic6IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IHBhbGV0dGUudGhlbWVEYXJrLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJy5tcy1Db250ZXh0dWFsTWVudS1zdWJtZW51SWNvbic6IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IHBhbGV0dGUubmV1dHJhbFByaW1hcnksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0gfSwgZ2V0SXRlbUhpZ2hDb250cmFzdFN0eWxlcygpKSxcbiAgICAgICAgcm9vdEV4cGFuZGVkOiBfX2Fzc2lnbih7IGJhY2tncm91bmRDb2xvcjogQ29udGV4dHVhbE1lbnVJdGVtQmFja2dyb3VuZFNlbGVjdGVkQ29sb3IsIGNvbG9yOiBzZW1hbnRpY0NvbG9ycy5ib2R5VGV4dENoZWNrZWQgfSwgZ2V0SXRlbUhpZ2hDb250cmFzdFN0eWxlcygpKSxcbiAgICAgICAgbGlua0NvbnRlbnQ6IHtcbiAgICAgICAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgICAgICAgICAgaGVpZ2h0OiAnaW5oZXJpdCcsXG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIG1heFdpZHRoOiAnMTAwJScsXG4gICAgICAgIH0sXG4gICAgICAgIGFuY2hvckxpbms6IHtcbiAgICAgICAgICAgIHBhZGRpbmc6ICcwcHggOHB4IDAgNHB4JyxcbiAgICAgICAgICAgIHRleHRSZW5kZXJpbmc6ICdhdXRvJyxcbiAgICAgICAgICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgICAgICAgICBsZXR0ZXJTcGFjaW5nOiAnbm9ybWFsJyxcbiAgICAgICAgICAgIHdvcmRTcGFjaW5nOiAnbm9ybWFsJyxcbiAgICAgICAgICAgIHRleHRUcmFuc2Zvcm06ICdub25lJyxcbiAgICAgICAgICAgIHRleHRJbmRlbnQ6ICcwcHgnLFxuICAgICAgICAgICAgdGV4dFNoYWRvdzogJ25vbmUnLFxuICAgICAgICAgICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAgICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICB9LFxuICAgICAgICBsYWJlbDoge1xuICAgICAgICAgICAgbWFyZ2luOiAnMCA0cHgnLFxuICAgICAgICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgICAgIGZsZXhHcm93OiAnMScsXG4gICAgICAgICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgICAgfSxcbiAgICAgICAgc2Vjb25kYXJ5VGV4dDoge1xuICAgICAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUubmV1dHJhbFNlY29uZGFyeSxcbiAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiAnMjBweCcsXG4gICAgICAgICAgICB0ZXh0QWxpZ246ICdyaWdodCcsXG4gICAgICAgIH0sXG4gICAgICAgIGljb246IHtcbiAgICAgICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICAgICAgbWluSGVpZ2h0OiAnMXB4JyxcbiAgICAgICAgICAgIG1heEhlaWdodDogQ09OVEVYVFVBTF9NRU5VX0lURU1fSEVJR0hULFxuICAgICAgICAgICAgZm9udFNpemU6IEljb25Gb250U2l6ZXMubWVkaXVtLFxuICAgICAgICAgICAgd2lkdGg6IEljb25Gb250U2l6ZXMubWVkaXVtLFxuICAgICAgICAgICAgbWFyZ2luOiAnMCA0cHgnLFxuICAgICAgICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgICAgICAgICBmbGV4U2hyaW5rOiAnMCcsXG4gICAgICAgICAgICBzZWxlY3RvcnM6IChfYiA9IHt9LFxuICAgICAgICAgICAgICAgIF9iW01lZGl1bVNjcmVlblNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IEljb25Gb250U2l6ZXMubGFyZ2UsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBJY29uRm9udFNpemVzLmxhcmdlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2IpLFxuICAgICAgICB9LFxuICAgICAgICBpY29uQ29sb3I6IHtcbiAgICAgICAgICAgIGNvbG9yOiBzZW1hbnRpY0NvbG9ycy5tZW51SWNvbixcbiAgICAgICAgICAgIHNlbGVjdG9yczogKF9jID0ge30sXG4gICAgICAgICAgICAgICAgX2NbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2luaGVyaXQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2NbJyRyb290OmhvdmVyICYnXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2QgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ0hpZ2hsaWdodFRleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9jWyckcm9vdDpmb2N1cyAmJ10gPSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9lID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBfZVtIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdIaWdobGlnaHRUZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBfZSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfYyksXG4gICAgICAgIH0sXG4gICAgICAgIGljb25EaXNhYmxlZDoge1xuICAgICAgICAgICAgY29sb3I6IHNlbWFudGljQ29sb3JzLmRpc2FibGVkQm9keVRleHQsXG4gICAgICAgIH0sXG4gICAgICAgIGNoZWNrbWFya0ljb246IHtcbiAgICAgICAgICAgIGNvbG9yOiBzZW1hbnRpY0NvbG9ycy5ib2R5U3VidGV4dCxcbiAgICAgICAgICAgIHNlbGVjdG9yczogKF9mID0ge30sXG4gICAgICAgICAgICAgICAgX2ZbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ0hpZ2hsaWdodFRleHQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2YpLFxuICAgICAgICB9LFxuICAgICAgICBzdWJNZW51SWNvbjoge1xuICAgICAgICAgICAgaGVpZ2h0OiBDT05URVhUVUFMX01FTlVfSVRFTV9IRUlHSFQsXG4gICAgICAgICAgICBsaW5lSGVpZ2h0OiBDT05URVhUVUFMX01FTlVfSVRFTV9IRUlHSFQsXG4gICAgICAgICAgICBjb2xvcjogcGFsZXR0ZS5uZXV0cmFsU2Vjb25kYXJ5LFxuICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgICAgICAgICBmbGV4U2hyaW5rOiAnMCcsXG4gICAgICAgICAgICBmb250U2l6ZTogSWNvbkZvbnRTaXplcy5zbWFsbCxcbiAgICAgICAgICAgIHNlbGVjdG9yczogKF9nID0ge1xuICAgICAgICAgICAgICAgICAgICAnOmhvdmVyJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHBhbGV0dGUubmV1dHJhbFByaW1hcnksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICc6YWN0aXZlJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHBhbGV0dGUubmV1dHJhbFByaW1hcnksXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9nW01lZGl1bVNjcmVlblNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IEljb25Gb250U2l6ZXMubWVkaXVtLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2dbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ0hpZ2hsaWdodFRleHQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2cpLFxuICAgICAgICB9LFxuICAgICAgICBzcGxpdEJ1dHRvbkZsZXhDb250YWluZXI6IFtcbiAgICAgICAgICAgIGdldEZvY3VzU3R5bGUodGhlbWUpLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IENPTlRFWFRVQUxfTUVOVV9JVEVNX0hFSUdIVCxcbiAgICAgICAgICAgICAgICBmbGV4V3JhcDogJ25vd3JhcCcsXG4gICAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LXN0YXJ0JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgfTtcbiAgICByZXR1cm4gY29uY2F0U3R5bGVTZXRzKG1lbnVJdGVtU3R5bGVzKTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29udGV4dHVhbE1lbnUuY25zdHlsZXMuanMubWFwIiwiaW1wb3J0IHsgZ2V0RGl2aWRlckNsYXNzTmFtZXMgfSBmcm9tICcuLi9EaXZpZGVyL1ZlcnRpY2FsRGl2aWRlci5jbGFzc05hbWVzJztcbmltcG9ydCB7IGdldE1lbnVJdGVtU3R5bGVzIH0gZnJvbSAnLi9Db250ZXh0dWFsTWVudS5jbnN0eWxlcyc7XG5pbXBvcnQgeyBtZXJnZVN0eWxlU2V0cywgZ2V0R2xvYmFsQ2xhc3NOYW1lcywgZ2V0U2NyZWVuU2VsZWN0b3IsIFNjcmVlbldpZHRoTWF4TWVkaXVtLCBoaWRkZW5Db250ZW50U3R5bGUsIH0gZnJvbSAnLi4vLi4vU3R5bGluZyc7XG5pbXBvcnQgeyBtZW1vaXplRnVuY3Rpb24sIElzRm9jdXNWaXNpYmxlQ2xhc3NOYW1lIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbnZhciBDT05URVhUVUFMX1NQTElUX01FTlVfTUlOV0lEVEggPSAnMjhweCc7XG52YXIgTWVkaXVtU2NyZWVuU2VsZWN0b3IgPSBnZXRTY3JlZW5TZWxlY3RvcigwLCBTY3JlZW5XaWR0aE1heE1lZGl1bSk7XG5leHBvcnQgdmFyIGdldFNwbGl0QnV0dG9uVmVydGljYWxEaXZpZGVyQ2xhc3NOYW1lcyA9IG1lbW9pemVGdW5jdGlvbihcbi8qIGVzbGludC1kaXNhYmxlIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uICovXG5mdW5jdGlvbiAodGhlbWUpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIG1lcmdlU3R5bGVTZXRzKGdldERpdmlkZXJDbGFzc05hbWVzKHRoZW1lKSwge1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uICovXG4gICAgICAgIHdyYXBwZXI6IHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgcmlnaHQ6IDI4LFxuICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2EgPSB7fSxcbiAgICAgICAgICAgICAgICBfYVtNZWRpdW1TY3JlZW5TZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAzMixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9hKSxcbiAgICAgICAgfSxcbiAgICAgICAgZGl2aWRlcjoge1xuICAgICAgICAgICAgaGVpZ2h0OiAxNixcbiAgICAgICAgICAgIHdpZHRoOiAxLFxuICAgICAgICB9LFxuICAgIH0pO1xufSk7XG52YXIgR2xvYmFsQ2xhc3NOYW1lcyA9IHtcbiAgICBpdGVtOiAnbXMtQ29udGV4dHVhbE1lbnUtaXRlbScsXG4gICAgZGl2aWRlcjogJ21zLUNvbnRleHR1YWxNZW51LWRpdmlkZXInLFxuICAgIHJvb3Q6ICdtcy1Db250ZXh0dWFsTWVudS1saW5rJyxcbiAgICBpc0NoZWNrZWQ6ICdpcy1jaGVja2VkJyxcbiAgICBpc0V4cGFuZGVkOiAnaXMtZXhwYW5kZWQnLFxuICAgIGlzRGlzYWJsZWQ6ICdpcy1kaXNhYmxlZCcsXG4gICAgbGlua0NvbnRlbnQ6ICdtcy1Db250ZXh0dWFsTWVudS1saW5rQ29udGVudCcsXG4gICAgbGlua0NvbnRlbnRNZW51OiAnbXMtQ29udGV4dHVhbE1lbnUtbGlua0NvbnRlbnQnLFxuICAgIGljb246ICdtcy1Db250ZXh0dWFsTWVudS1pY29uJyxcbiAgICBpY29uQ29sb3I6ICdtcy1Db250ZXh0dWFsTWVudS1pY29uQ29sb3InLFxuICAgIGNoZWNrbWFya0ljb246ICdtcy1Db250ZXh0dWFsTWVudS1jaGVja21hcmtJY29uJyxcbiAgICBzdWJNZW51SWNvbjogJ21zLUNvbnRleHR1YWxNZW51LXN1Ym1lbnVJY29uJyxcbiAgICBsYWJlbDogJ21zLUNvbnRleHR1YWxNZW51LWl0ZW1UZXh0JyxcbiAgICBzZWNvbmRhcnlUZXh0OiAnbXMtQ29udGV4dHVhbE1lbnUtc2Vjb25kYXJ5VGV4dCcsXG4gICAgc3BsaXRNZW51OiAnbXMtQ29udGV4dHVhbE1lbnUtc3BsaXRNZW51JyxcbiAgICBzY3JlZW5SZWFkZXJUZXh0OiAnbXMtQ29udGV4dHVhbE1lbnUtc2NyZWVuUmVhZGVyVGV4dCcsXG59O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBUbyBiZSByZW1vdmVkIGluIDcuMC5cbiAqIEBpbnRlcm5hbFxuICogVGhpcyBpcyBhIHBhY2thZ2UtaW50ZXJuYWwgbWV0aG9kIHRoYXQgaGFzIGJlZW4gZGVwZW5kZWQgb24uXG4gKiBJdCBpcyBiZWluZyBrZXB0IGluIHRoaXMgZm9ybSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gKiBJdCBzaG91bGQgYmUgY2xlYW5lZCB1cCBpbiA3LjAuXG4gKlxuICogVE9ETzogQXVkaXQgcGVyZi4gaW1wYWN0IG9mIGFuZCBwb3RlbnRpYWxseSByZW1vdmUgbWVtb2l6ZUZ1bmN0aW9uLlxuICogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9mbHVlbnR1aS9pc3N1ZXMvNTUzNFxuICovXG5leHBvcnQgdmFyIGdldEl0ZW1DbGFzc05hbWVzID0gbWVtb2l6ZUZ1bmN0aW9uKGZ1bmN0aW9uICh0aGVtZSwgZGlzYWJsZWQsIGV4cGFuZGVkLCBjaGVja2VkLCBpc0FuY2hvckxpbmssIGtub3duSWNvbiwgaXRlbUNsYXNzTmFtZSwgZGl2aWRlckNsYXNzTmFtZSwgaWNvbkNsYXNzTmFtZSwgc3ViTWVudUNsYXNzTmFtZSwgcHJpbWFyeURpc2FibGVkLCBjbGFzc05hbWUpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgdmFyIHN0eWxlcyA9IGdldE1lbnVJdGVtU3R5bGVzKHRoZW1lKTtcbiAgICB2YXIgY2xhc3NOYW1lcyA9IGdldEdsb2JhbENsYXNzTmFtZXMoR2xvYmFsQ2xhc3NOYW1lcywgdGhlbWUpO1xuICAgIHJldHVybiBtZXJnZVN0eWxlU2V0cyh7XG4gICAgICAgIGl0ZW06IFtjbGFzc05hbWVzLml0ZW0sIHN0eWxlcy5pdGVtLCBpdGVtQ2xhc3NOYW1lXSxcbiAgICAgICAgZGl2aWRlcjogW2NsYXNzTmFtZXMuZGl2aWRlciwgc3R5bGVzLmRpdmlkZXIsIGRpdmlkZXJDbGFzc05hbWVdLFxuICAgICAgICByb290OiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLnJvb3QsXG4gICAgICAgICAgICBzdHlsZXMucm9vdCxcbiAgICAgICAgICAgIGNoZWNrZWQgJiYgW2NsYXNzTmFtZXMuaXNDaGVja2VkLCBzdHlsZXMucm9vdENoZWNrZWRdLFxuICAgICAgICAgICAgaXNBbmNob3JMaW5rICYmIHN0eWxlcy5hbmNob3JMaW5rLFxuICAgICAgICAgICAgZXhwYW5kZWQgJiYgW2NsYXNzTmFtZXMuaXNFeHBhbmRlZCwgc3R5bGVzLnJvb3RFeHBhbmRlZF0sXG4gICAgICAgICAgICBkaXNhYmxlZCAmJiBbY2xhc3NOYW1lcy5pc0Rpc2FibGVkLCBzdHlsZXMucm9vdERpc2FibGVkXSxcbiAgICAgICAgICAgICFkaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgICFleHBhbmRlZCAmJiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfYSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnOmhvdmVyJzogc3R5bGVzLnJvb3RIb3ZlcmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc6YWN0aXZlJzogc3R5bGVzLnJvb3RQcmVzc2VkXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX2FbXCIuXCIgKyBJc0ZvY3VzVmlzaWJsZUNsYXNzTmFtZSArIFwiICY6Zm9jdXMsIC5cIiArIElzRm9jdXNWaXNpYmxlQ2xhc3NOYW1lICsgXCIgJjpmb2N1czpob3ZlclwiXSA9IHN0eWxlcy5yb290Rm9jdXNlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hW1wiLlwiICsgSXNGb2N1c1Zpc2libGVDbGFzc05hbWUgKyBcIiAmOmhvdmVyXCJdID0geyBiYWNrZ3JvdW5kOiAnaW5oZXJpdDsnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIF0sXG4gICAgICAgIHNwbGl0UHJpbWFyeTogW1xuICAgICAgICAgICAgc3R5bGVzLnJvb3QsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiY2FsYygxMDAlIC0gXCIgKyBDT05URVhUVUFMX1NQTElUX01FTlVfTUlOV0lEVEggKyBcIilcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGVja2VkICYmIFsnaXMtY2hlY2tlZCcsIHN0eWxlcy5yb290Q2hlY2tlZF0sXG4gICAgICAgICAgICAoZGlzYWJsZWQgfHwgcHJpbWFyeURpc2FibGVkKSAmJiBbJ2lzLWRpc2FibGVkJywgc3R5bGVzLnJvb3REaXNhYmxlZF0sXG4gICAgICAgICAgICAhKGRpc2FibGVkIHx8IHByaW1hcnlEaXNhYmxlZCkgJiZcbiAgICAgICAgICAgICAgICAhY2hlY2tlZCAmJiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfYiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnOmhvdmVyJzogc3R5bGVzLnJvb3RIb3ZlcmVkXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiBob3ZlcmluZyBvdmVyIHRoZSBzcGxpdFByaW1hcnkgYWxzbyBhZmZlY3QgdGhlIHNwbGl0TWVudVxuICAgICAgICAgICAgICAgICAgICAgICAgX2JbXCI6aG92ZXIgfiAuXCIgKyBjbGFzc05hbWVzLnNwbGl0TWVudV0gPSBzdHlsZXMucm9vdEhvdmVyZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBfYlsnOmFjdGl2ZSddID0gc3R5bGVzLnJvb3RQcmVzc2VkLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2JbXCIuXCIgKyBJc0ZvY3VzVmlzaWJsZUNsYXNzTmFtZSArIFwiICY6Zm9jdXMsIC5cIiArIElzRm9jdXNWaXNpYmxlQ2xhc3NOYW1lICsgXCIgJjpmb2N1czpob3ZlclwiXSA9IHN0eWxlcy5yb290Rm9jdXNlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iW1wiLlwiICsgSXNGb2N1c1Zpc2libGVDbGFzc05hbWUgKyBcIiAmOmhvdmVyXCJdID0geyBiYWNrZ3JvdW5kOiAnaW5oZXJpdDsnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBfYiksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIF0sXG4gICAgICAgIHNwbGl0TWVudTogW1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5zcGxpdE1lbnUsXG4gICAgICAgICAgICBzdHlsZXMucm9vdCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmbGV4QmFzaXM6ICcwJyxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMCA4cHgnLFxuICAgICAgICAgICAgICAgIG1pbldpZHRoOiBDT05URVhUVUFMX1NQTElUX01FTlVfTUlOV0lEVEgsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXhwYW5kZWQgJiYgWydpcy1leHBhbmRlZCcsIHN0eWxlcy5yb290RXhwYW5kZWRdLFxuICAgICAgICAgICAgZGlzYWJsZWQgJiYgWydpcy1kaXNhYmxlZCcsIHN0eWxlcy5yb290RGlzYWJsZWRdLFxuICAgICAgICAgICAgIWRpc2FibGVkICYmXG4gICAgICAgICAgICAgICAgIWV4cGFuZGVkICYmIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9jID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc6aG92ZXInOiBzdHlsZXMucm9vdEhvdmVyZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzphY3RpdmUnOiBzdHlsZXMucm9vdFByZXNzZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBfY1tcIi5cIiArIElzRm9jdXNWaXNpYmxlQ2xhc3NOYW1lICsgXCIgJjpmb2N1cywgLlwiICsgSXNGb2N1c1Zpc2libGVDbGFzc05hbWUgKyBcIiAmOmZvY3VzOmhvdmVyXCJdID0gc3R5bGVzLnJvb3RGb2N1c2VkLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2NbXCIuXCIgKyBJc0ZvY3VzVmlzaWJsZUNsYXNzTmFtZSArIFwiICY6aG92ZXJcIl0gPSB7IGJhY2tncm91bmQ6ICdpbmhlcml0OycgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgXSxcbiAgICAgICAgYW5jaG9yTGluazogc3R5bGVzLmFuY2hvckxpbmssXG4gICAgICAgIGxpbmtDb250ZW50OiBbY2xhc3NOYW1lcy5saW5rQ29udGVudCwgc3R5bGVzLmxpbmtDb250ZW50XSxcbiAgICAgICAgbGlua0NvbnRlbnRNZW51OiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLmxpbmtDb250ZW50TWVudSxcbiAgICAgICAgICAgIHN0eWxlcy5saW5rQ29udGVudCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpY29uOiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLmljb24sXG4gICAgICAgICAgICBrbm93bkljb24gJiYgc3R5bGVzLmljb25Db2xvcixcbiAgICAgICAgICAgIHN0eWxlcy5pY29uLFxuICAgICAgICAgICAgaWNvbkNsYXNzTmFtZSxcbiAgICAgICAgICAgIGRpc2FibGVkICYmIFtjbGFzc05hbWVzLmlzRGlzYWJsZWQsIHN0eWxlcy5pY29uRGlzYWJsZWRdLFxuICAgICAgICBdLFxuICAgICAgICBpY29uQ29sb3I6IHN0eWxlcy5pY29uQ29sb3IsXG4gICAgICAgIGNoZWNrbWFya0ljb246IFtjbGFzc05hbWVzLmNoZWNrbWFya0ljb24sIGtub3duSWNvbiAmJiBzdHlsZXMuY2hlY2ttYXJrSWNvbiwgc3R5bGVzLmljb24sIGljb25DbGFzc05hbWVdLFxuICAgICAgICBzdWJNZW51SWNvbjogW1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5zdWJNZW51SWNvbixcbiAgICAgICAgICAgIHN0eWxlcy5zdWJNZW51SWNvbixcbiAgICAgICAgICAgIHN1Yk1lbnVDbGFzc05hbWUsXG4gICAgICAgICAgICBleHBhbmRlZCAmJiB7IGNvbG9yOiB0aGVtZS5wYWxldHRlLm5ldXRyYWxQcmltYXJ5IH0sXG4gICAgICAgICAgICBkaXNhYmxlZCAmJiBbc3R5bGVzLmljb25EaXNhYmxlZF0sXG4gICAgICAgIF0sXG4gICAgICAgIGxhYmVsOiBbY2xhc3NOYW1lcy5sYWJlbCwgc3R5bGVzLmxhYmVsXSxcbiAgICAgICAgc2Vjb25kYXJ5VGV4dDogW2NsYXNzTmFtZXMuc2Vjb25kYXJ5VGV4dCwgc3R5bGVzLnNlY29uZGFyeVRleHRdLFxuICAgICAgICBzcGxpdENvbnRhaW5lcjogW1xuICAgICAgICAgICAgc3R5bGVzLnNwbGl0QnV0dG9uRmxleENvbnRhaW5lcixcbiAgICAgICAgICAgICFkaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgICFjaGVja2VkICYmIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9kID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBfZFtcIi5cIiArIElzRm9jdXNWaXNpYmxlQ2xhc3NOYW1lICsgXCIgJjpmb2N1cywgLlwiICsgSXNGb2N1c1Zpc2libGVDbGFzc05hbWUgKyBcIiAmOmZvY3VzOmhvdmVyXCJdID0gc3R5bGVzLnJvb3RGb2N1c2VkLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2QpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICBdLFxuICAgICAgICBzY3JlZW5SZWFkZXJUZXh0OiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLnNjcmVlblJlYWRlclRleHQsXG4gICAgICAgICAgICBzdHlsZXMuc2NyZWVuUmVhZGVyVGV4dCxcbiAgICAgICAgICAgIGhpZGRlbkNvbnRlbnRTdHlsZSxcbiAgICAgICAgICAgIHsgdmlzaWJpbGl0eTogJ2hpZGRlbicgfSxcbiAgICAgICAgXSxcbiAgICB9KTtcbn0pO1xuLyoqXG4gKiBXcmFwcGVyIGZ1bmN0aW9uIGZvciBnZW5lcmF0aW5nIENvbnRleHR1YWxNZW51SXRlbSBjbGFzc05hbWVzIHdoaWNoIGFkaGVyZXMgdG9cbiAqIHRoZSBnZXRTdHlsZXMgQVBJLCBidXQgaW52b2tlcyBtZW1vaXplZCBjbGFzc05hbWUgZ2VuZXJhdG9yIGZ1bmN0aW9uIHdpdGhcbiAqIHByaW1pdGl2ZSB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHByb3BzIC0gdGhlIENvbnRleHR1YWxNZW51SXRlbSBzdHlsZSBwcm9wcyB1c2VkIHRvIGdlbmVyYXRlIGl0cyBzdHlsZXMuXG4gKi9cbmV4cG9ydCB2YXIgZ2V0SXRlbVN0eWxlcyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciB0aGVtZSA9IHByb3BzLnRoZW1lLCBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLCBleHBhbmRlZCA9IHByb3BzLmV4cGFuZGVkLCBjaGVja2VkID0gcHJvcHMuY2hlY2tlZCwgaXNBbmNob3JMaW5rID0gcHJvcHMuaXNBbmNob3JMaW5rLCBrbm93bkljb24gPSBwcm9wcy5rbm93bkljb24sIGl0ZW1DbGFzc05hbWUgPSBwcm9wcy5pdGVtQ2xhc3NOYW1lLCBkaXZpZGVyQ2xhc3NOYW1lID0gcHJvcHMuZGl2aWRlckNsYXNzTmFtZSwgaWNvbkNsYXNzTmFtZSA9IHByb3BzLmljb25DbGFzc05hbWUsIHN1Yk1lbnVDbGFzc05hbWUgPSBwcm9wcy5zdWJNZW51Q2xhc3NOYW1lLCBwcmltYXJ5RGlzYWJsZWQgPSBwcm9wcy5wcmltYXJ5RGlzYWJsZWQsIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICByZXR1cm4gZ2V0SXRlbUNsYXNzTmFtZXModGhlbWUsIGRpc2FibGVkLCBleHBhbmRlZCwgY2hlY2tlZCwgaXNBbmNob3JMaW5rLCBrbm93bkljb24sIGl0ZW1DbGFzc05hbWUsIGRpdmlkZXJDbGFzc05hbWUsIGljb25DbGFzc05hbWUsIHN1Yk1lbnVDbGFzc05hbWUsIHByaW1hcnlEaXNhYmxlZCwgY2xhc3NOYW1lKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db250ZXh0dWFsTWVudS5jbGFzc05hbWVzLmpzLm1hcCIsImltcG9ydCB7IHN0eWxlZCB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBDb250ZXh0dWFsTWVudUl0ZW1CYXNlIH0gZnJvbSAnLi9Db250ZXh0dWFsTWVudUl0ZW0uYmFzZSc7XG5pbXBvcnQgeyBnZXRJdGVtU3R5bGVzIH0gZnJvbSAnLi9Db250ZXh0dWFsTWVudS5jbGFzc05hbWVzJztcbi8qKlxuICogQ29udGV4dHVhbE1lbnVJdGVtIGRlc2NyaXB0aW9uXG4gKi9cbmV4cG9ydCB2YXIgQ29udGV4dHVhbE1lbnVJdGVtID0gc3R5bGVkKENvbnRleHR1YWxNZW51SXRlbUJhc2UsIGdldEl0ZW1TdHlsZXMsIHVuZGVmaW5lZCwgeyBzY29wZTogJ0NvbnRleHR1YWxNZW51SXRlbScgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db250ZXh0dWFsTWVudUl0ZW0uanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpbml0aWFsaXplQ29tcG9uZW50UmVmLCBzaGFsbG93Q29tcGFyZSB9IGZyb20gJy4uLy4uLy4uL1V0aWxpdGllcyc7XG52YXIgQ29udGV4dHVhbE1lbnVJdGVtV3JhcHBlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29udGV4dHVhbE1lbnVJdGVtV3JhcHBlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb250ZXh0dWFsTWVudUl0ZW1XcmFwcGVyKHByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fb25JdGVtTW91c2VFbnRlciA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIGl0ZW0gPSBfYS5pdGVtLCBvbkl0ZW1Nb3VzZUVudGVyID0gX2Eub25JdGVtTW91c2VFbnRlcjtcbiAgICAgICAgICAgIGlmIChvbkl0ZW1Nb3VzZUVudGVyKSB7XG4gICAgICAgICAgICAgICAgb25JdGVtTW91c2VFbnRlcihpdGVtLCBldiwgZXYuY3VycmVudFRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbkl0ZW1DbGljayA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIGl0ZW0gPSBfYS5pdGVtLCBvbkl0ZW1DbGlja0Jhc2UgPSBfYS5vbkl0ZW1DbGlja0Jhc2U7XG4gICAgICAgICAgICBpZiAob25JdGVtQ2xpY2tCYXNlKSB7XG4gICAgICAgICAgICAgICAgb25JdGVtQ2xpY2tCYXNlKGl0ZW0sIGV2LCBldi5jdXJyZW50VGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uSXRlbU1vdXNlTGVhdmUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLCBpdGVtID0gX2EuaXRlbSwgb25JdGVtTW91c2VMZWF2ZSA9IF9hLm9uSXRlbU1vdXNlTGVhdmU7XG4gICAgICAgICAgICBpZiAob25JdGVtTW91c2VMZWF2ZSkge1xuICAgICAgICAgICAgICAgIG9uSXRlbU1vdXNlTGVhdmUoaXRlbSwgZXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25JdGVtS2V5RG93biA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIGl0ZW0gPSBfYS5pdGVtLCBvbkl0ZW1LZXlEb3duID0gX2Eub25JdGVtS2V5RG93bjtcbiAgICAgICAgICAgIGlmIChvbkl0ZW1LZXlEb3duKSB7XG4gICAgICAgICAgICAgICAgb25JdGVtS2V5RG93bihpdGVtLCBldik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbkl0ZW1Nb3VzZU1vdmUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLCBpdGVtID0gX2EuaXRlbSwgb25JdGVtTW91c2VNb3ZlID0gX2Eub25JdGVtTW91c2VNb3ZlO1xuICAgICAgICAgICAgaWYgKG9uSXRlbU1vdXNlTW92ZSkge1xuICAgICAgICAgICAgICAgIG9uSXRlbU1vdXNlTW92ZShpdGVtLCBldiwgZXYuY3VycmVudFRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9nZXRTdWJNZW51SWQgPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgdmFyIGdldFN1Yk1lbnVJZCA9IF90aGlzLnByb3BzLmdldFN1Yk1lbnVJZDtcbiAgICAgICAgICAgIGlmIChnZXRTdWJNZW51SWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0U3ViTWVudUlkKGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fZ2V0U3VibWVudVRhcmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH07XG4gICAgICAgIGluaXRpYWxpemVDb21wb25lbnRSZWYoX3RoaXMpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIENvbnRleHR1YWxNZW51SXRlbVdyYXBwZXIucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdQcm9wcykge1xuICAgICAgICByZXR1cm4gIXNoYWxsb3dDb21wYXJlKG5ld1Byb3BzLCB0aGlzLnByb3BzKTtcbiAgICB9O1xuICAgIHJldHVybiBDb250ZXh0dWFsTWVudUl0ZW1XcmFwcGVyO1xufShSZWFjdC5Db21wb25lbnQpKTtcbmV4cG9ydCB7IENvbnRleHR1YWxNZW51SXRlbVdyYXBwZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbnRleHR1YWxNZW51SXRlbVdyYXBwZXIuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgYW5jaG9yUHJvcGVydGllcywgZ2V0TmF0aXZlUHJvcHMsIG1lbW9pemVGdW5jdGlvbiwgZ2V0SWQsIG1lcmdlQXJpYUF0dHJpYnV0ZVZhbHVlcyB9IGZyb20gJy4uLy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBDb250ZXh0dWFsTWVudUl0ZW1XcmFwcGVyIH0gZnJvbSAnLi9Db250ZXh0dWFsTWVudUl0ZW1XcmFwcGVyJztcbmltcG9ydCB7IEtleXRpcERhdGEgfSBmcm9tICcuLi8uLi8uLi9LZXl0aXBEYXRhJztcbmltcG9ydCB7IGlzSXRlbURpc2FibGVkLCBoYXNTdWJtZW51IH0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0aWVzL2NvbnRleHR1YWxNZW51L2luZGV4JztcbmltcG9ydCB7IENvbnRleHR1YWxNZW51SXRlbSB9IGZyb20gJy4uL0NvbnRleHR1YWxNZW51SXRlbSc7XG52YXIgQ29udGV4dHVhbE1lbnVBbmNob3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvbnRleHR1YWxNZW51QW5jaG9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbnRleHR1YWxNZW51QW5jaG9yKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX2FuY2hvciA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgICAgICBfdGhpcy5fZ2V0TWVtb2l6ZWRNZW51QnV0dG9uS2V5dGlwUHJvcHMgPSBtZW1vaXplRnVuY3Rpb24oZnVuY3Rpb24gKGtleXRpcFByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIGtleXRpcFByb3BzKSwgeyBoYXNNZW51OiB0cnVlIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMuX2dldFN1Ym1lbnVUYXJnZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuX2FuY2hvci5jdXJyZW50ID8gX3RoaXMuX2FuY2hvci5jdXJyZW50IDogdW5kZWZpbmVkO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25JdGVtQ2xpY2sgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLCBpdGVtID0gX2EuaXRlbSwgb25JdGVtQ2xpY2sgPSBfYS5vbkl0ZW1DbGljaztcbiAgICAgICAgICAgIGlmIChvbkl0ZW1DbGljaykge1xuICAgICAgICAgICAgICAgIG9uSXRlbUNsaWNrKGl0ZW0sIGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX3JlbmRlckFyaWFEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uIChhcmlhRGVzY3JpcHRpb24sIGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgLy8gSWYgYXJpYURlc2NyaXB0aW9uIGlzIGdpdmVuLCBkZXNjcmlwdGlvbklkIHdpbGwgYmUgYXNzaWduZWQgdG8gYXJpYURlc2NyaXB0aW9uU3BhblxuICAgICAgICAgICAgcmV0dXJuIGFyaWFEZXNjcmlwdGlvbiA/IChSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGlkOiBfdGhpcy5fYXJpYURlc2NyaXB0aW9uSWQsIGNsYXNzTmFtZTogY2xhc3NOYW1lIH0sIGFyaWFEZXNjcmlwdGlvbikpIDogbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBDb250ZXh0dWFsTWVudUFuY2hvci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBpdGVtID0gX2EuaXRlbSwgY2xhc3NOYW1lcyA9IF9hLmNsYXNzTmFtZXMsIGluZGV4ID0gX2EuaW5kZXgsIGZvY3VzYWJsZUVsZW1lbnRJbmRleCA9IF9hLmZvY3VzYWJsZUVsZW1lbnRJbmRleCwgdG90YWxJdGVtQ291bnQgPSBfYS50b3RhbEl0ZW1Db3VudCwgaGFzQ2hlY2ttYXJrcyA9IF9hLmhhc0NoZWNrbWFya3MsIGhhc0ljb25zID0gX2EuaGFzSWNvbnMsIF9iID0gX2EuY29udGV4dHVhbE1lbnVJdGVtQXMsIENoaWxkcmVuUmVuZGVyZXIgPSBfYiA9PT0gdm9pZCAwID8gQ29udGV4dHVhbE1lbnVJdGVtIDogX2IsIGV4cGFuZGVkTWVudUl0ZW1LZXkgPSBfYS5leHBhbmRlZE1lbnVJdGVtS2V5LCBvbkl0ZW1DbGljayA9IF9hLm9uSXRlbUNsaWNrLCBvcGVuU3ViTWVudSA9IF9hLm9wZW5TdWJNZW51LCBkaXNtaXNzU3ViTWVudSA9IF9hLmRpc21pc3NTdWJNZW51LCBkaXNtaXNzTWVudSA9IF9hLmRpc21pc3NNZW51O1xuICAgICAgICB2YXIgYW5jaG9yUmVsID0gaXRlbS5yZWw7XG4gICAgICAgIGlmIChpdGVtLnRhcmdldCAmJiBpdGVtLnRhcmdldC50b0xvd2VyQ2FzZSgpID09PSAnX2JsYW5rJykge1xuICAgICAgICAgICAgYW5jaG9yUmVsID0gYW5jaG9yUmVsID8gYW5jaG9yUmVsIDogJ25vZm9sbG93IG5vb3BlbmVyIG5vcmVmZXJyZXInOyAvLyBTYWZlIGRlZmF1bHQgdG8gcHJldmVudCB0YWJqYWNraW5nXG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1Yk1lbnVJZCA9IHRoaXMuX2dldFN1Yk1lbnVJZChpdGVtKTtcbiAgICAgICAgdmFyIGl0ZW1IYXNTdWJtZW51ID0gaGFzU3VibWVudShpdGVtKTtcbiAgICAgICAgdmFyIG5hdGl2ZVByb3BzID0gZ2V0TmF0aXZlUHJvcHMoaXRlbSwgYW5jaG9yUHJvcGVydGllcyk7XG4gICAgICAgIHZhciBkaXNhYmxlZCA9IGlzSXRlbURpc2FibGVkKGl0ZW0pO1xuICAgICAgICB2YXIgaXRlbVByb3BzID0gaXRlbS5pdGVtUHJvcHMsIGFyaWFEZXNjcmlwdGlvbiA9IGl0ZW0uYXJpYURlc2NyaXB0aW9uO1xuICAgICAgICB2YXIga2V5dGlwUHJvcHMgPSBpdGVtLmtleXRpcFByb3BzO1xuICAgICAgICBpZiAoa2V5dGlwUHJvcHMgJiYgaXRlbUhhc1N1Ym1lbnUpIHtcbiAgICAgICAgICAgIGtleXRpcFByb3BzID0gdGhpcy5fZ2V0TWVtb2l6ZWRNZW51QnV0dG9uS2V5dGlwUHJvcHMoa2V5dGlwUHJvcHMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIGZvciBhcmlhRGVzY3JpcHRpb24gdG8gc2V0IHRoZSBfYXJpYURlc2NyaXB0aW9uSWQgYW5kIHJlbmRlciBhIGhpZGRlbiBzcGFuIHdpdGhcbiAgICAgICAgLy8gdGhlIGRlc2NyaXB0aW9uIGluIGl0IHRvIGJlIGFkZGVkIHRvIGFyaWFEZXNjcmliZWRCeVxuICAgICAgICBpZiAoYXJpYURlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9hcmlhRGVzY3JpcHRpb25JZCA9IGdldElkKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEtleXRpcERhdGEsIHsga2V5dGlwUHJvcHM6IGl0ZW0ua2V5dGlwUHJvcHMsIGFyaWFEZXNjcmliZWRCeTogbmF0aXZlUHJvcHNbJ2FyaWEtZGVzY3JpYmVkYnknXSwgZGlzYWJsZWQ6IGRpc2FibGVkIH0sIGZ1bmN0aW9uIChrZXl0aXBBdHRyaWJ1dGVzKSB7IHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgX19hc3NpZ24oe30sIG5hdGl2ZVByb3BzLCBrZXl0aXBBdHRyaWJ1dGVzLCB7IHJlZjogX3RoaXMuX2FuY2hvciwgaHJlZjogaXRlbS5ocmVmLCB0YXJnZXQ6IGl0ZW0udGFyZ2V0LCByZWw6IGFuY2hvclJlbCwgY2xhc3NOYW1lOiBjbGFzc05hbWVzLnJvb3QsIHJvbGU6IFwibWVudWl0ZW1cIiwgXCJhcmlhLW93bnNcIjogaXRlbS5rZXkgPT09IGV4cGFuZGVkTWVudUl0ZW1LZXkgPyBzdWJNZW51SWQgOiB1bmRlZmluZWQsIFwiYXJpYS1oYXNwb3B1cFwiOiBpdGVtSGFzU3VibWVudSB8fCB1bmRlZmluZWQsIFwiYXJpYS1leHBhbmRlZFwiOiBpdGVtSGFzU3VibWVudSA/IGl0ZW0ua2V5ID09PSBleHBhbmRlZE1lbnVJdGVtS2V5IDogdW5kZWZpbmVkLCBcImFyaWEtcG9zaW5zZXRcIjogZm9jdXNhYmxlRWxlbWVudEluZGV4ICsgMSwgXCJhcmlhLXNldHNpemVcIjogdG90YWxJdGVtQ291bnQsIFwiYXJpYS1kaXNhYmxlZFwiOiBpc0l0ZW1EaXNhYmxlZChpdGVtKSwgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IG1lcmdlQXJpYUF0dHJpYnV0ZVZhbHVlcyhhcmlhRGVzY3JpcHRpb24gPyBfdGhpcy5fYXJpYURlc2NyaXB0aW9uSWQgOiB1bmRlZmluZWQsIGtleXRpcEF0dHJpYnV0ZXMgPyBrZXl0aXBBdHRyaWJ1dGVzWydhcmlhLWRlc2NyaWJlZGJ5J10gOiB1bmRlZmluZWQpLCBcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgICAgICBzdHlsZTogaXRlbS5zdHlsZSwgb25DbGljazogX3RoaXMuX29uSXRlbUNsaWNrLCBvbk1vdXNlRW50ZXI6IF90aGlzLl9vbkl0ZW1Nb3VzZUVudGVyLCBvbk1vdXNlTGVhdmU6IF90aGlzLl9vbkl0ZW1Nb3VzZUxlYXZlLCBvbk1vdXNlTW92ZTogX3RoaXMuX29uSXRlbU1vdXNlTW92ZSwgb25LZXlEb3duOiBpdGVtSGFzU3VibWVudSA/IF90aGlzLl9vbkl0ZW1LZXlEb3duIDogdW5kZWZpbmVkIH0pLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2hpbGRyZW5SZW5kZXJlciwgX19hc3NpZ24oeyBjb21wb25lbnRSZWY6IGl0ZW0uY29tcG9uZW50UmVmLCBpdGVtOiBpdGVtLCBjbGFzc05hbWVzOiBjbGFzc05hbWVzLCBpbmRleDogaW5kZXgsIG9uQ2hlY2ttYXJrQ2xpY2s6IGhhc0NoZWNrbWFya3MgJiYgb25JdGVtQ2xpY2sgPyBvbkl0ZW1DbGljayA6IHVuZGVmaW5lZCwgaGFzSWNvbnM6IGhhc0ljb25zLCBvcGVuU3ViTWVudTogb3BlblN1Yk1lbnUsIGRpc21pc3NTdWJNZW51OiBkaXNtaXNzU3ViTWVudSwgZGlzbWlzc01lbnU6IGRpc21pc3NNZW51LCBnZXRTdWJtZW51VGFyZ2V0OiBfdGhpcy5fZ2V0U3VibWVudVRhcmdldCB9LCBpdGVtUHJvcHMpKSxcbiAgICAgICAgICAgICAgICBfdGhpcy5fcmVuZGVyQXJpYURlc2NyaXB0aW9uKGFyaWFEZXNjcmlwdGlvbiwgY2xhc3NOYW1lcy5zY3JlZW5SZWFkZXJUZXh0KSkpOyB9KSkpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbnRleHR1YWxNZW51QW5jaG9yO1xufShDb250ZXh0dWFsTWVudUl0ZW1XcmFwcGVyKSk7XG5leHBvcnQgeyBDb250ZXh0dWFsTWVudUFuY2hvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29udGV4dHVhbE1lbnVBbmNob3IuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgYnV0dG9uUHJvcGVydGllcywgZ2V0TmF0aXZlUHJvcHMsIG1lbW9pemVGdW5jdGlvbiwgZ2V0SWQsIG1lcmdlQXJpYUF0dHJpYnV0ZVZhbHVlcyB9IGZyb20gJy4uLy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBDb250ZXh0dWFsTWVudUl0ZW1XcmFwcGVyIH0gZnJvbSAnLi9Db250ZXh0dWFsTWVudUl0ZW1XcmFwcGVyJztcbmltcG9ydCB7IEtleXRpcERhdGEgfSBmcm9tICcuLi8uLi8uLi9LZXl0aXBEYXRhJztcbmltcG9ydCB7IGdldElzQ2hlY2tlZCwgaXNJdGVtRGlzYWJsZWQsIGhhc1N1Ym1lbnUsIGdldE1lbnVJdGVtQXJpYVJvbGUgfSBmcm9tICcuLi8uLi8uLi91dGlsaXRpZXMvY29udGV4dHVhbE1lbnUvaW5kZXgnO1xuaW1wb3J0IHsgQ29udGV4dHVhbE1lbnVJdGVtIH0gZnJvbSAnLi4vQ29udGV4dHVhbE1lbnVJdGVtJztcbnZhciBDb250ZXh0dWFsTWVudUJ1dHRvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29udGV4dHVhbE1lbnVCdXR0b24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29udGV4dHVhbE1lbnVCdXR0b24oKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fYnRuID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgICAgIF90aGlzLl9nZXRNZW1vaXplZE1lbnVCdXR0b25LZXl0aXBQcm9wcyA9IG1lbW9pemVGdW5jdGlvbihmdW5jdGlvbiAoa2V5dGlwUHJvcHMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwga2V5dGlwUHJvcHMpLCB7IGhhc01lbnU6IHRydWUgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpcy5fcmVuZGVyQXJpYURlc2NyaXB0aW9uID0gZnVuY3Rpb24gKGFyaWFEZXNjcmlwdGlvbiwgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAvLyBJZiBhcmlhRGVzY3JpcHRpb24gaXMgZ2l2ZW4sIGRlc2NyaXB0aW9uSWQgd2lsbCBiZSBhc3NpZ25lZCB0byBhcmlhRGVzY3JpcHRpb25TcGFuXG4gICAgICAgICAgICByZXR1cm4gYXJpYURlc2NyaXB0aW9uID8gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgaWQ6IF90aGlzLl9hcmlhRGVzY3JpcHRpb25JZCwgY2xhc3NOYW1lOiBjbGFzc05hbWUgfSwgYXJpYURlc2NyaXB0aW9uKSkgOiBudWxsO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fZ2V0U3VibWVudVRhcmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5fYnRuLmN1cnJlbnQgPyBfdGhpcy5fYnRuLmN1cnJlbnQgOiB1bmRlZmluZWQ7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ29udGV4dHVhbE1lbnVCdXR0b24ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgaXRlbSA9IF9hLml0ZW0sIGNsYXNzTmFtZXMgPSBfYS5jbGFzc05hbWVzLCBpbmRleCA9IF9hLmluZGV4LCBmb2N1c2FibGVFbGVtZW50SW5kZXggPSBfYS5mb2N1c2FibGVFbGVtZW50SW5kZXgsIHRvdGFsSXRlbUNvdW50ID0gX2EudG90YWxJdGVtQ291bnQsIGhhc0NoZWNrbWFya3MgPSBfYS5oYXNDaGVja21hcmtzLCBoYXNJY29ucyA9IF9hLmhhc0ljb25zLCBfYiA9IF9hLmNvbnRleHR1YWxNZW51SXRlbUFzLCBDaGlsZHJlblJlbmRlcmVyID0gX2IgPT09IHZvaWQgMCA/IENvbnRleHR1YWxNZW51SXRlbSA6IF9iLCBleHBhbmRlZE1lbnVJdGVtS2V5ID0gX2EuZXhwYW5kZWRNZW51SXRlbUtleSwgb25JdGVtTW91c2VEb3duID0gX2Eub25JdGVtTW91c2VEb3duLCBvbkl0ZW1DbGljayA9IF9hLm9uSXRlbUNsaWNrLCBvcGVuU3ViTWVudSA9IF9hLm9wZW5TdWJNZW51LCBkaXNtaXNzU3ViTWVudSA9IF9hLmRpc21pc3NTdWJNZW51LCBkaXNtaXNzTWVudSA9IF9hLmRpc21pc3NNZW51O1xuICAgICAgICB2YXIgc3ViTWVudUlkID0gdGhpcy5fZ2V0U3ViTWVudUlkKGl0ZW0pO1xuICAgICAgICB2YXIgaXNDaGVja2VkID0gZ2V0SXNDaGVja2VkKGl0ZW0pO1xuICAgICAgICB2YXIgY2FuQ2hlY2sgPSBpc0NoZWNrZWQgIT09IG51bGw7XG4gICAgICAgIHZhciBkZWZhdWx0Um9sZSA9IGdldE1lbnVJdGVtQXJpYVJvbGUoaXRlbSk7XG4gICAgICAgIHZhciBpdGVtSGFzU3VibWVudSA9IGhhc1N1Ym1lbnUoaXRlbSk7XG4gICAgICAgIHZhciBpdGVtUHJvcHMgPSBpdGVtLml0ZW1Qcm9wcywgYXJpYUxhYmVsID0gaXRlbS5hcmlhTGFiZWwsIGFyaWFEZXNjcmlwdGlvbiA9IGl0ZW0uYXJpYURlc2NyaXB0aW9uO1xuICAgICAgICB2YXIgYnV0dG9uTmF0aXZlUHJvcGVydGllcyA9IGdldE5hdGl2ZVByb3BzKGl0ZW0sIGJ1dHRvblByb3BlcnRpZXMpO1xuICAgICAgICAvLyBEbyBub3QgYWRkIHRoZSBkaXNhYmxlZCBhdHRyaWJ1dGUgdG8gdGhlIGJ1dHRvbiBzbyB0aGF0IGl0IGlzIGZvY3VzYWJsZVxuICAgICAgICBkZWxldGUgYnV0dG9uTmF0aXZlUHJvcGVydGllcy5kaXNhYmxlZDtcbiAgICAgICAgdmFyIGl0ZW1Sb2xlID0gaXRlbS5yb2xlIHx8IGRlZmF1bHRSb2xlO1xuICAgICAgICAvLyBDaGVjayBmb3IgYXJpYURlc2NyaXB0aW9uIHRvIHNldCB0aGUgX2FyaWFEZXNjcmlwdGlvbklkIGFuZCByZW5kZXIgYSBoaWRkZW4gc3BhbiB3aXRoXG4gICAgICAgIC8vIHRoZSBkZXNjcmlwdGlvbiBpbiBpdCB0byBiZSBhZGRlZCB0byBhcmlhRGVzY3JpYmVkQnlcbiAgICAgICAgaWYgKGFyaWFEZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5fYXJpYURlc2NyaXB0aW9uSWQgPSBnZXRJZCgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhcmlhRGVzY3JpYmVkQnlJZHMgPSBhcmlhRGVzY3JpcHRpb24gPyB0aGlzLl9hcmlhRGVzY3JpcHRpb25JZCA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGl0ZW1CdXR0b25Qcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzLnJvb3QsXG4gICAgICAgICAgICBvbkNsaWNrOiB0aGlzLl9vbkl0ZW1DbGljayxcbiAgICAgICAgICAgIG9uS2V5RG93bjogaXRlbUhhc1N1Ym1lbnUgPyB0aGlzLl9vbkl0ZW1LZXlEb3duIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLl9vbkl0ZW1Nb3VzZUVudGVyLFxuICAgICAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLl9vbkl0ZW1Nb3VzZUxlYXZlLFxuICAgICAgICAgICAgb25Nb3VzZURvd246IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgICAgIHJldHVybiBvbkl0ZW1Nb3VzZURvd24gPyBvbkl0ZW1Nb3VzZURvd24oaXRlbSwgZXYpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uTW91c2VNb3ZlOiB0aGlzLl9vbkl0ZW1Nb3VzZU1vdmUsXG4gICAgICAgICAgICBocmVmOiBpdGVtLmhyZWYsXG4gICAgICAgICAgICB0aXRsZTogaXRlbS50aXRsZSxcbiAgICAgICAgICAgICdhcmlhLWxhYmVsJzogYXJpYUxhYmVsLFxuICAgICAgICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBhcmlhRGVzY3JpYmVkQnlJZHMsXG4gICAgICAgICAgICAnYXJpYS1oYXNwb3B1cCc6IGl0ZW1IYXNTdWJtZW51IHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhcmlhLW93bnMnOiBpdGVtLmtleSA9PT0gZXhwYW5kZWRNZW51SXRlbUtleSA/IHN1Yk1lbnVJZCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhcmlhLWV4cGFuZGVkJzogaXRlbUhhc1N1Ym1lbnUgPyBpdGVtLmtleSA9PT0gZXhwYW5kZWRNZW51SXRlbUtleSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhcmlhLXBvc2luc2V0JzogZm9jdXNhYmxlRWxlbWVudEluZGV4ICsgMSxcbiAgICAgICAgICAgICdhcmlhLXNldHNpemUnOiB0b3RhbEl0ZW1Db3VudCxcbiAgICAgICAgICAgICdhcmlhLWRpc2FibGVkJzogaXNJdGVtRGlzYWJsZWQoaXRlbSksXG4gICAgICAgICAgICAnYXJpYS1jaGVja2VkJzogKGl0ZW1Sb2xlID09PSAnbWVudWl0ZW1jaGVja2JveCcgfHwgaXRlbVJvbGUgPT09ICdtZW51aXRlbXJhZGlvJykgJiYgY2FuQ2hlY2sgPyAhIWlzQ2hlY2tlZCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhcmlhLXNlbGVjdGVkJzogaXRlbVJvbGUgPT09ICdtZW51aXRlbScgJiYgY2FuQ2hlY2sgPyAhIWlzQ2hlY2tlZCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHJvbGU6IGl0ZW1Sb2xlLFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICBzdHlsZTogaXRlbS5zdHlsZSxcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGtleXRpcFByb3BzID0gaXRlbS5rZXl0aXBQcm9wcztcbiAgICAgICAgaWYgKGtleXRpcFByb3BzICYmIGl0ZW1IYXNTdWJtZW51KSB7XG4gICAgICAgICAgICBrZXl0aXBQcm9wcyA9IHRoaXMuX2dldE1lbW9pemVkTWVudUJ1dHRvbktleXRpcFByb3BzKGtleXRpcFByb3BzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoS2V5dGlwRGF0YSwgeyBrZXl0aXBQcm9wczoga2V5dGlwUHJvcHMsIGFyaWFEZXNjcmliZWRCeTogYnV0dG9uTmF0aXZlUHJvcGVydGllc1snYXJpYS1kZXNjcmliZWRieSddLCBkaXNhYmxlZDogaXNJdGVtRGlzYWJsZWQoaXRlbSkgfSwgZnVuY3Rpb24gKGtleXRpcEF0dHJpYnV0ZXMpIHsgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIF9fYXNzaWduKHsgcmVmOiBfdGhpcy5fYnRuIH0sIGJ1dHRvbk5hdGl2ZVByb3BlcnRpZXMsIGl0ZW1CdXR0b25Qcm9wZXJ0aWVzLCBrZXl0aXBBdHRyaWJ1dGVzLCB7IFwiYXJpYS1kZXNjcmliZWRieVwiOiBtZXJnZUFyaWFBdHRyaWJ1dGVWYWx1ZXMoaXRlbUJ1dHRvblByb3BlcnRpZXNbJ2FyaWEtZGVzY3JpYmVkYnknXSwga2V5dGlwQXR0cmlidXRlcyA/IGtleXRpcEF0dHJpYnV0ZXNbJ2FyaWEtZGVzY3JpYmVkYnknXSA6IHVuZGVmaW5lZCkgfSksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENoaWxkcmVuUmVuZGVyZXIsIF9fYXNzaWduKHsgY29tcG9uZW50UmVmOiBpdGVtLmNvbXBvbmVudFJlZiwgaXRlbTogaXRlbSwgY2xhc3NOYW1lczogY2xhc3NOYW1lcywgaW5kZXg6IGluZGV4LCBvbkNoZWNrbWFya0NsaWNrOiBoYXNDaGVja21hcmtzICYmIG9uSXRlbUNsaWNrID8gb25JdGVtQ2xpY2sgOiB1bmRlZmluZWQsIGhhc0ljb25zOiBoYXNJY29ucywgb3BlblN1Yk1lbnU6IG9wZW5TdWJNZW51LCBkaXNtaXNzU3ViTWVudTogZGlzbWlzc1N1Yk1lbnUsIGRpc21pc3NNZW51OiBkaXNtaXNzTWVudSwgZ2V0U3VibWVudVRhcmdldDogX3RoaXMuX2dldFN1Ym1lbnVUYXJnZXQgfSwgaXRlbVByb3BzKSksXG4gICAgICAgICAgICBfdGhpcy5fcmVuZGVyQXJpYURlc2NyaXB0aW9uKGFyaWFEZXNjcmlwdGlvbiwgY2xhc3NOYW1lcy5zY3JlZW5SZWFkZXJUZXh0KSkpOyB9KSk7XG4gICAgfTtcbiAgICByZXR1cm4gQ29udGV4dHVhbE1lbnVCdXR0b247XG59KENvbnRleHR1YWxNZW51SXRlbVdyYXBwZXIpKTtcbmV4cG9ydCB7IENvbnRleHR1YWxNZW51QnV0dG9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db250ZXh0dWFsTWVudUJ1dHRvbi5qcy5tYXAiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjbGFzc05hbWVzRnVuY3Rpb24gfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xudmFyIGdldENsYXNzTmFtZXMgPSBjbGFzc05hbWVzRnVuY3Rpb24oKTtcbmV4cG9ydCB2YXIgVmVydGljYWxEaXZpZGVyQmFzZSA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIHZhciBzdHlsZXMgPSBwcm9wcy5zdHlsZXMsIHRoZW1lID0gcHJvcHMudGhlbWUsIGRlcHJlY2F0ZWRHZXRDbGFzc05hbWVzID0gcHJvcHMuZ2V0Q2xhc3NOYW1lcywgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lO1xuICAgIHZhciBjbGFzc05hbWVzID0gZ2V0Q2xhc3NOYW1lcyhzdHlsZXMsIHsgdGhlbWU6IHRoZW1lLCBnZXRDbGFzc05hbWVzOiBkZXByZWNhdGVkR2V0Q2xhc3NOYW1lcywgY2xhc3NOYW1lOiBjbGFzc05hbWUgfSk7XG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcy53cmFwcGVyIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmRpdmlkZXIgfSkpKTtcbn07XG5WZXJ0aWNhbERpdmlkZXJCYXNlLmRpc3BsYXlOYW1lID0gJ1ZlcnRpY2FsRGl2aWRlckJhc2UnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VmVydGljYWxEaXZpZGVyLmJhc2UuanMubWFwIiwiaW1wb3J0IHsgZ2V0U3R5bGVzIH0gZnJvbSAnLi9WZXJ0aWNhbERpdmlkZXIuc3R5bGVzJztcbmltcG9ydCB7IFZlcnRpY2FsRGl2aWRlckJhc2UgfSBmcm9tICcuL1ZlcnRpY2FsRGl2aWRlci5iYXNlJztcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5leHBvcnQgdmFyIFZlcnRpY2FsRGl2aWRlciA9IHN0eWxlZChWZXJ0aWNhbERpdmlkZXJCYXNlLCBnZXRTdHlsZXMsIHVuZGVmaW5lZCwge1xuICAgIHNjb3BlOiAnVmVydGljYWxEaXZpZGVyJyxcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VmVydGljYWxEaXZpZGVyLmpzLm1hcCIsImV4cG9ydCB2YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgdmFyIHRoZW1lID0gcHJvcHMudGhlbWUsIGdldENsYXNzTmFtZXMgPSBwcm9wcy5nZXRDbGFzc05hbWVzLCBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWU7XG4gICAgaWYgKCF0aGVtZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZW1lIGlzIHVuZGVmaW5lZCBvciBudWxsLicpO1xuICAgIH1cbiAgICBpZiAoZ2V0Q2xhc3NOYW1lcykge1xuICAgICAgICB2YXIgbmFtZXMgPSBnZXRDbGFzc05hbWVzKHRoZW1lKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdyYXBwZXI6IFtuYW1lcy53cmFwcGVyXSxcbiAgICAgICAgICAgIGRpdmlkZXI6IFtuYW1lcy5kaXZpZGVyXSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgd3JhcHBlcjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBdLFxuICAgICAgICBkaXZpZGVyOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLm5ldXRyYWxUZXJ0aWFyeUFsdCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WZXJ0aWNhbERpdmlkZXIuc3R5bGVzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGJ1dHRvblByb3BlcnRpZXMsIGdldE5hdGl2ZVByb3BzLCBLZXlDb2RlcywgbWVyZ2VBcmlhQXR0cmlidXRlVmFsdWVzLCBtZW1vaXplRnVuY3Rpb24sIEFzeW5jLCBFdmVudEdyb3VwLCBnZXRJZCwgfSBmcm9tICcuLi8uLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgQ29udGV4dHVhbE1lbnVJdGVtIH0gZnJvbSAnLi4vQ29udGV4dHVhbE1lbnVJdGVtJztcbmltcG9ydCB7IGdldFNwbGl0QnV0dG9uVmVydGljYWxEaXZpZGVyQ2xhc3NOYW1lcyB9IGZyb20gJy4uL0NvbnRleHR1YWxNZW51LmNsYXNzTmFtZXMnO1xuaW1wb3J0IHsgS2V5dGlwRGF0YSB9IGZyb20gJy4uLy4uLy4uL0tleXRpcERhdGEnO1xuaW1wb3J0IHsgaXNJdGVtRGlzYWJsZWQsIGhhc1N1Ym1lbnUsIGdldE1lbnVJdGVtQXJpYVJvbGUgfSBmcm9tICcuLi8uLi8uLi91dGlsaXRpZXMvY29udGV4dHVhbE1lbnUvaW5kZXgnO1xuaW1wb3J0IHsgVmVydGljYWxEaXZpZGVyIH0gZnJvbSAnLi4vLi4vLi4vRGl2aWRlcic7XG5pbXBvcnQgeyBDb250ZXh0dWFsTWVudUl0ZW1XcmFwcGVyIH0gZnJvbSAnLi9Db250ZXh0dWFsTWVudUl0ZW1XcmFwcGVyJztcbnZhciBUb3VjaElkbGVEZWxheSA9IDUwMDsgLyogbXMgKi9cbnZhciBDb250ZXh0dWFsTWVudVNwbGl0QnV0dG9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDb250ZXh0dWFsTWVudVNwbGl0QnV0dG9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbnRleHR1YWxNZW51U3BsaXRCdXR0b24ocHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9nZXRNZW1vaXplZE1lbnVCdXR0b25LZXl0aXBQcm9wcyA9IG1lbW9pemVGdW5jdGlvbihmdW5jdGlvbiAoa2V5dGlwUHJvcHMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwga2V5dGlwUHJvcHMpLCB7IGhhc01lbnU6IHRydWUgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpcy5fcmVuZGVyQXJpYURlc2NyaXB0aW9uID0gZnVuY3Rpb24gKGFyaWFEZXNjcmlwdGlvbiwgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAvLyBJZiBhcmlhRGVzY3JpcHRpb24gaXMgZ2l2ZW4sIGRlc2NyaXB0aW9uSWQgd2lsbCBiZSBhc3NpZ25lZCB0byBhcmlhRGVzY3JpcHRpb25TcGFuXG4gICAgICAgICAgICByZXR1cm4gYXJpYURlc2NyaXB0aW9uID8gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgaWQ6IF90aGlzLl9hcmlhRGVzY3JpcHRpb25JZCwgY2xhc3NOYW1lOiBjbGFzc05hbWUgfSwgYXJpYURlc2NyaXB0aW9uKSkgOiBudWxsO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25JdGVtS2V5RG93biA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIGl0ZW0gPSBfYS5pdGVtLCBvbkl0ZW1LZXlEb3duID0gX2Eub25JdGVtS2V5RG93bjtcbiAgICAgICAgICAgIGlmIChldi53aGljaCA9PT0gS2V5Q29kZXMuZW50ZXIpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fZXhlY3V0ZUl0ZW1DbGljayhldik7XG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG9uSXRlbUtleURvd24pIHtcbiAgICAgICAgICAgICAgICBvbkl0ZW1LZXlEb3duKGl0ZW0sIGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX2dldFN1Ym1lbnVUYXJnZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuX3NwbGl0QnV0dG9uO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25JdGVtTW91c2VFbnRlclByaW1hcnkgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLCBpdGVtID0gX2EuaXRlbSwgb25JdGVtTW91c2VFbnRlciA9IF9hLm9uSXRlbU1vdXNlRW50ZXI7XG4gICAgICAgICAgICBpZiAob25JdGVtTW91c2VFbnRlcikge1xuICAgICAgICAgICAgICAgIG9uSXRlbU1vdXNlRW50ZXIoX19hc3NpZ24oX19hc3NpZ24oe30sIGl0ZW0pLCB7IHN1Yk1lbnVQcm9wczogdW5kZWZpbmVkLCBpdGVtczogdW5kZWZpbmVkIH0pLCBldiwgX3RoaXMuX3NwbGl0QnV0dG9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uSXRlbU1vdXNlRW50ZXJJY29uID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgaXRlbSA9IF9hLml0ZW0sIG9uSXRlbU1vdXNlRW50ZXIgPSBfYS5vbkl0ZW1Nb3VzZUVudGVyO1xuICAgICAgICAgICAgaWYgKG9uSXRlbU1vdXNlRW50ZXIpIHtcbiAgICAgICAgICAgICAgICBvbkl0ZW1Nb3VzZUVudGVyKGl0ZW0sIGV2LCBfdGhpcy5fc3BsaXRCdXR0b24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25JdGVtTW91c2VNb3ZlUHJpbWFyeSA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIGl0ZW0gPSBfYS5pdGVtLCBvbkl0ZW1Nb3VzZU1vdmUgPSBfYS5vbkl0ZW1Nb3VzZU1vdmU7XG4gICAgICAgICAgICBpZiAob25JdGVtTW91c2VNb3ZlKSB7XG4gICAgICAgICAgICAgICAgb25JdGVtTW91c2VNb3ZlKF9fYXNzaWduKF9fYXNzaWduKHt9LCBpdGVtKSwgeyBzdWJNZW51UHJvcHM6IHVuZGVmaW5lZCwgaXRlbXM6IHVuZGVmaW5lZCB9KSwgZXYsIF90aGlzLl9zcGxpdEJ1dHRvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbkl0ZW1Nb3VzZU1vdmVJY29uID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgaXRlbSA9IF9hLml0ZW0sIG9uSXRlbU1vdXNlTW92ZSA9IF9hLm9uSXRlbU1vdXNlTW92ZTtcbiAgICAgICAgICAgIGlmIChvbkl0ZW1Nb3VzZU1vdmUpIHtcbiAgICAgICAgICAgICAgICBvbkl0ZW1Nb3VzZU1vdmUoaXRlbSwgZXYsIF90aGlzLl9zcGxpdEJ1dHRvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbkljb25JdGVtQ2xpY2sgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLCBpdGVtID0gX2EuaXRlbSwgb25JdGVtQ2xpY2tCYXNlID0gX2Eub25JdGVtQ2xpY2tCYXNlO1xuICAgICAgICAgICAgaWYgKG9uSXRlbUNsaWNrQmFzZSkge1xuICAgICAgICAgICAgICAgIG9uSXRlbUNsaWNrQmFzZShpdGVtLCBldiwgKF90aGlzLl9zcGxpdEJ1dHRvbiA/IF90aGlzLl9zcGxpdEJ1dHRvbiA6IGV2LmN1cnJlbnRUYXJnZXQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX2V4ZWN1dGVJdGVtQ2xpY2sgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLCBpdGVtID0gX2EuaXRlbSwgZXhlY3V0ZUl0ZW1DbGljayA9IF9hLmV4ZWN1dGVJdGVtQ2xpY2ssIG9uSXRlbUNsaWNrID0gX2Eub25JdGVtQ2xpY2s7XG4gICAgICAgICAgICBpZiAoaXRlbS5kaXNhYmxlZCB8fCBpdGVtLmlzRGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX3RoaXMuX3Byb2Nlc3NpbmdUb3VjaCAmJiBvbkl0ZW1DbGljaykge1xuICAgICAgICAgICAgICAgIHJldHVybiBvbkl0ZW1DbGljayhpdGVtLCBldik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXhlY3V0ZUl0ZW1DbGljaykge1xuICAgICAgICAgICAgICAgIGV4ZWN1dGVJdGVtQ2xpY2soaXRlbSwgZXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25Ub3VjaFN0YXJ0ID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuX3NwbGl0QnV0dG9uICYmICEoJ29ucG9pbnRlcmRvd24nIGluIF90aGlzLl9zcGxpdEJ1dHRvbikpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlVG91Y2hBbmRQb2ludGVyRXZlbnQoZXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25Qb2ludGVyRG93biA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKGV2LnBvaW50ZXJUeXBlID09PSAndG91Y2gnKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2hhbmRsZVRvdWNoQW5kUG9pbnRlckV2ZW50KGV2KTtcbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGV2LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fYXN5bmMgPSBuZXcgQXN5bmMoX3RoaXMpO1xuICAgICAgICBfdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50R3JvdXAoX3RoaXMpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIENvbnRleHR1YWxNZW51U3BsaXRCdXR0b24ucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fc3BsaXRCdXR0b24gJiYgJ29ucG9pbnRlcmRvd24nIGluIHRoaXMuX3NwbGl0QnV0dG9uKSB7XG4gICAgICAgICAgICB0aGlzLl9ldmVudHMub24odGhpcy5fc3BsaXRCdXR0b24sICdwb2ludGVyZG93bicsIHRoaXMuX29uUG9pbnRlckRvd24sIHRydWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250ZXh0dWFsTWVudVNwbGl0QnV0dG9uLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fYXN5bmMuZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLl9ldmVudHMuZGlzcG9zZSgpO1xuICAgIH07XG4gICAgQ29udGV4dHVhbE1lbnVTcGxpdEJ1dHRvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBpdGVtID0gX2EuaXRlbSwgY2xhc3NOYW1lcyA9IF9hLmNsYXNzTmFtZXMsIGluZGV4ID0gX2EuaW5kZXgsIGZvY3VzYWJsZUVsZW1lbnRJbmRleCA9IF9hLmZvY3VzYWJsZUVsZW1lbnRJbmRleCwgdG90YWxJdGVtQ291bnQgPSBfYS50b3RhbEl0ZW1Db3VudCwgaGFzQ2hlY2ttYXJrcyA9IF9hLmhhc0NoZWNrbWFya3MsIGhhc0ljb25zID0gX2EuaGFzSWNvbnMsIG9uSXRlbU1vdXNlTGVhdmUgPSBfYS5vbkl0ZW1Nb3VzZUxlYXZlLCBleHBhbmRlZE1lbnVJdGVtS2V5ID0gX2EuZXhwYW5kZWRNZW51SXRlbUtleTtcbiAgICAgICAgdmFyIGl0ZW1IYXNTdWJtZW51ID0gaGFzU3VibWVudShpdGVtKTtcbiAgICAgICAgdmFyIGtleXRpcFByb3BzID0gaXRlbS5rZXl0aXBQcm9wcztcbiAgICAgICAgaWYgKGtleXRpcFByb3BzKSB7XG4gICAgICAgICAgICBrZXl0aXBQcm9wcyA9IHRoaXMuX2dldE1lbW9pemVkTWVudUJ1dHRvbktleXRpcFByb3BzKGtleXRpcFByb3BzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGVjayBmb3IgYXJpYURlc2NyaXB0aW9uIHRvIHNldCB0aGUgX2FyaWFEZXNjcmlwdGlvbklkIGFuZCByZW5kZXIgYSBoaWRkZW4gc3BhbiB3aXRoXG4gICAgICAgIC8vIHRoZSBkZXNjcmlwdGlvbiBpbiBpdCB0byBiZSBhZGRlZCB0byBhcmlhRGVzY3JpYmVkQnlcbiAgICAgICAgdmFyIGFyaWFEZXNjcmlwdGlvbiA9IGl0ZW0uYXJpYURlc2NyaXB0aW9uO1xuICAgICAgICBpZiAoYXJpYURlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9hcmlhRGVzY3JpcHRpb25JZCA9IGdldElkKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KEtleXRpcERhdGEsIHsga2V5dGlwUHJvcHM6IGtleXRpcFByb3BzLCBkaXNhYmxlZDogaXNJdGVtRGlzYWJsZWQoaXRlbSkgfSwgZnVuY3Rpb24gKGtleXRpcEF0dHJpYnV0ZXMpIHsgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgXCJkYXRhLWt0cC10YXJnZXRcIjoga2V5dGlwQXR0cmlidXRlc1snZGF0YS1rdHAtdGFyZ2V0J10sIHJlZjogZnVuY3Rpb24gKHNwbGl0QnV0dG9uKSB7IHJldHVybiAoX3RoaXMuX3NwbGl0QnV0dG9uID0gc3BsaXRCdXR0b24pOyB9LCByb2xlOiBnZXRNZW51SXRlbUFyaWFSb2xlKGl0ZW0pLCBcImFyaWEtbGFiZWxcIjogaXRlbS5hcmlhTGFiZWwsIGNsYXNzTmFtZTogY2xhc3NOYW1lcy5zcGxpdENvbnRhaW5lciwgXCJhcmlhLWRpc2FibGVkXCI6IGlzSXRlbURpc2FibGVkKGl0ZW0pLCBcImFyaWEtZXhwYW5kZWRcIjogaXRlbUhhc1N1Ym1lbnUgPyBpdGVtLmtleSA9PT0gZXhwYW5kZWRNZW51SXRlbUtleSA6IHVuZGVmaW5lZCwgXCJhcmlhLWhhc3BvcHVwXCI6IHRydWUsIFwiYXJpYS1kZXNjcmliZWRieVwiOiBtZXJnZUFyaWFBdHRyaWJ1dGVWYWx1ZXMoYXJpYURlc2NyaXB0aW9uID8gX3RoaXMuX2FyaWFEZXNjcmlwdGlvbklkIDogdW5kZWZpbmVkLCBrZXl0aXBBdHRyaWJ1dGVzWydhcmlhLWRlc2NyaWJlZGJ5J10pLCBcImFyaWEtY2hlY2tlZFwiOiBpdGVtLmlzQ2hlY2tlZCB8fCBpdGVtLmNoZWNrZWQsIFwiYXJpYS1wb3NpbnNldFwiOiBmb2N1c2FibGVFbGVtZW50SW5kZXggKyAxLCBcImFyaWEtc2V0c2l6ZVwiOiB0b3RhbEl0ZW1Db3VudCwgb25Nb3VzZUVudGVyOiBfdGhpcy5fb25JdGVtTW91c2VFbnRlclByaW1hcnksIG9uTW91c2VMZWF2ZTogb25JdGVtTW91c2VMZWF2ZSA/IG9uSXRlbU1vdXNlTGVhdmUuYmluZChfdGhpcywgX19hc3NpZ24oX19hc3NpZ24oe30sIGl0ZW0pLCB7IHN1Yk1lbnVQcm9wczogbnVsbCwgaXRlbXM6IG51bGwgfSkpIDogdW5kZWZpbmVkLCBvbk1vdXNlTW92ZTogX3RoaXMuX29uSXRlbU1vdXNlTW92ZVByaW1hcnksIG9uS2V5RG93bjogX3RoaXMuX29uSXRlbUtleURvd24sIG9uQ2xpY2s6IF90aGlzLl9leGVjdXRlSXRlbUNsaWNrLCBvblRvdWNoU3RhcnQ6IF90aGlzLl9vblRvdWNoU3RhcnQsIHRhYkluZGV4OiAwLCBcImRhdGEtaXMtZm9jdXNhYmxlXCI6IHRydWUsIFwiYXJpYS1yb2xlZGVzY3JpcHRpb25cIjogaXRlbVsnYXJpYS1yb2xlZGVzY3JpcHRpb24nXSB9LFxuICAgICAgICAgICAgX3RoaXMuX3JlbmRlclNwbGl0UHJpbWFyeUJ1dHRvbihpdGVtLCBjbGFzc05hbWVzLCBpbmRleCwgaGFzQ2hlY2ttYXJrcywgaGFzSWNvbnMpLFxuICAgICAgICAgICAgX3RoaXMuX3JlbmRlclNwbGl0RGl2aWRlcihpdGVtKSxcbiAgICAgICAgICAgIF90aGlzLl9yZW5kZXJTcGxpdEljb25CdXR0b24oaXRlbSwgY2xhc3NOYW1lcywgaW5kZXgsIGtleXRpcEF0dHJpYnV0ZXMpLFxuICAgICAgICAgICAgX3RoaXMuX3JlbmRlckFyaWFEZXNjcmlwdGlvbihhcmlhRGVzY3JpcHRpb24sIGNsYXNzTmFtZXMuc2NyZWVuUmVhZGVyVGV4dCkpKTsgfSkpO1xuICAgIH07XG4gICAgQ29udGV4dHVhbE1lbnVTcGxpdEJ1dHRvbi5wcm90b3R5cGUuX3JlbmRlclNwbGl0UHJpbWFyeUJ1dHRvbiA9IGZ1bmN0aW9uIChpdGVtLCBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBjbGFzc05hbWVzLCBpbmRleCwgaGFzQ2hlY2ttYXJrcywgaGFzSWNvbnMpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgX2IgPSBfYS5jb250ZXh0dWFsTWVudUl0ZW1BcywgQ2hpbGRyZW5SZW5kZXJlciA9IF9iID09PSB2b2lkIDAgPyBDb250ZXh0dWFsTWVudUl0ZW0gOiBfYiwgb25JdGVtQ2xpY2sgPSBfYS5vbkl0ZW1DbGljaztcbiAgICAgICAgdmFyIGl0ZW1Qcm9wcyA9IHtcbiAgICAgICAgICAgIGtleTogaXRlbS5rZXksXG4gICAgICAgICAgICBkaXNhYmxlZDogaXNJdGVtRGlzYWJsZWQoaXRlbSkgfHwgaXRlbS5wcmltYXJ5RGlzYWJsZWQsXG4gICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvbiAqL1xuICAgICAgICAgICAgbmFtZTogaXRlbS5uYW1lLFxuICAgICAgICAgICAgdGV4dDogaXRlbS50ZXh0IHx8IGl0ZW0ubmFtZSxcbiAgICAgICAgICAgIHNlY29uZGFyeVRleHQ6IGl0ZW0uc2Vjb25kYXJ5VGV4dCxcbiAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb24gKi9cbiAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcy5zcGxpdFByaW1hcnksXG4gICAgICAgICAgICBjYW5DaGVjazogaXRlbS5jYW5DaGVjayxcbiAgICAgICAgICAgIGlzQ2hlY2tlZDogaXRlbS5pc0NoZWNrZWQsXG4gICAgICAgICAgICBjaGVja2VkOiBpdGVtLmNoZWNrZWQsXG4gICAgICAgICAgICBpY29uUHJvcHM6IGl0ZW0uaWNvblByb3BzLFxuICAgICAgICAgICAgb25SZW5kZXJJY29uOiBpdGVtLm9uUmVuZGVySWNvbixcbiAgICAgICAgICAgIGRhdGE6IGl0ZW0uZGF0YSxcbiAgICAgICAgICAgICdkYXRhLWlzLWZvY3VzYWJsZSc6IGZhbHNlLFxuICAgICAgICB9O1xuICAgICAgICB2YXIgaXRlbUNvbXBvbmVudFByb3BzID0gaXRlbS5pdGVtUHJvcHM7XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCBfX2Fzc2lnbih7fSwgZ2V0TmF0aXZlUHJvcHMoaXRlbVByb3BzLCBidXR0b25Qcm9wZXJ0aWVzKSksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENoaWxkcmVuUmVuZGVyZXIsIF9fYXNzaWduKHsgXCJkYXRhLWlzLWZvY3VzYWJsZVwiOiBmYWxzZSwgaXRlbTogaXRlbVByb3BzLCBjbGFzc05hbWVzOiBjbGFzc05hbWVzLCBpbmRleDogaW5kZXgsIG9uQ2hlY2ttYXJrQ2xpY2s6IGhhc0NoZWNrbWFya3MgJiYgb25JdGVtQ2xpY2sgPyBvbkl0ZW1DbGljayA6IHVuZGVmaW5lZCwgaGFzSWNvbnM6IGhhc0ljb25zIH0sIGl0ZW1Db21wb25lbnRQcm9wcykpKSk7XG4gICAgfTtcbiAgICBDb250ZXh0dWFsTWVudVNwbGl0QnV0dG9uLnByb3RvdHlwZS5fcmVuZGVyU3BsaXREaXZpZGVyID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgdmFyIGdldERpdmlkZXJDbGFzc05hbWVzID0gaXRlbS5nZXRTcGxpdEJ1dHRvblZlcnRpY2FsRGl2aWRlckNsYXNzTmFtZXMgfHwgZ2V0U3BsaXRCdXR0b25WZXJ0aWNhbERpdmlkZXJDbGFzc05hbWVzO1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChWZXJ0aWNhbERpdmlkZXIsIHsgZ2V0Q2xhc3NOYW1lczogZ2V0RGl2aWRlckNsYXNzTmFtZXMgfSk7XG4gICAgfTtcbiAgICBDb250ZXh0dWFsTWVudVNwbGl0QnV0dG9uLnByb3RvdHlwZS5fcmVuZGVyU3BsaXRJY29uQnV0dG9uID0gZnVuY3Rpb24gKGl0ZW0sIGNsYXNzTmFtZXMsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBpbmRleCwga2V5dGlwQXR0cmlidXRlcykge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBfYiA9IF9hLmNvbnRleHR1YWxNZW51SXRlbUFzLCBDaGlsZHJlblJlbmRlcmVyID0gX2IgPT09IHZvaWQgMCA/IENvbnRleHR1YWxNZW51SXRlbSA6IF9iLCBvbkl0ZW1Nb3VzZUxlYXZlID0gX2Eub25JdGVtTW91c2VMZWF2ZSwgb25JdGVtTW91c2VEb3duID0gX2Eub25JdGVtTW91c2VEb3duLCBvcGVuU3ViTWVudSA9IF9hLm9wZW5TdWJNZW51LCBkaXNtaXNzU3ViTWVudSA9IF9hLmRpc21pc3NTdWJNZW51LCBkaXNtaXNzTWVudSA9IF9hLmRpc21pc3NNZW51O1xuICAgICAgICB2YXIgaXRlbVByb3BzID0ge1xuICAgICAgICAgICAgb25DbGljazogdGhpcy5fb25JY29uSXRlbUNsaWNrLFxuICAgICAgICAgICAgZGlzYWJsZWQ6IGlzSXRlbURpc2FibGVkKGl0ZW0pLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzLnNwbGl0TWVudSxcbiAgICAgICAgICAgIHN1Yk1lbnVQcm9wczogaXRlbS5zdWJNZW51UHJvcHMsXG4gICAgICAgICAgICBzdWJtZW51SWNvblByb3BzOiBpdGVtLnN1Ym1lbnVJY29uUHJvcHMsXG4gICAgICAgICAgICBzcGxpdDogdHJ1ZSxcbiAgICAgICAgICAgIGtleTogaXRlbS5rZXksXG4gICAgICAgIH07XG4gICAgICAgIHZhciBidXR0b25Qcm9wcyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBnZXROYXRpdmVQcm9wcyhpdGVtUHJvcHMsIGJ1dHRvblByb3BlcnRpZXMpKSwge1xuICAgICAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLl9vbkl0ZW1Nb3VzZUVudGVySWNvbixcbiAgICAgICAgICAgIG9uTW91c2VMZWF2ZTogb25JdGVtTW91c2VMZWF2ZSA/IG9uSXRlbU1vdXNlTGVhdmUuYmluZCh0aGlzLCBpdGVtKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG9uTW91c2VEb3duOiBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb25JdGVtTW91c2VEb3duID8gb25JdGVtTW91c2VEb3duKGl0ZW0sIGV2KSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbk1vdXNlTW92ZTogdGhpcy5fb25JdGVtTW91c2VNb3ZlSWNvbixcbiAgICAgICAgICAgICdkYXRhLWlzLWZvY3VzYWJsZSc6IGZhbHNlLFxuICAgICAgICAgICAgJ2RhdGEta3RwLWV4ZWN1dGUtdGFyZ2V0Jzoga2V5dGlwQXR0cmlidXRlc1snZGF0YS1rdHAtZXhlY3V0ZS10YXJnZXQnXSxcbiAgICAgICAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgaXRlbUNvbXBvbmVudFByb3BzID0gaXRlbS5pdGVtUHJvcHM7XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCBfX2Fzc2lnbih7fSwgYnV0dG9uUHJvcHMpLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChDaGlsZHJlblJlbmRlcmVyLCBfX2Fzc2lnbih7IGNvbXBvbmVudFJlZjogaXRlbS5jb21wb25lbnRSZWYsIGl0ZW06IGl0ZW1Qcm9wcywgY2xhc3NOYW1lczogY2xhc3NOYW1lcywgaW5kZXg6IGluZGV4LCBoYXNJY29uczogZmFsc2UsIG9wZW5TdWJNZW51OiBvcGVuU3ViTWVudSwgZGlzbWlzc1N1Yk1lbnU6IGRpc21pc3NTdWJNZW51LCBkaXNtaXNzTWVudTogZGlzbWlzc01lbnUsIGdldFN1Ym1lbnVUYXJnZXQ6IHRoaXMuX2dldFN1Ym1lbnVUYXJnZXQgfSwgaXRlbUNvbXBvbmVudFByb3BzKSkpKTtcbiAgICB9O1xuICAgIENvbnRleHR1YWxNZW51U3BsaXRCdXR0b24ucHJvdG90eXBlLl9oYW5kbGVUb3VjaEFuZFBvaW50ZXJFdmVudCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgb25UYXAgPSB0aGlzLnByb3BzLm9uVGFwO1xuICAgICAgICBpZiAob25UYXApIHtcbiAgICAgICAgICAgIG9uVGFwKGV2KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgdGltZW91dCBmcm9tIGEgcHJldmlvdXMgdG91Y2gvcG9pbnRlciBldmVudFxuICAgICAgICAvLyBjYW5jZWwgdGhhdCB0aW1lb3V0IHNvIHdlIGNhbiBzZXQgYSBuZXcgb25lLlxuICAgICAgICBpZiAodGhpcy5fbGFzdFRvdWNoVGltZW91dElkKSB7XG4gICAgICAgICAgICB0aGlzLl9hc3luYy5jbGVhclRpbWVvdXQodGhpcy5fbGFzdFRvdWNoVGltZW91dElkKTtcbiAgICAgICAgICAgIHRoaXMuX2xhc3RUb3VjaFRpbWVvdXRJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcm9jZXNzaW5nVG91Y2ggPSB0cnVlO1xuICAgICAgICB0aGlzLl9sYXN0VG91Y2hUaW1lb3V0SWQgPSB0aGlzLl9hc3luYy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl9wcm9jZXNzaW5nVG91Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgIF90aGlzLl9sYXN0VG91Y2hUaW1lb3V0SWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0sIFRvdWNoSWRsZURlbGF5KTtcbiAgICB9O1xuICAgIHJldHVybiBDb250ZXh0dWFsTWVudVNwbGl0QnV0dG9uO1xufShDb250ZXh0dWFsTWVudUl0ZW1XcmFwcGVyKSk7XG5leHBvcnQgeyBDb250ZXh0dWFsTWVudVNwbGl0QnV0dG9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db250ZXh0dWFsTWVudVNwbGl0QnV0dG9uLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX2RlY29yYXRlLCBfX2V4dGVuZHMsIF9fc3ByZWFkQXJyYXlzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb250ZXh0dWFsTWVudUl0ZW1UeXBlLCB9IGZyb20gJy4vQ29udGV4dHVhbE1lbnUudHlwZXMnO1xuaW1wb3J0IHsgRGlyZWN0aW9uYWxIaW50IH0gZnJvbSAnLi4vLi4vY29tbW9uL0RpcmVjdGlvbmFsSGludCc7XG5pbXBvcnQgeyBGb2N1c1pvbmUsIEZvY3VzWm9uZURpcmVjdGlvbiwgRm9jdXNab25lVGFiYmFibGVFbGVtZW50cyB9IGZyb20gJy4uLy4uL0ZvY3VzWm9uZSc7XG5pbXBvcnQgeyBkaXZQcm9wZXJ0aWVzLCBnZXROYXRpdmVQcm9wcywgc2hhbGxvd0NvbXBhcmUsIHdhcm5EZXByZWNhdGlvbnMsIEFzeW5jLCBFdmVudEdyb3VwLCBhc3NpZ24sIGNsYXNzTmFtZXNGdW5jdGlvbiwgY3NzLCBnZXREb2N1bWVudCwgZ2V0Rmlyc3RGb2N1c2FibGUsIGdldElkLCBnZXRMYXN0Rm9jdXNhYmxlLCBnZXRSVEwsIGdldFdpbmRvdywgS2V5Q29kZXMsIHNob3VsZFdyYXBGb2N1cywgaXNJT1MsIGlzTWFjLCBpbml0aWFsaXplQ29tcG9uZW50UmVmLCBtZW1vaXplRnVuY3Rpb24sIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IGhhc1N1Ym1lbnUsIGdldElzQ2hlY2tlZCwgaXNJdGVtRGlzYWJsZWQgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvY29udGV4dHVhbE1lbnUvaW5kZXgnO1xuaW1wb3J0IHsgd2l0aFJlc3BvbnNpdmVNb2RlLCBSZXNwb25zaXZlTW9kZSB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy9kZWNvcmF0b3JzL3dpdGhSZXNwb25zaXZlTW9kZSc7XG5pbXBvcnQgeyBDYWxsb3V0IH0gZnJvbSAnLi4vLi4vQ2FsbG91dCc7XG5pbXBvcnQgeyBDb250ZXh0dWFsTWVudUl0ZW0gfSBmcm9tICcuL0NvbnRleHR1YWxNZW51SXRlbSc7XG5pbXBvcnQgeyBDb250ZXh0dWFsTWVudVNwbGl0QnV0dG9uLCBDb250ZXh0dWFsTWVudUJ1dHRvbiwgQ29udGV4dHVhbE1lbnVBbmNob3IsIH0gZnJvbSAnLi9Db250ZXh0dWFsTWVudUl0ZW1XcmFwcGVyL2luZGV4JztcbmltcG9ydCB7IGNvbmNhdFN0eWxlU2V0c1dpdGhQcm9wcyB9IGZyb20gJy4uLy4uL1N0eWxpbmcnO1xuaW1wb3J0IHsgZ2V0SXRlbVN0eWxlcyB9IGZyb20gJy4vQ29udGV4dHVhbE1lbnUuY2xhc3NOYW1lcyc7XG52YXIgZ2V0Q2xhc3NOYW1lcyA9IGNsYXNzTmFtZXNGdW5jdGlvbigpO1xudmFyIGdldENvbnRleHR1YWxNZW51SXRlbUNsYXNzTmFtZXMgPSBjbGFzc05hbWVzRnVuY3Rpb24oKTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdWJtZW51SXRlbXMoaXRlbSkge1xuICAgIHJldHVybiBpdGVtLnN1Yk1lbnVQcm9wcyA/IGl0ZW0uc3ViTWVudVByb3BzLml0ZW1zIDogaXRlbS5pdGVtcztcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgbGlzdCBvZiBtZW51IGl0ZW1zIGNhbiBjb250YWluIGEgY2hlY2tib3hcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbkFueU1lbnVJdGVtc0NoZWNrKGl0ZW1zKSB7XG4gICAgcmV0dXJuIGl0ZW1zLnNvbWUoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgaWYgKGl0ZW0uY2FuQ2hlY2spIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZSBpdGVtIGlzIGEgc2VjdGlvbiwgY2hlY2sgaWYgYW55IG9mIHRoZSBpdGVtcyBpbiB0aGUgc2VjdGlvbiBjYW4gY2hlY2suXG4gICAgICAgIGlmIChpdGVtLnNlY3Rpb25Qcm9wcyAmJiBpdGVtLnNlY3Rpb25Qcm9wcy5pdGVtcy5zb21lKGZ1bmN0aW9uIChzdWJtZW51SXRlbSkgeyByZXR1cm4gc3VibWVudUl0ZW0uY2FuQ2hlY2sgPT09IHRydWU7IH0pKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG59XG52YXIgTmF2aWdhdGlvbklkbGVEZWxheSA9IDI1MCAvKiBtcyAqLztcbnZhciBDT01QT05FTlRfTkFNRSA9ICdDb250ZXh0dWFsTWVudSc7XG52YXIgX2dldE1lbnVJdGVtU3R5bGVzRnVuY3Rpb24gPSBtZW1vaXplRnVuY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdHlsZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBzdHlsZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdHlsZVByb3BzKSB7XG4gICAgICAgIHJldHVybiBjb25jYXRTdHlsZVNldHNXaXRoUHJvcHMuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5cyhbc3R5bGVQcm9wcywgZ2V0SXRlbVN0eWxlc10sIHN0eWxlcykpO1xuICAgIH07XG59KTtcbnZhciBDb250ZXh0dWFsTWVudUJhc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvbnRleHR1YWxNZW51QmFzZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb250ZXh0dWFsTWVudUJhc2UocHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9tb3VudGVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmRpc21pc3MgPSBmdW5jdGlvbiAoZXYsIGRpc21pc3NBbGwpIHtcbiAgICAgICAgICAgIHZhciBvbkRpc21pc3MgPSBfdGhpcy5wcm9wcy5vbkRpc21pc3M7XG4gICAgICAgICAgICBpZiAob25EaXNtaXNzKSB7XG4gICAgICAgICAgICAgICAgb25EaXNtaXNzKGV2LCBkaXNtaXNzQWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX3RyeUZvY3VzUHJldmlvdXNBY3RpdmVFbGVtZW50ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5vblJlc3RvcmVGb2N1cykge1xuICAgICAgICAgICAgICAgIF90aGlzLnByb3BzLm9uUmVzdG9yZUZvY3VzKG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5jb250YWluc0ZvY3VzICYmIF90aGlzLl9wcmV2aW91c0FjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlIGZvY3VzIG1ldGhvZCBhY3R1YWxseSBleGlzdHNcbiAgICAgICAgICAgICAgICAgICAgLy8gSW4gc29tZSBjYXNlcyB0aGUgb2JqZWN0IG1pZ2h0IGV4aXN0IGJ1dCBub3QgYmUgYSByZWFsIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgcHJpbWFyaWx5IGZvciBJRSAxMSBhbmQgc2hvdWxkIGJlIHJlbW92ZWQgb25jZSBJRSAxMSBpcyBubyBsb25nZXIgaW4gdXNlLlxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX3ByZXZpb3VzQWN0aXZlRWxlbWVudC5mb2N1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3ByZXZpb3VzQWN0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25SZW5kZXJNZW51TGlzdCA9IGZ1bmN0aW9uIChtZW51TGlzdFByb3BzLCBkZWZhdWx0UmVuZGVyKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXhDb3JyZWN0aW9uID0gMDtcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IG1lbnVMaXN0UHJvcHMuaXRlbXMsIHRvdGFsSXRlbUNvdW50ID0gbWVudUxpc3RQcm9wcy50b3RhbEl0ZW1Db3VudCwgaGFzQ2hlY2ttYXJrcyA9IG1lbnVMaXN0UHJvcHMuaGFzQ2hlY2ttYXJrcywgaGFzSWNvbnMgPSBtZW51TGlzdFByb3BzLmhhc0ljb25zLCByb2xlID0gbWVudUxpc3RQcm9wcy5yb2xlO1xuICAgICAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwidWxcIiwgeyBjbGFzc05hbWU6IF90aGlzLl9jbGFzc05hbWVzLmxpc3QsIG9uS2V5RG93bjogX3RoaXMuX29uS2V5RG93biwgb25LZXlVcDogX3RoaXMuX29uS2V5VXAsIHJvbGU6IChyb2xlICE9PSBudWxsICYmIHJvbGUgIT09IHZvaWQgMCA/IHJvbGUgOiAnbWVudScpIH0sIGl0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWVudUl0ZW0gPSBfdGhpcy5fcmVuZGVyTWVudUl0ZW0oaXRlbSwgaW5kZXgsIGluZGV4Q29ycmVjdGlvbiwgdG90YWxJdGVtQ291bnQsIGhhc0NoZWNrbWFya3MsIGhhc0ljb25zKTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5pdGVtVHlwZSAhPT0gQ29udGV4dHVhbE1lbnVJdGVtVHlwZS5EaXZpZGVyICYmIGl0ZW0uaXRlbVR5cGUgIT09IENvbnRleHR1YWxNZW51SXRlbVR5cGUuSGVhZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleEluY3JlYXNlID0gaXRlbS5jdXN0b21PblJlbmRlckxpc3RMZW5ndGggPyBpdGVtLmN1c3RvbU9uUmVuZGVyTGlzdExlbmd0aCA6IDE7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4Q29ycmVjdGlvbiArPSBpbmRleEluY3JlYXNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbWVudUl0ZW07XG4gICAgICAgICAgICB9KSkpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogISEhSU1QT1JUQU5UISEhIEF2b2lkIG11dGF0aW5nIGBpdGVtOiBJQ29udGV4dHVhbE1lbnVJdGVtYCBhcmd1bWVudC4gSXQgd2lsbFxuICAgICAgICAgKiBjYXVzZSB0aGUgbWVudSBpdGVtcyB0byBhbHdheXMgcmUtcmVuZGVyIGJlY2F1c2UgdGhlIGNvbXBvbmVudCB1cGRhdGUgaXMgYmFzZWQgb24gc2hhbGxvdyBjb21wYXJpc29uLlxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuX3JlbmRlck1lbnVJdGVtID0gZnVuY3Rpb24gKGl0ZW0sIGluZGV4LCBmb2N1c2FibGVFbGVtZW50SW5kZXgsIHRvdGFsSXRlbUNvdW50LCBoYXNDaGVja21hcmtzLCBoYXNJY29ucykge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgdmFyIHJlbmRlcmVkSXRlbXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBpY29uUHJvcHMgPSBpdGVtLmljb25Qcm9wcyB8fCB7IGljb25OYW1lOiAnTm9uZScgfTtcbiAgICAgICAgICAgIHZhciBnZXRJdGVtQ2xhc3NOYW1lcyA9IGl0ZW0uZ2V0SXRlbUNsYXNzTmFtZXMsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgIGl0ZW1Qcm9wcyA9IGl0ZW0uaXRlbVByb3BzO1xuICAgICAgICAgICAgdmFyIHN0eWxlcyA9IGl0ZW1Qcm9wcyA/IGl0ZW1Qcm9wcy5zdHlsZXMgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAvLyBXZSBvbmx5IHNlbmQgYSBkaXZpZGVyQ2xhc3NOYW1lIHdoZW4gdGhlIGl0ZW0gdG8gYmUgcmVuZGVyZWQgaXMgYSBkaXZpZGVyLlxuICAgICAgICAgICAgLy8gRm9yIGFsbCBvdGhlciBjYXNlcywgdGhlIGRlZmF1bHQgZGl2aWRlciBzdHlsZSBpcyB1c2VkLlxuICAgICAgICAgICAgdmFyIGRpdmlkZXJDbGFzc05hbWUgPSBpdGVtLml0ZW1UeXBlID09PSBDb250ZXh0dWFsTWVudUl0ZW1UeXBlLkRpdmlkZXIgPyBpdGVtLmNsYXNzTmFtZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHZhciBzdWJNZW51SWNvbkNsYXNzTmFtZSA9IGl0ZW0uc3VibWVudUljb25Qcm9wcyA/IGl0ZW0uc3VibWVudUljb25Qcm9wcy5jbGFzc05hbWUgOiAnJztcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgdmFyIGl0ZW1DbGFzc05hbWVzO1xuICAgICAgICAgICAgLy8gSUNvbnRleHR1YWxNZW51SXRlbSNnZXRJdGVtQ2xhc3NOYW1lcyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSB1c2VzIG1lcmdlU3R5bGVzIGZvciBjbGFzcyBuYW1lcy5cbiAgICAgICAgICAgIGlmIChnZXRJdGVtQ2xhc3NOYW1lcykge1xuICAgICAgICAgICAgICAgIGl0ZW1DbGFzc05hbWVzID0gZ2V0SXRlbUNsYXNzTmFtZXMoX3RoaXMucHJvcHMudGhlbWUsIGlzSXRlbURpc2FibGVkKGl0ZW0pLCBfdGhpcy5zdGF0ZS5leHBhbmRlZE1lbnVJdGVtS2V5ID09PSBpdGVtLmtleSwgISFnZXRJc0NoZWNrZWQoaXRlbSksICEhaXRlbS5ocmVmLCBpY29uUHJvcHMuaWNvbk5hbWUgIT09ICdOb25lJywgaXRlbS5jbGFzc05hbWUsIGRpdmlkZXJDbGFzc05hbWUsIGljb25Qcm9wcy5jbGFzc05hbWUsIHN1Yk1lbnVJY29uQ2xhc3NOYW1lLCBpdGVtLnByaW1hcnlEaXNhYmxlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbVN0eWxlUHJvcHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHRoZW1lOiBfdGhpcy5wcm9wcy50aGVtZSxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGlzSXRlbURpc2FibGVkKGl0ZW0pLFxuICAgICAgICAgICAgICAgICAgICBleHBhbmRlZDogX3RoaXMuc3RhdGUuZXhwYW5kZWRNZW51SXRlbUtleSA9PT0gaXRlbS5rZXksXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ6ICEhZ2V0SXNDaGVja2VkKGl0ZW0pLFxuICAgICAgICAgICAgICAgICAgICBpc0FuY2hvckxpbms6ICEhaXRlbS5ocmVmLFxuICAgICAgICAgICAgICAgICAgICBrbm93bkljb246IGljb25Qcm9wcy5pY29uTmFtZSAhPT0gJ05vbmUnLFxuICAgICAgICAgICAgICAgICAgICBpdGVtQ2xhc3NOYW1lOiBpdGVtLmNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgZGl2aWRlckNsYXNzTmFtZTogZGl2aWRlckNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgaWNvbkNsYXNzTmFtZTogaWNvblByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgc3ViTWVudUNsYXNzTmFtZTogc3ViTWVudUljb25DbGFzc05hbWUsXG4gICAgICAgICAgICAgICAgICAgIHByaW1hcnlEaXNhYmxlZDogaXRlbS5wcmltYXJ5RGlzYWJsZWQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGdlbmVyYXRlIGRlZmF1bHQgc3R5bGVzIHRoZW4gb3ZlcnJpZGUgaWYgc3R5bGVzIGFyZSBwcm92aWRlZFxuICAgICAgICAgICAgICAgIC8vIHNpbmNlIHRoZSBDb250ZXh0dWFsTWVudSBjdXJyZW50bHkgaGFuZGxlcyBpdGVtIGNsYXNzTmFtZXMuXG4gICAgICAgICAgICAgICAgaXRlbUNsYXNzTmFtZXMgPSBnZXRDb250ZXh0dWFsTWVudUl0ZW1DbGFzc05hbWVzKF9nZXRNZW51SXRlbVN0eWxlc0Z1bmN0aW9uKChfYSA9IF90aGlzLl9jbGFzc05hbWVzLnN1YkNvbXBvbmVudFN0eWxlcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1lbnVJdGVtLCBzdHlsZXMpLCBpdGVtU3R5bGVQcm9wcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgIGlmIChpdGVtLnRleHQgPT09ICctJyB8fCBpdGVtLm5hbWUgPT09ICctJykge1xuICAgICAgICAgICAgICAgIGl0ZW0uaXRlbVR5cGUgPSBDb250ZXh0dWFsTWVudUl0ZW1UeXBlLkRpdmlkZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKGl0ZW0uaXRlbVR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIENvbnRleHR1YWxNZW51SXRlbVR5cGUuRGl2aWRlcjpcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZWRJdGVtcy5wdXNoKF90aGlzLl9yZW5kZXJTZXBhcmF0b3IoaW5kZXgsIGl0ZW1DbGFzc05hbWVzKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgQ29udGV4dHVhbE1lbnVJdGVtVHlwZS5IZWFkZXI6XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcmVkSXRlbXMucHVzaChfdGhpcy5fcmVuZGVyU2VwYXJhdG9yKGluZGV4LCBpdGVtQ2xhc3NOYW1lcykpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVySXRlbSA9IF90aGlzLl9yZW5kZXJIZWFkZXJNZW51SXRlbShpdGVtLCBpdGVtQ2xhc3NOYW1lcywgaW5kZXgsIGhhc0NoZWNrbWFya3MsIGhhc0ljb25zKTtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZWRJdGVtcy5wdXNoKF90aGlzLl9yZW5kZXJMaXN0SXRlbShoZWFkZXJJdGVtLCBpdGVtLmtleSB8fCBpbmRleCwgaXRlbUNsYXNzTmFtZXMsIGl0ZW0udGl0bGUpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBDb250ZXh0dWFsTWVudUl0ZW1UeXBlLlNlY3Rpb246XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcmVkSXRlbXMucHVzaChfdGhpcy5fcmVuZGVyU2VjdGlvbkl0ZW0oaXRlbSwgaXRlbUNsYXNzTmFtZXMsIGluZGV4LCBoYXNDaGVja21hcmtzLCBoYXNJY29ucykpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVudUl0ZW0gPSBfdGhpcy5fcmVuZGVyTm9ybWFsSXRlbShpdGVtLCBpdGVtQ2xhc3NOYW1lcywgaW5kZXgsIGZvY3VzYWJsZUVsZW1lbnRJbmRleCwgdG90YWxJdGVtQ291bnQsIGhhc0NoZWNrbWFya3MsIGhhc0ljb25zKTtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZWRJdGVtcy5wdXNoKF90aGlzLl9yZW5kZXJMaXN0SXRlbShtZW51SXRlbSwgaXRlbS5rZXkgfHwgaW5kZXgsIGl0ZW1DbGFzc05hbWVzLCBpdGVtLnRpdGxlKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU2luY2UgbXVsdGlwbGUgbm9kZXMgKmNvdWxkKiBiZSByZW5kZXJlZCwgd3JhcCB0aGVtIGFsbCBpbiBhIGZyYWdtZW50IHdpdGggdGhpcyBpdGVtJ3Mga2V5LlxuICAgICAgICAgICAgLy8gVGhpcyBlbnN1cmVzIHRoZSByZWNvbmNpbGVyIGhhbmRsZXMgbXVsdGktaXRlbSBvdXRwdXQgcGVyLW5vZGUgY29ycmVjdGx5IGFuZCBkb2VzIG5vdCByZS1tb3VudCBjb250ZW50LlxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIHsga2V5OiBpdGVtLmtleSB9LCByZW5kZXJlZEl0ZW1zKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX2RlZmF1bHRNZW51SXRlbVJlbmRlcmVyID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGl0ZW0uaW5kZXgsIGZvY3VzYWJsZUVsZW1lbnRJbmRleCA9IGl0ZW0uZm9jdXNhYmxlRWxlbWVudEluZGV4LCB0b3RhbEl0ZW1Db3VudCA9IGl0ZW0udG90YWxJdGVtQ291bnQsIGhhc0NoZWNrbWFya3MgPSBpdGVtLmhhc0NoZWNrbWFya3MsIGhhc0ljb25zID0gaXRlbS5oYXNJY29ucztcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5fcmVuZGVyTWVudUl0ZW0oaXRlbSwgaW5kZXgsIGZvY3VzYWJsZUVsZW1lbnRJbmRleCwgdG90YWxJdGVtQ291bnQsIGhhc0NoZWNrbWFya3MsIGhhc0ljb25zKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uS2V5RG93biA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgLy8gVGFrZSBub3RlIGlmIHdlIGFyZSBwcm9jZXNzaW5nIGFuIGFsdCAob3B0aW9uKSBvciBtZXRhIChjb21tYW5kKSBrZXlkb3duLlxuICAgICAgICAgICAgLy8gU2VlIGNvbW1lbnQgaW4gX3Nob3VsZEhhbmRsZUtleVVwIGZvciByZWFzb25pbmcuXG4gICAgICAgICAgICBfdGhpcy5fbGFzdEtleURvd25XYXNBbHRPck1ldGEgPSBfdGhpcy5faXNBbHRPck1ldGEoZXYpO1xuICAgICAgICAgICAgLy8gT24gTWFjLCBwcmVzc2luZyBlc2NhcGUgZGlzbWlzc2VzIGFsbCBsZXZlbHMgb2YgbmF0aXZlIGNvbnRleHQgbWVudXNcbiAgICAgICAgICAgIHZhciBkaXNtaXNzQWxsTWVudXMgPSBldi53aGljaCA9PT0gS2V5Q29kZXMuZXNjYXBlICYmIChpc01hYygpIHx8IGlzSU9TKCkpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9rZXlIYW5kbGVyKGV2LCBfdGhpcy5fc2hvdWxkSGFuZGxlS2V5RG93biwgZGlzbWlzc0FsbE1lbnVzKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX3Nob3VsZEhhbmRsZUtleURvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHJldHVybiAoZXYud2hpY2ggPT09IEtleUNvZGVzLmVzY2FwZSB8fFxuICAgICAgICAgICAgICAgIF90aGlzLl9zaG91bGRDbG9zZVN1Yk1lbnUoZXYpIHx8XG4gICAgICAgICAgICAgICAgKGV2LndoaWNoID09PSBLZXlDb2Rlcy51cCAmJiAoZXYuYWx0S2V5IHx8IGV2Lm1ldGFLZXkpKSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbk1lbnVGb2N1c0NhcHR1cmUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5kZWxheVVwZGF0ZUZvY3VzT25Ib3Zlcikge1xuICAgICAgICAgICAgICAgIF90aGlzLl9zaG91bGRVcGRhdGVGb2N1c09uTW91c2VFdmVudCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbktleVVwID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuX2tleUhhbmRsZXIoZXYsIF90aGlzLl9zaG91bGRIYW5kbGVLZXlVcCwgdHJ1ZSAvKiBkaXNtaXNzQWxsTWVudXMgKi8pO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogV2UgY2xvc2UgdGhlIG1lbnUgb24ga2V5IHVwIG9ubHkgaWYgQUxMIG9mIHRoZSBmb2xsb3dpbmcgYXJlIHRydWU6XG4gICAgICAgICAqIC0gTW9zdCByZWNlbnQga2V5IGRvd24gd2FzIGFsdCBvciBtZXRhIChjb21tYW5kKVxuICAgICAgICAgKiAtIFRoZSBhbHQvbWV0YSBrZXkgZG93biB3YXMgTk9UIGZvbGxvd2VkIGJ5IHNvbWUgb3RoZXIga2V5IChzdWNoIGFzIGRvd24vdXAgYXJyb3cgdG9cbiAgICAgICAgICogICBleHBhbmQvY29sbGFwc2UgdGhlIG1lbnUpXG4gICAgICAgICAqIC0gV2UncmUgbm90IG9uIGEgTWFjIChvciBpT1MpXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgaXMgYmVjYXVzZSBvbiBXaW5kb3dzLCBwcmVzc2luZyBhbHQgbW92ZXMgZm9jdXMgdG8gdGhlIGFwcGxpY2F0aW9uIG1lbnUgYmFyIG9yIHNpbWlsYXIsXG4gICAgICAgICAqIGNsb3NpbmcgYW55IG9wZW4gY29udGV4dCBtZW51cy4gVGhlcmUgaXMgbm90IGEgc2ltaWxhciBiZWhhdmlvciBvbiBNYWNzLlxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuX3Nob3VsZEhhbmRsZUtleVVwID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIga2V5UHJlc3NJc0FsdE9yTWV0YUFsb25lID0gX3RoaXMuX2xhc3RLZXlEb3duV2FzQWx0T3JNZXRhICYmIF90aGlzLl9pc0FsdE9yTWV0YShldik7XG4gICAgICAgICAgICBfdGhpcy5fbGFzdEtleURvd25XYXNBbHRPck1ldGEgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiAhIWtleVByZXNzSXNBbHRPck1ldGFBbG9uZSAmJiAhKGlzSU9TKCkgfHwgaXNNYWMoKSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxscyBgc2hvdWxkSGFuZGxlS2V5YCB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUga2V5Ym9hcmQgZXZlbnQgc2hvdWxkIGJlIGhhbmRsZWQ7XG4gICAgICAgICAqIGlmIHNvLCBzdG9wcyBldmVudCBwcm9wYWdhdGlvbiBhbmQgZGlzbWlzc2VzIG1lbnUocykuXG4gICAgICAgICAqIEBwYXJhbSBldiAtIFRoZSBrZXlib2FyZCBldmVudC5cbiAgICAgICAgICogQHBhcmFtIHNob3VsZEhhbmRsZUtleSAtIFJldHVybnMgd2hldGhlciB3ZSBzaG91bGQgaGFuZGxlIHRoaXMga2V5Ym9hcmQgZXZlbnQuXG4gICAgICAgICAqIEBwYXJhbSBkaXNtaXNzQWxsTWVudXMgLSBJZiB0cnVlLCBkaXNtaXNzIGFsbCBtZW51cy4gT3RoZXJ3aXNlLCBkaXNtaXNzIG9ubHkgdGhlIGN1cnJlbnQgbWVudS5cbiAgICAgICAgICogT25seSBkb2VzIGFueXRoaW5nIGlmIGBzaG91bGRIYW5kbGVLZXlgIHJldHVybnMgdHJ1ZS5cbiAgICAgICAgICogQHJldHVybnMgV2hldGhlciB0aGUgZXZlbnQgd2FzIGhhbmRsZWQuXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5fa2V5SGFuZGxlciA9IGZ1bmN0aW9uIChldiwgc2hvdWxkSGFuZGxlS2V5LCBkaXNtaXNzQWxsTWVudXMpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGVkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoc2hvdWxkSGFuZGxlS2V5KGV2KSkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9mb2N1c2luZ1ByZXZpb3VzRWxlbWVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RoaXMuZGlzbWlzcyhldiwgZGlzbWlzc0FsbE1lbnVzKTtcbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIGhhbmRsZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZWQ7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVja3MgaWYgdGhlIHN1Ym1lbnUgc2hvdWxkIGJlIGNsb3NlZFxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuX3Nob3VsZENsb3NlU3ViTWVudSA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIHN1Ym1lbnVDbG9zZUtleSA9IGdldFJUTChfdGhpcy5wcm9wcy50aGVtZSkgPyBLZXlDb2Rlcy5yaWdodCA6IEtleUNvZGVzLmxlZnQ7XG4gICAgICAgICAgICBpZiAoZXYud2hpY2ggIT09IHN1Ym1lbnVDbG9zZUtleSB8fCAhX3RoaXMucHJvcHMuaXNTdWJNZW51KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIChfdGhpcy5fYWRqdXN0ZWRGb2N1c1pvbmVQcm9wcy5kaXJlY3Rpb24gPT09IEZvY3VzWm9uZURpcmVjdGlvbi52ZXJ0aWNhbCB8fFxuICAgICAgICAgICAgICAgICghIV90aGlzLl9hZGp1c3RlZEZvY3VzWm9uZVByb3BzLmNoZWNrRm9yTm9XcmFwICYmXG4gICAgICAgICAgICAgICAgICAgICFzaG91bGRXcmFwRm9jdXMoZXYudGFyZ2V0LCAnZGF0YS1uby1ob3Jpem9udGFsLXdyYXAnKSkpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25NZW51S2V5RG93biA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgLy8gTWFyayBhcyBoYW5kbGVkIGlmIG9uS2V5RG93biByZXR1cm5zIHRydWUgKGZvciBoYW5kbGluZyBjb2xsYXBzZSBjYXNlcylcbiAgICAgICAgICAgIC8vIG9yIGlmIHdlIGFyZSBhdHRlbXB0aW5nIHRvIGV4cGFuZCBhIHN1Ym1lbnVcbiAgICAgICAgICAgIHZhciBoYW5kbGVkID0gX3RoaXMuX29uS2V5RG93bihldik7XG4gICAgICAgICAgICBpZiAoaGFuZGxlZCB8fCAhX3RoaXMuX2hvc3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgbW9kaWZpZXIga2V5IGJlaW5nIHByZXNzZWQsIHdlIGRvIG5vdCB3YW50IHRvIG1vdmUgZm9jdXMuXG4gICAgICAgICAgICAvLyBPdGhlcndpc2UsIGhhbmRsZSB1cCBhbmQgZG93biBrZXlzLlxuICAgICAgICAgICAgdmFyIGhhc01vZGlmaWVyID0gISEoZXYuYWx0S2V5IHx8IGV2Lm1ldGFLZXkpO1xuICAgICAgICAgICAgdmFyIGlzVXAgPSBldi53aGljaCA9PT0gS2V5Q29kZXMudXA7XG4gICAgICAgICAgICB2YXIgaXNEb3duID0gZXYud2hpY2ggPT09IEtleUNvZGVzLmRvd247XG4gICAgICAgICAgICBpZiAoIWhhc01vZGlmaWVyICYmIChpc1VwIHx8IGlzRG93bikpIHtcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudFRvRm9jdXMgPSBpc1VwXG4gICAgICAgICAgICAgICAgICAgID8gZ2V0TGFzdEZvY3VzYWJsZShfdGhpcy5faG9zdCwgX3RoaXMuX2hvc3QubGFzdENoaWxkLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICA6IGdldEZpcnN0Rm9jdXNhYmxlKF90aGlzLl9ob3N0LCBfdGhpcy5faG9zdC5maXJzdENoaWxkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudFRvRm9jdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudFRvRm9jdXMuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogU2Nyb2xsIGhhbmRsZXIgZm9yIHRoZSBjYWxsb3V0IHRvIG1ha2Ugc3VyZSB0aGUgbW91c2UgZXZlbnRzXG4gICAgICAgICAqIGZvciB1cGRhdGluZyBmb2N1cyBhcmUgbm90IGludGVyYWN0aW5nIGR1cmluZyBzY3JvbGxcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLl9vblNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMuX2lzU2Nyb2xsSWRsZSAmJiBfdGhpcy5fc2Nyb2xsSWRsZVRpbWVvdXRJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2FzeW5jLmNsZWFyVGltZW91dChfdGhpcy5fc2Nyb2xsSWRsZVRpbWVvdXRJZCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3Njcm9sbElkbGVUaW1lb3V0SWQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5faXNTY3JvbGxJZGxlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5fc2Nyb2xsSWRsZVRpbWVvdXRJZCA9IF90aGlzLl9hc3luYy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5faXNTY3JvbGxJZGxlID0gdHJ1ZTtcbiAgICAgICAgICAgIH0sIE5hdmlnYXRpb25JZGxlRGVsYXkpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25JdGVtTW91c2VFbnRlckJhc2UgPSBmdW5jdGlvbiAoaXRlbSwgZXYsIHRhcmdldCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLl9zaG91bGRJZ25vcmVNb3VzZUV2ZW50KCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5fdXBkYXRlRm9jdXNPbk1vdXNlRXZlbnQoaXRlbSwgZXYsIHRhcmdldCk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbkl0ZW1Nb3VzZU1vdmVCYXNlID0gZnVuY3Rpb24gKGl0ZW0sIGV2LCB0YXJnZXQpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXRFbGVtZW50ID0gZXYuY3VycmVudFRhcmdldDtcbiAgICAgICAgICAgIC8vIEFsd2F5cyBkbyB0aGlzIGNoZWNrIHRvIG1ha2Ugc3VyZSB3ZSByZWNvcmQgYSBtb3VzZU1vdmUgaWYgbmVlZGVkIChldmVuIGlmIHdlIGFyZSB0aW1lZCBvdXQpXG4gICAgICAgICAgICBpZiAoX3RoaXMuX3Nob3VsZFVwZGF0ZUZvY3VzT25Nb3VzZUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2dvdE1vdXNlTW92ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIV90aGlzLl9pc1Njcm9sbElkbGUgfHxcbiAgICAgICAgICAgICAgICBfdGhpcy5fZW50ZXJUaW1lcklkICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICB0YXJnZXRFbGVtZW50ID09PSBfdGhpcy5fdGFyZ2V0V2luZG93LmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5fdXBkYXRlRm9jdXNPbk1vdXNlRXZlbnQoaXRlbSwgZXYsIHRhcmdldCk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbk1vdXNlSXRlbUxlYXZlID0gZnVuY3Rpb24gKGl0ZW0sIGV2KSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuX3Nob3VsZElnbm9yZU1vdXNlRXZlbnQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfdGhpcy5fZW50ZXJUaW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fYXN5bmMuY2xlYXJUaW1lb3V0KF90aGlzLl9lbnRlclRpbWVySWQpO1xuICAgICAgICAgICAgICAgIF90aGlzLl9lbnRlclRpbWVySWQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX3RoaXMuc3RhdGUuZXhwYW5kZWRNZW51SXRlbUtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJRTExIGZvY3VzKCkgbWV0aG9kIGZvcmNlcyBwYXJlbnRzIHRvIHNjcm9sbCB0byB0b3Agb2YgZWxlbWVudC5cbiAgICAgICAgICAgICAqIEVkZ2UgYW5kIElFIGV4cG9zZSBhIHNldEFjdGl2ZSgpIGZ1bmN0aW9uIGZvciBmb2N1c2FibGUgZGl2cyB0aGF0XG4gICAgICAgICAgICAgKiBzZXRzIHRoZSBwYWdlIGZvY3VzIGJ1dCBkb2VzIG5vdCBzY3JvbGwgdGhlIHBhcmVudCBlbGVtZW50LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoX3RoaXMuX2hvc3Quc2V0QWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2hvc3Quc2V0QWN0aXZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qIG5vLW9wICovXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2hvc3QuZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uSXRlbU1vdXNlRG93biA9IGZ1bmN0aW9uIChpdGVtLCBldikge1xuICAgICAgICAgICAgaWYgKGl0ZW0ub25Nb3VzZURvd24pIHtcbiAgICAgICAgICAgICAgICBpdGVtLm9uTW91c2VEb3duKGl0ZW0sIGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uSXRlbUNsaWNrID0gZnVuY3Rpb24gKGl0ZW0sIGV2KSB7XG4gICAgICAgICAgICBfdGhpcy5fb25JdGVtQ2xpY2tCYXNlKGl0ZW0sIGV2LCBldi5jdXJyZW50VGFyZ2V0KTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uSXRlbUNsaWNrQmFzZSA9IGZ1bmN0aW9uIChpdGVtLCBldiwgdGFyZ2V0KSB7XG4gICAgICAgICAgICB2YXIgaXRlbXMgPSBnZXRTdWJtZW51SXRlbXMoaXRlbSk7XG4gICAgICAgICAgICAvLyBDYW5jZWwgYSBhc3luYyBtZW51IGl0ZW0gaG92ZXIgdGltZW91dCBhY3Rpb24gZnJvbSBiZWluZyB0YWtlbiBhbmQgaW5zdGVhZFxuICAgICAgICAgICAgLy8ganVzdCB0cmlnZ2VyIHRoZSBjbGljayBldmVudCBpbnN0ZWFkLlxuICAgICAgICAgICAgX3RoaXMuX2NhbmNlbFN1Yk1lbnVUaW1lcigpO1xuICAgICAgICAgICAgaWYgKCFoYXNTdWJtZW51KGl0ZW0pICYmICghaXRlbXMgfHwgIWl0ZW1zLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGFuIGl0ZW0gd2l0aG91dCBhIG1lbnUuIENsaWNrIGl0LlxuICAgICAgICAgICAgICAgIF90aGlzLl9leGVjdXRlSXRlbUNsaWNrKGl0ZW0sIGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLmtleSAhPT0gX3RoaXMuc3RhdGUuZXhwYW5kZWRNZW51SXRlbUtleSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGhhcyBhIGNvbGxhcHNlZCBzdWIgbWVudS4gRXhwYW5kIGl0LlxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIEVkZ2UgKyBOYXJyYXRvciBhcmUgdXNlZCB0b2dldGhlciAocmVnYXJkbGVzcyBvZiBpZiB0aGUgYnV0dG9uIGlzIGluIGEgZm9ybSBvciBub3QpLCBwcmVzc2luZ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gXCJFbnRlclwiIGZpcmVzIHRoaXMgbWV0aG9kIGFuZCBub3QgX29uTWVudUtleURvd24uIENoZWNraW5nIGV2Lm5hdGl2ZUV2ZW50LmRldGFpbCBkaWZmZXJlbnRpYXRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmV0d2VlbiBhIHJlYWwgY2xpY2sgZXZlbnQgYW5kIGEga2V5cHJlc3MgZXZlbnQgKGRldGFpbCBzaG91bGQgYmUgdGhlIG51bWJlciBvZiBtb3VzZSBjbGlja3MpLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi4uUGxvdCB0d2lzdCEgRm9yIGEgcmVhbCBjbGljayBldmVudCBpbiBJRSAxMSwgZGV0YWlsIGlzIGFsd2F5cyAwIChFZGdlIHNldHMgaXQgcHJvcGVybHkgdG8gMSkuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTbyB3ZSBhbHNvIGNoZWNrIHRoZSBwb2ludGVyVHlwZSBwcm9wZXJ0eSwgd2hpY2ggYm90aCBFZGdlIGFuZCBJRSBzZXQgdG8gXCJtb3VzZVwiIGZvciByZWFsIGNsaWNrc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIFwiXCIgZm9yIHByZXNzaW5nIFwiRW50ZXJcIiB3aXRoIE5hcnJhdG9yIG9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWRCeU1vdXNlQ2xpY2s6IGV2Lm5hdGl2ZUV2ZW50LmRldGFpbCAhPT0gMCB8fCBldi5uYXRpdmVFdmVudC5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9vbkl0ZW1TdWJNZW51RXhwYW5kKGl0ZW0sIHRhcmdldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25BbmNob3JDbGljayA9IGZ1bmN0aW9uIChpdGVtLCBldikge1xuICAgICAgICAgICAgX3RoaXMuX2V4ZWN1dGVJdGVtQ2xpY2soaXRlbSwgZXYpO1xuICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9leGVjdXRlSXRlbUNsaWNrID0gZnVuY3Rpb24gKGl0ZW0sIGV2KSB7XG4gICAgICAgICAgICBpZiAoaXRlbS5kaXNhYmxlZCB8fCBpdGVtLmlzRGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZGlzbWlzcyA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGl0ZW0ub25DbGljaykge1xuICAgICAgICAgICAgICAgIGRpc21pc3MgPSAhIWl0ZW0ub25DbGljayhldiwgaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChfdGhpcy5wcm9wcy5vbkl0ZW1DbGljaykge1xuICAgICAgICAgICAgICAgIGRpc21pc3MgPSAhIV90aGlzLnByb3BzLm9uSXRlbUNsaWNrKGV2LCBpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkaXNtaXNzIHx8ICFldi5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZGlzbWlzcyhldiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBzaG91bGQgYmUgcmVtb3ZlZCB3aGVuZXZlciBwb3NzaWJsZS5cbiAgICAgICAgICAgICAgICAvLyBUaGlzIGVuc3VyZXMgdGhhdCB0aGUgaGlkZGVuIGRpc21pc3NhbCBhY3Rpb24gbWFpbnRhaW5zIHRoZSBzYW1lIGJlaGF2aW9yLlxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBtZW51IGlzIGJlaW5nIGRpc21pc3NlZCB0aGVuIHRoZSBwcmV2aW91c2x5IGZvY3VzZWQgZWxlbWVudCBzaG91bGRcbiAgICAgICAgICAgICAgICAvLyBnZXQgZm9jdXNlZCBzaW5jZSB0aGUgZGlzbWlzcyB3YXMgdHJpZ2dlcmVkIGJ5IGEgdXNlciBjbGljayBvbiBhbiBpdGVtXG4gICAgICAgICAgICAgICAgLy8gUmF0aGVyIHRoYW4gZm9jdXMgYmVpbmcgbG9zdC5cbiAgICAgICAgICAgICAgICBfdGhpcy5fZm9jdXNpbmdQcmV2aW91c0VsZW1lbnQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25JdGVtS2V5RG93biA9IGZ1bmN0aW9uIChpdGVtLCBldikge1xuICAgICAgICAgICAgdmFyIG9wZW5LZXkgPSBnZXRSVEwoX3RoaXMucHJvcHMudGhlbWUpID8gS2V5Q29kZXMubGVmdCA6IEtleUNvZGVzLnJpZ2h0O1xuICAgICAgICAgICAgaWYgKCFpdGVtLmRpc2FibGVkICYmXG4gICAgICAgICAgICAgICAgKGV2LndoaWNoID09PSBvcGVuS2V5IHx8IGV2LndoaWNoID09PSBLZXlDb2Rlcy5lbnRlciB8fCAoZXYud2hpY2ggPT09IEtleUNvZGVzLmRvd24gJiYgKGV2LmFsdEtleSB8fCBldi5tZXRhS2V5KSkpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBleHBhbmRlZEJ5TW91c2VDbGljazogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX29uSXRlbVN1Yk1lbnVFeHBhbmQoaXRlbSwgZXYuY3VycmVudFRhcmdldCk7XG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gQ2FuY2VsIGEgYXN5bmMgbWVudSBpdGVtIGhvdmVyIHRpbWVvdXQgYWN0aW9uIGZyb20gYmVpbmcgdGFrZW4gYW5kIGluc3RlYWRcbiAgICAgICAgLy8gZG8gbmV3IHVwY29taW5nIGJlaGF2aW9yXG4gICAgICAgIF90aGlzLl9jYW5jZWxTdWJNZW51VGltZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuX2VudGVyVGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2FzeW5jLmNsZWFyVGltZW91dChfdGhpcy5fZW50ZXJUaW1lcklkKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5fZW50ZXJUaW1lcklkID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25JdGVtU3ViTWVudUV4cGFuZCA9IGZ1bmN0aW9uIChpdGVtLCB0YXJnZXQpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5zdGF0ZS5leHBhbmRlZE1lbnVJdGVtS2V5ICE9PSBpdGVtLmtleSkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5zdGF0ZS5leHBhbmRlZE1lbnVJdGVtS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9vblN1Yk1lbnVEaXNtaXNzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEZvY3VzIHRoZSB0YXJnZXQgdG8gZW5zdXJlIHdoZW4gd2UgY2xvc2UgaXQsIHdlJ3JlIGZvY3VzaW5nIG9uIHRoZSBjb3JyZWN0IGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgdGFyZ2V0LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBleHBhbmRlZE1lbnVJdGVtS2V5OiBpdGVtLmtleSxcbiAgICAgICAgICAgICAgICAgICAgc3VibWVudVRhcmdldDogdGFyZ2V0LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgQVNZTkNIUk9OT1VTTFksIGFuZCBzbyB0aGVyZSBpcyBhIGNoYW5jZSBpdCBpcyBjYWxsZWRcbiAgICAgICAgICogYWZ0ZXIgdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQuIFRoZSBfbW91bnRlZCBwcm9wZXJ0eSBpcyBhZGRlZCB0byBwcmV2ZW50XG4gICAgICAgICAqIGZyb20gY2FsbGluZyBzZXRTdGF0ZSgpIGFmdGVyIHVubW91bnQuIERvIE5PVCBjb3B5IHRoaXMgcGF0dGVybiBpbiBzeW5jaHJvbm91c1xuICAgICAgICAgKiBjb2RlLlxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuX29uU3ViTWVudURpc21pc3MgPSBmdW5jdGlvbiAoZXYsIGRpc21pc3NBbGwpIHtcbiAgICAgICAgICAgIGlmIChkaXNtaXNzQWxsKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZGlzbWlzcyhldiwgZGlzbWlzc0FsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChfdGhpcy5fbW91bnRlZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgZGlzbWlzc2VkTWVudUl0ZW1LZXk6IF90aGlzLnN0YXRlLmV4cGFuZGVkTWVudUl0ZW1LZXksXG4gICAgICAgICAgICAgICAgICAgIGV4cGFuZGVkTWVudUl0ZW1LZXk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgc3VibWVudVRhcmdldDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fZ2V0U3ViTWVudUlkID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIHZhciBzdWJNZW51SWQgPSBfdGhpcy5zdGF0ZS5zdWJNZW51SWQ7XG4gICAgICAgICAgICBpZiAoaXRlbS5zdWJNZW51UHJvcHMgJiYgaXRlbS5zdWJNZW51UHJvcHMuaWQpIHtcbiAgICAgICAgICAgICAgICBzdWJNZW51SWQgPSBpdGVtLnN1Yk1lbnVQcm9wcy5pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdWJNZW51SWQ7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblBvaW50ZXJBbmRUb3VjaEV2ZW50ID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBfdGhpcy5fY2FuY2VsU3ViTWVudVRpbWVyKCk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9hc3luYyA9IG5ldyBBc3luYyhfdGhpcyk7XG4gICAgICAgIF90aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRHcm91cChfdGhpcyk7XG4gICAgICAgIGluaXRpYWxpemVDb21wb25lbnRSZWYoX3RoaXMpO1xuICAgICAgICB3YXJuRGVwcmVjYXRpb25zKENPTVBPTkVOVF9OQU1FLCBwcm9wcywge1xuICAgICAgICAgICAgZ2V0TWVudUNsYXNzTmFtZXM6ICdzdHlsZXMnLFxuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjb250ZXh0dWFsTWVudUl0ZW1zOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBzdWJNZW51SWQ6IGdldElkKCdDb250ZXh0dWFsTWVudScpLFxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5faWQgPSBwcm9wcy5pZCB8fCBnZXRJZCgnQ29udGV4dHVhbE1lbnUnKTtcbiAgICAgICAgX3RoaXMuX2ZvY3VzaW5nUHJldmlvdXNFbGVtZW50ID0gZmFsc2U7XG4gICAgICAgIF90aGlzLl9pc1Njcm9sbElkbGUgPSB0cnVlO1xuICAgICAgICBfdGhpcy5fc2hvdWxkVXBkYXRlRm9jdXNPbk1vdXNlRXZlbnQgPSAhX3RoaXMucHJvcHMuZGVsYXlVcGRhdGVGb2N1c09uSG92ZXI7XG4gICAgICAgIF90aGlzLl9nb3RNb3VzZU1vdmUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBDb250ZXh0dWFsTWVudUJhc2UucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdQcm9wcywgbmV3U3RhdGUpIHtcbiAgICAgICAgaWYgKCFuZXdQcm9wcy5zaG91bGRVcGRhdGVXaGVuSGlkZGVuICYmIHRoaXMucHJvcHMuaGlkZGVuICYmIG5ld1Byb3BzLmhpZGRlbikge1xuICAgICAgICAgICAgLy8gRG8gbm90IHVwZGF0ZSB3aGVuIGhpZGRlbi5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIXNoYWxsb3dDb21wYXJlKHRoaXMucHJvcHMsIG5ld1Byb3BzKSB8fCAhc2hhbGxvd0NvbXBhcmUodGhpcy5zdGF0ZSwgbmV3U3RhdGUpO1xuICAgIH07XG4gICAgQ29udGV4dHVhbE1lbnVCYXNlLnByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdQcm9wcykge1xuICAgICAgICBpZiAobmV3UHJvcHMudGFyZ2V0ICE9PSB0aGlzLnByb3BzLnRhcmdldCkge1xuICAgICAgICAgICAgdmFyIG5ld1RhcmdldCA9IG5ld1Byb3BzLnRhcmdldDtcbiAgICAgICAgICAgIHRoaXMuX3NldFRhcmdldFdpbmRvd0FuZEVsZW1lbnQobmV3VGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faXNIaWRkZW4obmV3UHJvcHMpICE9PSB0aGlzLl9pc0hpZGRlbih0aGlzLnByb3BzKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2lzSGlkZGVuKG5ld1Byb3BzKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uTWVudUNsb3NlZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25NZW51T3BlbmVkKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJldmlvdXNBY3RpdmVFbGVtZW50ID0gdGhpcy5fdGFyZ2V0V2luZG93XG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5fdGFyZ2V0V2luZG93LmRvY3VtZW50LmFjdGl2ZUVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld1Byb3BzLmRlbGF5VXBkYXRlRm9jdXNPbkhvdmVyICE9PSB0aGlzLnByb3BzLmRlbGF5VXBkYXRlRm9jdXNPbkhvdmVyKSB7XG4gICAgICAgICAgICAvLyB1cGRhdGUgc2hvdWxkVXBkYXRlRm9jdXNPbk1vdXNlRXZlbnQgdG8gZm9sbG93IHdoYXQgd2FzIHBhc3NlZCBpblxuICAgICAgICAgICAgdGhpcy5fc2hvdWxkVXBkYXRlRm9jdXNPbk1vdXNlRXZlbnQgPSAhbmV3UHJvcHMuZGVsYXlVcGRhdGVGb2N1c09uSG92ZXI7XG4gICAgICAgICAgICAvLyBJZiBzaG91bGRVcGRhdGVGb2N1c09uTW91c2VFdmVudCBpcyBmYWxzZSwgd2UgbmVlZCB0byByZXNldCBnb3RNb3VzZU1vdmUgdG8gZmFsc2VcbiAgICAgICAgICAgIHRoaXMuX2dvdE1vdXNlTW92ZSA9IHRoaXMuX3Nob3VsZFVwZGF0ZUZvY3VzT25Nb3VzZUV2ZW50ICYmIHRoaXMuX2dvdE1vdXNlTW92ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gSW52b2tlZCBvbmNlLCBib3RoIG9uIHRoZSBjbGllbnQgYW5kIHNlcnZlciwgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBpbml0aWFsIHJlbmRlcmluZyBvY2N1cnMuXG4gICAgQ29udGV4dHVhbE1lbnVCYXNlLnByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy5wcm9wcy50YXJnZXQ7XG4gICAgICAgIHRoaXMuX3NldFRhcmdldFdpbmRvd0FuZEVsZW1lbnQodGFyZ2V0KTtcbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLmhpZGRlbikge1xuICAgICAgICAgICAgdGhpcy5fcHJldmlvdXNBY3RpdmVFbGVtZW50ID0gdGhpcy5fdGFyZ2V0V2luZG93XG4gICAgICAgICAgICAgICAgPyB0aGlzLl90YXJnZXRXaW5kb3cuZG9jdW1lbnQuYWN0aXZlRWxlbWVudFxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBJbnZva2VkIG9uY2UsIG9ubHkgb24gdGhlIGNsaWVudCAobm90IG9uIHRoZSBzZXJ2ZXIpLCBpbW1lZGlhdGVseSBhZnRlciB0aGUgaW5pdGlhbCByZW5kZXJpbmcgb2NjdXJzLlxuICAgIENvbnRleHR1YWxNZW51QmFzZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5wcm9wcy5oaWRkZW4pIHtcbiAgICAgICAgICAgIHRoaXMuX29uTWVudU9wZW5lZCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21vdW50ZWQgPSB0cnVlO1xuICAgIH07XG4gICAgLy8gSW52b2tlZCBpbW1lZGlhdGVseSBiZWZvcmUgYSBjb21wb25lbnQgaXMgdW5tb3VudGVkIGZyb20gdGhlIERPTS5cbiAgICBDb250ZXh0dWFsTWVudUJhc2UucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5vbk1lbnVEaXNtaXNzZWQpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25NZW51RGlzbWlzc2VkKHRoaXMucHJvcHMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2V2ZW50cy5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuX2FzeW5jLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fbW91bnRlZCA9IGZhbHNlO1xuICAgIH07XG4gICAgQ29udGV4dHVhbE1lbnVCYXNlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBpc0JlYWtWaXNpYmxlID0gdGhpcy5wcm9wcy5pc0JlYWtWaXNpYmxlO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBpdGVtcyA9IF9hLml0ZW1zLCBsYWJlbEVsZW1lbnRJZCA9IF9hLmxhYmVsRWxlbWVudElkLCBpZCA9IF9hLmlkLCBjbGFzc05hbWUgPSBfYS5jbGFzc05hbWUsIGJlYWtXaWR0aCA9IF9hLmJlYWtXaWR0aCwgZGlyZWN0aW9uYWxIaW50ID0gX2EuZGlyZWN0aW9uYWxIaW50LCBkaXJlY3Rpb25hbEhpbnRGb3JSVEwgPSBfYS5kaXJlY3Rpb25hbEhpbnRGb3JSVEwsIGFsaWduVGFyZ2V0RWRnZSA9IF9hLmFsaWduVGFyZ2V0RWRnZSwgZ2FwU3BhY2UgPSBfYS5nYXBTcGFjZSwgY292ZXJUYXJnZXQgPSBfYS5jb3ZlclRhcmdldCwgYXJpYUxhYmVsID0gX2EuYXJpYUxhYmVsLCBkb05vdExheWVyID0gX2EuZG9Ob3RMYXllciwgdGFyZ2V0ID0gX2EudGFyZ2V0LCBib3VuZHMgPSBfYS5ib3VuZHMsIHVzZVRhcmdldFdpZHRoID0gX2EudXNlVGFyZ2V0V2lkdGgsIHVzZVRhcmdldEFzTWluV2lkdGggPSBfYS51c2VUYXJnZXRBc01pbldpZHRoLCBkaXJlY3Rpb25hbEhpbnRGaXhlZCA9IF9hLmRpcmVjdGlvbmFsSGludEZpeGVkLCBzaG91bGRGb2N1c09uTW91bnQgPSBfYS5zaG91bGRGb2N1c09uTW91bnQsIHNob3VsZEZvY3VzT25Db250YWluZXIgPSBfYS5zaG91bGRGb2N1c09uQ29udGFpbmVyLCB0aXRsZSA9IF9hLnRpdGxlLCBzdHlsZXMgPSBfYS5zdHlsZXMsIHRoZW1lID0gX2EudGhlbWUsIGNhbGxvdXRQcm9wcyA9IF9hLmNhbGxvdXRQcm9wcywgX2IgPSBfYS5vblJlbmRlclN1Yk1lbnUsIG9uUmVuZGVyU3ViTWVudSA9IF9iID09PSB2b2lkIDAgPyB0aGlzLl9vblJlbmRlclN1Yk1lbnUgOiBfYiwgX2MgPSBfYS5vblJlbmRlck1lbnVMaXN0LCBvblJlbmRlck1lbnVMaXN0ID0gX2MgPT09IHZvaWQgMCA/IHRoaXMuX29uUmVuZGVyTWVudUxpc3QgOiBfYywgZm9jdXNab25lUHJvcHMgPSBfYS5mb2N1c1pvbmVQcm9wcywgXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICBnZXRNZW51Q2xhc3NOYW1lcyA9IF9hLmdldE1lbnVDbGFzc05hbWVzO1xuICAgICAgICB0aGlzLl9jbGFzc05hbWVzID0gZ2V0TWVudUNsYXNzTmFtZXNcbiAgICAgICAgICAgID8gZ2V0TWVudUNsYXNzTmFtZXModGhlbWUsIGNsYXNzTmFtZSlcbiAgICAgICAgICAgIDogZ2V0Q2xhc3NOYW1lcyhzdHlsZXMsIHtcbiAgICAgICAgICAgICAgICB0aGVtZTogdGhlbWUsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgdmFyIGhhc0ljb25zID0gaXRlbXNIYXZlSWNvbnMoaXRlbXMpO1xuICAgICAgICBmdW5jdGlvbiBpdGVtc0hhdmVJY29ucyhjb250ZXh0dWFsTWVudUl0ZW1zKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGNvbnRleHR1YWxNZW51SXRlbXNfMSA9IGNvbnRleHR1YWxNZW51SXRlbXM7IF9pIDwgY29udGV4dHVhbE1lbnVJdGVtc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBpdGVtID0gY29udGV4dHVhbE1lbnVJdGVtc18xW19pXTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5pY29uUHJvcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpdGVtLml0ZW1UeXBlID09PSBDb250ZXh0dWFsTWVudUl0ZW1UeXBlLlNlY3Rpb24gJiZcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5zZWN0aW9uUHJvcHMgJiZcbiAgICAgICAgICAgICAgICAgICAgaXRlbXNIYXZlSWNvbnMoaXRlbS5zZWN0aW9uUHJvcHMuaXRlbXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hZGp1c3RlZEZvY3VzWm9uZVByb3BzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGZvY3VzWm9uZVByb3BzKSwgeyBkaXJlY3Rpb246IHRoaXMuX2dldEZvY3VzWm9uZURpcmVjdGlvbigpIH0pO1xuICAgICAgICB2YXIgaGFzQ2hlY2ttYXJrcyA9IGNhbkFueU1lbnVJdGVtc0NoZWNrKGl0ZW1zKTtcbiAgICAgICAgdmFyIHN1Ym1lbnVQcm9wcyA9IHRoaXMuc3RhdGUuZXhwYW5kZWRNZW51SXRlbUtleSAmJiB0aGlzLnByb3BzLmhpZGRlbiAhPT0gdHJ1ZSA/IHRoaXMuX2dldFN1Ym1lbnVQcm9wcygpIDogbnVsbDtcbiAgICAgICAgaXNCZWFrVmlzaWJsZSA9IGlzQmVha1Zpc2libGUgPT09IHVuZGVmaW5lZCA/IHRoaXMucHJvcHMucmVzcG9uc2l2ZU1vZGUgPD0gUmVzcG9uc2l2ZU1vZGUubWVkaXVtIDogaXNCZWFrVmlzaWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZW4gdXNlVGFyZ2V0V2lkdGggaXMgdHJ1ZSwgZ2V0IHRoZSB3aWR0aCBvZiB0aGUgdGFyZ2V0IGVsZW1lbnQgYW5kIGFwcGx5IGl0IGZvciB0aGUgY29udGV4dCBtZW51IGNvbnRhaW5lclxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGNvbnRleHRNZW51U3R5bGU7XG4gICAgICAgIHZhciB0YXJnZXRBc0h0bWxFbGVtZW50ID0gdGhpcy5fdGFyZ2V0O1xuICAgICAgICBpZiAoKHVzZVRhcmdldFdpZHRoIHx8IHVzZVRhcmdldEFzTWluV2lkdGgpICYmIHRhcmdldEFzSHRtbEVsZW1lbnQgJiYgdGFyZ2V0QXNIdG1sRWxlbWVudC5vZmZzZXRXaWR0aCkge1xuICAgICAgICAgICAgdmFyIHRhcmdldEJvdW5kaW5nUmVjdCA9IHRhcmdldEFzSHRtbEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0V2lkdGggPSB0YXJnZXRCb3VuZGluZ1JlY3Qud2lkdGggLSAyIC8qIEFjY291bnRzIGZvciAxcHggYm9yZGVyICovO1xuICAgICAgICAgICAgaWYgKHVzZVRhcmdldFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dE1lbnVTdHlsZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRhcmdldFdpZHRoLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh1c2VUYXJnZXRBc01pbldpZHRoKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dE1lbnVTdHlsZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgbWluV2lkdGg6IHRhcmdldFdpZHRoLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIG1lbnUgc2hvdWxkIG9ubHkgcmV0dXJuIGlmIGl0ZW1zIHdlcmUgcHJvdmlkZWQsIGlmIG5vIGl0ZW1zIHdlcmUgcHJvdmlkZWQgdGhlbiBpdCBzaG91bGQgbm90IGFwcGVhci5cbiAgICAgICAgaWYgKGl0ZW1zICYmIGl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciB0b3RhbEl0ZW1Db3VudCA9IDA7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGl0ZW1zXzEgPSBpdGVtczsgX2kgPCBpdGVtc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBpdGVtID0gaXRlbXNfMVtfaV07XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uaXRlbVR5cGUgIT09IENvbnRleHR1YWxNZW51SXRlbVR5cGUuRGl2aWRlciAmJiBpdGVtLml0ZW1UeXBlICE9PSBDb250ZXh0dWFsTWVudUl0ZW1UeXBlLkhlYWRlcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbUNvdW50ID0gaXRlbS5jdXN0b21PblJlbmRlckxpc3RMZW5ndGggPyBpdGVtLmN1c3RvbU9uUmVuZGVyTGlzdExlbmd0aCA6IDE7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsSXRlbUNvdW50ICs9IGl0ZW1Db3VudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY2FsbG91dFN0eWxlcyA9IHRoaXMuX2NsYXNzTmFtZXMuc3ViQ29tcG9uZW50U3R5bGVzXG4gICAgICAgICAgICAgICAgPyB0aGlzLl9jbGFzc05hbWVzLnN1YkNvbXBvbmVudFN0eWxlcy5jYWxsb3V0XG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2FsbG91dCwgX19hc3NpZ24oeyBzdHlsZXM6IGNhbGxvdXRTdHlsZXMsIG9uUmVzdG9yZUZvY3VzOiB0aGlzLl90cnlGb2N1c1ByZXZpb3VzQWN0aXZlRWxlbWVudCB9LCBjYWxsb3V0UHJvcHMsIHsgdGFyZ2V0OiB0YXJnZXQsIGlzQmVha1Zpc2libGU6IGlzQmVha1Zpc2libGUsIGJlYWtXaWR0aDogYmVha1dpZHRoLCBkaXJlY3Rpb25hbEhpbnQ6IGRpcmVjdGlvbmFsSGludCwgZGlyZWN0aW9uYWxIaW50Rm9yUlRMOiBkaXJlY3Rpb25hbEhpbnRGb3JSVEwsIGdhcFNwYWNlOiBnYXBTcGFjZSwgY292ZXJUYXJnZXQ6IGNvdmVyVGFyZ2V0LCBkb05vdExheWVyOiBkb05vdExheWVyLCBjbGFzc05hbWU6IGNzcygnbXMtQ29udGV4dHVhbE1lbnUtQ2FsbG91dCcsIGNhbGxvdXRQcm9wcyAmJiBjYWxsb3V0UHJvcHMuY2xhc3NOYW1lKSwgc2V0SW5pdGlhbEZvY3VzOiBzaG91bGRGb2N1c09uTW91bnQsIG9uRGlzbWlzczogdGhpcy5wcm9wcy5vbkRpc21pc3MsIG9uU2Nyb2xsOiB0aGlzLl9vblNjcm9sbCwgYm91bmRzOiBib3VuZHMsIGRpcmVjdGlvbmFsSGludEZpeGVkOiBkaXJlY3Rpb25hbEhpbnRGaXhlZCwgYWxpZ25UYXJnZXRFZGdlOiBhbGlnblRhcmdldEVkZ2UsIGhpZGRlbjogdGhpcy5wcm9wcy5oaWRkZW4gfSksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IFwiYXJpYS1sYWJlbFwiOiBhcmlhTGFiZWwsIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IGxhYmVsRWxlbWVudElkLCBzdHlsZTogY29udGV4dE1lbnVTdHlsZSwgcmVmOiBmdW5jdGlvbiAoaG9zdCkgeyByZXR1cm4gKF90aGlzLl9ob3N0ID0gaG9zdCk7IH0sIGlkOiBpZCwgY2xhc3NOYW1lOiB0aGlzLl9jbGFzc05hbWVzLmNvbnRhaW5lciwgdGFiSW5kZXg6IHNob3VsZEZvY3VzT25Db250YWluZXIgPyAwIDogLTEsIG9uS2V5RG93bjogdGhpcy5fb25NZW51S2V5RG93biwgb25LZXlVcDogdGhpcy5fb25LZXlVcCwgb25Gb2N1c0NhcHR1cmU6IHRoaXMuX29uTWVudUZvY3VzQ2FwdHVyZSB9LFxuICAgICAgICAgICAgICAgICAgICB0aXRsZSAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiB0aGlzLl9jbGFzc05hbWVzLnRpdGxlIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcIiBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICBpdGVtcyAmJiBpdGVtcy5sZW5ndGggPyAoUmVhY3QuY3JlYXRlRWxlbWVudChGb2N1c1pvbmUsIF9fYXNzaWduKHsgY2xhc3NOYW1lOiB0aGlzLl9jbGFzc05hbWVzLnJvb3QsIGlzQ2lyY3VsYXJOYXZpZ2F0aW9uOiB0cnVlLCBoYW5kbGVUYWJLZXk6IEZvY3VzWm9uZVRhYmJhYmxlRWxlbWVudHMuYWxsIH0sIHRoaXMuX2FkanVzdGVkRm9jdXNab25lUHJvcHMpLCBvblJlbmRlck1lbnVMaXN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBpdGVtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsSXRlbUNvdW50OiB0b3RhbEl0ZW1Db3VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0NoZWNrbWFya3M6IGhhc0NoZWNrbWFya3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNJY29uczogaGFzSWNvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0TWVudUl0ZW1SZW5kZXJlcjogdGhpcy5fZGVmYXVsdE1lbnVJdGVtUmVuZGVyZXIsXG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMuX29uUmVuZGVyTWVudUxpc3QpKSkgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBzdWJtZW51UHJvcHMgJiYgb25SZW5kZXJTdWJNZW51KHN1Ym1lbnVQcm9wcywgdGhpcy5fb25SZW5kZXJTdWJNZW51KSkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm4gd2hldGhlciB0aGUgY29udGV4dHVhbCBtZW51IGlzIGhpZGRlbi5cbiAgICAgKiBVbmRlZmluZWQgdmFsdWUgZm9yIGhpZGRlbiBpcyBlcXVpdmFsZW50IHRvIGhpZGRlbiBiZWluZyBmYWxzZS5cbiAgICAgKiBAcGFyYW0gcHJvcHMgLSBQcm9wcyBmb3IgdGhlIGNvbXBvbmVudFxuICAgICAqL1xuICAgIENvbnRleHR1YWxNZW51QmFzZS5wcm90b3R5cGUuX2lzSGlkZGVuID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHJldHVybiAhIXByb3BzLmhpZGRlbjtcbiAgICB9O1xuICAgIENvbnRleHR1YWxNZW51QmFzZS5wcm90b3R5cGUuX29uTWVudU9wZW5lZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRzLm9uKHRoaXMuX3RhcmdldFdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuZGlzbWlzcyk7XG4gICAgICAgIHRoaXMuX3Nob3VsZFVwZGF0ZUZvY3VzT25Nb3VzZUV2ZW50ID0gIXRoaXMucHJvcHMuZGVsYXlVcGRhdGVGb2N1c09uSG92ZXI7XG4gICAgICAgIHRoaXMuX2dvdE1vdXNlTW92ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByb3BzLm9uTWVudU9wZW5lZCAmJiB0aGlzLnByb3BzLm9uTWVudU9wZW5lZCh0aGlzLnByb3BzKTtcbiAgICB9O1xuICAgIENvbnRleHR1YWxNZW51QmFzZS5wcm90b3R5cGUuX29uTWVudUNsb3NlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRzLm9mZih0aGlzLl90YXJnZXRXaW5kb3csICdyZXNpemUnLCB0aGlzLmRpc21pc3MpO1xuICAgICAgICAvLyBUaGlzIGlzIGtlcHQgZm9yIGJhY2t3YXJkcyBjb21wYXRhYmlsaXR5IHdpdGggaGlkZGVuIGZvciByaWdodCBub3cuXG4gICAgICAgIC8vIFRoaXMgcHJlc2VydmVzIHRoZSB3YXkgdGhhdCB0aGlzIGJlaGF2ZWQgaW4gdGhlIHBhc3RcbiAgICAgICAgLy8gVE9ETyBmaW5kIGEgYmV0dGVyIHdheSB0byBoYW5kbGUgdGhpcyBieSB1c2luZyB0aGUgc2FtZSBjb252ZW50aW9ucyB0aGF0XG4gICAgICAgIC8vIFBvcHVwIHVzZXMgdG8gZGV0ZXJtaW5lIGlmIGZvY3VzIGlzIGNvbnRhaW5lZCB3aGVuIGRpc21pc3NhbCBvY2N1cnNcbiAgICAgICAgdGhpcy5fdHJ5Rm9jdXNQcmV2aW91c0FjdGl2ZUVsZW1lbnQoe1xuICAgICAgICAgICAgY29udGFpbnNGb2N1czogdGhpcy5fZm9jdXNpbmdQcmV2aW91c0VsZW1lbnQsXG4gICAgICAgICAgICBkb2N1bWVudENvbnRhaW5zRm9jdXM6IHRoaXMuX3RhcmdldFdpbmRvdy5kb2N1bWVudC5oYXNGb2N1cygpLFxuICAgICAgICAgICAgb3JpZ2luYWxFbGVtZW50OiB0aGlzLl9wcmV2aW91c0FjdGl2ZUVsZW1lbnQsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9mb2N1c2luZ1ByZXZpb3VzRWxlbWVudCA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5vbk1lbnVEaXNtaXNzZWQpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25NZW51RGlzbWlzc2VkKHRoaXMucHJvcHMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Nob3VsZFVwZGF0ZUZvY3VzT25Nb3VzZUV2ZW50ID0gIXRoaXMucHJvcHMuZGVsYXlVcGRhdGVGb2N1c09uSG92ZXI7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gZGlzbWlzcyBhbnkgc3VibWVudSByZWxhdGVkIHN0YXRlIHByb3BlcnRpZXMsXG4gICAgICAgIC8vIHNvIHRoYXQgd2hlbiB0aGUgbWVudSBpcyBzaG93biBhZ2FpbiwgdGhlIHN1Ym1lbnUgaXMgY29sbGFwc2VkXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZXhwYW5kZWRCeU1vdXNlQ2xpY2s6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGRpc21pc3NlZE1lbnVJdGVtS2V5OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBleHBhbmRlZE1lbnVJdGVtS2V5OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBzdWJtZW51VGFyZ2V0OiB1bmRlZmluZWQsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZm9jdXNab25lRGlyZWN0aW9uIGJ5IHVzaW5nIHRoZSBhcnJvd0RpcmVjdGlvbiBpZiBzcGVjaWZpZWQsXG4gICAgICogdGhlIGRpcmVjdGlvbiBzcGVjaWZpY2VkIGluIHRoZSBmb2N1c1pvbmVQcm9wcywgb3IgZGVmYXVsdHMgdG8gRm9jdXNab25lRGlyZWN0aW9uLnZlcnRpY2FsXG4gICAgICovXG4gICAgQ29udGV4dHVhbE1lbnVCYXNlLnByb3RvdHlwZS5fZ2V0Rm9jdXNab25lRGlyZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZm9jdXNab25lUHJvcHMgPSB0aGlzLnByb3BzLmZvY3VzWm9uZVByb3BzO1xuICAgICAgICByZXR1cm4gZm9jdXNab25lUHJvcHMgJiYgZm9jdXNab25lUHJvcHMuZGlyZWN0aW9uICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gZm9jdXNab25lUHJvcHMuZGlyZWN0aW9uXG4gICAgICAgICAgICA6IEZvY3VzWm9uZURpcmVjdGlvbi52ZXJ0aWNhbDtcbiAgICB9O1xuICAgIENvbnRleHR1YWxNZW51QmFzZS5wcm90b3R5cGUuX29uUmVuZGVyU3ViTWVudSA9IGZ1bmN0aW9uIChzdWJNZW51UHJvcHMsIGRlZmF1bHRSZW5kZXIpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0NvbnRleHR1YWxNZW51QmFzZTogb25SZW5kZXJTdWJNZW51IGNhbGxiYWNrIGlzIG51bGwgb3IgdW5kZWZpbmVkLiAnICtcbiAgICAgICAgICAgICdQbGVhc2UgZW5zdXJlIHRvIHNldCBgb25SZW5kZXJTdWJNZW51YCBwcm9wZXJ0eSBlaXRoZXIgbWFudWFsbHkgb3Igd2l0aCBgc3R5bGVkYCBoZWxwZXIuJyk7XG4gICAgfTtcbiAgICBDb250ZXh0dWFsTWVudUJhc2UucHJvdG90eXBlLl9yZW5kZXJTZWN0aW9uSXRlbSA9IGZ1bmN0aW9uIChzZWN0aW9uSXRlbSwgXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgbWVudUNsYXNzTmFtZXMsIGluZGV4LCBoYXNDaGVja21hcmtzLCBoYXNJY29ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBzZWN0aW9uUHJvcHMgPSBzZWN0aW9uSXRlbS5zZWN0aW9uUHJvcHM7XG4gICAgICAgIGlmICghc2VjdGlvblByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhlYWRlckl0ZW07XG4gICAgICAgIHZhciBncm91cFByb3BzO1xuICAgICAgICBpZiAoc2VjdGlvblByb3BzLnRpdGxlKSB7XG4gICAgICAgICAgICB2YXIgaGVhZGVyQ29udGV4dHVhbE1lbnVJdGVtID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdmFyIGFyaWFMYWJlbGxsZWRieSA9ICcnO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWN0aW9uUHJvcHMudGl0bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgLy8gU2luY2UgdGl0bGUgaXMgYSB1c2VyLWZhY2luZyBzdHJpbmcsIGl0IG5lZWRzIHRvIGJlIHN0cmlwcGVkXG4gICAgICAgICAgICAgICAgLy8gb2Ygd2hpdGVzcGFjZSBpbiBvcmRlciB0byBidWlsZCBhIHZhbGlkIGVsZW1lbnQgSURcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSB0aGlzLl9pZCArIHNlY3Rpb25Qcm9wcy50aXRsZS5yZXBsYWNlKC9cXHMvZywgJycpO1xuICAgICAgICAgICAgICAgIGhlYWRlckNvbnRleHR1YWxNZW51SXRlbSA9IHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiBcInNlY3Rpb24tXCIgKyBzZWN0aW9uUHJvcHMudGl0bGUgKyBcIi10aXRsZVwiLFxuICAgICAgICAgICAgICAgICAgICBpdGVtVHlwZTogQ29udGV4dHVhbE1lbnVJdGVtVHlwZS5IZWFkZXIsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHNlY3Rpb25Qcm9wcy50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYXJpYUxhYmVsbGxlZGJ5ID0gaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJDb250ZXh0dWFsTWVudUl0ZW0gPSBzZWN0aW9uUHJvcHMudGl0bGU7XG4gICAgICAgICAgICAgICAgYXJpYUxhYmVsbGxlZGJ5ID0gdGhpcy5faWQgKyAoKF9hID0gc2VjdGlvblByb3BzLnRpdGxlLnRleHQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZXBsYWNlKC9cXHMvZywgJycpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoZWFkZXJDb250ZXh0dWFsTWVudUl0ZW0pIHtcbiAgICAgICAgICAgICAgICBncm91cFByb3BzID0ge1xuICAgICAgICAgICAgICAgICAgICByb2xlOiAnZ3JvdXAnLFxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogYXJpYUxhYmVsbGxlZGJ5LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaGVhZGVySXRlbSA9IHRoaXMuX3JlbmRlckhlYWRlck1lbnVJdGVtKGhlYWRlckNvbnRleHR1YWxNZW51SXRlbSwgbWVudUNsYXNzTmFtZXMsIGluZGV4LCBoYXNDaGVja21hcmtzLCBoYXNJY29ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlY3Rpb25Qcm9wcy5pdGVtcyAmJiBzZWN0aW9uUHJvcHMuaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwibGlcIiwgeyByb2xlOiBcInByZXNlbnRhdGlvblwiLCBrZXk6IHNlY3Rpb25Qcm9wcy5rZXkgfHwgc2VjdGlvbkl0ZW0ua2V5IHx8IFwic2VjdGlvbi1cIiArIGluZGV4IH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfX2Fzc2lnbih7fSwgZ3JvdXBQcm9wcyksXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiLCB7IGNsYXNzTmFtZTogdGhpcy5fY2xhc3NOYW1lcy5saXN0IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uUHJvcHMudG9wRGl2aWRlciAmJiB0aGlzLl9yZW5kZXJTZXBhcmF0b3IoaW5kZXgsIG1lbnVDbGFzc05hbWVzLCB0cnVlLCB0cnVlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlckl0ZW0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJMaXN0SXRlbShoZWFkZXJJdGVtLCBzZWN0aW9uSXRlbS5rZXkgfHwgaW5kZXgsIG1lbnVDbGFzc05hbWVzLCBzZWN0aW9uSXRlbS50aXRsZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uUHJvcHMuaXRlbXMubWFwKGZ1bmN0aW9uIChjb250ZXh0dWFsTWVudUl0ZW0sIGl0ZW1zSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuX3JlbmRlck1lbnVJdGVtKGNvbnRleHR1YWxNZW51SXRlbSwgaXRlbXNJbmRleCwgaXRlbXNJbmRleCwgc2VjdGlvblByb3BzLml0ZW1zLmxlbmd0aCwgaGFzQ2hlY2ttYXJrcywgaGFzSWNvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uUHJvcHMuYm90dG9tRGl2aWRlciAmJiB0aGlzLl9yZW5kZXJTZXBhcmF0b3IoaW5kZXgsIG1lbnVDbGFzc05hbWVzLCBmYWxzZSwgdHJ1ZSkpKSkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250ZXh0dWFsTWVudUJhc2UucHJvdG90eXBlLl9yZW5kZXJMaXN0SXRlbSA9IGZ1bmN0aW9uIChjb250ZW50LCBrZXksIGNsYXNzTmFtZXMsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICB0aXRsZSkge1xuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCB7IHJvbGU6IFwicHJlc2VudGF0aW9uXCIsIHRpdGxlOiB0aXRsZSwga2V5OiBrZXksIGNsYXNzTmFtZTogY2xhc3NOYW1lcy5pdGVtIH0sIGNvbnRlbnQpKTtcbiAgICB9O1xuICAgIENvbnRleHR1YWxNZW51QmFzZS5wcm90b3R5cGUuX3JlbmRlclNlcGFyYXRvciA9IGZ1bmN0aW9uIChpbmRleCwgY2xhc3NOYW1lcywgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIHRvcCwgZnJvbVNlY3Rpb24pIHtcbiAgICAgICAgaWYgKGZyb21TZWN0aW9uIHx8IGluZGV4ID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwibGlcIiwgeyByb2xlOiBcInNlcGFyYXRvclwiLCBrZXk6ICdzZXBhcmF0b3ItJyArIGluZGV4ICsgKHRvcCA9PT0gdW5kZWZpbmVkID8gJycgOiB0b3AgPyAnLXRvcCcgOiAnLWJvdHRvbScpLCBjbGFzc05hbWU6IGNsYXNzTmFtZXMuZGl2aWRlciwgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIiB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBDb250ZXh0dWFsTWVudUJhc2UucHJvdG90eXBlLl9yZW5kZXJOb3JtYWxJdGVtID0gZnVuY3Rpb24gKGl0ZW0sIGNsYXNzTmFtZXMsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBpbmRleCwgZm9jdXNhYmxlRWxlbWVudEluZGV4LCB0b3RhbEl0ZW1Db3VudCwgaGFzQ2hlY2ttYXJrcywgaGFzSWNvbnMpIHtcbiAgICAgICAgaWYgKGl0ZW0ub25SZW5kZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtLm9uUmVuZGVyKF9fYXNzaWduKHsgJ2FyaWEtcG9zaW5zZXQnOiBmb2N1c2FibGVFbGVtZW50SW5kZXggKyAxLCAnYXJpYS1zZXRzaXplJzogdG90YWxJdGVtQ291bnQgfSwgaXRlbSksIHRoaXMuZGlzbWlzcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW0uaHJlZikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlbmRlckFuY2hvck1lbnVJdGVtKGl0ZW0sIGNsYXNzTmFtZXMsIGluZGV4LCBmb2N1c2FibGVFbGVtZW50SW5kZXgsIHRvdGFsSXRlbUNvdW50LCBoYXNDaGVja21hcmtzLCBoYXNJY29ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW0uc3BsaXQgJiYgaGFzU3VibWVudShpdGVtKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlbmRlclNwbGl0QnV0dG9uKGl0ZW0sIGNsYXNzTmFtZXMsIGluZGV4LCBmb2N1c2FibGVFbGVtZW50SW5kZXgsIHRvdGFsSXRlbUNvdW50LCBoYXNDaGVja21hcmtzLCBoYXNJY29ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlbmRlckJ1dHRvbkl0ZW0oaXRlbSwgY2xhc3NOYW1lcywgaW5kZXgsIGZvY3VzYWJsZUVsZW1lbnRJbmRleCwgdG90YWxJdGVtQ291bnQsIGhhc0NoZWNrbWFya3MsIGhhc0ljb25zKTtcbiAgICB9O1xuICAgIENvbnRleHR1YWxNZW51QmFzZS5wcm90b3R5cGUuX3JlbmRlckhlYWRlck1lbnVJdGVtID0gZnVuY3Rpb24gKGl0ZW0sIFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIGNsYXNzTmFtZXMsIGluZGV4LCBoYXNDaGVja21hcmtzLCBoYXNJY29ucykge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLmNvbnRleHR1YWxNZW51SXRlbUFzLCBDaGlsZHJlblJlbmRlcmVyID0gX2EgPT09IHZvaWQgMCA/IENvbnRleHR1YWxNZW51SXRlbSA6IF9hO1xuICAgICAgICB2YXIgaXRlbVByb3BzID0gaXRlbS5pdGVtUHJvcHMsIGlkID0gaXRlbS5pZDtcbiAgICAgICAgdmFyIGRpdkh0bWxQcm9wZXJ0aWVzID0gaXRlbVByb3BzICYmIGdldE5hdGl2ZVByb3BzKGl0ZW1Qcm9wcywgZGl2UHJvcGVydGllcyk7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9fYXNzaWduKHsgaWQ6IGlkLCBjbGFzc05hbWU6IHRoaXMuX2NsYXNzTmFtZXMuaGVhZGVyIH0sIGRpdkh0bWxQcm9wZXJ0aWVzLCB7IHN0eWxlOiBpdGVtLnN0eWxlIH0pLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChDaGlsZHJlblJlbmRlcmVyLCBfX2Fzc2lnbih7IGl0ZW06IGl0ZW0sIGNsYXNzTmFtZXM6IGNsYXNzTmFtZXMsIGluZGV4OiBpbmRleCwgb25DaGVja21hcmtDbGljazogaGFzQ2hlY2ttYXJrcyA/IHRoaXMuX29uSXRlbUNsaWNrIDogdW5kZWZpbmVkLCBoYXNJY29uczogaGFzSWNvbnMgfSwgaXRlbVByb3BzKSkpKTtcbiAgICB9O1xuICAgIENvbnRleHR1YWxNZW51QmFzZS5wcm90b3R5cGUuX3JlbmRlckFuY2hvck1lbnVJdGVtID0gZnVuY3Rpb24gKGl0ZW0sIFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIGNsYXNzTmFtZXMsIGluZGV4LCBmb2N1c2FibGVFbGVtZW50SW5kZXgsIHRvdGFsSXRlbUNvdW50LCBoYXNDaGVja21hcmtzLCBoYXNJY29ucykge1xuICAgICAgICB2YXIgY29udGV4dHVhbE1lbnVJdGVtQXMgPSB0aGlzLnByb3BzLmNvbnRleHR1YWxNZW51SXRlbUFzO1xuICAgICAgICB2YXIgZXhwYW5kZWRNZW51SXRlbUtleSA9IHRoaXMuc3RhdGUuZXhwYW5kZWRNZW51SXRlbUtleTtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHR1YWxNZW51QW5jaG9yLCB7IGl0ZW06IGl0ZW0sIGNsYXNzTmFtZXM6IGNsYXNzTmFtZXMsIGluZGV4OiBpbmRleCwgZm9jdXNhYmxlRWxlbWVudEluZGV4OiBmb2N1c2FibGVFbGVtZW50SW5kZXgsIHRvdGFsSXRlbUNvdW50OiB0b3RhbEl0ZW1Db3VudCwgaGFzQ2hlY2ttYXJrczogaGFzQ2hlY2ttYXJrcywgaGFzSWNvbnM6IGhhc0ljb25zLCBjb250ZXh0dWFsTWVudUl0ZW1BczogY29udGV4dHVhbE1lbnVJdGVtQXMsIG9uSXRlbU1vdXNlRW50ZXI6IHRoaXMuX29uSXRlbU1vdXNlRW50ZXJCYXNlLCBvbkl0ZW1Nb3VzZUxlYXZlOiB0aGlzLl9vbk1vdXNlSXRlbUxlYXZlLCBvbkl0ZW1Nb3VzZU1vdmU6IHRoaXMuX29uSXRlbU1vdXNlTW92ZUJhc2UsIG9uSXRlbU1vdXNlRG93bjogdGhpcy5fb25JdGVtTW91c2VEb3duLCBleGVjdXRlSXRlbUNsaWNrOiB0aGlzLl9leGVjdXRlSXRlbUNsaWNrLCBvbkl0ZW1DbGljazogdGhpcy5fb25BbmNob3JDbGljaywgb25JdGVtS2V5RG93bjogdGhpcy5fb25JdGVtS2V5RG93biwgZ2V0U3ViTWVudUlkOiB0aGlzLl9nZXRTdWJNZW51SWQsIGV4cGFuZGVkTWVudUl0ZW1LZXk6IGV4cGFuZGVkTWVudUl0ZW1LZXksIG9wZW5TdWJNZW51OiB0aGlzLl9vbkl0ZW1TdWJNZW51RXhwYW5kLCBkaXNtaXNzU3ViTWVudTogdGhpcy5fb25TdWJNZW51RGlzbWlzcywgZGlzbWlzc01lbnU6IHRoaXMuZGlzbWlzcyB9KSk7XG4gICAgfTtcbiAgICBDb250ZXh0dWFsTWVudUJhc2UucHJvdG90eXBlLl9yZW5kZXJCdXR0b25JdGVtID0gZnVuY3Rpb24gKGl0ZW0sIFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIGNsYXNzTmFtZXMsIGluZGV4LCBmb2N1c2FibGVFbGVtZW50SW5kZXgsIHRvdGFsSXRlbUNvdW50LCBoYXNDaGVja21hcmtzLCBoYXNJY29ucykge1xuICAgICAgICB2YXIgY29udGV4dHVhbE1lbnVJdGVtQXMgPSB0aGlzLnByb3BzLmNvbnRleHR1YWxNZW51SXRlbUFzO1xuICAgICAgICB2YXIgZXhwYW5kZWRNZW51SXRlbUtleSA9IHRoaXMuc3RhdGUuZXhwYW5kZWRNZW51SXRlbUtleTtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHR1YWxNZW51QnV0dG9uLCB7IGl0ZW06IGl0ZW0sIGNsYXNzTmFtZXM6IGNsYXNzTmFtZXMsIGluZGV4OiBpbmRleCwgZm9jdXNhYmxlRWxlbWVudEluZGV4OiBmb2N1c2FibGVFbGVtZW50SW5kZXgsIHRvdGFsSXRlbUNvdW50OiB0b3RhbEl0ZW1Db3VudCwgaGFzQ2hlY2ttYXJrczogaGFzQ2hlY2ttYXJrcywgaGFzSWNvbnM6IGhhc0ljb25zLCBjb250ZXh0dWFsTWVudUl0ZW1BczogY29udGV4dHVhbE1lbnVJdGVtQXMsIG9uSXRlbU1vdXNlRW50ZXI6IHRoaXMuX29uSXRlbU1vdXNlRW50ZXJCYXNlLCBvbkl0ZW1Nb3VzZUxlYXZlOiB0aGlzLl9vbk1vdXNlSXRlbUxlYXZlLCBvbkl0ZW1Nb3VzZU1vdmU6IHRoaXMuX29uSXRlbU1vdXNlTW92ZUJhc2UsIG9uSXRlbU1vdXNlRG93bjogdGhpcy5fb25JdGVtTW91c2VEb3duLCBleGVjdXRlSXRlbUNsaWNrOiB0aGlzLl9leGVjdXRlSXRlbUNsaWNrLCBvbkl0ZW1DbGljazogdGhpcy5fb25JdGVtQ2xpY2ssIG9uSXRlbUNsaWNrQmFzZTogdGhpcy5fb25JdGVtQ2xpY2tCYXNlLCBvbkl0ZW1LZXlEb3duOiB0aGlzLl9vbkl0ZW1LZXlEb3duLCBnZXRTdWJNZW51SWQ6IHRoaXMuX2dldFN1Yk1lbnVJZCwgZXhwYW5kZWRNZW51SXRlbUtleTogZXhwYW5kZWRNZW51SXRlbUtleSwgb3BlblN1Yk1lbnU6IHRoaXMuX29uSXRlbVN1Yk1lbnVFeHBhbmQsIGRpc21pc3NTdWJNZW51OiB0aGlzLl9vblN1Yk1lbnVEaXNtaXNzLCBkaXNtaXNzTWVudTogdGhpcy5kaXNtaXNzIH0pKTtcbiAgICB9O1xuICAgIENvbnRleHR1YWxNZW51QmFzZS5wcm90b3R5cGUuX3JlbmRlclNwbGl0QnV0dG9uID0gZnVuY3Rpb24gKGl0ZW0sIFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIGNsYXNzTmFtZXMsIGluZGV4LCBmb2N1c2FibGVFbGVtZW50SW5kZXgsIHRvdGFsSXRlbUNvdW50LCBoYXNDaGVja21hcmtzLCBoYXNJY29ucykge1xuICAgICAgICB2YXIgY29udGV4dHVhbE1lbnVJdGVtQXMgPSB0aGlzLnByb3BzLmNvbnRleHR1YWxNZW51SXRlbUFzO1xuICAgICAgICB2YXIgZXhwYW5kZWRNZW51SXRlbUtleSA9IHRoaXMuc3RhdGUuZXhwYW5kZWRNZW51SXRlbUtleTtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHR1YWxNZW51U3BsaXRCdXR0b24sIHsgaXRlbTogaXRlbSwgY2xhc3NOYW1lczogY2xhc3NOYW1lcywgaW5kZXg6IGluZGV4LCBmb2N1c2FibGVFbGVtZW50SW5kZXg6IGZvY3VzYWJsZUVsZW1lbnRJbmRleCwgdG90YWxJdGVtQ291bnQ6IHRvdGFsSXRlbUNvdW50LCBoYXNDaGVja21hcmtzOiBoYXNDaGVja21hcmtzLCBoYXNJY29uczogaGFzSWNvbnMsIGNvbnRleHR1YWxNZW51SXRlbUFzOiBjb250ZXh0dWFsTWVudUl0ZW1Bcywgb25JdGVtTW91c2VFbnRlcjogdGhpcy5fb25JdGVtTW91c2VFbnRlckJhc2UsIG9uSXRlbU1vdXNlTGVhdmU6IHRoaXMuX29uTW91c2VJdGVtTGVhdmUsIG9uSXRlbU1vdXNlTW92ZTogdGhpcy5fb25JdGVtTW91c2VNb3ZlQmFzZSwgb25JdGVtTW91c2VEb3duOiB0aGlzLl9vbkl0ZW1Nb3VzZURvd24sIGV4ZWN1dGVJdGVtQ2xpY2s6IHRoaXMuX2V4ZWN1dGVJdGVtQ2xpY2ssIG9uSXRlbUNsaWNrOiB0aGlzLl9vbkl0ZW1DbGljaywgb25JdGVtQ2xpY2tCYXNlOiB0aGlzLl9vbkl0ZW1DbGlja0Jhc2UsIG9uSXRlbUtleURvd246IHRoaXMuX29uSXRlbUtleURvd24sIG9wZW5TdWJNZW51OiB0aGlzLl9vbkl0ZW1TdWJNZW51RXhwYW5kLCBkaXNtaXNzU3ViTWVudTogdGhpcy5fb25TdWJNZW51RGlzbWlzcywgZGlzbWlzc01lbnU6IHRoaXMuZGlzbWlzcywgZXhwYW5kZWRNZW51SXRlbUtleTogZXhwYW5kZWRNZW51SXRlbUtleSwgb25UYXA6IHRoaXMuX29uUG9pbnRlckFuZFRvdWNoRXZlbnQgfSkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBrZXkgZm9yIHRoZSBldmVudCBpcyBhbHQgKE1hYyBvcHRpb24pIG9yIG1ldGEgKE1hYyBjb21tYW5kKS5cbiAgICAgKi9cbiAgICBDb250ZXh0dWFsTWVudUJhc2UucHJvdG90eXBlLl9pc0FsdE9yTWV0YSA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICByZXR1cm4gZXYud2hpY2ggPT09IEtleUNvZGVzLmFsdCB8fCBldi5rZXkgPT09ICdNZXRhJztcbiAgICB9O1xuICAgIENvbnRleHR1YWxNZW51QmFzZS5wcm90b3R5cGUuX3Nob3VsZElnbm9yZU1vdXNlRXZlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5faXNTY3JvbGxJZGxlIHx8ICF0aGlzLl9nb3RNb3VzZU1vdmU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHVwZGF0aW5nIGZvY3VzIHdoZW4gbW91c2VFbnRlciBvciBtb3VzZU1vdmUgZmlyZS5cbiAgICAgKiBBcyBwYXJ0IG9mIHVwZGF0aW5nIGZvY3VzLCBUaGlzIGZ1bmN0aW9uIHdpbGwgYWxzbyB1cGRhdGVcbiAgICAgKiB0aGUgZXhwYW5kL2NvbGxhcHNlIHN0YXRlIGFjY29yZGluZ2x5LlxuICAgICAqL1xuICAgIENvbnRleHR1YWxNZW51QmFzZS5wcm90b3R5cGUuX3VwZGF0ZUZvY3VzT25Nb3VzZUV2ZW50ID0gZnVuY3Rpb24gKGl0ZW0sIGV2LCB0YXJnZXQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHRhcmdldEVsZW1lbnQgPSB0YXJnZXQgPyB0YXJnZXQgOiBldi5jdXJyZW50VGFyZ2V0O1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLnN1Yk1lbnVIb3ZlckRlbGF5LCB0aW1lb3V0RHVyYXRpb24gPSBfYSA9PT0gdm9pZCAwID8gTmF2aWdhdGlvbklkbGVEZWxheSA6IF9hO1xuICAgICAgICBpZiAoaXRlbS5rZXkgPT09IHRoaXMuc3RhdGUuZXhwYW5kZWRNZW51SXRlbUtleSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9lbnRlclRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fYXN5bmMuY2xlYXJUaW1lb3V0KHRoaXMuX2VudGVyVGltZXJJZCk7XG4gICAgICAgICAgICB0aGlzLl9lbnRlclRpbWVySWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlIG1lbnUgaXMgbm90IGV4cGFuZGVkIHdlIGNhbiB1cGRhdGUgZm9jdXMgd2l0aG91dCBhbnkgZGVsYXlcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZXhwYW5kZWRNZW51SXRlbUtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0YXJnZXRFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGVsYXkgdXBkYXRpbmcgZXhwYW5kaW5nL2Rpc21pc3NpbmcgdGhlIHN1Ym1lbnVcbiAgICAgICAgLy8gYW5kIG9ubHkgc2V0IGZvY3VzIGlmIHdlIGhhdmUgbm90IGFscmVhZHkgZG9uZSBzb1xuICAgICAgICBpZiAoaGFzU3VibWVudShpdGVtKSkge1xuICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLl9lbnRlclRpbWVySWQgPSB0aGlzLl9hc3luYy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBleHBhbmRlZEJ5TW91c2VDbGljazogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBfdGhpcy5fb25JdGVtU3ViTWVudUV4cGFuZChpdGVtLCB0YXJnZXRFbGVtZW50KTtcbiAgICAgICAgICAgICAgICBfdGhpcy5fZW50ZXJUaW1lcklkID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSwgdGltZW91dER1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2VudGVyVGltZXJJZCA9IHRoaXMuX2FzeW5jLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9vblN1Yk1lbnVEaXNtaXNzKGV2KTtcbiAgICAgICAgICAgICAgICB0YXJnZXRFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2VudGVyVGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0sIHRpbWVvdXREdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnRleHR1YWxNZW51QmFzZS5wcm90b3R5cGUuX2dldFN1Ym1lbnVQcm9wcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5zdGF0ZSwgc3VibWVudVRhcmdldCA9IF9hLnN1Ym1lbnVUYXJnZXQsIGV4cGFuZGVkTWVudUl0ZW1LZXkgPSBfYS5leHBhbmRlZE1lbnVJdGVtS2V5O1xuICAgICAgICB2YXIgaXRlbSA9IHRoaXMuX2ZpbmRJdGVtQnlLZXkoZXhwYW5kZWRNZW51SXRlbUtleSk7XG4gICAgICAgIHZhciBzdWJtZW51UHJvcHMgPSBudWxsO1xuICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgc3VibWVudVByb3BzID0ge1xuICAgICAgICAgICAgICAgIGl0ZW1zOiBnZXRTdWJtZW51SXRlbXMoaXRlbSksXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBzdWJtZW51VGFyZ2V0LFxuICAgICAgICAgICAgICAgIG9uRGlzbWlzczogdGhpcy5fb25TdWJNZW51RGlzbWlzcyxcbiAgICAgICAgICAgICAgICBpc1N1Yk1lbnU6IHRydWUsXG4gICAgICAgICAgICAgICAgaWQ6IHRoaXMuc3RhdGUuc3ViTWVudUlkLFxuICAgICAgICAgICAgICAgIHNob3VsZEZvY3VzT25Nb3VudDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG91bGRGb2N1c09uQ29udGFpbmVyOiB0aGlzLnN0YXRlLmV4cGFuZGVkQnlNb3VzZUNsaWNrLFxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbmFsSGludDogZ2V0UlRMKHRoaXMucHJvcHMudGhlbWUpID8gRGlyZWN0aW9uYWxIaW50LmxlZnRUb3BFZGdlIDogRGlyZWN0aW9uYWxIaW50LnJpZ2h0VG9wRWRnZSxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgICAgICAgIGdhcFNwYWNlOiAwLFxuICAgICAgICAgICAgICAgIGlzQmVha1Zpc2libGU6IGZhbHNlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChpdGVtLnN1Yk1lbnVQcm9wcykge1xuICAgICAgICAgICAgICAgIGFzc2lnbihzdWJtZW51UHJvcHMsIGl0ZW0uc3ViTWVudVByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VibWVudVByb3BzO1xuICAgIH07XG4gICAgQ29udGV4dHVhbE1lbnVCYXNlLnByb3RvdHlwZS5fZmluZEl0ZW1CeUtleSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIGl0ZW1zID0gdGhpcy5wcm9wcy5pdGVtcztcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbmRJdGVtQnlLZXlGcm9tSXRlbXMoa2V5LCBpdGVtcyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBpdGVtIHRoYXQgbWF0aGVzIGEgZ2l2ZW4ga2V5IGlmIGFueS5cbiAgICAgKiBAcGFyYW0ga2V5IC0gVGhlIGtleSBvZiB0aGUgaXRlbSB0byBtYXRjaFxuICAgICAqIEBwYXJhbSBpdGVtcyAtIFRoZSBpdGVtcyB0byBsb29rIGZvciB0aGUga2V5XG4gICAgICovXG4gICAgQ29udGV4dHVhbE1lbnVCYXNlLnByb3RvdHlwZS5fZmluZEl0ZW1CeUtleUZyb21JdGVtcyA9IGZ1bmN0aW9uIChrZXksIGl0ZW1zKSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgaXRlbXNfMiA9IGl0ZW1zOyBfaSA8IGl0ZW1zXzIubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IGl0ZW1zXzJbX2ldO1xuICAgICAgICAgICAgaWYgKGl0ZW0uaXRlbVR5cGUgPT09IENvbnRleHR1YWxNZW51SXRlbVR5cGUuU2VjdGlvbiAmJiBpdGVtLnNlY3Rpb25Qcm9wcykge1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IHRoaXMuX2ZpbmRJdGVtQnlLZXlGcm9tSXRlbXMoa2V5LCBpdGVtLnNlY3Rpb25Qcm9wcy5pdGVtcyk7XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpdGVtLmtleSAmJiBpdGVtLmtleSA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnRleHR1YWxNZW51QmFzZS5wcm90b3R5cGUuX3NldFRhcmdldFdpbmRvd0FuZEVsZW1lbnQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIHZhciBjdXJyZW50RWxlbWVudCA9IHRoaXMuX2hvc3Q7XG4gICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50RG9jID0gZ2V0RG9jdW1lbnQoY3VycmVudEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldCA9IGN1cnJlbnREb2MgPyBjdXJyZW50RG9jLnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KSA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0V2luZG93ID0gZ2V0V2luZG93KGN1cnJlbnRFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAvLyBDYXN0IHRvIGFueSBwcmV2ZW50cyBlcnJvciBhYm91dCBzdG9wUHJvcGFnYXRpb24gYWx3YXlzIGV4aXN0aW5nXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0YXJnZXQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0V2luZG93ID0gZ2V0V2luZG93KHRhcmdldC50YXJnZXQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldCA9IHRhcmdldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICAodGFyZ2V0LmxlZnQgIT09IHVuZGVmaW5lZCB8fCB0YXJnZXQueCAhPT0gdW5kZWZpbmVkKSAmJlxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgICAgICh0YXJnZXQudG9wICE9PSB1bmRlZmluZWQgfHwgdGFyZ2V0LnkgIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRXaW5kb3cgPSBnZXRXaW5kb3coY3VycmVudEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldCA9IHRhcmdldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRhcmdldC5jdXJyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXQgPSB0YXJnZXQuY3VycmVudDtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRXaW5kb3cgPSBnZXRXaW5kb3codGhpcy5fdGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRFbGVtZW50ID0gdGFyZ2V0O1xuICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldFdpbmRvdyA9IGdldFdpbmRvdyh0YXJnZXRFbGVtZW50KTtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl90YXJnZXRXaW5kb3cgPSBnZXRXaW5kb3coY3VycmVudEVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBUaGUgZGVmYXVsdCBDb250ZXh0dWFsTWVudSBwcm9wZXJ0aWVzIGhhdmUgbm8gaXRlbXMgYW5kIGJlYWssIHRoZSBkZWZhdWx0IHN1Ym1lbnUgZGlyZWN0aW9uIGlzIHJpZ2h0IGFuZCB0b3AuXG4gICAgQ29udGV4dHVhbE1lbnVCYXNlLmRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICBzaG91bGRGb2N1c09uTW91bnQ6IHRydWUsXG4gICAgICAgIGdhcFNwYWNlOiAwLFxuICAgICAgICBkaXJlY3Rpb25hbEhpbnQ6IERpcmVjdGlvbmFsSGludC5ib3R0b21BdXRvRWRnZSxcbiAgICAgICAgYmVha1dpZHRoOiAxNixcbiAgICB9O1xuICAgIENvbnRleHR1YWxNZW51QmFzZSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICB3aXRoUmVzcG9uc2l2ZU1vZGVcbiAgICBdLCBDb250ZXh0dWFsTWVudUJhc2UpO1xuICAgIHJldHVybiBDb250ZXh0dWFsTWVudUJhc2U7XG59KFJlYWN0LkNvbXBvbmVudCkpO1xuZXhwb3J0IHsgQ29udGV4dHVhbE1lbnVCYXNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db250ZXh0dWFsTWVudS5iYXNlLmpzLm1hcCIsImltcG9ydCB7IGdldEdsb2JhbENsYXNzTmFtZXMsIEZvbnRXZWlnaHRzIH0gZnJvbSAnLi4vLi4vU3R5bGluZyc7XG5pbXBvcnQgeyBDT05URVhUVUFMX01FTlVfSVRFTV9IRUlHSFQgfSBmcm9tICcuL0NvbnRleHR1YWxNZW51LmNuc3R5bGVzJztcbnZhciBHbG9iYWxDbGFzc05hbWVzID0ge1xuICAgIHJvb3Q6ICdtcy1Db250ZXh0dWFsTWVudScsXG4gICAgY29udGFpbmVyOiAnbXMtQ29udGV4dHVhbE1lbnUtY29udGFpbmVyJyxcbiAgICBsaXN0OiAnbXMtQ29udGV4dHVhbE1lbnUtbGlzdCcsXG4gICAgaGVhZGVyOiAnbXMtQ29udGV4dHVhbE1lbnUtaGVhZGVyJyxcbiAgICB0aXRsZTogJ21zLUNvbnRleHR1YWxNZW51LXRpdGxlJyxcbiAgICBpc29wZW46ICdpcy1vcGVuJyxcbn07XG5leHBvcnQgdmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsIHRoZW1lID0gcHJvcHMudGhlbWU7XG4gICAgdmFyIGNsYXNzTmFtZXMgPSBnZXRHbG9iYWxDbGFzc05hbWVzKEdsb2JhbENsYXNzTmFtZXMsIHRoZW1lKTtcbiAgICB2YXIgZm9udHMgPSB0aGVtZS5mb250cywgc2VtYW50aWNDb2xvcnMgPSB0aGVtZS5zZW1hbnRpY0NvbG9ycywgZWZmZWN0cyA9IHRoZW1lLmVmZmVjdHM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcm9vdDogW1xuICAgICAgICAgICAgdGhlbWUuZm9udHMubWVkaXVtLFxuICAgICAgICAgICAgY2xhc3NOYW1lcy5yb290LFxuICAgICAgICAgICAgY2xhc3NOYW1lcy5pc29wZW4sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBzZW1hbnRpY0NvbG9ycy5tZW51QmFja2dyb3VuZCxcbiAgICAgICAgICAgICAgICBtaW5XaWR0aDogJzE4MHB4JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIF0sXG4gICAgICAgIGNvbnRhaW5lcjogW1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5jb250YWluZXIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3JzOiB7XG4gICAgICAgICAgICAgICAgICAgICc6Zm9jdXMnOiB7IG91dGxpbmU6IDAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgbGlzdDogW1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5saXN0LFxuICAgICAgICAgICAgY2xhc3NOYW1lcy5pc29wZW4sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGlzdFN0eWxlVHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgIG1hcmdpbjogJzAnLFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6ICcwJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGhlYWRlcjogW1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5oZWFkZXIsXG4gICAgICAgICAgICBmb250cy5zbWFsbCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBGb250V2VpZ2h0cy5zZW1pYm9sZCxcbiAgICAgICAgICAgICAgICBjb2xvcjogc2VtYW50aWNDb2xvcnMubWVudUhlYWRlcixcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICAgICAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogQ09OVEVYVFVBTF9NRU5VX0lURU1fSEVJR0hULFxuICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IENPTlRFWFRVQUxfTUVOVV9JVEVNX0hFSUdIVCxcbiAgICAgICAgICAgICAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMHB4IDZweCcsXG4gICAgICAgICAgICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgICAgICAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgdGl0bGU6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMudGl0bGUsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZm9udFNpemU6IGZvbnRzLm1lZGl1bVBsdXMuZm9udFNpemUsXG4gICAgICAgICAgICAgICAgcGFkZGluZ1JpZ2h0OiAnMTRweCcsXG4gICAgICAgICAgICAgICAgcGFkZGluZ0xlZnQ6ICcxNHB4JyxcbiAgICAgICAgICAgICAgICBwYWRkaW5nQm90dG9tOiAnNXB4JyxcbiAgICAgICAgICAgICAgICBwYWRkaW5nVG9wOiAnNXB4JyxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHNlbWFudGljQ29sb3JzLm1lbnVJdGVtQmFja2dyb3VuZFByZXNzZWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBzdWJDb21wb25lbnRTdHlsZXM6IHtcbiAgICAgICAgICAgIGNhbGxvdXQ6IHtcbiAgICAgICAgICAgICAgICByb290OiB7XG4gICAgICAgICAgICAgICAgICAgIGJveFNoYWRvdzogZWZmZWN0cy5lbGV2YXRpb244LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWVudUl0ZW06IHt9LFxuICAgICAgICB9LFxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29udGV4dHVhbE1lbnUuc3R5bGVzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBzdHlsZWQgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgQ29udGV4dHVhbE1lbnVCYXNlIH0gZnJvbSAnLi9Db250ZXh0dWFsTWVudS5iYXNlJztcbmltcG9ydCB7IGdldFN0eWxlcyB9IGZyb20gJy4vQ29udGV4dHVhbE1lbnUuc3R5bGVzJztcbmZ1bmN0aW9uIG9uUmVuZGVyU3ViTWVudShzdWJNZW51UHJvcHMpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMb2NhbENvbnRleHR1YWxNZW51LCBfX2Fzc2lnbih7fSwgc3ViTWVudVByb3BzKSk7XG59XG4vLyBUaGlzIGlzIHRvIHByZXZlbnQgY3ljbGljIGltcG9ydCB3aXRoIENvbnRleHR1YWxNZW51LmJhc2UudHN4LlxudmFyIExvY2FsQ29udGV4dHVhbE1lbnUgPSBzdHlsZWQoQ29udGV4dHVhbE1lbnVCYXNlLCBnZXRTdHlsZXMsIGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7IG9uUmVuZGVyU3ViTWVudTogb25SZW5kZXJTdWJNZW51IH0pOyB9LCB7IHNjb3BlOiAnQ29udGV4dHVhbE1lbnUnIH0pO1xuLyoqXG4gKiBDb250ZXh0dWFsTWVudSBkZXNjcmlwdGlvblxuICovXG5leHBvcnQgdmFyIENvbnRleHR1YWxNZW51ID0gTG9jYWxDb250ZXh0dWFsTWVudTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbnRleHR1YWxNZW51LmpzLm1hcCIsImltcG9ydCB7IG1lbW9pemVGdW5jdGlvbiB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBtZXJnZVN0eWxlU2V0cyB9IGZyb20gJy4uLy4uL1N0eWxpbmcnO1xuaW1wb3J0IHsgZ2V0R2xvYmFsQ2xhc3NOYW1lcyB9IGZyb20gJy4uLy4uL1N0eWxpbmcnO1xuZXhwb3J0IHZhciBCdXR0b25HbG9iYWxDbGFzc05hbWVzID0ge1xuICAgIG1zQnV0dG9uOiAnbXMtQnV0dG9uJyxcbiAgICBtc0J1dHRvbkhhc01lbnU6ICdtcy1CdXR0b24tLWhhc01lbnUnLFxuICAgIG1zQnV0dG9uSWNvbjogJ21zLUJ1dHRvbi1pY29uJyxcbiAgICBtc0J1dHRvbk1lbnVJY29uOiAnbXMtQnV0dG9uLW1lbnVJY29uJyxcbiAgICBtc0J1dHRvbkxhYmVsOiAnbXMtQnV0dG9uLWxhYmVsJyxcbiAgICBtc0J1dHRvbkRlc2NyaXB0aW9uOiAnbXMtQnV0dG9uLWRlc2NyaXB0aW9uJyxcbiAgICBtc0J1dHRvblNjcmVlblJlYWRlclRleHQ6ICdtcy1CdXR0b24tc2NyZWVuUmVhZGVyVGV4dCcsXG4gICAgbXNCdXR0b25GbGV4Q29udGFpbmVyOiAnbXMtQnV0dG9uLWZsZXhDb250YWluZXInLFxuICAgIG1zQnV0dG9uVGV4dENvbnRhaW5lcjogJ21zLUJ1dHRvbi10ZXh0Q29udGFpbmVyJyxcbn07XG5leHBvcnQgdmFyIGdldEJhc2VCdXR0b25DbGFzc05hbWVzID0gbWVtb2l6ZUZ1bmN0aW9uKGZ1bmN0aW9uICh0aGVtZSwgc3R5bGVzLCBjbGFzc05hbWUsIHZhcmlhbnRDbGFzc05hbWUsIGljb25DbGFzc05hbWUsIG1lbnVJY29uQ2xhc3NOYW1lLCBkaXNhYmxlZCwgaGFzTWVudSwgY2hlY2tlZCwgZXhwYW5kZWQsIGlzU3BsaXQpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHZhciBjbGFzc05hbWVzID0gZ2V0R2xvYmFsQ2xhc3NOYW1lcyhCdXR0b25HbG9iYWxDbGFzc05hbWVzLCB0aGVtZSB8fCB7fSk7XG4gICAgdmFyIGlzRXhwYW5kZWQgPSBleHBhbmRlZCAmJiAhaXNTcGxpdDtcbiAgICByZXR1cm4gbWVyZ2VTdHlsZVNldHMoe1xuICAgICAgICByb290OiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLm1zQnV0dG9uLFxuICAgICAgICAgICAgc3R5bGVzLnJvb3QsXG4gICAgICAgICAgICB2YXJpYW50Q2xhc3NOYW1lLFxuICAgICAgICAgICAgY2hlY2tlZCAmJiBbJ2lzLWNoZWNrZWQnLCBzdHlsZXMucm9vdENoZWNrZWRdLFxuICAgICAgICAgICAgaXNFeHBhbmRlZCAmJiBbXG4gICAgICAgICAgICAgICAgJ2lzLWV4cGFuZGVkJyxcbiAgICAgICAgICAgICAgICBzdHlsZXMucm9vdEV4cGFuZGVkLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2EgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hW1wiOmhvdmVyIC5cIiArIGNsYXNzTmFtZXMubXNCdXR0b25JY29uXSA9IHN0eWxlcy5pY29uRXhwYW5kZWRIb3ZlcmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWVudUljb24gZmFsbHMgYmFjayB0byByb290RXhwYW5kZWRIb3ZlcmVkIHRvIHN1cHBvcnQgb3JpZ2luYWwgYmVoYXZpb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hW1wiOmhvdmVyIC5cIiArIGNsYXNzTmFtZXMubXNCdXR0b25NZW51SWNvbl0gPSBzdHlsZXMubWVudUljb25FeHBhbmRlZEhvdmVyZWQgfHwgc3R5bGVzLnJvb3RFeHBhbmRlZEhvdmVyZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBfYVsnOmhvdmVyJ10gPSBzdHlsZXMucm9vdEV4cGFuZGVkSG92ZXJlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGhhc01lbnUgJiYgW0J1dHRvbkdsb2JhbENsYXNzTmFtZXMubXNCdXR0b25IYXNNZW51LCBzdHlsZXMucm9vdEhhc01lbnVdLFxuICAgICAgICAgICAgZGlzYWJsZWQgJiYgWydpcy1kaXNhYmxlZCcsIHN0eWxlcy5yb290RGlzYWJsZWRdLFxuICAgICAgICAgICAgIWRpc2FibGVkICYmXG4gICAgICAgICAgICAgICAgIWlzRXhwYW5kZWQgJiZcbiAgICAgICAgICAgICAgICAhY2hlY2tlZCAmJiB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2IgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnOmhvdmVyJzogc3R5bGVzLnJvb3RIb3ZlcmVkXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF9iW1wiOmhvdmVyIC5cIiArIGNsYXNzTmFtZXMubXNCdXR0b25MYWJlbF0gPSBzdHlsZXMubGFiZWxIb3ZlcmVkLFxuICAgICAgICAgICAgICAgICAgICBfYltcIjpob3ZlciAuXCIgKyBjbGFzc05hbWVzLm1zQnV0dG9uSWNvbl0gPSBzdHlsZXMuaWNvbkhvdmVyZWQsXG4gICAgICAgICAgICAgICAgICAgIF9iW1wiOmhvdmVyIC5cIiArIGNsYXNzTmFtZXMubXNCdXR0b25EZXNjcmlwdGlvbl0gPSBzdHlsZXMuZGVzY3JpcHRpb25Ib3ZlcmVkLFxuICAgICAgICAgICAgICAgICAgICBfYltcIjpob3ZlciAuXCIgKyBjbGFzc05hbWVzLm1zQnV0dG9uTWVudUljb25dID0gc3R5bGVzLm1lbnVJY29uSG92ZXJlZCxcbiAgICAgICAgICAgICAgICAgICAgX2JbJzpmb2N1cyddID0gc3R5bGVzLnJvb3RGb2N1c2VkLFxuICAgICAgICAgICAgICAgICAgICBfYlsnOmFjdGl2ZSddID0gc3R5bGVzLnJvb3RQcmVzc2VkLFxuICAgICAgICAgICAgICAgICAgICBfYltcIjphY3RpdmUgLlwiICsgY2xhc3NOYW1lcy5tc0J1dHRvbkljb25dID0gc3R5bGVzLmljb25QcmVzc2VkLFxuICAgICAgICAgICAgICAgICAgICBfYltcIjphY3RpdmUgLlwiICsgY2xhc3NOYW1lcy5tc0J1dHRvbkRlc2NyaXB0aW9uXSA9IHN0eWxlcy5kZXNjcmlwdGlvblByZXNzZWQsXG4gICAgICAgICAgICAgICAgICAgIF9iW1wiOmFjdGl2ZSAuXCIgKyBjbGFzc05hbWVzLm1zQnV0dG9uTWVudUljb25dID0gc3R5bGVzLm1lbnVJY29uUHJlc3NlZCxcbiAgICAgICAgICAgICAgICAgICAgX2IpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRpc2FibGVkICYmIGNoZWNrZWQgJiYgW3N0eWxlcy5yb290Q2hlY2tlZERpc2FibGVkXSxcbiAgICAgICAgICAgICFkaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgIGNoZWNrZWQgJiYge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAnOmhvdmVyJzogc3R5bGVzLnJvb3RDaGVja2VkSG92ZXJlZCxcbiAgICAgICAgICAgICAgICAgICAgJzphY3RpdmUnOiBzdHlsZXMucm9vdENoZWNrZWRQcmVzc2VkLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBdLFxuICAgICAgICBmbGV4Q29udGFpbmVyOiBbY2xhc3NOYW1lcy5tc0J1dHRvbkZsZXhDb250YWluZXIsIHN0eWxlcy5mbGV4Q29udGFpbmVyXSxcbiAgICAgICAgdGV4dENvbnRhaW5lcjogW2NsYXNzTmFtZXMubXNCdXR0b25UZXh0Q29udGFpbmVyLCBzdHlsZXMudGV4dENvbnRhaW5lcl0sXG4gICAgICAgIGljb246IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMubXNCdXR0b25JY29uLFxuICAgICAgICAgICAgaWNvbkNsYXNzTmFtZSxcbiAgICAgICAgICAgIHN0eWxlcy5pY29uLFxuICAgICAgICAgICAgaXNFeHBhbmRlZCAmJiBzdHlsZXMuaWNvbkV4cGFuZGVkLFxuICAgICAgICAgICAgY2hlY2tlZCAmJiBzdHlsZXMuaWNvbkNoZWNrZWQsXG4gICAgICAgICAgICBkaXNhYmxlZCAmJiBzdHlsZXMuaWNvbkRpc2FibGVkLFxuICAgICAgICBdLFxuICAgICAgICBsYWJlbDogW2NsYXNzTmFtZXMubXNCdXR0b25MYWJlbCwgc3R5bGVzLmxhYmVsLCBjaGVja2VkICYmIHN0eWxlcy5sYWJlbENoZWNrZWQsIGRpc2FibGVkICYmIHN0eWxlcy5sYWJlbERpc2FibGVkXSxcbiAgICAgICAgbWVudUljb246IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMubXNCdXR0b25NZW51SWNvbixcbiAgICAgICAgICAgIG1lbnVJY29uQ2xhc3NOYW1lLFxuICAgICAgICAgICAgc3R5bGVzLm1lbnVJY29uLFxuICAgICAgICAgICAgY2hlY2tlZCAmJiBzdHlsZXMubWVudUljb25DaGVja2VkLFxuICAgICAgICAgICAgZGlzYWJsZWQgJiYgIWlzU3BsaXQgJiYgc3R5bGVzLm1lbnVJY29uRGlzYWJsZWQsXG4gICAgICAgICAgICAhZGlzYWJsZWQgJiZcbiAgICAgICAgICAgICAgICAhaXNFeHBhbmRlZCAmJlxuICAgICAgICAgICAgICAgICFjaGVja2VkICYmIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgJzpob3Zlcic6IHN0eWxlcy5tZW51SWNvbkhvdmVyZWQsXG4gICAgICAgICAgICAgICAgICAgICc6YWN0aXZlJzogc3R5bGVzLm1lbnVJY29uUHJlc3NlZCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzRXhwYW5kZWQgJiYgWydpcy1leHBhbmRlZCcsIHN0eWxlcy5tZW51SWNvbkV4cGFuZGVkXSxcbiAgICAgICAgXSxcbiAgICAgICAgZGVzY3JpcHRpb246IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMubXNCdXR0b25EZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHN0eWxlcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIGNoZWNrZWQgJiYgc3R5bGVzLmRlc2NyaXB0aW9uQ2hlY2tlZCxcbiAgICAgICAgICAgIGRpc2FibGVkICYmIHN0eWxlcy5kZXNjcmlwdGlvbkRpc2FibGVkLFxuICAgICAgICBdLFxuICAgICAgICBzY3JlZW5SZWFkZXJUZXh0OiBbY2xhc3NOYW1lcy5tc0J1dHRvblNjcmVlblJlYWRlclRleHQsIHN0eWxlcy5zY3JlZW5SZWFkZXJUZXh0XSxcbiAgICB9KTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmFzZUJ1dHRvbi5jbGFzc05hbWVzLmpzLm1hcCIsImltcG9ydCB7IG1lbW9pemVGdW5jdGlvbiB9IGZyb20gJy4uLy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBtZXJnZVN0eWxlcyB9IGZyb20gJy4uLy4uLy4uL1N0eWxpbmcnO1xuZXhwb3J0IHZhciBnZXRTcGxpdEJ1dHRvbkNsYXNzTmFtZXMgPSBtZW1vaXplRnVuY3Rpb24oZnVuY3Rpb24gKHN0eWxlcywgZGlzYWJsZWQsIGV4cGFuZGVkLCBjaGVja2VkLCBwcmltYXJ5RGlzYWJsZWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByb290OiBtZXJnZVN0eWxlcyhzdHlsZXMuc3BsaXRCdXR0b25NZW51QnV0dG9uLCBleHBhbmRlZCAmJiBbc3R5bGVzLnNwbGl0QnV0dG9uTWVudUJ1dHRvbkV4cGFuZGVkXSwgZGlzYWJsZWQgJiYgW3N0eWxlcy5zcGxpdEJ1dHRvbk1lbnVCdXR0b25EaXNhYmxlZF0sIGNoZWNrZWQgJiYgIWRpc2FibGVkICYmIFtzdHlsZXMuc3BsaXRCdXR0b25NZW51QnV0dG9uQ2hlY2tlZF0pLFxuICAgICAgICBzcGxpdEJ1dHRvbkNvbnRhaW5lcjogbWVyZ2VTdHlsZXMoc3R5bGVzLnNwbGl0QnV0dG9uQ29udGFpbmVyLCAhZGlzYWJsZWQgJiZcbiAgICAgICAgICAgIGNoZWNrZWQgJiYgW1xuICAgICAgICAgICAgc3R5bGVzLnNwbGl0QnV0dG9uQ29udGFpbmVyQ2hlY2tlZCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgJzpob3Zlcic6IHN0eWxlcy5zcGxpdEJ1dHRvbkNvbnRhaW5lckNoZWNrZWRIb3ZlcmVkLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLCAhZGlzYWJsZWQgJiZcbiAgICAgICAgICAgICFjaGVja2VkICYmIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgJzpob3Zlcic6IHN0eWxlcy5zcGxpdEJ1dHRvbkNvbnRhaW5lckhvdmVyZWQsXG4gICAgICAgICAgICAgICAgICAgICc6Zm9jdXMnOiBzdHlsZXMuc3BsaXRCdXR0b25Db250YWluZXJGb2N1c2VkLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLCBkaXNhYmxlZCAmJiBzdHlsZXMuc3BsaXRCdXR0b25Db250YWluZXJEaXNhYmxlZCksXG4gICAgICAgIGljb246IG1lcmdlU3R5bGVzKHN0eWxlcy5zcGxpdEJ1dHRvbk1lbnVJY29uLCBkaXNhYmxlZCAmJiBzdHlsZXMuc3BsaXRCdXR0b25NZW51SWNvbkRpc2FibGVkLCAhZGlzYWJsZWQgJiYgcHJpbWFyeURpc2FibGVkICYmIHN0eWxlcy5zcGxpdEJ1dHRvbk1lbnVJY29uKSxcbiAgICAgICAgZmxleENvbnRhaW5lcjogbWVyZ2VTdHlsZXMoc3R5bGVzLnNwbGl0QnV0dG9uRmxleENvbnRhaW5lciksXG4gICAgICAgIGRpdmlkZXI6IG1lcmdlU3R5bGVzKHN0eWxlcy5zcGxpdEJ1dHRvbkRpdmlkZXIsIChwcmltYXJ5RGlzYWJsZWQgfHwgZGlzYWJsZWQpICYmIHN0eWxlcy5zcGxpdEJ1dHRvbkRpdmlkZXJEaXNhYmxlZCksXG4gICAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3BsaXRCdXR0b24uY2xhc3NOYW1lcy5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzLCBfX3Jlc3QgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGFuY2hvclByb3BlcnRpZXMsIGFzc2lnbiwgYnV0dG9uUHJvcGVydGllcywgZ2V0SWQsIGdldE5hdGl2ZVByb3BzLCBLZXlDb2RlcywgY3NzLCBtZXJnZUFyaWFBdHRyaWJ1dGVWYWx1ZXMsIHBvcnRhbENvbnRhaW5zRWxlbWVudCwgbWVtb2l6ZUZ1bmN0aW9uLCBudWxsUmVuZGVyLCB3YXJuQ29uZGl0aW9uYWxseVJlcXVpcmVkUHJvcHMsIHdhcm5EZXByZWNhdGlvbnMsIEV2ZW50R3JvdXAsIGluaXRpYWxpemVDb21wb25lbnRSZWYsIEFzeW5jLCBGb2N1c1JlY3RzLCB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBjcmVhdGVNZXJnZWRSZWYgfSBmcm9tICdAdWlmYWJyaWMvdXRpbGl0aWVzJztcbmltcG9ydCB7IEljb24sIEZvbnRJY29uLCBJbWFnZUljb24gfSBmcm9tICcuLi8uLi9JY29uJztcbmltcG9ydCB7IERpcmVjdGlvbmFsSGludCB9IGZyb20gJy4uLy4uL2NvbW1vbi9EaXJlY3Rpb25hbEhpbnQnO1xuaW1wb3J0IHsgQ29udGV4dHVhbE1lbnUgfSBmcm9tICcuLi8uLi9Db250ZXh0dWFsTWVudSc7XG5pbXBvcnQgeyBnZXRCYXNlQnV0dG9uQ2xhc3NOYW1lcyB9IGZyb20gJy4vQmFzZUJ1dHRvbi5jbGFzc05hbWVzJztcbmltcG9ydCB7IGdldFNwbGl0QnV0dG9uQ2xhc3NOYW1lcyBhcyBnZXRCYXNlU3BsaXRCdXR0b25DbGFzc05hbWVzLCB9IGZyb20gJy4vU3BsaXRCdXR0b24vU3BsaXRCdXR0b24uY2xhc3NOYW1lcyc7XG5pbXBvcnQgeyBLZXl0aXBEYXRhIH0gZnJvbSAnLi4vLi4vS2V5dGlwRGF0YSc7XG52YXIgVG91Y2hJZGxlRGVsYXkgPSA1MDA7IC8qIG1zICovXG52YXIgQ09NUE9ORU5UX05BTUUgPSAnQmFzZUJ1dHRvbic7XG4vKipcbiAqIHtAZG9jQ2F0ZWdvcnkgQnV0dG9ufVxuICovXG52YXIgQmFzZUJ1dHRvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQmFzZUJ1dHRvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCYXNlQnV0dG9uKHByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fYnV0dG9uRWxlbWVudCA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgICAgICBfdGhpcy5fc3BsaXRCdXR0b25Db250YWluZXIgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICAgICAgX3RoaXMuX21lcmdlZFJlZiA9IGNyZWF0ZU1lcmdlZFJlZigpO1xuICAgICAgICBfdGhpcy5fcmVuZGVyZWRWaXNpYmxlTWVudSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5fZ2V0TWVtb2l6ZWRNZW51QnV0dG9uS2V5dGlwUHJvcHMgPSBtZW1vaXplRnVuY3Rpb24oZnVuY3Rpb24gKGtleXRpcFByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIGtleXRpcFByb3BzKSwgeyBoYXNNZW51OiB0cnVlIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMuX29uUmVuZGVySWNvbiA9IGZ1bmN0aW9uIChidXR0b25Qcm9wcywgZGVmYXVsdFJlbmRlcikge1xuICAgICAgICAgICAgdmFyIGljb25Qcm9wcyA9IF90aGlzLnByb3BzLmljb25Qcm9wcztcbiAgICAgICAgICAgIGlmIChpY29uUHJvcHMgJiYgKGljb25Qcm9wcy5pY29uTmFtZSAhPT0gdW5kZWZpbmVkIHx8IGljb25Qcm9wcy5pbWFnZVByb3BzKSkge1xuICAgICAgICAgICAgICAgIHZhciBjbGFzc05hbWUgPSBpY29uUHJvcHMuY2xhc3NOYW1lLCBpbWFnZVByb3BzID0gaWNvblByb3BzLmltYWdlUHJvcHMsIHJlc3QgPSBfX3Jlc3QoaWNvblByb3BzLCBbXCJjbGFzc05hbWVcIiwgXCJpbWFnZVByb3BzXCJdKTtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgc3R5bGVzIHByb3AgaXMgc3BlY2lmaWVkIGFzIHBhcnQgb2YgaWNvblByb3BzLCBmYWxsIGJhY2sgdG8gcmVndWxhciBJY29uIGFzIEZvbnRJY29uIGFuZCBJbWFnZUljb25cbiAgICAgICAgICAgICAgICAvLyBkbyBub3QgaGF2ZSB0aGlzIHByb3AuXG4gICAgICAgICAgICAgICAgaWYgKGljb25Qcm9wcy5zdHlsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbiwgX19hc3NpZ24oeyBjbGFzc05hbWU6IGNzcyhfdGhpcy5fY2xhc3NOYW1lcy5pY29uLCBjbGFzc05hbWUpLCBpbWFnZVByb3BzOiBpbWFnZVByb3BzIH0sIHJlc3QpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGljb25Qcm9wcy5pY29uTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGb250SWNvbiwgX19hc3NpZ24oeyBjbGFzc05hbWU6IGNzcyhfdGhpcy5fY2xhc3NOYW1lcy5pY29uLCBjbGFzc05hbWUpIH0sIHJlc3QpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGltYWdlUHJvcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW1hZ2VJY29uLCBfX2Fzc2lnbih7IGNsYXNzTmFtZTogY3NzKF90aGlzLl9jbGFzc05hbWVzLmljb24sIGNsYXNzTmFtZSksIGltYWdlUHJvcHM6IGltYWdlUHJvcHMgfSwgcmVzdCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25SZW5kZXJUZXh0Q29udGVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgdGV4dCA9IF9hLnRleHQsIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sIFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICBfYiA9IF9hLnNlY29uZGFyeVRleHQsIFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICBzZWNvbmRhcnlUZXh0ID0gX2IgPT09IHZvaWQgMCA/IF90aGlzLnByb3BzLmRlc2NyaXB0aW9uIDogX2IsIF9jID0gX2Eub25SZW5kZXJUZXh0LCBvblJlbmRlclRleHQgPSBfYyA9PT0gdm9pZCAwID8gX3RoaXMuX29uUmVuZGVyVGV4dCA6IF9jLCBfZCA9IF9hLm9uUmVuZGVyRGVzY3JpcHRpb24sIG9uUmVuZGVyRGVzY3JpcHRpb24gPSBfZCA9PT0gdm9pZCAwID8gX3RoaXMuX29uUmVuZGVyRGVzY3JpcHRpb24gOiBfZDtcbiAgICAgICAgICAgIGlmICh0ZXh0IHx8IHR5cGVvZiBjaGlsZHJlbiA9PT0gJ3N0cmluZycgfHwgc2Vjb25kYXJ5VGV4dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IF90aGlzLl9jbGFzc05hbWVzLnRleHRDb250YWluZXIgfSxcbiAgICAgICAgICAgICAgICAgICAgb25SZW5kZXJUZXh0KF90aGlzLnByb3BzLCBfdGhpcy5fb25SZW5kZXJUZXh0KSxcbiAgICAgICAgICAgICAgICAgICAgb25SZW5kZXJEZXNjcmlwdGlvbihfdGhpcy5wcm9wcywgX3RoaXMuX29uUmVuZGVyRGVzY3JpcHRpb24pKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW29uUmVuZGVyVGV4dChfdGhpcy5wcm9wcywgX3RoaXMuX29uUmVuZGVyVGV4dCksIG9uUmVuZGVyRGVzY3JpcHRpb24oX3RoaXMucHJvcHMsIF90aGlzLl9vblJlbmRlckRlc2NyaXB0aW9uKV07XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblJlbmRlclRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdGV4dCA9IF90aGlzLnByb3BzLnRleHQ7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBfdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICAgICAgICAgIC8vIEZvciBiYWNrd2FyZHMgY29tcGF0LCB3ZSBzaG91bGQgY29udGludWUgdG8gdGFrZSBpbiB0aGUgdGV4dCBjb250ZW50IGZyb20gY2hpbGRyZW4uXG4gICAgICAgICAgICBpZiAodGV4dCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBjaGlsZHJlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gY2hpbGRyZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX3RoaXMuX2hhc1RleHQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBrZXk6IF90aGlzLl9sYWJlbElkLCBjbGFzc05hbWU6IF90aGlzLl9jbGFzc05hbWVzLmxhYmVsLCBpZDogX3RoaXMuX2xhYmVsSWQgfSwgdGV4dCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblJlbmRlckNoaWxkcmVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gX3RoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgICAgICAgICAvLyBJZiBjaGlsZHJlbiBpcyBqdXN0IGEgc3RyaW5nLCBlaXRoZXIgaXQgb3IgdGhlIHRleHQgd2lsbCBiZSByZW5kZXJlZCB2aWEgb25SZW5kZXJMYWJlbFxuICAgICAgICAgICAgLy8gSWYgY2hpbGRyZW4gaXMgYW5vdGhlciBjb21wb25lbnQsIGl0IHdpbGwgYmUgcmVuZGVyZWQgYWZ0ZXIgdGV4dFxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uUmVuZGVyRGVzY3JpcHRpb24gPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgdmFyIF9hID0gcHJvcHMuc2Vjb25kYXJ5VGV4dCwgc2Vjb25kYXJ5VGV4dCA9IF9hID09PSB2b2lkIDAgPyBfdGhpcy5wcm9wcy5kZXNjcmlwdGlvbiA6IF9hO1xuICAgICAgICAgICAgLy8gbXMtQnV0dG9uLWRlc2NyaXB0aW9uIGlzIG9ubHkgc2hvd24gd2hlbiB0aGUgYnV0dG9uIHR5cGUgaXMgY29tcG91bmQuXG4gICAgICAgICAgICAvLyBJbiBvdGhlciBjYXNlcyBpdCB3aWxsIG5vdCBiZSBkaXNwbGF5ZWQuXG4gICAgICAgICAgICByZXR1cm4gc2Vjb25kYXJ5VGV4dCA/IChSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGtleTogX3RoaXMuX2Rlc2NyaXB0aW9uSWQsIGNsYXNzTmFtZTogX3RoaXMuX2NsYXNzTmFtZXMuZGVzY3JpcHRpb24sIGlkOiBfdGhpcy5fZGVzY3JpcHRpb25JZCB9LCBzZWNvbmRhcnlUZXh0KSkgOiBudWxsO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25SZW5kZXJBcmlhRGVzY3JpcHRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJpYURlc2NyaXB0aW9uID0gX3RoaXMucHJvcHMuYXJpYURlc2NyaXB0aW9uO1xuICAgICAgICAgICAgLy8gSWYgYXJpYURlc2NyaXB0aW9uIGlzIGdpdmVuLCBkZXNjcmlwdGlvbklkIHdpbGwgYmUgYXNzaWduZWQgdG8gYXJpYURlc2NyaXB0aW9uU3BhbixcbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSBpdCB3aWxsIGJlIGFzc2lnbmVkIHRvIGRlc2NyaXB0aW9uU3Bhbi5cbiAgICAgICAgICAgIHJldHVybiBhcmlhRGVzY3JpcHRpb24gPyAoUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IF90aGlzLl9jbGFzc05hbWVzLnNjcmVlblJlYWRlclRleHQsIGlkOiBfdGhpcy5fYXJpYURlc2NyaXB0aW9uSWQgfSwgYXJpYURlc2NyaXB0aW9uKSkgOiBudWxsO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25SZW5kZXJNZW51SWNvbiA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICAgICAgdmFyIG1lbnVJY29uUHJvcHMgPSBfdGhpcy5wcm9wcy5tZW51SWNvblByb3BzO1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9udEljb24sIF9fYXNzaWduKHsgaWNvbk5hbWU6IFwiQ2hldnJvbkRvd25cIiB9LCBtZW51SWNvblByb3BzLCB7IGNsYXNzTmFtZTogX3RoaXMuX2NsYXNzTmFtZXMubWVudUljb24gfSkpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25SZW5kZXJNZW51ID0gZnVuY3Rpb24gKG1lbnVQcm9wcykge1xuICAgICAgICAgICAgdmFyIHBlcnNpc3RNZW51ID0gX3RoaXMucHJvcHMucGVyc2lzdE1lbnU7XG4gICAgICAgICAgICB2YXIgbWVudUhpZGRlbiA9IF90aGlzLnN0YXRlLm1lbnVIaWRkZW47XG4gICAgICAgICAgICB2YXIgTWVudVR5cGUgPSBfdGhpcy5wcm9wcy5tZW51QXMgfHwgQ29udGV4dHVhbE1lbnU7XG4gICAgICAgICAgICAvLyB0aGUgYWNjZXNzaWJsZSBtZW51IGxhYmVsIChhY2Nlc3NpYmxlIG5hbWUpIGhhcyBhIHJlbGF0aW9uc2hpcCB0byB0aGUgYnV0dG9uLlxuICAgICAgICAgICAgLy8gSWYgdGhlIG1lbnUgcHJvcHMgZG8gbm90IHNwZWNpZnkgYW4gZXhwbGljaXQgdmFsdWUgZm9yIGFyaWEtbGFiZWwgb3IgYXJpYS1sYWJlbGxlZEJ5LFxuICAgICAgICAgICAgLy8gQU5EIHRoZSBidXR0b24gaGFzIHRleHQsIHdlJ2xsIHNldCB0aGUgbWVudSBhcmlhLWxhYmVsbGVkQnkgdG8gdGhlIHRleHQgZWxlbWVudCBpZC5cbiAgICAgICAgICAgIGlmICghbWVudVByb3BzLmFyaWFMYWJlbCAmJiAhbWVudVByb3BzLmxhYmVsRWxlbWVudElkICYmIF90aGlzLl9oYXNUZXh0KCkpIHtcbiAgICAgICAgICAgICAgICBtZW51UHJvcHMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgbWVudVByb3BzKSwgeyBsYWJlbEVsZW1lbnRJZDogX3RoaXMuX2xhYmVsSWQgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWVudVR5cGUsIF9fYXNzaWduKHsgaWQ6IF90aGlzLl9sYWJlbElkICsgJy1tZW51JywgZGlyZWN0aW9uYWxIaW50OiBEaXJlY3Rpb25hbEhpbnQuYm90dG9tTGVmdEVkZ2UgfSwgbWVudVByb3BzLCB7IHNob3VsZEZvY3VzT25Db250YWluZXI6IF90aGlzLl9tZW51U2hvdWxkRm9jdXNPbkNvbnRhaW5lciwgc2hvdWxkRm9jdXNPbk1vdW50OiBfdGhpcy5fbWVudVNob3VsZEZvY3VzT25Nb3VudCwgaGlkZGVuOiBwZXJzaXN0TWVudSA/IG1lbnVIaWRkZW4gOiB1bmRlZmluZWQsIGNsYXNzTmFtZTogY3NzKCdtcy1CYXNlQnV0dG9uLW1lbnVob3N0JywgbWVudVByb3BzLmNsYXNzTmFtZSksIHRhcmdldDogX3RoaXMuX2lzU3BsaXRCdXR0b24gPyBfdGhpcy5fc3BsaXRCdXR0b25Db250YWluZXIuY3VycmVudCA6IF90aGlzLl9idXR0b25FbGVtZW50LmN1cnJlbnQsIG9uRGlzbWlzczogX3RoaXMuX29uRGlzbWlzc01lbnUgfSkpKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uRGlzbWlzc01lbnUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBtZW51UHJvcHMgPSBfdGhpcy5wcm9wcy5tZW51UHJvcHM7XG4gICAgICAgICAgICBpZiAobWVudVByb3BzICYmIG1lbnVQcm9wcy5vbkRpc21pc3MpIHtcbiAgICAgICAgICAgICAgICBtZW51UHJvcHMub25EaXNtaXNzKGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZXYgfHwgIWV2LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fZGlzbWlzc01lbnUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX2Rpc21pc3NNZW51ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX21lbnVTaG91bGRGb2N1c09uTW91bnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBfdGhpcy5fbWVudVNob3VsZEZvY3VzT25Db250YWluZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IG1lbnVIaWRkZW46IHRydWUgfSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vcGVuTWVudSA9IGZ1bmN0aW9uIChzaG91bGRGb2N1c09uQ29udGFpbmVyLCBzaG91bGRGb2N1c09uTW91bnQpIHtcbiAgICAgICAgICAgIGlmIChzaG91bGRGb2N1c09uTW91bnQgPT09IHZvaWQgMCkgeyBzaG91bGRGb2N1c09uTW91bnQgPSB0cnVlOyB9XG4gICAgICAgICAgICBpZiAoX3RoaXMucHJvcHMubWVudVByb3BzKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX21lbnVTaG91bGRGb2N1c09uQ29udGFpbmVyID0gc2hvdWxkRm9jdXNPbkNvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICBfdGhpcy5fbWVudVNob3VsZEZvY3VzT25Nb3VudCA9IHNob3VsZEZvY3VzT25Nb3VudDtcbiAgICAgICAgICAgICAgICBfdGhpcy5fcmVuZGVyZWRWaXNpYmxlTWVudSA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBtZW51SGlkZGVuOiBmYWxzZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uVG9nZ2xlTWVudSA9IGZ1bmN0aW9uIChzaG91bGRGb2N1c09uQ29udGFpbmVyKSB7XG4gICAgICAgICAgICB2YXIgc2hvdWxkRm9jdXNPbk1vdW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5tZW51UHJvcHMgJiYgX3RoaXMucHJvcHMubWVudVByb3BzLnNob3VsZEZvY3VzT25Nb3VudCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBzaG91bGRGb2N1c09uTW91bnQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLnN0YXRlLm1lbnVIaWRkZW4gPyBfdGhpcy5fb3Blbk1lbnUoc2hvdWxkRm9jdXNPbkNvbnRhaW5lciwgc2hvdWxkRm9jdXNPbk1vdW50KSA6IF90aGlzLl9kaXNtaXNzTWVudSgpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25TcGxpdENvbnRhaW5lckZvY3VzQ2FwdHVyZSA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IF90aGlzLl9zcGxpdEJ1dHRvbkNvbnRhaW5lci5jdXJyZW50O1xuICAgICAgICAgICAgLy8gSWYgdGhlIHRhcmdldCBpcyBjb21pbmcgZnJvbSB0aGUgcG9ydGFsIHdlIGRvIG5vdCBuZWVkIHRvIHNldCBmb2N1cyBvbiB0aGUgY29udGFpbmVyLlxuICAgICAgICAgICAgaWYgKCFjb250YWluZXIgfHwgKGV2LnRhcmdldCAmJiBwb3J0YWxDb250YWluc0VsZW1lbnQoZXYudGFyZ2V0LCBjb250YWluZXIpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFdlIHNob3VsZCBuZXZlciBiZSBhYmxlIHRvIGZvY3VzIHRoZSBpbmRpdmlkdWFsIGJ1dHRvbnMgaW4gYSBzcGxpdCBidXR0b24uIEZvY3VzXG4gICAgICAgICAgICAvLyBzaG91bGQgYWx3YXlzIHJlbWFpbiBvbiB0aGUgY29udGFpbmVyLlxuICAgICAgICAgICAgY29udGFpbmVyLmZvY3VzKCk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblNwbGl0QnV0dG9uUHJpbWFyeUNsaWNrID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzLnN0YXRlLm1lbnVIaWRkZW4pIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fZGlzbWlzc01lbnUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghX3RoaXMuX3Byb2Nlc3NpbmdUb3VjaCAmJiBfdGhpcy5wcm9wcy5vbkNsaWNrKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJvcHMub25DbGljayhldik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChfdGhpcy5fcHJvY2Vzc2luZ1RvdWNoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX29uTWVudUNsaWNrKGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uS2V5RG93biA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgLy8gZXhwbGljaXR5IGNhbmNlbGxpbmcgZXZlbnQgc28gY2xpY2sgd29uJ3QgZmlyZSBhZnRlciB0aGlzXG4gICAgICAgICAgICBpZiAoX3RoaXMucHJvcHMuZGlzYWJsZWQgJiYgKGV2LndoaWNoID09PSBLZXlDb2Rlcy5lbnRlciB8fCBldi53aGljaCA9PT0gS2V5Q29kZXMuc3BhY2UpKSB7XG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFfdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5tZW51UHJvcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX29uTWVudUtleURvd24oZXYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChfdGhpcy5wcm9wcy5vbktleURvd24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5vbktleURvd24oZXYpOyAvLyBub3QgY2FuY2VsbGluZyBldmVudCBiZWNhdXNlIGl0J3Mgbm90IGRpc2FibGVkXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25LZXlVcCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiBfdGhpcy5wcm9wcy5vbktleVVwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5vbktleVVwKGV2KTsgLy8gbm90IGNhbmNlbGxpbmcgZXZlbnQgYmVjYXVzZSBpdCdzIG5vdCBkaXNhYmxlZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25LZXlQcmVzcyA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiBfdGhpcy5wcm9wcy5vbktleVByZXNzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5vbktleVByZXNzKGV2KTsgLy8gbm90IGNhbmNlbGxpbmcgZXZlbnQgYmVjYXVzZSBpdCdzIG5vdCBkaXNhYmxlZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25Nb3VzZVVwID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzLnByb3BzLmRpc2FibGVkICYmIF90aGlzLnByb3BzLm9uTW91c2VVcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJvcHMub25Nb3VzZVVwKGV2KTsgLy8gbm90IGNhbmNlbGxpbmcgZXZlbnQgYmVjYXVzZSBpdCdzIG5vdCBkaXNhYmxlZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25Nb3VzZURvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMucHJvcHMuZGlzYWJsZWQgJiYgX3RoaXMucHJvcHMub25Nb3VzZURvd24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnByb3BzLm9uTW91c2VEb3duKGV2KTsgLy8gbm90IGNhbmNlbGxpbmcgZXZlbnQgYmVjYXVzZSBpdCdzIG5vdCBkaXNhYmxlZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25DbGljayA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5tZW51UHJvcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX29uTWVudUNsaWNrKGV2KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoX3RoaXMucHJvcHMub25DbGljayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByb3BzLm9uQ2xpY2soZXYpOyAvLyBub3QgY2FuY2VsbGluZyBldmVudCBiZWNhdXNlIGl0J3Mgbm90IGRpc2FibGVkXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25TcGxpdEJ1dHRvbkNvbnRhaW5lcktleURvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmIChldi53aGljaCA9PT0gS2V5Q29kZXMuZW50ZXIgfHwgZXYud2hpY2ggPT09IEtleUNvZGVzLnNwYWNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLl9idXR0b25FbGVtZW50LmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2J1dHRvbkVsZW1lbnQuY3VycmVudC5jbGljaygpO1xuICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fb25NZW51S2V5RG93bihldik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbk1lbnVLZXlEb3duID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX3RoaXMucHJvcHMub25LZXlEb3duKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJvcHMub25LZXlEb3duKGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpc1VwID0gZXYud2hpY2ggPT09IEtleUNvZGVzLnVwO1xuICAgICAgICAgICAgdmFyIGlzRG93biA9IGV2LndoaWNoID09PSBLZXlDb2Rlcy5kb3duO1xuICAgICAgICAgICAgaWYgKCFldi5kZWZhdWx0UHJldmVudGVkICYmIF90aGlzLl9pc1ZhbGlkTWVudU9wZW5LZXkoZXYpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9uTWVudUNsaWNrID0gX3RoaXMucHJvcHMub25NZW51Q2xpY2s7XG4gICAgICAgICAgICAgICAgaWYgKG9uTWVudUNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uTWVudUNsaWNrKGV2LCBfdGhpcy5wcm9wcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLl9vblRvZ2dsZU1lbnUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIShldi5hbHRLZXkgfHwgZXYubWV0YUtleSkgJiYgKGlzVXAgfHwgaXNEb3duKSkge1xuICAgICAgICAgICAgICAgIC8vIFN1cHBvc2UgYSBtZW51LCB3aXRoIHNob3VsZEZvY3VzT25Nb3VudDogZmFsc2UsIGlzIG9wZW4sIGFuZCB1c2VyIHdhbnRzIHRvIGtleWJvYXJkIHRvIHRoZSBtZW51IGl0ZW1zXG4gICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byByZS1yZW5kZXIgdGhlIG1lbnUgd2l0aCBzaG91bGRGb2N1c09uTW91bnQgYXMgdHJ1ZS5cbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLnN0YXRlLm1lbnVIaWRkZW4gJiYgX3RoaXMucHJvcHMubWVudVByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50U2hvdWxkRm9jdXNPbk1vdW50ID0gX3RoaXMuX21lbnVTaG91bGRGb2N1c09uTW91bnQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBfdGhpcy5fbWVudVNob3VsZEZvY3VzT25Nb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBfdGhpcy5wcm9wcy5tZW51UHJvcHMuc2hvdWxkRm9jdXNPbk1vdW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRTaG91bGRGb2N1c09uTW91bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9tZW51U2hvdWxkRm9jdXNPbk1vdW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblRvdWNoU3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuX2lzU3BsaXRCdXR0b24gJiZcbiAgICAgICAgICAgICAgICBfdGhpcy5fc3BsaXRCdXR0b25Db250YWluZXIuY3VycmVudCAmJlxuICAgICAgICAgICAgICAgICEoJ29ucG9pbnRlcmRvd24nIGluIF90aGlzLl9zcGxpdEJ1dHRvbkNvbnRhaW5lci5jdXJyZW50KSkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9oYW5kbGVUb3VjaEFuZFBvaW50ZXJFdmVudCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25NZW51Q2xpY2sgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBvbk1lbnVDbGljayA9IF90aGlzLnByb3BzLm9uTWVudUNsaWNrO1xuICAgICAgICAgICAgaWYgKG9uTWVudUNsaWNrKSB7XG4gICAgICAgICAgICAgICAgb25NZW51Q2xpY2soZXYsIF90aGlzLnByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZXYuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICAgIC8vIFdoZW4gRWRnZSArIE5hcnJhdG9yIGFyZSB1c2VkIHRvZ2V0aGVyIChyZWdhcmRsZXNzIG9mIGlmIHRoZSBidXR0b24gaXMgaW4gYSBmb3JtIG9yIG5vdCksIHByZXNzaW5nXG4gICAgICAgICAgICAgICAgLy8gXCJFbnRlclwiIGZpcmVzIHRoaXMgbWV0aG9kIGFuZCBub3QgX29uTWVudUtleURvd24uIENoZWNraW5nIGV2Lm5hdGl2ZUV2ZW50LmRldGFpbCBkaWZmZXJlbnRpYXRlc1xuICAgICAgICAgICAgICAgIC8vIGJldHdlZW4gYSByZWFsIGNsaWNrIGV2ZW50IGFuZCBhIGtleXByZXNzIGV2ZW50IChkZXRhaWwgc2hvdWxkIGJlIHRoZSBudW1iZXIgb2YgbW91c2UgY2xpY2tzKS5cbiAgICAgICAgICAgICAgICAvLyAuLi5QbG90IHR3aXN0ISBGb3IgYSByZWFsIGNsaWNrIGV2ZW50IGluIElFIDExLCBkZXRhaWwgaXMgYWx3YXlzIDAgKEVkZ2Ugc2V0cyBpdCBwcm9wZXJseSB0byAxKS5cbiAgICAgICAgICAgICAgICAvLyBTbyB3ZSBhbHNvIGNoZWNrIHRoZSBwb2ludGVyVHlwZSBwcm9wZXJ0eSwgd2hpY2ggYm90aCBFZGdlIGFuZCBJRSBzZXQgdG8gXCJtb3VzZVwiIGZvciByZWFsIGNsaWNrc1xuICAgICAgICAgICAgICAgIC8vIGFuZCBcIlwiIGZvciBwcmVzc2luZyBcIkVudGVyXCIgd2l0aCBOYXJyYXRvciBvbi5cbiAgICAgICAgICAgICAgICB2YXIgc2hvdWxkRm9jdXNPbkNvbnRhaW5lciA9IGV2Lm5hdGl2ZUV2ZW50LmRldGFpbCAhPT0gMCB8fCBldi5uYXRpdmVFdmVudC5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJztcbiAgICAgICAgICAgICAgICBfdGhpcy5fb25Ub2dnbGVNZW51KHNob3VsZEZvY3VzT25Db250YWluZXIpO1xuICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGluaXRpYWxpemVDb21wb25lbnRSZWYoX3RoaXMpO1xuICAgICAgICBfdGhpcy5fYXN5bmMgPSBuZXcgQXN5bmMoX3RoaXMpO1xuICAgICAgICBfdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50R3JvdXAoX3RoaXMpO1xuICAgICAgICB3YXJuQ29uZGl0aW9uYWxseVJlcXVpcmVkUHJvcHMoQ09NUE9ORU5UX05BTUUsIHByb3BzLCBbJ21lbnVQcm9wcycsICdvbkNsaWNrJ10sICdzcGxpdCcsIF90aGlzLnByb3BzLnNwbGl0KTtcbiAgICAgICAgd2FybkRlcHJlY2F0aW9ucyhDT01QT05FTlRfTkFNRSwgcHJvcHMsIHtcbiAgICAgICAgICAgIHJvb3RQcm9wczogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdzZWNvbmRhcnlUZXh0JyxcbiAgICAgICAgICAgIHRvZ2dsZWQ6ICdjaGVja2VkJyxcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzLl9sYWJlbElkID0gZ2V0SWQoKTtcbiAgICAgICAgX3RoaXMuX2Rlc2NyaXB0aW9uSWQgPSBnZXRJZCgpO1xuICAgICAgICBfdGhpcy5fYXJpYURlc2NyaXB0aW9uSWQgPSBnZXRJZCgpO1xuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIG1lbnVIaWRkZW46IHRydWUsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJhc2VCdXR0b24ucHJvdG90eXBlLCBcIl9pc1NwbGl0QnV0dG9uXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gISF0aGlzLnByb3BzLm1lbnVQcm9wcyAmJiAhIXRoaXMucHJvcHMub25DbGljayAmJiB0aGlzLnByb3BzLnNwbGl0ID09PSB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBCYXNlQnV0dG9uLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIF9iID0gdGhpcy5wcm9wcywgYXJpYURlc2NyaXB0aW9uID0gX2IuYXJpYURlc2NyaXB0aW9uLCBhcmlhTGFiZWwgPSBfYi5hcmlhTGFiZWwsIGFyaWFIaWRkZW4gPSBfYi5hcmlhSGlkZGVuLCBjbGFzc05hbWUgPSBfYi5jbGFzc05hbWUsIGRpc2FibGVkID0gX2IuZGlzYWJsZWQsIGFsbG93RGlzYWJsZWRGb2N1cyA9IF9iLmFsbG93RGlzYWJsZWRGb2N1cywgcHJpbWFyeURpc2FibGVkID0gX2IucHJpbWFyeURpc2FibGVkLCBcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIF9jID0gX2Iuc2Vjb25kYXJ5VGV4dCwgXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICBzZWNvbmRhcnlUZXh0ID0gX2MgPT09IHZvaWQgMCA/IHRoaXMucHJvcHMuZGVzY3JpcHRpb24gOiBfYywgaHJlZiA9IF9iLmhyZWYsIGljb25Qcm9wcyA9IF9iLmljb25Qcm9wcywgbWVudUljb25Qcm9wcyA9IF9iLm1lbnVJY29uUHJvcHMsIHN0eWxlcyA9IF9iLnN0eWxlcywgY2hlY2tlZCA9IF9iLmNoZWNrZWQsIHZhcmlhbnRDbGFzc05hbWUgPSBfYi52YXJpYW50Q2xhc3NOYW1lLCB0aGVtZSA9IF9iLnRoZW1lLCB0b2dnbGUgPSBfYi50b2dnbGUsIGdldENsYXNzTmFtZXMgPSBfYi5nZXRDbGFzc05hbWVzLCByb2xlID0gX2Iucm9sZTtcbiAgICAgICAgdmFyIG1lbnVIaWRkZW4gPSB0aGlzLnN0YXRlLm1lbnVIaWRkZW47XG4gICAgICAgIC8vIEJ1dHRvbiBpcyBkaXNhYmxlZCBpZiB0aGUgd2hvbGUgYnV0dG9uIChpbiBjYXNlIG9mIHNwbGl0QnV0dG9uIGlzIGRpc2FibGVkKSBvciBpZiB0aGUgcHJpbWFyeSBhY3Rpb24gaXMgZGlzYWJsZWRcbiAgICAgICAgdmFyIGlzUHJpbWFyeUJ1dHRvbkRpc2FibGVkID0gZGlzYWJsZWQgfHwgcHJpbWFyeURpc2FibGVkO1xuICAgICAgICB0aGlzLl9jbGFzc05hbWVzID0gZ2V0Q2xhc3NOYW1lc1xuICAgICAgICAgICAgPyBnZXRDbGFzc05hbWVzKHRoZW1lLCBjbGFzc05hbWUsIHZhcmlhbnRDbGFzc05hbWUsIGljb25Qcm9wcyAmJiBpY29uUHJvcHMuY2xhc3NOYW1lLCBtZW51SWNvblByb3BzICYmIG1lbnVJY29uUHJvcHMuY2xhc3NOYW1lLCBpc1ByaW1hcnlCdXR0b25EaXNhYmxlZCwgY2hlY2tlZCwgIW1lbnVIaWRkZW4sICEhdGhpcy5wcm9wcy5tZW51UHJvcHMsIHRoaXMucHJvcHMuc3BsaXQsICEhYWxsb3dEaXNhYmxlZEZvY3VzKVxuICAgICAgICAgICAgOiBnZXRCYXNlQnV0dG9uQ2xhc3NOYW1lcyh0aGVtZSwgc3R5bGVzLCBjbGFzc05hbWUsIHZhcmlhbnRDbGFzc05hbWUsIGljb25Qcm9wcyAmJiBpY29uUHJvcHMuY2xhc3NOYW1lLCBtZW51SWNvblByb3BzICYmIG1lbnVJY29uUHJvcHMuY2xhc3NOYW1lLCBpc1ByaW1hcnlCdXR0b25EaXNhYmxlZCwgISF0aGlzLnByb3BzLm1lbnVQcm9wcywgY2hlY2tlZCwgIW1lbnVIaWRkZW4sIHRoaXMucHJvcHMuc3BsaXQpO1xuICAgICAgICB2YXIgX2QgPSB0aGlzLCBfYXJpYURlc2NyaXB0aW9uSWQgPSBfZC5fYXJpYURlc2NyaXB0aW9uSWQsIF9sYWJlbElkID0gX2QuX2xhYmVsSWQsIF9kZXNjcmlwdGlvbklkID0gX2QuX2Rlc2NyaXB0aW9uSWQ7XG4gICAgICAgIC8vIEFuY2hvciB0YWcgY2Fubm90IGJlIGRpc2FibGVkIGhlbmNlIGluIGRpc2FibGVkIHN0YXRlIHJlbmRlcmluZ1xuICAgICAgICAvLyBhbmNob3IgYnV0dG9uIGFzIG5vcm1hbCBidXR0b25cbiAgICAgICAgdmFyIHJlbmRlckFzQW5jaG9yID0gIWlzUHJpbWFyeUJ1dHRvbkRpc2FibGVkICYmICEhaHJlZjtcbiAgICAgICAgdmFyIHRhZyA9IHJlbmRlckFzQW5jaG9yID8gJ2EnIDogJ2J1dHRvbic7XG4gICAgICAgIHZhciBuYXRpdmVQcm9wcyA9IGdldE5hdGl2ZVByb3BzKFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgYXNzaWduKHJlbmRlckFzQW5jaG9yID8ge30gOiB7IHR5cGU6ICdidXR0b24nIH0sIHRoaXMucHJvcHMucm9vdFByb3BzLCB0aGlzLnByb3BzKSwgcmVuZGVyQXNBbmNob3IgPyBhbmNob3JQcm9wZXJ0aWVzIDogYnV0dG9uUHJvcGVydGllcywgW1xuICAgICAgICAgICAgJ2Rpc2FibGVkJyxcbiAgICAgICAgXSk7XG4gICAgICAgIC8vIENoZWNrIGZvciBhcmlhTGFiZWwgcGFzc2VkIGluIHZpYSBCdXR0b24gcHJvcHMsIGFuZCBmYWxsIGJhY2sgdG8gYXJpYS1sYWJlbCBwYXNzZWQgaW4gdmlhIG5hdGl2ZSBwcm9wc1xuICAgICAgICB2YXIgcmVzb2x2ZWRBcmlhTGFiZWwgPSBhcmlhTGFiZWwgfHwgbmF0aXZlUHJvcHNbJ2FyaWEtbGFiZWwnXTtcbiAgICAgICAgLy8gQ2hlY2sgZm9yIGFyaWFEZXNjcmlwdGlvbiwgc2Vjb25kYXJ5VGV4dCBvciBhcmlhLWRlc2NyaWJlZGJ5IGluIHRoZSBuYXRpdmUgcHJvcHMgdG8gZGV0ZXJtaW5lIHNvdXJjZSBvZlxuICAgICAgICAvLyBhcmlhLWRlc2NyaWJlZGJ5LiBPdGhlcndpc2UgZGVmYXVsdCB0byB1bmRlZmluZWQgc28gcHJvcGVydHkgZG9lcyBub3QgYXBwZWFyIGluIG91dHB1dC5cbiAgICAgICAgdmFyIGFyaWFEZXNjcmliZWRCeSA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGFyaWFEZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgYXJpYURlc2NyaWJlZEJ5ID0gX2FyaWFEZXNjcmlwdGlvbklkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNlY29uZGFyeVRleHQgJiYgdGhpcy5wcm9wcy5vblJlbmRlckRlc2NyaXB0aW9uICE9PSBudWxsUmVuZGVyKSB7XG4gICAgICAgICAgICAvLyBmb3IgYnV0dG9ucyBsaWtlIENvbXBvdW5kQnV0dG9uIHdpdGggYSB2YWxpZCBvblJlbmRlckRlc2NyaXB0aW9uLCB3ZSBuZWVkIHRvIHNldCBhbiBhcmlhRGVzY3JpYmVkQnlcbiAgICAgICAgICAgIC8vIGZvciBidXR0b25zIHRoYXQgZG8gbm90IHJlbmRlciBhbnl0aGluZyAodmlhIG51bGxSZW5kZXIpLCB3ZSBzaG91bGQgbm90IHNldCBhbiBhcmlhRGVzY3JpYmVkQnlcbiAgICAgICAgICAgIGFyaWFEZXNjcmliZWRCeSA9IF9kZXNjcmlwdGlvbklkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5hdGl2ZVByb3BzWydhcmlhLWRlc2NyaWJlZGJ5J10pIHtcbiAgICAgICAgICAgIGFyaWFEZXNjcmliZWRCeSA9IG5hdGl2ZVByb3BzWydhcmlhLWRlc2NyaWJlZGJ5J107XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgYW4gZXhwbGljaXQgYXJpYUxhYmVsIGlzIGdpdmVuLCB1c2UgdGhhdCBhcyB0aGUgbGFiZWwgYW5kIHdlJ3JlIGRvbmUuXG4gICAgICAgIC8vIElmIGFuIGV4cGxpY2l0IGFyaWEtbGFiZWxsZWRieSBpcyBnaXZlbiwgdXNlIHRoYXQgYW5kIHdlJ3JlIGRvbmUuXG4gICAgICAgIC8vIElmIGFueSBraW5kIG9mIGRlc2NyaXB0aW9uIGlzIGdpdmVuICh3aGljaCB3aWxsIGVuZCB1cCBhcyBhbiBhcmlhLWRlc2NyaWJlZGJ5IGF0dHJpYnV0ZSksXG4gICAgICAgIC8vIHNldCB0aGUgbGFiZWxsZWRieSBlbGVtZW50LiBPdGhlcndpc2UsIHRoZSBidXR0b24gaXMgbGFiZWxlZCBpbXBsaWNpdGx5IGJ5IHRoZSBkZXNjZW5kZW50XG4gICAgICAgIC8vIHRleHQgb24gdGhlIGJ1dHRvbiAoaWYgaXQgZXhpc3RzKS4gTmV2ZXIgc2V0IGJvdGggYXJpYS1sYWJlbCBhbmQgYXJpYS1sYWJlbGxlZGJ5LlxuICAgICAgICB2YXIgYXJpYUxhYmVsbGVkQnkgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICghcmVzb2x2ZWRBcmlhTGFiZWwpIHtcbiAgICAgICAgICAgIGlmIChuYXRpdmVQcm9wc1snYXJpYS1sYWJlbGxlZGJ5J10pIHtcbiAgICAgICAgICAgICAgICBhcmlhTGFiZWxsZWRCeSA9IG5hdGl2ZVByb3BzWydhcmlhLWxhYmVsbGVkYnknXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFyaWFEZXNjcmliZWRCeSkge1xuICAgICAgICAgICAgICAgIGFyaWFMYWJlbGxlZEJ5ID0gdGhpcy5faGFzVGV4dCgpID8gX2xhYmVsSWQgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRhdGFJc0ZvY3VzYWJsZSA9IHRoaXMucHJvcHNbJ2RhdGEtaXMtZm9jdXNhYmxlJ10gPT09IGZhbHNlIHx8IChkaXNhYmxlZCAmJiAhYWxsb3dEaXNhYmxlZEZvY3VzKSB8fCB0aGlzLl9pc1NwbGl0QnV0dG9uXG4gICAgICAgICAgICA/IGZhbHNlXG4gICAgICAgICAgICA6IHRydWU7XG4gICAgICAgIHZhciBpc0NoZWNrYm94VHlwZVJvbGUgPSByb2xlID09PSAnbWVudWl0ZW1jaGVja2JveCcgfHwgcm9sZSA9PT0gJ2NoZWNrYm94JztcbiAgICAgICAgLy8gaWYgaXNDaGVja2JveFR5cGVSb2xlLCBhbHdheXMgcmV0dXJuIGEgY2hlY2tlZCB2YWx1ZS5cbiAgICAgICAgLy8gT3RoZXJ3aXNlIG9ubHkgcmV0dXJuIGNoZWNrZWQgdmFsdWUgaWYgdG9nZ2xlIGlzIHNldCB0byB0cnVlLlxuICAgICAgICAvLyBUaGlzIGlzIGJlY2F1c2Ugcm9sZT1cImNoZWNrYm94XCIgYWx3YXlzIG5lZWRzIHRvIGhhdmUgYW4gYXJpYS1jaGVja2VkIHZhbHVlXG4gICAgICAgIC8vIGJ1dCBvdXIgY2hlY2tlZCBwcm9wIG9ubHkgc2V0cyBhcmlhLXByZXNzZWQgaWYgd2UgbWFyayB0aGUgYnV0dG9uIGFzIGEgdG9nZ2xlPVwidHJ1ZVwiXG4gICAgICAgIHZhciBjaGVja2VkT3JQcmVzc2VkVmFsdWUgPSBpc0NoZWNrYm94VHlwZVJvbGUgPyAhIWNoZWNrZWQgOiB0b2dnbGUgPT09IHRydWUgPyAhIWNoZWNrZWQgOiB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBidXR0b25Qcm9wcyA9IGFzc2lnbihuYXRpdmVQcm9wcywgKF9hID0ge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogdGhpcy5fY2xhc3NOYW1lcy5yb290LFxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgICAgIHJlZjogdGhpcy5fbWVyZ2VkUmVmKHRoaXMucHJvcHMuZWxlbWVudFJlZiwgdGhpcy5fYnV0dG9uRWxlbWVudCksXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGlzUHJpbWFyeUJ1dHRvbkRpc2FibGVkICYmICFhbGxvd0Rpc2FibGVkRm9jdXMsXG4gICAgICAgICAgICAgICAgb25LZXlEb3duOiB0aGlzLl9vbktleURvd24sXG4gICAgICAgICAgICAgICAgb25LZXlQcmVzczogdGhpcy5fb25LZXlQcmVzcyxcbiAgICAgICAgICAgICAgICBvbktleVVwOiB0aGlzLl9vbktleVVwLFxuICAgICAgICAgICAgICAgIG9uTW91c2VEb3duOiB0aGlzLl9vbk1vdXNlRG93bixcbiAgICAgICAgICAgICAgICBvbk1vdXNlVXA6IHRoaXMuX29uTW91c2VVcCxcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLl9vbkNsaWNrLFxuICAgICAgICAgICAgICAgICdhcmlhLWxhYmVsJzogcmVzb2x2ZWRBcmlhTGFiZWwsXG4gICAgICAgICAgICAgICAgJ2FyaWEtbGFiZWxsZWRieSc6IGFyaWFMYWJlbGxlZEJ5LFxuICAgICAgICAgICAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogYXJpYURlc2NyaWJlZEJ5LFxuICAgICAgICAgICAgICAgICdhcmlhLWRpc2FibGVkJzogaXNQcmltYXJ5QnV0dG9uRGlzYWJsZWQsXG4gICAgICAgICAgICAgICAgJ2RhdGEtaXMtZm9jdXNhYmxlJzogZGF0YUlzRm9jdXNhYmxlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gYXJpYS1wcmVzc2VkIGF0dHJpYnV0ZSBzaG91bGQgb25seSBiZSBwcmVzZW50IGZvciB0b2dnbGUgYnV0dG9uc1xuICAgICAgICAgICAgLy8gYXJpYS1jaGVja2VkIGF0dHJpYnV0ZSBzaG91bGQgb25seSBiZSBwcmVzZW50IGZvciB0b2dnbGUgYnV0dG9ucyB3aXRoIGNoZWNrYm94IHR5cGUgcm9sZVxuICAgICAgICAgICAgX2FbaXNDaGVja2JveFR5cGVSb2xlID8gJ2FyaWEtY2hlY2tlZCcgOiAnYXJpYS1wcmVzc2VkJ10gPSBjaGVja2VkT3JQcmVzc2VkVmFsdWUsXG4gICAgICAgICAgICBfYSkpO1xuICAgICAgICBpZiAoYXJpYUhpZGRlbikge1xuICAgICAgICAgICAgYnV0dG9uUHJvcHNbJ2FyaWEtaGlkZGVuJ10gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9pc1NwbGl0QnV0dG9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fb25SZW5kZXJTcGxpdEJ1dHRvbkNvbnRlbnQodGFnLCBidXR0b25Qcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5wcm9wcy5tZW51UHJvcHMpIHtcbiAgICAgICAgICAgIGFzc2lnbihidXR0b25Qcm9wcywge1xuICAgICAgICAgICAgICAgICdhcmlhLWV4cGFuZGVkJzogIW1lbnVIaWRkZW4sXG4gICAgICAgICAgICAgICAgJ2FyaWEtb3ducyc6ICFtZW51SGlkZGVuID8gdGhpcy5fbGFiZWxJZCArICctbWVudScgOiBudWxsLFxuICAgICAgICAgICAgICAgICdhcmlhLWhhc3BvcHVwJzogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9vblJlbmRlckNvbnRlbnQodGFnLCBidXR0b25Qcm9wcyk7XG4gICAgfTtcbiAgICBCYXNlQnV0dG9uLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRm9yIHNwbGl0IGJ1dHRvbnMsIHRvdWNoaW5nIGFueXdoZXJlIGluIHRoZSBidXR0b24gc2hvdWxkIGRyb3AgdGhlIGRyb3Bkb3duLCB3aGljaCBzaG91bGQgY29udGFpbiB0aGVcbiAgICAgICAgLy8gcHJpbWFyeSBhY3Rpb24uIFRoaXMgZ2l2ZXMgbW9yZSBoaXQgdGFyZ2V0IHNwYWNlIGZvciB0b3VjaCBlbnZpcm9ubWVudHMuIFdlJ3JlIHNldHRpbmcgdGhlIG9ucG9pbnRlcmRvd24gaGVyZSxcbiAgICAgICAgLy8gYmVjYXVzZSBSZWFjdCBkb2VzIG5vdCBzdXBwb3J0IFBvaW50ZXIgZXZlbnRzIHlldC5cbiAgICAgICAgaWYgKHRoaXMuX2lzU3BsaXRCdXR0b24gJiYgdGhpcy5fc3BsaXRCdXR0b25Db250YWluZXIuY3VycmVudCkge1xuICAgICAgICAgICAgaWYgKCdvbnBvaW50ZXJkb3duJyBpbiB0aGlzLl9zcGxpdEJ1dHRvbkNvbnRhaW5lci5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzLm9uKHRoaXMuX3NwbGl0QnV0dG9uQ29udGFpbmVyLmN1cnJlbnQsICdwb2ludGVyZG93bicsIHRoaXMuX29uUG9pbnRlckRvd24sIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCdvbnBvaW50ZXJ1cCcgaW4gdGhpcy5fc3BsaXRCdXR0b25Db250YWluZXIuY3VycmVudCAmJiB0aGlzLnByb3BzLm9uUG9pbnRlclVwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzLm9uKHRoaXMuX3NwbGl0QnV0dG9uQ29udGFpbmVyLmN1cnJlbnQsICdwb2ludGVydXAnLCB0aGlzLnByb3BzLm9uUG9pbnRlclVwLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQmFzZUJ1dHRvbi5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICAgIC8vIElmIEJ1dHRvbidzIG1lbnUgd2FzIGNsb3NlZCwgcnVuIG9uQWZ0ZXJNZW51RGlzbWlzcy5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMub25BZnRlck1lbnVEaXNtaXNzICYmICFwcmV2U3RhdGUubWVudUhpZGRlbiAmJiB0aGlzLnN0YXRlLm1lbnVIaWRkZW4pIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25BZnRlck1lbnVEaXNtaXNzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJhc2VCdXR0b24ucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9hc3luYy5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuX2V2ZW50cy5kaXNwb3NlKCk7XG4gICAgfTtcbiAgICBCYXNlQnV0dG9uLnByb3RvdHlwZS5mb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzU3BsaXRCdXR0b24gJiYgdGhpcy5fc3BsaXRCdXR0b25Db250YWluZXIuY3VycmVudCkge1xuICAgICAgICAgICAgdGhpcy5fc3BsaXRCdXR0b25Db250YWluZXIuY3VycmVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX2J1dHRvbkVsZW1lbnQuY3VycmVudCkge1xuICAgICAgICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudC5jdXJyZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJhc2VCdXR0b24ucHJvdG90eXBlLmRpc21pc3NNZW51ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9kaXNtaXNzTWVudSgpO1xuICAgIH07XG4gICAgQmFzZUJ1dHRvbi5wcm90b3R5cGUub3Blbk1lbnUgPSBmdW5jdGlvbiAoc2hvdWxkRm9jdXNPbkNvbnRhaW5lciwgc2hvdWxkRm9jdXNPbk1vdW50KSB7XG4gICAgICAgIHRoaXMuX29wZW5NZW51KHNob3VsZEZvY3VzT25Db250YWluZXIsIHNob3VsZEZvY3VzT25Nb3VudCk7XG4gICAgfTtcbiAgICBCYXNlQnV0dG9uLnByb3RvdHlwZS5fb25SZW5kZXJDb250ZW50ID0gZnVuY3Rpb24gKHRhZywgYnV0dG9uUHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgdmFyIFRhZyA9IHRhZztcbiAgICAgICAgdmFyIG1lbnVJY29uUHJvcHMgPSBwcm9wcy5tZW51SWNvblByb3BzLCBtZW51UHJvcHMgPSBwcm9wcy5tZW51UHJvcHMsIF9hID0gcHJvcHMub25SZW5kZXJJY29uLCBvblJlbmRlckljb24gPSBfYSA9PT0gdm9pZCAwID8gdGhpcy5fb25SZW5kZXJJY29uIDogX2EsIF9iID0gcHJvcHMub25SZW5kZXJBcmlhRGVzY3JpcHRpb24sIG9uUmVuZGVyQXJpYURlc2NyaXB0aW9uID0gX2IgPT09IHZvaWQgMCA/IHRoaXMuX29uUmVuZGVyQXJpYURlc2NyaXB0aW9uIDogX2IsIF9jID0gcHJvcHMub25SZW5kZXJDaGlsZHJlbiwgb25SZW5kZXJDaGlsZHJlbiA9IF9jID09PSB2b2lkIDAgPyB0aGlzLl9vblJlbmRlckNoaWxkcmVuIDogX2MsIFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgX2QgPSBwcm9wcy5vblJlbmRlck1lbnUsIFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgb25SZW5kZXJNZW51ID0gX2QgPT09IHZvaWQgMCA/IHRoaXMuX29uUmVuZGVyTWVudSA6IF9kLCBfZSA9IHByb3BzLm9uUmVuZGVyTWVudUljb24sIG9uUmVuZGVyTWVudUljb24gPSBfZSA9PT0gdm9pZCAwID8gdGhpcy5fb25SZW5kZXJNZW51SWNvbiA6IF9lLCBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkO1xuICAgICAgICB2YXIga2V5dGlwUHJvcHMgPSBwcm9wcy5rZXl0aXBQcm9wcztcbiAgICAgICAgaWYgKGtleXRpcFByb3BzICYmIG1lbnVQcm9wcykge1xuICAgICAgICAgICAga2V5dGlwUHJvcHMgPSB0aGlzLl9nZXRNZW1vaXplZE1lbnVCdXR0b25LZXl0aXBQcm9wcyhrZXl0aXBQcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIEJ1dHRvbiA9IGZ1bmN0aW9uIChrZXl0aXBBdHRyaWJ1dGVzKSB7IHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChUYWcsIF9fYXNzaWduKHt9LCBidXR0b25Qcm9wcywga2V5dGlwQXR0cmlidXRlcyksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogX3RoaXMuX2NsYXNzTmFtZXMuZmxleENvbnRhaW5lciwgXCJkYXRhLWF1dG9tYXRpb25pZFwiOiBcInNwbGl0YnV0dG9ucHJpbWFyeVwiIH0sXG4gICAgICAgICAgICAgICAgb25SZW5kZXJJY29uKHByb3BzLCBfdGhpcy5fb25SZW5kZXJJY29uKSxcbiAgICAgICAgICAgICAgICBfdGhpcy5fb25SZW5kZXJUZXh0Q29udGVudHMoKSxcbiAgICAgICAgICAgICAgICBvblJlbmRlckFyaWFEZXNjcmlwdGlvbihwcm9wcywgX3RoaXMuX29uUmVuZGVyQXJpYURlc2NyaXB0aW9uKSxcbiAgICAgICAgICAgICAgICBvblJlbmRlckNoaWxkcmVuKHByb3BzLCBfdGhpcy5fb25SZW5kZXJDaGlsZHJlbiksXG4gICAgICAgICAgICAgICAgIV90aGlzLl9pc1NwbGl0QnV0dG9uICYmXG4gICAgICAgICAgICAgICAgICAgIChtZW51UHJvcHMgfHwgbWVudUljb25Qcm9wcyB8fCBfdGhpcy5wcm9wcy5vblJlbmRlck1lbnVJY29uKSAmJlxuICAgICAgICAgICAgICAgICAgICBvblJlbmRlck1lbnVJY29uKF90aGlzLnByb3BzLCBfdGhpcy5fb25SZW5kZXJNZW51SWNvbiksXG4gICAgICAgICAgICAgICAgbWVudVByb3BzICYmXG4gICAgICAgICAgICAgICAgICAgICFtZW51UHJvcHMuZG9Ob3RMYXllciAmJlxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc2hvdWxkUmVuZGVyTWVudSgpICYmXG4gICAgICAgICAgICAgICAgICAgIG9uUmVuZGVyTWVudShtZW51UHJvcHMsIF90aGlzLl9vblJlbmRlck1lbnUpKSkpOyB9O1xuICAgICAgICB2YXIgQ29udGVudCA9IGtleXRpcFByb3BzID8gKFxuICAgICAgICAvLyBJZiB3ZSdyZSBtYWtpbmcgYSBzcGxpdCBidXR0b24sIHdlIHdvbid0IHB1dCB0aGUga2V5dGlwIGhlcmVcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChLZXl0aXBEYXRhLCB7IGtleXRpcFByb3BzOiAhdGhpcy5faXNTcGxpdEJ1dHRvbiA/IGtleXRpcFByb3BzIDogdW5kZWZpbmVkLCBhcmlhRGVzY3JpYmVkQnk6IGJ1dHRvblByb3BzWydhcmlhLWRlc2NyaWJlZGJ5J10sIGRpc2FibGVkOiBkaXNhYmxlZCB9LCBmdW5jdGlvbiAoa2V5dGlwQXR0cmlidXRlcykgeyByZXR1cm4gQnV0dG9uKGtleXRpcEF0dHJpYnV0ZXMpOyB9KSkgOiAoQnV0dG9uKCkpO1xuICAgICAgICBpZiAobWVudVByb3BzICYmIG1lbnVQcm9wcy5kb05vdExheWVyKSB7XG4gICAgICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgc3R5bGU6IHsgZGlzcGxheTogJ2lubGluZS1ibG9jaycgfSB9LFxuICAgICAgICAgICAgICAgIENvbnRlbnQsXG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvdWxkUmVuZGVyTWVudSgpICYmIG9uUmVuZGVyTWVudShtZW51UHJvcHMsIHRoaXMuX29uUmVuZGVyTWVudSkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsXG4gICAgICAgICAgICBDb250ZW50LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChGb2N1c1JlY3RzLCBudWxsKSkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRvIGhlbHAgZGV0ZXJtaW5lIGlmIHRoZSBtZW51J3MgY29tcG9uZW50IHRyZWUgc2hvdWxkXG4gICAgICogYmUgcmVuZGVyZWQuIEl0IHRha2VzIGludG8gYWNjb3VudCB3aGV0aGVyIHRoZSBtZW51IGlzIGV4cGFuZGVkLFxuICAgICAqIHdoZXRoZXIgaXQgaXMgYSBwZXJzaXN0ZWQgbWVudSBhbmQgd2hldGhlciBpdCBoYXMgYmVlbiBzaG93biB0byB0aGUgdXNlci5cbiAgICAgKi9cbiAgICBCYXNlQnV0dG9uLnByb3RvdHlwZS5fc2hvdWxkUmVuZGVyTWVudSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG1lbnVIaWRkZW4gPSB0aGlzLnN0YXRlLm1lbnVIaWRkZW47XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBwZXJzaXN0TWVudSA9IF9hLnBlcnNpc3RNZW51LCByZW5kZXJQZXJzaXN0ZWRNZW51SGlkZGVuT25Nb3VudCA9IF9hLnJlbmRlclBlcnNpc3RlZE1lbnVIaWRkZW5Pbk1vdW50O1xuICAgICAgICBpZiAoIW1lbnVIaWRkZW4pIHtcbiAgICAgICAgICAgIC8vIEFsd2F5cyBzaG91bGQgcmVuZGVyIGEgbWVudSB3aGVuIGl0IGlzIGV4cGFuZGVkXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwZXJzaXN0TWVudSAmJiAodGhpcy5fcmVuZGVyZWRWaXNpYmxlTWVudSB8fCByZW5kZXJQZXJzaXN0ZWRNZW51SGlkZGVuT25Nb3VudCkpIHtcbiAgICAgICAgICAgIC8vIF9yZW5kZXJlZFZpc2libGVNZW51IGVuc3VyZXMgdGhhdCB0aGUgZmlyc3QgcmVuZGVyaW5nIG9mXG4gICAgICAgICAgICAvLyB0aGUgbWVudSBoYXBwZW5zIG9uLXNjcmVlbiwgYXMgZWRnZSdzIHNjcm9sbGJhciBjYWxjdWxhdGlvbnMgYXJlIG9mZiBpZiBkb25lIHdoaWxlIGhpZGRlbi5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIEJhc2VCdXR0b24ucHJvdG90eXBlLl9oYXNUZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBfb25SZW5kZXJUZXh0Q29udGVudHMgYW5kIF9vblJlbmRlclRleHQgZG8gbm90IHBlcmZvcm0gdGhlIHNhbWUgY2hlY2tzLiBCZWxvdyBpcyBwYXJpdHkgd2l0aCB3aGF0IF9vblJlbmRlclRleHRcbiAgICAgICAgLy8gdXNlZCB0byBoYXZlIGJlZm9yZSB0aGUgcmVmYWN0b3IgdGhhdCBpbnRyb2R1Y2VkIHRoaXMgZnVuY3Rpb24uIF9vblJlbmRlclRleHRDb250ZW50cyBkb2VzIG5vdCByZXF1aXJlIHByb3BzLlxuICAgICAgICAvLyB0ZXh0IHRvIGJlIHVuZGVmaW5lZCBpbiBvcmRlciBmb3IgcHJvcHMuY2hpbGRyZW4gdG8gYmUgdXNlZCBhcyBhIGZhbGxiYWNrLlxuICAgICAgICAvLyBQdXJlbHkgYSBjb2RlIG1haW50YWluYWJpbGl0eS9yZXVzZSBpc3N1ZSwgYnV0IGxvZ2dlZCBhcyBJc3N1ZSAjNDk3OS5cbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMudGV4dCAhPT0gbnVsbCAmJiAodGhpcy5wcm9wcy50ZXh0ICE9PSB1bmRlZmluZWQgfHwgdHlwZW9mIHRoaXMucHJvcHMuY2hpbGRyZW4gPT09ICdzdHJpbmcnKTtcbiAgICB9O1xuICAgIEJhc2VCdXR0b24ucHJvdG90eXBlLl9vblJlbmRlclNwbGl0QnV0dG9uQ29udGVudCA9IGZ1bmN0aW9uICh0YWcsIGJ1dHRvblByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIF9iID0gX2Euc3R5bGVzLCBzdHlsZXMgPSBfYiA9PT0gdm9pZCAwID8ge30gOiBfYiwgZGlzYWJsZWQgPSBfYS5kaXNhYmxlZCwgYWxsb3dEaXNhYmxlZEZvY3VzID0gX2EuYWxsb3dEaXNhYmxlZEZvY3VzLCBjaGVja2VkID0gX2EuY2hlY2tlZCwgZ2V0U3BsaXRCdXR0b25DbGFzc05hbWVzID0gX2EuZ2V0U3BsaXRCdXR0b25DbGFzc05hbWVzLCBwcmltYXJ5RGlzYWJsZWQgPSBfYS5wcmltYXJ5RGlzYWJsZWQsIG1lbnVQcm9wcyA9IF9hLm1lbnVQcm9wcywgdG9nZ2xlID0gX2EudG9nZ2xlLCByb2xlID0gX2Eucm9sZSwgcHJpbWFyeUFjdGlvbkJ1dHRvblByb3BzID0gX2EucHJpbWFyeUFjdGlvbkJ1dHRvblByb3BzO1xuICAgICAgICB2YXIga2V5dGlwUHJvcHMgPSB0aGlzLnByb3BzLmtleXRpcFByb3BzO1xuICAgICAgICB2YXIgbWVudUhpZGRlbiA9IHRoaXMuc3RhdGUubWVudUhpZGRlbjtcbiAgICAgICAgdmFyIGNsYXNzTmFtZXMgPSBnZXRTcGxpdEJ1dHRvbkNsYXNzTmFtZXNcbiAgICAgICAgICAgID8gZ2V0U3BsaXRCdXR0b25DbGFzc05hbWVzKCEhZGlzYWJsZWQsICFtZW51SGlkZGVuLCAhIWNoZWNrZWQsICEhYWxsb3dEaXNhYmxlZEZvY3VzKVxuICAgICAgICAgICAgOiBzdHlsZXMgJiYgZ2V0QmFzZVNwbGl0QnV0dG9uQ2xhc3NOYW1lcyhzdHlsZXMsICEhZGlzYWJsZWQsICFtZW51SGlkZGVuLCAhIWNoZWNrZWQsICEhcHJpbWFyeURpc2FibGVkKTtcbiAgICAgICAgYXNzaWduKGJ1dHRvblByb3BzLCB7XG4gICAgICAgICAgICBvbkNsaWNrOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBvblBvaW50ZXJEb3duOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBvblBvaW50ZXJVcDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgdGFiSW5kZXg6IC0xLFxuICAgICAgICAgICAgJ2RhdGEtaXMtZm9jdXNhYmxlJzogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoa2V5dGlwUHJvcHMgJiYgbWVudVByb3BzKSB7XG4gICAgICAgICAgICBrZXl0aXBQcm9wcyA9IHRoaXMuX2dldE1lbW9pemVkTWVudUJ1dHRvbktleXRpcFByb3BzKGtleXRpcFByb3BzKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29udGFpbmVyUHJvcHMgPSBnZXROYXRpdmVQcm9wcyhidXR0b25Qcm9wcywgW10sIFsnZGlzYWJsZWQnXSk7XG4gICAgICAgIC8vIEFkZCBhZGRpdGlvbmFsIHByb3BzIHRvIGFwcGx5IG9uIHByaW1hcnkgYWN0aW9uIGJ1dHRvblxuICAgICAgICBpZiAocHJpbWFyeUFjdGlvbkJ1dHRvblByb3BzKSB7XG4gICAgICAgICAgICBhc3NpZ24oYnV0dG9uUHJvcHMsIHByaW1hcnlBY3Rpb25CdXR0b25Qcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIFNwbGl0QnV0dG9uID0gZnVuY3Rpb24gKGtleXRpcEF0dHJpYnV0ZXMpIHsgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9fYXNzaWduKHt9LCBjb250YWluZXJQcm9wcywgeyBcImRhdGEta3RwLXRhcmdldFwiOiBrZXl0aXBBdHRyaWJ1dGVzID8ga2V5dGlwQXR0cmlidXRlc1snZGF0YS1rdHAtdGFyZ2V0J10gOiB1bmRlZmluZWQsIHJvbGU6IHJvbGUgPyByb2xlIDogJ2J1dHRvbicsIFwiYXJpYS1kaXNhYmxlZFwiOiBkaXNhYmxlZCwgXCJhcmlhLWhhc3BvcHVwXCI6IHRydWUsIFwiYXJpYS1leHBhbmRlZFwiOiAhbWVudUhpZGRlbiwgXCJhcmlhLXByZXNzZWRcIjogdG9nZ2xlID8gISFjaGVja2VkIDogdW5kZWZpbmVkLCBcImFyaWEtZGVzY3JpYmVkYnlcIjogbWVyZ2VBcmlhQXR0cmlidXRlVmFsdWVzKGJ1dHRvblByb3BzWydhcmlhLWRlc2NyaWJlZGJ5J10sIGtleXRpcEF0dHJpYnV0ZXMgPyBrZXl0aXBBdHRyaWJ1dGVzWydhcmlhLWRlc2NyaWJlZGJ5J10gOiB1bmRlZmluZWQpLCBjbGFzc05hbWU6IGNsYXNzTmFtZXMgJiYgY2xhc3NOYW1lcy5zcGxpdEJ1dHRvbkNvbnRhaW5lciwgb25LZXlEb3duOiBfdGhpcy5fb25TcGxpdEJ1dHRvbkNvbnRhaW5lcktleURvd24sIG9uVG91Y2hTdGFydDogX3RoaXMuX29uVG91Y2hTdGFydCwgcmVmOiBfdGhpcy5fc3BsaXRCdXR0b25Db250YWluZXIsIFwiZGF0YS1pcy1mb2N1c2FibGVcIjogdHJ1ZSwgb25DbGljazogIWRpc2FibGVkICYmICFwcmltYXJ5RGlzYWJsZWQgPyBfdGhpcy5fb25TcGxpdEJ1dHRvblByaW1hcnlDbGljayA6IHVuZGVmaW5lZCwgdGFiSW5kZXg6ICFkaXNhYmxlZCB8fCBhbGxvd0Rpc2FibGVkRm9jdXMgPyAwIDogdW5kZWZpbmVkLCBcImFyaWEtcm9sZWRlc2NyaXB0aW9uXCI6IGJ1dHRvblByb3BzWydhcmlhLXJvbGVkZXNjcmlwdGlvbiddLCBvbkZvY3VzQ2FwdHVyZTogX3RoaXMuX29uU3BsaXRDb250YWluZXJGb2N1c0NhcHR1cmUgfSksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IHN0eWxlOiB7IGRpc3BsYXk6ICdmbGV4JyB9IH0sXG4gICAgICAgICAgICAgICAgX3RoaXMuX29uUmVuZGVyQ29udGVudCh0YWcsIGJ1dHRvblByb3BzKSxcbiAgICAgICAgICAgICAgICBfdGhpcy5fb25SZW5kZXJTcGxpdEJ1dHRvbk1lbnVCdXR0b24oY2xhc3NOYW1lcywga2V5dGlwQXR0cmlidXRlcyksXG4gICAgICAgICAgICAgICAgX3RoaXMuX29uUmVuZGVyU3BsaXRCdXR0b25EaXZpZGVyKGNsYXNzTmFtZXMpKSkpOyB9O1xuICAgICAgICByZXR1cm4ga2V5dGlwUHJvcHMgPyAoUmVhY3QuY3JlYXRlRWxlbWVudChLZXl0aXBEYXRhLCB7IGtleXRpcFByb3BzOiBrZXl0aXBQcm9wcywgZGlzYWJsZWQ6IGRpc2FibGVkIH0sIGZ1bmN0aW9uIChrZXl0aXBBdHRyaWJ1dGVzKSB7IHJldHVybiBTcGxpdEJ1dHRvbihrZXl0aXBBdHRyaWJ1dGVzKTsgfSkpIDogKFNwbGl0QnV0dG9uKCkpO1xuICAgIH07XG4gICAgQmFzZUJ1dHRvbi5wcm90b3R5cGUuX29uUmVuZGVyU3BsaXRCdXR0b25EaXZpZGVyID0gZnVuY3Rpb24gKGNsYXNzTmFtZXMpIHtcbiAgICAgICAgaWYgKGNsYXNzTmFtZXMgJiYgY2xhc3NOYW1lcy5kaXZpZGVyKSB7XG4gICAgICAgICAgICB2YXIgb25DbGljayA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcy5kaXZpZGVyLCBcImFyaWEtaGlkZGVuXCI6IHRydWUsIG9uQ2xpY2s6IG9uQ2xpY2sgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBCYXNlQnV0dG9uLnByb3RvdHlwZS5fb25SZW5kZXJTcGxpdEJ1dHRvbk1lbnVCdXR0b24gPSBmdW5jdGlvbiAoY2xhc3NOYW1lcywga2V5dGlwQXR0cmlidXRlcykge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBhbGxvd0Rpc2FibGVkRm9jdXMgPSBfYS5hbGxvd0Rpc2FibGVkRm9jdXMsIGNoZWNrZWQgPSBfYS5jaGVja2VkLCBkaXNhYmxlZCA9IF9hLmRpc2FibGVkLCBzcGxpdEJ1dHRvbk1lbnVQcm9wcyA9IF9hLnNwbGl0QnV0dG9uTWVudVByb3BzLCBzcGxpdEJ1dHRvbkFyaWFMYWJlbCA9IF9hLnNwbGl0QnV0dG9uQXJpYUxhYmVsO1xuICAgICAgICB2YXIgbWVudUhpZGRlbiA9IHRoaXMuc3RhdGUubWVudUhpZGRlbjtcbiAgICAgICAgdmFyIG1lbnVJY29uUHJvcHMgPSB0aGlzLnByb3BzLm1lbnVJY29uUHJvcHM7XG4gICAgICAgIGlmIChtZW51SWNvblByb3BzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG1lbnVJY29uUHJvcHMgPSB7XG4gICAgICAgICAgICAgICAgaWNvbk5hbWU6ICdDaGV2cm9uRG93bicsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBzcGxpdEJ1dHRvblByb3BzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHNwbGl0QnV0dG9uTWVudVByb3BzKSwgeyBzdHlsZXM6IGNsYXNzTmFtZXMsIGNoZWNrZWQ6IGNoZWNrZWQsIGRpc2FibGVkOiBkaXNhYmxlZCwgYWxsb3dEaXNhYmxlZEZvY3VzOiBhbGxvd0Rpc2FibGVkRm9jdXMsIG9uQ2xpY2s6IHRoaXMuX29uTWVudUNsaWNrLCBtZW51UHJvcHM6IHVuZGVmaW5lZCwgaWNvblByb3BzOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgbWVudUljb25Qcm9wcyksIHsgY2xhc3NOYW1lOiB0aGlzLl9jbGFzc05hbWVzLm1lbnVJY29uIH0pLCBhcmlhTGFiZWw6IHNwbGl0QnV0dG9uQXJpYUxhYmVsLCAnYXJpYS1oYXNwb3B1cCc6IHRydWUsICdhcmlhLWV4cGFuZGVkJzogIW1lbnVIaWRkZW4sICdkYXRhLWlzLWZvY3VzYWJsZSc6IGZhbHNlIH0pO1xuICAgICAgICAvLyBBZGQgZGF0YS1rdHAtZXhlY3V0ZS10YXJnZXQgdG8gdGhlIHNwbGl0IGJ1dHRvbiBpZiB0aGUga2V5dGlwIGlzIGRlZmluZWRcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KEJhc2VCdXR0b24sIF9fYXNzaWduKHt9LCBzcGxpdEJ1dHRvblByb3BzLCB7IFwiZGF0YS1rdHAtZXhlY3V0ZS10YXJnZXRcIjoga2V5dGlwQXR0cmlidXRlcyA/IGtleXRpcEF0dHJpYnV0ZXNbJ2RhdGEta3RwLWV4ZWN1dGUtdGFyZ2V0J10gOiBrZXl0aXBBdHRyaWJ1dGVzLCBvbk1vdXNlRG93bjogdGhpcy5fb25Nb3VzZURvd24sIHRhYkluZGV4OiAtMSB9KSkpO1xuICAgIH07XG4gICAgQmFzZUJ1dHRvbi5wcm90b3R5cGUuX29uUG9pbnRlckRvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgdmFyIG9uUG9pbnRlckRvd24gPSB0aGlzLnByb3BzLm9uUG9pbnRlckRvd247XG4gICAgICAgIGlmIChvblBvaW50ZXJEb3duKSB7XG4gICAgICAgICAgICBvblBvaW50ZXJEb3duKGV2KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXYucG9pbnRlclR5cGUgPT09ICd0b3VjaCcpIHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZVRvdWNoQW5kUG9pbnRlckV2ZW50KCk7XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZXYuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJhc2VCdXR0b24ucHJvdG90eXBlLl9oYW5kbGVUb3VjaEFuZFBvaW50ZXJFdmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gSWYgd2UgYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIHRpbWVvdXQgZnJvbSBhIHByZXZpb3VzIHRvdWNoIGFuZCBwb2ludGVyIGV2ZW50XG4gICAgICAgIC8vIGNhbmNlbCB0aGF0IHRpbWVvdXQgc28gd2UgY2FuIHNldCBhIG5ldyBvbmUuXG4gICAgICAgIGlmICh0aGlzLl9sYXN0VG91Y2hUaW1lb3V0SWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fYXN5bmMuY2xlYXJUaW1lb3V0KHRoaXMuX2xhc3RUb3VjaFRpbWVvdXRJZCk7XG4gICAgICAgICAgICB0aGlzLl9sYXN0VG91Y2hUaW1lb3V0SWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJvY2Vzc2luZ1RvdWNoID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fbGFzdFRvdWNoVGltZW91dElkID0gdGhpcy5fYXN5bmMuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5fcHJvY2Vzc2luZ1RvdWNoID0gZmFsc2U7XG4gICAgICAgICAgICBfdGhpcy5fbGFzdFRvdWNoVGltZW91dElkID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgLy8gVG91Y2ggYW5kIHBvaW50ZXIgZXZlbnRzIGRvbid0IGZvY3VzIHRoZSBidXR0b24gbmF0dXJhbGx5LFxuICAgICAgICAgICAgLy8gc28gYWRkaW5nIGFuIGltcGVyYXRpdmUgZm9jdXMgY2FsbCB0byBndWFyYW50ZWUgdGhpcyBiZWhhdmlvci5cbiAgICAgICAgICAgIF90aGlzLmZvY3VzKCk7XG4gICAgICAgIH0sIFRvdWNoSWRsZURlbGF5KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgaWYgdGhlIHVzZXIgaGl0cyBhIHZhbGlkIGtleWJvYXJkIGtleSB0byBvcGVuIHRoZSBtZW51XG4gICAgICogQHBhcmFtIGV2IC0gdGhlIGtleWJvYXJkIGV2ZW50XG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiB1c2VyIGNsaWNrcyBvbiBjdXN0b20gdHJpZ2dlciBrZXkgaWYgZW5hYmxlZCBvciBhbHQgKyBkb3duIGFycm93IGlmIG5vdC4gRmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIEJhc2VCdXR0b24ucHJvdG90eXBlLl9pc1ZhbGlkTWVudU9wZW5LZXkgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMubWVudVRyaWdnZXJLZXlDb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gZXYud2hpY2ggPT09IHRoaXMucHJvcHMubWVudVRyaWdnZXJLZXlDb2RlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMucHJvcHMubWVudVByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm4gZXYud2hpY2ggPT09IEtleUNvZGVzLmRvd24gJiYgKGV2LmFsdEtleSB8fCBldi5tZXRhS2V5KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBOb3RlOiBXaGVuIGVudGVyIGlzIHByZXNzZWQsIHdlIHdpbGwgbGV0IHRoZSBldmVudCBjb250aW51ZSB0byBwcm9wYWdhdGVcbiAgICAgICAgLy8gdG8gdHJpZ2dlciB0aGUgb25DbGljayBldmVudCBvbiB0aGUgYnV0dG9uXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIEJhc2VCdXR0b24uZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBiYXNlQ2xhc3NOYW1lOiAnbXMtQnV0dG9uJyxcbiAgICAgICAgc3R5bGVzOiB7fSxcbiAgICAgICAgc3BsaXQ6IGZhbHNlLFxuICAgIH07XG4gICAgcmV0dXJuIEJhc2VCdXR0b247XG59KFJlYWN0LkNvbXBvbmVudCkpO1xuZXhwb3J0IHsgQmFzZUJ1dHRvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmFzZUJ1dHRvbi5qcy5tYXAiLCJpbXBvcnQgeyBtZW1vaXplRnVuY3Rpb24gfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgSGlnaENvbnRyYXN0U2VsZWN0b3IsIGdldEZvY3VzU3R5bGUsIGhpZGRlbkNvbnRlbnRTdHlsZSB9IGZyb20gJy4uLy4uL1N0eWxpbmcnO1xudmFyIG5vT3V0bGluZSA9IHtcbiAgICBvdXRsaW5lOiAwLFxufTtcbnZhciBpY29uU3R5bGUgPSBmdW5jdGlvbiAoZm9udFNpemUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBmb250U2l6ZTogZm9udFNpemUsXG4gICAgICAgIG1hcmdpbjogJzAgNHB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMTZweCcsXG4gICAgICAgIGxpbmVIZWlnaHQ6ICcxNnB4JyxcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgZmxleFNocmluazogMCxcbiAgICB9O1xufTtcbi8qKlxuICogR2V0cyB0aGUgYmFzZSBidXR0b24gc3R5bGVzLiBOb3RlOiBiZWNhdXNlIGl0IGlzIGEgYmFzZSBjbGFzcyB0byBiZSB1c2VkIHdpdGggdGhlIGBtZXJnZVJ1bGVzYFxuICogaGVscGVyLCBpdCBzaG91bGQgaGF2ZSB2YWx1ZXMgZm9yIGFsbCBjbGFzcyBuYW1lcyBpbiB0aGUgaW50ZXJmYWNlLiBUaGlzIGxldCBgbWVyZ2VSdWxlc2Agb3B0aW1pemVcbiAqIG1peGluZyBjbGFzcyBuYW1lcyB0b2dldGhlci5cbiAqL1xuZXhwb3J0IHZhciBnZXRTdHlsZXMgPSBtZW1vaXplRnVuY3Rpb24oZnVuY3Rpb24gKHRoZW1lKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICB2YXIgc2VtYW50aWNDb2xvcnMgPSB0aGVtZS5zZW1hbnRpY0NvbG9ycywgZWZmZWN0cyA9IHRoZW1lLmVmZmVjdHMsIGZvbnRzID0gdGhlbWUuZm9udHM7XG4gICAgdmFyIGJvcmRlciA9IHNlbWFudGljQ29sb3JzLmJ1dHRvbkJvcmRlcjtcbiAgICB2YXIgZGlzYWJsZWRCYWNrZ3JvdW5kID0gc2VtYW50aWNDb2xvcnMuZGlzYWJsZWRCYWNrZ3JvdW5kO1xuICAgIHZhciBkaXNhYmxlZFRleHQgPSBzZW1hbnRpY0NvbG9ycy5kaXNhYmxlZFRleHQ7XG4gICAgdmFyIGJ1dHRvbkhpZ2hDb250cmFzdEZvY3VzID0ge1xuICAgICAgICBsZWZ0OiAtMixcbiAgICAgICAgdG9wOiAtMixcbiAgICAgICAgYm90dG9tOiAtMixcbiAgICAgICAgcmlnaHQ6IC0yLFxuICAgICAgICBvdXRsaW5lQ29sb3I6ICdCdXR0b25UZXh0JyxcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHJvb3Q6IFtcbiAgICAgICAgICAgIGdldEZvY3VzU3R5bGUodGhlbWUsIHsgaW5zZXQ6IDEsIGhpZ2hDb250cmFzdFN0eWxlOiBidXR0b25IaWdoQ29udHJhc3RGb2N1cywgYm9yZGVyQ29sb3I6ICd0cmFuc3BhcmVudCcgfSksXG4gICAgICAgICAgICB0aGVtZS5mb250cy5tZWRpdW0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICcgKyBib3JkZXIsXG4gICAgICAgICAgICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICAgICAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMCAxNnB4JyxcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IGVmZmVjdHMucm91bmRlZENvcm5lcjIsXG4gICAgICAgICAgICAgICAgc2VsZWN0b3JzOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElFMTEgd29ya2Fyb3VuZCBmb3IgcHJldmVudGluZyBzaGlmdCBvZiBjaGlsZCBlbGVtZW50cyBvZiBhIGJ1dHRvbiB3aGVuIGFjdGl2ZS5cbiAgICAgICAgICAgICAgICAgICAgJzphY3RpdmUgPiAqJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICByb290RGlzYWJsZWQ6IFtcbiAgICAgICAgICAgIGdldEZvY3VzU3R5bGUodGhlbWUsIHsgaW5zZXQ6IDEsIGhpZ2hDb250cmFzdFN0eWxlOiBidXR0b25IaWdoQ29udHJhc3RGb2N1cywgYm9yZGVyQ29sb3I6ICd0cmFuc3BhcmVudCcgfSksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBkaXNhYmxlZEJhY2tncm91bmQsXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGRpc2FibGVkQmFja2dyb3VuZCxcbiAgICAgICAgICAgICAgICBjb2xvcjogZGlzYWJsZWRUZXh0LFxuICAgICAgICAgICAgICAgIGN1cnNvcjogJ2RlZmF1bHQnLFxuICAgICAgICAgICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgJzpob3Zlcic6IG5vT3V0bGluZSxcbiAgICAgICAgICAgICAgICAgICAgJzpmb2N1cyc6IG5vT3V0bGluZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaWNvbkRpc2FibGVkOiB7XG4gICAgICAgICAgICBjb2xvcjogZGlzYWJsZWRUZXh0LFxuICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2EgPSB7fSxcbiAgICAgICAgICAgICAgICBfYVtIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnR3JheVRleHQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2EpLFxuICAgICAgICB9LFxuICAgICAgICBtZW51SWNvbkRpc2FibGVkOiB7XG4gICAgICAgICAgICBjb2xvcjogZGlzYWJsZWRUZXh0LFxuICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2IgPSB7fSxcbiAgICAgICAgICAgICAgICBfYltIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnR3JheVRleHQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2IpLFxuICAgICAgICB9LFxuICAgICAgICBmbGV4Q29udGFpbmVyOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIGZsZXhXcmFwOiAnbm93cmFwJyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICB9LFxuICAgICAgICBkZXNjcmlwdGlvbjoge1xuICAgICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgfSxcbiAgICAgICAgdGV4dENvbnRhaW5lcjoge1xuICAgICAgICAgICAgZmxleEdyb3c6IDEsXG4gICAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICB9LFxuICAgICAgICBpY29uOiBpY29uU3R5bGUoZm9udHMubWVkaXVtUGx1cy5mb250U2l6ZSksXG4gICAgICAgIG1lbnVJY29uOiBpY29uU3R5bGUoZm9udHMuc21hbGwuZm9udFNpemUpLFxuICAgICAgICBsYWJlbDoge1xuICAgICAgICAgICAgbWFyZ2luOiAnMCA0cHgnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgfSxcbiAgICAgICAgc2NyZWVuUmVhZGVyVGV4dDogaGlkZGVuQ29udGVudFN0eWxlLFxuICAgIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJhc2VCdXR0b24uc3R5bGVzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBIaWdoQ29udHJhc3RTZWxlY3RvciwgY29uY2F0U3R5bGVTZXRzLCBnZXRGb2N1c1N0eWxlLCBnZXRFZGdlQ2hyb21pdW1Ob0hpZ2hDb250cmFzdEFkanVzdFNlbGVjdG9yLCB9IGZyb20gJy4uLy4uLy4uL1N0eWxpbmcnO1xuaW1wb3J0IHsgbWVtb2l6ZUZ1bmN0aW9uIH0gZnJvbSAnLi4vLi4vLi4vVXRpbGl0aWVzJztcbmV4cG9ydCB2YXIgZ2V0U3R5bGVzID0gbWVtb2l6ZUZ1bmN0aW9uKGZ1bmN0aW9uICh0aGVtZSwgY3VzdG9tU3R5bGVzKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2osIF9rLCBfbCwgX207XG4gICAgdmFyIGVmZmVjdHMgPSB0aGVtZS5lZmZlY3RzLCBwYWxldHRlID0gdGhlbWUucGFsZXR0ZSwgc2VtYW50aWNDb2xvcnMgPSB0aGVtZS5zZW1hbnRpY0NvbG9ycztcbiAgICB2YXIgYnV0dG9uSGlnaENvbnRyYXN0Rm9jdXMgPSB7XG4gICAgICAgIGxlZnQ6IC0yLFxuICAgICAgICB0b3A6IC0yLFxuICAgICAgICBib3R0b206IC0yLFxuICAgICAgICByaWdodDogLTIsXG4gICAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgIH07XG4gICAgdmFyIHNwbGl0QnV0dG9uRGl2aWRlckJhc2VTdHlsZXMgPSB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgcmlnaHQ6IDMxLFxuICAgICAgICB0b3A6IDgsXG4gICAgICAgIGJvdHRvbTogOCxcbiAgICB9O1xuICAgIHZhciBzcGxpdEJ1dHRvblN0eWxlcyA9IHtcbiAgICAgICAgc3BsaXRCdXR0b25Db250YWluZXI6IFtcbiAgICAgICAgICAgIGdldEZvY3VzU3R5bGUodGhlbWUsIHsgaGlnaENvbnRyYXN0U3R5bGU6IGJ1dHRvbkhpZ2hDb250cmFzdEZvY3VzLCBpbnNldDogMiB9KSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAnLm1zLUJ1dHRvbi0tZGVmYXVsdCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiAnMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogJzAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmlnaHQ6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJy5tcy1CdXR0b24tLXByaW1hcnknOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJUb3BSaWdodFJhZGl1czogJzAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6ICcwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2EgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYVtIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnV2luZG93VGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ1dpbmRvdycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCBXaW5kb3dUZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmlnaHRXaWR0aDogJzAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNc0hpZ2hDb250cmFzdEFkanVzdDogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2EpLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnLm1zLUJ1dHRvbi0tcHJpbWFyeSArIC5tcy1CdXR0b24nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9iID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2JbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6ICcxcHggc29saWQgV2luZG93VGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckxlZnRXaWR0aDogJzAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2IpLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBzcGxpdEJ1dHRvbkNvbnRhaW5lckhvdmVyZWQ6IHtcbiAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICcubXMtQnV0dG9uLS1wcmltYXJ5Jzoge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfYyA9IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX2NbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnV2luZG93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdIaWdobGlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICcubXMtQnV0dG9uLmlzLWRpc2FibGVkJzoge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogc2VtYW50aWNDb2xvcnMuYnV0dG9uVGV4dERpc2FibGVkLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfZCA9IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX2RbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnR3JheVRleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnR3JheVRleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ1dpbmRvdycsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX2QpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBzcGxpdEJ1dHRvbkNvbnRhaW5lckNoZWNrZWQ6IHtcbiAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICcubXMtQnV0dG9uLS1wcmltYXJ5Jzoge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfZSA9IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX2VbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnV2luZG93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdXaW5kb3dUZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNc0hpZ2hDb250cmFzdEFkanVzdDogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9lKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgc3BsaXRCdXR0b25Db250YWluZXJDaGVja2VkSG92ZXJlZDoge1xuICAgICAgICAgICAgc2VsZWN0b3JzOiB7XG4gICAgICAgICAgICAgICAgJy5tcy1CdXR0b24tLXByaW1hcnknOiB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9mID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBfZltIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdXaW5kb3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ1dpbmRvd1RleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1zSGlnaENvbnRyYXN0QWRqdXN0OiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX2YpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBzcGxpdEJ1dHRvbkNvbnRhaW5lckZvY3VzZWQ6IHtcbiAgICAgICAgICAgIG91dGxpbmU6ICdub25lIWltcG9ydGFudCcsXG4gICAgICAgIH0sXG4gICAgICAgIHNwbGl0QnV0dG9uTWVudUJ1dHRvbjoge1xuICAgICAgICAgICAgcGFkZGluZzogNixcbiAgICAgICAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAgICAgICBib3JkZXJUb3BSaWdodFJhZGl1czogZWZmZWN0cy5yb3VuZGVkQ29ybmVyMixcbiAgICAgICAgICAgIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiBlZmZlY3RzLnJvdW5kZWRDb3JuZXIyLFxuICAgICAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIiArIHBhbGV0dGUubmV1dHJhbFNlY29uZGFyeUFsdCxcbiAgICAgICAgICAgIGJvcmRlckxlZnQ6ICdub25lJyxcbiAgICAgICAgICAgIG91dGxpbmU6ICd0cmFuc3BhcmVudCcsXG4gICAgICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgICAgICB2ZXJ0aWNhbEFsaWduOiAndG9wJyxcbiAgICAgICAgICAgIHdpZHRoOiAzMixcbiAgICAgICAgICAgIG1hcmdpbkxlZnQ6IC0xLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiAwLFxuICAgICAgICAgICAgbWFyZ2luUmlnaHQ6IDAsXG4gICAgICAgICAgICBtYXJnaW5Cb3R0b206IDAsXG4gICAgICAgIH0sXG4gICAgICAgIHNwbGl0QnV0dG9uRGl2aWRlcjogX19hc3NpZ24oX19hc3NpZ24oe30sIHNwbGl0QnV0dG9uRGl2aWRlckJhc2VTdHlsZXMpLCB7IHNlbGVjdG9yczogKF9nID0ge30sXG4gICAgICAgICAgICAgICAgX2dbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdXaW5kb3dUZXh0JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9nKSB9KSxcbiAgICAgICAgc3BsaXRCdXR0b25EaXZpZGVyRGlzYWJsZWQ6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBzcGxpdEJ1dHRvbkRpdmlkZXJCYXNlU3R5bGVzKSwgeyBzZWxlY3RvcnM6IChfaCA9IHt9LFxuICAgICAgICAgICAgICAgIF9oW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnR3JheVRleHQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2gpIH0pLFxuICAgICAgICBzcGxpdEJ1dHRvbk1lbnVCdXR0b25EaXNhYmxlZDoge1xuICAgICAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgICAgICBzZWxlY3RvcnM6IChfaiA9IHtcbiAgICAgICAgICAgICAgICAgICAgJzpob3Zlcic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogJ2RlZmF1bHQnLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnLm1zLUJ1dHRvbi0tcHJpbWFyeSc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9rID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2tbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ0dyYXlUZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICdHcmF5VGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ1dpbmRvdycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfayksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICcubXMtQnV0dG9uLW1lbnVJY29uJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2wgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbFtIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnR3JheVRleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2wpLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfaltIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnR3JheVRleHQnLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXI6ICcxcHggc29saWQgR3JheVRleHQnLFxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdXaW5kb3cnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2opLFxuICAgICAgICB9LFxuICAgICAgICBzcGxpdEJ1dHRvbkZsZXhDb250YWluZXI6IHtcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgZmxleFdyYXA6ICdub3dyYXAnLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgIH0sXG4gICAgICAgIHNwbGl0QnV0dG9uQ29udGFpbmVyRGlzYWJsZWQ6IHtcbiAgICAgICAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgICAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgICAgICAgc2VsZWN0b3JzOiBfX2Fzc2lnbigoX20gPSB7fSwgX21bSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAnR3JheVRleHQnLFxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnR3JheVRleHQnLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ1dpbmRvdycsXG4gICAgICAgICAgICB9LCBfbSksIGdldEVkZ2VDaHJvbWl1bU5vSGlnaENvbnRyYXN0QWRqdXN0U2VsZWN0b3IoKSksXG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gY29uY2F0U3R5bGVTZXRzKHNwbGl0QnV0dG9uU3R5bGVzLCBjdXN0b21TdHlsZXMpO1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TcGxpdEJ1dHRvbi5zdHlsZXMuanMubWFwIiwiaW1wb3J0IHsgY29uY2F0U3R5bGVTZXRzLCBGb250V2VpZ2h0cyB9IGZyb20gJy4uLy4uLy4uL1N0eWxpbmcnO1xuaW1wb3J0IHsgbWVtb2l6ZUZ1bmN0aW9uIH0gZnJvbSAnLi4vLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IGdldFN0eWxlcyBhcyBnZXRCYXNlQnV0dG9uU3R5bGVzIH0gZnJvbSAnLi4vQmFzZUJ1dHRvbi5zdHlsZXMnO1xuaW1wb3J0IHsgZ2V0U3R5bGVzIGFzIGdldFNwbGl0QnV0dG9uU3R5bGVzIH0gZnJvbSAnLi4vU3BsaXRCdXR0b24vU3BsaXRCdXR0b24uc3R5bGVzJztcbmltcG9ydCB7IHByaW1hcnlTdHlsZXMsIHN0YW5kYXJkU3R5bGVzIH0gZnJvbSAnLi4vQnV0dG9uVGhlbWVzJztcbnZhciBERUZBVUxUX0JVVFRPTl9IRUlHSFQgPSAnMzJweCc7XG52YXIgREVGQVVMVF9CVVRUT05fTUlOX1dJRFRIID0gJzgwcHgnO1xuZXhwb3J0IHZhciBnZXRTdHlsZXMgPSBtZW1vaXplRnVuY3Rpb24oZnVuY3Rpb24gKHRoZW1lLCBjdXN0b21TdHlsZXMsIHByaW1hcnkpIHtcbiAgICB2YXIgYmFzZUJ1dHRvblN0eWxlcyA9IGdldEJhc2VCdXR0b25TdHlsZXModGhlbWUpO1xuICAgIHZhciBzcGxpdEJ1dHRvblN0eWxlcyA9IGdldFNwbGl0QnV0dG9uU3R5bGVzKHRoZW1lKTtcbiAgICB2YXIgZGVmYXVsdEJ1dHRvblN0eWxlcyA9IHtcbiAgICAgICAgcm9vdDoge1xuICAgICAgICAgICAgbWluV2lkdGg6IERFRkFVTFRfQlVUVE9OX01JTl9XSURUSCxcbiAgICAgICAgICAgIGhlaWdodDogREVGQVVMVF9CVVRUT05fSEVJR0hULFxuICAgICAgICB9LFxuICAgICAgICBsYWJlbDoge1xuICAgICAgICAgICAgZm9udFdlaWdodDogRm9udFdlaWdodHMuc2VtaWJvbGQsXG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gY29uY2F0U3R5bGVTZXRzKGJhc2VCdXR0b25TdHlsZXMsIGRlZmF1bHRCdXR0b25TdHlsZXMsIHByaW1hcnkgPyBwcmltYXJ5U3R5bGVzKHRoZW1lKSA6IHN0YW5kYXJkU3R5bGVzKHRoZW1lKSwgc3BsaXRCdXR0b25TdHlsZXMsIGN1c3RvbVN0eWxlcyk7XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURlZmF1bHRCdXR0b24uc3R5bGVzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBIaWdoQ29udHJhc3RTZWxlY3RvciB9IGZyb20gJy4uLy4uL1N0eWxpbmcnO1xuaW1wb3J0IHsgSXNGb2N1c1Zpc2libGVDbGFzc05hbWUgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xudmFyIHNwbGl0QnV0dG9uRGl2aWRlckJhc2VTdHlsZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHdpZHRoOiAxLFxuICAgICAgICByaWdodDogMzEsXG4gICAgICAgIHRvcDogOCxcbiAgICAgICAgYm90dG9tOiA4LFxuICAgIH07XG59O1xuZXhwb3J0IGZ1bmN0aW9uIHN0YW5kYXJkU3R5bGVzKHRoZW1lKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICB2YXIgcyA9IHRoZW1lLnNlbWFudGljQ29sb3JzLCBwID0gdGhlbWUucGFsZXR0ZTtcbiAgICB2YXIgYnV0dG9uQmFja2dyb3VuZCA9IHMuYnV0dG9uQmFja2dyb3VuZDtcbiAgICB2YXIgYnV0dG9uQmFja2dyb3VuZFByZXNzZWQgPSBzLmJ1dHRvbkJhY2tncm91bmRQcmVzc2VkO1xuICAgIHZhciBidXR0b25CYWNrZ3JvdW5kSG92ZXJlZCA9IHMuYnV0dG9uQmFja2dyb3VuZEhvdmVyZWQ7XG4gICAgdmFyIGJ1dHRvblRleHQgPSBzLmJ1dHRvblRleHQ7XG4gICAgdmFyIGJ1dHRvblRleHRIb3ZlcmVkID0gcy5idXR0b25UZXh0SG92ZXJlZDtcbiAgICB2YXIgYnV0dG9uVGV4dENoZWNrZWQgPSBzLmJ1dHRvblRleHRDaGVja2VkO1xuICAgIHZhciBidXR0b25UZXh0Q2hlY2tlZEhvdmVyZWQgPSBzLmJ1dHRvblRleHRDaGVja2VkSG92ZXJlZDtcbiAgICByZXR1cm4ge1xuICAgICAgICByb290OiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJ1dHRvbkJhY2tncm91bmQsXG4gICAgICAgICAgICBjb2xvcjogYnV0dG9uVGV4dCxcbiAgICAgICAgfSxcbiAgICAgICAgcm9vdEhvdmVyZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYnV0dG9uQmFja2dyb3VuZEhvdmVyZWQsXG4gICAgICAgICAgICBjb2xvcjogYnV0dG9uVGV4dEhvdmVyZWQsXG4gICAgICAgICAgICBzZWxlY3RvcnM6IChfYSA9IHt9LFxuICAgICAgICAgICAgICAgIF9hW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICdIaWdobGlnaHQnLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ0hpZ2hsaWdodCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfYSksXG4gICAgICAgIH0sXG4gICAgICAgIHJvb3RQcmVzc2VkOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJ1dHRvbkJhY2tncm91bmRQcmVzc2VkLFxuICAgICAgICAgICAgY29sb3I6IGJ1dHRvblRleHRDaGVja2VkLFxuICAgICAgICB9LFxuICAgICAgICByb290RXhwYW5kZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYnV0dG9uQmFja2dyb3VuZFByZXNzZWQsXG4gICAgICAgICAgICBjb2xvcjogYnV0dG9uVGV4dENoZWNrZWQsXG4gICAgICAgIH0sXG4gICAgICAgIHJvb3RDaGVja2VkOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJ1dHRvbkJhY2tncm91bmRQcmVzc2VkLFxuICAgICAgICAgICAgY29sb3I6IGJ1dHRvblRleHRDaGVja2VkLFxuICAgICAgICB9LFxuICAgICAgICByb290Q2hlY2tlZEhvdmVyZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYnV0dG9uQmFja2dyb3VuZFByZXNzZWQsXG4gICAgICAgICAgICBjb2xvcjogYnV0dG9uVGV4dENoZWNrZWRIb3ZlcmVkLFxuICAgICAgICB9LFxuICAgICAgICByb290RGlzYWJsZWQ6IHtcbiAgICAgICAgICAgIHNlbGVjdG9yczogKF9iID0ge30sXG4gICAgICAgICAgICAgICAgX2JbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ0dyYXlUZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICdHcmF5VGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ1dpbmRvdycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfYiksXG4gICAgICAgIH0sXG4gICAgICAgIC8vIFNwbGl0IGJ1dHRvbiBzdHlsZXNcbiAgICAgICAgc3BsaXRCdXR0b25Db250YWluZXI6IHtcbiAgICAgICAgICAgIHNlbGVjdG9yczogKF9jID0ge30sXG4gICAgICAgICAgICAgICAgX2NbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9jKSxcbiAgICAgICAgfSxcbiAgICAgICAgc3BsaXRCdXR0b25NZW51QnV0dG9uOiB7XG4gICAgICAgICAgICBjb2xvcjogcC53aGl0ZSxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICc6aG92ZXInOiB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcC5uZXV0cmFsTGlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9kID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBfZFtIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdIaWdobGlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgc3BsaXRCdXR0b25NZW51QnV0dG9uRGlzYWJsZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcy5idXR0b25CYWNrZ3JvdW5kRGlzYWJsZWQsXG4gICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAnOmhvdmVyJzoge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHMuYnV0dG9uQmFja2dyb3VuZERpc2FibGVkLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBzcGxpdEJ1dHRvbkRpdmlkZXI6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBzcGxpdEJ1dHRvbkRpdmlkZXJCYXNlU3R5bGVzKCkpLCB7IGJhY2tncm91bmRDb2xvcjogcC5uZXV0cmFsVGVydGlhcnlBbHQsIHNlbGVjdG9yczogKF9lID0ge30sXG4gICAgICAgICAgICAgICAgX2VbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdXaW5kb3dUZXh0JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9lKSB9KSxcbiAgICAgICAgc3BsaXRCdXR0b25EaXZpZGVyRGlzYWJsZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5uZXV0cmFsVGVydGlhcnlBbHQsXG4gICAgICAgIH0sXG4gICAgICAgIHNwbGl0QnV0dG9uTWVudUJ1dHRvbkNoZWNrZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcC5uZXV0cmFsUXVhdGVybmFyeUFsdCxcbiAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICc6aG92ZXInOiB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcC5uZXV0cmFsUXVhdGVybmFyeUFsdCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgc3BsaXRCdXR0b25NZW51QnV0dG9uRXhwYW5kZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcC5uZXV0cmFsUXVhdGVybmFyeUFsdCxcbiAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICc6aG92ZXInOiB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcC5uZXV0cmFsUXVhdGVybmFyeUFsdCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgc3BsaXRCdXR0b25NZW51SWNvbjoge1xuICAgICAgICAgICAgY29sb3I6IHMuYnV0dG9uVGV4dCxcbiAgICAgICAgfSxcbiAgICAgICAgc3BsaXRCdXR0b25NZW51SWNvbkRpc2FibGVkOiB7XG4gICAgICAgICAgICBjb2xvcjogcy5idXR0b25UZXh0RGlzYWJsZWQsXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcmltYXJ5U3R5bGVzKHRoZW1lKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2o7XG4gICAgdmFyIHAgPSB0aGVtZS5wYWxldHRlLCBzID0gdGhlbWUuc2VtYW50aWNDb2xvcnM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcm9vdDoge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBzLnByaW1hcnlCdXR0b25CYWNrZ3JvdW5kLFxuICAgICAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIiArIHMucHJpbWFyeUJ1dHRvbkJhY2tncm91bmQsXG4gICAgICAgICAgICBjb2xvcjogcy5wcmltYXJ5QnV0dG9uVGV4dCxcbiAgICAgICAgICAgIHNlbGVjdG9yczogKF9hID0ge30sXG4gICAgICAgICAgICAgICAgX2FbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ1dpbmRvdycsXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ1dpbmRvd1RleHQnLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJ1dpbmRvd1RleHQnLFxuICAgICAgICAgICAgICAgICAgICBNc0hpZ2hDb250cmFzdEFkanVzdDogJ25vbmUnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2FbXCIuXCIgKyBJc0ZvY3VzVmlzaWJsZUNsYXNzTmFtZSArIFwiICY6Zm9jdXNcIl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJzphZnRlcic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IFwibm9uZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVDb2xvcjogcC53aGl0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfYSksXG4gICAgICAgIH0sXG4gICAgICAgIHJvb3RIb3ZlcmVkOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHMucHJpbWFyeUJ1dHRvbkJhY2tncm91bmRIb3ZlcmVkLFxuICAgICAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIiArIHMucHJpbWFyeUJ1dHRvbkJhY2tncm91bmRIb3ZlcmVkLFxuICAgICAgICAgICAgY29sb3I6IHMucHJpbWFyeUJ1dHRvblRleHRIb3ZlcmVkLFxuICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2IgPSB7fSxcbiAgICAgICAgICAgICAgICBfYltIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnV2luZG93JyxcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnSGlnaGxpZ2h0JyxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICdIaWdobGlnaHQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2IpLFxuICAgICAgICB9LFxuICAgICAgICByb290UHJlc3NlZDoge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBzLnByaW1hcnlCdXR0b25CYWNrZ3JvdW5kUHJlc3NlZCxcbiAgICAgICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIgKyBzLnByaW1hcnlCdXR0b25CYWNrZ3JvdW5kUHJlc3NlZCxcbiAgICAgICAgICAgIGNvbG9yOiBzLnByaW1hcnlCdXR0b25UZXh0UHJlc3NlZCxcbiAgICAgICAgICAgIHNlbGVjdG9yczogKF9jID0ge30sXG4gICAgICAgICAgICAgICAgX2NbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ1dpbmRvdycsXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ1dpbmRvd1RleHQnLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJ1dpbmRvd1RleHQnLFxuICAgICAgICAgICAgICAgICAgICBNc0hpZ2hDb250cmFzdEFkanVzdDogJ25vbmUnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2MpLFxuICAgICAgICB9LFxuICAgICAgICByb290RXhwYW5kZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcy5wcmltYXJ5QnV0dG9uQmFja2dyb3VuZFByZXNzZWQsXG4gICAgICAgICAgICBjb2xvcjogcy5wcmltYXJ5QnV0dG9uVGV4dFByZXNzZWQsXG4gICAgICAgIH0sXG4gICAgICAgIHJvb3RDaGVja2VkOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHMucHJpbWFyeUJ1dHRvbkJhY2tncm91bmRQcmVzc2VkLFxuICAgICAgICAgICAgY29sb3I6IHMucHJpbWFyeUJ1dHRvblRleHRQcmVzc2VkLFxuICAgICAgICB9LFxuICAgICAgICByb290Q2hlY2tlZEhvdmVyZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcy5wcmltYXJ5QnV0dG9uQmFja2dyb3VuZFByZXNzZWQsXG4gICAgICAgICAgICBjb2xvcjogcy5wcmltYXJ5QnV0dG9uVGV4dFByZXNzZWQsXG4gICAgICAgIH0sXG4gICAgICAgIHJvb3REaXNhYmxlZDoge1xuICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2QgPSB7fSxcbiAgICAgICAgICAgICAgICBfZFtIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnR3JheVRleHQnLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJ0dyYXlUZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnV2luZG93JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9kKSxcbiAgICAgICAgfSxcbiAgICAgICAgLy8gU3BsaXQgYnV0dG9uIHN0eWxlc1xuICAgICAgICBzcGxpdEJ1dHRvbkNvbnRhaW5lcjoge1xuICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2UgPSB7fSxcbiAgICAgICAgICAgICAgICBfZVtIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2UpLFxuICAgICAgICB9LFxuICAgICAgICBzcGxpdEJ1dHRvbkRpdmlkZXI6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBzcGxpdEJ1dHRvbkRpdmlkZXJCYXNlU3R5bGVzKCkpLCB7IGJhY2tncm91bmRDb2xvcjogcC53aGl0ZSwgc2VsZWN0b3JzOiAoX2YgPSB7fSxcbiAgICAgICAgICAgICAgICBfZltIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ1dpbmRvdycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfZikgfSksXG4gICAgICAgIHNwbGl0QnV0dG9uTWVudUJ1dHRvbjoge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBzLnByaW1hcnlCdXR0b25CYWNrZ3JvdW5kLFxuICAgICAgICAgICAgY29sb3I6IHMucHJpbWFyeUJ1dHRvblRleHQsXG4gICAgICAgICAgICBzZWxlY3RvcnM6IChfZyA9IHt9LFxuICAgICAgICAgICAgICAgIF9nW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnV2luZG93VGV4dCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfZ1snOmhvdmVyJ10gPSB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcy5wcmltYXJ5QnV0dG9uQmFja2dyb3VuZEhvdmVyZWQsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9oID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBfaFtIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdIaWdobGlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9oKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9nKSxcbiAgICAgICAgfSxcbiAgICAgICAgc3BsaXRCdXR0b25NZW51QnV0dG9uRGlzYWJsZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcy5wcmltYXJ5QnV0dG9uQmFja2dyb3VuZERpc2FibGVkLFxuICAgICAgICAgICAgc2VsZWN0b3JzOiB7XG4gICAgICAgICAgICAgICAgJzpob3Zlcic6IHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBzLnByaW1hcnlCdXR0b25CYWNrZ3JvdW5kRGlzYWJsZWQsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHNwbGl0QnV0dG9uTWVudUJ1dHRvbkNoZWNrZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcy5wcmltYXJ5QnV0dG9uQmFja2dyb3VuZFByZXNzZWQsXG4gICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAnOmhvdmVyJzoge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHMucHJpbWFyeUJ1dHRvbkJhY2tncm91bmRQcmVzc2VkLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBzcGxpdEJ1dHRvbk1lbnVCdXR0b25FeHBhbmRlZDoge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBzLnByaW1hcnlCdXR0b25CYWNrZ3JvdW5kUHJlc3NlZCxcbiAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICc6aG92ZXInOiB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcy5wcmltYXJ5QnV0dG9uQmFja2dyb3VuZFByZXNzZWQsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHNwbGl0QnV0dG9uTWVudUljb246IHtcbiAgICAgICAgICAgIGNvbG9yOiBzLnByaW1hcnlCdXR0b25UZXh0LFxuICAgICAgICB9LFxuICAgICAgICBzcGxpdEJ1dHRvbk1lbnVJY29uRGlzYWJsZWQ6IHtcbiAgICAgICAgICAgIGNvbG9yOiBwLm5ldXRyYWxUZXJ0aWFyeSxcbiAgICAgICAgICAgIHNlbGVjdG9yczogKF9qID0ge30sXG4gICAgICAgICAgICAgICAgX2pbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ0dyYXlUZXh0JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9qKSxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QnV0dG9uVGhlbWVzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX2RlY29yYXRlLCBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJhc2VCdXR0b24gfSBmcm9tICcuLi9CYXNlQnV0dG9uJztcbmltcG9ydCB7IGN1c3RvbWl6YWJsZSwgbnVsbFJlbmRlciB9IGZyb20gJy4uLy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBnZXRTdHlsZXMgfSBmcm9tICcuL0RlZmF1bHRCdXR0b24uc3R5bGVzJztcbi8qKlxuICoge0Bkb2NDYXRlZ29yeSBCdXR0b259XG4gKi9cbnZhciBEZWZhdWx0QnV0dG9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEZWZhdWx0QnV0dG9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERlZmF1bHRCdXR0b24oKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgRGVmYXVsdEJ1dHRvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBfYiA9IF9hLnByaW1hcnksIHByaW1hcnkgPSBfYiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYiwgc3R5bGVzID0gX2Euc3R5bGVzLCB0aGVtZSA9IF9hLnRoZW1lO1xuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoQmFzZUJ1dHRvbiwgX19hc3NpZ24oe30sIHRoaXMucHJvcHMsIHsgdmFyaWFudENsYXNzTmFtZTogcHJpbWFyeSA/ICdtcy1CdXR0b24tLXByaW1hcnknIDogJ21zLUJ1dHRvbi0tZGVmYXVsdCcsIHN0eWxlczogZ2V0U3R5bGVzKHRoZW1lLCBzdHlsZXMsIHByaW1hcnkpLCBvblJlbmRlckRlc2NyaXB0aW9uOiBudWxsUmVuZGVyIH0pKSk7XG4gICAgfTtcbiAgICBEZWZhdWx0QnV0dG9uID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGN1c3RvbWl6YWJsZSgnRGVmYXVsdEJ1dHRvbicsIFsndGhlbWUnLCAnc3R5bGVzJ10sIHRydWUpXG4gICAgXSwgRGVmYXVsdEJ1dHRvbik7XG4gICAgcmV0dXJuIERlZmF1bHRCdXR0b247XG59KFJlYWN0LkNvbXBvbmVudCkpO1xuZXhwb3J0IHsgRGVmYXVsdEJ1dHRvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGVmYXVsdEJ1dHRvbi5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19kZWNvcmF0ZSwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjdXN0b21pemFibGUsIG51bGxSZW5kZXIgfSBmcm9tICcuLi8uLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgRGVmYXVsdEJ1dHRvbiB9IGZyb20gJy4uL0RlZmF1bHRCdXR0b24vRGVmYXVsdEJ1dHRvbic7XG4vKipcbiAqIHtAZG9jQ2F0ZWdvcnkgQnV0dG9ufVxuICovXG52YXIgUHJpbWFyeUJ1dHRvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUHJpbWFyeUJ1dHRvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQcmltYXJ5QnV0dG9uKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIFByaW1hcnlCdXR0b24ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEJ1dHRvbiwgX19hc3NpZ24oe30sIHRoaXMucHJvcHMsIHsgcHJpbWFyeTogdHJ1ZSwgb25SZW5kZXJEZXNjcmlwdGlvbjogbnVsbFJlbmRlciB9KSk7XG4gICAgfTtcbiAgICBQcmltYXJ5QnV0dG9uID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGN1c3RvbWl6YWJsZSgnUHJpbWFyeUJ1dHRvbicsIFsndGhlbWUnLCAnc3R5bGVzJ10sIHRydWUpXG4gICAgXSwgUHJpbWFyeUJ1dHRvbik7XG4gICAgcmV0dXJuIFByaW1hcnlCdXR0b247XG59KFJlYWN0LkNvbXBvbmVudCkpO1xuZXhwb3J0IHsgUHJpbWFyeUJ1dHRvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UHJpbWFyeUJ1dHRvbi5qcy5tYXAiLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXHJcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn07XHJcbmltcG9ydCB7IFByaW1hcnlCdXR0b24sIFN0YWNrLCBUZXh0RmllbGQgfSBmcm9tICdAZmx1ZW50dWkvcmVhY3QnO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHsgYWRkVmVoaWNsZSB9IGZyb20gJy4uLy4uL3N0b3JlL3ZlaGljbGUvYWN0aW9ucyc7XHJcbmV4cG9ydCB2YXIgVmVoaWNsZUFkZCA9IGZ1bmN0aW9uIChwcm9wcykge1xyXG4gICAgdmFyIF9kZWZhdWx0ID0geyBpZDogMCwgbmFtZTogJycsIHBob25lTm86ICcnIH07XHJcbiAgICB2YXIgX2EgPSBSZWFjdC51c2VTdGF0ZShfZGVmYXVsdCksIG5ld1ZlaGljbGUgPSBfYVswXSwgc2V0TmV3VmVoaWNsZSA9IF9hWzFdO1xyXG4gICAgdmFyIGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcclxuICAgIHZhciB1cGRhdGVOZXdWZWhpY2xlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgc2V0TmV3VmVoaWNsZShfX2Fzc2lnbihfX2Fzc2lnbih7fSwgbmV3VmVoaWNsZSksIChfYSA9IHt9LCBfYVtlLnRhcmdldC5uYW1lXSA9IGUudGFyZ2V0LnZhbHVlLCBfYSkpKTtcclxuICAgIH07XHJcbiAgICB2YXIgaGFuZGxlU3VibWl0ID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZGlzcGF0Y2goYWRkVmVoaWNsZShuZXdWZWhpY2xlKSk7XHJcbiAgICAgICAgc2V0TmV3VmVoaWNsZShfZGVmYXVsdCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiLCB7IG9uU3VibWl0OiBoYW5kbGVTdWJtaXQgfSwgcHJvcHMuaXNEdXBsaWNhdGUgPyAoUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCkpIDogKFJlYWN0LmNyZWF0ZUVsZW1lbnQoU3RhY2ssIHsgaG9yaXpvbnRhbDogdHJ1ZSwgdG9rZW5zOiB7IGNoaWxkcmVuR2FwOiAxMCB9IH0sXHJcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUZXh0RmllbGQsIHsgbmFtZTogXCJuYW1lXCIsIHBsYWNlaG9sZGVyOiBcIkVudGVyIG5hbWVcIiwgdmFsdWU6IG5ld1ZlaGljbGUubmFtZSwgb25DaGFuZ2U6IHVwZGF0ZU5ld1ZlaGljbGUgfSksXHJcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUZXh0RmllbGQsIHsgbmFtZTogXCJwaG9uZU5vXCIsIHBsYWNlaG9sZGVyOiBcIkVudGVyIHBob25lIE5vXCIsIHZhbHVlOiBuZXdWZWhpY2xlLnBob25lTm8sIG9uQ2hhbmdlOiB1cGRhdGVOZXdWZWhpY2xlIH0pLFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUHJpbWFyeUJ1dHRvbiwgeyB0eXBlOiBcInN1Ym1pdFwiIH0sIFwiQWRkXCIpKSkpKTtcclxufTtcclxuIiwidmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxyXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59O1xyXG5pbXBvcnQgeyBEZXRhaWxzTGlzdCwgRGV0YWlsc0xpc3RMYXlvdXRNb2RlLCBMaW5rIH0gZnJvbSAnQGZsdWVudHVpL3JlYWN0JztcclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQgeyByZW1vdmVWZWhpY2xlIH0gZnJvbSAnLi4vLi4vc3RvcmUvdmVoaWNsZS9hY3Rpb25zJztcclxuaW1wb3J0IHsgVmVoaWNsZUFkZCB9IGZyb20gJy4vdmVoaWNsZUFkZCc7XHJcbmV4cG9ydCB2YXIgVmVoaWNsZUxpc3QgPSBmdW5jdGlvbiAocHJvcHMpIHtcclxuICAgIHZhciB0aXRsZSA9IHByb3BzLnRpdGxlO1xyXG4gICAgdmFyIHZlaGljbGVzID0gdXNlU2VsZWN0b3IoZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZS52ZWhpY2xlOyB9KTtcclxuICAgIHZhciBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XHJcbiAgICB2YXIgZGlzcGF0Y2hOZXdWZWhpY2xlID0gZnVuY3Rpb24gKGlkKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZGlzcGF0Y2gocmVtb3ZlVmVoaWNsZShpZCkpO1xyXG4gICAgfTsgfTtcclxuICAgIHZhciBfY29sdW1ucyA9IFtcclxuICAgICAgICB7IGtleTogJ25hbWUnLCBuYW1lOiAnbmFtZScsIGZpZWxkTmFtZTogJ25hbWUnLCBtaW5XaWR0aDogMTAwLCBtYXhXaWR0aDogMjAwLCBpc1Jlc2l6YWJsZTogdHJ1ZSB9LFxyXG4gICAgICAgIHsga2V5OiAncGhvbmVObycsIG5hbWU6ICdQaG9uZSBObycsIGZpZWxkTmFtZTogJ3Bob25lTm8nLCBtaW5XaWR0aDogMTAwLCBtYXhXaWR0aDogMjAwLCBpc1Jlc2l6YWJsZTogdHJ1ZSB9LFxyXG4gICAgXTtcclxuICAgIGlmICghcHJvcHMuaXNEdXBsaWNhdGUpIHtcclxuICAgICAgICBfY29sdW1ucy5wdXNoKHsga2V5OiAnZGVsZXRlJywgbmFtZTogJ2RlbGV0ZScsIGZpZWxkTmFtZTogJycsIG1pbldpZHRoOiAxMDAsIG1heFdpZHRoOiAyMDAsIGlzUmVzaXphYmxlOiB0cnVlIH0pO1xyXG4gICAgfVxyXG4gICAgdmFyIF9yZW5kZXJJdGVtQ29sdW1uID0gZnVuY3Rpb24gKGl0ZW0sIGluZGV4LCBjb2x1bW4pIHtcclxuICAgICAgICB2YXIgX2EsIF9iO1xyXG4gICAgICAgIHZhciBmaWVsZENvbnRlbnQgPSBpdGVtW2NvbHVtbi5maWVsZE5hbWVdO1xyXG4gICAgICAgIHN3aXRjaCAoKF9hID0gY29sdW1uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eua2V5KSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2RlbGV0ZSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHByb3BzLmlzRHVwbGljYXRlID8gJycgOiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIHsgb25DbGljazogZGlzcGF0Y2hOZXdWZWhpY2xlKCgoX2IgPSBpdGVtKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuaWQpIHx8IDApIH0sIFwiZGVsZXRlXCIpKTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBudWxsLCBmaWVsZENvbnRlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaDFcIiwgbnVsbCwgdGl0bGUpLFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGV0YWlsc0xpc3QsIHsgaXRlbXM6IHZlaGljbGVzLCBjb2x1bW5zOiBfY29sdW1ucywgc2V0S2V5OiBcInNldFwiLCBvblJlbmRlckl0ZW1Db2x1bW46IF9yZW5kZXJJdGVtQ29sdW1uLCBsYXlvdXRNb2RlOiBEZXRhaWxzTGlzdExheW91dE1vZGUuanVzdGlmaWVkLCBzZWxlY3Rpb25QcmVzZXJ2ZWRPbkVtcHR5Q2xpY2s6IHRydWUgfSksXHJcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChWZWhpY2xlQWRkLCBfX2Fzc2lnbih7fSwgcHJvcHMpKSkpO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBTdGFjayB9IGZyb20gJ0BmbHVlbnR1aS9yZWFjdCc7XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFZlaGljbGVMaXN0IH0gZnJvbSAnLi92ZWhpY2xlTGlzdCc7XHJcbmV4cG9ydCB2YXIgQ29udGFpbmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFN0YWNrLCB7IGhvcml6b250YWw6IHRydWUsIHRva2VuczogeyBjaGlsZHJlbkdhcDogMzAgfSB9LFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU3RhY2suSXRlbSwgbnVsbCxcclxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChWZWhpY2xlTGlzdCwgeyB0aXRsZTogXCJWZWhpY2xlIExpc3RcIiB9KSksXHJcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChTdGFjay5JdGVtLCB7IHN0eWxlczogeyByb290OiB7IGJhY2tncm91bmQ6IFwiZ3JleVwiIH0gfSB9LCBcIlxcdTAwQTBcIiksXHJcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChTdGFjay5JdGVtLCBudWxsLFxyXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFZlaGljbGVMaXN0LCB7IHRpdGxlOiBcIlZlaGljbGUgTGlzdCAtIER1cGxpY2F0ZVwiLCBpc0R1cGxpY2F0ZTogdHJ1ZSB9KSkpKTtcclxufTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQgeyByZW1vdmVWZWhpY2xlIH0gZnJvbSAnLi4vLi4vc3RvcmUvdmVoaWNsZS9hY3Rpb25zJztcclxuZXhwb3J0IHZhciBEZXRhaWwgPSBmdW5jdGlvbiAocHJvcHMpIHtcclxuICAgIHZhciB2ZWhpY2xlID0gdXNlU2VsZWN0b3IoZnVuY3Rpb24gKHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIHAgPSBzdGF0ZS52ZWhpY2xlLmZpbmQoZnVuY3Rpb24gKHApIHsgcmV0dXJuIHAuaWQudG9TdHJpbmcoKSA9PT0gcHJvcHMubWF0Y2gucGFyYW1zLmlkOyB9KTtcclxuICAgICAgICByZXR1cm4gcDtcclxuICAgIH0pO1xyXG4gICAgdmFyIGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcclxuICAgIHZhciBoYW5kbGVDbGljayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgZGlzcGF0Y2gocmVtb3ZlVmVoaWNsZSgoKF9hID0gdmVoaWNsZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmlkKSB8fCAwKSk7XHJcbiAgICAgICAgcHJvcHMuaGlzdG9yeS5wdXNoKFwiL1wiKTtcclxuICAgIH07XHJcbiAgICB2YXIgdiA9IHZlaGljbGUgPyAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJwb3N0XCIgfSxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaDRcIiwgeyBjbGFzc05hbWU6IFwiY2VudGVyXCIgfSwgdmVoaWNsZS5uYW1lKSxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCBudWxsLCB2ZWhpY2xlLnBob25lTm8pLFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiY2VudGVyXCIgfSxcclxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7IGNsYXNzTmFtZTogXCJidG5cIiwgb25DbGljazogaGFuZGxlQ2xpY2sgfSwgXCJEZWxldGVcIikpKSkgOiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJjZW50ZXJcIiB9LCBcIkxvYWRpbmcgdmVoaWNsZS4uLlwiKSk7XHJcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJjb250aWFuZXJcIiB9LCB2KTtcclxufTtcclxuIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIHdhaXQobXMpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXR1cm4gc2V0VGltZW91dChyZXNvbHZlLCBtcyk7IH0pO1xyXG59XHJcbmV4cG9ydCB2YXIgc2VhcmNoQ2xpZW50ID0gZnVuY3Rpb24gKGNsaWVudFZpZXcpIHsgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCkgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDogXHJcbiAgICAgICAgICAgIC8vIGFqYXggcHJvbWlzZVxyXG4gICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB3YWl0KDMwMDApLnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiU2VhcmNoQ2xpZW50XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IGNsaWVudFZpZXdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgLy8gYWpheCBwcm9taXNlXHJcbiAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn0pOyB9OyB9O1xyXG5leHBvcnQgdmFyIGFkZENsaWVudCA9IGZ1bmN0aW9uIChjbGllbnQpIHsgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCkgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKCdpbiBhc3luYyBEaXNwYXRjaCcpO1xyXG4gICAgICAgIC8vYXdhaXQgd2FpdCgyMDAwKTtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKCdpbiBhc3luYyBEaXNwYXRjaCBhZnRlciB3YWl0IDIwMDAnKTtcclxuICAgICAgICBkaXNwYXRjaCh7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiQWRkQ2xpZW50XCIsXHJcbiAgICAgICAgICAgIHBheWxvYWQ6IGNsaWVudFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgIH0pO1xyXG59KTsgfTsgfTtcclxuZXhwb3J0IHZhciByZW1vdmVDbGllbnQgPSBmdW5jdGlvbiAoaWQpIHsgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCkgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAvL2F3YWl0IHdhaXQoMjAwMCk7XHJcbiAgICAgICAgZGlzcGF0Y2goe1xyXG4gICAgICAgICAgICB0eXBlOiBcIlJlbW92ZUNsaWVudFwiLFxyXG4gICAgICAgICAgICBwYXlsb2FkOiBpZFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgIH0pO1xyXG59KTsgfTsgfTtcclxuIiwiaW1wb3J0IHsgUHJpbWFyeUJ1dHRvbiwgRGVmYXVsdEJ1dHRvbiB9IGZyb20gJ0BmbHVlbnR1aS9yZWFjdCc7XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHsgdXNlSGlzdG9yeSB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5pbXBvcnQgeyByZW1vdmVDbGllbnQgfSBmcm9tICcuLi8uLi9zdG9yZS9jbGllbnQvYWN0aW9ucyc7XHJcbmV4cG9ydCB2YXIgRGV0YWlsID0gZnVuY3Rpb24gKHByb3BzKSB7XHJcbiAgICB2YXIgY2xpZW50ID0gdXNlU2VsZWN0b3IoZnVuY3Rpb24gKHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIHAgPSBzdGF0ZS5jbGllbnRWaWV3Lmxpc3QuZmluZChmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5pZC50b1N0cmluZygpID09PSBwcm9wcy5tYXRjaC5wYXJhbXMuaWQ7IH0pO1xyXG4gICAgICAgIHJldHVybiBwO1xyXG4gICAgfSk7XHJcbiAgICB2YXIgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xyXG4gICAgdmFyIGhpc3RvcnkgPSB1c2VIaXN0b3J5KCk7XHJcbiAgICB2YXIgaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGRpc3BhdGNoKHJlbW92ZUNsaWVudCgoKF9hID0gY2xpZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaWQpIHx8IDApKTtcclxuICAgICAgICBwcm9wcy5oaXN0b3J5LnB1c2goXCIvY2xpZW50c1wiKTtcclxuICAgIH07XHJcbiAgICB2YXIgYmFja0NsaWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGhpc3RvcnkuZ29CYWNrKCk7XHJcbiAgICB9O1xyXG4gICAgdmFyIHAgPSBjbGllbnQgPyAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJwb3N0XCIgfSxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaDFcIiwgeyBjbGFzc05hbWU6IFwiY2VudGVyXCIgfSwgY2xpZW50Lm5hbWUpLFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIG51bGwsIGNsaWVudC5waG9uZU5vKSxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCBudWxsLCBjbGllbnQuYWRkcmVzcyksXHJcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJjZW50ZXJcIiB9LFxyXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFByaW1hcnlCdXR0b24sIHsgb25DbGljazogaGFuZGxlQ2xpY2sgfSwgXCJEZWxldGVcIiksXHJcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEJ1dHRvbiwgeyBvbkNsaWNrOiBiYWNrQ2xpY2sgfSwgXCJCYWNrXCIpKSkpIDogKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiY2VudGVyXCIgfSwgXCJMb2FkaW5nIHBlcnNvbi4uLlwiKSk7XHJcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJjb250aWFuZXJcIiB9LCBwKTtcclxufTtcclxuIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZU1lbW9pemVyIH0gZnJvbSAnLi4vbWVtb2l6ZSc7XG5mdW5jdGlvbiBjcmVhdGVDb21wb3NlZENvbXBvbmVudChvdXRlcikge1xuICAgIHZhciBPdXRlciA9IG91dGVyO1xuICAgIHZhciBvdXRlck1lbW9pemVyID0gY3JlYXRlTWVtb2l6ZXIoZnVuY3Rpb24gKGlubmVyKSB7XG4gICAgICAgIGlmIChvdXRlciA9PT0gaW5uZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGVkIHRvIGNvbXBvc2UgYSBjb21wb25lbnQgd2l0aCBpdHNlbGYuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIElubmVyID0gaW5uZXI7XG4gICAgICAgIHZhciBpbm5lck1lbW9pemVyID0gY3JlYXRlTWVtb2l6ZXIoZnVuY3Rpb24gKGRlZmF1bHRSZW5kZXIpIHtcbiAgICAgICAgICAgIHZhciBJbm5lcldpdGhEZWZhdWx0UmVuZGVyID0gZnVuY3Rpb24gKGlubmVyUHJvcHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChJbm5lciwgX19hc3NpZ24oe30sIGlubmVyUHJvcHMsIHsgZGVmYXVsdFJlbmRlcjogZGVmYXVsdFJlbmRlciB9KSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIElubmVyV2l0aERlZmF1bHRSZW5kZXI7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgT3V0ZXJXaXRoRGVmYXVsdFJlbmRlciA9IGZ1bmN0aW9uIChvdXRlclByb3BzKSB7XG4gICAgICAgICAgICB2YXIgZGVmYXVsdFJlbmRlciA9IG91dGVyUHJvcHMuZGVmYXVsdFJlbmRlcjtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KE91dGVyLCBfX2Fzc2lnbih7fSwgb3V0ZXJQcm9wcywgeyBkZWZhdWx0UmVuZGVyOiBkZWZhdWx0UmVuZGVyID8gaW5uZXJNZW1vaXplcihkZWZhdWx0UmVuZGVyKSA6IElubmVyIH0pKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIE91dGVyV2l0aERlZmF1bHRSZW5kZXI7XG4gICAgfSk7XG4gICAgcmV0dXJuIG91dGVyTWVtb2l6ZXI7XG59XG52YXIgY29tcG9uZW50QXNNZW1vaXplciA9IGNyZWF0ZU1lbW9pemVyKGNyZWF0ZUNvbXBvc2VkQ29tcG9uZW50KTtcbi8qKlxuICogQ29tcG9zZXMgdHdvIGNvbXBvbmVudHMgd2hpY2ggY29uZm9ybSB0byB0aGUgYElDb21wb25lbnRBc2Agc3BlY2lmaWNhdGlvbjsgdGhhdCBpcywgdHdvXG4gKiBjb21wb25lbnRzIHdoaWNoIGFjY2VwdCBhIGBkZWZhdWx0UmVuZGVyYCBwcm9wLCB3aGljaCBpcyBhICdkZWZhdWx0JyBpbXBsZW1lbnRhdGlvbiBvZlxuICogYSBjb21wb25lbnQgd2hpY2ggYWNjZXB0cyB0aGUgc2FtZSBvdmVyYWxsIHByb3BzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBvc2VDb21wb25lbnRBcyhvdXRlciwgaW5uZXIpIHtcbiAgICByZXR1cm4gY29tcG9uZW50QXNNZW1vaXplcihvdXRlcikoaW5uZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcG9zZUNvbXBvbmVudEFzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEZvY3VzWm9uZSwgRm9jdXNab25lRGlyZWN0aW9uIH0gZnJvbSAnQGZsdWVudHVpL3JlYWN0LWZvY3VzJztcbmltcG9ydCB7IGluaXRpYWxpemVDb21wb25lbnRSZWYsIGNsYXNzTmFtZXNGdW5jdGlvbiwgZGl2UHJvcGVydGllcywgZWxlbWVudENvbnRhaW5zLCBmb2N1c0ZpcnN0Q2hpbGQsIGdldE5hdGl2ZVByb3BzLCB3YXJuTXV0dWFsbHlFeGNsdXNpdmUsIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IEtleXRpcE1hbmFnZXIgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMva2V5dGlwcy9LZXl0aXBNYW5hZ2VyJztcbnZhciBnZXRDbGFzc05hbWVzID0gY2xhc3NOYW1lc0Z1bmN0aW9uKCk7XG52YXIgQ09NUE9ORU5UX05BTUUgPSAnT3ZlcmZsb3dTZXQnO1xudmFyIE92ZXJmbG93U2V0QmFzZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoT3ZlcmZsb3dTZXRCYXNlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE92ZXJmbG93U2V0QmFzZShwcm9wcykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX2ZvY3VzWm9uZSA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgICAgICBfdGhpcy5fcGVyc2lzdGVkS2V5dGlwcyA9IHt9O1xuICAgICAgICBfdGhpcy5fa2V5dGlwTWFuYWdlciA9IEtleXRpcE1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgX3RoaXMuX2RpdkNvbnRhaW5lciA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgICAgICBfdGhpcy5fb25SZW5kZXJJdGVtcyA9IGZ1bmN0aW9uIChpdGVtcykge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSwgaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGtleTogaXRlbS5rZXksIGNsYXNzTmFtZTogX3RoaXMuX2NsYXNzTmFtZXMuaXRlbSB9LCBfdGhpcy5wcm9wcy5vblJlbmRlckl0ZW0oaXRlbSkpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25SZW5kZXJPdmVyZmxvd0J1dHRvbldyYXBwZXIgPSBmdW5jdGlvbiAoaXRlbXMpIHtcbiAgICAgICAgICAgIHZhciB3cmFwcGVyRGl2UHJvcHMgPSB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBfdGhpcy5fY2xhc3NOYW1lcy5vdmVyZmxvd0J1dHRvbixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgb3ZlcmZsb3dLZXl0aXBTZXF1ZW5jZXMgPSBfdGhpcy5wcm9wcy5rZXl0aXBTZXF1ZW5jZXM7XG4gICAgICAgICAgICB2YXIgbmV3T3ZlcmZsb3dJdGVtcyA9IFtdO1xuICAgICAgICAgICAgaWYgKG92ZXJmbG93S2V5dGlwU2VxdWVuY2VzKSB7XG4gICAgICAgICAgICAgICAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbiAob3ZlcmZsb3dJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXl0aXAgPSBvdmVyZmxvd0l0ZW0ua2V5dGlwUHJvcHM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXl0aXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBwZXJzaXN0ZWQga2V5dGlwXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGVyc2lzdGVkS2V5dGlwID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGtleXRpcC5jb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleVNlcXVlbmNlczoga2V5dGlwLmtleVNlcXVlbmNlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDoga2V5dGlwLmRpc2FibGVkIHx8ICEhKG92ZXJmbG93SXRlbS5kaXNhYmxlZCB8fCBvdmVyZmxvd0l0ZW0uaXNEaXNhYmxlZCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzRHluYW1pY0NoaWxkcmVuOiBrZXl0aXAuaGFzRHluYW1pY0NoaWxkcmVuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc01lbnU6IGtleXRpcC5oYXNNZW51LFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXl0aXAuaGFzRHluYW1pY0NoaWxkcmVuIHx8IF90aGlzLl9nZXRTdWJNZW51Rm9ySXRlbShvdmVyZmxvd0l0ZW0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGtleXRpcCBoYXMgYSBzdWJtZW51IG9yIGNoaWxkcmVuIG5vZGVzLCBjaGFuZ2Ugb25FeGVjdXRlIHRvIHBlcnNpc3RlZEtleXRpcEV4ZWN1dGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJzaXN0ZWRLZXl0aXAub25FeGVjdXRlID0gX3RoaXMuX2tleXRpcE1hbmFnZXIubWVudUV4ZWN1dGUuYmluZChfdGhpcy5fa2V5dGlwTWFuYWdlciwgb3ZlcmZsb3dLZXl0aXBTZXF1ZW5jZXMsIG92ZXJmbG93SXRlbS5rZXl0aXBQcm9wcy5rZXlTZXF1ZW5jZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGtleXRpcCBkb2Vzbid0IGhhdmUgYSBzdWJtZW51LCBqdXN0IGV4ZWN1dGUgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVyc2lzdGVkS2V5dGlwLm9uRXhlY3V0ZSA9IGtleXRpcC5vbkV4ZWN1dGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhpcyBwZXJzaXN0ZWQga2V5dGlwIHRvIG91ciBpbnRlcm5hbCBsaXN0LCB1c2UgYSB0ZW1wb3JhcnkgdW5pcXVlSUQgKGl0cyBjb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdW5pcXVlSUQgd2lsbCBnZXQgdXBkYXRlZCBvbiByZWdpc3RlclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3BlcnNpc3RlZEtleXRpcHNbcGVyc2lzdGVkS2V5dGlwLmNvbnRlbnRdID0gcGVyc2lzdGVkS2V5dGlwO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBvdmVyZmxvdyBzZXF1ZW5jZSB0byB0aGlzIGl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdPdmVyZmxvd0l0ZW0gPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb3ZlcmZsb3dJdGVtKSwgeyBrZXl0aXBQcm9wczogX19hc3NpZ24oX19hc3NpZ24oe30sIGtleXRpcCksIHsgb3ZlcmZsb3dTZXRTZXF1ZW5jZTogb3ZlcmZsb3dLZXl0aXBTZXF1ZW5jZXMgfSkgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdPdmVyZmxvd0l0ZW1zLnB1c2gobmV3T3ZlcmZsb3dJdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGhpbmcgdG8gY2hhbmdlLCBhZGQgb3ZlcmZsb3dJdGVtIHRvIGxpc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld092ZXJmbG93SXRlbXMucHVzaChvdmVyZmxvd0l0ZW0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdPdmVyZmxvd0l0ZW1zID0gaXRlbXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfX2Fzc2lnbih7fSwgd3JhcHBlckRpdlByb3BzKSwgX3RoaXMucHJvcHMub25SZW5kZXJPdmVyZmxvd0J1dHRvbihuZXdPdmVyZmxvd0l0ZW1zKSk7XG4gICAgICAgIH07XG4gICAgICAgIGluaXRpYWxpemVDb21wb25lbnRSZWYoX3RoaXMpO1xuICAgICAgICB3YXJuTXV0dWFsbHlFeGNsdXNpdmUoQ09NUE9ORU5UX05BTUUsIHByb3BzLCB7XG4gICAgICAgICAgICBkb05vdENvbnRhaW5XaXRoaW5Gb2N1c1pvbmU6ICdmb2N1c1pvbmVQcm9wcycsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE92ZXJmbG93U2V0QmFzZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBpdGVtcyA9IF9hLml0ZW1zLCBvdmVyZmxvd0l0ZW1zID0gX2Eub3ZlcmZsb3dJdGVtcywgY2xhc3NOYW1lID0gX2EuY2xhc3NOYW1lLCBcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIGZvY3VzWm9uZVByb3BzID0gX2EuZm9jdXNab25lUHJvcHMsIHN0eWxlcyA9IF9hLnN0eWxlcywgdmVydGljYWwgPSBfYS52ZXJ0aWNhbCwgXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICBkb05vdENvbnRhaW5XaXRoaW5Gb2N1c1pvbmUgPSBfYS5kb05vdENvbnRhaW5XaXRoaW5Gb2N1c1pvbmUsIHJvbGUgPSBfYS5yb2xlLCBfYiA9IF9hLm92ZXJmbG93U2lkZSwgb3ZlcmZsb3dTaWRlID0gX2IgPT09IHZvaWQgMCA/ICdlbmQnIDogX2I7XG4gICAgICAgIHRoaXMuX2NsYXNzTmFtZXMgPSBnZXRDbGFzc05hbWVzKHN0eWxlcywgeyBjbGFzc05hbWU6IGNsYXNzTmFtZSwgdmVydGljYWw6IHZlcnRpY2FsIH0pO1xuICAgICAgICB2YXIgVGFnO1xuICAgICAgICB2YXIgdW5pcXVlQ29tcG9uZW50UHJvcHM7XG4gICAgICAgIGlmIChkb05vdENvbnRhaW5XaXRoaW5Gb2N1c1pvbmUpIHtcbiAgICAgICAgICAgIFRhZyA9ICdkaXYnO1xuICAgICAgICAgICAgdW5pcXVlQ29tcG9uZW50UHJvcHMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZ2V0TmF0aXZlUHJvcHModGhpcy5wcm9wcywgZGl2UHJvcGVydGllcykpLCB7IHJlZjogdGhpcy5fZGl2Q29udGFpbmVyIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgVGFnID0gRm9jdXNab25lO1xuICAgICAgICAgICAgdW5pcXVlQ29tcG9uZW50UHJvcHMgPSBfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZ2V0TmF0aXZlUHJvcHModGhpcy5wcm9wcywgZGl2UHJvcGVydGllcykpLCBmb2N1c1pvbmVQcm9wcyksIHsgY29tcG9uZW50UmVmOiB0aGlzLl9mb2N1c1pvbmUsIGRpcmVjdGlvbjogdmVydGljYWwgPyBGb2N1c1pvbmVEaXJlY3Rpb24udmVydGljYWwgOiBGb2N1c1pvbmVEaXJlY3Rpb24uaG9yaXpvbnRhbCB9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2hvd092ZXJmbG93ID0gb3ZlcmZsb3dJdGVtcyAmJiBvdmVyZmxvd0l0ZW1zLmxlbmd0aCA+IDA7XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChUYWcsIF9fYXNzaWduKHsgcm9sZTogcm9sZSB8fCAnZ3JvdXAnLCBcImFyaWEtb3JpZW50YXRpb25cIjogcm9sZSA9PT0gJ21lbnViYXInID8gKHZlcnRpY2FsID09PSB0cnVlID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJykgOiB1bmRlZmluZWQgfSwgdW5pcXVlQ29tcG9uZW50UHJvcHMsIHsgY2xhc3NOYW1lOiB0aGlzLl9jbGFzc05hbWVzLnJvb3QgfSksXG4gICAgICAgICAgICBvdmVyZmxvd1NpZGUgPT09ICdzdGFydCcgJiYgc2hvd092ZXJmbG93ICYmIHRoaXMuX29uUmVuZGVyT3ZlcmZsb3dCdXR0b25XcmFwcGVyKG92ZXJmbG93SXRlbXMpLFxuICAgICAgICAgICAgaXRlbXMgJiYgdGhpcy5fb25SZW5kZXJJdGVtcyhpdGVtcyksXG4gICAgICAgICAgICBvdmVyZmxvd1NpZGUgPT09ICdlbmQnICYmIHNob3dPdmVyZmxvdyAmJiB0aGlzLl9vblJlbmRlck92ZXJmbG93QnV0dG9uV3JhcHBlcihvdmVyZmxvd0l0ZW1zKSkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0cyBmb2N1cyB0byB0aGUgZmlyc3QgdGFiYmFibGUgaXRlbSBpbiB0aGUgT3ZlcmZsb3dTZXQuXG4gICAgICogQHBhcmFtIGZvcmNlSW50b0ZpcnN0RWxlbWVudCAtIElmIHRydWUsIGZvY3VzIHdpbGwgYmUgZm9yY2VkIGludG8gdGhlIGZpcnN0IGVsZW1lbnQsXG4gICAgICogZXZlbiBpZiBmb2N1cyBpcyBhbHJlYWR5IGluIHRoZU92ZXJmbG93U2V0XG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiBmb2N1cyBjb3VsZCBiZSBzZXQgdG8gYW4gYWN0aXZlIGVsZW1lbnQsIGZhbHNlIGlmIG5vIG9wZXJhdGlvbiB3YXMgdGFrZW4uXG4gICAgICovXG4gICAgT3ZlcmZsb3dTZXRCYXNlLnByb3RvdHlwZS5mb2N1cyA9IGZ1bmN0aW9uIChmb3JjZUludG9GaXJzdEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGZvY3VzU3VjY2VlZGVkID0gZmFsc2U7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5kb05vdENvbnRhaW5XaXRoaW5Gb2N1c1pvbmUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9kaXZDb250YWluZXIuY3VycmVudCkge1xuICAgICAgICAgICAgICAgIGZvY3VzU3VjY2VlZGVkID0gZm9jdXNGaXJzdENoaWxkKHRoaXMuX2RpdkNvbnRhaW5lci5jdXJyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9mb2N1c1pvbmUuY3VycmVudCkge1xuICAgICAgICAgICAgZm9jdXNTdWNjZWVkZWQgPSB0aGlzLl9mb2N1c1pvbmUuY3VycmVudC5mb2N1cyhmb3JjZUludG9GaXJzdEVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb2N1c1N1Y2NlZWRlZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgZm9jdXMgdG8gYSBzcGVjaWZpYyBjaGlsZCBlbGVtZW50IHdpdGhpbiB0aGUgT3ZlcmZsb3dTZXQuXG4gICAgICogQHBhcmFtIGNoaWxkRWxlbWVudCAtIFRoZSBjaGlsZCBlbGVtZW50IHdpdGhpbiB0aGUgem9uZSB0byBmb2N1cy5cbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIGZvY3VzIGNvdWxkIGJlIHNldCB0byBhbiBhY3RpdmUgZWxlbWVudCwgZmFsc2UgaWYgbm8gb3BlcmF0aW9uIHdhcyB0YWtlbi5cbiAgICAgKi9cbiAgICBPdmVyZmxvd1NldEJhc2UucHJvdG90eXBlLmZvY3VzRWxlbWVudCA9IGZ1bmN0aW9uIChjaGlsZEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGZvY3VzU3VjY2VlZGVkID0gZmFsc2U7XG4gICAgICAgIGlmICghY2hpbGRFbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmRvTm90Q29udGFpbldpdGhpbkZvY3VzWm9uZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2RpdkNvbnRhaW5lci5jdXJyZW50ICYmIGVsZW1lbnRDb250YWlucyh0aGlzLl9kaXZDb250YWluZXIuY3VycmVudCwgY2hpbGRFbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIGNoaWxkRWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgICAgIGZvY3VzU3VjY2VlZGVkID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gY2hpbGRFbGVtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX2ZvY3VzWm9uZS5jdXJyZW50KSB7XG4gICAgICAgICAgICBmb2N1c1N1Y2NlZWRlZCA9IHRoaXMuX2ZvY3VzWm9uZS5jdXJyZW50LmZvY3VzRWxlbWVudChjaGlsZEVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb2N1c1N1Y2NlZWRlZDtcbiAgICB9O1xuICAgIC8vIEFkZCBrZXl0aXAgcmVnaXN0ZXIvdW5yZWdpc3RlciBoYW5kbGVycyB0byBsaWZlY3ljbGUgZnVuY3Rpb25zIHRvIGNvcnJlY3RseSBtYW5hZ2UgcGVyc2lzdGVkIGtleXRpcHNcbiAgICBPdmVyZmxvd1NldEJhc2UucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9yZWdpc3RlclBlcnNpc3RlZEtleXRpcHMoKTtcbiAgICB9O1xuICAgIE92ZXJmbG93U2V0QmFzZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3VucmVnaXN0ZXJQZXJzaXN0ZWRLZXl0aXBzKCk7XG4gICAgfTtcbiAgICBPdmVyZmxvd1NldEJhc2UucHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl91bnJlZ2lzdGVyUGVyc2lzdGVkS2V5dGlwcygpO1xuICAgIH07XG4gICAgT3ZlcmZsb3dTZXRCYXNlLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3JlZ2lzdGVyUGVyc2lzdGVkS2V5dGlwcygpO1xuICAgIH07XG4gICAgT3ZlcmZsb3dTZXRCYXNlLnByb3RvdHlwZS5fcmVnaXN0ZXJQZXJzaXN0ZWRLZXl0aXBzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLl9wZXJzaXN0ZWRLZXl0aXBzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHZhciBrZXl0aXAgPSBfdGhpcy5fcGVyc2lzdGVkS2V5dGlwc1trZXldO1xuICAgICAgICAgICAgdmFyIHVuaXF1ZUlEID0gX3RoaXMuX2tleXRpcE1hbmFnZXIucmVnaXN0ZXIoa2V5dGlwLCB0cnVlKTtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBtYXBcbiAgICAgICAgICAgIF90aGlzLl9wZXJzaXN0ZWRLZXl0aXBzW3VuaXF1ZUlEXSA9IGtleXRpcDtcbiAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5fcGVyc2lzdGVkS2V5dGlwc1trZXldO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE92ZXJmbG93U2V0QmFzZS5wcm90b3R5cGUuX3VucmVnaXN0ZXJQZXJzaXN0ZWRLZXl0aXBzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvLyBEZWxldGUgYWxsIHBlcnNpc3RlZCBrZXl0aXBzIHNhdmVkXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuX3BlcnNpc3RlZEtleXRpcHMpLmZvckVhY2goZnVuY3Rpb24gKHVuaXF1ZUlEKSB7XG4gICAgICAgICAgICBfdGhpcy5fa2V5dGlwTWFuYWdlci51bnJlZ2lzdGVyKF90aGlzLl9wZXJzaXN0ZWRLZXl0aXBzW3VuaXF1ZUlEXSwgdW5pcXVlSUQsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fcGVyc2lzdGVkS2V5dGlwcyA9IHt9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3ViTWVudSBmb3IgYW4gb3ZlcmZsb3cgaXRlbVxuICAgICAqIENoZWNrcyBpZiBpdGVtU3ViTWVudVByb3ZpZGVyIGhhcyBiZWVuIGRlZmluZWQsIGlmIG5vdCBkZWZhdWx0cyB0byBzdWJNZW51UHJvcHNcbiAgICAgKi9cbiAgICBPdmVyZmxvd1NldEJhc2UucHJvdG90eXBlLl9nZXRTdWJNZW51Rm9ySXRlbSA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLml0ZW1TdWJNZW51UHJvdmlkZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLml0ZW1TdWJNZW51UHJvdmlkZXIoaXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW0uc3ViTWVudVByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbS5zdWJNZW51UHJvcHMuaXRlbXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIHJldHVybiBPdmVyZmxvd1NldEJhc2U7XG59KFJlYWN0LkNvbXBvbmVudCkpO1xuZXhwb3J0IHsgT3ZlcmZsb3dTZXRCYXNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PdmVyZmxvd1NldC5iYXNlLmpzLm1hcCIsIi8qKlxuICoge0Bkb2NDYXRlZ29yeSBSZXNpemVHcm91cH1cbiAqL1xuZXhwb3J0IHZhciBSZXNpemVHcm91cERpcmVjdGlvbjtcbihmdW5jdGlvbiAoUmVzaXplR3JvdXBEaXJlY3Rpb24pIHtcbiAgICBSZXNpemVHcm91cERpcmVjdGlvbltSZXNpemVHcm91cERpcmVjdGlvbltcImhvcml6b250YWxcIl0gPSAwXSA9IFwiaG9yaXpvbnRhbFwiO1xuICAgIFJlc2l6ZUdyb3VwRGlyZWN0aW9uW1Jlc2l6ZUdyb3VwRGlyZWN0aW9uW1widmVydGljYWxcIl0gPSAxXSA9IFwidmVydGljYWxcIjtcbn0pKFJlc2l6ZUdyb3VwRGlyZWN0aW9uIHx8IChSZXNpemVHcm91cERpcmVjdGlvbiA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZXNpemVHcm91cC50eXBlcy5qcy5tYXAiLCJ2YXIgb3ZlcmZsb3dJdGVtU3R5bGUgPSB7XG4gICAgZmxleFNocmluazogMCxcbiAgICBkaXNwbGF5OiAnaW5oZXJpdCcsXG59O1xuZXhwb3J0IHZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLCB2ZXJ0aWNhbCA9IHByb3BzLnZlcnRpY2FsO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJvb3Q6IFtcbiAgICAgICAgICAgICdtcy1PdmVyZmxvd1NldCcsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgIGZsZXhXcmFwOiAnbm93cmFwJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJ0aWNhbCAmJiB7IGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nIH0sXG4gICAgICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIF0sXG4gICAgICAgIGl0ZW06IFsnbXMtT3ZlcmZsb3dTZXQtaXRlbScsIG92ZXJmbG93SXRlbVN0eWxlXSxcbiAgICAgICAgb3ZlcmZsb3dCdXR0b246IFsnbXMtT3ZlcmZsb3dTZXQtb3ZlcmZsb3dCdXR0b24nLCBvdmVyZmxvd0l0ZW1TdHlsZV0sXG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PdmVyZmxvd1NldC5zdHlsZXMuanMubWFwIiwiaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IE92ZXJmbG93U2V0QmFzZSB9IGZyb20gJy4vT3ZlcmZsb3dTZXQuYmFzZSc7XG5pbXBvcnQgeyBnZXRTdHlsZXMgfSBmcm9tICcuL092ZXJmbG93U2V0LnN0eWxlcyc7XG5leHBvcnQgdmFyIE92ZXJmbG93U2V0ID0gc3R5bGVkKE92ZXJmbG93U2V0QmFzZSwgZ2V0U3R5bGVzLCB1bmRlZmluZWQsIHtcbiAgICBzY29wZTogJ092ZXJmbG93U2V0Jyxcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T3ZlcmZsb3dTZXQuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQXN5bmMsIEV2ZW50R3JvdXAsIGRpdlByb3BlcnRpZXMsIGdldE5hdGl2ZVByb3BzLCB3YXJuRGVwcmVjYXRpb25zIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IFJlc2l6ZUdyb3VwRGlyZWN0aW9uIH0gZnJvbSAnLi9SZXNpemVHcm91cC50eXBlcyc7XG5pbXBvcnQgeyBpbml0aWFsaXplQ29tcG9uZW50UmVmIH0gZnJvbSAnQHVpZmFicmljL3V0aWxpdGllcyc7XG52YXIgUkVTSVpFX0RFTEFZID0gMTY7XG4vKipcbiAqIFJldHVybnMgYSBzaW1wbGUgb2JqZWN0IGlzIGFibGUgdG8gc3RvcmUgbWVhc3VyZW1lbnRzIHdpdGggYSBnaXZlbiBrZXkuXG4gKi9cbmV4cG9ydCB2YXIgZ2V0TWVhc3VyZW1lbnRDYWNoZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbWVhc3VyZW1lbnRzQ2FjaGUgPSB7fTtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2tzIGlmIHRoZSBwcm92aWRlZCBkYXRhIGhhcyBhIGNhY2hlS2V5LiBJZiBpdCBoYXMgYSBjYWNoZUtleSBhbmQgdGhlcmUgaXMgYVxuICAgICAgICAgKiBjb3JyZXNwb25kaW5nIGVudHJ5IGluIHRoZSBtZWFzdXJlbWVudHNDYWNoZSwgdGhlbiBpdCB3aWxsIHJldHVybiB0aGF0IHZhbHVlLlxuICAgICAgICAgKiBSZXR1cm5zIHVuZGVmaW5lZCBvdGhlcndpc2UuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRDYWNoZWRNZWFzdXJlbWVudDogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhICYmIGRhdGEuY2FjaGVLZXkgJiYgbWVhc3VyZW1lbnRzQ2FjaGUuaGFzT3duUHJvcGVydHkoZGF0YS5jYWNoZUtleSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWVhc3VyZW1lbnRzQ2FjaGVbZGF0YS5jYWNoZUtleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogU2hvdWxkIGJlIGNhbGxlZCB3aGVuZXZlciB0aGVyZSBpcyBhIG5ldyBtZWFzdXJlbWVudCBhc3NvY2lhdGVkIHdpdGggYSBnaXZlbiBkYXRhIG9iamVjdC5cbiAgICAgICAgICogSWYgdGhlIGRhdGEgaGFzIGEgY2FjaGVLZXksIHN0b3JlIHRoYXQgbWVhc3VyZW1lbnQgaW4gdGhlIG1lYXN1cmVtZW50c0NhY2hlLlxuICAgICAgICAgKi9cbiAgICAgICAgYWRkTWVhc3VyZW1lbnRUb0NhY2hlOiBmdW5jdGlvbiAoZGF0YSwgbWVhc3VyZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLmNhY2hlS2V5KSB7XG4gICAgICAgICAgICAgICAgbWVhc3VyZW1lbnRzQ2FjaGVbZGF0YS5jYWNoZUtleV0gPSBtZWFzdXJlbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9O1xufTtcbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgaXMgYWJsZSB0byBjb21wdXRlIHRoZSBuZXh0IHN0YXRlIGZvciB0aGUgUmVzaXplR3JvdXAgZ2l2ZW4gdGhlIGN1cnJlbnRcbiAqIHN0YXRlIGFuZCBhbnkgbWVhc3VyZW1lbnQgdXBkYXRlcy5cbiAqL1xuZXhwb3J0IHZhciBnZXROZXh0UmVzaXplR3JvdXBTdGF0ZVByb3ZpZGVyID0gZnVuY3Rpb24gKG1lYXN1cmVtZW50Q2FjaGUpIHtcbiAgICBpZiAobWVhc3VyZW1lbnRDYWNoZSA9PT0gdm9pZCAwKSB7IG1lYXN1cmVtZW50Q2FjaGUgPSBnZXRNZWFzdXJlbWVudENhY2hlKCk7IH1cbiAgICB2YXIgX21lYXN1cmVtZW50Q2FjaGUgPSBtZWFzdXJlbWVudENhY2hlO1xuICAgIHZhciBfY29udGFpbmVyRGltZW5zaW9uO1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHdpZHRoL2hlaWdodCBvZiB0aGUgZGF0YSByZW5kZXJlZCBpbiBhIGhpZGRlbiBkaXYuXG4gICAgICogQHBhcmFtIG1lYXN1cmVkRGF0YSAtIFRoZSBkYXRhIGNvcnJlc3BvbmRpbmcgdG8gdGhlIG1lYXN1cmVtZW50IHdlIHdpc2ggdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0gZ2V0RWxlbWVudFRvTWVhc3VyZURpbWVuc2lvbiAtIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBtZWFzdXJlbWVudCBvZiB0aGUgcmVuZGVyZWQgZGF0YS5cbiAgICAgKiBPbmx5IGNhbGxlZCB3aGVuIHRoZSBtZWFzdXJlbWVudCBpcyBub3QgaW4gdGhlIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIF9nZXRNZWFzdXJlZERpbWVuc2lvbihtZWFzdXJlZERhdGEsIGdldEVsZW1lbnRUb01lYXN1cmVEaW1lbnNpb24pIHtcbiAgICAgICAgdmFyIGNhY2hlZERpbWVuc2lvbiA9IF9tZWFzdXJlbWVudENhY2hlLmdldENhY2hlZE1lYXN1cmVtZW50KG1lYXN1cmVkRGF0YSk7XG4gICAgICAgIGlmIChjYWNoZWREaW1lbnNpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZERpbWVuc2lvbjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWVhc3VyZWREaW1lbnNpb24gPSBnZXRFbGVtZW50VG9NZWFzdXJlRGltZW5zaW9uKCk7XG4gICAgICAgIF9tZWFzdXJlbWVudENhY2hlLmFkZE1lYXN1cmVtZW50VG9DYWNoZShtZWFzdXJlZERhdGEsIG1lYXN1cmVkRGltZW5zaW9uKTtcbiAgICAgICAgcmV0dXJuIG1lYXN1cmVkRGltZW5zaW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaWxsIGdldCB0aGUgbmV4dCBJUmVzaXplR3JvdXBTdGF0ZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkYXRhIHdoaWxlIHRyeWluZyB0byBzaHJpbmsgY29udGVudHNcbiAgICAgKiB0byBmaXQgaW4gdGhlIGNvbnRhaW5lci5cbiAgICAgKiBAcGFyYW0gZGF0YSAtIFRoZSBpbml0aWFsIGRhdGEgcG9pbnQgdG8gc3RhcnQgbWVhc3VyaW5nLlxuICAgICAqIEBwYXJhbSBvblJlZHVjZURhdGEgLSBGdW5jdGlvbiB0aGF0IHRyYW5zZm9ybXMgdGhlIGRhdGEgaW50byBzb21ldGhpbmcgdGhhdCBzaG91bGQgcmVuZGVyIHdpdGggbGVzcyB3aWR0aC9oZWlnaHQuXG4gICAgICogQHBhcmFtIGdldEVsZW1lbnRUb01lYXN1cmVEaW1lbnNpb24gLSBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbWVhc3VyZW1lbnQgb2YgdGhlIHJlbmRlcmVkIGRhdGEuXG4gICAgICogT25seSBjYWxsZWQgd2hlbiB0aGUgbWVhc3VyZW1lbnQgaXMgbm90IGluIHRoZSBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBfc2hyaW5rQ29udGVudHNVbnRpbFRoZXlGaXQoZGF0YSwgb25SZWR1Y2VEYXRhLCBnZXRFbGVtZW50VG9NZWFzdXJlRGltZW5zaW9uKSB7XG4gICAgICAgIHZhciBkYXRhVG9NZWFzdXJlID0gZGF0YTtcbiAgICAgICAgdmFyIG1lYXN1cmVkRGltZW5zaW9uID0gX2dldE1lYXN1cmVkRGltZW5zaW9uKGRhdGEsIGdldEVsZW1lbnRUb01lYXN1cmVEaW1lbnNpb24pO1xuICAgICAgICB3aGlsZSAobWVhc3VyZWREaW1lbnNpb24gPiBfY29udGFpbmVyRGltZW5zaW9uKSB7XG4gICAgICAgICAgICB2YXIgbmV4dE1lYXN1cmVkRGF0YSA9IG9uUmVkdWNlRGF0YShkYXRhVG9NZWFzdXJlKTtcbiAgICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gZ2V0IHN0dWNrIGluIGFuIGluZmluaXRlIHJlbmRlciBsb29wIHdoZW4gdGhlcmUgYXJlIG5vIG1vcmVcbiAgICAgICAgICAgIC8vIHNjYWxpbmcgc3RlcHMsIHNvIGltcGxlbWVudGF0aW9ucyBvZiBvblJlZHVjZURhdGEgc2hvdWxkIHJldHVybiB1bmRlZmluZWQgd2hlblxuICAgICAgICAgICAgLy8gdGhlcmUgYXJlIG5vIG1vcmUgc2NhbGluZyBzdGF0ZXMgdG8gYXBwbHkuXG4gICAgICAgICAgICBpZiAobmV4dE1lYXN1cmVkRGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZWREYXRhOiBkYXRhVG9NZWFzdXJlLFxuICAgICAgICAgICAgICAgICAgICByZXNpemVEaXJlY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVRvTWVhc3VyZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZWFzdXJlZERpbWVuc2lvbiA9IF9tZWFzdXJlbWVudENhY2hlLmdldENhY2hlZE1lYXN1cmVtZW50KG5leHRNZWFzdXJlZERhdGEpO1xuICAgICAgICAgICAgLy8gSWYgdGhlIG1lYXN1cmVtZW50IGlzbid0IGluIHRoZSBjYWNoZSwgd2UgbmVlZCB0byByZXJlbmRlciB3aXRoIHNvbWUgZGF0YSBpbiBhIGhpZGRlbiBkaXZcbiAgICAgICAgICAgIGlmIChtZWFzdXJlZERpbWVuc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVRvTWVhc3VyZTogbmV4dE1lYXN1cmVkRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplRGlyZWN0aW9uOiAnc2hyaW5rJyxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YVRvTWVhc3VyZSA9IG5leHRNZWFzdXJlZERhdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlbmRlcmVkRGF0YTogZGF0YVRvTWVhc3VyZSxcbiAgICAgICAgICAgIHJlc2l6ZURpcmVjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZGF0YVRvTWVhc3VyZTogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHNob3VsZCBiZSBjYWxsZWQgd2hlbiB0aGUgc3RhdGUgY2hhbmdlcyBpbiBhIG1hbm5lciB0aGF0IG1pZ2h0IGFsbG93IGZvciBtb3JlIGNvbnRlbnQgdG8gZml0XG4gICAgICogb24gdGhlIHNjcmVlbiwgc3VjaCBhcyB0aGUgd2luZG93IHdpZHRoL2hlaWdodCBncm93aW5nLlxuICAgICAqIEBwYXJhbSBkYXRhIC0gVGhlIGluaXRpYWwgZGF0YSBwb2ludCB0byBzdGFydCBtZWFzdXJpbmcuXG4gICAgICogQHBhcmFtIG9uR3Jvd0RhdGEgLSBGdW5jdGlvbiB0aGF0IHRyYW5zZm9ybXMgdGhlIGRhdGEgaW50byBzb21ldGhpbmcgdGhhdCBtYXkgdGFrZSB1cCBtb3JlIHNwYWNlIHdoZW4gcmVuZGVyaW5nLlxuICAgICAqIEBwYXJhbSBnZXRFbGVtZW50VG9NZWFzdXJlRGltZW5zaW9uIC0gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG1lYXN1cmVtZW50IG9mIHRoZSByZW5kZXJlZCBkYXRhLlxuICAgICAqIE9ubHkgY2FsbGVkIHdoZW4gdGhlIG1lYXN1cmVtZW50IGlzIG5vdCBpbiB0aGUgY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gX2dyb3dEYXRhVW50aWxJdERvZXNOb3RGaXQoZGF0YSwgb25Hcm93RGF0YSwgZ2V0RWxlbWVudFRvTWVhc3VyZURpbWVuc2lvbiwgb25SZWR1Y2VEYXRhKSB7XG4gICAgICAgIHZhciBkYXRhVG9NZWFzdXJlID0gZGF0YTtcbiAgICAgICAgdmFyIG1lYXN1cmVkRGltZW5zaW9uID0gX2dldE1lYXN1cmVkRGltZW5zaW9uKGRhdGEsIGdldEVsZW1lbnRUb01lYXN1cmVEaW1lbnNpb24pO1xuICAgICAgICB3aGlsZSAobWVhc3VyZWREaW1lbnNpb24gPCBfY29udGFpbmVyRGltZW5zaW9uKSB7XG4gICAgICAgICAgICB2YXIgbmV4dE1lYXN1cmVkRGF0YSA9IG9uR3Jvd0RhdGEoZGF0YVRvTWVhc3VyZSk7XG4gICAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRvIGdldCBzdHVjayBpbiBhbiBpbmZpbml0ZSByZW5kZXIgbG9vcCB3aGVuIHRoZXJlIGFyZSBubyBtb3JlXG4gICAgICAgICAgICAvLyBzY2FsaW5nIHN0ZXBzLCBzbyBpbXBsZW1lbnRhdGlvbnMgb2Ygb25Hcm93RGF0YSBzaG91bGQgcmV0dXJuIHVuZGVmaW5lZCB3aGVuXG4gICAgICAgICAgICAvLyB0aGVyZSBhcmUgbm8gbW9yZSBzY2FsaW5nIHN0YXRlcyB0byBhcHBseS5cbiAgICAgICAgICAgIGlmIChuZXh0TWVhc3VyZWREYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICByZW5kZXJlZERhdGE6IGRhdGFUb01lYXN1cmUsXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZURpcmVjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVG9NZWFzdXJlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1lYXN1cmVkRGltZW5zaW9uID0gX21lYXN1cmVtZW50Q2FjaGUuZ2V0Q2FjaGVkTWVhc3VyZW1lbnQobmV4dE1lYXN1cmVkRGF0YSk7XG4gICAgICAgICAgICAvLyBJZiB0aGUgbWVhc3VyZW1lbnQgaXNuJ3QgaW4gdGhlIGNhY2hlLCB3ZSBuZWVkIHRvIHJlcmVuZGVyIHdpdGggc29tZSBkYXRhIGluIGEgaGlkZGVuIGRpdlxuICAgICAgICAgICAgaWYgKG1lYXN1cmVkRGltZW5zaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkYXRhVG9NZWFzdXJlOiBuZXh0TWVhc3VyZWREYXRhLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkYXRhVG9NZWFzdXJlID0gbmV4dE1lYXN1cmVkRGF0YTtcbiAgICAgICAgfVxuICAgICAgICAvLyBPbmNlIHRoZSBsb29wIGlzIGRvbmUsIHdlIHNob3VsZCBub3cgc2hyaW5rIHVudGlsIHRoZSBjb250ZW50cyBmaXQuXG4gICAgICAgIHJldHVybiBfX2Fzc2lnbih7IHJlc2l6ZURpcmVjdGlvbjogJ3NocmluaycgfSwgX3Nocmlua0NvbnRlbnRzVW50aWxUaGV5Rml0KGRhdGFUb01lYXN1cmUsIG9uUmVkdWNlRGF0YSwgZ2V0RWxlbWVudFRvTWVhc3VyZURpbWVuc2lvbikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIGFuIHVwZGF0ZSB0byB0aGUgY29udGFpbmVyIHdpZHRoL2hlaWdodC5cbiAgICAgKiBTaG91bGQgb25seSBiZSBjYWxsZWQgd2hlbiB3ZSBrbmV3IHRoZSBwcmV2aW91cyBjb250YWluZXIgd2lkdGgvaGVpZ2h0LlxuICAgICAqIEBwYXJhbSBuZXdEaW1lbnNpb24gLSBUaGUgbmV3IHdpZHRoL2hlaWdodCBvZiB0aGUgY29udGFpbmVyLlxuICAgICAqIEBwYXJhbSBmdWxsRGltZW5zaW9uRGF0YSAtIFRoZSBpbml0aWFsIGRhdGEgcGFzc2VkIGluIGFzIGEgcHJvcCB0byByZXNpemVHcm91cC5cbiAgICAgKiBAcGFyYW0gcmVuZGVyZWREYXRhIC0gVGhlIGRhdGEgdGhhdCB3YXMgcmVuZGVyZWQgcHJpb3IgdG8gdGhlIGNvbnRhaW5lciBzaXplIGNoYW5naW5nLlxuICAgICAqIEBwYXJhbSBvbkdyb3dEYXRhIC0gU2V0IHRvIHRydWUgaWYgdGhlIFJlc2l6ZSBncm91cCBoYXMgYW4gb25Hcm93RGF0YSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBfdXBkYXRlQ29udGFpbmVyRGltZW5zaW9uKG5ld0RpbWVuc2lvbiwgZnVsbERpbWVuc2lvbkRhdGEsIHJlbmRlcmVkRGF0YSwgb25Hcm93RGF0YSkge1xuICAgICAgICB2YXIgbmV4dFN0YXRlO1xuICAgICAgICBpZiAobmV3RGltZW5zaW9uID4gX2NvbnRhaW5lckRpbWVuc2lvbikge1xuICAgICAgICAgICAgaWYgKG9uR3Jvd0RhdGEpIHtcbiAgICAgICAgICAgICAgICBuZXh0U3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZURpcmVjdGlvbjogJ2dyb3cnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVG9NZWFzdXJlOiBvbkdyb3dEYXRhKHJlbmRlcmVkRGF0YSksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5leHRTdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplRGlyZWN0aW9uOiAnc2hyaW5rJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVRvTWVhc3VyZTogZnVsbERpbWVuc2lvbkRhdGEsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5leHRTdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICByZXNpemVEaXJlY3Rpb246ICdzaHJpbmsnLFxuICAgICAgICAgICAgICAgIGRhdGFUb01lYXN1cmU6IHJlbmRlcmVkRGF0YSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgX2NvbnRhaW5lckRpbWVuc2lvbiA9IG5ld0RpbWVuc2lvbjtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBuZXh0U3RhdGUpLCB7IG1lYXN1cmVDb250YWluZXI6IGZhbHNlIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXROZXh0U3RhdGUocHJvcHMsIGN1cnJlbnRTdGF0ZSwgZ2V0RWxlbWVudFRvTWVhc3VyZURpbWVuc2lvbiwgbmV3Q29udGFpbmVyRGltZW5zaW9uKSB7XG4gICAgICAgIC8vIElmIHRoZXJlIGlzIG5vIG5ldyBjb250YWluZXIgd2lkdGgvaGVpZ2h0IG9yIGRhdGEgdG8gbWVhc3VyZSwgdGhlcmUgaXMgbm8gbmVlZCBmb3IgYSBuZXcgc3RhdGUgdXBkYXRlXG4gICAgICAgIGlmIChuZXdDb250YWluZXJEaW1lbnNpb24gPT09IHVuZGVmaW5lZCAmJiBjdXJyZW50U3RhdGUuZGF0YVRvTWVhc3VyZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXdDb250YWluZXJEaW1lbnNpb24pIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGtub3cgdGhlIGxhc3QgY29udGFpbmVyIHNpemUgYW5kIHdlIHJlbmRlcmVkIGRhdGEgYXQgdGhhdCB3aWR0aC9oZWlnaHQsIHdlIGNhbiBkbyBhbiBvcHRpbWl6ZWQgcmVuZGVyXG4gICAgICAgICAgICBpZiAoX2NvbnRhaW5lckRpbWVuc2lvbiAmJiBjdXJyZW50U3RhdGUucmVuZGVyZWREYXRhICYmICFjdXJyZW50U3RhdGUuZGF0YVRvTWVhc3VyZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY3VycmVudFN0YXRlKSwgX3VwZGF0ZUNvbnRhaW5lckRpbWVuc2lvbihuZXdDb250YWluZXJEaW1lbnNpb24sIHByb3BzLmRhdGEsIGN1cnJlbnRTdGF0ZS5yZW5kZXJlZERhdGEsIHByb3BzLm9uR3Jvd0RhdGEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIHdlIGFyZSBqdXN0IHNldHRpbmcgdGhlIGNvbnRhaW5lciB3aWR0aC9oZWlnaHQgZm9yIHRoZSBmaXJzdCB0aW1lLCB3ZSBjYW4ndCBkbyBhbnkgb3B0aW1pemF0aW9uc1xuICAgICAgICAgICAgX2NvbnRhaW5lckRpbWVuc2lvbiA9IG5ld0NvbnRhaW5lckRpbWVuc2lvbjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmV4dFN0YXRlID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGN1cnJlbnRTdGF0ZSksIHsgbWVhc3VyZUNvbnRhaW5lcjogZmFsc2UgfSk7XG4gICAgICAgIGlmIChjdXJyZW50U3RhdGUuZGF0YVRvTWVhc3VyZSkge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRTdGF0ZS5yZXNpemVEaXJlY3Rpb24gPT09ICdncm93JyAmJiBwcm9wcy5vbkdyb3dEYXRhKSB7XG4gICAgICAgICAgICAgICAgbmV4dFN0YXRlID0gX19hc3NpZ24oX19hc3NpZ24oe30sIG5leHRTdGF0ZSksIF9ncm93RGF0YVVudGlsSXREb2VzTm90Rml0KGN1cnJlbnRTdGF0ZS5kYXRhVG9NZWFzdXJlLCBwcm9wcy5vbkdyb3dEYXRhLCBnZXRFbGVtZW50VG9NZWFzdXJlRGltZW5zaW9uLCBwcm9wcy5vblJlZHVjZURhdGEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5leHRTdGF0ZSA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBuZXh0U3RhdGUpLCBfc2hyaW5rQ29udGVudHNVbnRpbFRoZXlGaXQoY3VycmVudFN0YXRlLmRhdGFUb01lYXN1cmUsIHByb3BzLm9uUmVkdWNlRGF0YSwgZ2V0RWxlbWVudFRvTWVhc3VyZURpbWVuc2lvbikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXh0U3RhdGU7XG4gICAgfVxuICAgIC8qKiBGdW5jdGlvbiB0aGF0IGRldGVybWluZXMgaWYgd2UgbmVlZCB0byByZW5kZXIgY29udGVudCBmb3IgbWVhc3VyZW1lbnQgYmFzZWQgb24gdGhlIG1lYXN1cmVtZW50IGNhY2hlIGNvbnRlbnRzLiAqL1xuICAgIGZ1bmN0aW9uIHNob3VsZFJlbmRlckRhdGFGb3JNZWFzdXJlbWVudChkYXRhVG9NZWFzdXJlKSB7XG4gICAgICAgIGlmICghZGF0YVRvTWVhc3VyZSB8fCBfbWVhc3VyZW1lbnRDYWNoZS5nZXRDYWNoZWRNZWFzdXJlbWVudChkYXRhVG9NZWFzdXJlKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEluaXRpYWxSZXNpemVHcm91cFN0YXRlKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGFUb01lYXN1cmU6IF9fYXNzaWduKHt9LCBkYXRhKSxcbiAgICAgICAgICAgIHJlc2l6ZURpcmVjdGlvbjogJ2dyb3cnLFxuICAgICAgICAgICAgbWVhc3VyZUNvbnRhaW5lcjogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0TmV4dFN0YXRlOiBnZXROZXh0U3RhdGUsXG4gICAgICAgIHNob3VsZFJlbmRlckRhdGFGb3JNZWFzdXJlbWVudDogc2hvdWxkUmVuZGVyRGF0YUZvck1lYXN1cmVtZW50LFxuICAgICAgICBnZXRJbml0aWFsUmVzaXplR3JvdXBTdGF0ZTogZ2V0SW5pdGlhbFJlc2l6ZUdyb3VwU3RhdGUsXG4gICAgfTtcbn07XG4vLyBQcm92aWRlcyBhIGNvbnRleHQgcHJvcGVydHkgdGhhdCAoaWYgdHJ1ZSkgdGVsbHMgYW55IGNoaWxkIGNvbXBvbmVudHMgdGhhdFxuLy8gdGhleSBhcmUgb25seSBiZWluZyB1c2VkIGZvciBtZWFzdXJlbWVudCBwdXJwb3NlcyBhbmQgd2lsbCBub3QgYmUgdmlzaWJsZS5cbmV4cG9ydCB2YXIgTWVhc3VyZWRDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7IGlzTWVhc3VyZWQ6IGZhbHNlIH0pO1xuLy8gU3R5bGVzIGZvciB0aGUgaGlkZGVuIGRpdiB1c2VkIGZvciBtZWFzdXJlbWVudFxudmFyIGhpZGRlbkRpdlN0eWxlcyA9IHsgcG9zaXRpb246ICdmaXhlZCcsIHZpc2liaWxpdHk6ICdoaWRkZW4nIH07XG52YXIgaGlkZGVuUGFyZW50U3R5bGVzID0geyBwb3NpdGlvbjogJ3JlbGF0aXZlJyB9O1xudmFyIENPTVBPTkVOVF9OQU1FID0gJ1Jlc2l6ZUdyb3VwJztcbnZhciBSZXNpemVHcm91cEJhc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFJlc2l6ZUdyb3VwQmFzZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZXNpemVHcm91cEJhc2UocHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9uZXh0UmVzaXplR3JvdXBTdGF0ZVByb3ZpZGVyID0gZ2V0TmV4dFJlc2l6ZUdyb3VwU3RhdGVQcm92aWRlcigpO1xuICAgICAgICAvLyBUaGUgcm9vdCBkaXYgd2hpY2ggaXMgdGhlIGNvbnRhaW5lciBpbnNpZGUgb2Ygd2hpY2ggd2UgYXJlIHRyeWluZyB0byBmaXQgY29udGVudC5cbiAgICAgICAgX3RoaXMuX3Jvb3QgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICAgICAgLy8gQSBkaXYgdGhhdCBjYW4gYmUgdXNlZCBmb3IgdGhlIGluaXRpYWwgbWVhc3VyZW1lbnQgc28gdGhhdCB3ZSBjYW4gYXZvaWQgbW91bnRpbmcgYSBzZWNvbmQgaW5zdGFuY2VcbiAgICAgICAgLy8gb2YgdGhlIGNvbXBvbmVudCBiZWluZyBtZWFzdXJlZCBmb3IgdGhlIGluaXRpYWwgcmVuZGVyLlxuICAgICAgICBfdGhpcy5faW5pdGlhbEhpZGRlbkRpdiA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgICAgICAvLyBBIGhpZGRlbiBkaXYgdGhhdCBpcyB1c2VkIGZvciBtb3VudGluZyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgY29tcG9uZW50IGZvciBtZWFzdXJlbWVudCBpbiBhIGhpZGRlblxuICAgICAgICAvLyBkaXYgd2l0aG91dCB1bm1vdW50aW5nIHRoZSBjdXJyZW50bHkgdmlzaWJsZSBjb250ZW50LlxuICAgICAgICBfdGhpcy5fdXBkYXRlSGlkZGVuRGl2ID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgICAgIC8vIFRyYWNrcyBpZiBhbnkgY29udGVudCBoYXMgYmVlbiByZW5kZXJlZCB0byB0aGUgdXNlci4gVGhpcyBlbmFibGVzIHVzIHRvIGRvIHNvbWUgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uc1xuICAgICAgICAvLyBmb3IgdGhlIGluaXRpYWwgcmVuZGVyLlxuICAgICAgICBfdGhpcy5faGFzUmVuZGVyZWRDb250ZW50ID0gZmFsc2U7XG4gICAgICAgIF90aGlzLnN0YXRlID0gX3RoaXMuX25leHRSZXNpemVHcm91cFN0YXRlUHJvdmlkZXIuZ2V0SW5pdGlhbFJlc2l6ZUdyb3VwU3RhdGUoX3RoaXMucHJvcHMuZGF0YSk7XG4gICAgICAgIGluaXRpYWxpemVDb21wb25lbnRSZWYoX3RoaXMpO1xuICAgICAgICBfdGhpcy5fYXN5bmMgPSBuZXcgQXN5bmMoX3RoaXMpO1xuICAgICAgICBfdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50R3JvdXAoX3RoaXMpO1xuICAgICAgICB3YXJuRGVwcmVjYXRpb25zKENPTVBPTkVOVF9OQU1FLCBwcm9wcywge1xuICAgICAgICAgICAgc3R5bGVzOiAnY2xhc3NOYW1lJyxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUmVzaXplR3JvdXBCYXNlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSwgb25SZW5kZXJEYXRhID0gX2Eub25SZW5kZXJEYXRhO1xuICAgICAgICB2YXIgX2IgPSB0aGlzLnN0YXRlLCBkYXRhVG9NZWFzdXJlID0gX2IuZGF0YVRvTWVhc3VyZSwgcmVuZGVyZWREYXRhID0gX2IucmVuZGVyZWREYXRhO1xuICAgICAgICB2YXIgZGl2UHJvcHMgPSBnZXROYXRpdmVQcm9wcyh0aGlzLnByb3BzLCBkaXZQcm9wZXJ0aWVzLCBbJ2RhdGEnXSk7XG4gICAgICAgIHZhciBkYXRhTmVlZHNNZWFzdXJpbmcgPSB0aGlzLl9uZXh0UmVzaXplR3JvdXBTdGF0ZVByb3ZpZGVyLnNob3VsZFJlbmRlckRhdGFGb3JNZWFzdXJlbWVudChkYXRhVG9NZWFzdXJlKTtcbiAgICAgICAgdmFyIGlzSW5pdGlhbE1lYXN1cmUgPSAhdGhpcy5faGFzUmVuZGVyZWRDb250ZW50ICYmIGRhdGFOZWVkc01lYXN1cmluZztcbiAgICAgICAgLy8gV2Ugb25seSBldmVyIHJlbmRlciB0aGUgZmluYWwgY29udGVudCB0byB0aGUgdXNlci4gQWxsIG1lYXN1cmVtZW50cyBhcmUgZG9uZSBpbiBhIGhpZGRlbiBkaXYuXG4gICAgICAgIC8vIEZvciB0aGUgaW5pdGlhbCByZW5kZXIsIHdlIHdhbnQgdGhpcyB0byBiZSBhcyBmYXN0IGFzIHBvc3NpYmxlLCBzbyB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IHdlIG9ubHkgbW91bnQgb25lXG4gICAgICAgIC8vIHZlcnNpb24gb2YgdGhlIGNvbXBvbmVudCBmb3IgbWVhc3VyZW1lbnQgYW5kIHRoZSBmaW5hbCByZW5kZXIuIEZvciByZW5kZXJzIHRoYXQgdXBkYXRlIHdoYXQgaXMgb24gc2NyZWVuLCB3ZVxuICAgICAgICAvLyB3YW50IHRvIG1ha2Ugc3VyZSB0aGF0IHRoZXJlIGFyZSBubyBqYXJyaW5nIGVmZmVjdHMgc3VjaCBhcyB0aGUgc2NyZWVuIGZsYXNoaW5nIGFzIHdlIGFwcGx5IHNjYWxpbmcgc3RlcHMgZm9yXG4gICAgICAgIC8vIG1lYXN1cmVtZW50LiBJbiB0aGUgdXBkYXRlIGNhc2UsIHdlIG1vdW50IGEgc2Vjb25kIHZlcnNpb24gb2YgdGhlIGNvbXBvbmVudCBqdXN0IGZvciBtZWFzdXJlbWVudCBwdXJwb3NlcyBhbmRcbiAgICAgICAgLy8gbGVhdmUgdGhlIHJlbmRlcmVkIGNvbnRlbnQgdW50b3VjaGVkIHVudGlsIHdlIGtub3cgdGhlIG5leHQgc3RhdGUgdG8gc2hvdyB0byB0aGUgdXNlci5cbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9fYXNzaWduKHt9LCBkaXZQcm9wcywgeyBjbGFzc05hbWU6IGNsYXNzTmFtZSwgcmVmOiB0aGlzLl9yb290IH0pLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHN0eWxlOiBoaWRkZW5QYXJlbnRTdHlsZXMgfSxcbiAgICAgICAgICAgICAgICBkYXRhTmVlZHNNZWFzdXJpbmcgJiYgIWlzSW5pdGlhbE1lYXN1cmUgJiYgKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZTogaGlkZGVuRGl2U3R5bGVzLCByZWY6IHRoaXMuX3VwZGF0ZUhpZGRlbkRpdiB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KE1lYXN1cmVkQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogeyBpc01lYXN1cmVkOiB0cnVlIH0gfSwgb25SZW5kZXJEYXRhKGRhdGFUb01lYXN1cmUpKSkpLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyByZWY6IHRoaXMuX2luaXRpYWxIaWRkZW5EaXYsIHN0eWxlOiBpc0luaXRpYWxNZWFzdXJlID8gaGlkZGVuRGl2U3R5bGVzIDogdW5kZWZpbmVkLCBcImRhdGEtYXV0b21hdGlvbi1pZFwiOiBcInZpc2libGVDb250ZW50XCIgfSwgaXNJbml0aWFsTWVhc3VyZSA/IG9uUmVuZGVyRGF0YShkYXRhVG9NZWFzdXJlKSA6IHJlbmRlcmVkRGF0YSAmJiBvblJlbmRlckRhdGEocmVuZGVyZWREYXRhKSkpKSk7XG4gICAgfTtcbiAgICBSZXNpemVHcm91cEJhc2UucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9hZnRlckNvbXBvbmVudFJlbmRlcmVkKHRoaXMucHJvcHMuZGlyZWN0aW9uKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzLm9uKHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuX2FzeW5jLmRlYm91bmNlKHRoaXMuX29uUmVzaXplLCBSRVNJWkVfREVMQVksIHsgbGVhZGluZzogdHJ1ZSB9KSk7XG4gICAgfTtcbiAgICBSZXNpemVHcm91cEJhc2UucHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gKG5leHRQcm9wcykge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGRhdGFUb01lYXN1cmU6IF9fYXNzaWduKHt9LCBuZXh0UHJvcHMuZGF0YSksXG4gICAgICAgICAgICByZXNpemVEaXJlY3Rpb246ICdncm93JyxcbiAgICAgICAgICAgIC8vIFJlY2VpdmluZyBuZXcgcHJvcHMgbWVhbnMgdGhlIHBhcmVudCBtaWdodCByZXJlbmRlciBhbmQgdGhlIHJvb3Qgd2lkdGgvaGVpZ2h0IG1pZ2h0IGNoYW5nZVxuICAgICAgICAgICAgbWVhc3VyZUNvbnRhaW5lcjogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBSZXNpemVHcm91cEJhc2UucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUucmVuZGVyZWREYXRhKSB7XG4gICAgICAgICAgICB0aGlzLl9oYXNSZW5kZXJlZENvbnRlbnQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuZGF0YURpZFJlbmRlcikge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuZGF0YURpZFJlbmRlcih0aGlzLnN0YXRlLnJlbmRlcmVkRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYWZ0ZXJDb21wb25lbnRSZW5kZXJlZCh0aGlzLnByb3BzLmRpcmVjdGlvbik7XG4gICAgfTtcbiAgICBSZXNpemVHcm91cEJhc2UucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9hc3luYy5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuX2V2ZW50cy5kaXNwb3NlKCk7XG4gICAgfTtcbiAgICBSZXNpemVHcm91cEJhc2UucHJvdG90eXBlLnJlbWVhc3VyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Jvb3QuY3VycmVudCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG1lYXN1cmVDb250YWluZXI6IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlc2l6ZUdyb3VwQmFzZS5wcm90b3R5cGUuX2FmdGVyQ29tcG9uZW50UmVuZGVyZWQgPSBmdW5jdGlvbiAoZGlyZWN0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX2FzeW5jLnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyRGltZW5zaW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKF90aGlzLnN0YXRlLm1lYXN1cmVDb250YWluZXIgJiYgX3RoaXMuX3Jvb3QuY3VycmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBib3VuZGluZ1JlY3QgPSBfdGhpcy5fcm9vdC5jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lckRpbWVuc2lvbiA9XG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbiAmJiBkaXJlY3Rpb24gPT09IFJlc2l6ZUdyb3VwRGlyZWN0aW9uLnZlcnRpY2FsID8gYm91bmRpbmdSZWN0LmhlaWdodCA6IGJvdW5kaW5nUmVjdC53aWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBuZXh0U3RhdGUgPSBfdGhpcy5fbmV4dFJlc2l6ZUdyb3VwU3RhdGVQcm92aWRlci5nZXROZXh0U3RhdGUoX3RoaXMucHJvcHMsIF90aGlzLnN0YXRlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlZlRvTWVhc3VyZSA9ICFfdGhpcy5faGFzUmVuZGVyZWRDb250ZW50ID8gX3RoaXMuX2luaXRpYWxIaWRkZW5EaXYgOiBfdGhpcy5fdXBkYXRlSGlkZGVuRGl2O1xuICAgICAgICAgICAgICAgIGlmICghcmVmVG9NZWFzdXJlLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBkaXJlY3Rpb24gJiYgZGlyZWN0aW9uID09PSBSZXNpemVHcm91cERpcmVjdGlvbi52ZXJ0aWNhbFxuICAgICAgICAgICAgICAgICAgICA/IHJlZlRvTWVhc3VyZS5jdXJyZW50LnNjcm9sbEhlaWdodFxuICAgICAgICAgICAgICAgICAgICA6IHJlZlRvTWVhc3VyZS5jdXJyZW50LnNjcm9sbFdpZHRoO1xuICAgICAgICAgICAgfSwgY29udGFpbmVyRGltZW5zaW9uKTtcbiAgICAgICAgICAgIGlmIChuZXh0U3RhdGUpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZShuZXh0U3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0aGlzLl9yb290LmN1cnJlbnQpO1xuICAgIH07XG4gICAgUmVzaXplR3JvdXBCYXNlLnByb3RvdHlwZS5fb25SZXNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9yb290LmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBtZWFzdXJlQ29udGFpbmVyOiB0cnVlIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gUmVzaXplR3JvdXBCYXNlO1xufShSZWFjdC5Db21wb25lbnQpKTtcbmV4cG9ydCB7IFJlc2l6ZUdyb3VwQmFzZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVzaXplR3JvdXAuYmFzZS5qcy5tYXAiLCIvKipcbiAqIHtAZG9jQ2F0ZWdvcnkgVG9vbHRpcH1cbiAqL1xuZXhwb3J0IHZhciBUb29sdGlwT3ZlcmZsb3dNb2RlO1xuKGZ1bmN0aW9uIChUb29sdGlwT3ZlcmZsb3dNb2RlKSB7XG4gICAgLyoqIE9ubHkgc2hvdyB0b29sdGlwIGlmIHBhcmVudCBET00gZWxlbWVudCBpcyBvdmVyZmxvd2luZyAqL1xuICAgIFRvb2x0aXBPdmVyZmxvd01vZGVbVG9vbHRpcE92ZXJmbG93TW9kZVtcIlBhcmVudFwiXSA9IDBdID0gXCJQYXJlbnRcIjtcbiAgICAvKipcbiAgICAgKiBPbmx5IHNob3cgdG9vbHRpcCBpZiB0b29sdGlwIGhvc3QncyBjb250ZW50IGlzIG92ZXJmbG93aW5nLlxuICAgICAqIE5vdGUgdGhhdCB0aGlzIGRvZXMgbm90IGNoZWNrIHRoZSBjaGlsZHJlbiBmb3Igb3ZlcmZsb3csIG9ubHkgdGhlIFRvb2x0aXBIb3N0IHJvb3QuXG4gICAgICovXG4gICAgVG9vbHRpcE92ZXJmbG93TW9kZVtUb29sdGlwT3ZlcmZsb3dNb2RlW1wiU2VsZlwiXSA9IDFdID0gXCJTZWxmXCI7XG59KShUb29sdGlwT3ZlcmZsb3dNb2RlIHx8IChUb29sdGlwT3ZlcmZsb3dNb2RlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRvb2x0aXBIb3N0LnR5cGVzLmpzLm1hcCIsImltcG9ydCB7IFJlc2l6ZUdyb3VwQmFzZSB9IGZyb20gJy4vUmVzaXplR3JvdXAuYmFzZSc7XG5leHBvcnQgdmFyIFJlc2l6ZUdyb3VwID0gUmVzaXplR3JvdXBCYXNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVzaXplR3JvdXAuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGNvbmNhdFN0eWxlU2V0cywgZ2V0Rm9jdXNTdHlsZSwgSGlnaENvbnRyYXN0U2VsZWN0b3IsIGdldEVkZ2VDaHJvbWl1bU5vSGlnaENvbnRyYXN0QWRqdXN0U2VsZWN0b3IsIH0gZnJvbSAnLi4vLi4vLi4vU3R5bGluZyc7XG5pbXBvcnQgeyBtZW1vaXplRnVuY3Rpb24gfSBmcm9tICcuLi8uLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgZ2V0U3R5bGVzIGFzIGdldEJhc2VCdXR0b25TdHlsZXMgfSBmcm9tICcuLi9CYXNlQnV0dG9uLnN0eWxlcyc7XG5pbXBvcnQgeyBnZXRTdHlsZXMgYXMgZ2V0U3BsaXRCdXR0b25TdHlsZXMgfSBmcm9tICcuLi9TcGxpdEJ1dHRvbi9TcGxpdEJ1dHRvbi5zdHlsZXMnO1xuaW1wb3J0IHsgQnV0dG9uR2xvYmFsQ2xhc3NOYW1lcyB9IGZyb20gJy4uL0Jhc2VCdXR0b24uY2xhc3NOYW1lcyc7XG5leHBvcnQgdmFyIGdldFN0eWxlcyA9IG1lbW9pemVGdW5jdGlvbihmdW5jdGlvbiAodGhlbWUsIGN1c3RvbVN0eWxlcywgZm9jdXNJbnNldCwgZm9jdXNDb2xvcikge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9qLCBfaywgX2wsIF9tLCBfbywgX3A7XG4gICAgdmFyIGJhc2VCdXR0b25TdHlsZXMgPSBnZXRCYXNlQnV0dG9uU3R5bGVzKHRoZW1lKTtcbiAgICB2YXIgYmFzZVNwbGl0QnV0dG9uU3R5bGVzID0gZ2V0U3BsaXRCdXR0b25TdHlsZXModGhlbWUpO1xuICAgIHZhciBwID0gdGhlbWUucGFsZXR0ZSwgc2VtYW50aWNDb2xvcnMgPSB0aGVtZS5zZW1hbnRpY0NvbG9ycztcbiAgICB2YXIgY29tbWFuZEJ1dHRvbkhpZ2hDb250cmFzdEZvY3VzID0ge1xuICAgICAgICBsZWZ0OiA0LFxuICAgICAgICB0b3A6IDQsXG4gICAgICAgIGJvdHRvbTogNCxcbiAgICAgICAgcmlnaHQ6IDQsXG4gICAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgIH07XG4gICAgdmFyIGNvbW1hbmRCdXR0b25TdHlsZXMgPSB7XG4gICAgICAgIHJvb3Q6IFtcbiAgICAgICAgICAgIGdldEZvY3VzU3R5bGUodGhlbWUsIHtcbiAgICAgICAgICAgICAgICBpbnNldDogMixcbiAgICAgICAgICAgICAgICBoaWdoQ29udHJhc3RTdHlsZTogY29tbWFuZEJ1dHRvbkhpZ2hDb250cmFzdEZvY3VzLFxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0aGVtZS5mb250cy5tZWRpdW0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbWluV2lkdGg6ICc0MHB4JyxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHAud2hpdGUsXG4gICAgICAgICAgICAgICAgY29sb3I6IHAubmV1dHJhbFByaW1hcnksXG4gICAgICAgICAgICAgICAgcGFkZGluZzogJzAgNHB4JyxcbiAgICAgICAgICAgICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2EgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgX2FbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF9hKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHJvb3RIb3ZlcmVkOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHAubmV1dHJhbExpZ2h0ZXIsXG4gICAgICAgICAgICBjb2xvcjogcC5uZXV0cmFsRGFyayxcbiAgICAgICAgICAgIHNlbGVjdG9yczogKF9iID0ge30sXG4gICAgICAgICAgICAgICAgX2JbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ0hpZ2hsaWdodCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfYltcIi5cIiArIEJ1dHRvbkdsb2JhbENsYXNzTmFtZXMubXNCdXR0b25JY29uXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IHAudGhlbWVEYXJrQWx0LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2JbXCIuXCIgKyBCdXR0b25HbG9iYWxDbGFzc05hbWVzLm1zQnV0dG9uTWVudUljb25dID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogcC5uZXV0cmFsUHJpbWFyeSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9iKSxcbiAgICAgICAgfSxcbiAgICAgICAgcm9vdFByZXNzZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcC5uZXV0cmFsTGlnaHQsXG4gICAgICAgICAgICBjb2xvcjogcC5uZXV0cmFsRGFyayxcbiAgICAgICAgICAgIHNlbGVjdG9yczogKF9jID0ge30sXG4gICAgICAgICAgICAgICAgX2NbXCIuXCIgKyBCdXR0b25HbG9iYWxDbGFzc05hbWVzLm1zQnV0dG9uSWNvbl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBwLnRoZW1lRGFyayxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9jW1wiLlwiICsgQnV0dG9uR2xvYmFsQ2xhc3NOYW1lcy5tc0J1dHRvbk1lbnVJY29uXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IHAubmV1dHJhbFByaW1hcnksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfYyksXG4gICAgICAgIH0sXG4gICAgICAgIHJvb3RDaGVja2VkOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHAubmV1dHJhbExpZ2h0LFxuICAgICAgICAgICAgY29sb3I6IHAubmV1dHJhbERhcmssXG4gICAgICAgICAgICBzZWxlY3RvcnM6IChfZCA9IHt9LFxuICAgICAgICAgICAgICAgIF9kW1wiLlwiICsgQnV0dG9uR2xvYmFsQ2xhc3NOYW1lcy5tc0J1dHRvbkljb25dID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogcC50aGVtZURhcmssXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfZFtcIi5cIiArIEJ1dHRvbkdsb2JhbENsYXNzTmFtZXMubXNCdXR0b25NZW51SWNvbl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBwLm5ldXRyYWxQcmltYXJ5LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2QpLFxuICAgICAgICB9LFxuICAgICAgICByb290Q2hlY2tlZEhvdmVyZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcC5uZXV0cmFsUXVhdGVybmFyeUFsdCxcbiAgICAgICAgICAgIHNlbGVjdG9yczogKF9lID0ge30sXG4gICAgICAgICAgICAgICAgX2VbXCIuXCIgKyBCdXR0b25HbG9iYWxDbGFzc05hbWVzLm1zQnV0dG9uSWNvbl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBwLnRoZW1lRGFyayxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9lW1wiLlwiICsgQnV0dG9uR2xvYmFsQ2xhc3NOYW1lcy5tc0J1dHRvbk1lbnVJY29uXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IHAubmV1dHJhbFByaW1hcnksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfZSksXG4gICAgICAgIH0sXG4gICAgICAgIHJvb3RFeHBhbmRlZDoge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBwLm5ldXRyYWxMaWdodCxcbiAgICAgICAgICAgIGNvbG9yOiBwLm5ldXRyYWxEYXJrLFxuICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2YgPSB7fSxcbiAgICAgICAgICAgICAgICBfZltcIi5cIiArIEJ1dHRvbkdsb2JhbENsYXNzTmFtZXMubXNCdXR0b25JY29uXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IHAudGhlbWVEYXJrLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2ZbXCIuXCIgKyBCdXR0b25HbG9iYWxDbGFzc05hbWVzLm1zQnV0dG9uTWVudUljb25dID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogcC5uZXV0cmFsUHJpbWFyeSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9mKSxcbiAgICAgICAgfSxcbiAgICAgICAgcm9vdEV4cGFuZGVkSG92ZXJlZDoge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBwLm5ldXRyYWxRdWF0ZXJuYXJ5QWx0LFxuICAgICAgICB9LFxuICAgICAgICByb290RGlzYWJsZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcC53aGl0ZSxcbiAgICAgICAgICAgIHNlbGVjdG9yczogX19hc3NpZ24oKF9nID0ge30sIF9nW1wiLlwiICsgQnV0dG9uR2xvYmFsQ2xhc3NOYW1lcy5tc0J1dHRvbkljb25dID0ge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBzZW1hbnRpY0NvbG9ycy5kaXNhYmxlZEJvZHlTdWJ0ZXh0LFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9oID0ge30sXG4gICAgICAgICAgICAgICAgICAgIF9oW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnR3JheVRleHQnLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBfaCksXG4gICAgICAgICAgICB9LCBfZ1tIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgY29sb3I6ICdHcmF5VGV4dCcsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnV2luZG93JyxcbiAgICAgICAgICAgIH0sIF9nKSwgZ2V0RWRnZUNocm9taXVtTm9IaWdoQ29udHJhc3RBZGp1c3RTZWxlY3RvcigpKSxcbiAgICAgICAgfSxcbiAgICAgICAgLy8gU3BsaXQgYnV0dG9uIHN0eWxlc1xuICAgICAgICBzcGxpdEJ1dHRvbkNvbnRhaW5lcjoge1xuICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICBzZWxlY3RvcnM6IChfaiA9IHt9LFxuICAgICAgICAgICAgICAgIF9qW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfaiksXG4gICAgICAgIH0sXG4gICAgICAgIHNwbGl0QnV0dG9uRGl2aWRlckRpc2FibGVkOiB7XG4gICAgICAgICAgICBzZWxlY3RvcnM6IChfayA9IHt9LFxuICAgICAgICAgICAgICAgIF9rW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnV2luZG93JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9rKSxcbiAgICAgICAgfSxcbiAgICAgICAgc3BsaXRCdXR0b25EaXZpZGVyOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHAubmV1dHJhbFRlcnRpYXJ5QWx0LFxuICAgICAgICB9LFxuICAgICAgICBzcGxpdEJ1dHRvbk1lbnVCdXR0b246IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcC53aGl0ZSxcbiAgICAgICAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgICAgICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6ICcwJyxcbiAgICAgICAgICAgIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiAnMCcsXG4gICAgICAgICAgICBjb2xvcjogcC5uZXV0cmFsU2Vjb25kYXJ5LFxuICAgICAgICAgICAgc2VsZWN0b3JzOiB7XG4gICAgICAgICAgICAgICAgJzpob3Zlcic6IHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBwLm5ldXRyYWxMaWdodGVyLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogcC5uZXV0cmFsRGFyayxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2wgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9sW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ0hpZ2hsaWdodCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX2xbXCIuXCIgKyBCdXR0b25HbG9iYWxDbGFzc05hbWVzLm1zQnV0dG9uSWNvbl0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHAubmV1dHJhbFByaW1hcnksXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX2wpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJzphY3RpdmUnOiB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcC5uZXV0cmFsTGlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9tID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBfbVtcIi5cIiArIEJ1dHRvbkdsb2JhbENsYXNzTmFtZXMubXNCdXR0b25JY29uXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogcC5uZXV0cmFsUHJpbWFyeSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBfbSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHNwbGl0QnV0dG9uTWVudUJ1dHRvbkRpc2FibGVkOiBfX2Fzc2lnbih7IGJhY2tncm91bmRDb2xvcjogcC53aGl0ZSwgc2VsZWN0b3JzOiAoX28gPSB7fSxcbiAgICAgICAgICAgICAgICBfb1tIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnR3JheVRleHQnLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnV2luZG93JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9vKSB9LCBnZXRFZGdlQ2hyb21pdW1Ob0hpZ2hDb250cmFzdEFkanVzdFNlbGVjdG9yKCkpLFxuICAgICAgICBzcGxpdEJ1dHRvbk1lbnVCdXR0b25DaGVja2VkOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHAubmV1dHJhbExpZ2h0LFxuICAgICAgICAgICAgY29sb3I6IHAubmV1dHJhbERhcmssXG4gICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAnOmhvdmVyJzoge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHAubmV1dHJhbFF1YXRlcm5hcnlBbHQsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHNwbGl0QnV0dG9uTWVudUJ1dHRvbkV4cGFuZGVkOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHAubmV1dHJhbExpZ2h0LFxuICAgICAgICAgICAgY29sb3I6IHAuYmxhY2ssXG4gICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAnOmhvdmVyJzoge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHAubmV1dHJhbFF1YXRlcm5hcnlBbHQsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHNwbGl0QnV0dG9uTWVudUljb246IHtcbiAgICAgICAgICAgIGNvbG9yOiBwLm5ldXRyYWxQcmltYXJ5LFxuICAgICAgICB9LFxuICAgICAgICBzcGxpdEJ1dHRvbk1lbnVJY29uRGlzYWJsZWQ6IHtcbiAgICAgICAgICAgIGNvbG9yOiBwLm5ldXRyYWxUZXJ0aWFyeSxcbiAgICAgICAgfSxcbiAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgICB9LFxuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgICBjb2xvcjogcC50aGVtZVByaW1hcnksXG4gICAgICAgIH0sXG4gICAgICAgIG1lbnVJY29uOiAoX3AgPSB7XG4gICAgICAgICAgICAgICAgY29sb3I6IHAubmV1dHJhbFNlY29uZGFyeVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9wW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogJ0dyYXlUZXh0JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfcCksXG4gICAgfTtcbiAgICByZXR1cm4gY29uY2F0U3R5bGVTZXRzKGJhc2VCdXR0b25TdHlsZXMsIGJhc2VTcGxpdEJ1dHRvblN0eWxlcywgY29tbWFuZEJ1dHRvblN0eWxlcywgY3VzdG9tU3R5bGVzKTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29tbWFuZEJhckJ1dHRvbi5zdHlsZXMuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fZGVjb3JhdGUsIF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQmFzZUJ1dHRvbiB9IGZyb20gJy4uL0Jhc2VCdXR0b24nO1xuaW1wb3J0IHsgY3VzdG9taXphYmxlLCBudWxsUmVuZGVyIH0gZnJvbSAnLi4vLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IGdldFN0eWxlcyB9IGZyb20gJy4vQ29tbWFuZEJhckJ1dHRvbi5zdHlsZXMnO1xuLyoqXG4gKiB7QGRvY0NhdGVnb3J5IEJ1dHRvbn1cbiAqL1xudmFyIENvbW1hbmRCYXJCdXR0b24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvbW1hbmRCYXJCdXR0b24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29tbWFuZEJhckJ1dHRvbigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBDb21tYW5kQmFyQnV0dG9uLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIHN0eWxlcyA9IF9hLnN0eWxlcywgdGhlbWUgPSBfYS50aGVtZTtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KEJhc2VCdXR0b24sIF9fYXNzaWduKHt9LCB0aGlzLnByb3BzLCB7IHZhcmlhbnRDbGFzc05hbWU6IFwibXMtQnV0dG9uLS1jb21tYW5kQmFyXCIsIHN0eWxlczogZ2V0U3R5bGVzKHRoZW1lLCBzdHlsZXMpLCBvblJlbmRlckRlc2NyaXB0aW9uOiBudWxsUmVuZGVyIH0pKSk7XG4gICAgfTtcbiAgICBDb21tYW5kQmFyQnV0dG9uID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGN1c3RvbWl6YWJsZSgnQ29tbWFuZEJhckJ1dHRvbicsIFsndGhlbWUnLCAnc3R5bGVzJ10sIHRydWUpXG4gICAgXSwgQ29tbWFuZEJhckJ1dHRvbik7XG4gICAgcmV0dXJuIENvbW1hbmRCYXJCdXR0b247XG59KFJlYWN0LkNvbXBvbmVudCkpO1xuZXhwb3J0IHsgQ29tbWFuZEJhckJ1dHRvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29tbWFuZEJhckJ1dHRvbi5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjbGFzc05hbWVzRnVuY3Rpb24sIGRpdlByb3BlcnRpZXMsIGdldE5hdGl2ZVByb3BzIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IENhbGxvdXQgfSBmcm9tICcuLi8uLi9DYWxsb3V0JztcbmltcG9ydCB7IERpcmVjdGlvbmFsSGludCB9IGZyb20gJy4uLy4uL2NvbW1vbi9EaXJlY3Rpb25hbEhpbnQnO1xudmFyIGdldENsYXNzTmFtZXMgPSBjbGFzc05hbWVzRnVuY3Rpb24oKTtcbnZhciBUb29sdGlwQmFzZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVG9vbHRpcEJhc2UsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVG9vbHRpcEJhc2UoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fb25SZW5kZXJDb250ZW50ID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInBcIiwgeyBjbGFzc05hbWU6IF90aGlzLl9jbGFzc05hbWVzLnN1YlRleHQgfSwgcHJvcHMuY29udGVudCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVG9vbHRpcEJhc2UucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgY2xhc3NOYW1lID0gX2EuY2xhc3NOYW1lLCBjYWxsb3V0UHJvcHMgPSBfYS5jYWxsb3V0UHJvcHMsIGRpcmVjdGlvbmFsSGludCA9IF9hLmRpcmVjdGlvbmFsSGludCwgZGlyZWN0aW9uYWxIaW50Rm9yUlRMID0gX2EuZGlyZWN0aW9uYWxIaW50Rm9yUlRMLCBzdHlsZXMgPSBfYS5zdHlsZXMsIGlkID0gX2EuaWQsIG1heFdpZHRoID0gX2EubWF4V2lkdGgsIF9iID0gX2Eub25SZW5kZXJDb250ZW50LCBvblJlbmRlckNvbnRlbnQgPSBfYiA9PT0gdm9pZCAwID8gdGhpcy5fb25SZW5kZXJDb250ZW50IDogX2IsIHRhcmdldEVsZW1lbnQgPSBfYS50YXJnZXRFbGVtZW50LCB0aGVtZSA9IF9hLnRoZW1lO1xuICAgICAgICB0aGlzLl9jbGFzc05hbWVzID0gZ2V0Q2xhc3NOYW1lcyhzdHlsZXMsIHtcbiAgICAgICAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lIHx8IChjYWxsb3V0UHJvcHMgJiYgY2FsbG91dFByb3BzLmNsYXNzTmFtZSksXG4gICAgICAgICAgICBiZWFrV2lkdGg6IGNhbGxvdXRQcm9wcyAmJiBjYWxsb3V0UHJvcHMuYmVha1dpZHRoLFxuICAgICAgICAgICAgZ2FwU3BhY2U6IGNhbGxvdXRQcm9wcyAmJiBjYWxsb3V0UHJvcHMuZ2FwU3BhY2UsXG4gICAgICAgICAgICBtYXhXaWR0aDogbWF4V2lkdGgsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2FsbG91dCwgX19hc3NpZ24oeyB0YXJnZXQ6IHRhcmdldEVsZW1lbnQsIGRpcmVjdGlvbmFsSGludDogZGlyZWN0aW9uYWxIaW50LCBkaXJlY3Rpb25hbEhpbnRGb3JSVEw6IGRpcmVjdGlvbmFsSGludEZvclJUTCB9LCBjYWxsb3V0UHJvcHMsIGdldE5hdGl2ZVByb3BzKHRoaXMucHJvcHMsIGRpdlByb3BlcnRpZXMsIFsnaWQnXSksIHsgY2xhc3NOYW1lOiB0aGlzLl9jbGFzc05hbWVzLnJvb3QgfSksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiB0aGlzLl9jbGFzc05hbWVzLmNvbnRlbnQsIGlkOiBpZCwgcm9sZTogXCJ0b29sdGlwXCIsIG9uTW91c2VFbnRlcjogdGhpcy5wcm9wcy5vbk1vdXNlRW50ZXIsIG9uTW91c2VMZWF2ZTogdGhpcy5wcm9wcy5vbk1vdXNlTGVhdmUgfSwgb25SZW5kZXJDb250ZW50KHRoaXMucHJvcHMsIHRoaXMuX29uUmVuZGVyQ29udGVudCkpKSk7XG4gICAgfTtcbiAgICAvLyBTcGVjaWZ5IGRlZmF1bHQgcHJvcHMgdmFsdWVzXG4gICAgVG9vbHRpcEJhc2UuZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBkaXJlY3Rpb25hbEhpbnQ6IERpcmVjdGlvbmFsSGludC50b3BDZW50ZXIsXG4gICAgICAgIG1heFdpZHRoOiAnMzY0cHgnLFxuICAgICAgICBjYWxsb3V0UHJvcHM6IHtcbiAgICAgICAgICAgIGlzQmVha1Zpc2libGU6IHRydWUsXG4gICAgICAgICAgICBiZWFrV2lkdGg6IDE2LFxuICAgICAgICAgICAgZ2FwU3BhY2U6IDAsXG4gICAgICAgICAgICBzZXRJbml0aWFsRm9jdXM6IHRydWUsXG4gICAgICAgICAgICBkb05vdExheWVyOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiBUb29sdGlwQmFzZTtcbn0oUmVhY3QuQ29tcG9uZW50KSk7XG5leHBvcnQgeyBUb29sdGlwQmFzZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VG9vbHRpcC5iYXNlLmpzLm1hcCIsIi8qKlxuICoge0Bkb2NDYXRlZ29yeSBUb29sdGlwfVxuICovXG5leHBvcnQgdmFyIFRvb2x0aXBEZWxheTtcbihmdW5jdGlvbiAoVG9vbHRpcERlbGF5KSB7XG4gICAgVG9vbHRpcERlbGF5W1Rvb2x0aXBEZWxheVtcInplcm9cIl0gPSAwXSA9IFwiemVyb1wiO1xuICAgIC8qKiAzMDAgbXMgZGVsYXkgYmVmb3JlIHNob3duZyB0aGUgdG9vbHRpcCAqL1xuICAgIFRvb2x0aXBEZWxheVtUb29sdGlwRGVsYXlbXCJtZWRpdW1cIl0gPSAxXSA9IFwibWVkaXVtXCI7XG4gICAgLyoqIDUwMCBtcyBkZWxheSBiZWZvcmUgc2hvd2luZyB0aGUgdG9vbHRpcCAqL1xuICAgIFRvb2x0aXBEZWxheVtUb29sdGlwRGVsYXlbXCJsb25nXCJdID0gMl0gPSBcImxvbmdcIjtcbn0pKFRvb2x0aXBEZWxheSB8fCAoVG9vbHRpcERlbGF5ID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRvb2x0aXAudHlwZXMuanMubWFwIiwiaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IFRvb2x0aXBCYXNlIH0gZnJvbSAnLi9Ub29sdGlwLmJhc2UnO1xuaW1wb3J0IHsgZ2V0U3R5bGVzIH0gZnJvbSAnLi9Ub29sdGlwLnN0eWxlcyc7XG5leHBvcnQgdmFyIFRvb2x0aXAgPSBzdHlsZWQoVG9vbHRpcEJhc2UsIGdldFN0eWxlcywgdW5kZWZpbmVkLCB7XG4gICAgc2NvcGU6ICdUb29sdGlwJyxcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VG9vbHRpcC5qcy5tYXAiLCJpbXBvcnQgeyBBbmltYXRpb25DbGFzc05hbWVzIH0gZnJvbSAnLi4vLi4vU3R5bGluZyc7XG5leHBvcnQgdmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsIF9hID0gcHJvcHMuYmVha1dpZHRoLCBiZWFrV2lkdGggPSBfYSA9PT0gdm9pZCAwID8gMTYgOiBfYSwgX2IgPSBwcm9wcy5nYXBTcGFjZSwgZ2FwU3BhY2UgPSBfYiA9PT0gdm9pZCAwID8gMCA6IF9iLCBtYXhXaWR0aCA9IHByb3BzLm1heFdpZHRoLCB0aGVtZSA9IHByb3BzLnRoZW1lO1xuICAgIHZhciBzZW1hbnRpY0NvbG9ycyA9IHRoZW1lLnNlbWFudGljQ29sb3JzLCBmb250cyA9IHRoZW1lLmZvbnRzLCBlZmZlY3RzID0gdGhlbWUuZWZmZWN0cztcbiAgICAvLyBUaGUgbWF0aCBoZXJlIGlzIGRvbmUgdG8gYWNjb3VudCBmb3IgdGhlIDQ1IGRlZ3JlZSByb3RhdGlvbiBvZiB0aGUgYmVha1xuICAgIHZhciB0b29sdGlwR2FwU3BhY2UgPSAtKE1hdGguc3FydCgoYmVha1dpZHRoICogYmVha1dpZHRoKSAvIDIpICsgZ2FwU3BhY2UpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJvb3Q6IFtcbiAgICAgICAgICAgICdtcy1Ub29sdGlwJyxcbiAgICAgICAgICAgIHRoZW1lLmZvbnRzLm1lZGl1bSxcbiAgICAgICAgICAgIEFuaW1hdGlvbkNsYXNzTmFtZXMuZmFkZUluMjAwLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHNlbWFudGljQ29sb3JzLm1lbnVCYWNrZ3JvdW5kLFxuICAgICAgICAgICAgICAgIGJveFNoYWRvdzogZWZmZWN0cy5lbGV2YXRpb244LFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6ICc4cHgnLFxuICAgICAgICAgICAgICAgIG1heFdpZHRoOiBtYXhXaWR0aCxcbiAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgJzphZnRlcic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiJydcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tOiB0b29sdGlwR2FwU3BhY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0b29sdGlwR2FwU3BhY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodDogdG9vbHRpcEdhcFNwYWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiB0b29sdGlwR2FwU3BhY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IDAsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIF0sXG4gICAgICAgIGNvbnRlbnQ6IFtcbiAgICAgICAgICAgICdtcy1Ub29sdGlwLWNvbnRlbnQnLFxuICAgICAgICAgICAgZm9udHMuc21hbGwsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICAgICAgekluZGV4OiAxLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBzZW1hbnRpY0NvbG9ycy5tZW51SXRlbVRleHQsXG4gICAgICAgICAgICAgICAgd29yZFdyYXA6ICdicmVhay13b3JkJyxcbiAgICAgICAgICAgICAgICBvdmVyZmxvd1dyYXA6ICdicmVhay13b3JkJyxcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBzdWJUZXh0OiBbXG4gICAgICAgICAgICAnbXMtVG9vbHRpcC1zdWJ0ZXh0JyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAvLyBVc2luZyBpbmhlcml0IGhlcmUgdG8gYXZvaWQgdW5pbnRlbnRpb25hbCBnbG9iYWwgb3ZlcnJpZGVzIG9mIHRoZSA8cD4gdGFnLlxuICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnaW5oZXJpdCcsXG4gICAgICAgICAgICAgICAgZm9udFdlaWdodDogJ2luaGVyaXQnLFxuICAgICAgICAgICAgICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRvb2x0aXAuc3R5bGVzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGhpZGRlbkNvbnRlbnRTdHlsZSB9IGZyb20gJy4uLy4uL1N0eWxpbmcnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUNvbXBvbmVudFJlZiwgQXN5bmMsIGRpdlByb3BlcnRpZXMsIGdldE5hdGl2ZVByb3BzLCBnZXRJZCwgYXNzaWduLCBoYXNPdmVyZmxvdywgcG9ydGFsQ29udGFpbnNFbGVtZW50LCBjbGFzc05hbWVzRnVuY3Rpb24sIEtleUNvZGVzLCB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBUb29sdGlwT3ZlcmZsb3dNb2RlLCB9IGZyb20gJy4vVG9vbHRpcEhvc3QudHlwZXMnO1xuaW1wb3J0IHsgVG9vbHRpcCB9IGZyb20gJy4vVG9vbHRpcCc7XG5pbXBvcnQgeyBUb29sdGlwRGVsYXkgfSBmcm9tICcuL1Rvb2x0aXAudHlwZXMnO1xudmFyIGdldENsYXNzTmFtZXMgPSBjbGFzc05hbWVzRnVuY3Rpb24oKTtcbnZhciBUb29sdGlwSG9zdEJhc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRvb2x0aXBIb3N0QmFzZSwgX3N1cGVyKTtcbiAgICAvLyBDb25zdHJ1Y3RvclxuICAgIGZ1bmN0aW9uIFRvb2x0aXBIb3N0QmFzZShwcm9wcykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICAgICAgLy8gVGhlIHdyYXBwaW5nIGRpdiB0aGF0IGdldHMgdGhlIGhvdmVyIGV2ZW50c1xuICAgICAgICBfdGhpcy5fdG9vbHRpcEhvc3QgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICAgICAgX3RoaXMuX2RlZmF1bHRUb29sdGlwSWQgPSBnZXRJZCgndG9vbHRpcCcpO1xuICAgICAgICBfdGhpcy5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX3RvZ2dsZVRvb2x0aXAodHJ1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmRpc21pc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5faGlkZVRvb2x0aXAoKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX2dldFRhcmdldEVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzLl90b29sdGlwSG9zdC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBvdmVyZmxvd01vZGUgPSBfdGhpcy5wcm9wcy5vdmVyZmxvd01vZGU7XG4gICAgICAgICAgICAvLyBTZWxlY3QgdGFyZ2V0IGVsZW1lbnQgYmFzZWQgb24gb3ZlcmZsb3cgbW9kZS4gRm9yIHBhcmVudCBtb2RlLCB5b3Ugd2FudCB0byBwb3NpdGlvbiB0aGUgdG9vbHRpcCByZWxhdGl2ZVxuICAgICAgICAgICAgLy8gdG8gdGhlIHBhcmVudCBlbGVtZW50LCBvdGhlcndpc2UgaXQgbWlnaHQgbG9vayBvZmYuXG4gICAgICAgICAgICBpZiAob3ZlcmZsb3dNb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG92ZXJmbG93TW9kZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFRvb2x0aXBPdmVyZmxvd01vZGUuUGFyZW50OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLl90b29sdGlwSG9zdC5jdXJyZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgVG9vbHRpcE92ZXJmbG93TW9kZS5TZWxmOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLl90b29sdGlwSG9zdC5jdXJyZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5fdG9vbHRpcEhvc3QuY3VycmVudDtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gU2hvdyBUb29sdGlwXG4gICAgICAgIF90aGlzLl9vblRvb2x0aXBNb3VzZUVudGVyID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgb3ZlcmZsb3dNb2RlID0gX2Eub3ZlcmZsb3dNb2RlLCBkZWxheSA9IF9hLmRlbGF5O1xuICAgICAgICAgICAgaWYgKFRvb2x0aXBIb3N0QmFzZS5fY3VycmVudFZpc2libGVUb29sdGlwICYmIFRvb2x0aXBIb3N0QmFzZS5fY3VycmVudFZpc2libGVUb29sdGlwICE9PSBfdGhpcykge1xuICAgICAgICAgICAgICAgIFRvb2x0aXBIb3N0QmFzZS5fY3VycmVudFZpc2libGVUb29sdGlwLmRpc21pc3MoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFRvb2x0aXBIb3N0QmFzZS5fY3VycmVudFZpc2libGVUb29sdGlwID0gX3RoaXM7XG4gICAgICAgICAgICBpZiAob3ZlcmZsb3dNb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgb3ZlcmZsb3dFbGVtZW50ID0gX3RoaXMuX2dldFRhcmdldEVsZW1lbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAob3ZlcmZsb3dFbGVtZW50ICYmICFoYXNPdmVyZmxvdyhvdmVyZmxvd0VsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXYudGFyZ2V0ICYmIHBvcnRhbENvbnRhaW5zRWxlbWVudChldi50YXJnZXQsIF90aGlzLl9nZXRUYXJnZXRFbGVtZW50KCkpKSB7XG4gICAgICAgICAgICAgICAgLy8gRG8gbm90IHNob3cgdG9vbHRpcCB3aGVuIHRhcmdldCBpcyBpbnNpZGUgYSBwb3J0YWwgcmVsYXRpdmUgdG8gVG9vbHRpcEhvc3QuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuX2NsZWFyRGlzbWlzc1RpbWVyKCk7XG4gICAgICAgICAgICBfdGhpcy5fY2xlYXJPcGVuVGltZXIoKTtcbiAgICAgICAgICAgIGlmIChkZWxheSAhPT0gVG9vbHRpcERlbGF5Lnplcm8pIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGlzQXJpYVBsYWNlaG9sZGVyUmVuZGVyZWQ6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgdmFyIGRlbGF5VGltZSA9IF90aGlzLl9nZXREZWxheVRpbWUoZGVsYXkpOyAvLyBub24tbnVsbCBhc3NlcnRpb24gYmVjYXVzZSB3ZSBzZXQgaXQgaW4gYGRlZmF1bHRQcm9wc2BcbiAgICAgICAgICAgICAgICBfdGhpcy5fb3BlblRpbWVySWQgPSBfdGhpcy5fYXN5bmMuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl90b2dnbGVUb29sdGlwKHRydWUpO1xuICAgICAgICAgICAgICAgIH0sIGRlbGF5VGltZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fdG9nZ2xlVG9vbHRpcCh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gSGlkZSBUb29sdGlwXG4gICAgICAgIF90aGlzLl9vblRvb2x0aXBNb3VzZUxlYXZlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgY2xvc2VEZWxheSA9IF90aGlzLnByb3BzLmNsb3NlRGVsYXk7XG4gICAgICAgICAgICBfdGhpcy5fY2xlYXJEaXNtaXNzVGltZXIoKTtcbiAgICAgICAgICAgIF90aGlzLl9jbGVhck9wZW5UaW1lcigpO1xuICAgICAgICAgICAgaWYgKGNsb3NlRGVsYXkpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fZGlzbWlzc1RpbWVySWQgPSBfdGhpcy5fYXN5bmMuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl90b2dnbGVUb29sdGlwKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9LCBjbG9zZURlbGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLl90b2dnbGVUb29sdGlwKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChUb29sdGlwSG9zdEJhc2UuX2N1cnJlbnRWaXNpYmxlVG9vbHRpcCA9PT0gX3RoaXMpIHtcbiAgICAgICAgICAgICAgICBUb29sdGlwSG9zdEJhc2UuX2N1cnJlbnRWaXNpYmxlVG9vbHRpcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uVG9vbHRpcEtleURvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmICgoZXYud2hpY2ggPT09IEtleUNvZGVzLmVzY2FwZSB8fCBldi5jdHJsS2V5KSAmJiBfdGhpcy5zdGF0ZS5pc1Rvb2x0aXBWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2hpZGVUb29sdGlwKCk7XG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9jbGVhckRpc21pc3NUaW1lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl9hc3luYy5jbGVhclRpbWVvdXQoX3RoaXMuX2Rpc21pc3NUaW1lcklkKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX2NsZWFyT3BlblRpbWVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX2FzeW5jLmNsZWFyVGltZW91dChfdGhpcy5fb3BlblRpbWVySWQpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBIaWRlIFRvb2x0aXBcbiAgICAgICAgX3RoaXMuX2hpZGVUb29sdGlwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX2NsZWFyT3BlblRpbWVyKCk7XG4gICAgICAgICAgICBfdGhpcy5fY2xlYXJEaXNtaXNzVGltZXIoKTtcbiAgICAgICAgICAgIF90aGlzLl90b2dnbGVUb29sdGlwKGZhbHNlKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX3RvZ2dsZVRvb2x0aXAgPSBmdW5jdGlvbiAoaXNUb29sdGlwVmlzaWJsZSkge1xuICAgICAgICAgICAgaWYgKF90aGlzLnN0YXRlLmlzVG9vbHRpcFZpc2libGUgIT09IGlzVG9vbHRpcFZpc2libGUpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGlzQXJpYVBsYWNlaG9sZGVyUmVuZGVyZWQ6IGZhbHNlLCBpc1Rvb2x0aXBWaXNpYmxlOiBpc1Rvb2x0aXBWaXNpYmxlIH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnByb3BzLm9uVG9vbHRpcFRvZ2dsZSAmJiBfdGhpcy5wcm9wcy5vblRvb2x0aXBUb2dnbGUoaXNUb29sdGlwVmlzaWJsZSk7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fZ2V0RGVsYXlUaW1lID0gZnVuY3Rpb24gKGRlbGF5KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGRlbGF5KSB7XG4gICAgICAgICAgICAgICAgY2FzZSBUb29sdGlwRGVsYXkubWVkaXVtOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMzAwO1xuICAgICAgICAgICAgICAgIGNhc2UgVG9vbHRpcERlbGF5Lmxvbmc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA1MDA7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGluaXRpYWxpemVDb21wb25lbnRSZWYoX3RoaXMpO1xuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGlzQXJpYVBsYWNlaG9sZGVyUmVuZGVyZWQ6IGZhbHNlLFxuICAgICAgICAgICAgaXNUb29sdGlwVmlzaWJsZTogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9hc3luYyA9IG5ldyBBc3luYyhfdGhpcyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLy8gUmVuZGVyXG4gICAgVG9vbHRpcEhvc3RCYXNlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIGNhbGxvdXRQcm9wcyA9IF9hLmNhbGxvdXRQcm9wcywgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbiwgY29udGVudCA9IF9hLmNvbnRlbnQsIGRpcmVjdGlvbmFsSGludCA9IF9hLmRpcmVjdGlvbmFsSGludCwgZGlyZWN0aW9uYWxIaW50Rm9yUlRMID0gX2EuZGlyZWN0aW9uYWxIaW50Rm9yUlRMLCBjbGFzc05hbWUgPSBfYS5ob3N0Q2xhc3NOYW1lLCBpZCA9IF9hLmlkLCBfYiA9IF9hLnNldEFyaWFEZXNjcmliZWRCeSwgc2V0QXJpYURlc2NyaWJlZEJ5ID0gX2IgPT09IHZvaWQgMCA/IHRydWUgOiBfYiwgdG9vbHRpcFByb3BzID0gX2EudG9vbHRpcFByb3BzLCBzdHlsZXMgPSBfYS5zdHlsZXMsIHRoZW1lID0gX2EudGhlbWU7XG4gICAgICAgIHRoaXMuX2NsYXNzTmFtZXMgPSBnZXRDbGFzc05hbWVzKHN0eWxlcywge1xuICAgICAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgX2MgPSB0aGlzLnN0YXRlLCBpc0FyaWFQbGFjZWhvbGRlclJlbmRlcmVkID0gX2MuaXNBcmlhUGxhY2Vob2xkZXJSZW5kZXJlZCwgaXNUb29sdGlwVmlzaWJsZSA9IF9jLmlzVG9vbHRpcFZpc2libGU7XG4gICAgICAgIHZhciB0b29sdGlwSWQgPSBpZCB8fCB0aGlzLl9kZWZhdWx0VG9vbHRpcElkO1xuICAgICAgICB2YXIgaXNDb250ZW50UHJlc2VudCA9ICEhKGNvbnRlbnQgfHxcbiAgICAgICAgICAgICh0b29sdGlwUHJvcHMgJiYgdG9vbHRpcFByb3BzLm9uUmVuZGVyQ29udGVudCAmJiB0b29sdGlwUHJvcHMub25SZW5kZXJDb250ZW50KCkpKTtcbiAgICAgICAgdmFyIHNob3dUb29sdGlwID0gaXNUb29sdGlwVmlzaWJsZSAmJiBpc0NvbnRlbnRQcmVzZW50O1xuICAgICAgICB2YXIgYXJpYURlc2NyaWJlZEJ5ID0gc2V0QXJpYURlc2NyaWJlZEJ5ICYmIGlzVG9vbHRpcFZpc2libGUgJiYgaXNDb250ZW50UHJlc2VudCA/IHRvb2x0aXBJZCA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9fYXNzaWduKHsgY2xhc3NOYW1lOiB0aGlzLl9jbGFzc05hbWVzLnJvb3QsIHJlZjogdGhpcy5fdG9vbHRpcEhvc3QgfSwgeyBvbkZvY3VzQ2FwdHVyZTogdGhpcy5fb25Ub29sdGlwTW91c2VFbnRlciB9LCB7IG9uQmx1ckNhcHR1cmU6IHRoaXMuX2hpZGVUb29sdGlwIH0sIHsgb25Nb3VzZUVudGVyOiB0aGlzLl9vblRvb2x0aXBNb3VzZUVudGVyLCBvbk1vdXNlTGVhdmU6IHRoaXMuX29uVG9vbHRpcE1vdXNlTGVhdmUsIG9uS2V5RG93bjogdGhpcy5fb25Ub29sdGlwS2V5RG93biwgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IGFyaWFEZXNjcmliZWRCeSB9KSxcbiAgICAgICAgICAgIGNoaWxkcmVuLFxuICAgICAgICAgICAgc2hvd1Rvb2x0aXAgJiYgKFJlYWN0LmNyZWF0ZUVsZW1lbnQoVG9vbHRpcCwgX19hc3NpZ24oeyBpZDogdG9vbHRpcElkLCBjb250ZW50OiBjb250ZW50LCB0YXJnZXRFbGVtZW50OiB0aGlzLl9nZXRUYXJnZXRFbGVtZW50KCksIGRpcmVjdGlvbmFsSGludDogZGlyZWN0aW9uYWxIaW50LCBkaXJlY3Rpb25hbEhpbnRGb3JSVEw6IGRpcmVjdGlvbmFsSGludEZvclJUTCwgY2FsbG91dFByb3BzOiBhc3NpZ24oe30sIGNhbGxvdXRQcm9wcywge1xuICAgICAgICAgICAgICAgICAgICBvbkRpc21pc3M6IHRoaXMuX2hpZGVUb29sdGlwLFxuICAgICAgICAgICAgICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuX29uVG9vbHRpcE1vdXNlRW50ZXIsXG4gICAgICAgICAgICAgICAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy5fb25Ub29sdGlwTW91c2VMZWF2ZSxcbiAgICAgICAgICAgICAgICB9KSwgb25Nb3VzZUVudGVyOiB0aGlzLl9vblRvb2x0aXBNb3VzZUVudGVyLCBvbk1vdXNlTGVhdmU6IHRoaXMuX29uVG9vbHRpcE1vdXNlTGVhdmUgfSwgZ2V0TmF0aXZlUHJvcHModGhpcy5wcm9wcywgZGl2UHJvcGVydGllcyksIHRvb2x0aXBQcm9wcykpKSxcbiAgICAgICAgICAgIGlzQXJpYVBsYWNlaG9sZGVyUmVuZGVyZWQgJiYgKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBpZDogdG9vbHRpcElkLCBzdHlsZTogaGlkZGVuQ29udGVudFN0eWxlIH0sIGNvbnRlbnQpKSkpO1xuICAgIH07XG4gICAgVG9vbHRpcEhvc3RCYXNlLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKFRvb2x0aXBIb3N0QmFzZS5fY3VycmVudFZpc2libGVUb29sdGlwICYmIFRvb2x0aXBIb3N0QmFzZS5fY3VycmVudFZpc2libGVUb29sdGlwID09PSB0aGlzKSB7XG4gICAgICAgICAgICBUb29sdGlwSG9zdEJhc2UuX2N1cnJlbnRWaXNpYmxlVG9vbHRpcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hc3luYy5kaXNwb3NlKCk7XG4gICAgfTtcbiAgICBUb29sdGlwSG9zdEJhc2UuZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBkZWxheTogVG9vbHRpcERlbGF5Lm1lZGl1bSxcbiAgICB9O1xuICAgIHJldHVybiBUb29sdGlwSG9zdEJhc2U7XG59KFJlYWN0LkNvbXBvbmVudCkpO1xuZXhwb3J0IHsgVG9vbHRpcEhvc3RCYXNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ub29sdGlwSG9zdC5iYXNlLmpzLm1hcCIsIi8qKlxuICogRGV0ZWN0cyB3aGV0aGVyIGFuIGVsZW1lbnQncyBjb250ZW50IGhhcyBob3Jpem9udGFsIG92ZXJmbG93XG4gKlxuICogQHB1YmxpY1xuICogQHBhcmFtIGVsZW1lbnQgLSBFbGVtZW50IHRvIGNoZWNrIGZvciBvdmVyZmxvd1xuICogQHJldHVybnMgVHJ1ZSBpZiBlbGVtZW50J3MgY29udGVudCBvdmVyZmxvd3NcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0hvcml6b250YWxPdmVyZmxvdyhlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuY2xpZW50V2lkdGggPCBlbGVtZW50LnNjcm9sbFdpZHRoO1xufVxuLyoqXG4gKiBEZXRlY3RzIHdoZXRoZXIgYW4gZWxlbWVudCdzIGNvbnRlbnQgaGFzIHZlcnRpY2FsIG92ZXJmbG93XG4gKlxuICogQHB1YmxpY1xuICogQHBhcmFtIGVsZW1lbnQgLSBFbGVtZW50IHRvIGNoZWNrIGZvciBvdmVyZmxvd1xuICogQHJldHVybnMgVHJ1ZSBpZiBlbGVtZW50J3MgY29udGVudCBvdmVyZmxvd3NcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc1ZlcnRpY2FsT3ZlcmZsb3coZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LmNsaWVudEhlaWdodCA8IGVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xufVxuLyoqXG4gKiBEZXRlY3RzIHdoZXRoZXIgYW4gZWxlbWVudCdzIGNvbnRlbnQgaGFzIG92ZXJmbG93IGluIGFueSBkaXJlY3Rpb25cbiAqXG4gKiBAcHVibGljXG4gKiBAcGFyYW0gZWxlbWVudCAtIEVsZW1lbnQgdG8gY2hlY2sgZm9yIG92ZXJmbG93XG4gKiBAcmV0dXJucyBUcnVlIGlmIGVsZW1lbnQncyBjb250ZW50IG92ZXJmbG93c1xuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzT3ZlcmZsb3coZWxlbWVudCkge1xuICAgIHJldHVybiBoYXNIb3Jpem9udGFsT3ZlcmZsb3coZWxlbWVudCkgfHwgaGFzVmVydGljYWxPdmVyZmxvdyhlbGVtZW50KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW92ZXJmbG93LmpzLm1hcCIsImltcG9ydCB7IGdldEdsb2JhbENsYXNzTmFtZXMgfSBmcm9tICcuLi8uLi9TdHlsaW5nJztcbnZhciBHbG9iYWxDbGFzc05hbWVzID0ge1xuICAgIHJvb3Q6ICdtcy1Ub29sdGlwSG9zdCcsXG4gICAgYXJpYVBsYWNlaG9sZGVyOiAnbXMtVG9vbHRpcEhvc3QtYXJpYS1wbGFjZWhvbGRlcicsXG59O1xuZXhwb3J0IHZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLCB0aGVtZSA9IHByb3BzLnRoZW1lO1xuICAgIHZhciBjbGFzc05hbWVzID0gZ2V0R2xvYmFsQ2xhc3NOYW1lcyhHbG9iYWxDbGFzc05hbWVzLCB0aGVtZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcm9vdDogW1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5yb290LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdpbmxpbmUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgXSxcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRvb2x0aXBIb3N0LnN0eWxlcy5qcy5tYXAiLCJpbXBvcnQgeyBzdHlsZWQgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgVG9vbHRpcEhvc3RCYXNlIH0gZnJvbSAnLi9Ub29sdGlwSG9zdC5iYXNlJztcbmltcG9ydCB7IGdldFN0eWxlcyB9IGZyb20gJy4vVG9vbHRpcEhvc3Quc3R5bGVzJztcbmV4cG9ydCB2YXIgVG9vbHRpcEhvc3QgPSBzdHlsZWQoVG9vbHRpcEhvc3RCYXNlLCBnZXRTdHlsZXMsIHVuZGVmaW5lZCwge1xuICAgIHNjb3BlOiAnVG9vbHRpcEhvc3QnLFxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ub29sdGlwSG9zdC5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19yZXN0IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBtZW1vaXplRnVuY3Rpb24gfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xudmFyIENPTU1BTkRfQkFSX0hFSUdIVCA9IDQ0O1xuZXhwb3J0IHZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLCB0aGVtZSA9IHByb3BzLnRoZW1lO1xuICAgIHZhciBzZW1hbnRpY0NvbG9ycyA9IHRoZW1lLnNlbWFudGljQ29sb3JzO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJvb3Q6IFtcbiAgICAgICAgICAgIHRoZW1lLmZvbnRzLm1lZGl1bSxcbiAgICAgICAgICAgICdtcy1Db21tYW5kQmFyJyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBzZW1hbnRpY0NvbG9ycy5ib2R5QmFja2dyb3VuZCxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMCAxNHB4IDAgMjRweCcsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBDT01NQU5EX0JBUl9IRUlHSFQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBdLFxuICAgICAgICBwcmltYXJ5U2V0OiBbXG4gICAgICAgICAgICAnbXMtQ29tbWFuZEJhci1wcmltYXJ5Q29tbWFuZCcsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZmxleEdyb3c6ICcxJyxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ3N0cmV0Y2gnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgc2Vjb25kYXJ5U2V0OiBbXG4gICAgICAgICAgICAnbXMtQ29tbWFuZEJhci1zZWNvbmRhcnlDb21tYW5kJyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmbGV4U2hyaW5rOiAnMCcsXG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdzdHJldGNoJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgfTtcbn07XG5leHBvcnQgdmFyIGdldENvbW1hbmRCdXR0b25TdHlsZXMgPSBtZW1vaXplRnVuY3Rpb24oZnVuY3Rpb24gKGN1c3RvbVN0eWxlcykge1xuICAgIHZhciByb290U3R5bGVzID0ge1xuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICB9O1xuICAgIHZhciBsYWJlbFN0eWxlcyA9IHtcbiAgICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgfTtcbiAgICB2YXIgX2EgPSBjdXN0b21TdHlsZXMgfHwge30sIHJvb3QgPSBfYS5yb290LCBsYWJlbCA9IF9hLmxhYmVsLCByZXN0Q3VzdG9tU3R5bGVzID0gX19yZXN0KF9hLCBbXCJyb290XCIsIFwibGFiZWxcIl0pO1xuICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcmVzdEN1c3RvbVN0eWxlcyksIHsgcm9vdDogcm9vdCA/IFtyb290U3R5bGVzLCByb290XSA6IHJvb3RTdHlsZXMsIGxhYmVsOiBsYWJlbCA/IFtsYWJlbFN0eWxlcywgbGFiZWxdIDogbGFiZWxTdHlsZXMgfSk7XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbW1hbmRCYXIuc3R5bGVzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMsIF9fc3ByZWFkQXJyYXlzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjbGFzc05hbWVzRnVuY3Rpb24sIGNzcywgbnVsbFJlbmRlciwgZ2V0TmF0aXZlUHJvcHMsIGRpdlByb3BlcnRpZXMsIGNvbXBvc2VDb21wb25lbnRBcywgaW5pdGlhbGl6ZUNvbXBvbmVudFJlZiwgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgT3ZlcmZsb3dTZXQgfSBmcm9tICcuLi8uLi9PdmVyZmxvd1NldCc7XG5pbXBvcnQgeyBSZXNpemVHcm91cCB9IGZyb20gJy4uLy4uL1Jlc2l6ZUdyb3VwJztcbmltcG9ydCB7IEZvY3VzWm9uZSwgRm9jdXNab25lRGlyZWN0aW9uIH0gZnJvbSAnLi4vLi4vRm9jdXNab25lJztcbmltcG9ydCB7IENvbW1hbmRCYXJCdXR0b24gfSBmcm9tICcuLi8uLi9CdXR0b24nO1xuaW1wb3J0IHsgVG9vbHRpcEhvc3QgfSBmcm9tICcuLi8uLi9Ub29sdGlwJztcbmltcG9ydCB7IGdldENvbW1hbmRCdXR0b25TdHlsZXMgfSBmcm9tICcuL0NvbW1hbmRCYXIuc3R5bGVzJztcbnZhciBnZXRDbGFzc05hbWVzID0gY2xhc3NOYW1lc0Z1bmN0aW9uKCk7XG52YXIgQ29tbWFuZEJhckJhc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvbW1hbmRCYXJCYXNlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbW1hbmRCYXJCYXNlKHByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fb3ZlcmZsb3dTZXQgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICAgICAgX3RoaXMuX3Jlc2l6ZUdyb3VwID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgICAgIF90aGlzLl9vblJlbmRlckRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KEZvY3VzWm9uZSwgeyBjbGFzc05hbWU6IGNzcyhfdGhpcy5fY2xhc3NOYW1lcy5yb290KSwgZGlyZWN0aW9uOiBGb2N1c1pvbmVEaXJlY3Rpb24uaG9yaXpvbnRhbCwgcm9sZTogJ21lbnViYXInLCBcImFyaWEtbGFiZWxcIjogX3RoaXMucHJvcHMuYXJpYUxhYmVsIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChPdmVyZmxvd1NldCwgeyByb2xlOiBcIm5vbmVcIiwgY29tcG9uZW50UmVmOiBfdGhpcy5fb3ZlcmZsb3dTZXQsIGNsYXNzTmFtZTogY3NzKF90aGlzLl9jbGFzc05hbWVzLnByaW1hcnlTZXQpLCBkb05vdENvbnRhaW5XaXRoaW5Gb2N1c1pvbmU6IHRydWUsIGl0ZW1zOiBkYXRhLnByaW1hcnlJdGVtcywgb3ZlcmZsb3dJdGVtczogZGF0YS5vdmVyZmxvd0l0ZW1zLmxlbmd0aCA/IGRhdGEub3ZlcmZsb3dJdGVtcyA6IHVuZGVmaW5lZCwgb25SZW5kZXJJdGVtOiBfdGhpcy5fb25SZW5kZXJJdGVtLCBvblJlbmRlck92ZXJmbG93QnV0dG9uOiBfdGhpcy5fb25SZW5kZXJPdmVyZmxvd0J1dHRvbiB9KSxcbiAgICAgICAgICAgICAgICBkYXRhLmZhckl0ZW1zICYmIGRhdGEuZmFySXRlbXMubGVuZ3RoID4gMCAmJiAoUmVhY3QuY3JlYXRlRWxlbWVudChPdmVyZmxvd1NldCwgeyByb2xlOiBcIm5vbmVcIiwgY2xhc3NOYW1lOiBjc3MoX3RoaXMuX2NsYXNzTmFtZXMuc2Vjb25kYXJ5U2V0KSwgZG9Ob3RDb250YWluV2l0aGluRm9jdXNab25lOiB0cnVlLCBpdGVtczogZGF0YS5mYXJJdGVtcywgb25SZW5kZXJJdGVtOiBfdGhpcy5fb25SZW5kZXJJdGVtLCBvblJlbmRlck92ZXJmbG93QnV0dG9uOiBudWxsUmVuZGVyIH0pKSkpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25SZW5kZXJJdGVtID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIGlmIChpdGVtLm9uUmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlc2UgYXJlIHRoZSB0b3AgbGV2ZWwgaXRlbXMsIHRoZXJlIGlzIG5vIHJlbGV2YW50IG1lbnUgZGlzbWlzc2luZyBmdW5jdGlvbiB0b1xuICAgICAgICAgICAgICAgIC8vIHByb3ZpZGUgZm9yIHRoZSBJQ29udGV4dHVhbE1lbnVJdGVtIG9uUmVuZGVyIGZ1bmN0aW9uLiBQYXNzIGluIGEgbm8gb3AgZnVuY3Rpb24gaW5zdGVhZC5cbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5vblJlbmRlcihpdGVtLCBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICB2YXIgaXRlbVRleHQgPSBpdGVtLnRleHQgfHwgaXRlbS5uYW1lO1xuICAgICAgICAgICAgdmFyIGNvbW1hbmRCdXR0b25Qcm9wcyA9IF9fYXNzaWduKF9fYXNzaWduKHsgYWxsb3dEaXNhYmxlZEZvY3VzOiB0cnVlLCByb2xlOiAnbWVudWl0ZW0nIH0sIGl0ZW0pLCB7IHN0eWxlczogZ2V0Q29tbWFuZEJ1dHRvblN0eWxlcyhpdGVtLmJ1dHRvblN0eWxlcyksIGNsYXNzTmFtZTogY3NzKCdtcy1Db21tYW5kQmFySXRlbS1saW5rJywgaXRlbS5jbGFzc05hbWUpLCB0ZXh0OiAhaXRlbS5pY29uT25seSA/IGl0ZW1UZXh0IDogdW5kZWZpbmVkLCBtZW51UHJvcHM6IGl0ZW0uc3ViTWVudVByb3BzLCBvbkNsaWNrOiBfdGhpcy5fb25CdXR0b25DbGljayhpdGVtKSB9KTtcbiAgICAgICAgICAgIGlmIChpdGVtLmljb25Pbmx5ICYmIChpdGVtVGV4dCAhPT0gdW5kZWZpbmVkIHx8IGl0ZW0udG9vbHRpcEhvc3RQcm9wcykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoVG9vbHRpcEhvc3QsIF9fYXNzaWduKHsgY29udGVudDogaXRlbVRleHQgfSwgaXRlbS50b29sdGlwSG9zdFByb3BzKSwgX3RoaXMuX2NvbW1hbmRCdXR0b24oaXRlbSwgY29tbWFuZEJ1dHRvblByb3BzKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9jb21tYW5kQnV0dG9uKGl0ZW0sIGNvbW1hbmRCdXR0b25Qcm9wcyk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9jb21tYW5kQnV0dG9uID0gZnVuY3Rpb24gKGl0ZW0sIHByb3BzKSB7XG4gICAgICAgICAgICB2YXIgQnV0dG9uQXMgPSBfdGhpcy5wcm9wcy5idXR0b25BcztcbiAgICAgICAgICAgIHZhciBDb21tYW5kQmFyQnV0dG9uQXMgPSBpdGVtLmNvbW1hbmRCYXJCdXR0b25BcztcbiAgICAgICAgICAgIHZhciBEZWZhdWx0QnV0dG9uQXMgPSBDb21tYW5kQmFyQnV0dG9uO1xuICAgICAgICAgICAgLy8gVGhlIHByb3AgdHlwZXMgYmV0d2VlbiB0aGVzZSB0aHJlZSBwb3NzaWJsZSBpbXBsZW1lbnRhdGlvbnMgb3ZlcmxhcCBlbm91Z2ggdGhhdCBhIGZvcmNlLWNhc3QgaXMgc2FmZS5cbiAgICAgICAgICAgIHZhciBUeXBlID0gRGVmYXVsdEJ1dHRvbkFzO1xuICAgICAgICAgICAgaWYgKENvbW1hbmRCYXJCdXR0b25Bcykge1xuICAgICAgICAgICAgICAgIFR5cGUgPSBjb21wb3NlQ29tcG9uZW50QXMoQ29tbWFuZEJhckJ1dHRvbkFzLCBUeXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChCdXR0b25Bcykge1xuICAgICAgICAgICAgICAgIFR5cGUgPSBjb21wb3NlQ29tcG9uZW50QXMoQnV0dG9uQXMsIFR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQWx3YXlzIHBhc3MgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gdG8gdGhlIG92ZXJyaWRlIHNvIGl0IG1heSBiZSBjb21wb3NlZC5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFR5cGUsIF9fYXNzaWduKHt9LCBwcm9wcykpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25SZW5kZXJPdmVyZmxvd0J1dHRvbiA9IGZ1bmN0aW9uIChvdmVyZmxvd0l0ZW1zKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcy5vdmVyZmxvd0J1dHRvblByb3BzLCBvdmVyZmxvd0J1dHRvblByb3BzID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2E7XG4gICAgICAgICAgICB2YXIgY29tYmluZWRPdmVyZmxvd0l0ZW1zID0gX19zcHJlYWRBcnJheXMoKG92ZXJmbG93QnV0dG9uUHJvcHMubWVudVByb3BzID8gb3ZlcmZsb3dCdXR0b25Qcm9wcy5tZW51UHJvcHMuaXRlbXMgOiBbXSksIG92ZXJmbG93SXRlbXMpO1xuICAgICAgICAgICAgdmFyIG92ZXJmbG93UHJvcHMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7IHJvbGU6ICdtZW51aXRlbScgfSwgb3ZlcmZsb3dCdXR0b25Qcm9wcyksIHsgc3R5bGVzOiBfX2Fzc2lnbih7IG1lbnVJY29uOiB7IGZvbnRTaXplOiAnMTdweCcgfSB9LCBvdmVyZmxvd0J1dHRvblByb3BzLnN0eWxlcyksIGNsYXNzTmFtZTogY3NzKCdtcy1Db21tYW5kQmFyLW92ZXJmbG93QnV0dG9uJywgb3ZlcmZsb3dCdXR0b25Qcm9wcy5jbGFzc05hbWUpLCBtZW51UHJvcHM6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBvdmVyZmxvd0J1dHRvblByb3BzLm1lbnVQcm9wcyksIHsgaXRlbXM6IGNvbWJpbmVkT3ZlcmZsb3dJdGVtcyB9KSwgbWVudUljb25Qcm9wczogX19hc3NpZ24oeyBpY29uTmFtZTogJ01vcmUnIH0sIG92ZXJmbG93QnV0dG9uUHJvcHMubWVudUljb25Qcm9wcykgfSk7XG4gICAgICAgICAgICB2YXIgT3ZlcmZsb3dCdXR0b25UeXBlID0gX3RoaXMucHJvcHMub3ZlcmZsb3dCdXR0b25Bc1xuICAgICAgICAgICAgICAgID8gY29tcG9zZUNvbXBvbmVudEFzKF90aGlzLnByb3BzLm92ZXJmbG93QnV0dG9uQXMsIENvbW1hbmRCYXJCdXR0b24pXG4gICAgICAgICAgICAgICAgOiBDb21tYW5kQmFyQnV0dG9uO1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoT3ZlcmZsb3dCdXR0b25UeXBlLCBfX2Fzc2lnbih7fSwgb3ZlcmZsb3dQcm9wcykpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25SZWR1Y2VEYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLCBzaGlmdE9uUmVkdWNlID0gX2Euc2hpZnRPblJlZHVjZSwgb25EYXRhUmVkdWNlZCA9IF9hLm9uRGF0YVJlZHVjZWQ7XG4gICAgICAgICAgICB2YXIgcHJpbWFyeUl0ZW1zID0gZGF0YS5wcmltYXJ5SXRlbXMsIG92ZXJmbG93SXRlbXMgPSBkYXRhLm92ZXJmbG93SXRlbXMsIGNhY2hlS2V5ID0gZGF0YS5jYWNoZUtleTtcbiAgICAgICAgICAgIC8vIFVzZSBmaXJzdCBpdGVtIGlmIHNoaWZ0T25SZWR1Y2UsIG90aGVyd2lzZSB1c2UgbGFzdCBpdGVtXG4gICAgICAgICAgICB2YXIgbW92ZWRJdGVtID0gcHJpbWFyeUl0ZW1zW3NoaWZ0T25SZWR1Y2UgPyAwIDogcHJpbWFyeUl0ZW1zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgaWYgKG1vdmVkSXRlbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbW92ZWRJdGVtLnJlbmRlcmVkSW5PdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3dJdGVtcyA9IF9fc3ByZWFkQXJyYXlzKFttb3ZlZEl0ZW1dLCBvdmVyZmxvd0l0ZW1zKTtcbiAgICAgICAgICAgICAgICBwcmltYXJ5SXRlbXMgPSBzaGlmdE9uUmVkdWNlID8gcHJpbWFyeUl0ZW1zLnNsaWNlKDEpIDogcHJpbWFyeUl0ZW1zLnNsaWNlKDAsIC0xKTtcbiAgICAgICAgICAgICAgICB2YXIgbmV3RGF0YSA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBkYXRhKSwgeyBwcmltYXJ5SXRlbXM6IHByaW1hcnlJdGVtcywgb3ZlcmZsb3dJdGVtczogb3ZlcmZsb3dJdGVtcyB9KTtcbiAgICAgICAgICAgICAgICBjYWNoZUtleSA9IF90aGlzLl9jb21wdXRlQ2FjaGVLZXkoeyBwcmltYXJ5SXRlbXM6IHByaW1hcnlJdGVtcywgb3ZlcmZsb3c6IG92ZXJmbG93SXRlbXMubGVuZ3RoID4gMCB9KTtcbiAgICAgICAgICAgICAgICBpZiAob25EYXRhUmVkdWNlZCkge1xuICAgICAgICAgICAgICAgICAgICBvbkRhdGFSZWR1Y2VkKG1vdmVkSXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5ld0RhdGEuY2FjaGVLZXkgPSBjYWNoZUtleTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3RGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbkdyb3dEYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLCBzaGlmdE9uUmVkdWNlID0gX2Euc2hpZnRPblJlZHVjZSwgb25EYXRhR3Jvd24gPSBfYS5vbkRhdGFHcm93bjtcbiAgICAgICAgICAgIHZhciBtaW5pbXVtT3ZlcmZsb3dJdGVtcyA9IGRhdGEubWluaW11bU92ZXJmbG93SXRlbXM7XG4gICAgICAgICAgICB2YXIgcHJpbWFyeUl0ZW1zID0gZGF0YS5wcmltYXJ5SXRlbXMsIG92ZXJmbG93SXRlbXMgPSBkYXRhLm92ZXJmbG93SXRlbXMsIGNhY2hlS2V5ID0gZGF0YS5jYWNoZUtleTtcbiAgICAgICAgICAgIHZhciBtb3ZlZEl0ZW0gPSBvdmVyZmxvd0l0ZW1zWzBdO1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgbW92ZWQgaXRlbSBleGlzdHMgYW5kIGlzIG5vdCBvbmUgb2YgdGhlIG9yaWdpbmFsIG92ZXJmbG93IGl0ZW1zXG4gICAgICAgICAgICBpZiAobW92ZWRJdGVtICE9PSB1bmRlZmluZWQgJiYgb3ZlcmZsb3dJdGVtcy5sZW5ndGggPiBtaW5pbXVtT3ZlcmZsb3dJdGVtcykge1xuICAgICAgICAgICAgICAgIG1vdmVkSXRlbS5yZW5kZXJlZEluT3ZlcmZsb3cgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBvdmVyZmxvd0l0ZW1zID0gb3ZlcmZsb3dJdGVtcy5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICAvLyBpZiBzaGlmdE9uUmVkdWNlLCBtb3ZlZEl0ZW0gZ29lcyBmaXJzdCwgb3RoZXJ3aXNlLCBsYXN0LlxuICAgICAgICAgICAgICAgIHByaW1hcnlJdGVtcyA9IHNoaWZ0T25SZWR1Y2UgPyBfX3NwcmVhZEFycmF5cyhbbW92ZWRJdGVtXSwgcHJpbWFyeUl0ZW1zKSA6IF9fc3ByZWFkQXJyYXlzKHByaW1hcnlJdGVtcywgW21vdmVkSXRlbV0pO1xuICAgICAgICAgICAgICAgIHZhciBuZXdEYXRhID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGRhdGEpLCB7IHByaW1hcnlJdGVtczogcHJpbWFyeUl0ZW1zLCBvdmVyZmxvd0l0ZW1zOiBvdmVyZmxvd0l0ZW1zIH0pO1xuICAgICAgICAgICAgICAgIGNhY2hlS2V5ID0gX3RoaXMuX2NvbXB1dGVDYWNoZUtleSh7IHByaW1hcnlJdGVtczogcHJpbWFyeUl0ZW1zLCBvdmVyZmxvdzogb3ZlcmZsb3dJdGVtcy5sZW5ndGggPiAwIH0pO1xuICAgICAgICAgICAgICAgIGlmIChvbkRhdGFHcm93bikge1xuICAgICAgICAgICAgICAgICAgICBvbkRhdGFHcm93bihtb3ZlZEl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXdEYXRhLmNhY2hlS2V5ID0gY2FjaGVLZXk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld0RhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9O1xuICAgICAgICBpbml0aWFsaXplQ29tcG9uZW50UmVmKF90aGlzKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBDb21tYW5kQmFyQmFzZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBpdGVtcyA9IF9hLml0ZW1zLCBvdmVyZmxvd0l0ZW1zID0gX2Eub3ZlcmZsb3dJdGVtcywgZmFySXRlbXMgPSBfYS5mYXJJdGVtcywgc3R5bGVzID0gX2Euc3R5bGVzLCB0aGVtZSA9IF9hLnRoZW1lLCBkYXRhRGlkUmVuZGVyID0gX2EuZGF0YURpZFJlbmRlciwgX2IgPSBfYS5vblJlZHVjZURhdGEsIG9uUmVkdWNlRGF0YSA9IF9iID09PSB2b2lkIDAgPyB0aGlzLl9vblJlZHVjZURhdGEgOiBfYiwgX2MgPSBfYS5vbkdyb3dEYXRhLCBvbkdyb3dEYXRhID0gX2MgPT09IHZvaWQgMCA/IHRoaXMuX29uR3Jvd0RhdGEgOiBfYztcbiAgICAgICAgdmFyIGNvbW1hbmRCYXJEYXRhID0ge1xuICAgICAgICAgICAgcHJpbWFyeUl0ZW1zOiBfX3NwcmVhZEFycmF5cyhpdGVtcyksXG4gICAgICAgICAgICBvdmVyZmxvd0l0ZW1zOiBfX3NwcmVhZEFycmF5cyhvdmVyZmxvd0l0ZW1zKSxcbiAgICAgICAgICAgIG1pbmltdW1PdmVyZmxvd0l0ZW1zOiBfX3NwcmVhZEFycmF5cyhvdmVyZmxvd0l0ZW1zKS5sZW5ndGgsXG4gICAgICAgICAgICBmYXJJdGVtczogZmFySXRlbXMsXG4gICAgICAgICAgICBjYWNoZUtleTogdGhpcy5fY29tcHV0ZUNhY2hlS2V5KHtcbiAgICAgICAgICAgICAgICBwcmltYXJ5SXRlbXM6IF9fc3ByZWFkQXJyYXlzKGl0ZW1zKSxcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogb3ZlcmZsb3dJdGVtcyAmJiBvdmVyZmxvd0l0ZW1zLmxlbmd0aCA+IDAsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fY2xhc3NOYW1lcyA9IGdldENsYXNzTmFtZXMoc3R5bGVzLCB7IHRoZW1lOiB0aGVtZSB9KTtcbiAgICAgICAgLy8gUmVzaXplR3JvdXAgd2lsbCByZW5kZXIgdGhlc2UgYXR0cmlidXRlcyB0byB0aGUgcm9vdCA8ZGl2Pi5cbiAgICAgICAgLy8gVE9ETyBXZSBtYXkgbmVlZCB0byBlbGV2YXRlIGNsYXNzTmFtZXMgZnJvbSA8Rm9jdXNab25lPiBpbnRvIDxSZXNpemVHcm91cD4gP1xuICAgICAgICB2YXIgbmF0aXZlUHJvcHMgPSBnZXROYXRpdmVQcm9wcyh0aGlzLnByb3BzLCBkaXZQcm9wZXJ0aWVzKTtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFJlc2l6ZUdyb3VwLCBfX2Fzc2lnbih7fSwgbmF0aXZlUHJvcHMsIHsgY29tcG9uZW50UmVmOiB0aGlzLl9yZXNpemVHcm91cCwgZGF0YTogY29tbWFuZEJhckRhdGEsIG9uUmVkdWNlRGF0YTogb25SZWR1Y2VEYXRhLCBvbkdyb3dEYXRhOiBvbkdyb3dEYXRhLCBvblJlbmRlckRhdGE6IHRoaXMuX29uUmVuZGVyRGF0YSwgZGF0YURpZFJlbmRlcjogZGF0YURpZFJlbmRlciB9KSkpO1xuICAgIH07XG4gICAgQ29tbWFuZEJhckJhc2UucHJvdG90eXBlLmZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3ZlcmZsb3dTZXQgPSB0aGlzLl9vdmVyZmxvd1NldC5jdXJyZW50O1xuICAgICAgICBvdmVyZmxvd1NldCAmJiBvdmVyZmxvd1NldC5mb2N1cygpO1xuICAgIH07XG4gICAgQ29tbWFuZEJhckJhc2UucHJvdG90eXBlLnJlbWVhc3VyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcmVzaXplR3JvdXAuY3VycmVudCAmJiB0aGlzLl9yZXNpemVHcm91cC5jdXJyZW50LnJlbWVhc3VyZSgpO1xuICAgIH07XG4gICAgQ29tbWFuZEJhckJhc2UucHJvdG90eXBlLl9vbkJ1dHRvbkNsaWNrID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgLy8gaW5hY3RpdmUgaXMgZGVwcmVjYXRlZC4gcmVtb3ZlIGNoZWNrIGluIDcuMFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICBpZiAoaXRlbS5pbmFjdGl2ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpdGVtLm9uQ2xpY2spIHtcbiAgICAgICAgICAgICAgICBpdGVtLm9uQ2xpY2soZXYsIGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG4gICAgQ29tbWFuZEJhckJhc2UucHJvdG90eXBlLl9jb21wdXRlQ2FjaGVLZXkgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB2YXIgcHJpbWFyeUl0ZW1zID0gZGF0YS5wcmltYXJ5SXRlbXMsIG92ZXJmbG93ID0gZGF0YS5vdmVyZmxvdztcbiAgICAgICAgdmFyIHJldHVybktleSA9IGZ1bmN0aW9uIChhY2MsIGN1cnJlbnQpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IGN1cnJlbnQuY2FjaGVLZXksIGNhY2hlS2V5ID0gX2EgPT09IHZvaWQgMCA/IGN1cnJlbnQua2V5IDogX2E7XG4gICAgICAgICAgICByZXR1cm4gYWNjICsgY2FjaGVLZXk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBwcmltYXJ5S2V5ID0gcHJpbWFyeUl0ZW1zICYmIHByaW1hcnlJdGVtcy5yZWR1Y2UocmV0dXJuS2V5LCAnJyk7XG4gICAgICAgIHZhciBvdmVyZmxvd0tleSA9IG92ZXJmbG93ID8gJ292ZXJmbG93JyA6ICcnO1xuICAgICAgICByZXR1cm4gW3ByaW1hcnlLZXksIG92ZXJmbG93S2V5XS5qb2luKCcnKTtcbiAgICB9O1xuICAgIENvbW1hbmRCYXJCYXNlLmRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICBvdmVyZmxvd0l0ZW1zOiBbXSxcbiAgICB9O1xuICAgIHJldHVybiBDb21tYW5kQmFyQmFzZTtcbn0oUmVhY3QuQ29tcG9uZW50KSk7XG5leHBvcnQgeyBDb21tYW5kQmFyQmFzZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29tbWFuZEJhci5iYXNlLmpzLm1hcCIsImltcG9ydCB7IHN0eWxlZCB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBDb21tYW5kQmFyQmFzZSB9IGZyb20gJy4vQ29tbWFuZEJhci5iYXNlJztcbmltcG9ydCB7IGdldFN0eWxlcyB9IGZyb20gJy4vQ29tbWFuZEJhci5zdHlsZXMnO1xuLy8gQ3JlYXRlIGEgQ29tbWFuZEJhciB2YXJpYW50IHdoaWNoIHVzZXMgdGhlc2UgZGVmYXVsdCBzdHlsZXMgYW5kIHRoaXMgc3R5bGVkIHN1YmNvbXBvbmVudC5cbmV4cG9ydCB2YXIgQ29tbWFuZEJhciA9IHN0eWxlZChDb21tYW5kQmFyQmFzZSwgZ2V0U3R5bGVzLCB1bmRlZmluZWQsIHtcbiAgICBzY29wZTogJ0NvbW1hbmRCYXInLFxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db21tYW5kQmFyLmpzLm1hcCIsImltcG9ydCB7IENvbW1hbmRCYXIgfSBmcm9tIFwiQGZsdWVudHVpL3JlYWN0XCI7XHJcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlSGlzdG9yeSwgdXNlTG9jYXRpb24gfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5leHBvcnQgdmFyIE5hdmJhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBoaXN0b3J5ID0gdXNlSGlzdG9yeSgpO1xyXG4gICAgdmFyIGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcclxuICAgIHZhciBfaXRlbXMgPSBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBrZXk6ICdWZWhpY2xlcycsXHJcbiAgICAgICAgICAgIHRleHQ6ICdWZWhpY2xlcycsXHJcbiAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGhpc3RvcnkucHVzaCgnLycpOyB9LFxyXG4gICAgICAgICAgICBjaGVja2VkOiBsb2NhdGlvbi5wYXRobmFtZSA9PT0gJy8nXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGtleTogJ0Fib3V0JyxcclxuICAgICAgICAgICAgdGV4dDogJ0Fib3V0JyxcclxuICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gKCkgeyByZXR1cm4gaGlzdG9yeS5wdXNoKCcvYWJvdXQnKTsgfSxcclxuICAgICAgICAgICAgY2hlY2tlZDogbG9jYXRpb24ucGF0aG5hbWUgPT09ICcvYWJvdXQnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGtleTogJ2NvbnRhY3QnLFxyXG4gICAgICAgICAgICB0ZXh0OiAnY29udGFjdCcsXHJcbiAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGhpc3RvcnkucHVzaCgnL2NvbnRhY3QnKTsgfSxcclxuICAgICAgICAgICAgY2hlY2tlZDogbG9jYXRpb24ucGF0aG5hbWUgPT09ICcvY29udGFjdCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAga2V5OiAnY2xpZW50cycsXHJcbiAgICAgICAgICAgIHRleHQ6ICdjbGllbnRzJyxcclxuICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gKCkgeyByZXR1cm4gaGlzdG9yeS5wdXNoKCcvY2xpZW50cycpOyB9LFxyXG4gICAgICAgICAgICBjaGVja2VkOiBsb2NhdGlvbi5wYXRobmFtZSA9PT0gJy9jbGllbnRzJ1xyXG4gICAgICAgIH0sXHJcbiAgICBdO1xyXG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KENvbW1hbmRCYXIsIHsgaXRlbXM6IF9pdGVtcyB9KSk7XHJcbn07XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmV4cG9ydCB2YXIgQ29udGFjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJjb250YWluZXJcIiB9LCBcIkNvbnRhY3RcIikpO1xyXG59O1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5leHBvcnQgdmFyIEFib3V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImNvbnRhaW5lclwiIH0sIFwiQWJvdXRcIikpO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBEZXRhaWxzTGlzdCwgRGV0YWlsc0xpc3RMYXlvdXRNb2RlLCBUZXh0RmllbGQsIFN0YWNrLCBQcmltYXJ5QnV0dG9uIH0gZnJvbSAnQGZsdWVudHVpL3JlYWN0JztcclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IHNlYXJjaENsaWVudCB9IGZyb20gJy4uLy4uL3N0b3JlL2NsaWVudC9hY3Rpb25zJztcclxuLy8gaW1wb3J0IHsgYWRkUGVyc29uLCByZW1vdmVQZXJzb24gfSBmcm9tICcuLi8uLi9zdG9yZS9wZW9wbGUvYWN0aW9ucyc7XHJcbmV4cG9ydCB2YXIgQ2xpZW50cyA9IGZ1bmN0aW9uIChwcm9wcykge1xyXG4gICAgdmFyIF9hID0gUmVhY3QudXNlU3RhdGUoJycpLCBzZXRTZWFyY2ggPSBfYVsxXTtcclxuICAgIHZhciB2aWV3ID0gdXNlU2VsZWN0b3IoZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZS5jbGllbnRWaWV3OyB9KTtcclxuICAgIHZhciBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XHJcbiAgICB2YXIgaGFuZGxlT25DaGFuZ2UgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHNldFNlYXJjaChlLnRhcmdldC52YWx1ZSk7XHJcbiAgICAgICAgdmlldy5zZWFyY2ggPSBlLnRhcmdldC52YWx1ZTtcclxuICAgICAgICBkaXNwYXRjaChzZWFyY2hDbGllbnQodmlldykpO1xyXG4gICAgfTtcclxuICAgIHZhciBzZWFyY2hPbkNsaWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGRpc3BhdGNoKHNlYXJjaENsaWVudCh2aWV3KSk7XHJcbiAgICB9O1xyXG4gICAgdmFyIF9jb2x1bW5zID0gW1xyXG4gICAgICAgIHsga2V5OiAnTmFtZScsIG5hbWU6ICdOYW1lJywgZmllbGROYW1lOiAnbmFtZScsIG1pbldpZHRoOiAxMDAsIG1heFdpZHRoOiAyMDAsIGlzUmVzaXphYmxlOiB0cnVlIH0sXHJcbiAgICAgICAgeyBrZXk6ICdwaG9uZU5vJywgbmFtZTogJ1Bob25lIE5vJywgZmllbGROYW1lOiAncGhvbmVObycsIG1pbldpZHRoOiAxMDAsIG1heFdpZHRoOiAyMDAsIGlzUmVzaXphYmxlOiB0cnVlIH0sXHJcbiAgICAgICAgeyBrZXk6ICdhZGRyZXNzJywgbmFtZTogJ0FkZHJlc3MnLCBmaWVsZE5hbWU6ICdhZGRyZXNzJywgbWluV2lkdGg6IDEwMCwgbWF4V2lkdGg6IDIwMCwgaXNSZXNpemFibGU6IHRydWUgfSxcclxuICAgIF07XHJcbiAgICB2YXIgX29uSXRlbUludm9rZWQgPSBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIGFsZXJ0KFwiSXRlbSBpbnZva2VkOiBcIiArIGl0ZW0ubmFtZSk7XHJcbiAgICB9O1xyXG4gICAgdmFyIF9yZW5kZXJJdGVtQ29sdW1uID0gZnVuY3Rpb24gKGl0ZW0sIGluZGV4LCBjb2x1bW4pIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgdmFyIGZpZWxkQ29udGVudCA9IGl0ZW1bY29sdW1uLmZpZWxkTmFtZV07XHJcbiAgICAgICAgc3dpdGNoIChjb2x1bW4ua2V5KSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ05hbWUnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgeyB0bzogXCIvY2xpZW50LWRldGFpbC9cIiArICgoX2EgPSBpdGVtKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaWQpIH0sIGZpZWxkQ29udGVudCk7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgbnVsbCwgZmllbGRDb250ZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsXHJcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImgxXCIsIG51bGwsIFwiQ2xpZW50c1wiKSxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFN0YWNrLCB7IGhvcml6b250YWw6IHRydWUsIGdyb3c6IHRydWUsIHRva2VuczogeyBjaGlsZHJlbkdhcDogMTAgfSB9LFxyXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFRleHRGaWVsZCwgeyBuYW1lOiBcInNlYXJjaFwiLCBwbGFjZWhvbGRlcjogXCJTZWFyY2hcIiwgb25DaGFuZ2U6IGhhbmRsZU9uQ2hhbmdlIH0pLFxyXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFByaW1hcnlCdXR0b24sIHsgdGV4dDogXCJTZWFyY2hcIiwgb25DbGljazogc2VhcmNoT25DbGljaywgc3R5bGU6IHsgbWF4V2lkdGg6IFwiMzBweFwiIH0gfSksXHJcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUHJpbWFyeUJ1dHRvbiwgeyB0ZXh0OiBcIkFkZFwiLCBvbkNsaWNrOiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm9wcy5oaXN0b3J5LnB1c2goJy9jbGllbnQtY3JlYXRlJyk7IH0sIHN0eWxlOiB7IG1heFdpZHRoOiBcIjMwcHhcIiB9IH0pKSxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KERldGFpbHNMaXN0LCB7IGl0ZW1zOiB2aWV3Lmxpc3QsIGNvbHVtbnM6IF9jb2x1bW5zLCBzZXRLZXk6IFwic2V0XCIsIG9uUmVuZGVySXRlbUNvbHVtbjogX3JlbmRlckl0ZW1Db2x1bW4sIGxheW91dE1vZGU6IERldGFpbHNMaXN0TGF5b3V0TW9kZS5qdXN0aWZpZWQsIHNlbGVjdGlvblByZXNlcnZlZE9uRW1wdHlDbGljazogdHJ1ZSwgXHJcbiAgICAgICAgICAgIC8vc2VsZWN0aW9uTW9kZT17U2VsZWN0aW9uTW9kZS5zaW5nbGV9XHJcbiAgICAgICAgICAgIG9uSXRlbUludm9rZWQ6IF9vbkl0ZW1JbnZva2VkIH0pKSk7XHJcbn07XHJcbiIsInZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcclxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufTtcclxuaW1wb3J0IHsgRGVmYXVsdEJ1dHRvbiwgUHJpbWFyeUJ1dHRvbiwgU3RhY2ssIFRleHRGaWVsZCB9IGZyb20gJ0BmbHVlbnR1aS9yZWFjdCc7XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IGFkZENsaWVudCB9IGZyb20gJy4uLy4uL3N0b3JlL2NsaWVudC9hY3Rpb25zJztcclxuZXhwb3J0IHZhciBDcmVhdGUgPSBmdW5jdGlvbiAocHJvcHMpIHtcclxuICAgIC8vICAgIGNvbnN0IHsgdGl0bGUgfSA9IHByb3BzO1xyXG4gICAgdmFyIF9kZWZhdWx0ID0geyBpZDogMCwgbmFtZTogJycsIHBob25lTm86ICcnLCBhZGRyZXNzOiAnJyB9O1xyXG4gICAgdmFyIF9hID0gUmVhY3QudXNlU3RhdGUoX2RlZmF1bHQpLCBuZXdDbGllbnQgPSBfYVswXSwgc2V0TmV3Q2xpZW50ID0gX2FbMV07XHJcbiAgICB2YXIgaGFuZGxlT25DaGFuZ2UgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICAvL3NldE5ld1BlcnNvbihlLmN1cnJlbnRUYXJnZXQudmFsdWUpO1xyXG4gICAgICAgIHNldE5ld0NsaWVudChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgbmV3Q2xpZW50KSwgKF9hID0ge30sIF9hW2UudGFyZ2V0Lm5hbWVdID0gZS50YXJnZXQudmFsdWUsIF9hKSkpO1xyXG4gICAgfTtcclxuICAgIHZhciBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XHJcbiAgICB2YXIgaGlzdG9yeSA9IHVzZUhpc3RvcnkoKTtcclxuICAgIHZhciBvblNhdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZGlzcGF0Y2goYWRkQ2xpZW50KG5ld0NsaWVudCkpO1xyXG4gICAgICAgIHNldE5ld0NsaWVudChfZGVmYXVsdCk7XHJcbiAgICAgICAgcHJvcHMuaGlzdG9yeS5wdXNoKCcvY2xpZW50cycpO1xyXG4gICAgfTtcclxuICAgIHZhciBiYWNrQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaGlzdG9yeS5nb0JhY2soKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoU3RhY2ssIHsgdG9rZW5zOiB7IGNoaWxkcmVuR2FwOiAyMCB9LCBzdHlsZXM6IHsgcm9vdDogeyB3aWR0aDogMzAwIH0gfSB9LFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGV4dEZpZWxkLCB7IHBsYWNlaG9sZGVyOiBcIkVudGVyIG5hbWVcIiwgbmFtZTogXCJuYW1lXCIsIG9uQ2hhbmdlOiBoYW5kbGVPbkNoYW5nZSB9KSxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFRleHRGaWVsZCwgeyBwbGFjZWhvbGRlcjogXCJFbnRlciBwaG9uZSBub1wiLCBuYW1lOiBcInBob25lTm9cIiwgb25DaGFuZ2U6IGhhbmRsZU9uQ2hhbmdlIH0pLFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGV4dEZpZWxkLCB7IHBsYWNlaG9sZGVyOiBcIkVudGVyIGFkZHJlc3NcIiwgbmFtZTogXCJhZGRyZXNzXCIsIG9uQ2hhbmdlOiBoYW5kbGVPbkNoYW5nZSB9KSxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFByaW1hcnlCdXR0b24sIHsgdGV4dDogXCJTYXZlXCIsIG9uQ2xpY2s6IG9uU2F2ZSB9KSxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRCdXR0b24sIHsgdGV4dDogXCJCYWNrXCIsIG9uQ2xpY2s6IGJhY2tDbGljayB9KSkpO1xyXG59O1xyXG4iLCIvLyBZb3VyIHVzZSBvZiB0aGUgY29udGVudCBpbiB0aGUgZmlsZXMgcmVmZXJlbmNlZCBoZXJlIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBsaWNlbnNlIGF0IGh0dHBzOi8vYWthLm1zL2ZsdWVudHVpLWFzc2V0cy1saWNlbnNlXG5pbXBvcnQgeyByZWdpc3Rlckljb25zIH0gZnJvbSAnQHVpZmFicmljL3N0eWxpbmcnO1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVJY29ucyhiYXNlVXJsLCBvcHRpb25zKSB7XG4gICAgaWYgKGJhc2VVcmwgPT09IHZvaWQgMCkgeyBiYXNlVXJsID0gJyc7IH1cbiAgICB2YXIgc3Vic2V0ID0ge1xuICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgTW96T3N4Rm9udFNtb290aGluZzogJ2dyYXlzY2FsZScsXG4gICAgICAgICAgICBXZWJraXRGb250U21vb3RoaW5nOiAnYW50aWFsaWFzZWQnLFxuICAgICAgICAgICAgZm9udFN0eWxlOiAnbm9ybWFsJyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgICAgICAgc3BlYWs6ICdub25lJyxcbiAgICAgICAgfSxcbiAgICAgICAgZm9udEZhY2U6IHtcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IFwiXFxcIkZhYnJpY01ETDJJY29uc1xcXCJcIixcbiAgICAgICAgICAgIHNyYzogXCJ1cmwoJ1wiICsgYmFzZVVybCArIFwiZmFicmljLWljb25zLWExMzQ5OGNmLndvZmYnKSBmb3JtYXQoJ3dvZmYnKVwiLFxuICAgICAgICB9LFxuICAgICAgICBpY29uczoge1xuICAgICAgICAgICAgR2xvYmFsTmF2QnV0dG9uOiAnXFx1RTcwMCcsXG4gICAgICAgICAgICBDaGV2cm9uRG93bjogJ1xcdUU3MEQnLFxuICAgICAgICAgICAgQ2hldnJvblVwOiAnXFx1RTcwRScsXG4gICAgICAgICAgICBFZGl0OiAnXFx1RTcwRicsXG4gICAgICAgICAgICBBZGQ6ICdcXHVFNzEwJyxcbiAgICAgICAgICAgIENhbmNlbDogJ1xcdUU3MTEnLFxuICAgICAgICAgICAgTW9yZTogJ1xcdUU3MTInLFxuICAgICAgICAgICAgU2V0dGluZ3M6ICdcXHVFNzEzJyxcbiAgICAgICAgICAgIE1haWw6ICdcXHVFNzE1JyxcbiAgICAgICAgICAgIEZpbHRlcjogJ1xcdUU3MUMnLFxuICAgICAgICAgICAgU2VhcmNoOiAnXFx1RTcyMScsXG4gICAgICAgICAgICBTaGFyZTogJ1xcdUU3MkQnLFxuICAgICAgICAgICAgQmxvY2tlZFNpdGU6ICdcXHVFNzJGJyxcbiAgICAgICAgICAgIEZhdm9yaXRlU3RhcjogJ1xcdUU3MzQnLFxuICAgICAgICAgICAgRmF2b3JpdGVTdGFyRmlsbDogJ1xcdUU3MzUnLFxuICAgICAgICAgICAgQ2hlY2tNYXJrOiAnXFx1RTczRScsXG4gICAgICAgICAgICBEZWxldGU6ICdcXHVFNzREJyxcbiAgICAgICAgICAgIENoZXZyb25MZWZ0OiAnXFx1RTc2QicsXG4gICAgICAgICAgICBDaGV2cm9uUmlnaHQ6ICdcXHVFNzZDJyxcbiAgICAgICAgICAgIENhbGVuZGFyOiAnXFx1RTc4NycsXG4gICAgICAgICAgICBNZWdhcGhvbmU6ICdcXHVFNzg5JyxcbiAgICAgICAgICAgIFVuZG86ICdcXHVFN0E3JyxcbiAgICAgICAgICAgIEZsYWc6ICdcXHVFN0MxJyxcbiAgICAgICAgICAgIFBhZ2U6ICdcXHVFN0MzJyxcbiAgICAgICAgICAgIFBpbm5lZDogJ1xcdUU4NDAnLFxuICAgICAgICAgICAgVmlldzogJ1xcdUU4OTAnLFxuICAgICAgICAgICAgQ2xlYXI6ICdcXHVFODk0JyxcbiAgICAgICAgICAgIERvd25sb2FkOiAnXFx1RTg5NicsXG4gICAgICAgICAgICBVcGxvYWQ6ICdcXHVFODk4JyxcbiAgICAgICAgICAgIEZvbGRlcjogJ1xcdUU4QjcnLFxuICAgICAgICAgICAgU29ydDogJ1xcdUU4Q0InLFxuICAgICAgICAgICAgQWxpZ25SaWdodDogJ1xcdUU4RTInLFxuICAgICAgICAgICAgQWxpZ25MZWZ0OiAnXFx1RThFNCcsXG4gICAgICAgICAgICBUYWc6ICdcXHVFOEVDJyxcbiAgICAgICAgICAgIEFkZEZyaWVuZDogJ1xcdUU4RkEnLFxuICAgICAgICAgICAgSW5mbzogJ1xcdUU5NDYnLFxuICAgICAgICAgICAgU29ydExpbmVzOiAnXFx1RTlEMCcsXG4gICAgICAgICAgICBMaXN0OiAnXFx1RUEzNycsXG4gICAgICAgICAgICBDaXJjbGVSaW5nOiAnXFx1RUEzQScsXG4gICAgICAgICAgICBIZWFydDogJ1xcdUVCNTEnLFxuICAgICAgICAgICAgSGVhcnRGaWxsOiAnXFx1RUI1MicsXG4gICAgICAgICAgICBUaWxlczogJ1xcdUVDQTUnLFxuICAgICAgICAgICAgRW1iZWQ6ICdcXHVFQ0NFJyxcbiAgICAgICAgICAgIEdsaW1tZXI6ICdcXHVFQ0Y0JyxcbiAgICAgICAgICAgIEFzY2VuZGluZzogJ1xcdUVEQzAnLFxuICAgICAgICAgICAgRGVzY2VuZGluZzogJ1xcdUVEQzEnLFxuICAgICAgICAgICAgU29ydFVwOiAnXFx1RUU2OCcsXG4gICAgICAgICAgICBTb3J0RG93bjogJ1xcdUVFNjknLFxuICAgICAgICAgICAgU3luY1RvUEM6ICdcXHVFRTZFJyxcbiAgICAgICAgICAgIExhcmdlR3JpZDogJ1xcdUVFQ0InLFxuICAgICAgICAgICAgU2t5cGVDaGVjazogJ1xcdUVGODAnLFxuICAgICAgICAgICAgU2t5cGVDbG9jazogJ1xcdUVGODEnLFxuICAgICAgICAgICAgU2t5cGVNaW51czogJ1xcdUVGODInLFxuICAgICAgICAgICAgQ2xlYXJGaWx0ZXI6ICdcXHVFRjhGJyxcbiAgICAgICAgICAgIEZsb3c6ICdcXHVFRjkwJyxcbiAgICAgICAgICAgIFN0YXR1c0NpcmNsZUNoZWNrbWFyazogJ1xcdUYxM0UnLFxuICAgICAgICAgICAgTW9yZVZlcnRpY2FsOiAnXFx1RjJCQycsXG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZWdpc3Rlckljb25zKHN1YnNldCwgb3B0aW9ucyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mYWJyaWMtaWNvbnMuanMubWFwIiwiLy8gWW91ciB1c2Ugb2YgdGhlIGNvbnRlbnQgaW4gdGhlIGZpbGVzIHJlZmVyZW5jZWQgaGVyZSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgbGljZW5zZSBhdCBodHRwczovL2FrYS5tcy9mbHVlbnR1aS1hc3NldHMtbGljZW5zZVxuaW1wb3J0IHsgcmVnaXN0ZXJJY29ucyB9IGZyb20gJ0B1aWZhYnJpYy9zdHlsaW5nJztcbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplSWNvbnMoYmFzZVVybCwgb3B0aW9ucykge1xuICAgIGlmIChiYXNlVXJsID09PSB2b2lkIDApIHsgYmFzZVVybCA9ICcnOyB9XG4gICAgdmFyIHN1YnNldCA9IHtcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIE1vek9zeEZvbnRTbW9vdGhpbmc6ICdncmF5c2NhbGUnLFxuICAgICAgICAgICAgV2Via2l0Rm9udFNtb290aGluZzogJ2FudGlhbGlhc2VkJyxcbiAgICAgICAgICAgIGZvbnRTdHlsZTogJ25vcm1hbCcsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICAgICAgICAgIHNwZWFrOiAnbm9uZSdcbiAgICAgICAgfSxcbiAgICAgICAgZm9udEZhY2U6IHtcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IFwiXFxcIkZhYnJpY01ETDJJY29ucy0wXFxcIlwiLFxuICAgICAgICAgICAgc3JjOiBcInVybCgnXCIgKyBiYXNlVXJsICsgXCJmYWJyaWMtaWNvbnMtMC00NjdlZTI3Zi53b2ZmJykgZm9ybWF0KCd3b2ZmJylcIlxuICAgICAgICB9LFxuICAgICAgICBpY29uczoge1xuICAgICAgICAgICAgJ1BhZ2VMaW5rJzogJ1xcdUUzMDInLFxuICAgICAgICAgICAgJ0NvbW1lbnRTb2xpZCc6ICdcXHVFMzBFJyxcbiAgICAgICAgICAgICdDaGFuZ2VFbnRpdGxlbWVudHMnOiAnXFx1RTMxMCcsXG4gICAgICAgICAgICAnSW5zdGFsbGF0aW9uJzogJ1xcdUUzMTEnLFxuICAgICAgICAgICAgJ1dlYkFwcEJ1aWxkZXJNb2R1bGUnOiAnXFx1RTMxMycsXG4gICAgICAgICAgICAnV2ViQXBwQnVpbGRlckZyYWdtZW50JzogJ1xcdUUzMTQnLFxuICAgICAgICAgICAgJ1dlYkFwcEJ1aWxkZXJTbG90JzogJ1xcdUUzMTUnLFxuICAgICAgICAgICAgJ0J1bGxzZXllVGFyZ2V0RWRpdCc6ICdcXHVFMzE5JyxcbiAgICAgICAgICAgICdXZWJBcHBCdWlsZGVyRnJhZ21lbnRDcmVhdGUnOiAnXFx1RTMxQicsXG4gICAgICAgICAgICAnUGFnZURhdGEnOiAnXFx1RTMxQycsXG4gICAgICAgICAgICAnUGFnZUhlYWRlckVkaXQnOiAnXFx1RTMxRCcsXG4gICAgICAgICAgICAnUHJvZHVjdExpc3QnOiAnXFx1RTMxRScsXG4gICAgICAgICAgICAnVW5wdWJsaXNoQ29udGVudCc6ICdcXHVFMzFGJyxcbiAgICAgICAgICAgICdEZXBlbmRlbmN5QWRkJzogJ1xcdUUzNDQnLFxuICAgICAgICAgICAgJ0RlcGVuZGVuY3lSZW1vdmUnOiAnXFx1RTM0NScsXG4gICAgICAgICAgICAnRW50aXRsZW1lbnRQb2xpY3knOiAnXFx1RTM0NicsXG4gICAgICAgICAgICAnRW50aXRsZW1lbnRSZWRlbXB0aW9uJzogJ1xcdUUzNDcnLFxuICAgICAgICAgICAgJ1NjaG9vbERhdGFTeW5jTG9nbyc6ICdcXHVFMzRDJyxcbiAgICAgICAgICAgICdQaW5Tb2xpZDEyJzogJ1xcdUUzNTInLFxuICAgICAgICAgICAgJ1BpblNvbGlkT2ZmMTInOiAnXFx1RTM1MycsXG4gICAgICAgICAgICAnQWRkTGluayc6ICdcXHVFMzVFJyxcbiAgICAgICAgICAgICdTaGFyZXBvaW50QXBwSWNvbjE2JzogJ1xcdUUzNjUnLFxuICAgICAgICAgICAgJ0RhdGFmbG93c0xpbmsnOiAnXFx1RTM2NicsXG4gICAgICAgICAgICAnVGltZVBpY2tlcic6ICdcXHVFMzY3JyxcbiAgICAgICAgICAgICdVc2VyV2FybmluZyc6ICdcXHVFMzY4JyxcbiAgICAgICAgICAgICdDb21wbGlhbmNlQXVkaXQnOiAnXFx1RTM2OScsXG4gICAgICAgICAgICAnSW50ZXJuZXRTaGFyaW5nJzogJ1xcdUU3MDQnLFxuICAgICAgICAgICAgJ0JyaWdodG5lc3MnOiAnXFx1RTcwNicsXG4gICAgICAgICAgICAnTWFwUGluJzogJ1xcdUU3MDcnLFxuICAgICAgICAgICAgJ0FpcnBsYW5lJzogJ1xcdUU3MDknLFxuICAgICAgICAgICAgJ1RhYmxldCc6ICdcXHVFNzBBJyxcbiAgICAgICAgICAgICdRdWlja05vdGUnOiAnXFx1RTcwQicsXG4gICAgICAgICAgICAnVmlkZW8nOiAnXFx1RTcxNCcsXG4gICAgICAgICAgICAnUGVvcGxlJzogJ1xcdUU3MTYnLFxuICAgICAgICAgICAgJ1Bob25lJzogJ1xcdUU3MTcnLFxuICAgICAgICAgICAgJ1Bpbic6ICdcXHVFNzE4JyxcbiAgICAgICAgICAgICdTaG9wJzogJ1xcdUU3MTknLFxuICAgICAgICAgICAgJ1N0b3AnOiAnXFx1RTcxQScsXG4gICAgICAgICAgICAnTGluayc6ICdcXHVFNzFCJyxcbiAgICAgICAgICAgICdBbGxBcHBzJzogJ1xcdUU3MUQnLFxuICAgICAgICAgICAgJ1pvb20nOiAnXFx1RTcxRScsXG4gICAgICAgICAgICAnWm9vbU91dCc6ICdcXHVFNzFGJyxcbiAgICAgICAgICAgICdNaWNyb3Bob25lJzogJ1xcdUU3MjAnLFxuICAgICAgICAgICAgJ0NhbWVyYSc6ICdcXHVFNzIyJyxcbiAgICAgICAgICAgICdBdHRhY2gnOiAnXFx1RTcyMycsXG4gICAgICAgICAgICAnU2VuZCc6ICdcXHVFNzI0JyxcbiAgICAgICAgICAgICdGYXZvcml0ZUxpc3QnOiAnXFx1RTcyOCcsXG4gICAgICAgICAgICAnUGFnZVNvbGlkJzogJ1xcdUU3MjknLFxuICAgICAgICAgICAgJ0ZvcndhcmQnOiAnXFx1RTcyQScsXG4gICAgICAgICAgICAnQmFjayc6ICdcXHVFNzJCJyxcbiAgICAgICAgICAgICdSZWZyZXNoJzogJ1xcdUU3MkMnLFxuICAgICAgICAgICAgJ0xvY2snOiAnXFx1RTcyRScsXG4gICAgICAgICAgICAnUmVwb3J0SGFja2VkJzogJ1xcdUU3MzAnLFxuICAgICAgICAgICAgJ0VNSSc6ICdcXHVFNzMxJyxcbiAgICAgICAgICAgICdNaW5pTGluayc6ICdcXHVFNzMyJyxcbiAgICAgICAgICAgICdCbG9ja2VkJzogJ1xcdUU3MzMnLFxuICAgICAgICAgICAgJ1JlYWRpbmdNb2RlJzogJ1xcdUU3MzYnLFxuICAgICAgICAgICAgJ0Zhdmljb24nOiAnXFx1RTczNycsXG4gICAgICAgICAgICAnUmVtb3ZlJzogJ1xcdUU3MzgnLFxuICAgICAgICAgICAgJ0NoZWNrYm94JzogJ1xcdUU3MzknLFxuICAgICAgICAgICAgJ0NoZWNrYm94Q29tcG9zaXRlJzogJ1xcdUU3M0EnLFxuICAgICAgICAgICAgJ0NoZWNrYm94RmlsbCc6ICdcXHVFNzNCJyxcbiAgICAgICAgICAgICdDaGVja2JveEluZGV0ZXJtaW5hdGUnOiAnXFx1RTczQycsXG4gICAgICAgICAgICAnQ2hlY2tib3hDb21wb3NpdGVSZXZlcnNlZCc6ICdcXHVFNzNEJyxcbiAgICAgICAgICAgICdCYWNrVG9XaW5kb3cnOiAnXFx1RTczRicsXG4gICAgICAgICAgICAnRnVsbFNjcmVlbic6ICdcXHVFNzQwJyxcbiAgICAgICAgICAgICdQcmludCc6ICdcXHVFNzQ5JyxcbiAgICAgICAgICAgICdVcCc6ICdcXHVFNzRBJyxcbiAgICAgICAgICAgICdEb3duJzogJ1xcdUU3NEInLFxuICAgICAgICAgICAgJ09FTSc6ICdcXHVFNzRDJyxcbiAgICAgICAgICAgICdTYXZlJzogJ1xcdUU3NEUnLFxuICAgICAgICAgICAgJ1JldHVybktleSc6ICdcXHVFNzUxJyxcbiAgICAgICAgICAgICdDbG91ZCc6ICdcXHVFNzUzJyxcbiAgICAgICAgICAgICdGbGFzaGxpZ2h0JzogJ1xcdUU3NTQnLFxuICAgICAgICAgICAgJ0NvbW1hbmRQcm9tcHQnOiAnXFx1RTc1NicsXG4gICAgICAgICAgICAnU2FkJzogJ1xcdUU3NTcnLFxuICAgICAgICAgICAgJ1JlYWxFc3RhdGUnOiAnXFx1RTc1OCcsXG4gICAgICAgICAgICAnU0lQTW92ZSc6ICdcXHVFNzU5JyxcbiAgICAgICAgICAgICdFcmFzZVRvb2wnOiAnXFx1RTc1QycsXG4gICAgICAgICAgICAnR3JpcHBlclRvb2wnOiAnXFx1RTc1RScsXG4gICAgICAgICAgICAnRGlhbHBhZCc6ICdcXHVFNzVGJyxcbiAgICAgICAgICAgICdQYWdlTGVmdCc6ICdcXHVFNzYwJyxcbiAgICAgICAgICAgICdQYWdlUmlnaHQnOiAnXFx1RTc2MScsXG4gICAgICAgICAgICAnTXVsdGlTZWxlY3QnOiAnXFx1RTc2MicsXG4gICAgICAgICAgICAnS2V5Ym9hcmRDbGFzc2ljJzogJ1xcdUU3NjUnLFxuICAgICAgICAgICAgJ1BsYXknOiAnXFx1RTc2OCcsXG4gICAgICAgICAgICAnUGF1c2UnOiAnXFx1RTc2OScsXG4gICAgICAgICAgICAnSW5raW5nVG9vbCc6ICdcXHVFNzZEJyxcbiAgICAgICAgICAgICdFbW9qaTInOiAnXFx1RTc2RScsXG4gICAgICAgICAgICAnR3JpcHBlckJhckhvcml6b250YWwnOiAnXFx1RTc2RicsXG4gICAgICAgICAgICAnU3lzdGVtJzogJ1xcdUU3NzAnLFxuICAgICAgICAgICAgJ1BlcnNvbmFsaXplJzogJ1xcdUU3NzEnLFxuICAgICAgICAgICAgJ1NlYXJjaEFuZEFwcHMnOiAnXFx1RTc3MycsXG4gICAgICAgICAgICAnR2xvYmUnOiAnXFx1RTc3NCcsXG4gICAgICAgICAgICAnRWFzZU9mQWNjZXNzJzogJ1xcdUU3NzYnLFxuICAgICAgICAgICAgJ0NvbnRhY3RJbmZvJzogJ1xcdUU3NzknLFxuICAgICAgICAgICAgJ1VucGluJzogJ1xcdUU3N0EnLFxuICAgICAgICAgICAgJ0NvbnRhY3QnOiAnXFx1RTc3QicsXG4gICAgICAgICAgICAnTWVtbyc6ICdcXHVFNzdDJyxcbiAgICAgICAgICAgICdJbmNvbWluZ0NhbGwnOiAnXFx1RTc3RSdcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmVnaXN0ZXJJY29ucyhzdWJzZXQsIG9wdGlvbnMpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmFicmljLWljb25zLTAuanMubWFwIiwiLy8gWW91ciB1c2Ugb2YgdGhlIGNvbnRlbnQgaW4gdGhlIGZpbGVzIHJlZmVyZW5jZWQgaGVyZSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgbGljZW5zZSBhdCBodHRwczovL2FrYS5tcy9mbHVlbnR1aS1hc3NldHMtbGljZW5zZVxuaW1wb3J0IHsgcmVnaXN0ZXJJY29ucyB9IGZyb20gJ0B1aWZhYnJpYy9zdHlsaW5nJztcbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplSWNvbnMoYmFzZVVybCwgb3B0aW9ucykge1xuICAgIGlmIChiYXNlVXJsID09PSB2b2lkIDApIHsgYmFzZVVybCA9ICcnOyB9XG4gICAgdmFyIHN1YnNldCA9IHtcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIE1vek9zeEZvbnRTbW9vdGhpbmc6ICdncmF5c2NhbGUnLFxuICAgICAgICAgICAgV2Via2l0Rm9udFNtb290aGluZzogJ2FudGlhbGlhc2VkJyxcbiAgICAgICAgICAgIGZvbnRTdHlsZTogJ25vcm1hbCcsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICAgICAgICAgIHNwZWFrOiAnbm9uZSdcbiAgICAgICAgfSxcbiAgICAgICAgZm9udEZhY2U6IHtcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IFwiXFxcIkZhYnJpY01ETDJJY29ucy0xXFxcIlwiLFxuICAgICAgICAgICAgc3JjOiBcInVybCgnXCIgKyBiYXNlVXJsICsgXCJmYWJyaWMtaWNvbnMtMS00ZDUyMTY5NS53b2ZmJykgZm9ybWF0KCd3b2ZmJylcIlxuICAgICAgICB9LFxuICAgICAgICBpY29uczoge1xuICAgICAgICAgICAgJ1Bhc3RlJzogJ1xcdUU3N0YnLFxuICAgICAgICAgICAgJ1dpbmRvd3NMb2dvJzogJ1xcdUU3ODInLFxuICAgICAgICAgICAgJ0Vycm9yJzogJ1xcdUU3ODMnLFxuICAgICAgICAgICAgJ0dyaXBwZXJCYXJWZXJ0aWNhbCc6ICdcXHVFNzg0JyxcbiAgICAgICAgICAgICdVbmxvY2snOiAnXFx1RTc4NScsXG4gICAgICAgICAgICAnU2xpZGVzaG93JzogJ1xcdUU3ODYnLFxuICAgICAgICAgICAgJ1RyaW0nOiAnXFx1RTc4QScsXG4gICAgICAgICAgICAnQXV0b0VuaGFuY2VPbic6ICdcXHVFNzhEJyxcbiAgICAgICAgICAgICdBdXRvRW5oYW5jZU9mZic6ICdcXHVFNzhFJyxcbiAgICAgICAgICAgICdDb2xvcic6ICdcXHVFNzkwJyxcbiAgICAgICAgICAgICdTYXZlQXMnOiAnXFx1RTc5MicsXG4gICAgICAgICAgICAnTGlnaHQnOiAnXFx1RTc5MycsXG4gICAgICAgICAgICAnRmlsdGVycyc6ICdcXHVFNzk1JyxcbiAgICAgICAgICAgICdBc3BlY3RSYXRpbyc6ICdcXHVFNzk5JyxcbiAgICAgICAgICAgICdDb250cmFzdCc6ICdcXHVFN0ExJyxcbiAgICAgICAgICAgICdSZWRvJzogJ1xcdUU3QTYnLFxuICAgICAgICAgICAgJ0Nyb3AnOiAnXFx1RTdBOCcsXG4gICAgICAgICAgICAnUGhvdG9Db2xsZWN0aW9uJzogJ1xcdUU3QUEnLFxuICAgICAgICAgICAgJ0FsYnVtJzogJ1xcdUU3QUInLFxuICAgICAgICAgICAgJ1JvdGF0ZSc6ICdcXHVFN0FEJyxcbiAgICAgICAgICAgICdQYW5vSW5kaWNhdG9yJzogJ1xcdUU3QjAnLFxuICAgICAgICAgICAgJ1RyYW5zbGF0ZSc6ICdcXHVFN0IyJyxcbiAgICAgICAgICAgICdSZWRFeWUnOiAnXFx1RTdCMycsXG4gICAgICAgICAgICAnVmlld09yaWdpbmFsJzogJ1xcdUU3QjQnLFxuICAgICAgICAgICAgJ1RodW1ibmFpbFZpZXcnOiAnXFx1RTdCNicsXG4gICAgICAgICAgICAnUGFja2FnZSc6ICdcXHVFN0I4JyxcbiAgICAgICAgICAgICdUZWxlbWFya2V0ZXInOiAnXFx1RTdCOScsXG4gICAgICAgICAgICAnV2FybmluZyc6ICdcXHVFN0JBJyxcbiAgICAgICAgICAgICdGaW5hbmNpYWwnOiAnXFx1RTdCQicsXG4gICAgICAgICAgICAnRWR1Y2F0aW9uJzogJ1xcdUU3QkUnLFxuICAgICAgICAgICAgJ1Nob3BwaW5nQ2FydCc6ICdcXHVFN0JGJyxcbiAgICAgICAgICAgICdUcmFpbic6ICdcXHVFN0MwJyxcbiAgICAgICAgICAgICdNb3ZlJzogJ1xcdUU3QzInLFxuICAgICAgICAgICAgJ1RvdWNoUG9pbnRlcic6ICdcXHVFN0M5JyxcbiAgICAgICAgICAgICdNZXJnZSc6ICdcXHVFN0Q1JyxcbiAgICAgICAgICAgICdUdXJuUmlnaHQnOiAnXFx1RTdEQicsXG4gICAgICAgICAgICAnRmVycnknOiAnXFx1RTdFMycsXG4gICAgICAgICAgICAnSGlnaGxpZ2h0JzogJ1xcdUU3RTYnLFxuICAgICAgICAgICAgJ1Bvd2VyQnV0dG9uJzogJ1xcdUU3RTgnLFxuICAgICAgICAgICAgJ1RhYic6ICdcXHVFN0U5JyxcbiAgICAgICAgICAgICdBZG1pbic6ICdcXHVFN0VGJyxcbiAgICAgICAgICAgICdUVk1vbml0b3InOiAnXFx1RTdGNCcsXG4gICAgICAgICAgICAnU3BlYWtlcnMnOiAnXFx1RTdGNScsXG4gICAgICAgICAgICAnR2FtZSc6ICdcXHVFN0ZDJyxcbiAgICAgICAgICAgICdIb3Jpem9udGFsVGFiS2V5JzogJ1xcdUU3RkQnLFxuICAgICAgICAgICAgJ1Vuc3RhY2tTZWxlY3RlZCc6ICdcXHVFN0ZFJyxcbiAgICAgICAgICAgICdTdGFja0luZGljYXRvcic6ICdcXHVFN0ZGJyxcbiAgICAgICAgICAgICdOYXYyRE1hcFZpZXcnOiAnXFx1RTgwMCcsXG4gICAgICAgICAgICAnU3RyZWV0c2lkZVNwbGl0TWluaW1pemUnOiAnXFx1RTgwMicsXG4gICAgICAgICAgICAnQ2FyJzogJ1xcdUU4MDQnLFxuICAgICAgICAgICAgJ0J1cyc6ICdcXHVFODA2JyxcbiAgICAgICAgICAgICdFYXREcmluayc6ICdcXHVFODA3JyxcbiAgICAgICAgICAgICdTZWVEbyc6ICdcXHVFODA4JyxcbiAgICAgICAgICAgICdMb2NhdGlvbkNpcmNsZSc6ICdcXHVFODBFJyxcbiAgICAgICAgICAgICdIb21lJzogJ1xcdUU4MEYnLFxuICAgICAgICAgICAgJ1N3aXRjaGVyU3RhcnRFbmQnOiAnXFx1RTgxMCcsXG4gICAgICAgICAgICAnUGFya2luZ0xvY2F0aW9uJzogJ1xcdUU4MTEnLFxuICAgICAgICAgICAgJ0luY2lkZW50VHJpYW5nbGUnOiAnXFx1RTgxNCcsXG4gICAgICAgICAgICAnVG91Y2gnOiAnXFx1RTgxNScsXG4gICAgICAgICAgICAnTWFwRGlyZWN0aW9ucyc6ICdcXHVFODE2JyxcbiAgICAgICAgICAgICdDYXJldEhvbGxvdyc6ICdcXHVFODE3JyxcbiAgICAgICAgICAgICdDYXJldFNvbGlkJzogJ1xcdUU4MTgnLFxuICAgICAgICAgICAgJ0hpc3RvcnknOiAnXFx1RTgxQycsXG4gICAgICAgICAgICAnTG9jYXRpb24nOiAnXFx1RTgxRCcsXG4gICAgICAgICAgICAnTWFwTGF5ZXJzJzogJ1xcdUU4MUUnLFxuICAgICAgICAgICAgJ1NlYXJjaE5lYXJieSc6ICdcXHVFODIwJyxcbiAgICAgICAgICAgICdXb3JrJzogJ1xcdUU4MjEnLFxuICAgICAgICAgICAgJ1JlY2VudCc6ICdcXHVFODIzJyxcbiAgICAgICAgICAgICdIb3RlbCc6ICdcXHVFODI0JyxcbiAgICAgICAgICAgICdCYW5rJzogJ1xcdUU4MjUnLFxuICAgICAgICAgICAgJ0xvY2F0aW9uRG90JzogJ1xcdUU4MjcnLFxuICAgICAgICAgICAgJ0RpY3Rpb25hcnknOiAnXFx1RTgyRCcsXG4gICAgICAgICAgICAnQ2hyb21lQmFjayc6ICdcXHVFODMwJyxcbiAgICAgICAgICAgICdGb2xkZXJPcGVuJzogJ1xcdUU4MzgnLFxuICAgICAgICAgICAgJ1Bpbm5lZEZpbGwnOiAnXFx1RTg0MicsXG4gICAgICAgICAgICAnUmV2VG9nZ2xlS2V5JzogJ1xcdUU4NDUnLFxuICAgICAgICAgICAgJ1VTQic6ICdcXHVFODhFJyxcbiAgICAgICAgICAgICdQcmV2aW91cyc6ICdcXHVFODkyJyxcbiAgICAgICAgICAgICdOZXh0JzogJ1xcdUU4OTMnLFxuICAgICAgICAgICAgJ1N5bmMnOiAnXFx1RTg5NScsXG4gICAgICAgICAgICAnSGVscCc6ICdcXHVFODk3JyxcbiAgICAgICAgICAgICdFbW9qaSc6ICdcXHVFODk5JyxcbiAgICAgICAgICAgICdNYWlsRm9yd2FyZCc6ICdcXHVFODlDJyxcbiAgICAgICAgICAgICdDbG9zZVBhbmUnOiAnXFx1RTg5RicsXG4gICAgICAgICAgICAnT3BlblBhbmUnOiAnXFx1RThBMCcsXG4gICAgICAgICAgICAnUHJldmlld0xpbmsnOiAnXFx1RThBMScsXG4gICAgICAgICAgICAnWm9vbUluJzogJ1xcdUU4QTMnLFxuICAgICAgICAgICAgJ0Jvb2ttYXJrcyc6ICdcXHVFOEE0JyxcbiAgICAgICAgICAgICdEb2N1bWVudCc6ICdcXHVFOEE1JyxcbiAgICAgICAgICAgICdQcm90ZWN0ZWREb2N1bWVudCc6ICdcXHVFOEE2JyxcbiAgICAgICAgICAgICdPcGVuSW5OZXdXaW5kb3cnOiAnXFx1RThBNycsXG4gICAgICAgICAgICAnTWFpbEZpbGwnOiAnXFx1RThBOCcsXG4gICAgICAgICAgICAnVmlld0FsbCc6ICdcXHVFOEE5JyxcbiAgICAgICAgICAgICdTd2l0Y2gnOiAnXFx1RThBQicsXG4gICAgICAgICAgICAnUmVuYW1lJzogJ1xcdUU4QUMnLFxuICAgICAgICAgICAgJ0dvJzogJ1xcdUU4QUQnLFxuICAgICAgICAgICAgJ1JlbW90ZSc6ICdcXHVFOEFGJyxcbiAgICAgICAgICAgICdTZWxlY3RBbGwnOiAnXFx1RThCMycsXG4gICAgICAgICAgICAnT3JpZW50YXRpb24nOiAnXFx1RThCNCcsXG4gICAgICAgICAgICAnSW1wb3J0JzogJ1xcdUU4QjUnXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJlZ2lzdGVySWNvbnMoc3Vic2V0LCBvcHRpb25zKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZhYnJpYy1pY29ucy0xLmpzLm1hcCIsIi8vIFlvdXIgdXNlIG9mIHRoZSBjb250ZW50IGluIHRoZSBmaWxlcyByZWZlcmVuY2VkIGhlcmUgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIGxpY2Vuc2UgYXQgaHR0cHM6Ly9ha2EubXMvZmx1ZW50dWktYXNzZXRzLWxpY2Vuc2VcbmltcG9ydCB7IHJlZ2lzdGVySWNvbnMgfSBmcm9tICdAdWlmYWJyaWMvc3R5bGluZyc7XG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUljb25zKGJhc2VVcmwsIG9wdGlvbnMpIHtcbiAgICBpZiAoYmFzZVVybCA9PT0gdm9pZCAwKSB7IGJhc2VVcmwgPSAnJzsgfVxuICAgIHZhciBzdWJzZXQgPSB7XG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBNb3pPc3hGb250U21vb3RoaW5nOiAnZ3JheXNjYWxlJyxcbiAgICAgICAgICAgIFdlYmtpdEZvbnRTbW9vdGhpbmc6ICdhbnRpYWxpYXNlZCcsXG4gICAgICAgICAgICBmb250U3R5bGU6ICdub3JtYWwnLFxuICAgICAgICAgICAgZm9udFdlaWdodDogJ25vcm1hbCcsXG4gICAgICAgICAgICBzcGVhazogJ25vbmUnXG4gICAgICAgIH0sXG4gICAgICAgIGZvbnRGYWNlOiB7XG4gICAgICAgICAgICBmb250RmFtaWx5OiBcIlxcXCJGYWJyaWNNREwySWNvbnMtMlxcXCJcIixcbiAgICAgICAgICAgIHNyYzogXCJ1cmwoJ1wiICsgYmFzZVVybCArIFwiZmFicmljLWljb25zLTItNjNjOTlhYmYud29mZicpIGZvcm1hdCgnd29mZicpXCJcbiAgICAgICAgfSxcbiAgICAgICAgaWNvbnM6IHtcbiAgICAgICAgICAgICdQaWN0dXJlJzogJ1xcdUU4QjknLFxuICAgICAgICAgICAgJ0Nocm9tZUNsb3NlJzogJ1xcdUU4QkInLFxuICAgICAgICAgICAgJ1Nob3dSZXN1bHRzJzogJ1xcdUU4QkMnLFxuICAgICAgICAgICAgJ01lc3NhZ2UnOiAnXFx1RThCRCcsXG4gICAgICAgICAgICAnQ2FsZW5kYXJEYXknOiAnXFx1RThCRicsXG4gICAgICAgICAgICAnQ2FsZW5kYXJXZWVrJzogJ1xcdUU4QzAnLFxuICAgICAgICAgICAgJ01haWxSZXBseUFsbCc6ICdcXHVFOEMyJyxcbiAgICAgICAgICAgICdSZWFkJzogJ1xcdUU4QzMnLFxuICAgICAgICAgICAgJ0N1dCc6ICdcXHVFOEM2JyxcbiAgICAgICAgICAgICdQYXltZW50Q2FyZCc6ICdcXHVFOEM3JyxcbiAgICAgICAgICAgICdDb3B5JzogJ1xcdUU4QzgnLFxuICAgICAgICAgICAgJ0ltcG9ydGFudCc6ICdcXHVFOEM5JyxcbiAgICAgICAgICAgICdNYWlsUmVwbHknOiAnXFx1RThDQScsXG4gICAgICAgICAgICAnR290b1RvZGF5JzogJ1xcdUU4RDEnLFxuICAgICAgICAgICAgJ0ZvbnQnOiAnXFx1RThEMicsXG4gICAgICAgICAgICAnRm9udENvbG9yJzogJ1xcdUU4RDMnLFxuICAgICAgICAgICAgJ0ZvbGRlckZpbGwnOiAnXFx1RThENScsXG4gICAgICAgICAgICAnUGVybWlzc2lvbnMnOiAnXFx1RThENycsXG4gICAgICAgICAgICAnRGlzYWJsZVVwZGF0ZXMnOiAnXFx1RThEOCcsXG4gICAgICAgICAgICAnVW5mYXZvcml0ZSc6ICdcXHVFOEQ5JyxcbiAgICAgICAgICAgICdJdGFsaWMnOiAnXFx1RThEQicsXG4gICAgICAgICAgICAnVW5kZXJsaW5lJzogJ1xcdUU4REMnLFxuICAgICAgICAgICAgJ0JvbGQnOiAnXFx1RThERCcsXG4gICAgICAgICAgICAnTW92ZVRvRm9sZGVyJzogJ1xcdUU4REUnLFxuICAgICAgICAgICAgJ0Rpc2xpa2UnOiAnXFx1RThFMCcsXG4gICAgICAgICAgICAnTGlrZSc6ICdcXHVFOEUxJyxcbiAgICAgICAgICAgICdBbGlnbkNlbnRlcic6ICdcXHVFOEUzJyxcbiAgICAgICAgICAgICdPcGVuRmlsZSc6ICdcXHVFOEU1JyxcbiAgICAgICAgICAgICdDbGVhclNlbGVjdGlvbic6ICdcXHVFOEU2JyxcbiAgICAgICAgICAgICdGb250RGVjcmVhc2UnOiAnXFx1RThFNycsXG4gICAgICAgICAgICAnRm9udEluY3JlYXNlJzogJ1xcdUU4RTgnLFxuICAgICAgICAgICAgJ0ZvbnRTaXplJzogJ1xcdUU4RTknLFxuICAgICAgICAgICAgJ0NlbGxQaG9uZSc6ICdcXHVFOEVBJyxcbiAgICAgICAgICAgICdSZXBlYXRPbmUnOiAnXFx1RThFRCcsXG4gICAgICAgICAgICAnUmVwZWF0QWxsJzogJ1xcdUU4RUUnLFxuICAgICAgICAgICAgJ0NhbGN1bGF0b3InOiAnXFx1RThFRicsXG4gICAgICAgICAgICAnTGlicmFyeSc6ICdcXHVFOEYxJyxcbiAgICAgICAgICAgICdQb3N0VXBkYXRlJzogJ1xcdUU4RjMnLFxuICAgICAgICAgICAgJ05ld0ZvbGRlcic6ICdcXHVFOEY0JyxcbiAgICAgICAgICAgICdDYWxlbmRhclJlcGx5JzogJ1xcdUU4RjUnLFxuICAgICAgICAgICAgJ1Vuc3luY0ZvbGRlcic6ICdcXHVFOEY2JyxcbiAgICAgICAgICAgICdTeW5jRm9sZGVyJzogJ1xcdUU4RjcnLFxuICAgICAgICAgICAgJ0Jsb2NrQ29udGFjdCc6ICdcXHVFOEY4JyxcbiAgICAgICAgICAgICdBY2NlcHQnOiAnXFx1RThGQicsXG4gICAgICAgICAgICAnQnVsbGV0ZWRMaXN0JzogJ1xcdUU4RkQnLFxuICAgICAgICAgICAgJ1ByZXZpZXcnOiAnXFx1RThGRicsXG4gICAgICAgICAgICAnTmV3cyc6ICdcXHVFOTAwJyxcbiAgICAgICAgICAgICdDaGF0JzogJ1xcdUU5MDEnLFxuICAgICAgICAgICAgJ0dyb3VwJzogJ1xcdUU5MDInLFxuICAgICAgICAgICAgJ1dvcmxkJzogJ1xcdUU5MDknLFxuICAgICAgICAgICAgJ0NvbW1lbnQnOiAnXFx1RTkwQScsXG4gICAgICAgICAgICAnRG9ja0xlZnQnOiAnXFx1RTkwQycsXG4gICAgICAgICAgICAnRG9ja1JpZ2h0JzogJ1xcdUU5MEQnLFxuICAgICAgICAgICAgJ1JlcGFpcic6ICdcXHVFOTBGJyxcbiAgICAgICAgICAgICdBY2NvdW50cyc6ICdcXHVFOTEwJyxcbiAgICAgICAgICAgICdTdHJlZXQnOiAnXFx1RTkxMycsXG4gICAgICAgICAgICAnUmFkaW9CdWxsZXQnOiAnXFx1RTkxNScsXG4gICAgICAgICAgICAnU3RvcHdhdGNoJzogJ1xcdUU5MTYnLFxuICAgICAgICAgICAgJ0Nsb2NrJzogJ1xcdUU5MTcnLFxuICAgICAgICAgICAgJ1dvcmxkQ2xvY2snOiAnXFx1RTkxOCcsXG4gICAgICAgICAgICAnQWxhcm1DbG9jayc6ICdcXHVFOTE5JyxcbiAgICAgICAgICAgICdQaG90byc6ICdcXHVFOTFCJyxcbiAgICAgICAgICAgICdBY3Rpb25DZW50ZXInOiAnXFx1RTkxQycsXG4gICAgICAgICAgICAnSG9zcGl0YWwnOiAnXFx1RTkxRCcsXG4gICAgICAgICAgICAnVGltZXInOiAnXFx1RTkxRScsXG4gICAgICAgICAgICAnRnVsbENpcmNsZU1hc2snOiAnXFx1RTkxRicsXG4gICAgICAgICAgICAnTG9jYXRpb25GaWxsJzogJ1xcdUU5MjAnLFxuICAgICAgICAgICAgJ0Nocm9tZU1pbmltaXplJzogJ1xcdUU5MjEnLFxuICAgICAgICAgICAgJ0Nocm9tZVJlc3RvcmUnOiAnXFx1RTkyMycsXG4gICAgICAgICAgICAnQW5ub3RhdGlvbic6ICdcXHVFOTI0JyxcbiAgICAgICAgICAgICdGaW5nZXJwcmludCc6ICdcXHVFOTI4JyxcbiAgICAgICAgICAgICdIYW5kd3JpdGluZyc6ICdcXHVFOTI5JyxcbiAgICAgICAgICAgICdDaHJvbWVGdWxsU2NyZWVuJzogJ1xcdUU5MkQnLFxuICAgICAgICAgICAgJ0NvbXBsZXRlZCc6ICdcXHVFOTMwJyxcbiAgICAgICAgICAgICdMYWJlbCc6ICdcXHVFOTMyJyxcbiAgICAgICAgICAgICdGbGlja0Rvd24nOiAnXFx1RTkzNScsXG4gICAgICAgICAgICAnRmxpY2tVcCc6ICdcXHVFOTM2JyxcbiAgICAgICAgICAgICdGbGlja0xlZnQnOiAnXFx1RTkzNycsXG4gICAgICAgICAgICAnRmxpY2tSaWdodCc6ICdcXHVFOTM4JyxcbiAgICAgICAgICAgICdNaW5pRXhwYW5kJzogJ1xcdUU5M0EnLFxuICAgICAgICAgICAgJ01pbmlDb250cmFjdCc6ICdcXHVFOTNCJyxcbiAgICAgICAgICAgICdTdHJlYW1pbmcnOiAnXFx1RTkzRScsXG4gICAgICAgICAgICAnTXVzaWNJbkNvbGxlY3Rpb24nOiAnXFx1RTk0MCcsXG4gICAgICAgICAgICAnT25lRHJpdmVMb2dvJzogJ1xcdUU5NDEnLFxuICAgICAgICAgICAgJ0NvbXBhc3NOVyc6ICdcXHVFOTQyJyxcbiAgICAgICAgICAgICdDb2RlJzogJ1xcdUU5NDMnLFxuICAgICAgICAgICAgJ0xpZ2h0bmluZ0JvbHQnOiAnXFx1RTk0NScsXG4gICAgICAgICAgICAnQ2FsY3VsYXRvck11bHRpcGx5JzogJ1xcdUU5NDcnLFxuICAgICAgICAgICAgJ0NhbGN1bGF0b3JBZGRpdGlvbic6ICdcXHVFOTQ4JyxcbiAgICAgICAgICAgICdDYWxjdWxhdG9yU3VidHJhY3QnOiAnXFx1RTk0OScsXG4gICAgICAgICAgICAnQ2FsY3VsYXRvclBlcmNlbnRhZ2UnOiAnXFx1RTk0QycsXG4gICAgICAgICAgICAnQ2FsY3VsYXRvckVxdWFsVG8nOiAnXFx1RTk0RScsXG4gICAgICAgICAgICAnUHJpbnRmYXhQcmludGVyRmlsZSc6ICdcXHVFOTU2JyxcbiAgICAgICAgICAgICdTdG9yYWdlT3B0aWNhbCc6ICdcXHVFOTU4JyxcbiAgICAgICAgICAgICdDb21tdW5pY2F0aW9ucyc6ICdcXHVFOTVBJyxcbiAgICAgICAgICAgICdIZWFkc2V0JzogJ1xcdUU5NUInLFxuICAgICAgICAgICAgJ0hlYWx0aCc6ICdcXHVFOTVFJyxcbiAgICAgICAgICAgICdXZWJjYW0yJzogJ1xcdUU5NjAnLFxuICAgICAgICAgICAgJ0Zyb250Q2FtZXJhJzogJ1xcdUU5NkInLFxuICAgICAgICAgICAgJ0NoZXZyb25VcFNtYWxsJzogJ1xcdUU5NkQnXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJlZ2lzdGVySWNvbnMoc3Vic2V0LCBvcHRpb25zKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZhYnJpYy1pY29ucy0yLmpzLm1hcCIsIi8vIFlvdXIgdXNlIG9mIHRoZSBjb250ZW50IGluIHRoZSBmaWxlcyByZWZlcmVuY2VkIGhlcmUgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIGxpY2Vuc2UgYXQgaHR0cHM6Ly9ha2EubXMvZmx1ZW50dWktYXNzZXRzLWxpY2Vuc2VcbmltcG9ydCB7IHJlZ2lzdGVySWNvbnMgfSBmcm9tICdAdWlmYWJyaWMvc3R5bGluZyc7XG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUljb25zKGJhc2VVcmwsIG9wdGlvbnMpIHtcbiAgICBpZiAoYmFzZVVybCA9PT0gdm9pZCAwKSB7IGJhc2VVcmwgPSAnJzsgfVxuICAgIHZhciBzdWJzZXQgPSB7XG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBNb3pPc3hGb250U21vb3RoaW5nOiAnZ3JheXNjYWxlJyxcbiAgICAgICAgICAgIFdlYmtpdEZvbnRTbW9vdGhpbmc6ICdhbnRpYWxpYXNlZCcsXG4gICAgICAgICAgICBmb250U3R5bGU6ICdub3JtYWwnLFxuICAgICAgICAgICAgZm9udFdlaWdodDogJ25vcm1hbCcsXG4gICAgICAgICAgICBzcGVhazogJ25vbmUnXG4gICAgICAgIH0sXG4gICAgICAgIGZvbnRGYWNlOiB7XG4gICAgICAgICAgICBmb250RmFtaWx5OiBcIlxcXCJGYWJyaWNNREwySWNvbnMtM1xcXCJcIixcbiAgICAgICAgICAgIHNyYzogXCJ1cmwoJ1wiICsgYmFzZVVybCArIFwiZmFicmljLWljb25zLTMtMDg5ZTIxN2Eud29mZicpIGZvcm1hdCgnd29mZicpXCJcbiAgICAgICAgfSxcbiAgICAgICAgaWNvbnM6IHtcbiAgICAgICAgICAgICdDaGV2cm9uRG93blNtYWxsJzogJ1xcdUU5NkUnLFxuICAgICAgICAgICAgJ0NoZXZyb25MZWZ0U21hbGwnOiAnXFx1RTk2RicsXG4gICAgICAgICAgICAnQ2hldnJvblJpZ2h0U21hbGwnOiAnXFx1RTk3MCcsXG4gICAgICAgICAgICAnQ2hldnJvblVwTWVkJzogJ1xcdUU5NzEnLFxuICAgICAgICAgICAgJ0NoZXZyb25Eb3duTWVkJzogJ1xcdUU5NzInLFxuICAgICAgICAgICAgJ0NoZXZyb25MZWZ0TWVkJzogJ1xcdUU5NzMnLFxuICAgICAgICAgICAgJ0NoZXZyb25SaWdodE1lZCc6ICdcXHVFOTc0JyxcbiAgICAgICAgICAgICdEZXZpY2VzMic6ICdcXHVFOTc1JyxcbiAgICAgICAgICAgICdQQzEnOiAnXFx1RTk3NycsXG4gICAgICAgICAgICAnUHJlc2VuY2VDaGlja2xldFZpZGVvJzogJ1xcdUU5NzknLFxuICAgICAgICAgICAgJ1JlcGx5JzogJ1xcdUU5N0EnLFxuICAgICAgICAgICAgJ0hhbGZBbHBoYSc6ICdcXHVFOTdFJyxcbiAgICAgICAgICAgICdDb25zdHJ1Y3Rpb25Db25lJzogJ1xcdUU5OEYnLFxuICAgICAgICAgICAgJ0RvdWJsZUNoZXZyb25MZWZ0TWVkJzogJ1xcdUU5OTEnLFxuICAgICAgICAgICAgJ1ZvbHVtZTAnOiAnXFx1RTk5MicsXG4gICAgICAgICAgICAnVm9sdW1lMSc6ICdcXHVFOTkzJyxcbiAgICAgICAgICAgICdWb2x1bWUyJzogJ1xcdUU5OTQnLFxuICAgICAgICAgICAgJ1ZvbHVtZTMnOiAnXFx1RTk5NScsXG4gICAgICAgICAgICAnQ2hhcnQnOiAnXFx1RTk5OScsXG4gICAgICAgICAgICAnUm9ib3QnOiAnXFx1RTk5QScsXG4gICAgICAgICAgICAnTWFudWZhY3R1cmluZyc6ICdcXHVFOTlDJyxcbiAgICAgICAgICAgICdMb2NrU29saWQnOiAnXFx1RTlBMicsXG4gICAgICAgICAgICAnRml0UGFnZSc6ICdcXHVFOUE2JyxcbiAgICAgICAgICAgICdGaXRXaWR0aCc6ICdcXHVFOUE3JyxcbiAgICAgICAgICAgICdCaWRpTHRyJzogJ1xcdUU5QUEnLFxuICAgICAgICAgICAgJ0JpZGlSdGwnOiAnXFx1RTlBQicsXG4gICAgICAgICAgICAnUmlnaHREb3VibGVRdW90ZSc6ICdcXHVFOUIxJyxcbiAgICAgICAgICAgICdTdW5ueSc6ICdcXHVFOUJEJyxcbiAgICAgICAgICAgICdDbG91ZFdlYXRoZXInOiAnXFx1RTlCRScsXG4gICAgICAgICAgICAnQ2xvdWR5JzogJ1xcdUU5QkYnLFxuICAgICAgICAgICAgJ1BhcnRseUNsb3VkeURheSc6ICdcXHVFOUMwJyxcbiAgICAgICAgICAgICdQYXJ0bHlDbG91ZHlOaWdodCc6ICdcXHVFOUMxJyxcbiAgICAgICAgICAgICdDbGVhck5pZ2h0JzogJ1xcdUU5QzInLFxuICAgICAgICAgICAgJ1JhaW5TaG93ZXJzRGF5JzogJ1xcdUU5QzMnLFxuICAgICAgICAgICAgJ1JhaW4nOiAnXFx1RTlDNCcsXG4gICAgICAgICAgICAnVGh1bmRlcnN0b3Jtcyc6ICdcXHVFOUM2JyxcbiAgICAgICAgICAgICdSYWluU25vdyc6ICdcXHVFOUM3JyxcbiAgICAgICAgICAgICdTbm93JzogJ1xcdUU5QzgnLFxuICAgICAgICAgICAgJ0Jsb3dpbmdTbm93JzogJ1xcdUU5QzknLFxuICAgICAgICAgICAgJ0ZyaWdpZCc6ICdcXHVFOUNBJyxcbiAgICAgICAgICAgICdGb2cnOiAnXFx1RTlDQicsXG4gICAgICAgICAgICAnU3F1YWxscyc6ICdcXHVFOUNDJyxcbiAgICAgICAgICAgICdEdXN0c3Rvcm0nOiAnXFx1RTlDRCcsXG4gICAgICAgICAgICAnVW5rbm93bic6ICdcXHVFOUNFJyxcbiAgICAgICAgICAgICdQcmVjaXBpdGF0aW9uJzogJ1xcdUU5Q0YnLFxuICAgICAgICAgICAgJ1JpYmJvbic6ICdcXHVFOUQxJyxcbiAgICAgICAgICAgICdBcmVhQ2hhcnQnOiAnXFx1RTlEMicsXG4gICAgICAgICAgICAnQXNzaWduJzogJ1xcdUU5RDMnLFxuICAgICAgICAgICAgJ0Zsb3dDaGFydCc6ICdcXHVFOUQ0JyxcbiAgICAgICAgICAgICdDaGVja0xpc3QnOiAnXFx1RTlENScsXG4gICAgICAgICAgICAnRGlhZ25vc3RpYyc6ICdcXHVFOUQ5JyxcbiAgICAgICAgICAgICdHZW5lcmF0ZSc6ICdcXHVFOURBJyxcbiAgICAgICAgICAgICdMaW5lQ2hhcnQnOiAnXFx1RTlFNicsXG4gICAgICAgICAgICAnRXF1YWxpemVyJzogJ1xcdUU5RTknLFxuICAgICAgICAgICAgJ0JhckNoYXJ0SG9yaXpvbnRhbCc6ICdcXHVFOUVCJyxcbiAgICAgICAgICAgICdCYXJDaGFydFZlcnRpY2FsJzogJ1xcdUU5RUMnLFxuICAgICAgICAgICAgJ0ZyZWV6aW5nJzogJ1xcdUU5RUYnLFxuICAgICAgICAgICAgJ0Z1bm5lbENoYXJ0JzogJ1xcdUU5RjEnLFxuICAgICAgICAgICAgJ1Byb2Nlc3NpbmcnOiAnXFx1RTlGNScsXG4gICAgICAgICAgICAnUXVhbnRpdHknOiAnXFx1RTlGOCcsXG4gICAgICAgICAgICAnUmVwb3J0RG9jdW1lbnQnOiAnXFx1RTlGOScsXG4gICAgICAgICAgICAnU3RhY2tDb2x1bW5DaGFydCc6ICdcXHVFOUZDJyxcbiAgICAgICAgICAgICdTbm93U2hvd2VyRGF5JzogJ1xcdUU5RkQnLFxuICAgICAgICAgICAgJ0hhaWxEYXknOiAnXFx1RUEwMCcsXG4gICAgICAgICAgICAnV29ya0Zsb3cnOiAnXFx1RUEwMScsXG4gICAgICAgICAgICAnSG91ckdsYXNzJzogJ1xcdUVBMDMnLFxuICAgICAgICAgICAgJ1N0b3JlTG9nb01lZDIwJzogJ1xcdUVBMDQnLFxuICAgICAgICAgICAgJ1RpbWVTaGVldCc6ICdcXHVFQTA1JyxcbiAgICAgICAgICAgICdUcmlhbmdsZVNvbGlkJzogJ1xcdUVBMDgnLFxuICAgICAgICAgICAgJ1VwZ3JhZGVBbmFseXNpcyc6ICdcXHVFQTBCJyxcbiAgICAgICAgICAgICdWaWRlb1NvbGlkJzogJ1xcdUVBMEMnLFxuICAgICAgICAgICAgJ1JhaW5TaG93ZXJzTmlnaHQnOiAnXFx1RUEwRicsXG4gICAgICAgICAgICAnU25vd1Nob3dlck5pZ2h0JzogJ1xcdUVBMTEnLFxuICAgICAgICAgICAgJ1RlYW13b3JrJzogJ1xcdUVBMTInLFxuICAgICAgICAgICAgJ0hhaWxOaWdodCc6ICdcXHVFQTEzJyxcbiAgICAgICAgICAgICdQZW9wbGVBZGQnOiAnXFx1RUExNScsXG4gICAgICAgICAgICAnR2xhc3Nlcyc6ICdcXHVFQTE2JyxcbiAgICAgICAgICAgICdEYXRlVGltZTInOiAnXFx1RUExNycsXG4gICAgICAgICAgICAnU2hpZWxkJzogJ1xcdUVBMTgnLFxuICAgICAgICAgICAgJ0hlYWRlcjEnOiAnXFx1RUExOScsXG4gICAgICAgICAgICAnUGFnZUFkZCc6ICdcXHVFQTFBJyxcbiAgICAgICAgICAgICdOdW1iZXJlZExpc3QnOiAnXFx1RUExQycsXG4gICAgICAgICAgICAnUG93ZXJCSUxvZ28nOiAnXFx1RUExRScsXG4gICAgICAgICAgICAnSW5mbzInOiAnXFx1RUExRicsXG4gICAgICAgICAgICAnTXVzaWNJbkNvbGxlY3Rpb25GaWxsJzogJ1xcdUVBMzYnLFxuICAgICAgICAgICAgJ0FzdGVyaXNrJzogJ1xcdUVBMzgnLFxuICAgICAgICAgICAgJ0Vycm9yQmFkZ2UnOiAnXFx1RUEzOScsXG4gICAgICAgICAgICAnQ2lyY2xlRmlsbCc6ICdcXHVFQTNCJyxcbiAgICAgICAgICAgICdSZWNvcmQyJzogJ1xcdUVBM0YnLFxuICAgICAgICAgICAgJ0FsbEFwcHNNaXJyb3JlZCc6ICdcXHVFQTQwJyxcbiAgICAgICAgICAgICdCb29rbWFya3NNaXJyb3JlZCc6ICdcXHVFQTQxJyxcbiAgICAgICAgICAgICdCdWxsZXRlZExpc3RNaXJyb3JlZCc6ICdcXHVFQTQyJyxcbiAgICAgICAgICAgICdDYXJldEhvbGxvd01pcnJvcmVkJzogJ1xcdUVBNDUnLFxuICAgICAgICAgICAgJ0NhcmV0U29saWRNaXJyb3JlZCc6ICdcXHVFQTQ2JyxcbiAgICAgICAgICAgICdDaHJvbWVCYWNrTWlycm9yZWQnOiAnXFx1RUE0NycsXG4gICAgICAgICAgICAnQ2xlYXJTZWxlY3Rpb25NaXJyb3JlZCc6ICdcXHVFQTQ4JyxcbiAgICAgICAgICAgICdDbG9zZVBhbmVNaXJyb3JlZCc6ICdcXHVFQTQ5JyxcbiAgICAgICAgICAgICdEb2NrTGVmdE1pcnJvcmVkJzogJ1xcdUVBNEMnLFxuICAgICAgICAgICAgJ0RvdWJsZUNoZXZyb25MZWZ0TWVkTWlycm9yZWQnOiAnXFx1RUE0RCcsXG4gICAgICAgICAgICAnR29NaXJyb3JlZCc6ICdcXHVFQTRGJ1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZWdpc3Rlckljb25zKHN1YnNldCwgb3B0aW9ucyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mYWJyaWMtaWNvbnMtMy5qcy5tYXAiLCIvLyBZb3VyIHVzZSBvZiB0aGUgY29udGVudCBpbiB0aGUgZmlsZXMgcmVmZXJlbmNlZCBoZXJlIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBsaWNlbnNlIGF0IGh0dHBzOi8vYWthLm1zL2ZsdWVudHVpLWFzc2V0cy1saWNlbnNlXG5pbXBvcnQgeyByZWdpc3Rlckljb25zIH0gZnJvbSAnQHVpZmFicmljL3N0eWxpbmcnO1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVJY29ucyhiYXNlVXJsLCBvcHRpb25zKSB7XG4gICAgaWYgKGJhc2VVcmwgPT09IHZvaWQgMCkgeyBiYXNlVXJsID0gJyc7IH1cbiAgICB2YXIgc3Vic2V0ID0ge1xuICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgTW96T3N4Rm9udFNtb290aGluZzogJ2dyYXlzY2FsZScsXG4gICAgICAgICAgICBXZWJraXRGb250U21vb3RoaW5nOiAnYW50aWFsaWFzZWQnLFxuICAgICAgICAgICAgZm9udFN0eWxlOiAnbm9ybWFsJyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgICAgICAgc3BlYWs6ICdub25lJ1xuICAgICAgICB9LFxuICAgICAgICBmb250RmFjZToge1xuICAgICAgICAgICAgZm9udEZhbWlseTogXCJcXFwiRmFicmljTURMMkljb25zLTRcXFwiXCIsXG4gICAgICAgICAgICBzcmM6IFwidXJsKCdcIiArIGJhc2VVcmwgKyBcImZhYnJpYy1pY29ucy00LWE2NTZjYzBhLndvZmYnKSBmb3JtYXQoJ3dvZmYnKVwiXG4gICAgICAgIH0sXG4gICAgICAgIGljb25zOiB7XG4gICAgICAgICAgICAnSGVscE1pcnJvcmVkJzogJ1xcdUVBNTEnLFxuICAgICAgICAgICAgJ0ltcG9ydE1pcnJvcmVkJzogJ1xcdUVBNTInLFxuICAgICAgICAgICAgJ0ltcG9ydEFsbE1pcnJvcmVkJzogJ1xcdUVBNTMnLFxuICAgICAgICAgICAgJ0xpc3RNaXJyb3JlZCc6ICdcXHVFQTU1JyxcbiAgICAgICAgICAgICdNYWlsRm9yd2FyZE1pcnJvcmVkJzogJ1xcdUVBNTYnLFxuICAgICAgICAgICAgJ01haWxSZXBseU1pcnJvcmVkJzogJ1xcdUVBNTcnLFxuICAgICAgICAgICAgJ01haWxSZXBseUFsbE1pcnJvcmVkJzogJ1xcdUVBNTgnLFxuICAgICAgICAgICAgJ01pbmlDb250cmFjdE1pcnJvcmVkJzogJ1xcdUVBNTknLFxuICAgICAgICAgICAgJ01pbmlFeHBhbmRNaXJyb3JlZCc6ICdcXHVFQTVBJyxcbiAgICAgICAgICAgICdPcGVuUGFuZU1pcnJvcmVkJzogJ1xcdUVBNUInLFxuICAgICAgICAgICAgJ1BhcmtpbmdMb2NhdGlvbk1pcnJvcmVkJzogJ1xcdUVBNUUnLFxuICAgICAgICAgICAgJ1NlbmRNaXJyb3JlZCc6ICdcXHVFQTYzJyxcbiAgICAgICAgICAgICdTaG93UmVzdWx0c01pcnJvcmVkJzogJ1xcdUVBNjUnLFxuICAgICAgICAgICAgJ1RodW1ibmFpbFZpZXdNaXJyb3JlZCc6ICdcXHVFQTY3JyxcbiAgICAgICAgICAgICdNZWRpYSc6ICdcXHVFQTY5JyxcbiAgICAgICAgICAgICdEZXZpY2VzMyc6ICdcXHVFQTZDJyxcbiAgICAgICAgICAgICdGb2N1cyc6ICdcXHVFQTZGJyxcbiAgICAgICAgICAgICdWaWRlb0xpZ2h0T2ZmJzogJ1xcdUVBNzQnLFxuICAgICAgICAgICAgJ0xpZ2h0YnVsYic6ICdcXHVFQTgwJyxcbiAgICAgICAgICAgICdTdGF0dXNUcmlhbmdsZSc6ICdcXHVFQTgyJyxcbiAgICAgICAgICAgICdWb2x1bWVEaXNhYmxlZCc6ICdcXHVFQTg1JyxcbiAgICAgICAgICAgICdQdXp6bGUnOiAnXFx1RUE4NicsXG4gICAgICAgICAgICAnRW1vamlOZXV0cmFsJzogJ1xcdUVBODcnLFxuICAgICAgICAgICAgJ0Vtb2ppRGlzYXBwb2ludGVkJzogJ1xcdUVBODgnLFxuICAgICAgICAgICAgJ0hvbWVTb2xpZCc6ICdcXHVFQThBJyxcbiAgICAgICAgICAgICdSaW5nZXInOiAnXFx1RUE4RicsXG4gICAgICAgICAgICAnUERGJzogJ1xcdUVBOTAnLFxuICAgICAgICAgICAgJ0hlYXJ0QnJva2VuJzogJ1xcdUVBOTInLFxuICAgICAgICAgICAgJ1N0b3JlTG9nbzE2JzogJ1xcdUVBOTYnLFxuICAgICAgICAgICAgJ011bHRpU2VsZWN0TWlycm9yZWQnOiAnXFx1RUE5OCcsXG4gICAgICAgICAgICAnQnJvb20nOiAnXFx1RUE5OScsXG4gICAgICAgICAgICAnQWRkVG9TaG9wcGluZ0xpc3QnOiAnXFx1RUE5QScsXG4gICAgICAgICAgICAnQ29ja3RhaWxzJzogJ1xcdUVBOUQnLFxuICAgICAgICAgICAgJ1dpbmVzJzogJ1xcdUVBQkYnLFxuICAgICAgICAgICAgJ0FydGljbGVzJzogJ1xcdUVBQzEnLFxuICAgICAgICAgICAgJ0N5Y2xpbmcnOiAnXFx1RUFDNycsXG4gICAgICAgICAgICAnRGlldFBsYW5Ob3RlYm9vayc6ICdcXHVFQUM4JyxcbiAgICAgICAgICAgICdQaWxsJzogJ1xcdUVBQ0InLFxuICAgICAgICAgICAgJ0V4ZXJjaXNlVHJhY2tlcic6ICdcXHVFQUNDJyxcbiAgICAgICAgICAgICdIYW5kc0ZyZWUnOiAnXFx1RUFEMCcsXG4gICAgICAgICAgICAnTWVkaWNhbCc6ICdcXHVFQUQ0JyxcbiAgICAgICAgICAgICdSdW5uaW5nJzogJ1xcdUVBREEnLFxuICAgICAgICAgICAgJ1dlaWdodHMnOiAnXFx1RUFEQicsXG4gICAgICAgICAgICAnVHJhY2tlcnMnOiAnXFx1RUFERicsXG4gICAgICAgICAgICAnQWRkTm90ZXMnOiAnXFx1RUFFMycsXG4gICAgICAgICAgICAnQWxsQ3VycmVuY3knOiAnXFx1RUFFNCcsXG4gICAgICAgICAgICAnQmFyQ2hhcnQ0JzogJ1xcdUVBRTcnLFxuICAgICAgICAgICAgJ0NpcmNsZVBsdXMnOiAnXFx1RUFFRScsXG4gICAgICAgICAgICAnQ29mZmVlJzogJ1xcdUVBRUYnLFxuICAgICAgICAgICAgJ0NvdHRvbic6ICdcXHVFQUYzJyxcbiAgICAgICAgICAgICdNYXJrZXQnOiAnXFx1RUFGQycsXG4gICAgICAgICAgICAnTW9uZXknOiAnXFx1RUFGRCcsXG4gICAgICAgICAgICAnUGllRG91YmxlJzogJ1xcdUVCMDQnLFxuICAgICAgICAgICAgJ1BpZVNpbmdsZSc6ICdcXHVFQjA1JyxcbiAgICAgICAgICAgICdSZW1vdmVGaWx0ZXInOiAnXFx1RUIwOCcsXG4gICAgICAgICAgICAnU2F2aW5ncyc6ICdcXHVFQjBCJyxcbiAgICAgICAgICAgICdTZWxsJzogJ1xcdUVCMEMnLFxuICAgICAgICAgICAgJ1N0b2NrRG93bic6ICdcXHVFQjBGJyxcbiAgICAgICAgICAgICdTdG9ja1VwJzogJ1xcdUVCMTEnLFxuICAgICAgICAgICAgJ0xhbXAnOiAnXFx1RUIxOScsXG4gICAgICAgICAgICAnU291cmNlJzogJ1xcdUVCMUInLFxuICAgICAgICAgICAgJ01TTlZpZGVvcyc6ICdcXHVFQjFDJyxcbiAgICAgICAgICAgICdDcmlja2V0JzogJ1xcdUVCMUUnLFxuICAgICAgICAgICAgJ0dvbGYnOiAnXFx1RUIxRicsXG4gICAgICAgICAgICAnQmFzZWJhbGwnOiAnXFx1RUIyMCcsXG4gICAgICAgICAgICAnU29jY2VyJzogJ1xcdUVCMjEnLFxuICAgICAgICAgICAgJ01vcmVTcG9ydHMnOiAnXFx1RUIyMicsXG4gICAgICAgICAgICAnQXV0b1JhY2luZyc6ICdcXHVFQjI0JyxcbiAgICAgICAgICAgICdDb2xsZWdlSG9vcHMnOiAnXFx1RUIyNScsXG4gICAgICAgICAgICAnQ29sbGVnZUZvb3RiYWxsJzogJ1xcdUVCMjYnLFxuICAgICAgICAgICAgJ1Byb0Zvb3RiYWxsJzogJ1xcdUVCMjcnLFxuICAgICAgICAgICAgJ1Byb0hvY2tleSc6ICdcXHVFQjI4JyxcbiAgICAgICAgICAgICdSdWdieSc6ICdcXHVFQjJEJyxcbiAgICAgICAgICAgICdTdWJzdGl0dXRpb25zSW4nOiAnXFx1RUIzMScsXG4gICAgICAgICAgICAnVGVubmlzJzogJ1xcdUVCMzMnLFxuICAgICAgICAgICAgJ0Fycml2YWxzJzogJ1xcdUVCMzQnLFxuICAgICAgICAgICAgJ0Rlc2lnbic6ICdcXHVFQjNDJyxcbiAgICAgICAgICAgICdXZWJzaXRlJzogJ1xcdUVCNDEnLFxuICAgICAgICAgICAgJ0Ryb3AnOiAnXFx1RUI0MicsXG4gICAgICAgICAgICAnSGlzdG9yaWNhbFdlYXRoZXInOiAnXFx1RUI0MycsXG4gICAgICAgICAgICAnU2tpUmVzb3J0cyc6ICdcXHVFQjQ1JyxcbiAgICAgICAgICAgICdTbm93Zmxha2UnOiAnXFx1RUI0NicsXG4gICAgICAgICAgICAnQnVzU29saWQnOiAnXFx1RUI0NycsXG4gICAgICAgICAgICAnRmVycnlTb2xpZCc6ICdcXHVFQjQ4JyxcbiAgICAgICAgICAgICdBaXJwbGFuZVNvbGlkJzogJ1xcdUVCNEMnLFxuICAgICAgICAgICAgJ1RyYWluU29saWQnOiAnXFx1RUI0RCcsXG4gICAgICAgICAgICAnVGlja2V0JzogJ1xcdUVCNTQnLFxuICAgICAgICAgICAgJ1dpZmlXYXJuaW5nNCc6ICdcXHVFQjYzJyxcbiAgICAgICAgICAgICdEZXZpY2VzNCc6ICdcXHVFQjY2JyxcbiAgICAgICAgICAgICdBenVyZUxvZ28nOiAnXFx1RUI2QScsXG4gICAgICAgICAgICAnQmluZ0xvZ28nOiAnXFx1RUI2QicsXG4gICAgICAgICAgICAnTVNOTG9nbyc6ICdcXHVFQjZDJyxcbiAgICAgICAgICAgICdPdXRsb29rTG9nb0ludmVyc2UnOiAnXFx1RUI2RCcsXG4gICAgICAgICAgICAnT2ZmaWNlTG9nbyc6ICdcXHVFQjZFJyxcbiAgICAgICAgICAgICdTa3lwZUxvZ28nOiAnXFx1RUI2RicsXG4gICAgICAgICAgICAnRG9vcic6ICdcXHVFQjc1JyxcbiAgICAgICAgICAgICdFZGl0TWlycm9yZWQnOiAnXFx1RUI3RScsXG4gICAgICAgICAgICAnR2lmdENhcmQnOiAnXFx1RUI4RScsXG4gICAgICAgICAgICAnRG91YmxlQm9va21hcmsnOiAnXFx1RUI4RicsXG4gICAgICAgICAgICAnU3RhdHVzRXJyb3JGdWxsJzogJ1xcdUVCOTAnXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJlZ2lzdGVySWNvbnMoc3Vic2V0LCBvcHRpb25zKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZhYnJpYy1pY29ucy00LmpzLm1hcCIsIi8vIFlvdXIgdXNlIG9mIHRoZSBjb250ZW50IGluIHRoZSBmaWxlcyByZWZlcmVuY2VkIGhlcmUgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIGxpY2Vuc2UgYXQgaHR0cHM6Ly9ha2EubXMvZmx1ZW50dWktYXNzZXRzLWxpY2Vuc2VcbmltcG9ydCB7IHJlZ2lzdGVySWNvbnMgfSBmcm9tICdAdWlmYWJyaWMvc3R5bGluZyc7XG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUljb25zKGJhc2VVcmwsIG9wdGlvbnMpIHtcbiAgICBpZiAoYmFzZVVybCA9PT0gdm9pZCAwKSB7IGJhc2VVcmwgPSAnJzsgfVxuICAgIHZhciBzdWJzZXQgPSB7XG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBNb3pPc3hGb250U21vb3RoaW5nOiAnZ3JheXNjYWxlJyxcbiAgICAgICAgICAgIFdlYmtpdEZvbnRTbW9vdGhpbmc6ICdhbnRpYWxpYXNlZCcsXG4gICAgICAgICAgICBmb250U3R5bGU6ICdub3JtYWwnLFxuICAgICAgICAgICAgZm9udFdlaWdodDogJ25vcm1hbCcsXG4gICAgICAgICAgICBzcGVhazogJ25vbmUnXG4gICAgICAgIH0sXG4gICAgICAgIGZvbnRGYWNlOiB7XG4gICAgICAgICAgICBmb250RmFtaWx5OiBcIlxcXCJGYWJyaWNNREwySWNvbnMtNVxcXCJcIixcbiAgICAgICAgICAgIHNyYzogXCJ1cmwoJ1wiICsgYmFzZVVybCArIFwiZmFicmljLWljb25zLTUtZjk1YmEyNjAud29mZicpIGZvcm1hdCgnd29mZicpXCJcbiAgICAgICAgfSxcbiAgICAgICAgaWNvbnM6IHtcbiAgICAgICAgICAgICdDZXJ0aWZpY2F0ZSc6ICdcXHVFQjk1JyxcbiAgICAgICAgICAgICdGYXN0Rm9yd2FyZCc6ICdcXHVFQjlEJyxcbiAgICAgICAgICAgICdSZXdpbmQnOiAnXFx1RUI5RScsXG4gICAgICAgICAgICAnUGhvdG8yJzogJ1xcdUVCOUYnLFxuICAgICAgICAgICAgJ09wZW5Tb3VyY2UnOiAnXFx1RUJDMicsXG4gICAgICAgICAgICAnTW92ZXJzJzogJ1xcdUVCQ0QnLFxuICAgICAgICAgICAgJ0Nsb3VkRG93bmxvYWQnOiAnXFx1RUJEMycsXG4gICAgICAgICAgICAnRmFtaWx5JzogJ1xcdUVCREEnLFxuICAgICAgICAgICAgJ1dpbmREaXJlY3Rpb24nOiAnXFx1RUJFNicsXG4gICAgICAgICAgICAnQnVnJzogJ1xcdUVCRTgnLFxuICAgICAgICAgICAgJ1NpdGVTY2FuJzogJ1xcdUVCRUMnLFxuICAgICAgICAgICAgJ0Jyb3dzZXJTY3JlZW5TaG90JzogJ1xcdUVCRUQnLFxuICAgICAgICAgICAgJ0YxMkRldlRvb2xzJzogJ1xcdUVCRUUnLFxuICAgICAgICAgICAgJ0NTUyc6ICdcXHVFQkVGJyxcbiAgICAgICAgICAgICdKUyc6ICdcXHVFQkYwJyxcbiAgICAgICAgICAgICdEZWxpdmVyeVRydWNrJzogJ1xcdUVCRjQnLFxuICAgICAgICAgICAgJ1JlbWluZGVyUGVyc29uJzogJ1xcdUVCRjcnLFxuICAgICAgICAgICAgJ1JlbWluZGVyR3JvdXAnOiAnXFx1RUJGOCcsXG4gICAgICAgICAgICAnUmVtaW5kZXJUaW1lJzogJ1xcdUVCRjknLFxuICAgICAgICAgICAgJ1RhYmxldE1vZGUnOiAnXFx1RUJGQycsXG4gICAgICAgICAgICAnVW1icmVsbGEnOiAnXFx1RUMwNCcsXG4gICAgICAgICAgICAnTmV0d29ya1Rvd2VyJzogJ1xcdUVDMDUnLFxuICAgICAgICAgICAgJ0NpdHlOZXh0JzogJ1xcdUVDMDYnLFxuICAgICAgICAgICAgJ0NpdHlOZXh0Mic6ICdcXHVFQzA3JyxcbiAgICAgICAgICAgICdTZWN0aW9uJzogJ1xcdUVDMEMnLFxuICAgICAgICAgICAgJ09uZU5vdGVMb2dvSW52ZXJzZSc6ICdcXHVFQzBEJyxcbiAgICAgICAgICAgICdUb2dnbGVGaWxsZWQnOiAnXFx1RUMxMScsXG4gICAgICAgICAgICAnVG9nZ2xlQm9yZGVyJzogJ1xcdUVDMTInLFxuICAgICAgICAgICAgJ1NsaWRlclRodW1iJzogJ1xcdUVDMTMnLFxuICAgICAgICAgICAgJ1RvZ2dsZVRodW1iJzogJ1xcdUVDMTQnLFxuICAgICAgICAgICAgJ0RvY3VtZW50YXRpb24nOiAnXFx1RUMxNycsXG4gICAgICAgICAgICAnQmFkZ2UnOiAnXFx1RUMxQicsXG4gICAgICAgICAgICAnR2lmdGJveCc6ICdcXHVFQzFGJyxcbiAgICAgICAgICAgICdWaXN1YWxTdHVkaW9Mb2dvJzogJ1xcdUVDMjInLFxuICAgICAgICAgICAgJ0hvbWVHcm91cCc6ICdcXHVFQzI2JyxcbiAgICAgICAgICAgICdFeGNlbExvZ29JbnZlcnNlJzogJ1xcdUVDMjgnLFxuICAgICAgICAgICAgJ1dvcmRMb2dvSW52ZXJzZSc6ICdcXHVFQzI5JyxcbiAgICAgICAgICAgICdQb3dlclBvaW50TG9nb0ludmVyc2UnOiAnXFx1RUMyQScsXG4gICAgICAgICAgICAnQ2FmZSc6ICdcXHVFQzMyJyxcbiAgICAgICAgICAgICdTcGVlZEhpZ2gnOiAnXFx1RUM0QScsXG4gICAgICAgICAgICAnQ29tbWl0bWVudHMnOiAnXFx1RUM0RCcsXG4gICAgICAgICAgICAnVGhpc1BDJzogJ1xcdUVDNEUnLFxuICAgICAgICAgICAgJ011c2ljTm90ZSc6ICdcXHVFQzRGJyxcbiAgICAgICAgICAgICdNaWNPZmYnOiAnXFx1RUM1NCcsXG4gICAgICAgICAgICAnUGxheWJhY2tSYXRlMXgnOiAnXFx1RUM1NycsXG4gICAgICAgICAgICAnRWRnZUxvZ28nOiAnXFx1RUM2MCcsXG4gICAgICAgICAgICAnQ29tcGxldGVkU29saWQnOiAnXFx1RUM2MScsXG4gICAgICAgICAgICAnQWxidW1SZW1vdmUnOiAnXFx1RUM2MicsXG4gICAgICAgICAgICAnTWVzc2FnZUZpbGwnOiAnXFx1RUM3MCcsXG4gICAgICAgICAgICAnVGFibGV0U2VsZWN0ZWQnOiAnXFx1RUM3NCcsXG4gICAgICAgICAgICAnTW9iaWxlU2VsZWN0ZWQnOiAnXFx1RUM3NScsXG4gICAgICAgICAgICAnTGFwdG9wU2VsZWN0ZWQnOiAnXFx1RUM3NicsXG4gICAgICAgICAgICAnVFZNb25pdG9yU2VsZWN0ZWQnOiAnXFx1RUM3NycsXG4gICAgICAgICAgICAnRGV2ZWxvcGVyVG9vbHMnOiAnXFx1RUM3QScsXG4gICAgICAgICAgICAnU2hhcGVzJzogJ1xcdUVDN0MnLFxuICAgICAgICAgICAgJ0luc2VydFRleHRCb3gnOiAnXFx1RUM3RCcsXG4gICAgICAgICAgICAnTG93ZXJCcmlnaHRuZXNzJzogJ1xcdUVDOEEnLFxuICAgICAgICAgICAgJ1dlYkNvbXBvbmVudHMnOiAnXFx1RUM4QicsXG4gICAgICAgICAgICAnT2ZmbGluZVN0b3JhZ2UnOiAnXFx1RUM4QycsXG4gICAgICAgICAgICAnRE9NJzogJ1xcdUVDOEQnLFxuICAgICAgICAgICAgJ0Nsb3VkVXBsb2FkJzogJ1xcdUVDOEUnLFxuICAgICAgICAgICAgJ1Njcm9sbFVwRG93bic6ICdcXHVFQzhGJyxcbiAgICAgICAgICAgICdEYXRlVGltZSc6ICdcXHVFQzkyJyxcbiAgICAgICAgICAgICdFdmVudCc6ICdcXHVFQ0EzJyxcbiAgICAgICAgICAgICdDYWtlJzogJ1xcdUVDQTQnLFxuICAgICAgICAgICAgJ09yZyc6ICdcXHVFQ0E2JyxcbiAgICAgICAgICAgICdQYXJ0eUxlYWRlcic6ICdcXHVFQ0E3JyxcbiAgICAgICAgICAgICdEUk0nOiAnXFx1RUNBOCcsXG4gICAgICAgICAgICAnQ2xvdWRBZGQnOiAnXFx1RUNBOScsXG4gICAgICAgICAgICAnQXBwSWNvbkRlZmF1bHQnOiAnXFx1RUNBQScsXG4gICAgICAgICAgICAnUGhvdG8yQWRkJzogJ1xcdUVDQUInLFxuICAgICAgICAgICAgJ1Bob3RvMlJlbW92ZSc6ICdcXHVFQ0FDJyxcbiAgICAgICAgICAgICdDYWxvcmllcyc6ICdcXHVFQ0FEJyxcbiAgICAgICAgICAgICdQT0knOiAnXFx1RUNBRicsXG4gICAgICAgICAgICAnQWRkVG8nOiAnXFx1RUNDOCcsXG4gICAgICAgICAgICAnUmFkaW9CdG5PZmYnOiAnXFx1RUNDQScsXG4gICAgICAgICAgICAnUmFkaW9CdG5Pbic6ICdcXHVFQ0NCJyxcbiAgICAgICAgICAgICdFeHBsb3JlQ29udGVudCc6ICdcXHVFQ0NEJyxcbiAgICAgICAgICAgICdQcm9kdWN0JzogJ1xcdUVDREMnLFxuICAgICAgICAgICAgJ1Byb2dyZXNzTG9vcElubmVyJzogJ1xcdUVDREUnLFxuICAgICAgICAgICAgJ1Byb2dyZXNzTG9vcE91dGVyJzogJ1xcdUVDREYnLFxuICAgICAgICAgICAgJ0Jsb2NrZWQyJzogJ1xcdUVDRTQnLFxuICAgICAgICAgICAgJ0ZhbmdCb2R5JzogJ1xcdUVDRUInLFxuICAgICAgICAgICAgJ1Rvb2xib3gnOiAnXFx1RUNFRCcsXG4gICAgICAgICAgICAnUGFnZUhlYWRlcic6ICdcXHVFQ0VFJyxcbiAgICAgICAgICAgICdDaGF0SW52aXRlRnJpZW5kJzogJ1xcdUVDRkUnLFxuICAgICAgICAgICAgJ0JydXNoJzogJ1xcdUVDRkYnLFxuICAgICAgICAgICAgJ1NoaXJ0JzogJ1xcdUVEMDAnLFxuICAgICAgICAgICAgJ0Nyb3duJzogJ1xcdUVEMDEnLFxuICAgICAgICAgICAgJ0RpYW1vbmQnOiAnXFx1RUQwMicsXG4gICAgICAgICAgICAnU2NhbGVVcCc6ICdcXHVFRDA5JyxcbiAgICAgICAgICAgICdRUkNvZGUnOiAnXFx1RUQxNCcsXG4gICAgICAgICAgICAnRmVlZGJhY2snOiAnXFx1RUQxNScsXG4gICAgICAgICAgICAnU2hhcmVwb2ludExvZ29JbnZlcnNlJzogJ1xcdUVEMTgnLFxuICAgICAgICAgICAgJ1lhbW1lckxvZ28nOiAnXFx1RUQxOScsXG4gICAgICAgICAgICAnSGlkZSc6ICdcXHVFRDFBJyxcbiAgICAgICAgICAgICdVbmVkaXRhYmxlJzogJ1xcdUVEMUQnLFxuICAgICAgICAgICAgJ1JldHVyblRvU2Vzc2lvbic6ICdcXHVFRDI0JyxcbiAgICAgICAgICAgICdPcGVuRm9sZGVySG9yaXpvbnRhbCc6ICdcXHVFRDI1JyxcbiAgICAgICAgICAgICdDYWxlbmRhck1pcnJvcmVkJzogJ1xcdUVEMjgnXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJlZ2lzdGVySWNvbnMoc3Vic2V0LCBvcHRpb25zKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZhYnJpYy1pY29ucy01LmpzLm1hcCIsIi8vIFlvdXIgdXNlIG9mIHRoZSBjb250ZW50IGluIHRoZSBmaWxlcyByZWZlcmVuY2VkIGhlcmUgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIGxpY2Vuc2UgYXQgaHR0cHM6Ly9ha2EubXMvZmx1ZW50dWktYXNzZXRzLWxpY2Vuc2VcbmltcG9ydCB7IHJlZ2lzdGVySWNvbnMgfSBmcm9tICdAdWlmYWJyaWMvc3R5bGluZyc7XG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUljb25zKGJhc2VVcmwsIG9wdGlvbnMpIHtcbiAgICBpZiAoYmFzZVVybCA9PT0gdm9pZCAwKSB7IGJhc2VVcmwgPSAnJzsgfVxuICAgIHZhciBzdWJzZXQgPSB7XG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBNb3pPc3hGb250U21vb3RoaW5nOiAnZ3JheXNjYWxlJyxcbiAgICAgICAgICAgIFdlYmtpdEZvbnRTbW9vdGhpbmc6ICdhbnRpYWxpYXNlZCcsXG4gICAgICAgICAgICBmb250U3R5bGU6ICdub3JtYWwnLFxuICAgICAgICAgICAgZm9udFdlaWdodDogJ25vcm1hbCcsXG4gICAgICAgICAgICBzcGVhazogJ25vbmUnXG4gICAgICAgIH0sXG4gICAgICAgIGZvbnRGYWNlOiB7XG4gICAgICAgICAgICBmb250RmFtaWx5OiBcIlxcXCJGYWJyaWNNREwySWNvbnMtNlxcXCJcIixcbiAgICAgICAgICAgIHNyYzogXCJ1cmwoJ1wiICsgYmFzZVVybCArIFwiZmFicmljLWljb25zLTYtZWY2ZmQ1OTAud29mZicpIGZvcm1hdCgnd29mZicpXCJcbiAgICAgICAgfSxcbiAgICAgICAgaWNvbnM6IHtcbiAgICAgICAgICAgICdTd2F5TG9nb0ludmVyc2UnOiAnXFx1RUQyOScsXG4gICAgICAgICAgICAnT3V0T2ZPZmZpY2UnOiAnXFx1RUQzNCcsXG4gICAgICAgICAgICAnVHJvcGh5JzogJ1xcdUVEM0YnLFxuICAgICAgICAgICAgJ1Jlb3BlblBhZ2VzJzogJ1xcdUVENTAnLFxuICAgICAgICAgICAgJ0Vtb2ppVGFiU3ltYm9scyc6ICdcXHVFRDU4JyxcbiAgICAgICAgICAgICdBQURMb2dvJzogJ1xcdUVENjgnLFxuICAgICAgICAgICAgJ0FjY2Vzc0xvZ28nOiAnXFx1RUQ2OScsXG4gICAgICAgICAgICAnQWRtaW5BTG9nb0ludmVyc2UzMic6ICdcXHVFRDZBJyxcbiAgICAgICAgICAgICdBZG1pbkNMb2dvSW52ZXJzZTMyJzogJ1xcdUVENkInLFxuICAgICAgICAgICAgJ0FkbWluRExvZ29JbnZlcnNlMzInOiAnXFx1RUQ2QycsXG4gICAgICAgICAgICAnQWRtaW5FTG9nb0ludmVyc2UzMic6ICdcXHVFRDZEJyxcbiAgICAgICAgICAgICdBZG1pbkxMb2dvSW52ZXJzZTMyJzogJ1xcdUVENkUnLFxuICAgICAgICAgICAgJ0FkbWluTUxvZ29JbnZlcnNlMzInOiAnXFx1RUQ2RicsXG4gICAgICAgICAgICAnQWRtaW5PTG9nb0ludmVyc2UzMic6ICdcXHVFRDcwJyxcbiAgICAgICAgICAgICdBZG1pblBMb2dvSW52ZXJzZTMyJzogJ1xcdUVENzEnLFxuICAgICAgICAgICAgJ0FkbWluU0xvZ29JbnZlcnNlMzInOiAnXFx1RUQ3MicsXG4gICAgICAgICAgICAnQWRtaW5ZTG9nb0ludmVyc2UzMic6ICdcXHVFRDczJyxcbiAgICAgICAgICAgICdEZWx2ZUxvZ29JbnZlcnNlJzogJ1xcdUVENzYnLFxuICAgICAgICAgICAgJ0V4Y2hhbmdlTG9nb0ludmVyc2UnOiAnXFx1RUQ3OCcsXG4gICAgICAgICAgICAnTHluY0xvZ28nOiAnXFx1RUQ3OScsXG4gICAgICAgICAgICAnT2ZmaWNlVmlkZW9Mb2dvSW52ZXJzZSc6ICdcXHVFRDdBJyxcbiAgICAgICAgICAgICdTb2NpYWxMaXN0ZW5pbmdMb2dvJzogJ1xcdUVEN0MnLFxuICAgICAgICAgICAgJ1Zpc2lvTG9nb0ludmVyc2UnOiAnXFx1RUQ3RCcsXG4gICAgICAgICAgICAnQmFsbG9vbnMnOiAnXFx1RUQ3RScsXG4gICAgICAgICAgICAnQ2F0JzogJ1xcdUVEN0YnLFxuICAgICAgICAgICAgJ01haWxBbGVydCc6ICdcXHVFRDgwJyxcbiAgICAgICAgICAgICdNYWlsQ2hlY2snOiAnXFx1RUQ4MScsXG4gICAgICAgICAgICAnTWFpbExvd0ltcG9ydGFuY2UnOiAnXFx1RUQ4MicsXG4gICAgICAgICAgICAnTWFpbFBhdXNlJzogJ1xcdUVEODMnLFxuICAgICAgICAgICAgJ01haWxSZXBlYXQnOiAnXFx1RUQ4NCcsXG4gICAgICAgICAgICAnU2VjdXJpdHlHcm91cCc6ICdcXHVFRDg1JyxcbiAgICAgICAgICAgICdUYWJsZSc6ICdcXHVFRDg2JyxcbiAgICAgICAgICAgICdWb2ljZW1haWxGb3J3YXJkJzogJ1xcdUVEODcnLFxuICAgICAgICAgICAgJ1ZvaWNlbWFpbFJlcGx5JzogJ1xcdUVEODgnLFxuICAgICAgICAgICAgJ1dhZmZsZSc6ICdcXHVFRDg5JyxcbiAgICAgICAgICAgICdSZW1vdmVFdmVudCc6ICdcXHVFRDhBJyxcbiAgICAgICAgICAgICdFdmVudEluZm8nOiAnXFx1RUQ4QicsXG4gICAgICAgICAgICAnRm9yd2FyZEV2ZW50JzogJ1xcdUVEOEMnLFxuICAgICAgICAgICAgJ1dpcGVQaG9uZSc6ICdcXHVFRDhEJyxcbiAgICAgICAgICAgICdBZGRPbmxpbmVNZWV0aW5nJzogJ1xcdUVEOEUnLFxuICAgICAgICAgICAgJ0pvaW5PbmxpbmVNZWV0aW5nJzogJ1xcdUVEOEYnLFxuICAgICAgICAgICAgJ1JlbW92ZUxpbmsnOiAnXFx1RUQ5MCcsXG4gICAgICAgICAgICAnUGVvcGxlQmxvY2snOiAnXFx1RUQ5MScsXG4gICAgICAgICAgICAnUGVvcGxlUmVwZWF0JzogJ1xcdUVEOTInLFxuICAgICAgICAgICAgJ1Blb3BsZUFsZXJ0JzogJ1xcdUVEOTMnLFxuICAgICAgICAgICAgJ1Blb3BsZVBhdXNlJzogJ1xcdUVEOTQnLFxuICAgICAgICAgICAgJ1RyYW5zZmVyQ2FsbCc6ICdcXHVFRDk1JyxcbiAgICAgICAgICAgICdBZGRQaG9uZSc6ICdcXHVFRDk2JyxcbiAgICAgICAgICAgICdVbmtub3duQ2FsbCc6ICdcXHVFRDk3JyxcbiAgICAgICAgICAgICdOb3RlUmVwbHknOiAnXFx1RUQ5OCcsXG4gICAgICAgICAgICAnTm90ZUZvcndhcmQnOiAnXFx1RUQ5OScsXG4gICAgICAgICAgICAnTm90ZVBpbm5lZCc6ICdcXHVFRDlBJyxcbiAgICAgICAgICAgICdSZW1vdmVPY2N1cnJlbmNlJzogJ1xcdUVEOUInLFxuICAgICAgICAgICAgJ1RpbWVsaW5lJzogJ1xcdUVEOUMnLFxuICAgICAgICAgICAgJ0VkaXROb3RlJzogJ1xcdUVEOUQnLFxuICAgICAgICAgICAgJ0NpcmNsZUhhbGZGdWxsJzogJ1xcdUVEOUUnLFxuICAgICAgICAgICAgJ1Jvb20nOiAnXFx1RUQ5RicsXG4gICAgICAgICAgICAnVW5zdWJzY3JpYmUnOiAnXFx1RURBMCcsXG4gICAgICAgICAgICAnU3Vic2NyaWJlJzogJ1xcdUVEQTEnLFxuICAgICAgICAgICAgJ0hhcmREcml2ZSc6ICdcXHVFREEyJyxcbiAgICAgICAgICAgICdSZWN1cnJpbmdUYXNrJzogJ1xcdUVEQjInLFxuICAgICAgICAgICAgJ1Rhc2tNYW5hZ2VyJzogJ1xcdUVEQjcnLFxuICAgICAgICAgICAgJ1Rhc2tNYW5hZ2VyTWlycm9yZWQnOiAnXFx1RURCOCcsXG4gICAgICAgICAgICAnQ29tYmluZSc6ICdcXHVFREJCJyxcbiAgICAgICAgICAgICdTcGxpdCc6ICdcXHVFREJDJyxcbiAgICAgICAgICAgICdEb3VibGVDaGV2cm9uVXAnOiAnXFx1RURCRCcsXG4gICAgICAgICAgICAnRG91YmxlQ2hldnJvbkxlZnQnOiAnXFx1RURCRScsXG4gICAgICAgICAgICAnRG91YmxlQ2hldnJvblJpZ2h0JzogJ1xcdUVEQkYnLFxuICAgICAgICAgICAgJ1RleHRCb3gnOiAnXFx1RURDMicsXG4gICAgICAgICAgICAnVGV4dEZpZWxkJzogJ1xcdUVEQzMnLFxuICAgICAgICAgICAgJ051bWJlckZpZWxkJzogJ1xcdUVEQzQnLFxuICAgICAgICAgICAgJ0Ryb3Bkb3duJzogJ1xcdUVEQzUnLFxuICAgICAgICAgICAgJ1BlbldvcmtzcGFjZSc6ICdcXHVFREM2JyxcbiAgICAgICAgICAgICdCb29raW5nc0xvZ28nOiAnXFx1RURDNycsXG4gICAgICAgICAgICAnQ2xhc3NOb3RlYm9va0xvZ29JbnZlcnNlJzogJ1xcdUVEQzgnLFxuICAgICAgICAgICAgJ0RlbHZlQW5hbHl0aWNzTG9nbyc6ICdcXHVFRENBJyxcbiAgICAgICAgICAgICdEb2NzTG9nb0ludmVyc2UnOiAnXFx1RURDQicsXG4gICAgICAgICAgICAnRHluYW1pY3MzNjVMb2dvJzogJ1xcdUVEQ0MnLFxuICAgICAgICAgICAgJ0R5bmFtaWNTTUJMb2dvJzogJ1xcdUVEQ0QnLFxuICAgICAgICAgICAgJ09mZmljZUFzc2lzdGFudExvZ28nOiAnXFx1RURDRScsXG4gICAgICAgICAgICAnT2ZmaWNlU3RvcmVMb2dvJzogJ1xcdUVEQ0YnLFxuICAgICAgICAgICAgJ09uZU5vdGVFZHVMb2dvSW52ZXJzZSc6ICdcXHVFREQwJyxcbiAgICAgICAgICAgICdQbGFubmVyTG9nbyc6ICdcXHVFREQxJyxcbiAgICAgICAgICAgICdQb3dlckFwcHMnOiAnXFx1RUREMicsXG4gICAgICAgICAgICAnU3VpdGNhc2UnOiAnXFx1RUREMycsXG4gICAgICAgICAgICAnUHJvamVjdExvZ29JbnZlcnNlJzogJ1xcdUVERDQnLFxuICAgICAgICAgICAgJ0NhcmV0TGVmdDgnOiAnXFx1RURENScsXG4gICAgICAgICAgICAnQ2FyZXRSaWdodDgnOiAnXFx1RURENicsXG4gICAgICAgICAgICAnQ2FyZXRVcDgnOiAnXFx1RURENycsXG4gICAgICAgICAgICAnQ2FyZXREb3duOCc6ICdcXHVFREQ4JyxcbiAgICAgICAgICAgICdDYXJldExlZnRTb2xpZDgnOiAnXFx1RUREOScsXG4gICAgICAgICAgICAnQ2FyZXRSaWdodFNvbGlkOCc6ICdcXHVFRERBJyxcbiAgICAgICAgICAgICdDYXJldFVwU29saWQ4JzogJ1xcdUVEREInLFxuICAgICAgICAgICAgJ0NhcmV0RG93blNvbGlkOCc6ICdcXHVFRERDJyxcbiAgICAgICAgICAgICdDbGVhckZvcm1hdHRpbmcnOiAnXFx1RURERCcsXG4gICAgICAgICAgICAnU3VwZXJzY3JpcHQnOiAnXFx1RURERScsXG4gICAgICAgICAgICAnU3Vic2NyaXB0JzogJ1xcdUVEREYnLFxuICAgICAgICAgICAgJ1N0cmlrZXRocm91Z2gnOiAnXFx1RURFMCcsXG4gICAgICAgICAgICAnRXhwb3J0JzogJ1xcdUVERTEnLFxuICAgICAgICAgICAgJ0V4cG9ydE1pcnJvcmVkJzogJ1xcdUVERTInXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJlZ2lzdGVySWNvbnMoc3Vic2V0LCBvcHRpb25zKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZhYnJpYy1pY29ucy02LmpzLm1hcCIsIi8vIFlvdXIgdXNlIG9mIHRoZSBjb250ZW50IGluIHRoZSBmaWxlcyByZWZlcmVuY2VkIGhlcmUgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIGxpY2Vuc2UgYXQgaHR0cHM6Ly9ha2EubXMvZmx1ZW50dWktYXNzZXRzLWxpY2Vuc2VcbmltcG9ydCB7IHJlZ2lzdGVySWNvbnMgfSBmcm9tICdAdWlmYWJyaWMvc3R5bGluZyc7XG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUljb25zKGJhc2VVcmwsIG9wdGlvbnMpIHtcbiAgICBpZiAoYmFzZVVybCA9PT0gdm9pZCAwKSB7IGJhc2VVcmwgPSAnJzsgfVxuICAgIHZhciBzdWJzZXQgPSB7XG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBNb3pPc3hGb250U21vb3RoaW5nOiAnZ3JheXNjYWxlJyxcbiAgICAgICAgICAgIFdlYmtpdEZvbnRTbW9vdGhpbmc6ICdhbnRpYWxpYXNlZCcsXG4gICAgICAgICAgICBmb250U3R5bGU6ICdub3JtYWwnLFxuICAgICAgICAgICAgZm9udFdlaWdodDogJ25vcm1hbCcsXG4gICAgICAgICAgICBzcGVhazogJ25vbmUnXG4gICAgICAgIH0sXG4gICAgICAgIGZvbnRGYWNlOiB7XG4gICAgICAgICAgICBmb250RmFtaWx5OiBcIlxcXCJGYWJyaWNNREwySWNvbnMtN1xcXCJcIixcbiAgICAgICAgICAgIHNyYzogXCJ1cmwoJ1wiICsgYmFzZVVybCArIFwiZmFicmljLWljb25zLTctMmI5N2JiOTkud29mZicpIGZvcm1hdCgnd29mZicpXCJcbiAgICAgICAgfSxcbiAgICAgICAgaWNvbnM6IHtcbiAgICAgICAgICAgICdTaW5nbGVCb29rbWFyayc6ICdcXHVFREZGJyxcbiAgICAgICAgICAgICdTaW5nbGVCb29rbWFya1NvbGlkJzogJ1xcdUVFMDAnLFxuICAgICAgICAgICAgJ0RvdWJsZUNoZXZyb25Eb3duJzogJ1xcdUVFMDQnLFxuICAgICAgICAgICAgJ0ZvbGxvd1VzZXInOiAnXFx1RUUwNScsXG4gICAgICAgICAgICAnUmVwbHlBbGwnOiAnXFx1RUUwQScsXG4gICAgICAgICAgICAnV29ya2ZvcmNlTWFuYWdlbWVudCc6ICdcXHVFRTBGJyxcbiAgICAgICAgICAgICdSZWNydWl0bWVudE1hbmFnZW1lbnQnOiAnXFx1RUUxMicsXG4gICAgICAgICAgICAnUXVlc3Rpb25uYWlyZSc6ICdcXHVFRTE5JyxcbiAgICAgICAgICAgICdNYW5hZ2VyU2VsZlNlcnZpY2UnOiAnXFx1RUUyMycsXG4gICAgICAgICAgICAnUHJvZHVjdGlvbkZsb29yTWFuYWdlbWVudCc6ICdcXHVFRTI5JyxcbiAgICAgICAgICAgICdQcm9kdWN0UmVsZWFzZSc6ICdcXHVFRTJFJyxcbiAgICAgICAgICAgICdQcm9kdWN0VmFyaWFudCc6ICdcXHVFRTMwJyxcbiAgICAgICAgICAgICdSZXBseU1pcnJvcmVkJzogJ1xcdUVFMzUnLFxuICAgICAgICAgICAgJ1JlcGx5QWxsTWlycm9yZWQnOiAnXFx1RUUzNicsXG4gICAgICAgICAgICAnTWVkYWwnOiAnXFx1RUUzOCcsXG4gICAgICAgICAgICAnQWRkR3JvdXAnOiAnXFx1RUUzRCcsXG4gICAgICAgICAgICAnUXVlc3Rpb25uYWlyZU1pcnJvcmVkJzogJ1xcdUVFNEInLFxuICAgICAgICAgICAgJ0Nsb3VkSW1wb3J0RXhwb3J0JzogJ1xcdUVFNTUnLFxuICAgICAgICAgICAgJ1RlbXBvcmFyeVVzZXInOiAnXFx1RUU1OCcsXG4gICAgICAgICAgICAnQ2FyZXRTb2xpZDE2JzogJ1xcdUVFNjInLFxuICAgICAgICAgICAgJ0dyb3VwZWREZXNjZW5kaW5nJzogJ1xcdUVFNjYnLFxuICAgICAgICAgICAgJ0dyb3VwZWRBc2NlbmRpbmcnOiAnXFx1RUU2NycsXG4gICAgICAgICAgICAnQXdheVN0YXR1cyc6ICdcXHVFRTZBJyxcbiAgICAgICAgICAgICdNeU1vdmllc1RWJzogJ1xcdUVFNkMnLFxuICAgICAgICAgICAgJ0dlbmVyaWNTY2FuJzogJ1xcdUVFNkYnLFxuICAgICAgICAgICAgJ0F1c3RyYWxpYW5SdWxlcyc6ICdcXHVFRTcwJyxcbiAgICAgICAgICAgICdXaWZpRXRoZXJuZXQnOiAnXFx1RUU3NycsXG4gICAgICAgICAgICAnVHJhY2tlcnNNaXJyb3JlZCc6ICdcXHVFRTkyJyxcbiAgICAgICAgICAgICdEYXRlVGltZU1pcnJvcmVkJzogJ1xcdUVFOTMnLFxuICAgICAgICAgICAgJ1N0b3BTb2xpZCc6ICdcXHVFRTk1JyxcbiAgICAgICAgICAgICdEb3VibGVDaGV2cm9uVXAxMic6ICdcXHVFRTk2JyxcbiAgICAgICAgICAgICdEb3VibGVDaGV2cm9uRG93bjEyJzogJ1xcdUVFOTcnLFxuICAgICAgICAgICAgJ0RvdWJsZUNoZXZyb25MZWZ0MTInOiAnXFx1RUU5OCcsXG4gICAgICAgICAgICAnRG91YmxlQ2hldnJvblJpZ2h0MTInOiAnXFx1RUU5OScsXG4gICAgICAgICAgICAnQ2FsZW5kYXJBZ2VuZGEnOiAnXFx1RUU5QScsXG4gICAgICAgICAgICAnQ29ubmVjdFZpcnR1YWxNYWNoaW5lJzogJ1xcdUVFOUQnLFxuICAgICAgICAgICAgJ0FkZEV2ZW50JzogJ1xcdUVFQjUnLFxuICAgICAgICAgICAgJ0Fzc2V0TGlicmFyeSc6ICdcXHVFRUI2JyxcbiAgICAgICAgICAgICdEYXRhQ29ubmVjdGlvbkxpYnJhcnknOiAnXFx1RUVCNycsXG4gICAgICAgICAgICAnRG9jTGlicmFyeSc6ICdcXHVFRUI4JyxcbiAgICAgICAgICAgICdGb3JtTGlicmFyeSc6ICdcXHVFRUI5JyxcbiAgICAgICAgICAgICdGb3JtTGlicmFyeU1pcnJvcmVkJzogJ1xcdUVFQkEnLFxuICAgICAgICAgICAgJ1JlcG9ydExpYnJhcnknOiAnXFx1RUVCQicsXG4gICAgICAgICAgICAnUmVwb3J0TGlicmFyeU1pcnJvcmVkJzogJ1xcdUVFQkMnLFxuICAgICAgICAgICAgJ0NvbnRhY3RDYXJkJzogJ1xcdUVFQkQnLFxuICAgICAgICAgICAgJ0N1c3RvbUxpc3QnOiAnXFx1RUVCRScsXG4gICAgICAgICAgICAnQ3VzdG9tTGlzdE1pcnJvcmVkJzogJ1xcdUVFQkYnLFxuICAgICAgICAgICAgJ0lzc3VlVHJhY2tpbmcnOiAnXFx1RUVDMCcsXG4gICAgICAgICAgICAnSXNzdWVUcmFja2luZ01pcnJvcmVkJzogJ1xcdUVFQzEnLFxuICAgICAgICAgICAgJ1BpY3R1cmVMaWJyYXJ5JzogJ1xcdUVFQzInLFxuICAgICAgICAgICAgJ09mZmljZUFkZGluc0xvZ28nOiAnXFx1RUVDNycsXG4gICAgICAgICAgICAnT2ZmbGluZU9uZURyaXZlUGFyYWNodXRlJzogJ1xcdUVFQzgnLFxuICAgICAgICAgICAgJ09mZmxpbmVPbmVEcml2ZVBhcmFjaHV0ZURpc2FibGVkJzogJ1xcdUVFQzknLFxuICAgICAgICAgICAgJ1RyaWFuZ2xlU29saWRVcDEyJzogJ1xcdUVFQ0MnLFxuICAgICAgICAgICAgJ1RyaWFuZ2xlU29saWREb3duMTInOiAnXFx1RUVDRCcsXG4gICAgICAgICAgICAnVHJpYW5nbGVTb2xpZExlZnQxMic6ICdcXHVFRUNFJyxcbiAgICAgICAgICAgICdUcmlhbmdsZVNvbGlkUmlnaHQxMic6ICdcXHVFRUNGJyxcbiAgICAgICAgICAgICdUcmlhbmdsZVVwMTInOiAnXFx1RUVEMCcsXG4gICAgICAgICAgICAnVHJpYW5nbGVEb3duMTInOiAnXFx1RUVEMScsXG4gICAgICAgICAgICAnVHJpYW5nbGVMZWZ0MTInOiAnXFx1RUVEMicsXG4gICAgICAgICAgICAnVHJpYW5nbGVSaWdodDEyJzogJ1xcdUVFRDMnLFxuICAgICAgICAgICAgJ0Fycm93VXBSaWdodDgnOiAnXFx1RUVENCcsXG4gICAgICAgICAgICAnQXJyb3dEb3duUmlnaHQ4JzogJ1xcdUVFRDUnLFxuICAgICAgICAgICAgJ0RvY3VtZW50U2V0JzogJ1xcdUVFRDYnLFxuICAgICAgICAgICAgJ0dvVG9EYXNoYm9hcmQnOiAnXFx1RUVFRCcsXG4gICAgICAgICAgICAnRGVsdmVBbmFseXRpY3MnOiAnXFx1RUVFRScsXG4gICAgICAgICAgICAnQXJyb3dVcFJpZ2h0TWlycm9yZWQ4JzogJ1xcdUVFRUYnLFxuICAgICAgICAgICAgJ0Fycm93RG93blJpZ2h0TWlycm9yZWQ4JzogJ1xcdUVFRjAnLFxuICAgICAgICAgICAgJ0NvbXBhbnlEaXJlY3RvcnknOiAnXFx1RUYwRCcsXG4gICAgICAgICAgICAnT3BlbkVucm9sbG1lbnQnOiAnXFx1RUYxQycsXG4gICAgICAgICAgICAnQ29tcGFueURpcmVjdG9yeU1pcnJvcmVkJzogJ1xcdUVGMkInLFxuICAgICAgICAgICAgJ09uZURyaXZlQWRkJzogJ1xcdUVGMzInLFxuICAgICAgICAgICAgJ1Byb2ZpbGVTZWFyY2gnOiAnXFx1RUYzNScsXG4gICAgICAgICAgICAnSGVhZGVyMic6ICdcXHVFRjM2JyxcbiAgICAgICAgICAgICdIZWFkZXIzJzogJ1xcdUVGMzcnLFxuICAgICAgICAgICAgJ0hlYWRlcjQnOiAnXFx1RUYzOCcsXG4gICAgICAgICAgICAnUmluZ2VyU29saWQnOiAnXFx1RUYzQScsXG4gICAgICAgICAgICAnRXllZHJvcHBlcic6ICdcXHVFRjNDJyxcbiAgICAgICAgICAgICdNYXJrZXREb3duJzogJ1xcdUVGNDInLFxuICAgICAgICAgICAgJ0NhbGVuZGFyV29ya1dlZWsnOiAnXFx1RUY1MScsXG4gICAgICAgICAgICAnU2lkZVBhbmVsJzogJ1xcdUVGNTInLFxuICAgICAgICAgICAgJ0dsb2JlRmF2b3JpdGUnOiAnXFx1RUY1MycsXG4gICAgICAgICAgICAnQ2FyZXRUb3BMZWZ0U29saWQ4JzogJ1xcdUVGNTQnLFxuICAgICAgICAgICAgJ0NhcmV0VG9wUmlnaHRTb2xpZDgnOiAnXFx1RUY1NScsXG4gICAgICAgICAgICAnVmlld0FsbDInOiAnXFx1RUY1NicsXG4gICAgICAgICAgICAnRG9jdW1lbnRSZXBseSc6ICdcXHVFRjU3JyxcbiAgICAgICAgICAgICdQbGF5ZXJTZXR0aW5ncyc6ICdcXHVFRjU4JyxcbiAgICAgICAgICAgICdSZWNlaXB0Rm9yd2FyZCc6ICdcXHVFRjU5JyxcbiAgICAgICAgICAgICdSZWNlaXB0UmVwbHknOiAnXFx1RUY1QScsXG4gICAgICAgICAgICAnUmVjZWlwdENoZWNrJzogJ1xcdUVGNUInLFxuICAgICAgICAgICAgJ0ZheCc6ICdcXHVFRjVDJyxcbiAgICAgICAgICAgICdSZWN1cnJpbmdFdmVudCc6ICdcXHVFRjVEJyxcbiAgICAgICAgICAgICdSZXBseUFsdCc6ICdcXHVFRjVFJyxcbiAgICAgICAgICAgICdSZXBseUFsbEFsdCc6ICdcXHVFRjVGJyxcbiAgICAgICAgICAgICdFZGl0U3R5bGUnOiAnXFx1RUY2MCcsXG4gICAgICAgICAgICAnRWRpdE1haWwnOiAnXFx1RUY2MScsXG4gICAgICAgICAgICAnTGlmZXNhdmVyJzogJ1xcdUVGNjInLFxuICAgICAgICAgICAgJ0xpZmVzYXZlckxvY2snOiAnXFx1RUY2MycsXG4gICAgICAgICAgICAnSW5ib3hDaGVjayc6ICdcXHVFRjY0JyxcbiAgICAgICAgICAgICdGb2xkZXJTZWFyY2gnOiAnXFx1RUY2NSdcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmVnaXN0ZXJJY29ucyhzdWJzZXQsIG9wdGlvbnMpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmFicmljLWljb25zLTcuanMubWFwIiwiLy8gWW91ciB1c2Ugb2YgdGhlIGNvbnRlbnQgaW4gdGhlIGZpbGVzIHJlZmVyZW5jZWQgaGVyZSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgbGljZW5zZSBhdCBodHRwczovL2FrYS5tcy9mbHVlbnR1aS1hc3NldHMtbGljZW5zZVxuaW1wb3J0IHsgcmVnaXN0ZXJJY29ucyB9IGZyb20gJ0B1aWZhYnJpYy9zdHlsaW5nJztcbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplSWNvbnMoYmFzZVVybCwgb3B0aW9ucykge1xuICAgIGlmIChiYXNlVXJsID09PSB2b2lkIDApIHsgYmFzZVVybCA9ICcnOyB9XG4gICAgdmFyIHN1YnNldCA9IHtcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIE1vek9zeEZvbnRTbW9vdGhpbmc6ICdncmF5c2NhbGUnLFxuICAgICAgICAgICAgV2Via2l0Rm9udFNtb290aGluZzogJ2FudGlhbGlhc2VkJyxcbiAgICAgICAgICAgIGZvbnRTdHlsZTogJ25vcm1hbCcsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICAgICAgICAgIHNwZWFrOiAnbm9uZSdcbiAgICAgICAgfSxcbiAgICAgICAgZm9udEZhY2U6IHtcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IFwiXFxcIkZhYnJpY01ETDJJY29ucy04XFxcIlwiLFxuICAgICAgICAgICAgc3JjOiBcInVybCgnXCIgKyBiYXNlVXJsICsgXCJmYWJyaWMtaWNvbnMtOC02ZmRmMTUyOC53b2ZmJykgZm9ybWF0KCd3b2ZmJylcIlxuICAgICAgICB9LFxuICAgICAgICBpY29uczoge1xuICAgICAgICAgICAgJ0NvbGxhcHNlTWVudSc6ICdcXHVFRjY2JyxcbiAgICAgICAgICAgICdFeHBhbmRNZW51JzogJ1xcdUVGNjcnLFxuICAgICAgICAgICAgJ0JvYXJkcyc6ICdcXHVFRjY4JyxcbiAgICAgICAgICAgICdTdW5BZGQnOiAnXFx1RUY2OScsXG4gICAgICAgICAgICAnU3VuUXVlc3Rpb25NYXJrJzogJ1xcdUVGNkEnLFxuICAgICAgICAgICAgJ0xhbmRzY2FwZU9yaWVudGF0aW9uJzogJ1xcdUVGNkInLFxuICAgICAgICAgICAgJ0RvY3VtZW50U2VhcmNoJzogJ1xcdUVGNkMnLFxuICAgICAgICAgICAgJ1B1YmxpY0NhbGVuZGFyJzogJ1xcdUVGNkQnLFxuICAgICAgICAgICAgJ1B1YmxpY0NvbnRhY3RDYXJkJzogJ1xcdUVGNkUnLFxuICAgICAgICAgICAgJ1B1YmxpY0VtYWlsJzogJ1xcdUVGNkYnLFxuICAgICAgICAgICAgJ1B1YmxpY0ZvbGRlcic6ICdcXHVFRjcwJyxcbiAgICAgICAgICAgICdXb3JkRG9jdW1lbnQnOiAnXFx1RUY3MScsXG4gICAgICAgICAgICAnUG93ZXJQb2ludERvY3VtZW50JzogJ1xcdUVGNzInLFxuICAgICAgICAgICAgJ0V4Y2VsRG9jdW1lbnQnOiAnXFx1RUY3MycsXG4gICAgICAgICAgICAnR3JvdXBlZExpc3QnOiAnXFx1RUY3NCcsXG4gICAgICAgICAgICAnQ2xhc3Nyb29tTG9nbyc6ICdcXHVFRjc1JyxcbiAgICAgICAgICAgICdTZWN0aW9ucyc6ICdcXHVFRjc2JyxcbiAgICAgICAgICAgICdFZGl0UGhvdG8nOiAnXFx1RUY3NycsXG4gICAgICAgICAgICAnU3RhcmJ1cnN0JzogJ1xcdUVGNzgnLFxuICAgICAgICAgICAgJ1NoYXJlaU9TJzogJ1xcdUVGNzknLFxuICAgICAgICAgICAgJ0FpclRpY2tldHMnOiAnXFx1RUY3QScsXG4gICAgICAgICAgICAnUGVuY2lsUmVwbHknOiAnXFx1RUY3QicsXG4gICAgICAgICAgICAnVGlsZXMyJzogJ1xcdUVGN0MnLFxuICAgICAgICAgICAgJ1NreXBlQ2lyY2xlQ2hlY2snOiAnXFx1RUY3RCcsXG4gICAgICAgICAgICAnU2t5cGVDaXJjbGVDbG9jayc6ICdcXHVFRjdFJyxcbiAgICAgICAgICAgICdTa3lwZUNpcmNsZU1pbnVzJzogJ1xcdUVGN0YnLFxuICAgICAgICAgICAgJ1NreXBlTWVzc2FnZSc6ICdcXHVFRjgzJyxcbiAgICAgICAgICAgICdDbG9zZWRDYXB0aW9uJzogJ1xcdUVGODQnLFxuICAgICAgICAgICAgJ0FUUExvZ28nOiAnXFx1RUY4NScsXG4gICAgICAgICAgICAnT2ZmaWNlRm9ybXNMb2dvSW52ZXJzZSc6ICdcXHVFRjg2JyxcbiAgICAgICAgICAgICdSZWN5Y2xlQmluJzogJ1xcdUVGODcnLFxuICAgICAgICAgICAgJ0VtcHR5UmVjeWNsZUJpbic6ICdcXHVFRjg4JyxcbiAgICAgICAgICAgICdIaWRlMic6ICdcXHVFRjg5JyxcbiAgICAgICAgICAgICdCcmVhZGNydW1iJzogJ1xcdUVGOEMnLFxuICAgICAgICAgICAgJ0JpcnRoZGF5Q2FrZSc6ICdcXHVFRjhEJyxcbiAgICAgICAgICAgICdUaW1lRW50cnknOiAnXFx1RUY5NScsXG4gICAgICAgICAgICAnQ1JNUHJvY2Vzc2VzJzogJ1xcdUVGQjEnLFxuICAgICAgICAgICAgJ1BhZ2VFZGl0JzogJ1xcdUVGQjYnLFxuICAgICAgICAgICAgJ1BhZ2VBcnJvd1JpZ2h0JzogJ1xcdUVGQjgnLFxuICAgICAgICAgICAgJ1BhZ2VSZW1vdmUnOiAnXFx1RUZCQScsXG4gICAgICAgICAgICAnRGF0YWJhc2UnOiAnXFx1RUZDNycsXG4gICAgICAgICAgICAnRGF0YU1hbmFnZW1lbnRTZXR0aW5ncyc6ICdcXHVFRkM4JyxcbiAgICAgICAgICAgICdDUk1TZXJ2aWNlcyc6ICdcXHVFRkQyJyxcbiAgICAgICAgICAgICdFZGl0Q29udGFjdCc6ICdcXHVFRkQzJyxcbiAgICAgICAgICAgICdDb25uZWN0Q29udGFjdHMnOiAnXFx1RUZENCcsXG4gICAgICAgICAgICAnQXBwSWNvbkRlZmF1bHRBZGQnOiAnXFx1RUZEQScsXG4gICAgICAgICAgICAnQXBwSWNvbkRlZmF1bHRMaXN0JzogJ1xcdUVGREUnLFxuICAgICAgICAgICAgJ0FjdGl2YXRlT3JkZXJzJzogJ1xcdUVGRTAnLFxuICAgICAgICAgICAgJ0RlYWN0aXZhdGVPcmRlcnMnOiAnXFx1RUZFMScsXG4gICAgICAgICAgICAnUHJvZHVjdENhdGFsb2cnOiAnXFx1RUZFOCcsXG4gICAgICAgICAgICAnU2NhdHRlckNoYXJ0JzogJ1xcdUVGRUInLFxuICAgICAgICAgICAgJ0FjY291bnRBY3Rpdml0eSc6ICdcXHVFRkY0JyxcbiAgICAgICAgICAgICdEb2N1bWVudE1hbmFnZW1lbnQnOiAnXFx1RUZGQycsXG4gICAgICAgICAgICAnQ1JNUmVwb3J0JzogJ1xcdUVGRkUnLFxuICAgICAgICAgICAgJ0tub3dsZWRnZUFydGljbGUnOiAnXFx1RjAwMCcsXG4gICAgICAgICAgICAnUmVsYXRpb25zaGlwJzogJ1xcdUYwMDMnLFxuICAgICAgICAgICAgJ0hvbWVWZXJpZnknOiAnXFx1RjAwRScsXG4gICAgICAgICAgICAnWmlwRm9sZGVyJzogJ1xcdUYwMTInLFxuICAgICAgICAgICAgJ1N1cnZleVF1ZXN0aW9ucyc6ICdcXHVGMDFCJyxcbiAgICAgICAgICAgICdUZXh0RG9jdW1lbnQnOiAnXFx1RjAyOScsXG4gICAgICAgICAgICAnVGV4dERvY3VtZW50U2hhcmVkJzogJ1xcdUYwMkInLFxuICAgICAgICAgICAgJ1BhZ2VDaGVja2VkT3V0JzogJ1xcdUYwMkMnLFxuICAgICAgICAgICAgJ1BhZ2VTaGFyZWQnOiAnXFx1RjAyRCcsXG4gICAgICAgICAgICAnU2F2ZUFuZENsb3NlJzogJ1xcdUYwMzgnLFxuICAgICAgICAgICAgJ1NjcmlwdCc6ICdcXHVGMDNBJyxcbiAgICAgICAgICAgICdBcmNoaXZlJzogJ1xcdUYwM0YnLFxuICAgICAgICAgICAgJ0FjdGl2aXR5RmVlZCc6ICdcXHVGMDU2JyxcbiAgICAgICAgICAgICdDb21wYXJlJzogJ1xcdUYwNTcnLFxuICAgICAgICAgICAgJ0V2ZW50RGF0ZSc6ICdcXHVGMDU5JyxcbiAgICAgICAgICAgICdBcnJvd1VwUmlnaHQnOiAnXFx1RjA2OScsXG4gICAgICAgICAgICAnQ2FyZXRSaWdodCc6ICdcXHVGMDZCJyxcbiAgICAgICAgICAgICdTZXRBY3Rpb24nOiAnXFx1RjA3MScsXG4gICAgICAgICAgICAnQ2hhdEJvdCc6ICdcXHVGMDhCJyxcbiAgICAgICAgICAgICdDYXJldFNvbGlkTGVmdCc6ICdcXHVGMDhEJyxcbiAgICAgICAgICAgICdDYXJldFNvbGlkRG93bic6ICdcXHVGMDhFJyxcbiAgICAgICAgICAgICdDYXJldFNvbGlkUmlnaHQnOiAnXFx1RjA4RicsXG4gICAgICAgICAgICAnQ2FyZXRTb2xpZFVwJzogJ1xcdUYwOTAnLFxuICAgICAgICAgICAgJ1Bvd2VyQXBwc0xvZ28nOiAnXFx1RjA5MScsXG4gICAgICAgICAgICAnUG93ZXJBcHBzMkxvZ28nOiAnXFx1RjA5MicsXG4gICAgICAgICAgICAnU2VhcmNoSXNzdWUnOiAnXFx1RjA5QScsXG4gICAgICAgICAgICAnU2VhcmNoSXNzdWVNaXJyb3JlZCc6ICdcXHVGMDlCJyxcbiAgICAgICAgICAgICdGYWJyaWNBc3NldExpYnJhcnknOiAnXFx1RjA5QycsXG4gICAgICAgICAgICAnRmFicmljRGF0YUNvbm5lY3Rpb25MaWJyYXJ5JzogJ1xcdUYwOUQnLFxuICAgICAgICAgICAgJ0ZhYnJpY0RvY0xpYnJhcnknOiAnXFx1RjA5RScsXG4gICAgICAgICAgICAnRmFicmljRm9ybUxpYnJhcnknOiAnXFx1RjA5RicsXG4gICAgICAgICAgICAnRmFicmljRm9ybUxpYnJhcnlNaXJyb3JlZCc6ICdcXHVGMEEwJyxcbiAgICAgICAgICAgICdGYWJyaWNSZXBvcnRMaWJyYXJ5JzogJ1xcdUYwQTEnLFxuICAgICAgICAgICAgJ0ZhYnJpY1JlcG9ydExpYnJhcnlNaXJyb3JlZCc6ICdcXHVGMEEyJyxcbiAgICAgICAgICAgICdGYWJyaWNQdWJsaWNGb2xkZXInOiAnXFx1RjBBMycsXG4gICAgICAgICAgICAnRmFicmljRm9sZGVyU2VhcmNoJzogJ1xcdUYwQTQnLFxuICAgICAgICAgICAgJ0ZhYnJpY01vdmV0b0ZvbGRlcic6ICdcXHVGMEE1JyxcbiAgICAgICAgICAgICdGYWJyaWNVbnN5bmNGb2xkZXInOiAnXFx1RjBBNicsXG4gICAgICAgICAgICAnRmFicmljU3luY0ZvbGRlcic6ICdcXHVGMEE3JyxcbiAgICAgICAgICAgICdGYWJyaWNPcGVuRm9sZGVySG9yaXpvbnRhbCc6ICdcXHVGMEE4JyxcbiAgICAgICAgICAgICdGYWJyaWNGb2xkZXInOiAnXFx1RjBBOScsXG4gICAgICAgICAgICAnRmFicmljRm9sZGVyRmlsbCc6ICdcXHVGMEFBJyxcbiAgICAgICAgICAgICdGYWJyaWNOZXdGb2xkZXInOiAnXFx1RjBBQicsXG4gICAgICAgICAgICAnRmFicmljUGljdHVyZUxpYnJhcnknOiAnXFx1RjBBQycsXG4gICAgICAgICAgICAnUGhvdG9WaWRlb01lZGlhJzogJ1xcdUYwQjEnLFxuICAgICAgICAgICAgJ0FkZEZhdm9yaXRlJzogJ1xcdUYwQzgnXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJlZ2lzdGVySWNvbnMoc3Vic2V0LCBvcHRpb25zKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZhYnJpYy1pY29ucy04LmpzLm1hcCIsIi8vIFlvdXIgdXNlIG9mIHRoZSBjb250ZW50IGluIHRoZSBmaWxlcyByZWZlcmVuY2VkIGhlcmUgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIGxpY2Vuc2UgYXQgaHR0cHM6Ly9ha2EubXMvZmx1ZW50dWktYXNzZXRzLWxpY2Vuc2VcbmltcG9ydCB7IHJlZ2lzdGVySWNvbnMgfSBmcm9tICdAdWlmYWJyaWMvc3R5bGluZyc7XG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUljb25zKGJhc2VVcmwsIG9wdGlvbnMpIHtcbiAgICBpZiAoYmFzZVVybCA9PT0gdm9pZCAwKSB7IGJhc2VVcmwgPSAnJzsgfVxuICAgIHZhciBzdWJzZXQgPSB7XG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBNb3pPc3hGb250U21vb3RoaW5nOiAnZ3JheXNjYWxlJyxcbiAgICAgICAgICAgIFdlYmtpdEZvbnRTbW9vdGhpbmc6ICdhbnRpYWxpYXNlZCcsXG4gICAgICAgICAgICBmb250U3R5bGU6ICdub3JtYWwnLFxuICAgICAgICAgICAgZm9udFdlaWdodDogJ25vcm1hbCcsXG4gICAgICAgICAgICBzcGVhazogJ25vbmUnXG4gICAgICAgIH0sXG4gICAgICAgIGZvbnRGYWNlOiB7XG4gICAgICAgICAgICBmb250RmFtaWx5OiBcIlxcXCJGYWJyaWNNREwySWNvbnMtOVxcXCJcIixcbiAgICAgICAgICAgIHNyYzogXCJ1cmwoJ1wiICsgYmFzZVVybCArIFwiZmFicmljLWljb25zLTktYzYxNjJiNDIud29mZicpIGZvcm1hdCgnd29mZicpXCJcbiAgICAgICAgfSxcbiAgICAgICAgaWNvbnM6IHtcbiAgICAgICAgICAgICdBZGRGYXZvcml0ZUZpbGwnOiAnXFx1RjBDOScsXG4gICAgICAgICAgICAnQnVmZmVyVGltZUJlZm9yZSc6ICdcXHVGMENGJyxcbiAgICAgICAgICAgICdCdWZmZXJUaW1lQWZ0ZXInOiAnXFx1RjBEMCcsXG4gICAgICAgICAgICAnQnVmZmVyVGltZUJvdGgnOiAnXFx1RjBEMScsXG4gICAgICAgICAgICAnUHVibGlzaENvbnRlbnQnOiAnXFx1RjBENCcsXG4gICAgICAgICAgICAnQ2xpcGJvYXJkTGlzdCc6ICdcXHVGMEUzJyxcbiAgICAgICAgICAgICdDbGlwYm9hcmRMaXN0TWlycm9yZWQnOiAnXFx1RjBFNCcsXG4gICAgICAgICAgICAnQ2FubmVkQ2hhdCc6ICdcXHVGMEYyJyxcbiAgICAgICAgICAgICdTa3lwZUZvckJ1c2luZXNzTG9nbyc6ICdcXHVGMEZDJyxcbiAgICAgICAgICAgICdUYWJDZW50ZXInOiAnXFx1RjEwMCcsXG4gICAgICAgICAgICAnUGFnZUNoZWNrZWRpbic6ICdcXHVGMTA0JyxcbiAgICAgICAgICAgICdQYWdlTGlzdCc6ICdcXHVGMTA2JyxcbiAgICAgICAgICAgICdSZWFkT3V0TG91ZCc6ICdcXHVGMTEyJyxcbiAgICAgICAgICAgICdDYXJldEJvdHRvbUxlZnRTb2xpZDgnOiAnXFx1RjEyMScsXG4gICAgICAgICAgICAnQ2FyZXRCb3R0b21SaWdodFNvbGlkOCc6ICdcXHVGMTIyJyxcbiAgICAgICAgICAgICdGb2xkZXJIb3Jpem9udGFsJzogJ1xcdUYxMkInLFxuICAgICAgICAgICAgJ01pY3Jvc29mdFN0YWZmaHViTG9nbyc6ICdcXHVGMTMwJyxcbiAgICAgICAgICAgICdHaWZ0Ym94T3Blbic6ICdcXHVGMTMzJyxcbiAgICAgICAgICAgICdTdGF0dXNDaXJjbGVPdXRlcic6ICdcXHVGMTM2JyxcbiAgICAgICAgICAgICdTdGF0dXNDaXJjbGVJbm5lcic6ICdcXHVGMTM3JyxcbiAgICAgICAgICAgICdTdGF0dXNDaXJjbGVSaW5nJzogJ1xcdUYxMzgnLFxuICAgICAgICAgICAgJ1N0YXR1c1RyaWFuZ2xlT3V0ZXInOiAnXFx1RjEzOScsXG4gICAgICAgICAgICAnU3RhdHVzVHJpYW5nbGVJbm5lcic6ICdcXHVGMTNBJyxcbiAgICAgICAgICAgICdTdGF0dXNUcmlhbmdsZUV4Y2xhbWF0aW9uJzogJ1xcdUYxM0InLFxuICAgICAgICAgICAgJ1N0YXR1c0NpcmNsZUV4Y2xhbWF0aW9uJzogJ1xcdUYxM0MnLFxuICAgICAgICAgICAgJ1N0YXR1c0NpcmNsZUVycm9yWCc6ICdcXHVGMTNEJyxcbiAgICAgICAgICAgICdTdGF0dXNDaXJjbGVJbmZvJzogJ1xcdUYxM0YnLFxuICAgICAgICAgICAgJ1N0YXR1c0NpcmNsZUJsb2NrJzogJ1xcdUYxNDAnLFxuICAgICAgICAgICAgJ1N0YXR1c0NpcmNsZUJsb2NrMic6ICdcXHVGMTQxJyxcbiAgICAgICAgICAgICdTdGF0dXNDaXJjbGVRdWVzdGlvbk1hcmsnOiAnXFx1RjE0MicsXG4gICAgICAgICAgICAnU3RhdHVzQ2lyY2xlU3luYyc6ICdcXHVGMTQzJyxcbiAgICAgICAgICAgICdUb2xsJzogJ1xcdUYxNjAnLFxuICAgICAgICAgICAgJ0V4cGxvcmVDb250ZW50U2luZ2xlJzogJ1xcdUYxNjQnLFxuICAgICAgICAgICAgJ0NvbGxhcHNlQ29udGVudCc6ICdcXHVGMTY1JyxcbiAgICAgICAgICAgICdDb2xsYXBzZUNvbnRlbnRTaW5nbGUnOiAnXFx1RjE2NicsXG4gICAgICAgICAgICAnSW5mb1NvbGlkJzogJ1xcdUYxNjcnLFxuICAgICAgICAgICAgJ0dyb3VwTGlzdCc6ICdcXHVGMTY4JyxcbiAgICAgICAgICAgICdQcm9ncmVzc1JpbmdEb3RzJzogJ1xcdUYxNkEnLFxuICAgICAgICAgICAgJ0NhbG9yaWVzQWRkJzogJ1xcdUYxNzInLFxuICAgICAgICAgICAgJ0JyYW5jaEZvcmsnOiAnXFx1RjE3MycsXG4gICAgICAgICAgICAnTXV0ZUNoYXQnOiAnXFx1RjE3QScsXG4gICAgICAgICAgICAnQWRkSG9tZSc6ICdcXHVGMTdCJyxcbiAgICAgICAgICAgICdBZGRXb3JrJzogJ1xcdUYxN0MnLFxuICAgICAgICAgICAgJ01vYmlsZVJlcG9ydCc6ICdcXHVGMThBJyxcbiAgICAgICAgICAgICdTY2FsZVZvbHVtZSc6ICdcXHVGMThDJyxcbiAgICAgICAgICAgICdIYXJkRHJpdmVHcm91cCc6ICdcXHVGMThGJyxcbiAgICAgICAgICAgICdGYXN0TW9kZSc6ICdcXHVGMTlBJyxcbiAgICAgICAgICAgICdUb2dnbGVMZWZ0JzogJ1xcdUYxOUUnLFxuICAgICAgICAgICAgJ1RvZ2dsZVJpZ2h0JzogJ1xcdUYxOUYnLFxuICAgICAgICAgICAgJ1RyaWFuZ2xlU2hhcGUnOiAnXFx1RjFBNycsXG4gICAgICAgICAgICAnUmVjdGFuZ2xlU2hhcGUnOiAnXFx1RjFBOScsXG4gICAgICAgICAgICAnQ3ViZVNoYXBlJzogJ1xcdUYxQUEnLFxuICAgICAgICAgICAgJ1Ryb3BoeTInOiAnXFx1RjFBRScsXG4gICAgICAgICAgICAnQnVja2V0Q29sb3InOiAnXFx1RjFCNicsXG4gICAgICAgICAgICAnQnVja2V0Q29sb3JGaWxsJzogJ1xcdUYxQjcnLFxuICAgICAgICAgICAgJ1Rhc2tib2FyZCc6ICdcXHVGMUMyJyxcbiAgICAgICAgICAgICdTaW5nbGVDb2x1bW4nOiAnXFx1RjFEMycsXG4gICAgICAgICAgICAnRG91YmxlQ29sdW1uJzogJ1xcdUYxRDQnLFxuICAgICAgICAgICAgJ1RyaXBsZUNvbHVtbic6ICdcXHVGMUQ1JyxcbiAgICAgICAgICAgICdDb2x1bW5MZWZ0VHdvVGhpcmRzJzogJ1xcdUYxRDYnLFxuICAgICAgICAgICAgJ0NvbHVtblJpZ2h0VHdvVGhpcmRzJzogJ1xcdUYxRDcnLFxuICAgICAgICAgICAgJ0FjY2Vzc0xvZ29GaWxsJzogJ1xcdUYxREInLFxuICAgICAgICAgICAgJ0FuYWx5dGljc0xvZ28nOiAnXFx1RjFERScsXG4gICAgICAgICAgICAnQW5hbHl0aWNzUXVlcnknOiAnXFx1RjFERicsXG4gICAgICAgICAgICAnTmV3QW5hbHl0aWNzUXVlcnknOiAnXFx1RjFFMCcsXG4gICAgICAgICAgICAnQW5hbHl0aWNzUmVwb3J0JzogJ1xcdUYxRTEnLFxuICAgICAgICAgICAgJ1dvcmRMb2dvJzogJ1xcdUYxRTMnLFxuICAgICAgICAgICAgJ1dvcmRMb2dvRmlsbCc6ICdcXHVGMUU0JyxcbiAgICAgICAgICAgICdFeGNlbExvZ28nOiAnXFx1RjFFNScsXG4gICAgICAgICAgICAnRXhjZWxMb2dvRmlsbCc6ICdcXHVGMUU2JyxcbiAgICAgICAgICAgICdPbmVOb3RlTG9nbyc6ICdcXHVGMUU3JyxcbiAgICAgICAgICAgICdPbmVOb3RlTG9nb0ZpbGwnOiAnXFx1RjFFOCcsXG4gICAgICAgICAgICAnT3V0bG9va0xvZ28nOiAnXFx1RjFFOScsXG4gICAgICAgICAgICAnT3V0bG9va0xvZ29GaWxsJzogJ1xcdUYxRUEnLFxuICAgICAgICAgICAgJ1Bvd2VyUG9pbnRMb2dvJzogJ1xcdUYxRUInLFxuICAgICAgICAgICAgJ1Bvd2VyUG9pbnRMb2dvRmlsbCc6ICdcXHVGMUVDJyxcbiAgICAgICAgICAgICdQdWJsaXNoZXJMb2dvJzogJ1xcdUYxRUQnLFxuICAgICAgICAgICAgJ1B1Ymxpc2hlckxvZ29GaWxsJzogJ1xcdUYxRUUnLFxuICAgICAgICAgICAgJ1NjaGVkdWxlRXZlbnRBY3Rpb24nOiAnXFx1RjFFRicsXG4gICAgICAgICAgICAnRmxhbWVTb2xpZCc6ICdcXHVGMUYzJyxcbiAgICAgICAgICAgICdTZXJ2ZXJQcm9jZXNzZXMnOiAnXFx1RjFGRScsXG4gICAgICAgICAgICAnU2VydmVyJzogJ1xcdUYyMDEnLFxuICAgICAgICAgICAgJ1NhdmVBbGwnOiAnXFx1RjIwMycsXG4gICAgICAgICAgICAnTGlua2VkSW5Mb2dvJzogJ1xcdUYyMEEnLFxuICAgICAgICAgICAgJ0RlY2ltYWxzJzogJ1xcdUYyMTgnLFxuICAgICAgICAgICAgJ1NpZGVQYW5lbE1pcnJvcmVkJzogJ1xcdUYyMjEnLFxuICAgICAgICAgICAgJ1Byb3RlY3RSZXN0cmljdCc6ICdcXHVGMjJBJyxcbiAgICAgICAgICAgICdCbG9nJzogJ1xcdUYyMkInLFxuICAgICAgICAgICAgJ1Vua25vd25NaXJyb3JlZCc6ICdcXHVGMjJFJyxcbiAgICAgICAgICAgICdQdWJsaWNDb250YWN0Q2FyZE1pcnJvcmVkJzogJ1xcdUYyMzAnLFxuICAgICAgICAgICAgJ0dyaWRWaWV3U21hbGwnOiAnXFx1RjIzMicsXG4gICAgICAgICAgICAnR3JpZFZpZXdNZWRpdW0nOiAnXFx1RjIzMycsXG4gICAgICAgICAgICAnR3JpZFZpZXdMYXJnZSc6ICdcXHVGMjM0JyxcbiAgICAgICAgICAgICdTdGVwJzogJ1xcdUYyNDEnLFxuICAgICAgICAgICAgJ1N0ZXBJbnNlcnQnOiAnXFx1RjI0MicsXG4gICAgICAgICAgICAnU3RlcFNoYXJlZCc6ICdcXHVGMjQzJyxcbiAgICAgICAgICAgICdTdGVwU2hhcmVkQWRkJzogJ1xcdUYyNDQnLFxuICAgICAgICAgICAgJ1N0ZXBTaGFyZWRJbnNlcnQnOiAnXFx1RjI0NScsXG4gICAgICAgICAgICAnVmlld0Rhc2hib2FyZCc6ICdcXHVGMjQ2JyxcbiAgICAgICAgICAgICdWaWV3TGlzdCc6ICdcXHVGMjQ3J1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZWdpc3Rlckljb25zKHN1YnNldCwgb3B0aW9ucyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mYWJyaWMtaWNvbnMtOS5qcy5tYXAiLCIvLyBZb3VyIHVzZSBvZiB0aGUgY29udGVudCBpbiB0aGUgZmlsZXMgcmVmZXJlbmNlZCBoZXJlIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBsaWNlbnNlIGF0IGh0dHBzOi8vYWthLm1zL2ZsdWVudHVpLWFzc2V0cy1saWNlbnNlXG5pbXBvcnQgeyByZWdpc3Rlckljb25zIH0gZnJvbSAnQHVpZmFicmljL3N0eWxpbmcnO1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVJY29ucyhiYXNlVXJsLCBvcHRpb25zKSB7XG4gICAgaWYgKGJhc2VVcmwgPT09IHZvaWQgMCkgeyBiYXNlVXJsID0gJyc7IH1cbiAgICB2YXIgc3Vic2V0ID0ge1xuICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgTW96T3N4Rm9udFNtb290aGluZzogJ2dyYXlzY2FsZScsXG4gICAgICAgICAgICBXZWJraXRGb250U21vb3RoaW5nOiAnYW50aWFsaWFzZWQnLFxuICAgICAgICAgICAgZm9udFN0eWxlOiAnbm9ybWFsJyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgICAgICAgc3BlYWs6ICdub25lJ1xuICAgICAgICB9LFxuICAgICAgICBmb250RmFjZToge1xuICAgICAgICAgICAgZm9udEZhbWlseTogXCJcXFwiRmFicmljTURMMkljb25zLTEwXFxcIlwiLFxuICAgICAgICAgICAgc3JjOiBcInVybCgnXCIgKyBiYXNlVXJsICsgXCJmYWJyaWMtaWNvbnMtMTAtYzRkZWQ4ZTQud29mZicpIGZvcm1hdCgnd29mZicpXCJcbiAgICAgICAgfSxcbiAgICAgICAgaWNvbnM6IHtcbiAgICAgICAgICAgICdWaWV3TGlzdEdyb3VwJzogJ1xcdUYyNDgnLFxuICAgICAgICAgICAgJ1ZpZXdMaXN0VHJlZSc6ICdcXHVGMjQ5JyxcbiAgICAgICAgICAgICdUcmlnZ2VyQXV0byc6ICdcXHVGMjRBJyxcbiAgICAgICAgICAgICdUcmlnZ2VyVXNlcic6ICdcXHVGMjRCJyxcbiAgICAgICAgICAgICdQaXZvdENoYXJ0JzogJ1xcdUYyNEMnLFxuICAgICAgICAgICAgJ1N0YWNrZWRCYXJDaGFydCc6ICdcXHVGMjREJyxcbiAgICAgICAgICAgICdTdGFja2VkTGluZUNoYXJ0JzogJ1xcdUYyNEUnLFxuICAgICAgICAgICAgJ0J1aWxkUXVldWUnOiAnXFx1RjI0RicsXG4gICAgICAgICAgICAnQnVpbGRRdWV1ZU5ldyc6ICdcXHVGMjUwJyxcbiAgICAgICAgICAgICdVc2VyRm9sbG93ZWQnOiAnXFx1RjI1QycsXG4gICAgICAgICAgICAnQ29udGFjdExpbmsnOiAnXFx1RjI1RicsXG4gICAgICAgICAgICAnU3RhY2snOiAnXFx1RjI2RicsXG4gICAgICAgICAgICAnQnVsbHNleWUnOiAnXFx1RjI3MicsXG4gICAgICAgICAgICAnVmVubkRpYWdyYW0nOiAnXFx1RjI3MycsXG4gICAgICAgICAgICAnRml2ZVRpbGVHcmlkJzogJ1xcdUYyNzQnLFxuICAgICAgICAgICAgJ0ZvY2FsUG9pbnQnOiAnXFx1RjI3NycsXG4gICAgICAgICAgICAnSW5zZXJ0JzogJ1xcdUYyNzgnLFxuICAgICAgICAgICAgJ1JpbmdlclJlbW92ZSc6ICdcXHVGMjc5JyxcbiAgICAgICAgICAgICdUZWFtc0xvZ29JbnZlcnNlJzogJ1xcdUYyN0EnLFxuICAgICAgICAgICAgJ1RlYW1zTG9nbyc6ICdcXHVGMjdCJyxcbiAgICAgICAgICAgICdUZWFtc0xvZ29GaWxsJzogJ1xcdUYyN0MnLFxuICAgICAgICAgICAgJ1NreXBlRm9yQnVzaW5lc3NMb2dvRmlsbCc6ICdcXHVGMjdEJyxcbiAgICAgICAgICAgICdTaGFyZXBvaW50TG9nbyc6ICdcXHVGMjdFJyxcbiAgICAgICAgICAgICdTaGFyZXBvaW50TG9nb0ZpbGwnOiAnXFx1RjI3RicsXG4gICAgICAgICAgICAnRGVsdmVMb2dvJzogJ1xcdUYyODAnLFxuICAgICAgICAgICAgJ0RlbHZlTG9nb0ZpbGwnOiAnXFx1RjI4MScsXG4gICAgICAgICAgICAnT2ZmaWNlVmlkZW9Mb2dvJzogJ1xcdUYyODInLFxuICAgICAgICAgICAgJ09mZmljZVZpZGVvTG9nb0ZpbGwnOiAnXFx1RjI4MycsXG4gICAgICAgICAgICAnRXhjaGFuZ2VMb2dvJzogJ1xcdUYyODQnLFxuICAgICAgICAgICAgJ0V4Y2hhbmdlTG9nb0ZpbGwnOiAnXFx1RjI4NScsXG4gICAgICAgICAgICAnU2lnbmluJzogJ1xcdUYyODYnLFxuICAgICAgICAgICAgJ0RvY3VtZW50QXBwcm92YWwnOiAnXFx1RjI4QicsXG4gICAgICAgICAgICAnQ2xvbmVUb0Rlc2t0b3AnOiAnXFx1RjI4QycsXG4gICAgICAgICAgICAnSW5zdGFsbFRvRHJpdmUnOiAnXFx1RjI4RCcsXG4gICAgICAgICAgICAnQmx1cic6ICdcXHVGMjhFJyxcbiAgICAgICAgICAgICdCdWlsZCc6ICdcXHVGMjhGJyxcbiAgICAgICAgICAgICdQcm9jZXNzTWV0YVRhc2snOiAnXFx1RjI5MCcsXG4gICAgICAgICAgICAnQnJhbmNoRm9yazInOiAnXFx1RjI5MScsXG4gICAgICAgICAgICAnQnJhbmNoTG9ja2VkJzogJ1xcdUYyOTInLFxuICAgICAgICAgICAgJ0JyYW5jaENvbW1pdCc6ICdcXHVGMjkzJyxcbiAgICAgICAgICAgICdCcmFuY2hDb21wYXJlJzogJ1xcdUYyOTQnLFxuICAgICAgICAgICAgJ0JyYW5jaE1lcmdlJzogJ1xcdUYyOTUnLFxuICAgICAgICAgICAgJ0JyYW5jaFB1bGxSZXF1ZXN0JzogJ1xcdUYyOTYnLFxuICAgICAgICAgICAgJ0JyYW5jaFNlYXJjaCc6ICdcXHVGMjk3JyxcbiAgICAgICAgICAgICdCcmFuY2hTaGVsdmVzZXQnOiAnXFx1RjI5OCcsXG4gICAgICAgICAgICAnUmF3U291cmNlJzogJ1xcdUYyOTknLFxuICAgICAgICAgICAgJ01lcmdlRHVwbGljYXRlJzogJ1xcdUYyOUEnLFxuICAgICAgICAgICAgJ1Jvd3NHcm91cCc6ICdcXHVGMjlCJyxcbiAgICAgICAgICAgICdSb3dzQ2hpbGQnOiAnXFx1RjI5QycsXG4gICAgICAgICAgICAnRGVwbG95JzogJ1xcdUYyOUQnLFxuICAgICAgICAgICAgJ1JlZGVwbG95JzogJ1xcdUYyOUUnLFxuICAgICAgICAgICAgJ1NlcnZlckVudmlyb21lbnQnOiAnXFx1RjI5RicsXG4gICAgICAgICAgICAnVmlzaW9EaWFncmFtJzogJ1xcdUYyQTAnLFxuICAgICAgICAgICAgJ0hpZ2hsaWdodE1hcHBlZFNoYXBlcyc6ICdcXHVGMkExJyxcbiAgICAgICAgICAgICdUZXh0Q2FsbG91dCc6ICdcXHVGMkEyJyxcbiAgICAgICAgICAgICdJY29uU2V0c0ZsYWcnOiAnXFx1RjJBNCcsXG4gICAgICAgICAgICAnVmlzaW9Mb2dvJzogJ1xcdUYyQTcnLFxuICAgICAgICAgICAgJ1Zpc2lvTG9nb0ZpbGwnOiAnXFx1RjJBOCcsXG4gICAgICAgICAgICAnVmlzaW9Eb2N1bWVudCc6ICdcXHVGMkE5JyxcbiAgICAgICAgICAgICdUaW1lbGluZVByb2dyZXNzJzogJ1xcdUYyQUEnLFxuICAgICAgICAgICAgJ1RpbWVsaW5lRGVsaXZlcnknOiAnXFx1RjJBQicsXG4gICAgICAgICAgICAnQmFja2xvZyc6ICdcXHVGMkFDJyxcbiAgICAgICAgICAgICdUZWFtRmF2b3JpdGUnOiAnXFx1RjJBRCcsXG4gICAgICAgICAgICAnVGFza0dyb3VwJzogJ1xcdUYyQUUnLFxuICAgICAgICAgICAgJ1Rhc2tHcm91cE1pcnJvcmVkJzogJ1xcdUYyQUYnLFxuICAgICAgICAgICAgJ1Njb3BlVGVtcGxhdGUnOiAnXFx1RjJCMCcsXG4gICAgICAgICAgICAnQXNzZXNzbWVudEdyb3VwVGVtcGxhdGUnOiAnXFx1RjJCMScsXG4gICAgICAgICAgICAnTmV3VGVhbVByb2plY3QnOiAnXFx1RjJCMicsXG4gICAgICAgICAgICAnQ29tbWVudEFkZCc6ICdcXHVGMkIzJyxcbiAgICAgICAgICAgICdDb21tZW50TmV4dCc6ICdcXHVGMkI0JyxcbiAgICAgICAgICAgICdDb21tZW50UHJldmlvdXMnOiAnXFx1RjJCNScsXG4gICAgICAgICAgICAnU2hvcFNlcnZlcic6ICdcXHVGMkI2JyxcbiAgICAgICAgICAgICdMb2NhbGVMYW5ndWFnZSc6ICdcXHVGMkI3JyxcbiAgICAgICAgICAgICdRdWVyeUxpc3QnOiAnXFx1RjJCOCcsXG4gICAgICAgICAgICAnVXNlclN5bmMnOiAnXFx1RjJCOScsXG4gICAgICAgICAgICAnVXNlclBhdXNlJzogJ1xcdUYyQkEnLFxuICAgICAgICAgICAgJ1N0cmVhbWluZ09mZic6ICdcXHVGMkJCJyxcbiAgICAgICAgICAgICdBcnJvd1RhbGxVcExlZnQnOiAnXFx1RjJCRCcsXG4gICAgICAgICAgICAnQXJyb3dUYWxsVXBSaWdodCc6ICdcXHVGMkJFJyxcbiAgICAgICAgICAgICdBcnJvd1RhbGxEb3duTGVmdCc6ICdcXHVGMkJGJyxcbiAgICAgICAgICAgICdBcnJvd1RhbGxEb3duUmlnaHQnOiAnXFx1RjJDMCcsXG4gICAgICAgICAgICAnRmllbGRFbXB0eSc6ICdcXHVGMkMxJyxcbiAgICAgICAgICAgICdGaWVsZEZpbGxlZCc6ICdcXHVGMkMyJyxcbiAgICAgICAgICAgICdGaWVsZENoYW5nZWQnOiAnXFx1RjJDMycsXG4gICAgICAgICAgICAnRmllbGROb3RDaGFuZ2VkJzogJ1xcdUYyQzQnLFxuICAgICAgICAgICAgJ1Jpbmdlck9mZic6ICdcXHVGMkM1JyxcbiAgICAgICAgICAgICdQbGF5UmVzdW1lJzogJ1xcdUYyQzYnLFxuICAgICAgICAgICAgJ0J1bGxldGVkTGlzdDInOiAnXFx1RjJDNycsXG4gICAgICAgICAgICAnQnVsbGV0ZWRMaXN0Mk1pcnJvcmVkJzogJ1xcdUYyQzgnLFxuICAgICAgICAgICAgJ0ltYWdlQ3Jvc3NoYWlyJzogJ1xcdUYyQzknLFxuICAgICAgICAgICAgJ0dpdEdyYXBoJzogJ1xcdUYyQ0EnLFxuICAgICAgICAgICAgJ1JlcG8nOiAnXFx1RjJDQicsXG4gICAgICAgICAgICAnUmVwb1NvbGlkJzogJ1xcdUYyQ0MnLFxuICAgICAgICAgICAgJ0ZvbGRlclF1ZXJ5JzogJ1xcdUYyQ0QnLFxuICAgICAgICAgICAgJ0ZvbGRlckxpc3QnOiAnXFx1RjJDRScsXG4gICAgICAgICAgICAnRm9sZGVyTGlzdE1pcnJvcmVkJzogJ1xcdUYyQ0YnLFxuICAgICAgICAgICAgJ0xvY2F0aW9uT3V0bGluZSc6ICdcXHVGMkQwJyxcbiAgICAgICAgICAgICdQT0lTb2xpZCc6ICdcXHVGMkQxJyxcbiAgICAgICAgICAgICdDYWxjdWxhdG9yTm90RXF1YWxUbyc6ICdcXHVGMkQyJyxcbiAgICAgICAgICAgICdCb3hTdWJ0cmFjdFNvbGlkJzogJ1xcdUYyRDMnXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJlZ2lzdGVySWNvbnMoc3Vic2V0LCBvcHRpb25zKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZhYnJpYy1pY29ucy0xMC5qcy5tYXAiLCIvLyBZb3VyIHVzZSBvZiB0aGUgY29udGVudCBpbiB0aGUgZmlsZXMgcmVmZXJlbmNlZCBoZXJlIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBsaWNlbnNlIGF0IGh0dHBzOi8vYWthLm1zL2ZsdWVudHVpLWFzc2V0cy1saWNlbnNlXG5pbXBvcnQgeyByZWdpc3Rlckljb25zIH0gZnJvbSAnQHVpZmFicmljL3N0eWxpbmcnO1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVJY29ucyhiYXNlVXJsLCBvcHRpb25zKSB7XG4gICAgaWYgKGJhc2VVcmwgPT09IHZvaWQgMCkgeyBiYXNlVXJsID0gJyc7IH1cbiAgICB2YXIgc3Vic2V0ID0ge1xuICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgTW96T3N4Rm9udFNtb290aGluZzogJ2dyYXlzY2FsZScsXG4gICAgICAgICAgICBXZWJraXRGb250U21vb3RoaW5nOiAnYW50aWFsaWFzZWQnLFxuICAgICAgICAgICAgZm9udFN0eWxlOiAnbm9ybWFsJyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgICAgICAgc3BlYWs6ICdub25lJ1xuICAgICAgICB9LFxuICAgICAgICBmb250RmFjZToge1xuICAgICAgICAgICAgZm9udEZhbWlseTogXCJcXFwiRmFicmljTURMMkljb25zLTExXFxcIlwiLFxuICAgICAgICAgICAgc3JjOiBcInVybCgnXCIgKyBiYXNlVXJsICsgXCJmYWJyaWMtaWNvbnMtMTEtMmE4MzkzZDYud29mZicpIGZvcm1hdCgnd29mZicpXCJcbiAgICAgICAgfSxcbiAgICAgICAgaWNvbnM6IHtcbiAgICAgICAgICAgICdCb3hBZGRpdGlvblNvbGlkJzogJ1xcdUYyRDQnLFxuICAgICAgICAgICAgJ0JveE11bHRpcGx5U29saWQnOiAnXFx1RjJENScsXG4gICAgICAgICAgICAnQm94UGxheVNvbGlkJzogJ1xcdUYyRDYnLFxuICAgICAgICAgICAgJ0JveENoZWNrbWFya1NvbGlkJzogJ1xcdUYyRDcnLFxuICAgICAgICAgICAgJ0NpcmNsZVBhdXNlU29saWQnOiAnXFx1RjJEOCcsXG4gICAgICAgICAgICAnQ2lyY2xlUGF1c2UnOiAnXFx1RjJEOScsXG4gICAgICAgICAgICAnTVNOVmlkZW9zU29saWQnOiAnXFx1RjJEQScsXG4gICAgICAgICAgICAnQ2lyY2xlU3RvcFNvbGlkJzogJ1xcdUYyREInLFxuICAgICAgICAgICAgJ0NpcmNsZVN0b3AnOiAnXFx1RjJEQycsXG4gICAgICAgICAgICAnTmF2aWdhdGVCYWNrJzogJ1xcdUYyREQnLFxuICAgICAgICAgICAgJ05hdmlnYXRlQmFja01pcnJvcmVkJzogJ1xcdUYyREUnLFxuICAgICAgICAgICAgJ05hdmlnYXRlRm9yd2FyZCc6ICdcXHVGMkRGJyxcbiAgICAgICAgICAgICdOYXZpZ2F0ZUZvcndhcmRNaXJyb3JlZCc6ICdcXHVGMkUwJyxcbiAgICAgICAgICAgICdVbmtub3duU29saWQnOiAnXFx1RjJFMScsXG4gICAgICAgICAgICAnVW5rbm93bk1pcnJvcmVkU29saWQnOiAnXFx1RjJFMicsXG4gICAgICAgICAgICAnQ2lyY2xlQWRkaXRpb24nOiAnXFx1RjJFMycsXG4gICAgICAgICAgICAnQ2lyY2xlQWRkaXRpb25Tb2xpZCc6ICdcXHVGMkU0JyxcbiAgICAgICAgICAgICdGaWxlUERCJzogJ1xcdUYyRTUnLFxuICAgICAgICAgICAgJ0ZpbGVUZW1wbGF0ZSc6ICdcXHVGMkU2JyxcbiAgICAgICAgICAgICdGaWxlU1FMJzogJ1xcdUYyRTcnLFxuICAgICAgICAgICAgJ0ZpbGVKQVZBJzogJ1xcdUYyRTgnLFxuICAgICAgICAgICAgJ0ZpbGVBU1BYJzogJ1xcdUYyRTknLFxuICAgICAgICAgICAgJ0ZpbGVDU1MnOiAnXFx1RjJFQScsXG4gICAgICAgICAgICAnRmlsZVNhc3MnOiAnXFx1RjJFQicsXG4gICAgICAgICAgICAnRmlsZUxlc3MnOiAnXFx1RjJFQycsXG4gICAgICAgICAgICAnRmlsZUhUTUwnOiAnXFx1RjJFRCcsXG4gICAgICAgICAgICAnSmF2YVNjcmlwdExhbmd1YWdlJzogJ1xcdUYyRUUnLFxuICAgICAgICAgICAgJ0NTaGFycExhbmd1YWdlJzogJ1xcdUYyRUYnLFxuICAgICAgICAgICAgJ0NTaGFycCc6ICdcXHVGMkYwJyxcbiAgICAgICAgICAgICdWaXN1YWxCYXNpY0xhbmd1YWdlJzogJ1xcdUYyRjEnLFxuICAgICAgICAgICAgJ1ZCJzogJ1xcdUYyRjInLFxuICAgICAgICAgICAgJ0NQbHVzUGx1c0xhbmd1YWdlJzogJ1xcdUYyRjMnLFxuICAgICAgICAgICAgJ0NQbHVzUGx1cyc6ICdcXHVGMkY0JyxcbiAgICAgICAgICAgICdGU2hhcnBMYW5ndWFnZSc6ICdcXHVGMkY1JyxcbiAgICAgICAgICAgICdGU2hhcnAnOiAnXFx1RjJGNicsXG4gICAgICAgICAgICAnVHlwZVNjcmlwdExhbmd1YWdlJzogJ1xcdUYyRjcnLFxuICAgICAgICAgICAgJ1B5dGhvbkxhbmd1YWdlJzogJ1xcdUYyRjgnLFxuICAgICAgICAgICAgJ1BZJzogJ1xcdUYyRjknLFxuICAgICAgICAgICAgJ0NvZmZlZVNjcmlwdCc6ICdcXHVGMkZBJyxcbiAgICAgICAgICAgICdNYXJrRG93bkxhbmd1YWdlJzogJ1xcdUYyRkInLFxuICAgICAgICAgICAgJ0Z1bGxXaWR0aCc6ICdcXHVGMkZFJyxcbiAgICAgICAgICAgICdGdWxsV2lkdGhFZGl0JzogJ1xcdUYyRkYnLFxuICAgICAgICAgICAgJ1BsdWcnOiAnXFx1RjMwMCcsXG4gICAgICAgICAgICAnUGx1Z1NvbGlkJzogJ1xcdUYzMDEnLFxuICAgICAgICAgICAgJ1BsdWdDb25uZWN0ZWQnOiAnXFx1RjMwMicsXG4gICAgICAgICAgICAnUGx1Z0Rpc2Nvbm5lY3RlZCc6ICdcXHVGMzAzJyxcbiAgICAgICAgICAgICdVbmxvY2tTb2xpZCc6ICdcXHVGMzA0JyxcbiAgICAgICAgICAgICdWYXJpYWJsZSc6ICdcXHVGMzA1JyxcbiAgICAgICAgICAgICdQYXJhbWV0ZXInOiAnXFx1RjMwNicsXG4gICAgICAgICAgICAnQ29tbWVudFVyZ2VudCc6ICdcXHVGMzA3JyxcbiAgICAgICAgICAgICdTdG9yeWJvYXJkJzogJ1xcdUYzMDgnLFxuICAgICAgICAgICAgJ0RpZmZJbmxpbmUnOiAnXFx1RjMwOScsXG4gICAgICAgICAgICAnRGlmZlNpZGVCeVNpZGUnOiAnXFx1RjMwQScsXG4gICAgICAgICAgICAnSW1hZ2VEaWZmJzogJ1xcdUYzMEInLFxuICAgICAgICAgICAgJ0ltYWdlUGl4ZWwnOiAnXFx1RjMwQycsXG4gICAgICAgICAgICAnRmlsZUJ1Zyc6ICdcXHVGMzBEJyxcbiAgICAgICAgICAgICdGaWxlQ29kZSc6ICdcXHVGMzBFJyxcbiAgICAgICAgICAgICdGaWxlQ29tbWVudCc6ICdcXHVGMzBGJyxcbiAgICAgICAgICAgICdCdXNpbmVzc0hvdXJzU2lnbic6ICdcXHVGMzEwJyxcbiAgICAgICAgICAgICdGaWxlSW1hZ2UnOiAnXFx1RjMxMScsXG4gICAgICAgICAgICAnRmlsZVN5bWxpbmsnOiAnXFx1RjMxMicsXG4gICAgICAgICAgICAnQXV0b0ZpbGxUZW1wbGF0ZSc6ICdcXHVGMzEzJyxcbiAgICAgICAgICAgICdXb3JrSXRlbSc6ICdcXHVGMzE0JyxcbiAgICAgICAgICAgICdXb3JrSXRlbUJ1Zyc6ICdcXHVGMzE1JyxcbiAgICAgICAgICAgICdMb2dSZW1vdmUnOiAnXFx1RjMxNicsXG4gICAgICAgICAgICAnQ29sdW1uT3B0aW9ucyc6ICdcXHVGMzE3JyxcbiAgICAgICAgICAgICdQYWNrYWdlcyc6ICdcXHVGMzE4JyxcbiAgICAgICAgICAgICdCdWlsZElzc3VlJzogJ1xcdUYzMTknLFxuICAgICAgICAgICAgJ0Fzc2Vzc21lbnRHcm91cCc6ICdcXHVGMzFBJyxcbiAgICAgICAgICAgICdWYXJpYWJsZUdyb3VwJzogJ1xcdUYzMUInLFxuICAgICAgICAgICAgJ0Z1bGxIaXN0b3J5JzogJ1xcdUYzMUMnLFxuICAgICAgICAgICAgJ1doZWVsY2hhaXInOiAnXFx1RjMxRicsXG4gICAgICAgICAgICAnU2luZ2xlQ29sdW1uRWRpdCc6ICdcXHVGMzIxJyxcbiAgICAgICAgICAgICdEb3VibGVDb2x1bW5FZGl0JzogJ1xcdUYzMjInLFxuICAgICAgICAgICAgJ1RyaXBsZUNvbHVtbkVkaXQnOiAnXFx1RjMyMycsXG4gICAgICAgICAgICAnQ29sdW1uTGVmdFR3b1RoaXJkc0VkaXQnOiAnXFx1RjMyNCcsXG4gICAgICAgICAgICAnQ29sdW1uUmlnaHRUd29UaGlyZHNFZGl0JzogJ1xcdUYzMjUnLFxuICAgICAgICAgICAgJ1N0cmVhbUxvZ28nOiAnXFx1RjMyOScsXG4gICAgICAgICAgICAnUGFzc2l2ZUF1dGhlbnRpY2F0aW9uJzogJ1xcdUYzMkEnLFxuICAgICAgICAgICAgJ0FsZXJ0U29saWQnOiAnXFx1RjMzMScsXG4gICAgICAgICAgICAnTWVnYXBob25lU29saWQnOiAnXFx1RjMzMicsXG4gICAgICAgICAgICAnVGFza1NvbGlkJzogJ1xcdUYzMzMnLFxuICAgICAgICAgICAgJ0NvbmZpZ3VyYXRpb25Tb2xpZCc6ICdcXHVGMzM0JyxcbiAgICAgICAgICAgICdCdWdTb2xpZCc6ICdcXHVGMzM1JyxcbiAgICAgICAgICAgICdDcm93blNvbGlkJzogJ1xcdUYzMzYnLFxuICAgICAgICAgICAgJ1Ryb3BoeTJTb2xpZCc6ICdcXHVGMzM3JyxcbiAgICAgICAgICAgICdRdWlja05vdGVTb2xpZCc6ICdcXHVGMzM4JyxcbiAgICAgICAgICAgICdDb25zdHJ1Y3Rpb25Db25lU29saWQnOiAnXFx1RjMzOScsXG4gICAgICAgICAgICAnUGFnZUxpc3RTb2xpZCc6ICdcXHVGMzNBJyxcbiAgICAgICAgICAgICdQYWdlTGlzdE1pcnJvcmVkU29saWQnOiAnXFx1RjMzQicsXG4gICAgICAgICAgICAnU3RhcmJ1cnN0U29saWQnOiAnXFx1RjMzQycsXG4gICAgICAgICAgICAnUmVhZGluZ01vZGVTb2xpZCc6ICdcXHVGMzNEJyxcbiAgICAgICAgICAgICdTYWRTb2xpZCc6ICdcXHVGMzNFJyxcbiAgICAgICAgICAgICdIZWFsdGhTb2xpZCc6ICdcXHVGMzNGJyxcbiAgICAgICAgICAgICdTaGllbGRTb2xpZCc6ICdcXHVGMzQwJyxcbiAgICAgICAgICAgICdHaWZ0Qm94U29saWQnOiAnXFx1RjM0MScsXG4gICAgICAgICAgICAnU2hvcHBpbmdDYXJ0U29saWQnOiAnXFx1RjM0MicsXG4gICAgICAgICAgICAnTWFpbFNvbGlkJzogJ1xcdUYzNDMnLFxuICAgICAgICAgICAgJ0NoYXRTb2xpZCc6ICdcXHVGMzQ0JyxcbiAgICAgICAgICAgICdSaWJib25Tb2xpZCc6ICdcXHVGMzQ1J1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZWdpc3Rlckljb25zKHN1YnNldCwgb3B0aW9ucyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mYWJyaWMtaWNvbnMtMTEuanMubWFwIiwiLy8gWW91ciB1c2Ugb2YgdGhlIGNvbnRlbnQgaW4gdGhlIGZpbGVzIHJlZmVyZW5jZWQgaGVyZSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgbGljZW5zZSBhdCBodHRwczovL2FrYS5tcy9mbHVlbnR1aS1hc3NldHMtbGljZW5zZVxuaW1wb3J0IHsgcmVnaXN0ZXJJY29ucyB9IGZyb20gJ0B1aWZhYnJpYy9zdHlsaW5nJztcbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplSWNvbnMoYmFzZVVybCwgb3B0aW9ucykge1xuICAgIGlmIChiYXNlVXJsID09PSB2b2lkIDApIHsgYmFzZVVybCA9ICcnOyB9XG4gICAgdmFyIHN1YnNldCA9IHtcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIE1vek9zeEZvbnRTbW9vdGhpbmc6ICdncmF5c2NhbGUnLFxuICAgICAgICAgICAgV2Via2l0Rm9udFNtb290aGluZzogJ2FudGlhbGlhc2VkJyxcbiAgICAgICAgICAgIGZvbnRTdHlsZTogJ25vcm1hbCcsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICAgICAgICAgIHNwZWFrOiAnbm9uZSdcbiAgICAgICAgfSxcbiAgICAgICAgZm9udEZhY2U6IHtcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IFwiXFxcIkZhYnJpY01ETDJJY29ucy0xMlxcXCJcIixcbiAgICAgICAgICAgIHNyYzogXCJ1cmwoJ1wiICsgYmFzZVVybCArIFwiZmFicmljLWljb25zLTEyLTdlOTQ1YTFlLndvZmYnKSBmb3JtYXQoJ3dvZmYnKVwiXG4gICAgICAgIH0sXG4gICAgICAgIGljb25zOiB7XG4gICAgICAgICAgICAnRmluYW5jaWFsU29saWQnOiAnXFx1RjM0NicsXG4gICAgICAgICAgICAnRmluYW5jaWFsTWlycm9yZWRTb2xpZCc6ICdcXHVGMzQ3JyxcbiAgICAgICAgICAgICdIZWFkc2V0U29saWQnOiAnXFx1RjM0OCcsXG4gICAgICAgICAgICAnUGVybWlzc2lvbnNTb2xpZCc6ICdcXHVGMzQ5JyxcbiAgICAgICAgICAgICdQYXJraW5nU29saWQnOiAnXFx1RjM0QScsXG4gICAgICAgICAgICAnUGFya2luZ01pcnJvcmVkU29saWQnOiAnXFx1RjM0QicsXG4gICAgICAgICAgICAnRGlhbW9uZFNvbGlkJzogJ1xcdUYzNEMnLFxuICAgICAgICAgICAgJ0FzdGVyaXNrU29saWQnOiAnXFx1RjM0RCcsXG4gICAgICAgICAgICAnT2ZmbGluZVN0b3JhZ2VTb2xpZCc6ICdcXHVGMzRFJyxcbiAgICAgICAgICAgICdCYW5rU29saWQnOiAnXFx1RjM0RicsXG4gICAgICAgICAgICAnRGVjaXNpb25Tb2xpZCc6ICdcXHVGMzUwJyxcbiAgICAgICAgICAgICdQYXJhY2h1dGUnOiAnXFx1RjM1MScsXG4gICAgICAgICAgICAnUGFyYWNodXRlU29saWQnOiAnXFx1RjM1MicsXG4gICAgICAgICAgICAnRmlsdGVyc1NvbGlkJzogJ1xcdUYzNTMnLFxuICAgICAgICAgICAgJ0NvbG9yU29saWQnOiAnXFx1RjM1NCcsXG4gICAgICAgICAgICAnUmV2aWV3U29saWQnOiAnXFx1RjM1NScsXG4gICAgICAgICAgICAnUmV2aWV3UmVxdWVzdFNvbGlkJzogJ1xcdUYzNTYnLFxuICAgICAgICAgICAgJ1Jldmlld1JlcXVlc3RNaXJyb3JlZFNvbGlkJzogJ1xcdUYzNTcnLFxuICAgICAgICAgICAgJ1Jldmlld1Jlc3BvbnNlU29saWQnOiAnXFx1RjM1OCcsXG4gICAgICAgICAgICAnRmVlZGJhY2tSZXF1ZXN0U29saWQnOiAnXFx1RjM1OScsXG4gICAgICAgICAgICAnRmVlZGJhY2tSZXF1ZXN0TWlycm9yZWRTb2xpZCc6ICdcXHVGMzVBJyxcbiAgICAgICAgICAgICdGZWVkYmFja1Jlc3BvbnNlU29saWQnOiAnXFx1RjM1QicsXG4gICAgICAgICAgICAnV29ya0l0ZW1CYXInOiAnXFx1RjM1QycsXG4gICAgICAgICAgICAnV29ya0l0ZW1CYXJTb2xpZCc6ICdcXHVGMzVEJyxcbiAgICAgICAgICAgICdTZXBhcmF0b3InOiAnXFx1RjM1RScsXG4gICAgICAgICAgICAnTmF2aWdhdGVFeHRlcm5hbElubGluZSc6ICdcXHVGMzVGJyxcbiAgICAgICAgICAgICdQbGFuVmlldyc6ICdcXHVGMzYwJyxcbiAgICAgICAgICAgICdUaW1lbGluZU1hdHJpeFZpZXcnOiAnXFx1RjM2MScsXG4gICAgICAgICAgICAnRW5naW5lZXJpbmdHcm91cCc6ICdcXHVGMzYyJyxcbiAgICAgICAgICAgICdQcm9qZWN0Q29sbGVjdGlvbic6ICdcXHVGMzYzJyxcbiAgICAgICAgICAgICdDYXJldEJvdHRvbVJpZ2h0Q2VudGVyOCc6ICdcXHVGMzY0JyxcbiAgICAgICAgICAgICdDYXJldEJvdHRvbUxlZnRDZW50ZXI4JzogJ1xcdUYzNjUnLFxuICAgICAgICAgICAgJ0NhcmV0VG9wUmlnaHRDZW50ZXI4JzogJ1xcdUYzNjYnLFxuICAgICAgICAgICAgJ0NhcmV0VG9wTGVmdENlbnRlcjgnOiAnXFx1RjM2NycsXG4gICAgICAgICAgICAnRG9udXRDaGFydCc6ICdcXHVGMzY4JyxcbiAgICAgICAgICAgICdDaGV2cm9uVW5mb2xkMTAnOiAnXFx1RjM2OScsXG4gICAgICAgICAgICAnQ2hldnJvbkZvbGQxMCc6ICdcXHVGMzZBJyxcbiAgICAgICAgICAgICdEb3VibGVDaGV2cm9uRG93bjgnOiAnXFx1RjM2QicsXG4gICAgICAgICAgICAnRG91YmxlQ2hldnJvblVwOCc6ICdcXHVGMzZDJyxcbiAgICAgICAgICAgICdEb3VibGVDaGV2cm9uTGVmdDgnOiAnXFx1RjM2RCcsXG4gICAgICAgICAgICAnRG91YmxlQ2hldnJvblJpZ2h0OCc6ICdcXHVGMzZFJyxcbiAgICAgICAgICAgICdDaGV2cm9uRG93bkVuZDYnOiAnXFx1RjM2RicsXG4gICAgICAgICAgICAnQ2hldnJvblVwRW5kNic6ICdcXHVGMzcwJyxcbiAgICAgICAgICAgICdDaGV2cm9uTGVmdEVuZDYnOiAnXFx1RjM3MScsXG4gICAgICAgICAgICAnQ2hldnJvblJpZ2h0RW5kNic6ICdcXHVGMzcyJyxcbiAgICAgICAgICAgICdDb250ZXh0TWVudSc6ICdcXHVGMzdDJyxcbiAgICAgICAgICAgICdBenVyZUFQSU1hbmFnZW1lbnQnOiAnXFx1RjM3RicsXG4gICAgICAgICAgICAnQXp1cmVTZXJ2aWNlRW5kcG9pbnQnOiAnXFx1RjM4MCcsXG4gICAgICAgICAgICAnVlNUU0xvZ28nOiAnXFx1RjM4MScsXG4gICAgICAgICAgICAnVlNUU0FsdExvZ28xJzogJ1xcdUYzODInLFxuICAgICAgICAgICAgJ1ZTVFNBbHRMb2dvMic6ICdcXHVGMzgzJyxcbiAgICAgICAgICAgICdGaWxlVHlwZVNvbHV0aW9uJzogJ1xcdUYzODcnLFxuICAgICAgICAgICAgJ1dvcmRMb2dvSW52ZXJzZTE2JzogJ1xcdUYzOTAnLFxuICAgICAgICAgICAgJ1dvcmRMb2dvMTYnOiAnXFx1RjM5MScsXG4gICAgICAgICAgICAnV29yZExvZ29GaWxsMTYnOiAnXFx1RjM5MicsXG4gICAgICAgICAgICAnUG93ZXJQb2ludExvZ29JbnZlcnNlMTYnOiAnXFx1RjM5MycsXG4gICAgICAgICAgICAnUG93ZXJQb2ludExvZ28xNic6ICdcXHVGMzk0JyxcbiAgICAgICAgICAgICdQb3dlclBvaW50TG9nb0ZpbGwxNic6ICdcXHVGMzk1JyxcbiAgICAgICAgICAgICdFeGNlbExvZ29JbnZlcnNlMTYnOiAnXFx1RjM5NicsXG4gICAgICAgICAgICAnRXhjZWxMb2dvMTYnOiAnXFx1RjM5NycsXG4gICAgICAgICAgICAnRXhjZWxMb2dvRmlsbDE2JzogJ1xcdUYzOTgnLFxuICAgICAgICAgICAgJ09uZU5vdGVMb2dvSW52ZXJzZTE2JzogJ1xcdUYzOTknLFxuICAgICAgICAgICAgJ09uZU5vdGVMb2dvMTYnOiAnXFx1RjM5QScsXG4gICAgICAgICAgICAnT25lTm90ZUxvZ29GaWxsMTYnOiAnXFx1RjM5QicsXG4gICAgICAgICAgICAnT3V0bG9va0xvZ29JbnZlcnNlMTYnOiAnXFx1RjM5QycsXG4gICAgICAgICAgICAnT3V0bG9va0xvZ28xNic6ICdcXHVGMzlEJyxcbiAgICAgICAgICAgICdPdXRsb29rTG9nb0ZpbGwxNic6ICdcXHVGMzlFJyxcbiAgICAgICAgICAgICdQdWJsaXNoZXJMb2dvSW52ZXJzZTE2JzogJ1xcdUYzOUYnLFxuICAgICAgICAgICAgJ1B1Ymxpc2hlckxvZ28xNic6ICdcXHVGM0EwJyxcbiAgICAgICAgICAgICdQdWJsaXNoZXJMb2dvRmlsbDE2JzogJ1xcdUYzQTEnLFxuICAgICAgICAgICAgJ1Zpc2lvTG9nb0ludmVyc2UxNic6ICdcXHVGM0EyJyxcbiAgICAgICAgICAgICdWaXNpb0xvZ28xNic6ICdcXHVGM0EzJyxcbiAgICAgICAgICAgICdWaXNpb0xvZ29GaWxsMTYnOiAnXFx1RjNBNCcsXG4gICAgICAgICAgICAnVGVzdEJlYWtlcic6ICdcXHVGM0E1JyxcbiAgICAgICAgICAgICdUZXN0QmVha2VyU29saWQnOiAnXFx1RjNBNicsXG4gICAgICAgICAgICAnVGVzdEV4cGxvcmVTb2xpZCc6ICdcXHVGM0E3JyxcbiAgICAgICAgICAgICdUZXN0QXV0b1NvbGlkJzogJ1xcdUYzQTgnLFxuICAgICAgICAgICAgJ1Rlc3RVc2VyU29saWQnOiAnXFx1RjNBOScsXG4gICAgICAgICAgICAnVGVzdEltcGFjdFNvbGlkJzogJ1xcdUYzQUEnLFxuICAgICAgICAgICAgJ1Rlc3RQbGFuJzogJ1xcdUYzQUInLFxuICAgICAgICAgICAgJ1Rlc3RTdGVwJzogJ1xcdUYzQUMnLFxuICAgICAgICAgICAgJ1Rlc3RQYXJhbWV0ZXInOiAnXFx1RjNBRCcsXG4gICAgICAgICAgICAnVGVzdFN1aXRlJzogJ1xcdUYzQUUnLFxuICAgICAgICAgICAgJ1Rlc3RDYXNlJzogJ1xcdUYzQUYnLFxuICAgICAgICAgICAgJ1NwcmludCc6ICdcXHVGM0IwJyxcbiAgICAgICAgICAgICdTaWduT3V0JzogJ1xcdUYzQjEnLFxuICAgICAgICAgICAgJ1RyaWdnZXJBcHByb3ZhbCc6ICdcXHVGM0IyJyxcbiAgICAgICAgICAgICdSb2NrZXQnOiAnXFx1RjNCMycsXG4gICAgICAgICAgICAnQXp1cmVLZXlWYXVsdCc6ICdcXHVGM0I0JyxcbiAgICAgICAgICAgICdPbmJvYXJkaW5nJzogJ1xcdUYzQkEnLFxuICAgICAgICAgICAgJ1RyYW5zaXRpb24nOiAnXFx1RjNCQycsXG4gICAgICAgICAgICAnTGlrZVNvbGlkJzogJ1xcdUYzQkYnLFxuICAgICAgICAgICAgJ0Rpc2xpa2VTb2xpZCc6ICdcXHVGM0MwJyxcbiAgICAgICAgICAgICdDUk1DdXN0b21lckluc2lnaHRzQXBwJzogJ1xcdUYzQzgnLFxuICAgICAgICAgICAgJ0VkaXRDcmVhdGUnOiAnXFx1RjNDOScsXG4gICAgICAgICAgICAnUGxheVJldmVyc2VSZXN1bWUnOiAnXFx1RjNFNCcsXG4gICAgICAgICAgICAnUGxheVJldmVyc2UnOiAnXFx1RjNFNScsXG4gICAgICAgICAgICAnU2VhcmNoRGF0YSc6ICdcXHVGM0YxJyxcbiAgICAgICAgICAgICdVblNldENvbG9yJzogJ1xcdUYzRjknLFxuICAgICAgICAgICAgJ0RlY2xpbmVDYWxsJzogJ1xcdUY0MDUnXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJlZ2lzdGVySWNvbnMoc3Vic2V0LCBvcHRpb25zKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZhYnJpYy1pY29ucy0xMi5qcy5tYXAiLCIvLyBZb3VyIHVzZSBvZiB0aGUgY29udGVudCBpbiB0aGUgZmlsZXMgcmVmZXJlbmNlZCBoZXJlIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBsaWNlbnNlIGF0IGh0dHBzOi8vYWthLm1zL2ZsdWVudHVpLWFzc2V0cy1saWNlbnNlXG5pbXBvcnQgeyByZWdpc3Rlckljb25zIH0gZnJvbSAnQHVpZmFicmljL3N0eWxpbmcnO1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVJY29ucyhiYXNlVXJsLCBvcHRpb25zKSB7XG4gICAgaWYgKGJhc2VVcmwgPT09IHZvaWQgMCkgeyBiYXNlVXJsID0gJyc7IH1cbiAgICB2YXIgc3Vic2V0ID0ge1xuICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgTW96T3N4Rm9udFNtb290aGluZzogJ2dyYXlzY2FsZScsXG4gICAgICAgICAgICBXZWJraXRGb250U21vb3RoaW5nOiAnYW50aWFsaWFzZWQnLFxuICAgICAgICAgICAgZm9udFN0eWxlOiAnbm9ybWFsJyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgICAgICAgc3BlYWs6ICdub25lJ1xuICAgICAgICB9LFxuICAgICAgICBmb250RmFjZToge1xuICAgICAgICAgICAgZm9udEZhbWlseTogXCJcXFwiRmFicmljTURMMkljb25zLTEzXFxcIlwiLFxuICAgICAgICAgICAgc3JjOiBcInVybCgnXCIgKyBiYXNlVXJsICsgXCJmYWJyaWMtaWNvbnMtMTMtYzM5ODlhMDIud29mZicpIGZvcm1hdCgnd29mZicpXCJcbiAgICAgICAgfSxcbiAgICAgICAgaWNvbnM6IHtcbiAgICAgICAgICAgICdSZWN0YW5ndWxhckNsaXBwaW5nJzogJ1xcdUY0MDcnLFxuICAgICAgICAgICAgJ1RlYW1zTG9nbzE2JzogJ1xcdUY0MEEnLFxuICAgICAgICAgICAgJ1RlYW1zTG9nb0ZpbGwxNic6ICdcXHVGNDBCJyxcbiAgICAgICAgICAgICdTcGFjZXInOiAnXFx1RjQwRCcsXG4gICAgICAgICAgICAnU2t5cGVMb2dvMTYnOiAnXFx1RjQwRScsXG4gICAgICAgICAgICAnU2t5cGVGb3JCdXNpbmVzc0xvZ28xNic6ICdcXHVGNDBGJyxcbiAgICAgICAgICAgICdTa3lwZUZvckJ1c2luZXNzTG9nb0ZpbGwxNic6ICdcXHVGNDEwJyxcbiAgICAgICAgICAgICdGaWx0ZXJTb2xpZCc6ICdcXHVGNDEyJyxcbiAgICAgICAgICAgICdNYWlsVW5kZWxpdmVyZWQnOiAnXFx1RjQxNScsXG4gICAgICAgICAgICAnTWFpbFRlbnRhdGl2ZSc6ICdcXHVGNDE2JyxcbiAgICAgICAgICAgICdNYWlsVGVudGF0aXZlTWlycm9yZWQnOiAnXFx1RjQxNycsXG4gICAgICAgICAgICAnTWFpbFJlbWluZGVyJzogJ1xcdUY0MTgnLFxuICAgICAgICAgICAgJ1JlY2VpcHRVbmRlbGl2ZXJlZCc6ICdcXHVGNDE5JyxcbiAgICAgICAgICAgICdSZWNlaXB0VGVudGF0aXZlJzogJ1xcdUY0MUEnLFxuICAgICAgICAgICAgJ1JlY2VpcHRUZW50YXRpdmVNaXJyb3JlZCc6ICdcXHVGNDFCJyxcbiAgICAgICAgICAgICdJbmJveCc6ICdcXHVGNDFDJyxcbiAgICAgICAgICAgICdJUk1SZXBseSc6ICdcXHVGNDFEJyxcbiAgICAgICAgICAgICdJUk1SZXBseU1pcnJvcmVkJzogJ1xcdUY0MUUnLFxuICAgICAgICAgICAgJ0lSTUZvcndhcmQnOiAnXFx1RjQxRicsXG4gICAgICAgICAgICAnSVJNRm9yd2FyZE1pcnJvcmVkJzogJ1xcdUY0MjAnLFxuICAgICAgICAgICAgJ1ZvaWNlbWFpbElSTSc6ICdcXHVGNDIxJyxcbiAgICAgICAgICAgICdFdmVudEFjY2VwdGVkJzogJ1xcdUY0MjInLFxuICAgICAgICAgICAgJ0V2ZW50VGVudGF0aXZlJzogJ1xcdUY0MjMnLFxuICAgICAgICAgICAgJ0V2ZW50VGVudGF0aXZlTWlycm9yZWQnOiAnXFx1RjQyNCcsXG4gICAgICAgICAgICAnRXZlbnREZWNsaW5lZCc6ICdcXHVGNDI1JyxcbiAgICAgICAgICAgICdJREJhZGdlJzogJ1xcdUY0MjcnLFxuICAgICAgICAgICAgJ0JhY2tncm91bmRDb2xvcic6ICdcXHVGNDJCJyxcbiAgICAgICAgICAgICdPZmZpY2VGb3Jtc0xvZ29JbnZlcnNlMTYnOiAnXFx1RjQzMycsXG4gICAgICAgICAgICAnT2ZmaWNlRm9ybXNMb2dvJzogJ1xcdUY0MzQnLFxuICAgICAgICAgICAgJ09mZmljZUZvcm1zTG9nb0ZpbGwnOiAnXFx1RjQzNScsXG4gICAgICAgICAgICAnT2ZmaWNlRm9ybXNMb2dvMTYnOiAnXFx1RjQzNicsXG4gICAgICAgICAgICAnT2ZmaWNlRm9ybXNMb2dvRmlsbDE2JzogJ1xcdUY0MzcnLFxuICAgICAgICAgICAgJ09mZmljZUZvcm1zTG9nb0ludmVyc2UyNCc6ICdcXHVGNDNBJyxcbiAgICAgICAgICAgICdPZmZpY2VGb3Jtc0xvZ28yNCc6ICdcXHVGNDNCJyxcbiAgICAgICAgICAgICdPZmZpY2VGb3Jtc0xvZ29GaWxsMjQnOiAnXFx1RjQzQycsXG4gICAgICAgICAgICAnUGFnZUxvY2snOiAnXFx1RjQzRicsXG4gICAgICAgICAgICAnTm90RXhlY3V0ZWQnOiAnXFx1RjQ0MCcsXG4gICAgICAgICAgICAnTm90SW1wYWN0ZWRTb2xpZCc6ICdcXHVGNDQxJyxcbiAgICAgICAgICAgICdGaWVsZFJlYWRPbmx5JzogJ1xcdUY0NDInLFxuICAgICAgICAgICAgJ0ZpZWxkUmVxdWlyZWQnOiAnXFx1RjQ0MycsXG4gICAgICAgICAgICAnQmFja2xvZ0JvYXJkJzogJ1xcdUY0NDQnLFxuICAgICAgICAgICAgJ0V4dGVybmFsQnVpbGQnOiAnXFx1RjQ0NScsXG4gICAgICAgICAgICAnRXh0ZXJuYWxURlZDJzogJ1xcdUY0NDYnLFxuICAgICAgICAgICAgJ0V4dGVybmFsWEFNTCc6ICdcXHVGNDQ3JyxcbiAgICAgICAgICAgICdJc3N1ZVNvbGlkJzogJ1xcdUY0NDgnLFxuICAgICAgICAgICAgJ0RlZmVjdFNvbGlkJzogJ1xcdUY0NDknLFxuICAgICAgICAgICAgJ0xhZHlidWdTb2xpZCc6ICdcXHVGNDRBJyxcbiAgICAgICAgICAgICdOdWdldExvZ28nOiAnXFx1RjQ0QycsXG4gICAgICAgICAgICAnVEZWQ0xvZ28nOiAnXFx1RjQ0RCcsXG4gICAgICAgICAgICAnUHJvamVjdExvZ28zMic6ICdcXHVGNDdFJyxcbiAgICAgICAgICAgICdQcm9qZWN0TG9nb0ZpbGwzMic6ICdcXHVGNDdGJyxcbiAgICAgICAgICAgICdQcm9qZWN0TG9nbzE2JzogJ1xcdUY0ODAnLFxuICAgICAgICAgICAgJ1Byb2plY3RMb2dvRmlsbDE2JzogJ1xcdUY0ODEnLFxuICAgICAgICAgICAgJ1N3YXlMb2dvMzInOiAnXFx1RjQ4MicsXG4gICAgICAgICAgICAnU3dheUxvZ29GaWxsMzInOiAnXFx1RjQ4MycsXG4gICAgICAgICAgICAnU3dheUxvZ28xNic6ICdcXHVGNDg0JyxcbiAgICAgICAgICAgICdTd2F5TG9nb0ZpbGwxNic6ICdcXHVGNDg1JyxcbiAgICAgICAgICAgICdDbGFzc05vdGVib29rTG9nbzMyJzogJ1xcdUY0ODYnLFxuICAgICAgICAgICAgJ0NsYXNzTm90ZWJvb2tMb2dvRmlsbDMyJzogJ1xcdUY0ODcnLFxuICAgICAgICAgICAgJ0NsYXNzTm90ZWJvb2tMb2dvMTYnOiAnXFx1RjQ4OCcsXG4gICAgICAgICAgICAnQ2xhc3NOb3RlYm9va0xvZ29GaWxsMTYnOiAnXFx1RjQ4OScsXG4gICAgICAgICAgICAnQ2xhc3NOb3RlYm9va0xvZ29JbnZlcnNlMzInOiAnXFx1RjQ4QScsXG4gICAgICAgICAgICAnQ2xhc3NOb3RlYm9va0xvZ29JbnZlcnNlMTYnOiAnXFx1RjQ4QicsXG4gICAgICAgICAgICAnU3RhZmZOb3RlYm9va0xvZ28zMic6ICdcXHVGNDhDJyxcbiAgICAgICAgICAgICdTdGFmZk5vdGVib29rTG9nb0ZpbGwzMic6ICdcXHVGNDhEJyxcbiAgICAgICAgICAgICdTdGFmZk5vdGVib29rTG9nbzE2JzogJ1xcdUY0OEUnLFxuICAgICAgICAgICAgJ1N0YWZmTm90ZWJvb2tMb2dvRmlsbDE2JzogJ1xcdUY0OEYnLFxuICAgICAgICAgICAgJ1N0YWZmTm90ZWJvb2tMb2dvSW52ZXJ0ZWQzMic6ICdcXHVGNDkwJyxcbiAgICAgICAgICAgICdTdGFmZk5vdGVib29rTG9nb0ludmVydGVkMTYnOiAnXFx1RjQ5MScsXG4gICAgICAgICAgICAnS2FpemFsYUxvZ28nOiAnXFx1RjQ5MicsXG4gICAgICAgICAgICAnVGFza0xvZ28nOiAnXFx1RjQ5MycsXG4gICAgICAgICAgICAnUHJvdGVjdGlvbkNlbnRlckxvZ28zMic6ICdcXHVGNDk0JyxcbiAgICAgICAgICAgICdHYWxsYXRpbkxvZ28nOiAnXFx1RjQ5NicsXG4gICAgICAgICAgICAnR2xvYmUyJzogJ1xcdUY0OUEnLFxuICAgICAgICAgICAgJ0d1aXRhcic6ICdcXHVGNDlCJyxcbiAgICAgICAgICAgICdCcmVha2Zhc3QnOiAnXFx1RjQ5QycsXG4gICAgICAgICAgICAnQnJ1bmNoJzogJ1xcdUY0OUQnLFxuICAgICAgICAgICAgJ0JlZXJNdWcnOiAnXFx1RjQ5RScsXG4gICAgICAgICAgICAnVmFjYXRpb24nOiAnXFx1RjQ5RicsXG4gICAgICAgICAgICAnVGVldGgnOiAnXFx1RjRBMCcsXG4gICAgICAgICAgICAnVGF4aSc6ICdcXHVGNEExJyxcbiAgICAgICAgICAgICdDaG9wc3RpY2tzJzogJ1xcdUY0QTInLFxuICAgICAgICAgICAgJ1N5bmNPY2N1cmVuY2UnOiAnXFx1RjRBMycsXG4gICAgICAgICAgICAnVW5zeW5jT2NjdXJlbmNlJzogJ1xcdUY0QTQnLFxuICAgICAgICAgICAgJ0dJRic6ICdcXHVGNEE5JyxcbiAgICAgICAgICAgICdQcmltYXJ5Q2FsZW5kYXInOiAnXFx1RjRBRScsXG4gICAgICAgICAgICAnU2VhcmNoQ2FsZW5kYXInOiAnXFx1RjRBRicsXG4gICAgICAgICAgICAnVmlkZW9PZmYnOiAnXFx1RjRCMCcsXG4gICAgICAgICAgICAnTWljcm9zb2Z0Rmxvd0xvZ28nOiAnXFx1RjRCMScsXG4gICAgICAgICAgICAnQnVzaW5lc3NDZW50ZXJMb2dvJzogJ1xcdUY0QjInLFxuICAgICAgICAgICAgJ1RvRG9Mb2dvQm90dG9tJzogJ1xcdUY0QjMnLFxuICAgICAgICAgICAgJ1RvRG9Mb2dvVG9wJzogJ1xcdUY0QjQnLFxuICAgICAgICAgICAgJ0VkaXRTb2xpZDEyJzogJ1xcdUY0QjUnLFxuICAgICAgICAgICAgJ0VkaXRTb2xpZE1pcnJvcmVkMTInOiAnXFx1RjRCNicsXG4gICAgICAgICAgICAnVW5lZGl0YWJsZVNvbGlkMTInOiAnXFx1RjRCNycsXG4gICAgICAgICAgICAnVW5lZGl0YWJsZVNvbGlkTWlycm9yZWQxMic6ICdcXHVGNEI4JyxcbiAgICAgICAgICAgICdVbmVkaXRhYmxlTWlycm9yZWQnOiAnXFx1RjRCOScsXG4gICAgICAgICAgICAnQWRtaW5BTG9nbzMyJzogJ1xcdUY0QkEnLFxuICAgICAgICAgICAgJ0FkbWluQUxvZ29GaWxsMzInOiAnXFx1RjRCQicsXG4gICAgICAgICAgICAnVG9Eb0xvZ29JbnZlcnNlJzogJ1xcdUY0QkMnXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJlZ2lzdGVySWNvbnMoc3Vic2V0LCBvcHRpb25zKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZhYnJpYy1pY29ucy0xMy5qcy5tYXAiLCIvLyBZb3VyIHVzZSBvZiB0aGUgY29udGVudCBpbiB0aGUgZmlsZXMgcmVmZXJlbmNlZCBoZXJlIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBsaWNlbnNlIGF0IGh0dHBzOi8vYWthLm1zL2ZsdWVudHVpLWFzc2V0cy1saWNlbnNlXG5pbXBvcnQgeyByZWdpc3Rlckljb25zIH0gZnJvbSAnQHVpZmFicmljL3N0eWxpbmcnO1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVJY29ucyhiYXNlVXJsLCBvcHRpb25zKSB7XG4gICAgaWYgKGJhc2VVcmwgPT09IHZvaWQgMCkgeyBiYXNlVXJsID0gJyc7IH1cbiAgICB2YXIgc3Vic2V0ID0ge1xuICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgTW96T3N4Rm9udFNtb290aGluZzogJ2dyYXlzY2FsZScsXG4gICAgICAgICAgICBXZWJraXRGb250U21vb3RoaW5nOiAnYW50aWFsaWFzZWQnLFxuICAgICAgICAgICAgZm9udFN0eWxlOiAnbm9ybWFsJyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgICAgICAgc3BlYWs6ICdub25lJ1xuICAgICAgICB9LFxuICAgICAgICBmb250RmFjZToge1xuICAgICAgICAgICAgZm9udEZhbWlseTogXCJcXFwiRmFicmljTURMMkljb25zLTE0XFxcIlwiLFxuICAgICAgICAgICAgc3JjOiBcInVybCgnXCIgKyBiYXNlVXJsICsgXCJmYWJyaWMtaWNvbnMtMTQtNWNmNThkYjgud29mZicpIGZvcm1hdCgnd29mZicpXCJcbiAgICAgICAgfSxcbiAgICAgICAgaWNvbnM6IHtcbiAgICAgICAgICAgICdTbm9vemUnOiAnXFx1RjRCRCcsXG4gICAgICAgICAgICAnV2FmZmxlT2ZmaWNlMzY1JzogJ1xcdUY0RTAnLFxuICAgICAgICAgICAgJ0ltYWdlU2VhcmNoJzogJ1xcdUY0RTgnLFxuICAgICAgICAgICAgJ05ld3NTZWFyY2gnOiAnXFx1RjRFOScsXG4gICAgICAgICAgICAnVmlkZW9TZWFyY2gnOiAnXFx1RjRFQScsXG4gICAgICAgICAgICAnUic6ICdcXHVGNEVCJyxcbiAgICAgICAgICAgICdGb250Q29sb3JBJzogJ1xcdUY0RUMnLFxuICAgICAgICAgICAgJ0ZvbnRDb2xvclN3YXRjaCc6ICdcXHVGNEVEJyxcbiAgICAgICAgICAgICdMaWdodFdlaWdodCc6ICdcXHVGNEVFJyxcbiAgICAgICAgICAgICdOb3JtYWxXZWlnaHQnOiAnXFx1RjRFRicsXG4gICAgICAgICAgICAnU2VtaWJvbGRXZWlnaHQnOiAnXFx1RjRGMCcsXG4gICAgICAgICAgICAnR3JvdXBPYmplY3QnOiAnXFx1RjRGMScsXG4gICAgICAgICAgICAnVW5ncm91cE9iamVjdCc6ICdcXHVGNEYyJyxcbiAgICAgICAgICAgICdBbGlnbkhvcml6b250YWxMZWZ0JzogJ1xcdUY0RjMnLFxuICAgICAgICAgICAgJ0FsaWduSG9yaXpvbnRhbENlbnRlcic6ICdcXHVGNEY0JyxcbiAgICAgICAgICAgICdBbGlnbkhvcml6b250YWxSaWdodCc6ICdcXHVGNEY1JyxcbiAgICAgICAgICAgICdBbGlnblZlcnRpY2FsVG9wJzogJ1xcdUY0RjYnLFxuICAgICAgICAgICAgJ0FsaWduVmVydGljYWxDZW50ZXInOiAnXFx1RjRGNycsXG4gICAgICAgICAgICAnQWxpZ25WZXJ0aWNhbEJvdHRvbSc6ICdcXHVGNEY4JyxcbiAgICAgICAgICAgICdIb3Jpem9udGFsRGlzdHJpYnV0ZUNlbnRlcic6ICdcXHVGNEY5JyxcbiAgICAgICAgICAgICdWZXJ0aWNhbERpc3RyaWJ1dGVDZW50ZXInOiAnXFx1RjRGQScsXG4gICAgICAgICAgICAnRWxsaXBzZSc6ICdcXHVGNEZCJyxcbiAgICAgICAgICAgICdMaW5lJzogJ1xcdUY0RkMnLFxuICAgICAgICAgICAgJ09jdGFnb24nOiAnXFx1RjRGRCcsXG4gICAgICAgICAgICAnSGV4YWdvbic6ICdcXHVGNEZFJyxcbiAgICAgICAgICAgICdQZW50YWdvbic6ICdcXHVGNEZGJyxcbiAgICAgICAgICAgICdSaWdodFRyaWFuZ2xlJzogJ1xcdUY1MDAnLFxuICAgICAgICAgICAgJ0hhbGZDaXJjbGUnOiAnXFx1RjUwMScsXG4gICAgICAgICAgICAnUXVhcnRlckNpcmNsZSc6ICdcXHVGNTAyJyxcbiAgICAgICAgICAgICdUaHJlZVF1YXJ0ZXJDaXJjbGUnOiAnXFx1RjUwMycsXG4gICAgICAgICAgICAnNlBvaW50U3Rhcic6ICdcXHVGNTA0JyxcbiAgICAgICAgICAgICcxMlBvaW50U3Rhcic6ICdcXHVGNTA1JyxcbiAgICAgICAgICAgICdBcnJhbmdlQnJpbmdUb0Zyb250JzogJ1xcdUY1MDYnLFxuICAgICAgICAgICAgJ0FycmFuZ2VTZW5kVG9CYWNrJzogJ1xcdUY1MDcnLFxuICAgICAgICAgICAgJ0FycmFuZ2VTZW5kQmFja3dhcmQnOiAnXFx1RjUwOCcsXG4gICAgICAgICAgICAnQXJyYW5nZUJyaW5nRm9yd2FyZCc6ICdcXHVGNTA5JyxcbiAgICAgICAgICAgICdCb3JkZXJEYXNoJzogJ1xcdUY1MEEnLFxuICAgICAgICAgICAgJ0JvcmRlckRvdCc6ICdcXHVGNTBCJyxcbiAgICAgICAgICAgICdMaW5lU3R5bGUnOiAnXFx1RjUwQycsXG4gICAgICAgICAgICAnTGluZVRoaWNrbmVzcyc6ICdcXHVGNTBEJyxcbiAgICAgICAgICAgICdXaW5kb3dFZGl0JzogJ1xcdUY1MEUnLFxuICAgICAgICAgICAgJ0hpbnRUZXh0JzogJ1xcdUY1MEYnLFxuICAgICAgICAgICAgJ01lZGlhQWRkJzogJ1xcdUY1MTAnLFxuICAgICAgICAgICAgJ0FuY2hvckxvY2snOiAnXFx1RjUxMScsXG4gICAgICAgICAgICAnQXV0b0hlaWdodCc6ICdcXHVGNTEyJyxcbiAgICAgICAgICAgICdDaGFydFNlcmllcyc6ICdcXHVGNTEzJyxcbiAgICAgICAgICAgICdDaGFydFhBbmdsZSc6ICdcXHVGNTE0JyxcbiAgICAgICAgICAgICdDaGFydFlBbmdsZSc6ICdcXHVGNTE1JyxcbiAgICAgICAgICAgICdDb21ib2JveCc6ICdcXHVGNTE2JyxcbiAgICAgICAgICAgICdMaW5lU3BhY2luZyc6ICdcXHVGNTE3JyxcbiAgICAgICAgICAgICdQYWRkaW5nJzogJ1xcdUY1MTgnLFxuICAgICAgICAgICAgJ1BhZGRpbmdUb3AnOiAnXFx1RjUxOScsXG4gICAgICAgICAgICAnUGFkZGluZ0JvdHRvbSc6ICdcXHVGNTFBJyxcbiAgICAgICAgICAgICdQYWRkaW5nTGVmdCc6ICdcXHVGNTFCJyxcbiAgICAgICAgICAgICdQYWRkaW5nUmlnaHQnOiAnXFx1RjUxQycsXG4gICAgICAgICAgICAnTmF2aWdhdGlvbkZsaXBwZXInOiAnXFx1RjUxRCcsXG4gICAgICAgICAgICAnQWxpZ25KdXN0aWZ5JzogJ1xcdUY1MUUnLFxuICAgICAgICAgICAgJ1RleHRPdmVyZmxvdyc6ICdcXHVGNTFGJyxcbiAgICAgICAgICAgICdWaXN1YWxzRm9sZGVyJzogJ1xcdUY1MjAnLFxuICAgICAgICAgICAgJ1Zpc3VhbHNTdG9yZSc6ICdcXHVGNTIxJyxcbiAgICAgICAgICAgICdQaWN0dXJlQ2VudGVyJzogJ1xcdUY1MjInLFxuICAgICAgICAgICAgJ1BpY3R1cmVGaWxsJzogJ1xcdUY1MjMnLFxuICAgICAgICAgICAgJ1BpY3R1cmVQb3NpdGlvbic6ICdcXHVGNTI0JyxcbiAgICAgICAgICAgICdQaWN0dXJlU3RyZXRjaCc6ICdcXHVGNTI1JyxcbiAgICAgICAgICAgICdQaWN0dXJlVGlsZSc6ICdcXHVGNTI2JyxcbiAgICAgICAgICAgICdTbGlkZXInOiAnXFx1RjUyNycsXG4gICAgICAgICAgICAnU2xpZGVySGFuZGxlU2l6ZSc6ICdcXHVGNTI4JyxcbiAgICAgICAgICAgICdEZWZhdWx0UmF0aW8nOiAnXFx1RjUyOScsXG4gICAgICAgICAgICAnTnVtYmVyU2VxdWVuY2UnOiAnXFx1RjUyQScsXG4gICAgICAgICAgICAnR1VJRCc6ICdcXHVGNTJCJyxcbiAgICAgICAgICAgICdSZXBvcnRBZGQnOiAnXFx1RjUyQycsXG4gICAgICAgICAgICAnRGFzaGJvYXJkQWRkJzogJ1xcdUY1MkQnLFxuICAgICAgICAgICAgJ01hcFBpblNvbGlkJzogJ1xcdUY1MkUnLFxuICAgICAgICAgICAgJ1dlYlB1Ymxpc2gnOiAnXFx1RjUyRicsXG4gICAgICAgICAgICAnUGllU2luZ2xlU29saWQnOiAnXFx1RjUzMCcsXG4gICAgICAgICAgICAnQmxvY2tlZFNvbGlkJzogJ1xcdUY1MzEnLFxuICAgICAgICAgICAgJ0RyaWxsRG93bic6ICdcXHVGNTMyJyxcbiAgICAgICAgICAgICdEcmlsbERvd25Tb2xpZCc6ICdcXHVGNTMzJyxcbiAgICAgICAgICAgICdEcmlsbEV4cGFuZCc6ICdcXHVGNTM0JyxcbiAgICAgICAgICAgICdEcmlsbFNob3cnOiAnXFx1RjUzNScsXG4gICAgICAgICAgICAnU3BlY2lhbEV2ZW50JzogJ1xcdUY1MzYnLFxuICAgICAgICAgICAgJ09uZURyaXZlRm9sZGVyMTYnOiAnXFx1RjUzQicsXG4gICAgICAgICAgICAnRnVuY3Rpb25hbE1hbmFnZXJEYXNoYm9hcmQnOiAnXFx1RjU0MicsXG4gICAgICAgICAgICAnQklEYXNoYm9hcmQnOiAnXFx1RjU0MycsXG4gICAgICAgICAgICAnQ29kZUVkaXQnOiAnXFx1RjU0NCcsXG4gICAgICAgICAgICAnUmVuZXdhbEN1cnJlbnQnOiAnXFx1RjU0NScsXG4gICAgICAgICAgICAnUmVuZXdhbEZ1dHVyZSc6ICdcXHVGNTQ2JyxcbiAgICAgICAgICAgICdTcGxpdE9iamVjdCc6ICdcXHVGNTQ3JyxcbiAgICAgICAgICAgICdCdWxrVXBsb2FkJzogJ1xcdUY1NDgnLFxuICAgICAgICAgICAgJ0Rvd25sb2FkRG9jdW1lbnQnOiAnXFx1RjU0OScsXG4gICAgICAgICAgICAnR3JlZXRpbmdDYXJkJzogJ1xcdUY1NEInLFxuICAgICAgICAgICAgJ0Zsb3dlcic6ICdcXHVGNTRFJyxcbiAgICAgICAgICAgICdXYWl0bGlzdENvbmZpcm0nOiAnXFx1RjU1MCcsXG4gICAgICAgICAgICAnV2FpdGxpc3RDb25maXJtTWlycm9yZWQnOiAnXFx1RjU1MScsXG4gICAgICAgICAgICAnTGFwdG9wU2VjdXJlJzogJ1xcdUY1NTInLFxuICAgICAgICAgICAgJ0RyYWdPYmplY3QnOiAnXFx1RjU1MycsXG4gICAgICAgICAgICAnRW50cnlWaWV3JzogJ1xcdUY1NTQnLFxuICAgICAgICAgICAgJ0VudHJ5RGVjbGluZSc6ICdcXHVGNTU1JyxcbiAgICAgICAgICAgICdDb250YWN0Q2FyZFNldHRpbmdzJzogJ1xcdUY1NTYnLFxuICAgICAgICAgICAgJ0NvbnRhY3RDYXJkU2V0dGluZ3NNaXJyb3JlZCc6ICdcXHVGNTU3J1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZWdpc3Rlckljb25zKHN1YnNldCwgb3B0aW9ucyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mYWJyaWMtaWNvbnMtMTQuanMubWFwIiwiLy8gWW91ciB1c2Ugb2YgdGhlIGNvbnRlbnQgaW4gdGhlIGZpbGVzIHJlZmVyZW5jZWQgaGVyZSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgbGljZW5zZSBhdCBodHRwczovL2FrYS5tcy9mbHVlbnR1aS1hc3NldHMtbGljZW5zZVxuaW1wb3J0IHsgcmVnaXN0ZXJJY29ucyB9IGZyb20gJ0B1aWZhYnJpYy9zdHlsaW5nJztcbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplSWNvbnMoYmFzZVVybCwgb3B0aW9ucykge1xuICAgIGlmIChiYXNlVXJsID09PSB2b2lkIDApIHsgYmFzZVVybCA9ICcnOyB9XG4gICAgdmFyIHN1YnNldCA9IHtcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIE1vek9zeEZvbnRTbW9vdGhpbmc6ICdncmF5c2NhbGUnLFxuICAgICAgICAgICAgV2Via2l0Rm9udFNtb290aGluZzogJ2FudGlhbGlhc2VkJyxcbiAgICAgICAgICAgIGZvbnRTdHlsZTogJ25vcm1hbCcsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICAgICAgICAgIHNwZWFrOiAnbm9uZSdcbiAgICAgICAgfSxcbiAgICAgICAgZm9udEZhY2U6IHtcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IFwiXFxcIkZhYnJpY01ETDJJY29ucy0xNVxcXCJcIixcbiAgICAgICAgICAgIHNyYzogXCJ1cmwoJ1wiICsgYmFzZVVybCArIFwiZmFicmljLWljb25zLTE1LTM4MDcyNTFiLndvZmYnKSBmb3JtYXQoJ3dvZmYnKVwiXG4gICAgICAgIH0sXG4gICAgICAgIGljb25zOiB7XG4gICAgICAgICAgICAnQ2FsZW5kYXJTZXR0aW5ncyc6ICdcXHVGNTU4JyxcbiAgICAgICAgICAgICdDYWxlbmRhclNldHRpbmdzTWlycm9yZWQnOiAnXFx1RjU1OScsXG4gICAgICAgICAgICAnSGFyZERyaXZlTG9jayc6ICdcXHVGNTVBJyxcbiAgICAgICAgICAgICdIYXJkRHJpdmVVbmxvY2snOiAnXFx1RjU1QicsXG4gICAgICAgICAgICAnQWNjb3VudE1hbmFnZW1lbnQnOiAnXFx1RjU1QycsXG4gICAgICAgICAgICAnUmVwb3J0V2FybmluZyc6ICdcXHVGNTY5JyxcbiAgICAgICAgICAgICdUcmFuc2l0aW9uUG9wJzogJ1xcdUY1QjInLFxuICAgICAgICAgICAgJ1RyYW5zaXRpb25QdXNoJzogJ1xcdUY1QjMnLFxuICAgICAgICAgICAgJ1RyYW5zaXRpb25FZmZlY3QnOiAnXFx1RjVCNCcsXG4gICAgICAgICAgICAnTG9va3VwRW50aXRpZXMnOiAnXFx1RjVCNScsXG4gICAgICAgICAgICAnRXhwbG9yZURhdGEnOiAnXFx1RjVCNicsXG4gICAgICAgICAgICAnQWRkQm9va21hcmsnOiAnXFx1RjVCNycsXG4gICAgICAgICAgICAnU2VhcmNoQm9va21hcmsnOiAnXFx1RjVCOCcsXG4gICAgICAgICAgICAnRHJpbGxUaHJvdWdoJzogJ1xcdUY1QjknLFxuICAgICAgICAgICAgJ01hc3RlckRhdGFiYXNlJzogJ1xcdUY1QkEnLFxuICAgICAgICAgICAgJ0NlcnRpZmllZERhdGFiYXNlJzogJ1xcdUY1QkInLFxuICAgICAgICAgICAgJ01heGltdW1WYWx1ZSc6ICdcXHVGNUJDJyxcbiAgICAgICAgICAgICdNaW5pbXVtVmFsdWUnOiAnXFx1RjVCRCcsXG4gICAgICAgICAgICAnVmlzdWFsU3R1ZGlvSURFTG9nbzMyJzogJ1xcdUY1RDAnLFxuICAgICAgICAgICAgJ1Bhc3RlQXNUZXh0JzogJ1xcdUY1RDUnLFxuICAgICAgICAgICAgJ1Bhc3RlQXNDb2RlJzogJ1xcdUY1RDYnLFxuICAgICAgICAgICAgJ0Jyb3dzZXJUYWInOiAnXFx1RjVENycsXG4gICAgICAgICAgICAnQnJvd3NlclRhYlNjcmVlbnNob3QnOiAnXFx1RjVEOCcsXG4gICAgICAgICAgICAnRGVza3RvcFNjcmVlbnNob3QnOiAnXFx1RjVEOScsXG4gICAgICAgICAgICAnRmlsZVlNTCc6ICdcXHVGNURBJyxcbiAgICAgICAgICAgICdDbGlwYm9hcmRTb2xpZCc6ICdcXHVGNURDJyxcbiAgICAgICAgICAgICdGYWJyaWNVc2VyRm9sZGVyJzogJ1xcdUY1RTUnLFxuICAgICAgICAgICAgJ0ZhYnJpY05ldHdvcmtGb2xkZXInOiAnXFx1RjVFNicsXG4gICAgICAgICAgICAnQnVsbHNleWVUYXJnZXQnOiAnXFx1RjVGMCcsXG4gICAgICAgICAgICAnQW5hbHl0aWNzVmlldyc6ICdcXHVGNUYxJyxcbiAgICAgICAgICAgICdWaWRlbzM2MEdlbmVyaWMnOiAnXFx1RjYwOScsXG4gICAgICAgICAgICAnVW50YWcnOiAnXFx1RjYwQicsXG4gICAgICAgICAgICAnTGVhdmUnOiAnXFx1RjYyNycsXG4gICAgICAgICAgICAnVHJlbmRpbmcxMic6ICdcXHVGNjJEJyxcbiAgICAgICAgICAgICdCbG9ja2VkMTInOiAnXFx1RjYyRScsXG4gICAgICAgICAgICAnV2FybmluZzEyJzogJ1xcdUY2MkYnLFxuICAgICAgICAgICAgJ0NoZWNrZWRPdXRCeU90aGVyMTInOiAnXFx1RjYzMCcsXG4gICAgICAgICAgICAnQ2hlY2tlZE91dEJ5WW91MTInOiAnXFx1RjYzMScsXG4gICAgICAgICAgICAnQ2lyY2xlU2hhcGVTb2xpZCc6ICdcXHVGNjNDJyxcbiAgICAgICAgICAgICdTcXVhcmVTaGFwZVNvbGlkJzogJ1xcdUY2M0QnLFxuICAgICAgICAgICAgJ1RyaWFuZ2xlU2hhcGVTb2xpZCc6ICdcXHVGNjNFJyxcbiAgICAgICAgICAgICdEcm9wU2hhcGVTb2xpZCc6ICdcXHVGNjNGJyxcbiAgICAgICAgICAgICdSZWN0YW5nbGVTaGFwZVNvbGlkJzogJ1xcdUY2NDAnLFxuICAgICAgICAgICAgJ1pvb21Ub0ZpdCc6ICdcXHVGNjQ5JyxcbiAgICAgICAgICAgICdJbnNlcnRDb2x1bW5zTGVmdCc6ICdcXHVGNjRBJyxcbiAgICAgICAgICAgICdJbnNlcnRDb2x1bW5zUmlnaHQnOiAnXFx1RjY0QicsXG4gICAgICAgICAgICAnSW5zZXJ0Um93c0Fib3ZlJzogJ1xcdUY2NEMnLFxuICAgICAgICAgICAgJ0luc2VydFJvd3NCZWxvdyc6ICdcXHVGNjREJyxcbiAgICAgICAgICAgICdEZWxldGVDb2x1bW5zJzogJ1xcdUY2NEUnLFxuICAgICAgICAgICAgJ0RlbGV0ZVJvd3MnOiAnXFx1RjY0RicsXG4gICAgICAgICAgICAnRGVsZXRlUm93c01pcnJvcmVkJzogJ1xcdUY2NTAnLFxuICAgICAgICAgICAgJ0RlbGV0ZVRhYmxlJzogJ1xcdUY2NTEnLFxuICAgICAgICAgICAgJ0FjY291bnRCcm93c2VyJzogJ1xcdUY2NTInLFxuICAgICAgICAgICAgJ1ZlcnNpb25Db250cm9sUHVzaCc6ICdcXHVGNjY0JyxcbiAgICAgICAgICAgICdTdGFja2VkQ29sdW1uQ2hhcnQyJzogJ1xcdUY2NjYnLFxuICAgICAgICAgICAgJ1RyaXBsZUNvbHVtbldpZGUnOiAnXFx1RjY2RScsXG4gICAgICAgICAgICAnUXVhZENvbHVtbic6ICdcXHVGNjZGJyxcbiAgICAgICAgICAgICdXaGl0ZUJvYXJkQXBwMTYnOiAnXFx1RjY3MycsXG4gICAgICAgICAgICAnV2hpdGVCb2FyZEFwcDMyJzogJ1xcdUY2NzQnLFxuICAgICAgICAgICAgJ1Bpbm5lZFNvbGlkJzogJ1xcdUY2NzYnLFxuICAgICAgICAgICAgJ0luc2VydFNpZ25hdHVyZUxpbmUnOiAnXFx1RjY3NycsXG4gICAgICAgICAgICAnQXJyYW5nZUJ5RnJvbSc6ICdcXHVGNjc4JyxcbiAgICAgICAgICAgICdQaGlzaGluZyc6ICdcXHVGNjc5JyxcbiAgICAgICAgICAgICdDcmVhdGVNYWlsUnVsZSc6ICdcXHVGNjdBJyxcbiAgICAgICAgICAgICdQdWJsaXNoQ291cnNlJzogJ1xcdUY2OTknLFxuICAgICAgICAgICAgJ0RpY3Rpb25hcnlSZW1vdmUnOiAnXFx1RjY5QScsXG4gICAgICAgICAgICAnVXNlclJlbW92ZSc6ICdcXHVGNjlCJyxcbiAgICAgICAgICAgICdVc2VyRXZlbnQnOiAnXFx1RjY5QycsXG4gICAgICAgICAgICAnRW5jcnlwdGlvbic6ICdcXHVGNjlEJyxcbiAgICAgICAgICAgICdQYXNzd29yZEZpZWxkJzogJ1xcdUY2QUEnLFxuICAgICAgICAgICAgJ09wZW5Jbk5ld1RhYic6ICdcXHVGNkFCJyxcbiAgICAgICAgICAgICdIaWRlMyc6ICdcXHVGNkFDJyxcbiAgICAgICAgICAgICdWZXJpZmllZEJyYW5kU29saWQnOiAnXFx1RjZBRCcsXG4gICAgICAgICAgICAnTWFya0FzUHJvdGVjdGVkJzogJ1xcdUY2QUUnLFxuICAgICAgICAgICAgJ0F1dGhlbnRpY2F0b3JBcHAnOiAnXFx1RjZCMScsXG4gICAgICAgICAgICAnV2ViVGVtcGxhdGUnOiAnXFx1RjZCMicsXG4gICAgICAgICAgICAnRGVmZW5kZXJUVk0nOiAnXFx1RjZCMycsXG4gICAgICAgICAgICAnTWVkYWxTb2xpZCc6ICdcXHVGNkI5JyxcbiAgICAgICAgICAgICdEMzY1VGFsZW50TGVhcm4nOiAnXFx1RjZCQicsXG4gICAgICAgICAgICAnRDM2NVRhbGVudEluc2lnaHQnOiAnXFx1RjZCQycsXG4gICAgICAgICAgICAnRDM2NVRhbGVudEhSQ29yZSc6ICdcXHVGNkJEJyxcbiAgICAgICAgICAgICdCYWNrbG9nTGlzdCc6ICdcXHVGNkJGJyxcbiAgICAgICAgICAgICdCdXR0b25Db250cm9sJzogJ1xcdUY2QzAnLFxuICAgICAgICAgICAgJ1RhYmxlR3JvdXAnOiAnXFx1RjZEOScsXG4gICAgICAgICAgICAnTW91bnRhaW5DbGltYmluZyc6ICdcXHVGNkRCJyxcbiAgICAgICAgICAgICdUYWdVbmtub3duJzogJ1xcdUY2REYnLFxuICAgICAgICAgICAgJ1RhZ1Vua25vd25NaXJyb3InOiAnXFx1RjZFMCcsXG4gICAgICAgICAgICAnVGFnVW5rbm93bjEyJzogJ1xcdUY2RTEnLFxuICAgICAgICAgICAgJ1RhZ1Vua25vd24xMk1pcnJvcic6ICdcXHVGNkUyJyxcbiAgICAgICAgICAgICdMaW5rMTInOiAnXFx1RjZFMycsXG4gICAgICAgICAgICAnUHJlc2VudGF0aW9uJzogJ1xcdUY2RTQnLFxuICAgICAgICAgICAgJ1ByZXNlbnRhdGlvbjEyJzogJ1xcdUY2RTUnLFxuICAgICAgICAgICAgJ0xvY2sxMic6ICdcXHVGNkU2JyxcbiAgICAgICAgICAgICdCdWlsZERlZmluaXRpb24nOiAnXFx1RjZFOScsXG4gICAgICAgICAgICAnUmVsZWFzZURlZmluaXRpb24nOiAnXFx1RjZFQScsXG4gICAgICAgICAgICAnU2F2ZVRlbXBsYXRlJzogJ1xcdUY2RUMnLFxuICAgICAgICAgICAgJ1VzZXJHYXVnZSc6ICdcXHVGNkVEJyxcbiAgICAgICAgICAgICdCbG9ja2VkU2l0ZVNvbGlkMTInOiAnXFx1RjcwQScsXG4gICAgICAgICAgICAnVGFnU29saWQnOiAnXFx1RjcwRScsXG4gICAgICAgICAgICAnT2ZmaWNlQ2hhdCc6ICdcXHVGNzBGJ1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZWdpc3Rlckljb25zKHN1YnNldCwgb3B0aW9ucyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mYWJyaWMtaWNvbnMtMTUuanMubWFwIiwiLy8gWW91ciB1c2Ugb2YgdGhlIGNvbnRlbnQgaW4gdGhlIGZpbGVzIHJlZmVyZW5jZWQgaGVyZSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgbGljZW5zZSBhdCBodHRwczovL2FrYS5tcy9mbHVlbnR1aS1hc3NldHMtbGljZW5zZVxuaW1wb3J0IHsgcmVnaXN0ZXJJY29ucyB9IGZyb20gJ0B1aWZhYnJpYy9zdHlsaW5nJztcbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplSWNvbnMoYmFzZVVybCwgb3B0aW9ucykge1xuICAgIGlmIChiYXNlVXJsID09PSB2b2lkIDApIHsgYmFzZVVybCA9ICcnOyB9XG4gICAgdmFyIHN1YnNldCA9IHtcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIE1vek9zeEZvbnRTbW9vdGhpbmc6ICdncmF5c2NhbGUnLFxuICAgICAgICAgICAgV2Via2l0Rm9udFNtb290aGluZzogJ2FudGlhbGlhc2VkJyxcbiAgICAgICAgICAgIGZvbnRTdHlsZTogJ25vcm1hbCcsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICAgICAgICAgIHNwZWFrOiAnbm9uZSdcbiAgICAgICAgfSxcbiAgICAgICAgZm9udEZhY2U6IHtcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IFwiXFxcIkZhYnJpY01ETDJJY29ucy0xNlxcXCJcIixcbiAgICAgICAgICAgIHNyYzogXCJ1cmwoJ1wiICsgYmFzZVVybCArIFwiZmFicmljLWljb25zLTE2LTljZjkzZjNiLndvZmYnKSBmb3JtYXQoJ3dvZmYnKVwiXG4gICAgICAgIH0sXG4gICAgICAgIGljb25zOiB7XG4gICAgICAgICAgICAnT2ZmaWNlQ2hhdFNvbGlkJzogJ1xcdUY3MTAnLFxuICAgICAgICAgICAgJ01haWxTY2hlZHVsZSc6ICdcXHVGNzJFJyxcbiAgICAgICAgICAgICdXYXJuaW5nU29saWQnOiAnXFx1RjczNicsXG4gICAgICAgICAgICAnQmxvY2tlZDJTb2xpZCc6ICdcXHVGNzM3JyxcbiAgICAgICAgICAgICdTa3lwZUNpcmNsZUFycm93JzogJ1xcdUY3NDcnLFxuICAgICAgICAgICAgJ1NreXBlQXJyb3cnOiAnXFx1Rjc0OCcsXG4gICAgICAgICAgICAnU3luY1N0YXR1cyc6ICdcXHVGNzUxJyxcbiAgICAgICAgICAgICdTeW5jU3RhdHVzU29saWQnOiAnXFx1Rjc1MicsXG4gICAgICAgICAgICAnUHJvamVjdERvY3VtZW50JzogJ1xcdUY3NTknLFxuICAgICAgICAgICAgJ1RvRG9Mb2dvT3V0bGluZSc6ICdcXHVGNzVCJyxcbiAgICAgICAgICAgICdWaXNpb09ubGluZUxvZ29GaWxsMzInOiAnXFx1Rjc1RicsXG4gICAgICAgICAgICAnVmlzaW9PbmxpbmVMb2dvMzInOiAnXFx1Rjc2MCcsXG4gICAgICAgICAgICAnVmlzaW9PbmxpbmVMb2dvQ2xvdWQzMic6ICdcXHVGNzYxJyxcbiAgICAgICAgICAgICdWaXNpb0RpYWdyYW1TeW5jJzogJ1xcdUY3NjInLFxuICAgICAgICAgICAgJ0V2ZW50MTInOiAnXFx1Rjc2MycsXG4gICAgICAgICAgICAnRXZlbnREYXRlTWlzc2VkMTInOiAnXFx1Rjc2NCcsXG4gICAgICAgICAgICAnVXNlck9wdGlvbmFsJzogJ1xcdUY3NjcnLFxuICAgICAgICAgICAgJ1Jlc3BvbnNlc01lbnUnOiAnXFx1Rjc2OCcsXG4gICAgICAgICAgICAnRG91YmxlRG93bkFycm93JzogJ1xcdUY3NjknLFxuICAgICAgICAgICAgJ0Rpc3RyaWJ1dGVEb3duJzogJ1xcdUY3NkEnLFxuICAgICAgICAgICAgJ0Jvb2ttYXJrUmVwb3J0JzogJ1xcdUY3NkInLFxuICAgICAgICAgICAgJ0ZpbHRlclNldHRpbmdzJzogJ1xcdUY3NkMnLFxuICAgICAgICAgICAgJ0dyaXBwZXJEb3RzVmVydGljYWwnOiAnXFx1Rjc3MicsXG4gICAgICAgICAgICAnTWFpbEF0dGFjaGVkJzogJ1xcdUY3NzQnLFxuICAgICAgICAgICAgJ0FkZEluJzogJ1xcdUY3NzUnLFxuICAgICAgICAgICAgJ0xpbmtlZERhdGFiYXNlJzogJ1xcdUY3NzknLFxuICAgICAgICAgICAgJ1RhYmxlTGluayc6ICdcXHVGNzdBJyxcbiAgICAgICAgICAgICdQcm9tb3RlZERhdGFiYXNlJzogJ1xcdUY3N0QnLFxuICAgICAgICAgICAgJ0JhckNoYXJ0VmVydGljYWxGaWx0ZXInOiAnXFx1Rjc3RScsXG4gICAgICAgICAgICAnQmFyQ2hhcnRWZXJ0aWNhbEZpbHRlclNvbGlkJzogJ1xcdUY3N0YnLFxuICAgICAgICAgICAgJ01pY09mZjInOiAnXFx1Rjc4MScsXG4gICAgICAgICAgICAnTWljcm9zb2Z0VHJhbnNsYXRvckxvZ28nOiAnXFx1Rjc4MicsXG4gICAgICAgICAgICAnU2hvd1RpbWVBcyc6ICdcXHVGNzg3JyxcbiAgICAgICAgICAgICdGaWxlUmVxdWVzdCc6ICdcXHVGNzg5JyxcbiAgICAgICAgICAgICdXb3JrSXRlbUFsZXJ0JzogJ1xcdUY3OEYnLFxuICAgICAgICAgICAgJ1Bvd2VyQklMb2dvMTYnOiAnXFx1Rjc5MCcsXG4gICAgICAgICAgICAnUG93ZXJCSUxvZ29CYWNrcGxhdGUxNic6ICdcXHVGNzkxJyxcbiAgICAgICAgICAgICdCdWxsZXRlZExpc3RUZXh0JzogJ1xcdUY3OTInLFxuICAgICAgICAgICAgJ0J1bGxldGVkTGlzdEJ1bGxldCc6ICdcXHVGNzkzJyxcbiAgICAgICAgICAgICdCdWxsZXRlZExpc3RUZXh0TWlycm9yZWQnOiAnXFx1Rjc5NCcsXG4gICAgICAgICAgICAnQnVsbGV0ZWRMaXN0QnVsbGV0TWlycm9yZWQnOiAnXFx1Rjc5NScsXG4gICAgICAgICAgICAnTnVtYmVyZWRMaXN0VGV4dCc6ICdcXHVGNzk2JyxcbiAgICAgICAgICAgICdOdW1iZXJlZExpc3ROdW1iZXInOiAnXFx1Rjc5NycsXG4gICAgICAgICAgICAnTnVtYmVyZWRMaXN0VGV4dE1pcnJvcmVkJzogJ1xcdUY3OTgnLFxuICAgICAgICAgICAgJ051bWJlcmVkTGlzdE51bWJlck1pcnJvcmVkJzogJ1xcdUY3OTknLFxuICAgICAgICAgICAgJ1JlbW92ZUxpbmtDaGFpbic6ICdcXHVGNzlBJyxcbiAgICAgICAgICAgICdSZW1vdmVMaW5rWCc6ICdcXHVGNzlCJyxcbiAgICAgICAgICAgICdGYWJyaWNUZXh0SGlnaGxpZ2h0JzogJ1xcdUY3OUMnLFxuICAgICAgICAgICAgJ0NsZWFyRm9ybWF0dGluZ0EnOiAnXFx1Rjc5RCcsXG4gICAgICAgICAgICAnQ2xlYXJGb3JtYXR0aW5nRXJhc2VyJzogJ1xcdUY3OUUnLFxuICAgICAgICAgICAgJ1Bob3RvMkZpbGwnOiAnXFx1Rjc5RicsXG4gICAgICAgICAgICAnSW5jcmVhc2VJbmRlbnRUZXh0JzogJ1xcdUY3QTAnLFxuICAgICAgICAgICAgJ0luY3JlYXNlSW5kZW50QXJyb3cnOiAnXFx1RjdBMScsXG4gICAgICAgICAgICAnRGVjcmVhc2VJbmRlbnRUZXh0JzogJ1xcdUY3QTInLFxuICAgICAgICAgICAgJ0RlY3JlYXNlSW5kZW50QXJyb3cnOiAnXFx1RjdBMycsXG4gICAgICAgICAgICAnSW5jcmVhc2VJbmRlbnRUZXh0TWlycm9yZWQnOiAnXFx1RjdBNCcsXG4gICAgICAgICAgICAnSW5jcmVhc2VJbmRlbnRBcnJvd01pcnJvcmVkJzogJ1xcdUY3QTUnLFxuICAgICAgICAgICAgJ0RlY3JlYXNlSW5kZW50VGV4dE1pcnJvcmVkJzogJ1xcdUY3QTYnLFxuICAgICAgICAgICAgJ0RlY3JlYXNlSW5kZW50QXJyb3dNaXJyb3JlZCc6ICdcXHVGN0E3JyxcbiAgICAgICAgICAgICdDaGVja0xpc3RUZXh0JzogJ1xcdUY3QTgnLFxuICAgICAgICAgICAgJ0NoZWNrTGlzdENoZWNrJzogJ1xcdUY3QTknLFxuICAgICAgICAgICAgJ0NoZWNrTGlzdFRleHRNaXJyb3JlZCc6ICdcXHVGN0FBJyxcbiAgICAgICAgICAgICdDaGVja0xpc3RDaGVja01pcnJvcmVkJzogJ1xcdUY3QUInLFxuICAgICAgICAgICAgJ051bWJlclN5bWJvbCc6ICdcXHVGN0FDJyxcbiAgICAgICAgICAgICdDb3Vwb24nOiAnXFx1RjdCQycsXG4gICAgICAgICAgICAnVmVyaWZpZWRCcmFuZCc6ICdcXHVGN0JEJyxcbiAgICAgICAgICAgICdSZWxlYXNlR2F0ZSc6ICdcXHVGN0JFJyxcbiAgICAgICAgICAgICdSZWxlYXNlR2F0ZUNoZWNrJzogJ1xcdUY3QkYnLFxuICAgICAgICAgICAgJ1JlbGVhc2VHYXRlRXJyb3InOiAnXFx1RjdDMCcsXG4gICAgICAgICAgICAnTTM2NUludm9pY2luZ0xvZ28nOiAnXFx1RjdDMScsXG4gICAgICAgICAgICAnUmVtb3ZlRnJvbVNob3BwaW5nTGlzdCc6ICdcXHVGN0Q1JyxcbiAgICAgICAgICAgICdTaGllbGRBbGVydCc6ICdcXHVGN0Q3JyxcbiAgICAgICAgICAgICdGYWJyaWNUZXh0SGlnaGxpZ2h0Q29tcG9zaXRlJzogJ1xcdUY3REEnLFxuICAgICAgICAgICAgJ0RhdGFmbG93cyc6ICdcXHVGN0REJyxcbiAgICAgICAgICAgICdHZW5lcmljU2NhbkZpbGxlZCc6ICdcXHVGN0RFJyxcbiAgICAgICAgICAgICdEaWFnbm9zdGljRGF0YUJhclRvb2x0aXAnOiAnXFx1RjdERicsXG4gICAgICAgICAgICAnU2F2ZVRvTW9iaWxlJzogJ1xcdUY3RTAnLFxuICAgICAgICAgICAgJ09yaWVudGF0aW9uMic6ICdcXHVGN0UxJyxcbiAgICAgICAgICAgICdTY3JlZW5DYXN0JzogJ1xcdUY3RTInLFxuICAgICAgICAgICAgJ1Nob3dHcmlkJzogJ1xcdUY3RTMnLFxuICAgICAgICAgICAgJ1NuYXBUb0dyaWQnOiAnXFx1RjdFNCcsXG4gICAgICAgICAgICAnQ29udGFjdExpc3QnOiAnXFx1RjdFNScsXG4gICAgICAgICAgICAnTmV3TWFpbCc6ICdcXHVGN0VBJyxcbiAgICAgICAgICAgICdFeWVTaGFkb3cnOiAnXFx1RjdFQicsXG4gICAgICAgICAgICAnRmFicmljRm9sZGVyQ29uZmlybSc6ICdcXHVGN0ZGJyxcbiAgICAgICAgICAgICdJbmZvcm1hdGlvbkJhcnJpZXJzJzogJ1xcdUY4MDMnLFxuICAgICAgICAgICAgJ0NvbW1lbnRBY3RpdmUnOiAnXFx1RjgwNCcsXG4gICAgICAgICAgICAnQ29sdW1uVmVydGljYWxTZWN0aW9uRWRpdCc6ICdcXHVGODA2JyxcbiAgICAgICAgICAgICdXYXZpbmdIYW5kJzogJ1xcdUY4MDcnLFxuICAgICAgICAgICAgJ1NoYWtlRGV2aWNlJzogJ1xcdUY4MEEnLFxuICAgICAgICAgICAgJ1NtYXJ0R2xhc3NSZW1vdGUnOiAnXFx1RjgwQicsXG4gICAgICAgICAgICAnUm90YXRlOTBDbG9ja3dpc2UnOiAnXFx1RjgwRCcsXG4gICAgICAgICAgICAnUm90YXRlOTBDb3VudGVyQ2xvY2t3aXNlJzogJ1xcdUY4MEUnLFxuICAgICAgICAgICAgJ0NhbXBhaWduVGVtcGxhdGUnOiAnXFx1RjgxMScsXG4gICAgICAgICAgICAnQ2hhcnRUZW1wbGF0ZSc6ICdcXHVGODEyJyxcbiAgICAgICAgICAgICdQYWdlTGlzdEZpbHRlcic6ICdcXHVGODEzJyxcbiAgICAgICAgICAgICdTZWNvbmRhcnlOYXYnOiAnXFx1RjgxNCcsXG4gICAgICAgICAgICAnQ29sdW1uVmVydGljYWxTZWN0aW9uJzogJ1xcdUY4MUUnLFxuICAgICAgICAgICAgJ1NreXBlQ2lyY2xlU2xhc2gnOiAnXFx1RjgyNScsXG4gICAgICAgICAgICAnU2t5cGVTbGFzaCc6ICdcXHVGODI2J1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZWdpc3Rlckljb25zKHN1YnNldCwgb3B0aW9ucyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mYWJyaWMtaWNvbnMtMTYuanMubWFwIiwiLy8gWW91ciB1c2Ugb2YgdGhlIGNvbnRlbnQgaW4gdGhlIGZpbGVzIHJlZmVyZW5jZWQgaGVyZSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgbGljZW5zZSBhdCBodHRwczovL2FrYS5tcy9mbHVlbnR1aS1hc3NldHMtbGljZW5zZVxuaW1wb3J0IHsgcmVnaXN0ZXJJY29ucyB9IGZyb20gJ0B1aWZhYnJpYy9zdHlsaW5nJztcbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplSWNvbnMoYmFzZVVybCwgb3B0aW9ucykge1xuICAgIGlmIChiYXNlVXJsID09PSB2b2lkIDApIHsgYmFzZVVybCA9ICcnOyB9XG4gICAgdmFyIHN1YnNldCA9IHtcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIE1vek9zeEZvbnRTbW9vdGhpbmc6ICdncmF5c2NhbGUnLFxuICAgICAgICAgICAgV2Via2l0Rm9udFNtb290aGluZzogJ2FudGlhbGlhc2VkJyxcbiAgICAgICAgICAgIGZvbnRTdHlsZTogJ25vcm1hbCcsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICAgICAgICAgIHNwZWFrOiAnbm9uZSdcbiAgICAgICAgfSxcbiAgICAgICAgZm9udEZhY2U6IHtcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IFwiXFxcIkZhYnJpY01ETDJJY29ucy0xN1xcXCJcIixcbiAgICAgICAgICAgIHNyYzogXCJ1cmwoJ1wiICsgYmFzZVVybCArIFwiZmFicmljLWljb25zLTE3LTBjNGVkNzAxLndvZmYnKSBmb3JtYXQoJ3dvZmYnKVwiXG4gICAgICAgIH0sXG4gICAgICAgIGljb25zOiB7XG4gICAgICAgICAgICAnQ3VzdG9taXplVG9vbGJhcic6ICdcXHVGODI4JyxcbiAgICAgICAgICAgICdEdXBsaWNhdGVSb3cnOiAnXFx1RjgyQScsXG4gICAgICAgICAgICAnUmVtb3ZlRnJvbVRyYXNoJzogJ1xcdUY4MkInLFxuICAgICAgICAgICAgJ01haWxPcHRpb25zJzogJ1xcdUY4MkMnLFxuICAgICAgICAgICAgJ0NoaWxkb2YnOiAnXFx1RjgyRCcsXG4gICAgICAgICAgICAnRm9vdGVyJzogJ1xcdUY4MkUnLFxuICAgICAgICAgICAgJ0hlYWRlcic6ICdcXHVGODJGJyxcbiAgICAgICAgICAgICdCYXJDaGFydFZlcnRpY2FsRmlsbCc6ICdcXHVGODMwJyxcbiAgICAgICAgICAgICdTdGFja2VkQ29sdW1uQ2hhcnQyRmlsbCc6ICdcXHVGODMxJyxcbiAgICAgICAgICAgICdQbGFpblRleHQnOiAnXFx1RjgzNCcsXG4gICAgICAgICAgICAnQWNjZXNzaWJpbHR5Q2hlY2tlcic6ICdcXHVGODM1JyxcbiAgICAgICAgICAgICdEYXRhYmFzZVN5bmMnOiAnXFx1Rjg0MicsXG4gICAgICAgICAgICAnUmVzZXJ2YXRpb25PcmRlcnMnOiAnXFx1Rjg0NScsXG4gICAgICAgICAgICAnVGFiT25lQ29sdW1uJzogJ1xcdUY4NDknLFxuICAgICAgICAgICAgJ1RhYlR3b0NvbHVtbic6ICdcXHVGODRBJyxcbiAgICAgICAgICAgICdUYWJUaHJlZUNvbHVtbic6ICdcXHVGODRCJyxcbiAgICAgICAgICAgICdCdWxsZXRlZFRyZWVMaXN0JzogJ1xcdUY4NEMnLFxuICAgICAgICAgICAgJ01pY3Jvc29mdFRyYW5zbGF0b3JMb2dvR3JlZW4nOiAnXFx1Rjg1MicsXG4gICAgICAgICAgICAnTWljcm9zb2Z0VHJhbnNsYXRvckxvZ29CbHVlJzogJ1xcdUY4NTMnLFxuICAgICAgICAgICAgJ0ludGVybmFsSW52ZXN0aWdhdGlvbic6ICdcXHVGODU0JyxcbiAgICAgICAgICAgICdBZGRSZWFjdGlvbic6ICdcXHVGODVEJyxcbiAgICAgICAgICAgICdDb250YWN0SGVhcnQnOiAnXFx1Rjg2MicsXG4gICAgICAgICAgICAnVmlzdWFsbHlJbXBhaXJlZCc6ICdcXHVGODY2JyxcbiAgICAgICAgICAgICdFdmVudFRvRG9Mb2dvJzogJ1xcdUY4NjknLFxuICAgICAgICAgICAgJ1ZhcmlhYmxlMic6ICdcXHVGODZEJyxcbiAgICAgICAgICAgICdNb2RlbGluZ1ZpZXcnOiAnXFx1Rjg3MScsXG4gICAgICAgICAgICAnRGlzY29ubmVjdFZpcnR1YWxNYWNoaW5lJzogJ1xcdUY4NzMnLFxuICAgICAgICAgICAgJ1JlcG9ydExvY2snOiAnXFx1Rjg3NScsXG4gICAgICAgICAgICAnVW5lZGl0YWJsZTInOiAnXFx1Rjg3NicsXG4gICAgICAgICAgICAnVW5lZGl0YWJsZTJNaXJyb3JlZCc6ICdcXHVGODc3JyxcbiAgICAgICAgICAgICdCYXJDaGFydFZlcnRpY2FsRWRpdCc6ICdcXHVGODlEJyxcbiAgICAgICAgICAgICdHbG9iYWxOYXZCdXR0b25BY3RpdmUnOiAnXFx1Rjg5RicsXG4gICAgICAgICAgICAnUG9sbFJlc3VsdHMnOiAnXFx1RjhBMCcsXG4gICAgICAgICAgICAnUmVydW4nOiAnXFx1RjhBMScsXG4gICAgICAgICAgICAnUWFuZEEnOiAnXFx1RjhBMicsXG4gICAgICAgICAgICAnUWFuZEFNaXJyb3InOiAnXFx1RjhBMycsXG4gICAgICAgICAgICAnQm9va0Fuc3dlcnMnOiAnXFx1RjhBNCcsXG4gICAgICAgICAgICAnQWxlcnRTZXR0aW5ncyc6ICdcXHVGOEI2JyxcbiAgICAgICAgICAgICdUcmltU3RhcnQnOiAnXFx1RjhCQicsXG4gICAgICAgICAgICAnVHJpbUVuZCc6ICdcXHVGOEJDJyxcbiAgICAgICAgICAgICdUYWJsZUNvbXB1dGVkJzogJ1xcdUY4RjUnLFxuICAgICAgICAgICAgJ0RlY3JlYXNlSW5kZW50TGVnYWN5JzogJ1xcdUUyOTAnLFxuICAgICAgICAgICAgJ0luY3JlYXNlSW5kZW50TGVnYWN5JzogJ1xcdUUyOTEnLFxuICAgICAgICAgICAgJ1NpemVMZWdhY3knOiAnXFx1RTJCMidcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmVnaXN0ZXJJY29ucyhzdWJzZXQsIG9wdGlvbnMpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmFicmljLWljb25zLTE3LmpzLm1hcCIsImltcG9ydCB7IHJlZ2lzdGVySWNvbkFsaWFzIH0gZnJvbSAnQHVpZmFicmljL3N0eWxpbmcnO1xuZXhwb3J0IHZhciByZWdpc3Rlckljb25BbGlhc2VzID0gZnVuY3Rpb24gKCkge1xuICAgIHJlZ2lzdGVySWNvbkFsaWFzKCd0cmFzaCcsICdkZWxldGUnKTtcbiAgICByZWdpc3Rlckljb25BbGlhcygnb25lZHJpdmUnLCAnb25lZHJpdmVsb2dvJyk7XG4gICAgcmVnaXN0ZXJJY29uQWxpYXMoJ2FsZXJ0c29saWQxMicsICdldmVudGRhdGVtaXNzZWQxMicpO1xuICAgIHJlZ2lzdGVySWNvbkFsaWFzKCdzaXhwb2ludHN0YXInLCAnNnBvaW50c3RhcicpO1xuICAgIHJlZ2lzdGVySWNvbkFsaWFzKCd0d2VsdmVwb2ludHN0YXInLCAnMTJwb2ludHN0YXInKTtcbiAgICByZWdpc3Rlckljb25BbGlhcygndG9nZ2xlb24nLCAndG9nZ2xlbGVmdCcpO1xuICAgIHJlZ2lzdGVySWNvbkFsaWFzKCd0b2dnbGVvZmYnLCAndG9nZ2xlcmlnaHQnKTtcbn07XG5leHBvcnQgZGVmYXVsdCByZWdpc3Rlckljb25BbGlhc2VzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWNvbkFsaWFzZXMuanMubWFwIiwiLy8gRG8gbm90IG1vZGlmeSB0aGlzIGZpbGU7IGl0IGlzIGdlbmVyYXRlZCBhcyBwYXJ0IG9mIHB1Ymxpc2guXG4vLyBUaGUgY2hlY2tlZCBpbiB2ZXJzaW9uIGlzIGEgcGxhY2Vob2xkZXIgb25seSBhbmQgd2lsbCBub3QgYmUgdXBkYXRlZC5cbmltcG9ydCB7IHNldFZlcnNpb24gfSBmcm9tICdAdWlmYWJyaWMvc2V0LXZlcnNpb24nO1xuc2V0VmVyc2lvbignQHVpZmFicmljL2ljb25zJywgJzcuNS4xNicpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiLCJpbXBvcnQgeyBpbml0aWFsaXplSWNvbnMgYXMgaSB9IGZyb20gJy4vZmFicmljLWljb25zJztcbmltcG9ydCB7IGluaXRpYWxpemVJY29ucyBhcyBpMCB9IGZyb20gJy4vZmFicmljLWljb25zLTAnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUljb25zIGFzIGkxIH0gZnJvbSAnLi9mYWJyaWMtaWNvbnMtMSc7XG5pbXBvcnQgeyBpbml0aWFsaXplSWNvbnMgYXMgaTIgfSBmcm9tICcuL2ZhYnJpYy1pY29ucy0yJztcbmltcG9ydCB7IGluaXRpYWxpemVJY29ucyBhcyBpMyB9IGZyb20gJy4vZmFicmljLWljb25zLTMnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUljb25zIGFzIGk0IH0gZnJvbSAnLi9mYWJyaWMtaWNvbnMtNCc7XG5pbXBvcnQgeyBpbml0aWFsaXplSWNvbnMgYXMgaTUgfSBmcm9tICcuL2ZhYnJpYy1pY29ucy01JztcbmltcG9ydCB7IGluaXRpYWxpemVJY29ucyBhcyBpNiB9IGZyb20gJy4vZmFicmljLWljb25zLTYnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUljb25zIGFzIGk3IH0gZnJvbSAnLi9mYWJyaWMtaWNvbnMtNyc7XG5pbXBvcnQgeyBpbml0aWFsaXplSWNvbnMgYXMgaTggfSBmcm9tICcuL2ZhYnJpYy1pY29ucy04JztcbmltcG9ydCB7IGluaXRpYWxpemVJY29ucyBhcyBpOSB9IGZyb20gJy4vZmFicmljLWljb25zLTknO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUljb25zIGFzIGkxMCB9IGZyb20gJy4vZmFicmljLWljb25zLTEwJztcbmltcG9ydCB7IGluaXRpYWxpemVJY29ucyBhcyBpMTEgfSBmcm9tICcuL2ZhYnJpYy1pY29ucy0xMSc7XG5pbXBvcnQgeyBpbml0aWFsaXplSWNvbnMgYXMgaTEyIH0gZnJvbSAnLi9mYWJyaWMtaWNvbnMtMTInO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUljb25zIGFzIGkxMyB9IGZyb20gJy4vZmFicmljLWljb25zLTEzJztcbmltcG9ydCB7IGluaXRpYWxpemVJY29ucyBhcyBpMTQgfSBmcm9tICcuL2ZhYnJpYy1pY29ucy0xNCc7XG5pbXBvcnQgeyBpbml0aWFsaXplSWNvbnMgYXMgaTE1IH0gZnJvbSAnLi9mYWJyaWMtaWNvbnMtMTUnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUljb25zIGFzIGkxNiB9IGZyb20gJy4vZmFicmljLWljb25zLTE2JztcbmltcG9ydCB7IGluaXRpYWxpemVJY29ucyBhcyBpMTcgfSBmcm9tICcuL2ZhYnJpYy1pY29ucy0xNyc7XG5pbXBvcnQgeyByZWdpc3Rlckljb25BbGlhc2VzIH0gZnJvbSAnLi9pY29uQWxpYXNlcyc7XG52YXIgREVGQVVMVF9CQVNFX1VSTCA9ICdodHRwczovL3Nwb3Byb2QtYS5ha2FtYWloZC5uZXQvZmlsZXMvZmFicmljL2Fzc2V0cy9pY29ucy8nO1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVJY29ucyhiYXNlVXJsLCBvcHRpb25zKSB7XG4gICAgaWYgKGJhc2VVcmwgPT09IHZvaWQgMCkgeyBiYXNlVXJsID0gREVGQVVMVF9CQVNFX1VSTDsgfVxuICAgIFtcbiAgICAgICAgaSxcbiAgICAgICAgaTAsXG4gICAgICAgIGkxLFxuICAgICAgICBpMixcbiAgICAgICAgaTMsXG4gICAgICAgIGk0LFxuICAgICAgICBpNSxcbiAgICAgICAgaTYsXG4gICAgICAgIGk3LFxuICAgICAgICBpOCxcbiAgICAgICAgaTksXG4gICAgICAgIGkxMCxcbiAgICAgICAgaTExLFxuICAgICAgICBpMTIsXG4gICAgICAgIGkxMyxcbiAgICAgICAgaTE0LFxuICAgICAgICBpMTUsXG4gICAgICAgIGkxNixcbiAgICAgICAgaTE3LFxuICAgIF0uZm9yRWFjaChmdW5jdGlvbiAoaW5pdGlhbGl6ZSkgeyByZXR1cm4gaW5pdGlhbGl6ZShiYXNlVXJsLCBvcHRpb25zKTsgfSk7XG4gICAgcmVnaXN0ZXJJY29uQWxpYXNlcygpO1xufVxuaW1wb3J0ICcuL3ZlcnNpb24nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gXCJyZWFjdC1kb21cIjtcclxuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vYXBwXCI7XHJcbmltcG9ydCB7IGluaXRpYWxpemVJY29ucyB9IGZyb20gJ0BmbHVlbnR1aS9yZWFjdC9saWIvSWNvbnMnO1xyXG5pbml0aWFsaXplSWNvbnMoKTtcclxudmFyIHJvb3RFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb290XCIpO1xyXG5yZW5kZXIoUmVhY3QuY3JlYXRlRWxlbWVudChBcHAsIG51bGwpLCByb290RWxlbWVudCk7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIsIFJvdXRlLCBTd2l0Y2ggfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHsgc3RvcmUgfSBmcm9tICcuL3N0b3JlL2NvbmZpZ3VyZVN0b3JlJztcclxuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSAnLi9jb21wb25lbnRzL3ZlaGljbGUvY29udGFpbmVyJztcclxuaW1wb3J0IHsgRGV0YWlsIH0gZnJvbSAnLi9jb21wb25lbnRzL3ZlaGljbGUvZGV0YWlsJztcclxuaW1wb3J0IHsgRGV0YWlsIGFzIENsaWVudERldGFpbCB9IGZyb20gJy4vY29tcG9uZW50cy9jbGllbnQvZGV0YWlsJztcclxuaW1wb3J0IHsgTmF2YmFyIH0gZnJvbSAnLi9jb21wb25lbnRzL2xheW91dC9uYXZiYXInO1xyXG5pbXBvcnQgeyBDb250YWN0IH0gZnJvbSAnLi9jb21wb25lbnRzL2NvbnRhY3QnO1xyXG5pbXBvcnQgeyBBYm91dCB9IGZyb20gJy4vY29tcG9uZW50cy9hYm91dCc7XHJcbmltcG9ydCB7IENsaWVudHMgfSBmcm9tICcuL2NvbXBvbmVudHMvY2xpZW50L2NsaWVudHMnO1xyXG5pbXBvcnQgeyBDcmVhdGUgfSBmcm9tICcuL2NvbXBvbmVudHMvY2xpZW50L2NyZWF0ZSc7XHJcbmV4cG9ydCB2YXIgQXBwID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoUHJvdmlkZXIsIHsgc3RvcmU6IHN0b3JlIH0sXHJcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEJyb3dzZXJSb3V0ZXIsIG51bGwsXHJcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChOYXZiYXIsIG51bGwpLFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU3dpdGNoLCBudWxsLFxyXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7IGV4YWN0OiB0cnVlLCBwYXRoOiBcIi9cIiwgY29tcG9uZW50OiBDb250YWluZXIgfSksXHJcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHsgcGF0aDogXCIvZGV0YWlsLzppZFwiLCBjb21wb25lbnQ6IERldGFpbCB9KSxcclxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwgeyBwYXRoOiBcIi9jb250YWN0XCIsIGNvbXBvbmVudDogQ29udGFjdCB9KSxcclxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwgeyBwYXRoOiBcIi9hYm91dFwiLCBjb21wb25lbnQ6IEFib3V0IH0pLFxyXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7IHBhdGg6IFwiL2NsaWVudHNcIiwgY29tcG9uZW50OiBDbGllbnRzIH0pLFxyXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7IHBhdGg6IFwiL2NsaWVudC1kZXRhaWwvOmlkXCIsIGNvbXBvbmVudDogQ2xpZW50RGV0YWlsIH0pLFxyXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7IHBhdGg6IFwiL2NsaWVudC1jcmVhdGVcIiwgY29tcG9uZW50OiBDcmVhdGUgfSkpKSkpOyB9O1xyXG4iXSwic291cmNlUm9vdCI6IiJ9